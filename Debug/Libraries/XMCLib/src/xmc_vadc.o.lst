   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GROUP_ExternalMuxControlInit:
  23              	.LFB90:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2019-03-30
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2019-03-30:
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GROUP_GetChannelAlias()
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** */
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
1877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
1883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
1999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
2000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  }
2001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 2617 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 84B0     	 sub sp,sp,#16
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 24
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
2618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  40              	 .loc 1 2622 0
  41 000a 3B1C     	 mov r3,r7
  42 000c 1B78     	 ldrb r3,[r3]
  43 000e 5B07     	 lsl r3,r3,#29
  44 0010 5B0F     	 lsr r3,r3,#29
  45 0012 DBB2     	 uxtb r3,r3
  46 0014 1A1C     	 mov r2,r3
2623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  47              	 .loc 1 2623 0
  48 0016 BB1C     	 add r3,r7,#2
  49 0018 1B88     	 ldrh r3,[r3]
  50 001a 9B05     	 lsl r3,r3,#22
  51 001c 9B0D     	 lsr r3,r3,#22
  52 001e 9BB2     	 uxth r3,r3
  53 0020 1B04     	 lsl r3,r3,#16
2622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2622 0
  55 0022 1343     	 orr r3,r2
  56 0024 FB60     	 str r3,[r7,#12]
2624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2625 0
  58 0026 7A68     	 ldr r2,[r7,#4]
  59 0028 F823     	 mov r3,#248
  60 002a 5B00     	 lsl r3,r3,#1
  61 002c F968     	 ldr r1,[r7,#12]
  62 002e D150     	 str r1,[r2,r3]
2626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  63              	 .loc 1 2626 0
  64 0030 FB1C     	 add r3,r7,#3
  65 0032 1B78     	 ldrb r3,[r3]
  66 0034 DB06     	 lsl r3,r3,#27
  67 0036 DB0F     	 lsr r3,r3,#31
  68 0038 DBB2     	 uxtb r3,r3
  69 003a 1A07     	 lsl r2,r3,#28
2627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  70              	 .loc 1 2627 0
  71 003c FB1C     	 add r3,r7,#3
  72 003e 1B78     	 ldrb r3,[r3]
  73 0040 1B07     	 lsl r3,r3,#28
  74 0042 9B0F     	 lsr r3,r3,#30
  75 0044 DBB2     	 uxtb r3,r3
  76 0046 9B06     	 lsl r3,r3,#26
2626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  77              	 .loc 1 2626 0
  78 0048 1A43     	 orr r2,r3
2628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  79              	 .loc 1 2628 0
  80 004a FB1C     	 add r3,r7,#3
  81 004c 1B78     	 ldrb r3,[r3]
  82 004e 9B06     	 lsl r3,r3,#26
  83 0050 DB0F     	 lsr r3,r3,#31
  84 0052 DBB2     	 uxtb r3,r3
  85 0054 5B07     	 lsl r3,r3,#29
2626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  86              	 .loc 1 2626 0
  87 0056 1343     	 orr r3,r2
  88 0058 FB60     	 str r3,[r7,#12]
2629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  89              	 .loc 1 2631 0
  90 005a FB1C     	 add r3,r7,#3
  91 005c 1B78     	 ldrb r3,[r3]
  92 005e 5B06     	 lsl r3,r3,#25
  93 0060 DB0F     	 lsr r3,r3,#31
  94 0062 DBB2     	 uxtb r3,r3
  95 0064 9B07     	 lsl r3,r3,#30
  96 0066 FA68     	 ldr r2,[r7,#12]
  97 0068 1343     	 orr r3,r2
  98 006a FB60     	 str r3,[r7,#12]
2632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  99              	 .loc 1 2633 0
 100 006c 7A68     	 ldr r2,[r7,#4]
 101 006e F823     	 mov r3,#248
 102 0070 5B00     	 lsl r3,r3,#1
 103 0072 D258     	 ldr r2,[r2,r3]
 104 0074 FB68     	 ldr r3,[r7,#12]
 105 0076 1343     	 orr r3,r2
 106 0078 8022     	 mov r2,#128
 107 007a 1206     	 lsl r2,r2,#24
 108 007c 1A43     	 orr r2,r3
 109 007e 111C     	 mov r1,r2
 110 0080 7A68     	 ldr r2,[r7,#4]
 111 0082 F823     	 mov r3,#248
 112 0084 5B00     	 lsl r3,r3,#1
 113 0086 D150     	 str r1,[r2,r3]
2634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 114              	 .loc 1 2634 0
 115 0088 BD46     	 mov sp,r7
 116 008a 04B0     	 add sp,sp,#16
 117              	 
 118 008c 80BD     	 pop {r7,pc}
 119              	 .cfi_endproc
 120              	.LFE90:
 122 008e C046     	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 123              	 .align 2
 124              	 .code 16
 125              	 .thumb_func
 127              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 128              	.LFB93:
2635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 129              	 .loc 1 2746 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 82B0     	 sub sp,sp,#8
 137              	.LCFI4:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI5:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
2747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 143              	 .loc 1 2748 0
 144 0008 7B68     	 ldr r3,[r7,#4]
 145 000a 8422     	 mov r2,#132
 146 000c 9B58     	 ldr r3,[r3,r2]
 147 000e 8022     	 mov r2,#128
 148 0010 9204     	 lsl r2,r2,#18
 149 0012 1A43     	 orr r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 8421     	 mov r1,#132
 152 0018 5A50     	 str r2,[r3,r1]
2749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 153              	 .loc 1 2749 0
 154 001a BD46     	 mov sp,r7
 155 001c 02B0     	 add sp,sp,#8
 156              	 
 157 001e 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE93:
 161              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 167              	.LFB94:
2750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 168              	 .loc 1 2767 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI7:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI8:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 182              	 .loc 1 2769 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 8422     	 mov r2,#132
 185 000c 9B58     	 ldr r3,[r3,r2]
 186 000e 044A     	 ldr r2,.L4
 187 0010 1A40     	 and r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 8421     	 mov r1,#132
 190 0016 5A50     	 str r2,[r3,r1]
2770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 191              	 .loc 1 2770 0
 192 0018 BD46     	 mov sp,r7
 193 001a 02B0     	 add sp,sp,#8
 194              	 
 195 001c 80BD     	 pop {r7,pc}
 196              	.L5:
 197 001e C046     	 .align 2
 198              	.L4:
 199 0020 FFFFFFFD 	 .word -33554433
 200              	 .cfi_endproc
 201              	.LFE94:
 203              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB110:
2771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
2977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
2982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
2983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
3001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
3003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3267 0
 211              	 .cfi_startproc
 212 0000 80B5     	 push {r7,lr}
 213              	.LCFI9:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 7,-8
 216              	 .cfi_offset 14,-4
 217 0002 82B0     	 sub sp,sp,#8
 218              	.LCFI10:
 219              	 .cfi_def_cfa_offset 16
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI11:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
3268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 224              	 .loc 1 3269 0
 225 0008 7B68     	 ldr r3,[r7,#4]
 226 000a 8422     	 mov r2,#132
 227 000c 9B58     	 ldr r3,[r3,r2]
 228 000e 8022     	 mov r2,#128
 229 0010 D204     	 lsl r2,r2,#19
 230 0012 1A43     	 orr r2,r3
 231 0014 7B68     	 ldr r3,[r7,#4]
 232 0016 8421     	 mov r1,#132
 233 0018 5A50     	 str r2,[r3,r1]
3270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 234              	 .loc 1 3270 0
 235 001a BD46     	 mov sp,r7
 236 001c 02B0     	 add sp,sp,#8
 237              	 
 238 001e 80BD     	 pop {r7,pc}
 239              	 .cfi_endproc
 240              	.LFE110:
 242              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 243              	 .align 2
 244              	 .code 16
 245              	 .thumb_func
 247              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 248              	.LFB111:
3271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 249              	 .loc 1 3289 0
 250              	 .cfi_startproc
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI12:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI14:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3291 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a 8422     	 mov r2,#132
 266 000c 9B58     	 ldr r3,[r3,r2]
 267 000e 044A     	 ldr r2,.L8
 268 0010 1A40     	 and r2,r3
 269 0012 7B68     	 ldr r3,[r7,#4]
 270 0014 8421     	 mov r1,#132
 271 0016 5A50     	 str r2,[r3,r1]
3292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 272              	 .loc 1 3292 0
 273 0018 BD46     	 mov sp,r7
 274 001a 02B0     	 add sp,sp,#8
 275              	 
 276 001c 80BD     	 pop {r7,pc}
 277              	.L9:
 278 001e C046     	 .align 2
 279              	.L8:
 280 0020 FFFFFFFB 	 .word -67108865
 281              	 .cfi_endproc
 282              	.LFE111:
 284              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 285              	 .align 2
 286              	 .code 16
 287              	 .thumb_func
 289              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 290              	.LFB128:
3293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 291              	 .loc 1 3816 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI15:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI17:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
3817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 305              	 .loc 1 3818 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 8422     	 mov r2,#132
 308 000c 9B58     	 ldr r3,[r3,r2]
 309 000e 8022     	 mov r2,#128
 310 0010 5204     	 lsl r2,r2,#17
 311 0012 1A43     	 orr r2,r3
 312 0014 7B68     	 ldr r3,[r7,#4]
 313 0016 8421     	 mov r1,#132
 314 0018 5A50     	 str r2,[r3,r1]
3819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 315              	 .loc 1 3819 0
 316 001a BD46     	 mov sp,r7
 317 001c 02B0     	 add sp,sp,#8
 318              	 
 319 001e 80BD     	 pop {r7,pc}
 320              	 .cfi_endproc
 321              	.LFE128:
 323              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 324              	 .align 2
 325              	 .code 16
 326              	 .thumb_func
 328              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 329              	.LFB129:
3820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 330              	 .loc 1 3837 0
 331              	 .cfi_startproc
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI18:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI19:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI20:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
3838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 344              	 .loc 1 3839 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 8422     	 mov r2,#132
 347 000c 9B58     	 ldr r3,[r3,r2]
 348 000e 044A     	 ldr r2,.L12
 349 0010 1A40     	 and r2,r3
 350 0012 7B68     	 ldr r3,[r7,#4]
 351 0014 8421     	 mov r1,#132
 352 0016 5A50     	 str r2,[r3,r1]
3840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 353              	 .loc 1 3840 0
 354 0018 BD46     	 mov sp,r7
 355 001a 02B0     	 add sp,sp,#8
 356              	 
 357 001c 80BD     	 pop {r7,pc}
 358              	.L13:
 359 001e C046     	 .align 2
 360              	.L12:
 361 0020 FFFFFFFE 	 .word -16777217
 362              	 .cfi_endproc
 363              	.LFE129:
 365              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 366              	 .align 2
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_VADC_GROUP_QueueFlushEntries:
 371              	.LFB133:
3841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
3975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
3978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
3998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** {
 372              	 .loc 1 4031 0
 373              	 .cfi_startproc
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI21:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI22:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI23:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
4032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 386              	 .loc 1 4033 0
 387 0008 7A68     	 ldr r2,[r7,#4]
 388 000a 8223     	 mov r3,#130
 389 000c 5B00     	 lsl r3,r3,#1
 390 000e D358     	 ldr r3,[r2,r3]
 391 0010 8022     	 mov r2,#128
 392 0012 D200     	 lsl r2,r2,#3
 393 0014 1A43     	 orr r2,r3
 394 0016 111C     	 mov r1,r2
 395 0018 7A68     	 ldr r2,[r7,#4]
 396 001a 8223     	 mov r3,#130
 397 001c 5B00     	 lsl r3,r3,#1
 398 001e D150     	 str r1,[r2,r3]
4034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** 
4035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 399              	 .loc 1 4035 0
 400 0020 C046     	 mov r8,r8
 401              	.L15:
 402              	 .loc 1 4035 0 is_stmt 0 discriminator 1
 403 0022 7A68     	 ldr r2,[r7,#4]
 404 0024 8423     	 mov r3,#132
 405 0026 5B00     	 lsl r3,r3,#1
 406 0028 D358     	 ldr r3,[r2,r3]
 407 002a 2022     	 mov r2,#32
 408 002c 1340     	 and r3,r2
 409 002e F8D0     	 beq .L15
4036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_vadc.h **** }
 410              	 .loc 1 4039 0 is_stmt 1
 411 0030 BD46     	 mov sp,r7
 412 0032 02B0     	 add sp,sp,#8
 413              	 
 414 0034 80BD     	 pop {r7,pc}
 415              	 .cfi_endproc
 416              	.LFE133:
 418 0036 C046     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 419              	 .align 2
 422              	g_xmc_vadc_group_array:
 423 0000 00040348 	 .word 1208157184
 424 0004 00080348 	 .word 1208158208
 425              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_VADC_GLOBAL_EnableModule
 428              	 .code 16
 429              	 .thumb_func
 431              	XMC_VADC_GLOBAL_EnableModule:
 432              	.LFB157:
 433              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2019-05-07
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2017-01-11:
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  91:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2018-06-26:
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed XMC_VADC_GLOBAL_StartupCalibration(), added wait until calibration is started
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  95:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-03-30:
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Changed XMC_VADC_GROUP_SetChannelAlias() to inline function
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2019-05-07:
  99:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix compilation warnings
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
 102:../Libraries/XMCLib/src/xmc_vadc.c ****  *
 103:../Libraries/XMCLib/src/xmc_vadc.c ****  */
 104:../Libraries/XMCLib/src/xmc_vadc.c **** 
 105:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 106:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
 107:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
 109:../Libraries/XMCLib/src/xmc_vadc.c **** 
 110:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 111:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 113:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 114:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 115:../Libraries/XMCLib/src/xmc_vadc.c **** 
 116:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 117:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 120:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 121:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 122:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 123:../Libraries/XMCLib/src/xmc_vadc.c **** 
 124:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 125:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 126:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 127:../Libraries/XMCLib/src/xmc_vadc.c **** 
 128:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 129:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 130:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 131:../Libraries/XMCLib/src/xmc_vadc.c **** 
 132:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 133:../Libraries/XMCLib/src/xmc_vadc.c **** 
 134:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 135:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 136:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 137:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 138:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 139:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 140:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 141:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 142:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 143:../Libraries/XMCLib/src/xmc_vadc.c **** 
 144:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 145:../Libraries/XMCLib/src/xmc_vadc.c **** 
 146:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 147:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 148:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 149:../Libraries/XMCLib/src/xmc_vadc.c **** 
 150:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 151:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 152:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 153:../Libraries/XMCLib/src/xmc_vadc.c **** 
 154:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 155:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 156:../Libraries/XMCLib/src/xmc_vadc.c **** {
 434              	 .loc 2 156 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI24:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 00AF     	 add r7,sp,#0
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 7
 157:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 158:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 159:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 160:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 161:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 162:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 163:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 164:../Libraries/XMCLib/src/xmc_vadc.c **** 
 165:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 166:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 167:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 168:../Libraries/XMCLib/src/xmc_vadc.c **** 
 169:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 444              	 .loc 2 170 0
 445 0004 0120     	 mov r0,#1
 446 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 171:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 173:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 177:../Libraries/XMCLib/src/xmc_vadc.c **** }
 447              	 .loc 2 177 0
 448 000a BD46     	 mov sp,r7
 449              	 
 450 000c 80BD     	 pop {r7,pc}
 451              	 .cfi_endproc
 452              	.LFE157:
 454 000e C046     	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 455              	 .align 2
 456              	 .global XMC_VADC_GLOBAL_DisableModule
 457              	 .code 16
 458              	 .thumb_func
 460              	XMC_VADC_GLOBAL_DisableModule:
 461              	.LFB158:
 178:../Libraries/XMCLib/src/xmc_vadc.c **** 
 179:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 180:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 181:../Libraries/XMCLib/src/xmc_vadc.c **** {
 462              	 .loc 2 181 0
 463              	 .cfi_startproc
 464 0000 80B5     	 push {r7,lr}
 465              	.LCFI26:
 466              	 .cfi_def_cfa_offset 8
 467              	 .cfi_offset 7,-8
 468              	 .cfi_offset 14,-4
 469 0002 00AF     	 add r7,sp,#0
 470              	.LCFI27:
 471              	 .cfi_def_cfa_register 7
 182:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 183:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 184:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 185:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 188:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 472              	 .loc 2 188 0
 473 0004 0120     	 mov r0,#1
 474 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 189:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 190:../Libraries/XMCLib/src/xmc_vadc.c **** 
 191:../Libraries/XMCLib/src/xmc_vadc.c **** }
 475              	 .loc 2 191 0
 476 000a BD46     	 mov sp,r7
 477              	 
 478 000c 80BD     	 pop {r7,pc}
 479              	 .cfi_endproc
 480              	.LFE158:
 482 000e C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 483              	 .align 2
 484              	 .global XMC_VADC_GLOBAL_Init
 485              	 .code 16
 486              	 .thumb_func
 488              	XMC_VADC_GLOBAL_Init:
 489              	.LFB159:
 192:../Libraries/XMCLib/src/xmc_vadc.c **** 
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 195:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 196:../Libraries/XMCLib/src/xmc_vadc.c **** {
 490              	 .loc 2 196 0
 491              	 .cfi_startproc
 492 0000 80B5     	 push {r7,lr}
 493              	.LCFI28:
 494              	 .cfi_def_cfa_offset 8
 495              	 .cfi_offset 7,-8
 496              	 .cfi_offset 14,-4
 497 0002 82B0     	 sub sp,sp,#8
 498              	.LCFI29:
 499              	 .cfi_def_cfa_offset 16
 500 0004 00AF     	 add r7,sp,#0
 501              	.LCFI30:
 502              	 .cfi_def_cfa_register 7
 503 0006 7860     	 str r0,[r7,#4]
 504 0008 3960     	 str r1,[r7]
 197:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 198:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 199:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 200:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 201:../Libraries/XMCLib/src/xmc_vadc.c **** 
 202:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 203:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 505              	 .loc 2 203 0
 506 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 204:../Libraries/XMCLib/src/xmc_vadc.c **** 
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 507              	 .loc 2 205 0
 508 000e 3B68     	 ldr r3,[r7]
 509 0010 5A69     	 ldr r2,[r3,#20]
 510 0012 7B68     	 ldr r3,[r7,#4]
 511 0014 1A60     	 str r2,[r3]
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c **** 
 209:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 210:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 512              	 .loc 2 210 0
 513 0016 3B68     	 ldr r3,[r7]
 514 0018 5B68     	 ldr r3,[r3,#4]
 515 001a 8022     	 mov r2,#128
 516 001c 1202     	 lsl r2,r2,#8
 517 001e 1A43     	 orr r2,r3
 518 0020 7B68     	 ldr r3,[r7,#4]
 519 0022 8021     	 mov r1,#128
 520 0024 5A50     	 str r2,[r3,r1]
 211:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 214:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 521              	 .loc 2 214 0
 522 0026 3B68     	 ldr r3,[r7]
 523 0028 9A68     	 ldr r2,[r3,#8]
 524 002a 7B68     	 ldr r3,[r7,#4]
 525 002c A021     	 mov r1,#160
 526 002e 5A50     	 str r2,[r3,r1]
 215:../Libraries/XMCLib/src/xmc_vadc.c **** 
 216:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 217:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 527              	 .loc 2 217 0
 528 0030 3B68     	 ldr r3,[r7]
 529 0032 DA68     	 ldr r2,[r3,#12]
 530 0034 7B68     	 ldr r3,[r7,#4]
 531 0036 A421     	 mov r1,#164
 532 0038 5A50     	 str r2,[r3,r1]
 218:../Libraries/XMCLib/src/xmc_vadc.c **** 
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 533              	 .loc 2 221 0
 534 003a 3B68     	 ldr r3,[r7]
 535 003c 1969     	 ldr r1,[r3,#16]
 536 003e 7A68     	 ldr r2,[r7,#4]
 537 0040 A023     	 mov r3,#160
 538 0042 9B00     	 lsl r3,r3,#2
 539 0044 D150     	 str r1,[r2,r3]
 222:../Libraries/XMCLib/src/xmc_vadc.c **** 
 223:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 224:../Libraries/XMCLib/src/xmc_vadc.c **** 
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 540              	 .loc 2 226 0
 541 0046 3B68     	 ldr r3,[r7]
 542 0048 1A68     	 ldr r2,[r3]
 543 004a 7B68     	 ldr r3,[r7,#4]
 544 004c B821     	 mov r1,#184
 545 004e 5A50     	 str r2,[r3,r1]
 227:../Libraries/XMCLib/src/xmc_vadc.c **** 
 228:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 229:../Libraries/XMCLib/src/xmc_vadc.c **** 
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 231:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 232:../Libraries/XMCLib/src/xmc_vadc.c **** 
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 234:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 235:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 236:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 237:../Libraries/XMCLib/src/xmc_vadc.c **** 
 238:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 239:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 240:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 241:../Libraries/XMCLib/src/xmc_vadc.c **** 
 242:../Libraries/XMCLib/src/xmc_vadc.c **** }
 546              	 .loc 2 242 0
 547 0050 BD46     	 mov sp,r7
 548 0052 02B0     	 add sp,sp,#8
 549              	 
 550 0054 80BD     	 pop {r7,pc}
 551              	 .cfi_endproc
 552              	.LFE159:
 554 0056 C046     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 555              	 .align 2
 556              	 .global XMC_VADC_GLOBAL_InputClassInit
 557              	 .code 16
 558              	 .thumb_func
 560              	XMC_VADC_GLOBAL_InputClassInit:
 561              	.LFB160:
 243:../Libraries/XMCLib/src/xmc_vadc.c **** 
 244:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 245:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 246:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 247:../Libraries/XMCLib/src/xmc_vadc.c **** {
 562              	 .loc 2 247 0
 563              	 .cfi_startproc
 564 0000 80B5     	 push {r7,lr}
 565              	.LCFI31:
 566              	 .cfi_def_cfa_offset 8
 567              	 .cfi_offset 7,-8
 568              	 .cfi_offset 14,-4
 569 0002 84B0     	 sub sp,sp,#16
 570              	.LCFI32:
 571              	 .cfi_def_cfa_offset 24
 572 0004 00AF     	 add r7,sp,#0
 573              	.LCFI33:
 574              	 .cfi_def_cfa_register 7
 575 0006 F860     	 str r0,[r7,#12]
 576 0008 B960     	 str r1,[r7,#8]
 577 000a 3B60     	 str r3,[r7]
 578 000c FB1D     	 add r3,r7,#7
 579 000e 1A70     	 strb r2,[r3]
 248:../Libraries/XMCLib/src/xmc_vadc.c **** 
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 250:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 252:../Libraries/XMCLib/src/xmc_vadc.c **** 
 253:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 580              	 .loc 2 254 0
 581 0010 FB1D     	 add r3,r7,#7
 582 0012 1B78     	 ldrb r3,[r3]
 583 0014 002B     	 cmp r3,#0
 584 0016 09D1     	 bne .L20
 255:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 256:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 257:../Libraries/XMCLib/src/xmc_vadc.c **** 	XMC_UNUSED_ARG(conv_type);
 258:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 585              	 .loc 2 258 0
 586 0018 BB68     	 ldr r3,[r7,#8]
 587 001a 0A4A     	 ldr r2,.L22
 588 001c 1340     	 and r3,r2
 589 001e 191C     	 mov r1,r3
 590 0020 FB68     	 ldr r3,[r7,#12]
 591 0022 3A68     	 ldr r2,[r7]
 592 0024 2832     	 add r2,r2,#40
 593 0026 9200     	 lsl r2,r2,#2
 594 0028 D150     	 str r1,[r2,r3]
 595 002a 08E0     	 b .L19
 596              	.L20:
 259:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 260:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 261:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 262:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 263:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 264:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 597              	 .loc 2 264 0
 598 002c BB68     	 ldr r3,[r7,#8]
 599 002e 064A     	 ldr r2,.L22+4
 600 0030 1340     	 and r3,r2
 601 0032 191C     	 mov r1,r3
 602 0034 FB68     	 ldr r3,[r7,#12]
 603 0036 3A68     	 ldr r2,[r7]
 604 0038 2832     	 add r2,r2,#40
 605 003a 9200     	 lsl r2,r2,#2
 606 003c D150     	 str r1,[r2,r3]
 607              	.L19:
 265:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 266:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 267:../Libraries/XMCLib/src/xmc_vadc.c **** }
 608              	 .loc 2 267 0
 609 003e BD46     	 mov sp,r7
 610 0040 04B0     	 add sp,sp,#16
 611              	 
 612 0042 80BD     	 pop {r7,pc}
 613              	.L23:
 614              	 .align 2
 615              	.L22:
 616 0044 1F070000 	 .word 1823
 617 0048 00001F07 	 .word 119472128
 618              	 .cfi_endproc
 619              	.LFE160:
 621              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 622              	 .align 2
 623              	 .global XMC_VADC_GLOBAL_StartupCalibration
 624              	 .code 16
 625              	 .thumb_func
 627              	XMC_VADC_GLOBAL_StartupCalibration:
 628              	.LFB161:
 268:../Libraries/XMCLib/src/xmc_vadc.c **** 
 269:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 270:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 271:../Libraries/XMCLib/src/xmc_vadc.c **** {
 629              	 .loc 2 271 0
 630              	 .cfi_startproc
 631 0000 80B5     	 push {r7,lr}
 632              	.LCFI34:
 633              	 .cfi_def_cfa_offset 8
 634              	 .cfi_offset 7,-8
 635              	 .cfi_offset 14,-4
 636 0002 84B0     	 sub sp,sp,#16
 637              	.LCFI35:
 638              	 .cfi_def_cfa_offset 24
 639 0004 00AF     	 add r7,sp,#0
 640              	.LCFI36:
 641              	 .cfi_def_cfa_register 7
 642 0006 7860     	 str r0,[r7,#4]
 272:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 273:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 274:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 275:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 276:../Libraries/XMCLib/src/xmc_vadc.c ****   
 277:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 278:../Libraries/XMCLib/src/xmc_vadc.c **** 
 279:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 643              	 .loc 2 279 0
 644 0008 7B68     	 ldr r3,[r7,#4]
 645 000a 8022     	 mov r2,#128
 646 000c 9B58     	 ldr r3,[r3,r2]
 647 000e 8022     	 mov r2,#128
 648 0010 1206     	 lsl r2,r2,#24
 649 0012 1A43     	 orr r2,r3
 650 0014 7B68     	 ldr r3,[r7,#4]
 651 0016 8021     	 mov r1,#128
 652 0018 5A50     	 str r2,[r3,r1]
 280:../Libraries/XMCLib/src/xmc_vadc.c **** 
 281:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 282:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 653              	 .loc 2 283 0
 654 001a 0F23     	 mov r3,#15
 655 001c FB18     	 add r3,r7,r3
 656 001e 0022     	 mov r2,#0
 657 0020 1A70     	 strb r2,[r3]
 658 0022 1DE0     	 b .L25
 659              	.L29:
 284:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 285:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 660              	 .loc 2 285 0
 661 0024 0F23     	 mov r3,#15
 662 0026 FB18     	 add r3,r7,r3
 663 0028 1A78     	 ldrb r2,[r3]
 664 002a 114B     	 ldr r3,.L30
 665 002c 9200     	 lsl r2,r2,#2
 666 002e D358     	 ldr r3,[r2,r3]
 667 0030 BB60     	 str r3,[r7,#8]
 286:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 668              	 .loc 2 286 0
 669 0032 BB68     	 ldr r3,[r7,#8]
 670 0034 8022     	 mov r2,#128
 671 0036 9A58     	 ldr r2,[r3,r2]
 672 0038 C023     	 mov r3,#192
 673 003a 9B02     	 lsl r3,r3,#10
 674 003c 1340     	 and r3,r2
 675 003e 08D0     	 beq .L26
 287:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 288:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 289:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 676              	 .loc 2 289 0
 677 0040 00E0     	 b .L27
 678              	.L28:
 290:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 291:../Libraries/XMCLib/src/xmc_vadc.c ****         __NOP();
 679              	 .loc 2 291 0
 680              	
 681 0042 C046     	 nop
 682              	
 683              	 .code 16
 684              	.L27:
 289:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 685              	 .loc 2 289 0
 686 0044 BB68     	 ldr r3,[r7,#8]
 687 0046 8022     	 mov r2,#128
 688 0048 9A58     	 ldr r2,[r3,r2]
 689 004a 8023     	 mov r3,#128
 690 004c 5B05     	 lsl r3,r3,#21
 691 004e 1340     	 and r3,r2
 692 0050 F7D1     	 bne .L28
 693              	.L26:
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 694              	 .loc 2 283 0 discriminator 2
 695 0052 0F23     	 mov r3,#15
 696 0054 FB18     	 add r3,r7,r3
 697 0056 1A78     	 ldrb r2,[r3]
 698 0058 0F23     	 mov r3,#15
 699 005a FB18     	 add r3,r7,r3
 700 005c 0132     	 add r2,r2,#1
 701 005e 1A70     	 strb r2,[r3]
 702              	.L25:
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 703              	 .loc 2 283 0 is_stmt 0 discriminator 1
 704 0060 0F23     	 mov r3,#15
 705 0062 FB18     	 add r3,r7,r3
 706 0064 1B78     	 ldrb r3,[r3]
 707 0066 012B     	 cmp r3,#1
 708 0068 DCD9     	 bls .L29
 292:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 293:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 294:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 295:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 296:../Libraries/XMCLib/src/xmc_vadc.c **** 
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until calibration is started */
 298:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
 299:../Libraries/XMCLib/src/xmc_vadc.c **** 		  XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
 300:../Libraries/XMCLib/src/xmc_vadc.c ****    {
 301:../Libraries/XMCLib/src/xmc_vadc.c ****      __NOP();
 302:../Libraries/XMCLib/src/xmc_vadc.c ****    }
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 304:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 305:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 307:../Libraries/XMCLib/src/xmc_vadc.c ****     __NOP();
 308:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 309:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 310:../Libraries/XMCLib/src/xmc_vadc.c **** }
 709              	 .loc 2 310 0 is_stmt 1
 710 006a BD46     	 mov sp,r7
 711 006c 04B0     	 add sp,sp,#16
 712              	 
 713 006e 80BD     	 pop {r7,pc}
 714              	.L31:
 715              	 .align 2
 716              	.L30:
 717 0070 00000000 	 .word g_xmc_vadc_group_array
 718              	 .cfi_endproc
 719              	.LFE161:
 721              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 722              	 .align 2
 723              	 .global XMC_VADC_GLOBAL_SetBoundaries
 724              	 .code 16
 725              	 .thumb_func
 727              	XMC_VADC_GLOBAL_SetBoundaries:
 728              	.LFB162:
 311:../Libraries/XMCLib/src/xmc_vadc.c **** 
 312:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 313:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 314:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 315:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 316:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 317:../Libraries/XMCLib/src/xmc_vadc.c **** {
 729              	 .loc 2 317 0
 730              	 .cfi_startproc
 731 0000 80B5     	 push {r7,lr}
 732              	.LCFI37:
 733              	 .cfi_def_cfa_offset 8
 734              	 .cfi_offset 7,-8
 735              	 .cfi_offset 14,-4
 736 0002 86B0     	 sub sp,sp,#24
 737              	.LCFI38:
 738              	 .cfi_def_cfa_offset 32
 739 0004 00AF     	 add r7,sp,#0
 740              	.LCFI39:
 741              	 .cfi_def_cfa_register 7
 742 0006 F860     	 str r0,[r7,#12]
 743 0008 B960     	 str r1,[r7,#8]
 744 000a 7A60     	 str r2,[r7,#4]
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 319:../Libraries/XMCLib/src/xmc_vadc.c **** 
 320:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 321:../Libraries/XMCLib/src/xmc_vadc.c **** 
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 745              	 .loc 2 322 0
 746 000c 0023     	 mov r3,#0
 747 000e 7B61     	 str r3,[r7,#20]
 323:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 748              	 .loc 2 323 0
 749 0010 7A69     	 ldr r2,[r7,#20]
 750 0012 BB68     	 ldr r3,[r7,#8]
 751 0014 1343     	 orr r3,r2
 752 0016 7B61     	 str r3,[r7,#20]
 324:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 753              	 .loc 2 324 0
 754 0018 7B68     	 ldr r3,[r7,#4]
 755 001a 1B04     	 lsl r3,r3,#16
 756 001c 7A69     	 ldr r2,[r7,#20]
 757 001e 1343     	 orr r3,r2
 758 0020 7B61     	 str r3,[r7,#20]
 325:../Libraries/XMCLib/src/xmc_vadc.c **** 
 326:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 759              	 .loc 2 326 0
 760 0022 FB68     	 ldr r3,[r7,#12]
 761 0024 B821     	 mov r1,#184
 762 0026 7A69     	 ldr r2,[r7,#20]
 763 0028 5A50     	 str r2,[r3,r1]
 327:../Libraries/XMCLib/src/xmc_vadc.c **** }
 764              	 .loc 2 327 0
 765 002a BD46     	 mov sp,r7
 766 002c 06B0     	 add sp,sp,#24
 767              	 
 768 002e 80BD     	 pop {r7,pc}
 769              	 .cfi_endproc
 770              	.LFE162:
 772              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 773              	 .align 2
 774              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 775              	 .code 16
 776              	 .thumb_func
 778              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 779              	.LFB163:
 328:../Libraries/XMCLib/src/xmc_vadc.c **** 
 329:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 330:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 331:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 332:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 333:../Libraries/XMCLib/src/xmc_vadc.c **** {
 780              	 .loc 2 333 0
 781              	 .cfi_startproc
 782 0000 80B5     	 push {r7,lr}
 783              	.LCFI40:
 784              	 .cfi_def_cfa_offset 8
 785              	 .cfi_offset 7,-8
 786              	 .cfi_offset 14,-4
 787 0002 84B0     	 sub sp,sp,#16
 788              	.LCFI41:
 789              	 .cfi_def_cfa_offset 24
 790 0004 00AF     	 add r7,sp,#0
 791              	.LCFI42:
 792              	 .cfi_def_cfa_register 7
 793 0006 7860     	 str r0,[r7,#4]
 794 0008 081C     	 mov r0,r1
 795 000a 111C     	 mov r1,r2
 796 000c FB1C     	 add r3,r7,#3
 797 000e 021C     	 add r2,r0,#0
 798 0010 1A70     	 strb r2,[r3]
 799 0012 3B1C     	 mov r3,r7
 800 0014 0A1C     	 add r2,r1,#0
 801 0016 1A80     	 strh r2,[r3]
 334:../Libraries/XMCLib/src/xmc_vadc.c **** 
 335:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 336:../Libraries/XMCLib/src/xmc_vadc.c **** 
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 339:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 340:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 341:../Libraries/XMCLib/src/xmc_vadc.c **** 
 342:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 343:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 802              	 .loc 2 343 0
 803 0018 7B68     	 ldr r3,[r7,#4]
 804 001a B822     	 mov r2,#184
 805 001c 9B58     	 ldr r3,[r3,r2]
 806 001e FB60     	 str r3,[r7,#12]
 344:../Libraries/XMCLib/src/xmc_vadc.c **** 
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 807              	 .loc 2 345 0
 808 0020 FB1C     	 add r3,r7,#3
 809 0022 1B78     	 ldrb r3,[r3]
 810 0024 022B     	 cmp r3,#2
 811 0026 09D1     	 bne .L34
 346:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 347:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 812              	 .loc 2 347 0
 813 0028 FB68     	 ldr r3,[r7,#12]
 814 002a 1B0B     	 lsr r3,r3,#12
 815 002c 1B03     	 lsl r3,r3,#12
 816 002e FB60     	 str r3,[r7,#12]
 348:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 817              	 .loc 2 348 0
 818 0030 3B1C     	 mov r3,r7
 819 0032 1B88     	 ldrh r3,[r3]
 820 0034 FA68     	 ldr r2,[r7,#12]
 821 0036 1343     	 orr r3,r2
 822 0038 FB60     	 str r3,[r7,#12]
 823 003a 0DE0     	 b .L35
 824              	.L34:
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 825              	 .loc 2 350 0
 826 003c FB1C     	 add r3,r7,#3
 827 003e 1B78     	 ldrb r3,[r3]
 828 0040 032B     	 cmp r3,#3
 829 0042 09D1     	 bne .L35
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 352:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 830              	 .loc 2 352 0
 831 0044 FB68     	 ldr r3,[r7,#12]
 832 0046 084A     	 ldr r2,.L36
 833 0048 1340     	 and r3,r2
 834 004a FB60     	 str r3,[r7,#12]
 353:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 835              	 .loc 2 353 0
 836 004c 3B1C     	 mov r3,r7
 837 004e 1B88     	 ldrh r3,[r3]
 838 0050 1B04     	 lsl r3,r3,#16
 839 0052 FA68     	 ldr r2,[r7,#12]
 840 0054 1343     	 orr r3,r2
 841 0056 FB60     	 str r3,[r7,#12]
 842              	.L35:
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 355:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 357:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 358:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 359:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 843              	 .loc 2 359 0
 844 0058 7B68     	 ldr r3,[r7,#4]
 845 005a B821     	 mov r1,#184
 846 005c FA68     	 ldr r2,[r7,#12]
 847 005e 5A50     	 str r2,[r3,r1]
 360:../Libraries/XMCLib/src/xmc_vadc.c **** 
 361:../Libraries/XMCLib/src/xmc_vadc.c **** }
 848              	 .loc 2 361 0
 849 0060 BD46     	 mov sp,r7
 850 0062 04B0     	 add sp,sp,#16
 851              	 
 852 0064 80BD     	 pop {r7,pc}
 853              	.L37:
 854 0066 C046     	 .align 2
 855              	.L36:
 856 0068 FFFF00F0 	 .word -268369921
 857              	 .cfi_endproc
 858              	.LFE163:
 860              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 861              	 .align 2
 862              	 .global XMC_VADC_GLOBAL_SetCompareValue
 863              	 .code 16
 864              	 .thumb_func
 866              	XMC_VADC_GLOBAL_SetCompareValue:
 867              	.LFB164:
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 364:../Libraries/XMCLib/src/xmc_vadc.c **** 
 365:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 366:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 367:../Libraries/XMCLib/src/xmc_vadc.c **** {
 868              	 .loc 2 367 0
 869              	 .cfi_startproc
 870 0000 80B5     	 push {r7,lr}
 871              	.LCFI43:
 872              	 .cfi_def_cfa_offset 8
 873              	 .cfi_offset 7,-8
 874              	 .cfi_offset 14,-4
 875 0002 82B0     	 sub sp,sp,#8
 876              	.LCFI44:
 877              	 .cfi_def_cfa_offset 16
 878 0004 00AF     	 add r7,sp,#0
 879              	.LCFI45:
 880              	 .cfi_def_cfa_register 7
 881 0006 7860     	 str r0,[r7,#4]
 882 0008 0A1C     	 mov r2,r1
 883 000a BB1C     	 add r3,r7,#2
 884 000c 1A80     	 strh r2,[r3]
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 369:../Libraries/XMCLib/src/xmc_vadc.c **** 
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 885              	 .loc 2 370 0
 886 000e 7A68     	 ldr r2,[r7,#4]
 887 0010 C023     	 mov r3,#192
 888 0012 9B00     	 lsl r3,r3,#2
 889 0014 D358     	 ldr r3,[r2,r3]
 890 0016 1B0C     	 lsr r3,r3,#16
 891 0018 1904     	 lsl r1,r3,#16
 892 001a 7A68     	 ldr r2,[r7,#4]
 893 001c C023     	 mov r3,#192
 894 001e 9B00     	 lsl r3,r3,#2
 895 0020 D150     	 str r1,[r2,r3]
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 896              	 .loc 2 371 0
 897 0022 7A68     	 ldr r2,[r7,#4]
 898 0024 C023     	 mov r3,#192
 899 0026 9B00     	 lsl r3,r3,#2
 900 0028 D258     	 ldr r2,[r2,r3]
 901 002a BB1C     	 add r3,r7,#2
 902 002c 1B88     	 ldrh r3,[r3]
 903 002e 9B00     	 lsl r3,r3,#2
 904 0030 1A43     	 orr r2,r3
 905 0032 111C     	 mov r1,r2
 906 0034 7A68     	 ldr r2,[r7,#4]
 907 0036 C023     	 mov r3,#192
 908 0038 9B00     	 lsl r3,r3,#2
 909 003a D150     	 str r1,[r2,r3]
 372:../Libraries/XMCLib/src/xmc_vadc.c **** }
 910              	 .loc 2 372 0
 911 003c BD46     	 mov sp,r7
 912 003e 02B0     	 add sp,sp,#8
 913              	 
 914 0040 80BD     	 pop {r7,pc}
 915              	 .cfi_endproc
 916              	.LFE164:
 918 0042 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 919              	 .align 2
 920              	 .global XMC_VADC_GLOBAL_GetCompareResult
 921              	 .code 16
 922              	 .thumb_func
 924              	XMC_VADC_GLOBAL_GetCompareResult:
 925              	.LFB165:
 373:../Libraries/XMCLib/src/xmc_vadc.c **** 
 374:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 375:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 376:../Libraries/XMCLib/src/xmc_vadc.c **** {
 926              	 .loc 2 376 0
 927              	 .cfi_startproc
 928 0000 80B5     	 push {r7,lr}
 929              	.LCFI46:
 930              	 .cfi_def_cfa_offset 8
 931              	 .cfi_offset 7,-8
 932              	 .cfi_offset 14,-4
 933 0002 84B0     	 sub sp,sp,#16
 934              	.LCFI47:
 935              	 .cfi_def_cfa_offset 24
 936 0004 00AF     	 add r7,sp,#0
 937              	.LCFI48:
 938              	 .cfi_def_cfa_register 7
 939 0006 7860     	 str r0,[r7,#4]
 377:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 379:../Libraries/XMCLib/src/xmc_vadc.c **** 
 380:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 381:../Libraries/XMCLib/src/xmc_vadc.c **** 
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 940              	 .loc 2 382 0
 941 0008 7A68     	 ldr r2,[r7,#4]
 942 000a C023     	 mov r3,#192
 943 000c 9B00     	 lsl r3,r3,#2
 944 000e D358     	 ldr r3,[r2,r3]
 945 0010 BB60     	 str r3,[r7,#8]
 383:../Libraries/XMCLib/src/xmc_vadc.c **** 
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 946              	 .loc 2 384 0
 947 0012 BB68     	 ldr r3,[r7,#8]
 948 0014 002B     	 cmp r3,#0
 949 0016 08DA     	 bge .L40
 385:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 386:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 950              	 .loc 2 386 0
 951 0018 BB68     	 ldr r3,[r7,#8]
 952 001a 9B0F     	 lsr r3,r3,#30
 953 001c DAB2     	 uxtb r2,r3
 954 001e 0F23     	 mov r3,#15
 955 0020 FB18     	 add r3,r7,r3
 956 0022 0121     	 mov r1,#1
 957 0024 0A40     	 and r2,r1
 958 0026 1A70     	 strb r2,[r3]
 959 0028 03E0     	 b .L41
 960              	.L40:
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 388:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 389:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 390:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 961              	 .loc 2 390 0
 962 002a 0F23     	 mov r3,#15
 963 002c FB18     	 add r3,r7,r3
 964 002e 0222     	 mov r2,#2
 965 0030 1A70     	 strb r2,[r3]
 966              	.L41:
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 392:../Libraries/XMCLib/src/xmc_vadc.c **** 
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 967              	 .loc 2 393 0
 968 0032 0F23     	 mov r3,#15
 969 0034 FB18     	 add r3,r7,r3
 970 0036 1B78     	 ldrb r3,[r3]
 394:../Libraries/XMCLib/src/xmc_vadc.c **** }
 971              	 .loc 2 394 0
 972 0038 181C     	 mov r0,r3
 973 003a BD46     	 mov sp,r7
 974 003c 04B0     	 add sp,sp,#16
 975              	 
 976 003e 80BD     	 pop {r7,pc}
 977              	 .cfi_endproc
 978              	.LFE165:
 980              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 981              	 .align 2
 982              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 983              	 .code 16
 984              	 .thumb_func
 986              	XMC_VADC_GLOBAL_BindGroupToEMux:
 987              	.LFB166:
 395:../Libraries/XMCLib/src/xmc_vadc.c **** 
 396:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 397:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 398:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 399:../Libraries/XMCLib/src/xmc_vadc.c **** {
 988              	 .loc 2 399 0
 989              	 .cfi_startproc
 990 0000 80B5     	 push {r7,lr}
 991              	.LCFI49:
 992              	 .cfi_def_cfa_offset 8
 993              	 .cfi_offset 7,-8
 994              	 .cfi_offset 14,-4
 995 0002 86B0     	 sub sp,sp,#24
 996              	.LCFI50:
 997              	 .cfi_def_cfa_offset 32
 998 0004 00AF     	 add r7,sp,#0
 999              	.LCFI51:
 1000              	 .cfi_def_cfa_register 7
 1001 0006 F860     	 str r0,[r7,#12]
 1002 0008 B960     	 str r1,[r7,#8]
 1003 000a 7A60     	 str r2,[r7,#4]
 400:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 402:../Libraries/XMCLib/src/xmc_vadc.c **** 
 403:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 406:../Libraries/XMCLib/src/xmc_vadc.c **** 
 407:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1004              	 .loc 2 407 0
 1005 000c BB68     	 ldr r3,[r7,#8]
 1006 000e 002B     	 cmp r3,#0
 1007 0010 04D1     	 bne .L44
 408:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 409:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1008              	 .loc 2 409 0
 1009 0012 0023     	 mov r3,#0
 1010 0014 3B61     	 str r3,[r7,#16]
 410:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1011              	 .loc 2 410 0
 1012 0016 0F23     	 mov r3,#15
 1013 0018 7B61     	 str r3,[r7,#20]
 1014 001a 03E0     	 b .L45
 1015              	.L44:
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 414:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1016              	 .loc 2 414 0
 1017 001c 0423     	 mov r3,#4
 1018 001e 3B61     	 str r3,[r7,#16]
 415:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1019              	 .loc 2 415 0
 1020 0020 F023     	 mov r3,#240
 1021 0022 7B61     	 str r3,[r7,#20]
 1022              	.L45:
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 417:../Libraries/XMCLib/src/xmc_vadc.c **** 
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1023              	 .loc 2 418 0
 1024 0024 FA68     	 ldr r2,[r7,#12]
 1025 0026 FC23     	 mov r3,#252
 1026 0028 9B00     	 lsl r3,r3,#2
 1027 002a D358     	 ldr r3,[r2,r3]
 1028 002c 7A69     	 ldr r2,[r7,#20]
 1029 002e D243     	 mvn r2,r2
 1030 0030 1A40     	 and r2,r3
 1031 0032 111C     	 mov r1,r2
 1032 0034 FA68     	 ldr r2,[r7,#12]
 1033 0036 FC23     	 mov r3,#252
 1034 0038 9B00     	 lsl r3,r3,#2
 1035 003a D150     	 str r1,[r2,r3]
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1036              	 .loc 2 419 0
 1037 003c FA68     	 ldr r2,[r7,#12]
 1038 003e FC23     	 mov r3,#252
 1039 0040 9B00     	 lsl r3,r3,#2
 1040 0042 D258     	 ldr r2,[r2,r3]
 1041 0044 3B69     	 ldr r3,[r7,#16]
 1042 0046 7968     	 ldr r1,[r7,#4]
 1043 0048 9940     	 lsl r1,r1,r3
 1044 004a 0B1C     	 mov r3,r1
 1045 004c 1A43     	 orr r2,r3
 1046 004e 111C     	 mov r1,r2
 1047 0050 FA68     	 ldr r2,[r7,#12]
 1048 0052 FC23     	 mov r3,#252
 1049 0054 9B00     	 lsl r3,r3,#2
 1050 0056 D150     	 str r1,[r2,r3]
 420:../Libraries/XMCLib/src/xmc_vadc.c **** 
 421:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1051              	 .loc 2 421 0
 1052 0058 BD46     	 mov sp,r7
 1053 005a 06B0     	 add sp,sp,#24
 1054              	 
 1055 005c 80BD     	 pop {r7,pc}
 1056              	 .cfi_endproc
 1057              	.LFE166:
 1059 005e C046     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1060              	 .align 2
 1061              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1062              	 .code 16
 1063              	 .thumb_func
 1065              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1066              	.LFB167:
 422:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 425:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 426:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1067              	 .loc 2 426 0
 1068              	 .cfi_startproc
 1069 0000 80B5     	 push {r7,lr}
 1070              	.LCFI52:
 1071              	 .cfi_def_cfa_offset 8
 1072              	 .cfi_offset 7,-8
 1073              	 .cfi_offset 14,-4
 1074 0002 84B0     	 sub sp,sp,#16
 1075              	.LCFI53:
 1076              	 .cfi_def_cfa_offset 24
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI54:
 1079              	 .cfi_def_cfa_register 7
 1080 0006 7860     	 str r0,[r7,#4]
 1081 0008 0A1C     	 mov r2,r1
 1082 000a FB1C     	 add r3,r7,#3
 1083 000c 1A70     	 strb r2,[r3]
 427:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   
 429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 430:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 431:../Libraries/XMCLib/src/xmc_vadc.c **** 
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1084              	 .loc 2 432 0
 1085 000e FB1C     	 add r3,r7,#3
 1086 0010 1B78     	 ldrb r3,[r3]
 1087 0012 032B     	 cmp r3,#3
 1088 0014 04D9     	 bls .L47
 433:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 434:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1089              	 .loc 2 434 0
 1090 0016 FB1C     	 add r3,r7,#3
 1091 0018 1B78     	 ldrb r3,[r3]
 1092 001a 043B     	 sub r3,r3,#4
 1093 001c FB60     	 str r3,[r7,#12]
 1094 001e 02E0     	 b .L48
 1095              	.L47:
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 437:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 438:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1096              	 .loc 2 438 0
 1097 0020 FB1C     	 add r3,r7,#3
 1098 0022 1B78     	 ldrb r3,[r3]
 1099 0024 FB60     	 str r3,[r7,#12]
 1100              	.L48:
 439:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 440:../Libraries/XMCLib/src/xmc_vadc.c **** 
 441:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1101              	 .loc 2 441 0
 1102 0026 7A68     	 ldr r2,[r7,#4]
 1103 0028 A023     	 mov r3,#160
 1104 002a 5B00     	 lsl r3,r3,#1
 1105 002c D358     	 ldr r3,[r2,r3]
 1106 002e 0B4A     	 ldr r2,.L49
 1107 0030 1340     	 and r3,r2
 1108 0032 191C     	 mov r1,r3
 1109 0034 7A68     	 ldr r2,[r7,#4]
 1110 0036 A023     	 mov r3,#160
 1111 0038 5B00     	 lsl r3,r3,#1
 1112 003a D150     	 str r1,[r2,r3]
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1113              	 .loc 2 442 0
 1114 003c 7A68     	 ldr r2,[r7,#4]
 1115 003e A023     	 mov r3,#160
 1116 0040 5B00     	 lsl r3,r3,#1
 1117 0042 D258     	 ldr r2,[r2,r3]
 1118 0044 FB68     	 ldr r3,[r7,#12]
 1119 0046 1B04     	 lsl r3,r3,#16
 1120 0048 1A43     	 orr r2,r3
 1121 004a 111C     	 mov r1,r2
 1122 004c 7A68     	 ldr r2,[r7,#4]
 1123 004e A023     	 mov r3,#160
 1124 0050 5B00     	 lsl r3,r3,#1
 1125 0052 D150     	 str r1,[r2,r3]
 443:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1126              	 .loc 2 443 0
 1127 0054 BD46     	 mov sp,r7
 1128 0056 04B0     	 add sp,sp,#16
 1129              	 
 1130 0058 80BD     	 pop {r7,pc}
 1131              	.L50:
 1132 005a C046     	 .align 2
 1133              	.L49:
 1134 005c FFFFF0FF 	 .word -983041
 1135              	 .cfi_endproc
 1136              	.LFE167:
 1138              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1139              	 .align 2
 1140              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1141              	 .code 16
 1142              	 .thumb_func
 1144              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1145              	.LFB168:
 444:../Libraries/XMCLib/src/xmc_vadc.c **** 
 445:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 446:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 447:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1146              	 .loc 2 447 0
 1147              	 .cfi_startproc
 1148 0000 80B5     	 push {r7,lr}
 1149              	.LCFI55:
 1150              	 .cfi_def_cfa_offset 8
 1151              	 .cfi_offset 7,-8
 1152              	 .cfi_offset 14,-4
 1153 0002 84B0     	 sub sp,sp,#16
 1154              	.LCFI56:
 1155              	 .cfi_def_cfa_offset 24
 1156 0004 00AF     	 add r7,sp,#0
 1157              	.LCFI57:
 1158              	 .cfi_def_cfa_register 7
 1159 0006 7860     	 str r0,[r7,#4]
 1160 0008 0A1C     	 mov r2,r1
 1161 000a FB1C     	 add r3,r7,#3
 1162 000c 1A70     	 strb r2,[r3]
 448:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 449:../Libraries/XMCLib/src/xmc_vadc.c ****   
 450:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 451:../Libraries/XMCLib/src/xmc_vadc.c **** 
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1163              	 .loc 2 452 0
 1164 000e FB1C     	 add r3,r7,#3
 1165 0010 1B78     	 ldrb r3,[r3]
 1166 0012 032B     	 cmp r3,#3
 1167 0014 04D9     	 bls .L52
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 454:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1168              	 .loc 2 454 0
 1169 0016 FB1C     	 add r3,r7,#3
 1170 0018 1B78     	 ldrb r3,[r3]
 1171 001a 043B     	 sub r3,r3,#4
 1172 001c FB60     	 str r3,[r7,#12]
 1173 001e 02E0     	 b .L53
 1174              	.L52:
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 458:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1175              	 .loc 2 458 0
 1176 0020 FB1C     	 add r3,r7,#3
 1177 0022 1B78     	 ldrb r3,[r3]
 1178 0024 FB60     	 str r3,[r7,#12]
 1179              	.L53:
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 460:../Libraries/XMCLib/src/xmc_vadc.c **** 
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1180              	 .loc 2 461 0
 1181 0026 7A68     	 ldr r2,[r7,#4]
 1182 0028 A023     	 mov r3,#160
 1183 002a 5B00     	 lsl r3,r3,#1
 1184 002c D358     	 ldr r3,[r2,r3]
 1185 002e 0F22     	 mov r2,#15
 1186 0030 9343     	 bic r3,r2
 1187 0032 191C     	 mov r1,r3
 1188 0034 7A68     	 ldr r2,[r7,#4]
 1189 0036 A023     	 mov r3,#160
 1190 0038 5B00     	 lsl r3,r3,#1
 1191 003a D150     	 str r1,[r2,r3]
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1192              	 .loc 2 462 0
 1193 003c 7A68     	 ldr r2,[r7,#4]
 1194 003e A023     	 mov r3,#160
 1195 0040 5B00     	 lsl r3,r3,#1
 1196 0042 D258     	 ldr r2,[r2,r3]
 1197 0044 FB68     	 ldr r3,[r7,#12]
 1198 0046 1A43     	 orr r2,r3
 1199 0048 111C     	 mov r1,r2
 1200 004a 7A68     	 ldr r2,[r7,#4]
 1201 004c A023     	 mov r3,#160
 1202 004e 5B00     	 lsl r3,r3,#1
 1203 0050 D150     	 str r1,[r2,r3]
 463:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1204              	 .loc 2 463 0
 1205 0052 BD46     	 mov sp,r7
 1206 0054 04B0     	 add sp,sp,#16
 1207              	 
 1208 0056 80BD     	 pop {r7,pc}
 1209              	 .cfi_endproc
 1210              	.LFE168:
 1212              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1213              	 .align 2
 1214              	 .global XMC_VADC_GROUP_Init
 1215              	 .code 16
 1216              	 .thumb_func
 1218              	XMC_VADC_GROUP_Init:
 1219              	.LFB169:
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 466:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 467:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 468:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1220              	 .loc 2 468 0
 1221              	 .cfi_startproc
 1222 0000 80B5     	 push {r7,lr}
 1223              	.LCFI58:
 1224              	 .cfi_def_cfa_offset 8
 1225              	 .cfi_offset 7,-8
 1226              	 .cfi_offset 14,-4
 1227 0002 82B0     	 sub sp,sp,#8
 1228              	.LCFI59:
 1229              	 .cfi_def_cfa_offset 16
 1230 0004 00AF     	 add r7,sp,#0
 1231              	.LCFI60:
 1232              	 .cfi_def_cfa_register 7
 1233 0006 7860     	 str r0,[r7,#4]
 1234 0008 3960     	 str r1,[r7]
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 470:../Libraries/XMCLib/src/xmc_vadc.c **** 
 471:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 472:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1235              	 .loc 2 472 0
 1236 000a 7A68     	 ldr r2,[r7,#4]
 1237 000c 3B68     	 ldr r3,[r7]
 1238 000e 5B68     	 ldr r3,[r3,#4]
 1239 0010 101C     	 mov r0,r2
 1240 0012 191C     	 mov r1,r3
 1241 0014 0022     	 mov r2,#0
 1242 0016 0023     	 mov r3,#0
 1243 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1244              	 .loc 2 473 0
 1245 001c 7A68     	 ldr r2,[r7,#4]
 1246 001e 3B68     	 ldr r3,[r7]
 1247 0020 5B68     	 ldr r3,[r3,#4]
 1248 0022 101C     	 mov r0,r2
 1249 0024 191C     	 mov r1,r3
 1250 0026 0122     	 mov r2,#1
 1251 0028 0023     	 mov r3,#0
 1252 002a FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1253              	 .loc 2 474 0
 1254 002e 7A68     	 ldr r2,[r7,#4]
 1255 0030 3B68     	 ldr r3,[r7]
 1256 0032 9B68     	 ldr r3,[r3,#8]
 1257 0034 101C     	 mov r0,r2
 1258 0036 191C     	 mov r1,r3
 1259 0038 0022     	 mov r2,#0
 1260 003a 0123     	 mov r3,#1
 1261 003c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1262              	 .loc 2 475 0
 1263 0040 7A68     	 ldr r2,[r7,#4]
 1264 0042 3B68     	 ldr r3,[r7]
 1265 0044 9B68     	 ldr r3,[r3,#8]
 1266 0046 101C     	 mov r0,r2
 1267 0048 191C     	 mov r1,r3
 1268 004a 0122     	 mov r2,#1
 1269 004c 0123     	 mov r3,#1
 1270 004e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 476:../Libraries/XMCLib/src/xmc_vadc.c **** 
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1271              	 .loc 2 477 0
 1272 0052 3B68     	 ldr r3,[r7]
 1273 0054 1A69     	 ldr r2,[r3,#16]
 1274 0056 7B68     	 ldr r3,[r7,#4]
 1275 0058 8021     	 mov r1,#128
 1276 005a 5A50     	 str r2,[r3,r1]
 478:../Libraries/XMCLib/src/xmc_vadc.c **** 
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1277              	 .loc 2 479 0
 1278 005c 3B68     	 ldr r3,[r7]
 1279 005e DA68     	 ldr r2,[r3,#12]
 1280 0060 7B68     	 ldr r3,[r7,#4]
 1281 0062 B821     	 mov r1,#184
 1282 0064 5A50     	 str r2,[r3,r1]
 480:../Libraries/XMCLib/src/xmc_vadc.c **** 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 482:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1283              	 .loc 2 482 0
 1284 0066 7A68     	 ldr r2,[r7,#4]
 1285 0068 3B68     	 ldr r3,[r7]
 1286 006a 1B68     	 ldr r3,[r3]
 1287 006c 101C     	 mov r0,r2
 1288 006e 191C     	 mov r1,r3
 1289 0070 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 483:../Libraries/XMCLib/src/xmc_vadc.c **** 
 484:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1290              	 .loc 2 484 0
 1291 0074 BD46     	 mov sp,r7
 1292 0076 02B0     	 add sp,sp,#8
 1293              	 
 1294 0078 80BD     	 pop {r7,pc}
 1295              	 .cfi_endproc
 1296              	.LFE169:
 1298 007a C046     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1299              	 .align 2
 1300              	 .global XMC_VADC_GROUP_InputClassInit
 1301              	 .code 16
 1302              	 .thumb_func
 1304              	XMC_VADC_GROUP_InputClassInit:
 1305              	.LFB170:
 485:../Libraries/XMCLib/src/xmc_vadc.c **** 
 486:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 487:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 489:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1306              	 .loc 2 489 0
 1307              	 .cfi_startproc
 1308 0000 80B5     	 push {r7,lr}
 1309              	.LCFI61:
 1310              	 .cfi_def_cfa_offset 8
 1311              	 .cfi_offset 7,-8
 1312              	 .cfi_offset 14,-4
 1313 0002 8CB0     	 sub sp,sp,#48
 1314              	.LCFI62:
 1315              	 .cfi_def_cfa_offset 56
 1316 0004 00AF     	 add r7,sp,#0
 1317              	.LCFI63:
 1318              	 .cfi_def_cfa_register 7
 1319 0006 F860     	 str r0,[r7,#12]
 1320 0008 B960     	 str r1,[r7,#8]
 1321 000a 3B60     	 str r3,[r7]
 1322 000c FB1D     	 add r3,r7,#7
 1323 000e 1A70     	 strb r2,[r3]
 490:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 496:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 497:../Libraries/XMCLib/src/xmc_vadc.c **** 
 498:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 500:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 501:../Libraries/XMCLib/src/xmc_vadc.c **** 
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 503:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 504:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 505:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 506:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1324              	 .loc 2 506 0
 1325 0010 FB1D     	 add r3,r7,#7
 1326 0012 1B78     	 ldrb r3,[r3]
 1327 0014 002B     	 cmp r3,#0
 1328 0016 19D1     	 bne .L56
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 508:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1329              	 .loc 2 508 0
 1330 0018 0823     	 mov r3,#8
 1331 001a FB62     	 str r3,[r7,#44]
 509:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1332              	 .loc 2 509 0
 1333 001c E023     	 mov r3,#224
 1334 001e DB00     	 lsl r3,r3,#3
 1335 0020 7B62     	 str r3,[r7,#36]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1336              	 .loc 2 510 0
 1337 0022 0023     	 mov r3,#0
 1338 0024 BB62     	 str r3,[r7,#40]
 511:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1339              	 .loc 2 511 0
 1340 0026 1F23     	 mov r3,#31
 1341 0028 3B62     	 str r3,[r7,#32]
 512:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1342              	 .loc 2 512 0
 1343 002a 0823     	 mov r3,#8
 1344 002c FB18     	 add r3,r7,r3
 1345 002e 1B78     	 ldrb r3,[r3]
 1346 0030 DB06     	 lsl r3,r3,#27
 1347 0032 DB0E     	 lsr r3,r3,#27
 1348 0034 DBB2     	 uxtb r3,r3
 1349 0036 FB61     	 str r3,[r7,#28]
 513:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1350              	 .loc 2 513 0
 1351 0038 0923     	 mov r3,#9
 1352 003a FB18     	 add r3,r7,r3
 1353 003c 1B78     	 ldrb r3,[r3]
 1354 003e 5B07     	 lsl r3,r3,#29
 1355 0040 5B0F     	 lsr r3,r3,#29
 1356 0042 DAB2     	 uxtb r2,r3
 1357 0044 1B23     	 mov r3,#27
 1358 0046 FB18     	 add r3,r7,r3
 1359 0048 1A70     	 strb r2,[r3]
 1360 004a 19E0     	 b .L57
 1361              	.L56:
 514:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 515:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 516:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 517:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1362              	 .loc 2 517 0
 1363 004c 1823     	 mov r3,#24
 1364 004e FB62     	 str r3,[r7,#44]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1365              	 .loc 2 518 0
 1366 0050 E023     	 mov r3,#224
 1367 0052 DB04     	 lsl r3,r3,#19
 1368 0054 7B62     	 str r3,[r7,#36]
 519:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1369              	 .loc 2 519 0
 1370 0056 1023     	 mov r3,#16
 1371 0058 BB62     	 str r3,[r7,#40]
 520:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1372              	 .loc 2 520 0
 1373 005a F823     	 mov r3,#248
 1374 005c 5B03     	 lsl r3,r3,#13
 1375 005e 3B62     	 str r3,[r7,#32]
 521:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1376              	 .loc 2 521 0
 1377 0060 0A23     	 mov r3,#10
 1378 0062 FB18     	 add r3,r7,r3
 1379 0064 1B78     	 ldrb r3,[r3]
 1380 0066 DB06     	 lsl r3,r3,#27
 1381 0068 DB0E     	 lsr r3,r3,#27
 1382 006a DBB2     	 uxtb r3,r3
 1383 006c FB61     	 str r3,[r7,#28]
 522:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1384              	 .loc 2 522 0
 1385 006e 0B23     	 mov r3,#11
 1386 0070 FB18     	 add r3,r7,r3
 1387 0072 1B78     	 ldrb r3,[r3]
 1388 0074 5B07     	 lsl r3,r3,#29
 1389 0076 5B0F     	 lsr r3,r3,#29
 1390 0078 DAB2     	 uxtb r2,r3
 1391 007a 1B23     	 mov r3,#27
 1392 007c FB18     	 add r3,r7,r3
 1393 007e 1A70     	 strb r2,[r3]
 1394              	.L57:
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1395              	 .loc 2 526 0
 1396 0080 FB68     	 ldr r3,[r7,#12]
 1397 0082 3A68     	 ldr r2,[r7]
 1398 0084 2832     	 add r2,r2,#40
 1399 0086 9200     	 lsl r2,r2,#2
 1400 0088 D358     	 ldr r3,[r2,r3]
 1401 008a 7B61     	 str r3,[r7,#20]
 527:../Libraries/XMCLib/src/xmc_vadc.c **** 
 528:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1402              	 .loc 2 529 0
 1403 008c 7B6A     	 ldr r3,[r7,#36]
 1404 008e DA43     	 mvn r2,r3
 1405 0090 7B69     	 ldr r3,[r7,#20]
 1406 0092 1340     	 and r3,r2
 1407 0094 7B61     	 str r3,[r7,#20]
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1408              	 .loc 2 530 0
 1409 0096 1B23     	 mov r3,#27
 1410 0098 FB18     	 add r3,r7,r3
 1411 009a 1A78     	 ldrb r2,[r3]
 1412 009c FB6A     	 ldr r3,[r7,#44]
 1413 009e 9A40     	 lsl r2,r2,r3
 1414 00a0 131C     	 mov r3,r2
 1415 00a2 7A69     	 ldr r2,[r7,#20]
 1416 00a4 1343     	 orr r3,r2
 1417 00a6 7B61     	 str r3,[r7,#20]
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1418              	 .loc 2 531 0
 1419 00a8 3B6A     	 ldr r3,[r7,#32]
 1420 00aa DA43     	 mvn r2,r3
 1421 00ac 7B69     	 ldr r3,[r7,#20]
 1422 00ae 1340     	 and r3,r2
 1423 00b0 7B61     	 str r3,[r7,#20]
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1424              	 .loc 2 532 0
 1425 00b2 BB6A     	 ldr r3,[r7,#40]
 1426 00b4 FA69     	 ldr r2,[r7,#28]
 1427 00b6 9A40     	 lsl r2,r2,r3
 1428 00b8 131C     	 mov r3,r2
 1429 00ba 7A69     	 ldr r2,[r7,#20]
 1430 00bc 1343     	 orr r3,r2
 1431 00be 7B61     	 str r3,[r7,#20]
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1432              	 .loc 2 533 0
 1433 00c0 FB68     	 ldr r3,[r7,#12]
 1434 00c2 3A68     	 ldr r2,[r7]
 1435 00c4 2832     	 add r2,r2,#40
 1436 00c6 9200     	 lsl r2,r2,#2
 1437 00c8 7969     	 ldr r1,[r7,#20]
 1438 00ca D150     	 str r1,[r2,r3]
 534:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1439              	 .loc 2 534 0
 1440 00cc BD46     	 mov sp,r7
 1441 00ce 0CB0     	 add sp,sp,#48
 1442              	 
 1443 00d0 80BD     	 pop {r7,pc}
 1444              	 .cfi_endproc
 1445              	.LFE170:
 1447 00d2 C046     	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1448              	 .align 2
 1449              	 .global XMC_VADC_GROUP_SetPowerMode
 1450              	 .code 16
 1451              	 .thumb_func
 1453              	XMC_VADC_GROUP_SetPowerMode:
 1454              	.LFB171:
 535:../Libraries/XMCLib/src/xmc_vadc.c **** 
 536:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 537:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 538:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1455              	 .loc 2 538 0
 1456              	 .cfi_startproc
 1457 0000 80B5     	 push {r7,lr}
 1458              	.LCFI64:
 1459              	 .cfi_def_cfa_offset 8
 1460              	 .cfi_offset 7,-8
 1461              	 .cfi_offset 14,-4
 1462 0002 84B0     	 sub sp,sp,#16
 1463              	.LCFI65:
 1464              	 .cfi_def_cfa_offset 24
 1465 0004 00AF     	 add r7,sp,#0
 1466              	.LCFI66:
 1467              	 .cfi_def_cfa_register 7
 1468 0006 7860     	 str r0,[r7,#4]
 1469 0008 0A1C     	 mov r2,r1
 1470 000a FB1C     	 add r3,r7,#3
 1471 000c 1A70     	 strb r2,[r3]
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 540:../Libraries/XMCLib/src/xmc_vadc.c **** 
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 543:../Libraries/XMCLib/src/xmc_vadc.c **** 
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1472              	 .loc 2 544 0
 1473 000e 7B68     	 ldr r3,[r7,#4]
 1474 0010 8022     	 mov r2,#128
 1475 0012 9B58     	 ldr r3,[r3,r2]
 1476 0014 FB60     	 str r3,[r7,#12]
 545:../Libraries/XMCLib/src/xmc_vadc.c **** 
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1477              	 .loc 2 546 0
 1478 0016 FB68     	 ldr r3,[r7,#12]
 1479 0018 0322     	 mov r2,#3
 1480 001a 9343     	 bic r3,r2
 1481 001c FB60     	 str r3,[r7,#12]
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1482              	 .loc 2 547 0
 1483 001e FB1C     	 add r3,r7,#3
 1484 0020 1B78     	 ldrb r3,[r3]
 1485 0022 FA68     	 ldr r2,[r7,#12]
 1486 0024 1343     	 orr r3,r2
 1487 0026 FB60     	 str r3,[r7,#12]
 548:../Libraries/XMCLib/src/xmc_vadc.c **** 
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1488              	 .loc 2 549 0
 1489 0028 7B68     	 ldr r3,[r7,#4]
 1490 002a 8021     	 mov r1,#128
 1491 002c FA68     	 ldr r2,[r7,#12]
 1492 002e 5A50     	 str r2,[r3,r1]
 550:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1493              	 .loc 2 550 0
 1494 0030 BD46     	 mov sp,r7
 1495 0032 04B0     	 add sp,sp,#16
 1496              	 
 1497 0034 80BD     	 pop {r7,pc}
 1498              	 .cfi_endproc
 1499              	.LFE171:
 1501 0036 C046     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1502              	 .align 2
 1503              	 .global XMC_VADC_GROUP_SetSyncSlave
 1504              	 .code 16
 1505              	 .thumb_func
 1507              	XMC_VADC_GROUP_SetSyncSlave:
 1508              	.LFB172:
 551:../Libraries/XMCLib/src/xmc_vadc.c **** 
 552:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 553:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 554:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1509              	 .loc 2 554 0
 1510              	 .cfi_startproc
 1511 0000 80B5     	 push {r7,lr}
 1512              	.LCFI67:
 1513              	 .cfi_def_cfa_offset 8
 1514              	 .cfi_offset 7,-8
 1515              	 .cfi_offset 14,-4
 1516 0002 86B0     	 sub sp,sp,#24
 1517              	.LCFI68:
 1518              	 .cfi_def_cfa_offset 32
 1519 0004 00AF     	 add r7,sp,#0
 1520              	.LCFI69:
 1521              	 .cfi_def_cfa_register 7
 1522 0006 F860     	 str r0,[r7,#12]
 1523 0008 B960     	 str r1,[r7,#8]
 1524 000a 7A60     	 str r2,[r7,#4]
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 558:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 559:../Libraries/XMCLib/src/xmc_vadc.c ****   
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 561:../Libraries/XMCLib/src/xmc_vadc.c **** 
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 563:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1525              	 .loc 2 563 0
 1526 000c 7A68     	 ldr r2,[r7,#4]
 1527 000e BB68     	 ldr r3,[r7,#8]
 1528 0010 9A42     	 cmp r2,r3
 1529 0012 02D9     	 bls .L60
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 565:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1530              	 .loc 2 565 0
 1531 0014 BB68     	 ldr r3,[r7,#8]
 1532 0016 0133     	 add r3,r3,#1
 1533 0018 BB60     	 str r3,[r7,#8]
 1534              	.L60:
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 568:../Libraries/XMCLib/src/xmc_vadc.c ****   
 569:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1535              	 .loc 2 570 0
 1536 001a FB68     	 ldr r3,[r7,#12]
 1537 001c C022     	 mov r2,#192
 1538 001e 9B58     	 ldr r3,[r3,r2]
 1539 0020 7B61     	 str r3,[r7,#20]
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1540              	 .loc 2 571 0
 1541 0022 7B69     	 ldr r3,[r7,#20]
 1542 0024 0322     	 mov r2,#3
 1543 0026 9343     	 bic r3,r2
 1544 0028 7B61     	 str r3,[r7,#20]
 572:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1545              	 .loc 2 572 0
 1546 002a 7A69     	 ldr r2,[r7,#20]
 1547 002c BB68     	 ldr r3,[r7,#8]
 1548 002e 1343     	 orr r3,r2
 1549 0030 7B61     	 str r3,[r7,#20]
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1550              	 .loc 2 573 0
 1551 0032 FB68     	 ldr r3,[r7,#12]
 1552 0034 C021     	 mov r1,#192
 1553 0036 7A69     	 ldr r2,[r7,#20]
 1554 0038 5A50     	 str r2,[r3,r1]
 574:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1555              	 .loc 2 574 0
 1556 003a BD46     	 mov sp,r7
 1557 003c 06B0     	 add sp,sp,#24
 1558              	 
 1559 003e 80BD     	 pop {r7,pc}
 1560              	 .cfi_endproc
 1561              	.LFE172:
 1563              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1564              	 .align 2
 1565              	 .global XMC_VADC_GROUP_SetSyncMaster
 1566              	 .code 16
 1567              	 .thumb_func
 1569              	XMC_VADC_GROUP_SetSyncMaster:
 1570              	.LFB173:
 575:../Libraries/XMCLib/src/xmc_vadc.c **** 
 576:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 577:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 578:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1571              	 .loc 2 578 0
 1572              	 .cfi_startproc
 1573 0000 80B5     	 push {r7,lr}
 1574              	.LCFI70:
 1575              	 .cfi_def_cfa_offset 8
 1576              	 .cfi_offset 7,-8
 1577              	 .cfi_offset 14,-4
 1578 0002 84B0     	 sub sp,sp,#16
 1579              	.LCFI71:
 1580              	 .cfi_def_cfa_offset 24
 1581 0004 00AF     	 add r7,sp,#0
 1582              	.LCFI72:
 1583              	 .cfi_def_cfa_register 7
 1584 0006 7860     	 str r0,[r7,#4]
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 580:../Libraries/XMCLib/src/xmc_vadc.c **** 
 581:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 582:../Libraries/XMCLib/src/xmc_vadc.c **** 
 583:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1585              	 .loc 2 583 0
 1586 0008 7B68     	 ldr r3,[r7,#4]
 1587 000a C022     	 mov r2,#192
 1588 000c 9B58     	 ldr r3,[r3,r2]
 1589 000e FB60     	 str r3,[r7,#12]
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1590              	 .loc 2 584 0
 1591 0010 FB68     	 ldr r3,[r7,#12]
 1592 0012 0322     	 mov r2,#3
 1593 0014 9343     	 bic r3,r2
 1594 0016 FB60     	 str r3,[r7,#12]
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1595              	 .loc 2 585 0
 1596 0018 7B68     	 ldr r3,[r7,#4]
 1597 001a C021     	 mov r1,#192
 1598 001c FA68     	 ldr r2,[r7,#12]
 1599 001e 5A50     	 str r2,[r3,r1]
 586:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1600              	 .loc 2 586 0
 1601 0020 BD46     	 mov sp,r7
 1602 0022 04B0     	 add sp,sp,#16
 1603              	 
 1604 0024 80BD     	 pop {r7,pc}
 1605              	 .cfi_endproc
 1606              	.LFE173:
 1608 0026 C046     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1609              	 .align 2
 1610              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1611              	 .code 16
 1612              	 .thumb_func
 1614              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1615              	.LFB174:
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 589:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 590:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1616              	 .loc 2 590 0
 1617              	 .cfi_startproc
 1618 0000 80B5     	 push {r7,lr}
 1619              	.LCFI73:
 1620              	 .cfi_def_cfa_offset 8
 1621              	 .cfi_offset 7,-8
 1622              	 .cfi_offset 14,-4
 1623 0002 84B0     	 sub sp,sp,#16
 1624              	.LCFI74:
 1625              	 .cfi_def_cfa_offset 24
 1626 0004 00AF     	 add r7,sp,#0
 1627              	.LCFI75:
 1628              	 .cfi_def_cfa_register 7
 1629 0006 7860     	 str r0,[r7,#4]
 1630 0008 3960     	 str r1,[r7]
 591:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 592:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 593:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAXI
 594:../Libraries/XMCLib/src/xmc_vadc.c **** 
 595:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1631              	 .loc 2 595 0
 1632 000a 0023     	 mov r3,#0
 1633 000c BB60     	 str r3,[r7,#8]
 596:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1634              	 .loc 2 596 0
 1635 000e 0023     	 mov r3,#0
 1636 0010 FB60     	 str r3,[r7,#12]
 1637 0012 0BE0     	 b .L63
 1638              	.L65:
 597:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 598:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1639              	 .loc 2 598 0
 1640 0014 124B     	 ldr r3,.L67
 1641 0016 FA68     	 ldr r2,[r7,#12]
 1642 0018 9200     	 lsl r2,r2,#2
 1643 001a D258     	 ldr r2,[r2,r3]
 1644 001c 7B68     	 ldr r3,[r7,#4]
 1645 001e 9A42     	 cmp r2,r3
 1646 0020 01D1     	 bne .L64
 599:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 600:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1647              	 .loc 2 600 0
 1648 0022 FB68     	 ldr r3,[r7,#12]
 1649 0024 BB60     	 str r3,[r7,#8]
 1650              	.L64:
 596:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1651              	 .loc 2 596 0 discriminator 2
 1652 0026 FB68     	 ldr r3,[r7,#12]
 1653 0028 0133     	 add r3,r3,#1
 1654 002a FB60     	 str r3,[r7,#12]
 1655              	.L63:
 596:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1656              	 .loc 2 596 0 is_stmt 0 discriminator 1
 1657 002c FB68     	 ldr r3,[r7,#12]
 1658 002e 012B     	 cmp r3,#1
 1659 0030 F0D9     	 bls .L65
 601:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 
 604:../Libraries/XMCLib/src/xmc_vadc.c **** 
 605:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1660              	 .loc 2 605 0 is_stmt 1
 1661 0032 3A68     	 ldr r2,[r7]
 1662 0034 BB68     	 ldr r3,[r7,#8]
 1663 0036 9A42     	 cmp r2,r3
 1664 0038 02D2     	 bcs .L66
 606:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 607:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1665              	 .loc 2 607 0
 1666 003a 3B68     	 ldr r3,[r7]
 1667 003c 0133     	 add r3,r3,#1
 1668 003e 3B60     	 str r3,[r7]
 1669              	.L66:
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1670              	 .loc 2 609 0
 1671 0040 7B68     	 ldr r3,[r7,#4]
 1672 0042 C022     	 mov r2,#192
 1673 0044 9A58     	 ldr r2,[r3,r2]
 1674 0046 3B68     	 ldr r3,[r7]
 1675 0048 0333     	 add r3,r3,#3
 1676 004a 191C     	 mov r1,r3
 1677 004c 0123     	 mov r3,#1
 1678 004e 8B40     	 lsl r3,r3,r1
 1679 0050 1A43     	 orr r2,r3
 1680 0052 7B68     	 ldr r3,[r7,#4]
 1681 0054 C021     	 mov r1,#192
 1682 0056 5A50     	 str r2,[r3,r1]
 610:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1683              	 .loc 2 610 0
 1684 0058 BD46     	 mov sp,r7
 1685 005a 04B0     	 add sp,sp,#16
 1686              	 
 1687 005c 80BD     	 pop {r7,pc}
 1688              	.L68:
 1689 005e C046     	 .align 2
 1690              	.L67:
 1691 0060 00000000 	 .word g_xmc_vadc_group_array
 1692              	 .cfi_endproc
 1693              	.LFE174:
 1695              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1696              	 .align 2
 1697              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1698              	 .code 16
 1699              	 .thumb_func
 1701              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1702              	.LFB175:
 611:../Libraries/XMCLib/src/xmc_vadc.c **** 
 612:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 613:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 614:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1703              	 .loc 2 614 0
 1704              	 .cfi_startproc
 1705 0000 80B5     	 push {r7,lr}
 1706              	.LCFI76:
 1707              	 .cfi_def_cfa_offset 8
 1708              	 .cfi_offset 7,-8
 1709              	 .cfi_offset 14,-4
 1710 0002 84B0     	 sub sp,sp,#16
 1711              	.LCFI77:
 1712              	 .cfi_def_cfa_offset 24
 1713 0004 00AF     	 add r7,sp,#0
 1714              	.LCFI78:
 1715              	 .cfi_def_cfa_register 7
 1716 0006 7860     	 str r0,[r7,#4]
 1717 0008 3960     	 str r1,[r7]
 615:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 616:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 617:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (slave_group <= (XMC_VADC_MAX
 618:../Libraries/XMCLib/src/xmc_vadc.c **** 
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1718              	 .loc 2 619 0
 1719 000a 0023     	 mov r3,#0
 1720 000c BB60     	 str r3,[r7,#8]
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1721              	 .loc 2 620 0
 1722 000e 0023     	 mov r3,#0
 1723 0010 FB60     	 str r3,[r7,#12]
 1724 0012 0BE0     	 b .L70
 1725              	.L72:
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 622:../Libraries/XMCLib/src/xmc_vadc.c **** 	  if(g_xmc_vadc_group_array[i] == group_ptr)
 1726              	 .loc 2 622 0
 1727 0014 124B     	 ldr r3,.L74
 1728 0016 FA68     	 ldr r2,[r7,#12]
 1729 0018 9200     	 lsl r2,r2,#2
 1730 001a D258     	 ldr r2,[r2,r3]
 1731 001c 7B68     	 ldr r3,[r7,#4]
 1732 001e 9A42     	 cmp r2,r3
 1733 0020 01D1     	 bne .L71
 623:../Libraries/XMCLib/src/xmc_vadc.c **** 	  {
 624:../Libraries/XMCLib/src/xmc_vadc.c **** 	    master_grp_num = i;
 1734              	 .loc 2 624 0
 1735 0022 FB68     	 ldr r3,[r7,#12]
 1736 0024 BB60     	 str r3,[r7,#8]
 1737              	.L71:
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1738              	 .loc 2 620 0 discriminator 2
 1739 0026 FB68     	 ldr r3,[r7,#12]
 1740 0028 0133     	 add r3,r3,#1
 1741 002a FB60     	 str r3,[r7,#12]
 1742              	.L70:
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1743              	 .loc 2 620 0 is_stmt 0 discriminator 1
 1744 002c FB68     	 ldr r3,[r7,#12]
 1745 002e 012B     	 cmp r3,#1
 1746 0030 F0D9     	 bls .L72
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 	  }
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 627:../Libraries/XMCLib/src/xmc_vadc.c **** 
 628:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1747              	 .loc 2 628 0 is_stmt 1
 1748 0032 3A68     	 ldr r2,[r7]
 1749 0034 BB68     	 ldr r3,[r7,#8]
 1750 0036 9A42     	 cmp r2,r3
 1751 0038 02D2     	 bcs .L73
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 630:../Libraries/XMCLib/src/xmc_vadc.c **** 	  slave_group++;
 1752              	 .loc 2 630 0
 1753 003a 3B68     	 ldr r3,[r7]
 1754 003c 0133     	 add r3,r3,#1
 1755 003e 3B60     	 str r3,[r7]
 1756              	.L73:
 631:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 632:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1757              	 .loc 2 632 0
 1758 0040 7B68     	 ldr r3,[r7,#4]
 1759 0042 C022     	 mov r2,#192
 1760 0044 9B58     	 ldr r3,[r3,r2]
 1761 0046 3A68     	 ldr r2,[r7]
 1762 0048 0332     	 add r2,r2,#3
 1763 004a 111C     	 mov r1,r2
 1764 004c 0122     	 mov r2,#1
 1765 004e 8A40     	 lsl r2,r2,r1
 1766 0050 D243     	 mvn r2,r2
 1767 0052 1A40     	 and r2,r3
 1768 0054 7B68     	 ldr r3,[r7,#4]
 1769 0056 C021     	 mov r1,#192
 1770 0058 5A50     	 str r2,[r3,r1]
 633:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1771              	 .loc 2 633 0
 1772 005a BD46     	 mov sp,r7
 1773 005c 04B0     	 add sp,sp,#16
 1774              	 
 1775 005e 80BD     	 pop {r7,pc}
 1776              	.L75:
 1777              	 .align 2
 1778              	.L74:
 1779 0060 00000000 	 .word g_xmc_vadc_group_array
 1780              	 .cfi_endproc
 1781              	.LFE175:
 1783              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1784              	 .align 2
 1785              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1786              	 .code 16
 1787              	 .thumb_func
 1789              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1790              	.LFB176:
 634:../Libraries/XMCLib/src/xmc_vadc.c **** 
 635:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 636:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 637:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 638:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 639:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1791              	 .loc 2 639 0
 1792              	 .cfi_startproc
 1793 0000 80B5     	 push {r7,lr}
 1794              	.LCFI79:
 1795              	 .cfi_def_cfa_offset 8
 1796              	 .cfi_offset 7,-8
 1797              	 .cfi_offset 14,-4
 1798 0002 84B0     	 sub sp,sp,#16
 1799              	.LCFI80:
 1800              	 .cfi_def_cfa_offset 24
 1801 0004 00AF     	 add r7,sp,#0
 1802              	.LCFI81:
 1803              	 .cfi_def_cfa_register 7
 1804 0006 F860     	 str r0,[r7,#12]
 1805 0008 B960     	 str r1,[r7,#8]
 1806 000a 7A60     	 str r2,[r7,#4]
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 641:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group != e
 642:../Libraries/XMCLib/src/xmc_vadc.c **** 
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 1807              	 .loc 2 643 0
 1808 000c 7A68     	 ldr r2,[r7,#4]
 1809 000e BB68     	 ldr r3,[r7,#8]
 1810 0010 9A42     	 cmp r2,r3
 1811 0012 02D2     	 bcs .L77
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 645:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 1812              	 .loc 2 645 0
 1813 0014 7B68     	 ldr r3,[r7,#4]
 1814 0016 0133     	 add r3,r3,#1
 1815 0018 7B60     	 str r3,[r7,#4]
 1816              	.L77:
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1817              	 .loc 2 647 0
 1818 001a FB68     	 ldr r3,[r7,#12]
 1819 001c C022     	 mov r2,#192
 1820 001e 9A58     	 ldr r2,[r3,r2]
 1821 0020 7B68     	 ldr r3,[r7,#4]
 1822 0022 0333     	 add r3,r3,#3
 1823 0024 191C     	 mov r1,r3
 1824 0026 0123     	 mov r3,#1
 1825 0028 8B40     	 lsl r3,r3,r1
 1826 002a 1A43     	 orr r2,r3
 1827 002c FB68     	 ldr r3,[r7,#12]
 1828 002e C021     	 mov r1,#192
 1829 0030 5A50     	 str r2,[r3,r1]
 648:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1830              	 .loc 2 648 0
 1831 0032 BD46     	 mov sp,r7
 1832 0034 04B0     	 add sp,sp,#16
 1833              	 
 1834 0036 80BD     	 pop {r7,pc}
 1835              	 .cfi_endproc
 1836              	.LFE176:
 1838              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1839              	 .align 2
 1840              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1841              	 .code 16
 1842              	 .thumb_func
 1844              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1845              	.LFB177:
 649:../Libraries/XMCLib/src/xmc_vadc.c **** 
 650:../Libraries/XMCLib/src/xmc_vadc.c **** 
 651:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 652:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 653:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1846              	 .loc 2 653 0
 1847              	 .cfi_startproc
 1848 0000 80B5     	 push {r7,lr}
 1849              	.LCFI82:
 1850              	 .cfi_def_cfa_offset 8
 1851              	 .cfi_offset 7,-8
 1852              	 .cfi_offset 14,-4
 1853 0002 84B0     	 sub sp,sp,#16
 1854              	.LCFI83:
 1855              	 .cfi_def_cfa_offset 24
 1856 0004 00AF     	 add r7,sp,#0
 1857              	.LCFI84:
 1858              	 .cfi_def_cfa_register 7
 1859 0006 7860     	 str r0,[r7,#4]
 1860 0008 3960     	 str r1,[r7]
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 655:../Libraries/XMCLib/src/xmc_vadc.c **** 
 656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 658:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 659:../Libraries/XMCLib/src/xmc_vadc.c **** 
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1861              	 .loc 2 660 0
 1862 000a 7B68     	 ldr r3,[r7,#4]
 1863 000c C022     	 mov r2,#192
 1864 000e 9B58     	 ldr r3,[r3,r2]
 1865 0010 FB60     	 str r3,[r7,#12]
 661:../Libraries/XMCLib/src/xmc_vadc.c **** 
 662:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1866              	 .loc 2 662 0
 1867 0012 FB68     	 ldr r3,[r7,#12]
 1868 0014 0322     	 mov r2,#3
 1869 0016 1340     	 and r3,r2
 1870 0018 0DD1     	 bne .L78
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 664:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1871              	 .loc 2 664 0
 1872 001a 7B68     	 ldr r3,[r7,#4]
 1873 001c 3A68     	 ldr r2,[r7]
 1874 001e 8032     	 add r2,r2,#128
 1875 0020 9200     	 lsl r2,r2,#2
 1876 0022 D358     	 ldr r3,[r2,r3]
 1877 0024 8022     	 mov r2,#128
 1878 0026 D200     	 lsl r2,r2,#3
 1879 0028 1A43     	 orr r2,r3
 1880 002a 111C     	 mov r1,r2
 1881 002c 7B68     	 ldr r3,[r7,#4]
 1882 002e 3A68     	 ldr r2,[r7]
 1883 0030 8032     	 add r2,r2,#128
 1884 0032 9200     	 lsl r2,r2,#2
 1885 0034 D150     	 str r1,[r2,r3]
 1886              	.L78:
 665:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 666:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1887              	 .loc 2 666 0
 1888 0036 BD46     	 mov sp,r7
 1889 0038 04B0     	 add sp,sp,#16
 1890              	 
 1891 003a 80BD     	 pop {r7,pc}
 1892              	 .cfi_endproc
 1893              	.LFE177:
 1895              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1896              	 .align 2
 1897              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1898              	 .code 16
 1899              	 .thumb_func
 1901              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1902              	.LFB178:
 667:../Libraries/XMCLib/src/xmc_vadc.c **** 
 668:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 669:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 670:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1903              	 .loc 2 670 0
 1904              	 .cfi_startproc
 1905 0000 80B5     	 push {r7,lr}
 1906              	.LCFI85:
 1907              	 .cfi_def_cfa_offset 8
 1908              	 .cfi_offset 7,-8
 1909              	 .cfi_offset 14,-4
 1910 0002 84B0     	 sub sp,sp,#16
 1911              	.LCFI86:
 1912              	 .cfi_def_cfa_offset 24
 1913 0004 00AF     	 add r7,sp,#0
 1914              	.LCFI87:
 1915              	 .cfi_def_cfa_register 7
 1916 0006 7860     	 str r0,[r7,#4]
 1917 0008 3960     	 str r1,[r7]
 671:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 672:../Libraries/XMCLib/src/xmc_vadc.c **** 
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 675:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 676:../Libraries/XMCLib/src/xmc_vadc.c **** 
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1918              	 .loc 2 677 0
 1919 000a 7B68     	 ldr r3,[r7,#4]
 1920 000c C022     	 mov r2,#192
 1921 000e 9B58     	 ldr r3,[r3,r2]
 1922 0010 FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c **** 
 679:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1923              	 .loc 2 679 0
 1924 0012 FB68     	 ldr r3,[r7,#12]
 1925 0014 0322     	 mov r2,#3
 1926 0016 1340     	 and r3,r2
 1927 0018 0CD0     	 beq .L80
 680:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 681:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1928              	 .loc 2 681 0
 1929 001a 7B68     	 ldr r3,[r7,#4]
 1930 001c 3A68     	 ldr r2,[r7]
 1931 001e 8032     	 add r2,r2,#128
 1932 0020 9200     	 lsl r2,r2,#2
 1933 0022 D358     	 ldr r3,[r2,r3]
 1934 0024 054A     	 ldr r2,.L82
 1935 0026 1340     	 and r3,r2
 1936 0028 191C     	 mov r1,r3
 1937 002a 7B68     	 ldr r3,[r7,#4]
 1938 002c 3A68     	 ldr r2,[r7]
 1939 002e 8032     	 add r2,r2,#128
 1940 0030 9200     	 lsl r2,r2,#2
 1941 0032 D150     	 str r1,[r2,r3]
 1942              	.L80:
 682:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 683:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1943              	 .loc 2 683 0
 1944 0034 BD46     	 mov sp,r7
 1945 0036 04B0     	 add sp,sp,#16
 1946              	 
 1947 0038 80BD     	 pop {r7,pc}
 1948              	.L83:
 1949 003a C046     	 .align 2
 1950              	.L82:
 1951 003c FFFBFFFF 	 .word -1025
 1952              	 .cfi_endproc
 1953              	.LFE178:
 1955              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1956              	 .align 2
 1957              	 .global XMC_VADC_GROUP_IsConverterBusy
 1958              	 .code 16
 1959              	 .thumb_func
 1961              	XMC_VADC_GROUP_IsConverterBusy:
 1962              	.LFB179:
 684:../Libraries/XMCLib/src/xmc_vadc.c **** 
 685:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 686:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 687:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1963              	 .loc 2 687 0
 1964              	 .cfi_startproc
 1965 0000 80B5     	 push {r7,lr}
 1966              	.LCFI88:
 1967              	 .cfi_def_cfa_offset 8
 1968              	 .cfi_offset 7,-8
 1969              	 .cfi_offset 14,-4
 1970 0002 84B0     	 sub sp,sp,#16
 1971              	.LCFI89:
 1972              	 .cfi_def_cfa_offset 24
 1973 0004 00AF     	 add r7,sp,#0
 1974              	.LCFI90:
 1975              	 .cfi_def_cfa_register 7
 1976 0006 7860     	 str r0,[r7,#4]
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 689:../Libraries/XMCLib/src/xmc_vadc.c **** 
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 691:../Libraries/XMCLib/src/xmc_vadc.c **** 
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1977              	 .loc 2 692 0
 1978 0008 7B68     	 ldr r3,[r7,#4]
 1979 000a 8022     	 mov r2,#128
 1980 000c 9B58     	 ldr r3,[r3,r2]
 1981 000e FB60     	 str r3,[r7,#12]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1982              	 .loc 2 693 0
 1983 0010 FA68     	 ldr r2,[r7,#12]
 1984 0012 8023     	 mov r3,#128
 1985 0014 DB05     	 lsl r3,r3,#23
 1986 0016 1340     	 and r3,r2
 1987 0018 FB60     	 str r3,[r7,#12]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1988              	 .loc 2 694 0
 1989 001a FB68     	 ldr r3,[r7,#12]
 1990 001c 9B0F     	 lsr r3,r3,#30
 1991 001e FB60     	 str r3,[r7,#12]
 695:../Libraries/XMCLib/src/xmc_vadc.c **** 
 696:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 1992              	 .loc 2 696 0
 1993 0020 FB68     	 ldr r3,[r7,#12]
 1994 0022 DBB2     	 uxtb r3,r3
 697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1995              	 .loc 2 697 0
 1996 0024 181C     	 mov r0,r3
 1997 0026 BD46     	 mov sp,r7
 1998 0028 04B0     	 add sp,sp,#16
 1999              	 
 2000 002a 80BD     	 pop {r7,pc}
 2001              	 .cfi_endproc
 2002              	.LFE179:
 2004              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2005              	 .align 2
 2006              	 .global XMC_VADC_GROUP_SetBoundaries
 2007              	 .code 16
 2008              	 .thumb_func
 2010              	XMC_VADC_GROUP_SetBoundaries:
 2011              	.LFB180:
 698:../Libraries/XMCLib/src/xmc_vadc.c **** 
 699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 701:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2012              	 .loc 2 701 0
 2013              	 .cfi_startproc
 2014 0000 80B5     	 push {r7,lr}
 2015              	.LCFI91:
 2016              	 .cfi_def_cfa_offset 8
 2017              	 .cfi_offset 7,-8
 2018              	 .cfi_offset 14,-4
 2019 0002 86B0     	 sub sp,sp,#24
 2020              	.LCFI92:
 2021              	 .cfi_def_cfa_offset 32
 2022 0004 00AF     	 add r7,sp,#0
 2023              	.LCFI93:
 2024              	 .cfi_def_cfa_register 7
 2025 0006 F860     	 str r0,[r7,#12]
 2026 0008 B960     	 str r1,[r7,#8]
 2027 000a 7A60     	 str r2,[r7,#4]
 702:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 703:../Libraries/XMCLib/src/xmc_vadc.c **** 
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 705:../Libraries/XMCLib/src/xmc_vadc.c **** 
 706:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2028              	 .loc 2 707 0
 2029 000c FB68     	 ldr r3,[r7,#12]
 2030 000e B822     	 mov r2,#184
 2031 0010 9B58     	 ldr r3,[r3,r2]
 2032 0012 7B61     	 str r3,[r7,#20]
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2033              	 .loc 2 708 0
 2034 0014 7B69     	 ldr r3,[r7,#20]
 2035 0016 1B0B     	 lsr r3,r3,#12
 2036 0018 1B03     	 lsl r3,r3,#12
 2037 001a 7B61     	 str r3,[r7,#20]
 709:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2038              	 .loc 2 709 0
 2039 001c 7B69     	 ldr r3,[r7,#20]
 2040 001e 094A     	 ldr r2,.L87
 2041 0020 1340     	 and r3,r2
 2042 0022 7B61     	 str r3,[r7,#20]
 710:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2043              	 .loc 2 710 0
 2044 0024 7A69     	 ldr r2,[r7,#20]
 2045 0026 BB68     	 ldr r3,[r7,#8]
 2046 0028 1343     	 orr r3,r2
 2047 002a 7B61     	 str r3,[r7,#20]
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2048              	 .loc 2 711 0
 2049 002c 7B68     	 ldr r3,[r7,#4]
 2050 002e 1B04     	 lsl r3,r3,#16
 2051 0030 7A69     	 ldr r2,[r7,#20]
 2052 0032 1343     	 orr r3,r2
 2053 0034 7B61     	 str r3,[r7,#20]
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2054              	 .loc 2 712 0
 2055 0036 FB68     	 ldr r3,[r7,#12]
 2056 0038 B821     	 mov r1,#184
 2057 003a 7A69     	 ldr r2,[r7,#20]
 2058 003c 5A50     	 str r2,[r3,r1]
 713:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2059              	 .loc 2 713 0
 2060 003e BD46     	 mov sp,r7
 2061 0040 06B0     	 add sp,sp,#24
 2062              	 
 2063 0042 80BD     	 pop {r7,pc}
 2064              	.L88:
 2065              	 .align 2
 2066              	.L87:
 2067 0044 FFFF00F0 	 .word -268369921
 2068              	 .cfi_endproc
 2069              	.LFE180:
 2071              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2072              	 .align 2
 2073              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2074              	 .code 16
 2075              	 .thumb_func
 2077              	XMC_VADC_GROUP_SetIndividualBoundary:
 2078              	.LFB181:
 714:../Libraries/XMCLib/src/xmc_vadc.c **** 
 715:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 716:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 717:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 718:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 719:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2079              	 .loc 2 719 0
 2080              	 .cfi_startproc
 2081 0000 80B5     	 push {r7,lr}
 2082              	.LCFI94:
 2083              	 .cfi_def_cfa_offset 8
 2084              	 .cfi_offset 7,-8
 2085              	 .cfi_offset 14,-4
 2086 0002 84B0     	 sub sp,sp,#16
 2087              	.LCFI95:
 2088              	 .cfi_def_cfa_offset 24
 2089 0004 00AF     	 add r7,sp,#0
 2090              	.LCFI96:
 2091              	 .cfi_def_cfa_register 7
 2092 0006 7860     	 str r0,[r7,#4]
 2093 0008 081C     	 mov r0,r1
 2094 000a 111C     	 mov r1,r2
 2095 000c FB1C     	 add r3,r7,#3
 2096 000e 021C     	 add r2,r0,#0
 2097 0010 1A70     	 strb r2,[r3]
 2098 0012 3B1C     	 mov r3,r7
 2099 0014 0A1C     	 add r2,r1,#0
 2100 0016 1A80     	 strh r2,[r3]
 720:../Libraries/XMCLib/src/xmc_vadc.c **** 
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 722:../Libraries/XMCLib/src/xmc_vadc.c **** 
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 725:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 726:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 727:../Libraries/XMCLib/src/xmc_vadc.c **** 
 728:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 729:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2101              	 .loc 2 729 0
 2102 0018 7B68     	 ldr r3,[r7,#4]
 2103 001a B822     	 mov r2,#184
 2104 001c 9B58     	 ldr r3,[r3,r2]
 2105 001e FB60     	 str r3,[r7,#12]
 730:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2106              	 .loc 2 730 0
 2107 0020 FB1C     	 add r3,r7,#3
 2108 0022 1B78     	 ldrb r3,[r3]
 2109 0024 002B     	 cmp r3,#0
 2110 0026 09D1     	 bne .L90
 731:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 732:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2111              	 .loc 2 732 0
 2112 0028 FB68     	 ldr r3,[r7,#12]
 2113 002a 1B0B     	 lsr r3,r3,#12
 2114 002c 1B03     	 lsl r3,r3,#12
 2115 002e FB60     	 str r3,[r7,#12]
 733:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2116              	 .loc 2 733 0
 2117 0030 3B1C     	 mov r3,r7
 2118 0032 1B88     	 ldrh r3,[r3]
 2119 0034 FA68     	 ldr r2,[r7,#12]
 2120 0036 1343     	 orr r3,r2
 2121 0038 FB60     	 str r3,[r7,#12]
 2122 003a 0DE0     	 b .L91
 2123              	.L90:
 734:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 735:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2124              	 .loc 2 735 0
 2125 003c FB1C     	 add r3,r7,#3
 2126 003e 1B78     	 ldrb r3,[r3]
 2127 0040 012B     	 cmp r3,#1
 2128 0042 09D1     	 bne .L91
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 737:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2129              	 .loc 2 737 0
 2130 0044 FB68     	 ldr r3,[r7,#12]
 2131 0046 084A     	 ldr r2,.L92
 2132 0048 1340     	 and r3,r2
 2133 004a FB60     	 str r3,[r7,#12]
 738:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2134              	 .loc 2 738 0
 2135 004c 3B1C     	 mov r3,r7
 2136 004e 1B88     	 ldrh r3,[r3]
 2137 0050 1B04     	 lsl r3,r3,#16
 2138 0052 FA68     	 ldr r2,[r7,#12]
 2139 0054 1343     	 orr r3,r2
 2140 0056 FB60     	 str r3,[r7,#12]
 2141              	.L91:
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 742:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 743:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 744:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2142              	 .loc 2 744 0
 2143 0058 7B68     	 ldr r3,[r7,#4]
 2144 005a B821     	 mov r1,#184
 2145 005c FA68     	 ldr r2,[r7,#12]
 2146 005e 5A50     	 str r2,[r3,r1]
 745:../Libraries/XMCLib/src/xmc_vadc.c **** 
 746:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2147              	 .loc 2 746 0
 2148 0060 BD46     	 mov sp,r7
 2149 0062 04B0     	 add sp,sp,#16
 2150              	 
 2151 0064 80BD     	 pop {r7,pc}
 2152              	.L93:
 2153 0066 C046     	 .align 2
 2154              	.L92:
 2155 0068 FFFF00F0 	 .word -268369921
 2156              	 .cfi_endproc
 2157              	.LFE181:
 2159              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2160              	 .align 2
 2161              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2162              	 .code 16
 2163              	 .thumb_func
 2165              	XMC_VADC_GROUP_TriggerServiceRequest:
 2166              	.LFB182:
 747:../Libraries/XMCLib/src/xmc_vadc.c **** 
 748:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 749:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 750:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 751:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 752:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2167              	 .loc 2 752 0
 2168              	 .cfi_startproc
 2169 0000 80B5     	 push {r7,lr}
 2170              	.LCFI97:
 2171              	 .cfi_def_cfa_offset 8
 2172              	 .cfi_offset 7,-8
 2173              	 .cfi_offset 14,-4
 2174 0002 86B0     	 sub sp,sp,#24
 2175              	.LCFI98:
 2176              	 .cfi_def_cfa_offset 32
 2177 0004 00AF     	 add r7,sp,#0
 2178              	.LCFI99:
 2179              	 .cfi_def_cfa_register 7
 2180 0006 F860     	 str r0,[r7,#12]
 2181 0008 B960     	 str r1,[r7,#8]
 2182 000a FB1D     	 add r3,r7,#7
 2183 000c 1A70     	 strb r2,[r3]
 753:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 754:../Libraries/XMCLib/src/xmc_vadc.c **** 
 755:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 756:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 757:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 758:../Libraries/XMCLib/src/xmc_vadc.c **** 
 759:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2184              	 .loc 2 759 0
 2185 000e FA68     	 ldr r2,[r7,#12]
 2186 0010 E423     	 mov r3,#228
 2187 0012 5B00     	 lsl r3,r3,#1
 2188 0014 D358     	 ldr r3,[r2,r3]
 2189 0016 7B61     	 str r3,[r7,#20]
 760:../Libraries/XMCLib/src/xmc_vadc.c **** 
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2190              	 .loc 2 761 0
 2191 0018 FB1D     	 add r3,r7,#7
 2192 001a 1B78     	 ldrb r3,[r3]
 2193 001c 002B     	 cmp r3,#0
 2194 001e 07D1     	 bne .L95
 762:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 763:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2195              	 .loc 2 763 0
 2196 0020 BB68     	 ldr r3,[r7,#8]
 2197 0022 0122     	 mov r2,#1
 2198 0024 9A40     	 lsl r2,r2,r3
 2199 0026 131C     	 mov r3,r2
 2200 0028 7A69     	 ldr r2,[r7,#20]
 2201 002a 1343     	 orr r3,r2
 2202 002c 7B61     	 str r3,[r7,#20]
 2203 002e 07E0     	 b .L96
 2204              	.L95:
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 767:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2205              	 .loc 2 767 0
 2206 0030 BB68     	 ldr r3,[r7,#8]
 2207 0032 0833     	 add r3,r3,#8
 2208 0034 1A1C     	 mov r2,r3
 2209 0036 0123     	 mov r3,#1
 2210 0038 9340     	 lsl r3,r3,r2
 2211 003a 7A69     	 ldr r2,[r7,#20]
 2212 003c 1343     	 orr r3,r2
 2213 003e 7B61     	 str r3,[r7,#20]
 2214              	.L96:
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 769:../Libraries/XMCLib/src/xmc_vadc.c **** 
 770:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2215              	 .loc 2 770 0
 2216 0040 FA68     	 ldr r2,[r7,#12]
 2217 0042 E423     	 mov r3,#228
 2218 0044 5B00     	 lsl r3,r3,#1
 2219 0046 7969     	 ldr r1,[r7,#20]
 2220 0048 D150     	 str r1,[r2,r3]
 771:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2221              	 .loc 2 771 0
 2222 004a BD46     	 mov sp,r7
 2223 004c 06B0     	 add sp,sp,#24
 2224              	 
 2225 004e 80BD     	 pop {r7,pc}
 2226              	 .cfi_endproc
 2227              	.LFE182:
 2229              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2230              	 .align 2
 2231              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2232              	 .code 16
 2233              	 .thumb_func
 2235              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2236              	.LFB183:
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 776:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 777:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 778:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 779:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2237              	 .loc 2 779 0
 2238              	 .cfi_startproc
 2239 0000 80B5     	 push {r7,lr}
 2240              	.LCFI100:
 2241              	 .cfi_def_cfa_offset 8
 2242              	 .cfi_offset 7,-8
 2243              	 .cfi_offset 14,-4
 2244 0002 84B0     	 sub sp,sp,#16
 2245              	.LCFI101:
 2246              	 .cfi_def_cfa_offset 24
 2247 0004 00AF     	 add r7,sp,#0
 2248              	.LCFI102:
 2249              	 .cfi_def_cfa_register 7
 2250 0006 7860     	 str r0,[r7,#4]
 2251 0008 081C     	 mov r0,r1
 2252 000a 111C     	 mov r1,r2
 2253 000c FB1C     	 add r3,r7,#3
 2254 000e 021C     	 add r2,r0,#0
 2255 0010 1A70     	 strb r2,[r3]
 2256 0012 BB1C     	 add r3,r7,#2
 2257 0014 0A1C     	 add r2,r1,#0
 2258 0016 1A70     	 strb r2,[r3]
 780:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 781:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 782:../Libraries/XMCLib/src/xmc_vadc.c **** 
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 784:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2259              	 .loc 2 784 0
 2260 0018 FB1C     	 add r3,r7,#3
 2261 001a 1B78     	 ldrb r3,[r3]
 2262 001c 9B00     	 lsl r3,r3,#2
 2263 001e FB60     	 str r3,[r7,#12]
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2264              	 .loc 2 785 0
 2265 0020 7B68     	 ldr r3,[r7,#4]
 2266 0022 D422     	 mov r2,#212
 2267 0024 9B58     	 ldr r3,[r3,r2]
 2268 0026 FA68     	 ldr r2,[r7,#12]
 2269 0028 0F21     	 mov r1,#15
 2270 002a 9140     	 lsl r1,r1,r2
 2271 002c 0A1C     	 mov r2,r1
 2272 002e D243     	 mvn r2,r2
 2273 0030 1A40     	 and r2,r3
 2274 0032 7B68     	 ldr r3,[r7,#4]
 2275 0034 D421     	 mov r1,#212
 2276 0036 5A50     	 str r2,[r3,r1]
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2277              	 .loc 2 786 0
 2278 0038 7B68     	 ldr r3,[r7,#4]
 2279 003a D422     	 mov r2,#212
 2280 003c 9A58     	 ldr r2,[r3,r2]
 2281 003e BB1C     	 add r3,r7,#2
 2282 0040 1978     	 ldrb r1,[r3]
 2283 0042 FB68     	 ldr r3,[r7,#12]
 2284 0044 9940     	 lsl r1,r1,r3
 2285 0046 0B1C     	 mov r3,r1
 2286 0048 1A43     	 orr r2,r3
 2287 004a 7B68     	 ldr r3,[r7,#4]
 2288 004c D421     	 mov r1,#212
 2289 004e 5A50     	 str r2,[r3,r1]
 787:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2290              	 .loc 2 787 0
 2291 0050 BD46     	 mov sp,r7
 2292 0052 04B0     	 add sp,sp,#16
 2293              	 
 2294 0054 80BD     	 pop {r7,pc}
 2295              	 .cfi_endproc
 2296              	.LFE183:
 2298 0056 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2299              	 .align 2
 2300              	 .global XMC_VADC_GLOBAL_SHS_Init
 2301              	 .code 16
 2302              	 .thumb_func
 2304              	XMC_VADC_GLOBAL_SHS_Init:
 2305              	.LFB184:
 788:../Libraries/XMCLib/src/xmc_vadc.c **** 
 789:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 790:../Libraries/XMCLib/src/xmc_vadc.c **** 
 791:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 792:../Libraries/XMCLib/src/xmc_vadc.c **** 
 793:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 794:../Libraries/XMCLib/src/xmc_vadc.c **** 
 795:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 796:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 797:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2306              	 .loc 2 797 0
 2307              	 .cfi_startproc
 2308 0000 80B5     	 push {r7,lr}
 2309              	.LCFI103:
 2310              	 .cfi_def_cfa_offset 8
 2311              	 .cfi_offset 7,-8
 2312              	 .cfi_offset 14,-4
 2313 0002 82B0     	 sub sp,sp,#8
 2314              	.LCFI104:
 2315              	 .cfi_def_cfa_offset 16
 2316 0004 00AF     	 add r7,sp,#0
 2317              	.LCFI105:
 2318              	 .cfi_def_cfa_register 7
 2319 0006 7860     	 str r0,[r7,#4]
 2320 0008 3960     	 str r1,[r7]
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 799:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 800:../Libraries/XMCLib/src/xmc_vadc.c **** 
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2321              	 .loc 2 802 0
 2322 000a 3B68     	 ldr r3,[r7]
 2323 000c 1B68     	 ldr r3,[r3]
 2324 000e 8022     	 mov r2,#128
 2325 0010 1202     	 lsl r2,r2,#8
 2326 0012 1A43     	 orr r2,r3
 2327 0014 7B68     	 ldr r3,[r7,#4]
 2328 0016 1A64     	 str r2,[r3,#64]
 803:../Libraries/XMCLib/src/xmc_vadc.c **** 
 804:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2329              	 .loc 2 806 0
 2330 0018 7B68     	 ldr r3,[r7,#4]
 2331 001a BC22     	 mov r2,#188
 2332 001c 9B58     	 ldr r3,[r3,r2]
 2333 001e 0122     	 mov r2,#1
 2334 0020 9343     	 bic r3,r2
 2335 0022 1A1C     	 mov r2,r3
 2336 0024 7B68     	 ldr r3,[r7,#4]
 2337 0026 BC21     	 mov r1,#188
 2338 0028 5A50     	 str r2,[r3,r1]
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2339              	 .loc 2 807 0
 2340 002a 7B68     	 ldr r3,[r7,#4]
 2341 002c BC22     	 mov r2,#188
 2342 002e 9B58     	 ldr r3,[r3,r2]
 2343 0030 3A68     	 ldr r2,[r7]
 2344 0032 1279     	 ldrb r2,[r2,#4]
 2345 0034 1A43     	 orr r2,r3
 2346 0036 7B68     	 ldr r3,[r7,#4]
 2347 0038 BC21     	 mov r1,#188
 2348 003a 5A50     	 str r2,[r3,r1]
 808:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 809:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2349              	 .loc 2 809 0
 2350 003c BD46     	 mov sp,r7
 2351 003e 02B0     	 add sp,sp,#8
 2352              	 
 2353 0040 80BD     	 pop {r7,pc}
 2354              	 .cfi_endproc
 2355              	.LFE184:
 2357 0042 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2358              	 .align 2
 2359              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2360              	 .code 16
 2361              	 .thumb_func
 2363              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2364              	.LFB185:
 810:../Libraries/XMCLib/src/xmc_vadc.c **** 
 811:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 812:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 813:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 814:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2365              	 .loc 2 814 0
 2366              	 .cfi_startproc
 2367 0000 80B5     	 push {r7,lr}
 2368              	.LCFI106:
 2369              	 .cfi_def_cfa_offset 8
 2370              	 .cfi_offset 7,-8
 2371              	 .cfi_offset 14,-4
 2372 0002 82B0     	 sub sp,sp,#8
 2373              	.LCFI107:
 2374              	 .cfi_def_cfa_offset 16
 2375 0004 00AF     	 add r7,sp,#0
 2376              	.LCFI108:
 2377              	 .cfi_def_cfa_register 7
 2378 0006 7860     	 str r0,[r7,#4]
 2379 0008 0A1C     	 mov r2,r1
 2380 000a FB1C     	 add r3,r7,#3
 2381 000c 1A70     	 strb r2,[r3]
 815:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 816:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 817:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 818:../Libraries/XMCLib/src/xmc_vadc.c **** 
 819:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2382              	 .loc 2 820 0
 2383 000e FB1C     	 add r3,r7,#3
 2384 0010 1B78     	 ldrb r3,[r3]
 2385 0012 002B     	 cmp r3,#0
 2386 0014 08D1     	 bne .L100
 821:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 822:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2387              	 .loc 2 822 0
 2388 0016 7B68     	 ldr r3,[r7,#4]
 2389 0018 8022     	 mov r2,#128
 2390 001a 9B58     	 ldr r3,[r3,r2]
 2391 001c 0122     	 mov r2,#1
 2392 001e 1A43     	 orr r2,r3
 2393 0020 7B68     	 ldr r3,[r7,#4]
 2394 0022 8021     	 mov r1,#128
 2395 0024 5A50     	 str r2,[r3,r1]
 2396 0026 0BE0     	 b .L99
 2397              	.L100:
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2398              	 .loc 2 824 0
 2399 0028 FB1C     	 add r3,r7,#3
 2400 002a 1B78     	 ldrb r3,[r3]
 2401 002c 012B     	 cmp r3,#1
 2402 002e 07D1     	 bne .L99
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 826:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 2403              	 .loc 2 826 0
 2404 0030 7B68     	 ldr r3,[r7,#4]
 2405 0032 8422     	 mov r2,#132
 2406 0034 9B58     	 ldr r3,[r3,r2]
 2407 0036 0122     	 mov r2,#1
 2408 0038 1A43     	 orr r2,r3
 2409 003a 7B68     	 ldr r3,[r7,#4]
 2410 003c 8421     	 mov r1,#132
 2411 003e 5A50     	 str r2,[r3,r1]
 2412              	.L99:
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 830:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 832:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2413              	 .loc 2 832 0
 2414 0040 BD46     	 mov sp,r7
 2415 0042 02B0     	 add sp,sp,#8
 2416              	 
 2417 0044 80BD     	 pop {r7,pc}
 2418              	 .cfi_endproc
 2419              	.LFE185:
 2421 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2422              	 .align 2
 2423              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2424              	 .code 16
 2425              	 .thumb_func
 2427              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2428              	.LFB186:
 833:../Libraries/XMCLib/src/xmc_vadc.c **** 
 834:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 835:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 836:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2429              	 .loc 2 836 0
 2430              	 .cfi_startproc
 2431 0000 80B5     	 push {r7,lr}
 2432              	.LCFI109:
 2433              	 .cfi_def_cfa_offset 8
 2434              	 .cfi_offset 7,-8
 2435              	 .cfi_offset 14,-4
 2436 0002 82B0     	 sub sp,sp,#8
 2437              	.LCFI110:
 2438              	 .cfi_def_cfa_offset 16
 2439 0004 00AF     	 add r7,sp,#0
 2440              	.LCFI111:
 2441              	 .cfi_def_cfa_register 7
 2442 0006 7860     	 str r0,[r7,#4]
 2443 0008 0A1C     	 mov r2,r1
 2444 000a FB1C     	 add r3,r7,#3
 2445 000c 1A70     	 strb r2,[r3]
 837:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 838:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 839:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 840:../Libraries/XMCLib/src/xmc_vadc.c **** 
 841:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2446              	 .loc 2 842 0
 2447 000e FB1C     	 add r3,r7,#3
 2448 0010 1B78     	 ldrb r3,[r3]
 2449 0012 002B     	 cmp r3,#0
 2450 0014 09D1     	 bne .L103
 843:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 844:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2451              	 .loc 2 844 0
 2452 0016 7B68     	 ldr r3,[r7,#4]
 2453 0018 8022     	 mov r2,#128
 2454 001a 9B58     	 ldr r3,[r3,r2]
 2455 001c 0122     	 mov r2,#1
 2456 001e 9343     	 bic r3,r2
 2457 0020 1A1C     	 mov r2,r3
 2458 0022 7B68     	 ldr r3,[r7,#4]
 2459 0024 8021     	 mov r1,#128
 2460 0026 5A50     	 str r2,[r3,r1]
 2461 0028 0CE0     	 b .L102
 2462              	.L103:
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2463              	 .loc 2 846 0
 2464 002a FB1C     	 add r3,r7,#3
 2465 002c 1B78     	 ldrb r3,[r3]
 2466 002e 012B     	 cmp r3,#1
 2467 0030 08D1     	 bne .L102
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 848:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 2468              	 .loc 2 848 0
 2469 0032 7B68     	 ldr r3,[r7,#4]
 2470 0034 8422     	 mov r2,#132
 2471 0036 9B58     	 ldr r3,[r3,r2]
 2472 0038 0122     	 mov r2,#1
 2473 003a 9343     	 bic r3,r2
 2474 003c 1A1C     	 mov r2,r3
 2475 003e 7B68     	 ldr r3,[r7,#4]
 2476 0040 8421     	 mov r1,#132
 2477 0042 5A50     	 str r2,[r3,r1]
 2478              	.L102:
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 850:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 852:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 854:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2479              	 .loc 2 854 0
 2480 0044 BD46     	 mov sp,r7
 2481 0046 02B0     	 add sp,sp,#8
 2482              	 
 2483 0048 80BD     	 pop {r7,pc}
 2484              	 .cfi_endproc
 2485              	.LFE186:
 2487 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2488              	 .align 2
 2489              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2490              	 .code 16
 2491              	 .thumb_func
 2493              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2494              	.LFB187:
 855:../Libraries/XMCLib/src/xmc_vadc.c **** 
 856:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 857:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 858:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 859:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 860:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2495              	 .loc 2 860 0
 2496              	 .cfi_startproc
 2497 0000 80B5     	 push {r7,lr}
 2498              	.LCFI112:
 2499              	 .cfi_def_cfa_offset 8
 2500              	 .cfi_offset 7,-8
 2501              	 .cfi_offset 14,-4
 2502 0002 82B0     	 sub sp,sp,#8
 2503              	.LCFI113:
 2504              	 .cfi_def_cfa_offset 16
 2505 0004 00AF     	 add r7,sp,#0
 2506              	.LCFI114:
 2507              	 .cfi_def_cfa_register 7
 2508 0006 7860     	 str r0,[r7,#4]
 2509 0008 081C     	 mov r0,r1
 2510 000a 111C     	 mov r1,r2
 2511 000c FB1C     	 add r3,r7,#3
 2512 000e 021C     	 add r2,r0,#0
 2513 0010 1A70     	 strb r2,[r3]
 2514 0012 BB1C     	 add r3,r7,#2
 2515 0014 0A1C     	 add r2,r1,#0
 2516 0016 1A70     	 strb r2,[r3]
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 862:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 863:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 864:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 865:../Libraries/XMCLib/src/xmc_vadc.c **** 
 866:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 867:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2517              	 .loc 2 867 0
 2518 0018 FB1C     	 add r3,r7,#3
 2519 001a 1B78     	 ldrb r3,[r3]
 2520 001c 002B     	 cmp r3,#0
 2521 001e 12D1     	 bne .L106
 868:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 869:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2522              	 .loc 2 869 0
 2523 0020 7B68     	 ldr r3,[r7,#4]
 2524 0022 8022     	 mov r2,#128
 2525 0024 9B58     	 ldr r3,[r3,r2]
 2526 0026 144A     	 ldr r2,.L108
 2527 0028 1A40     	 and r2,r3
 2528 002a 7B68     	 ldr r3,[r7,#4]
 2529 002c 8021     	 mov r1,#128
 2530 002e 5A50     	 str r2,[r3,r1]
 870:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2531              	 .loc 2 870 0
 2532 0030 7B68     	 ldr r3,[r7,#4]
 2533 0032 8022     	 mov r2,#128
 2534 0034 9A58     	 ldr r2,[r3,r2]
 2535 0036 BB1C     	 add r3,r7,#2
 2536 0038 1B78     	 ldrb r3,[r3]
 2537 003a 1B02     	 lsl r3,r3,#8
 2538 003c 1A43     	 orr r2,r3
 2539 003e 7B68     	 ldr r3,[r7,#4]
 2540 0040 8021     	 mov r1,#128
 2541 0042 5A50     	 str r2,[r3,r1]
 2542 0044 15E0     	 b .L105
 2543              	.L106:
 871:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2544              	 .loc 2 872 0
 2545 0046 FB1C     	 add r3,r7,#3
 2546 0048 1B78     	 ldrb r3,[r3]
 2547 004a 012B     	 cmp r3,#1
 2548 004c 11D1     	 bne .L105
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 874:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 2549              	 .loc 2 874 0
 2550 004e 7B68     	 ldr r3,[r7,#4]
 2551 0050 8422     	 mov r2,#132
 2552 0052 9B58     	 ldr r3,[r3,r2]
 2553 0054 084A     	 ldr r2,.L108
 2554 0056 1A40     	 and r2,r3
 2555 0058 7B68     	 ldr r3,[r7,#4]
 2556 005a 8421     	 mov r1,#132
 2557 005c 5A50     	 str r2,[r3,r1]
 875:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2558              	 .loc 2 875 0
 2559 005e 7B68     	 ldr r3,[r7,#4]
 2560 0060 8422     	 mov r2,#132
 2561 0062 9A58     	 ldr r2,[r3,r2]
 2562 0064 BB1C     	 add r3,r7,#2
 2563 0066 1B78     	 ldrb r3,[r3]
 2564 0068 1B02     	 lsl r3,r3,#8
 2565 006a 1A43     	 orr r2,r3
 2566 006c 7B68     	 ldr r3,[r7,#4]
 2567 006e 8421     	 mov r1,#132
 2568 0070 5A50     	 str r2,[r3,r1]
 2569              	.L105:
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 880:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 881:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2570              	 .loc 2 881 0
 2571 0072 BD46     	 mov sp,r7
 2572 0074 02B0     	 add sp,sp,#8
 2573              	 
 2574 0076 80BD     	 pop {r7,pc}
 2575              	.L109:
 2576              	 .align 2
 2577              	.L108:
 2578 0078 FFC0FFFF 	 .word -16129
 2579              	 .cfi_endproc
 2580              	.LFE187:
 2582              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2583              	 .align 2
 2584              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2585              	 .code 16
 2586              	 .thumb_func
 2588              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2589              	.LFB188:
 882:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 883:../Libraries/XMCLib/src/xmc_vadc.c **** 
 884:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 885:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 886:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 887:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 888:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 889:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2590              	 .loc 2 889 0
 2591              	 .cfi_startproc
 2592 0000 90B5     	 push {r4,r7,lr}
 2593              	.LCFI115:
 2594              	 .cfi_def_cfa_offset 12
 2595              	 .cfi_offset 4,-12
 2596              	 .cfi_offset 7,-8
 2597              	 .cfi_offset 14,-4
 2598 0002 85B0     	 sub sp,sp,#20
 2599              	.LCFI116:
 2600              	 .cfi_def_cfa_offset 32
 2601 0004 00AF     	 add r7,sp,#0
 2602              	.LCFI117:
 2603              	 .cfi_def_cfa_register 7
 2604 0006 7860     	 str r0,[r7,#4]
 2605 0008 0C1C     	 mov r4,r1
 2606 000a 101C     	 mov r0,r2
 2607 000c 191C     	 mov r1,r3
 2608 000e FB1C     	 add r3,r7,#3
 2609 0010 221C     	 add r2,r4,#0
 2610 0012 1A70     	 strb r2,[r3]
 2611 0014 BB1C     	 add r3,r7,#2
 2612 0016 021C     	 add r2,r0,#0
 2613 0018 1A70     	 strb r2,[r3]
 2614 001a 7B1C     	 add r3,r7,#1
 2615 001c 0A1C     	 add r2,r1,#0
 2616 001e 1A70     	 strb r2,[r3]
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 891:../Libraries/XMCLib/src/xmc_vadc.c **** 
 892:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 893:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 894:../Libraries/XMCLib/src/xmc_vadc.c **** 
 895:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 896:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2617              	 .loc 2 896 0
 2618 0020 7B1C     	 add r3,r7,#1
 2619 0022 1B78     	 ldrb r3,[r3]
 2620 0024 9B00     	 lsl r3,r3,#2
 2621 0026 FB60     	 str r3,[r7,#12]
 897:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2622              	 .loc 2 897 0
 2623 0028 BB1C     	 add r3,r7,#2
 2624 002a 1B78     	 ldrb r3,[r3]
 2625 002c 002B     	 cmp r3,#0
 2626 002e 1ED1     	 bne .L111
 898:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 899:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2627              	 .loc 2 899 0
 2628 0030 7A68     	 ldr r2,[r7,#4]
 2629 0032 C023     	 mov r3,#192
 2630 0034 5B00     	 lsl r3,r3,#1
 2631 0036 D358     	 ldr r3,[r2,r3]
 2632 0038 FA68     	 ldr r2,[r7,#12]
 2633 003a 0F21     	 mov r1,#15
 2634 003c 9140     	 lsl r1,r1,r2
 2635 003e 0A1C     	 mov r2,r1
 2636 0040 D243     	 mvn r2,r2
 2637 0042 1A40     	 and r2,r3
 2638 0044 111C     	 mov r1,r2
 2639 0046 7A68     	 ldr r2,[r7,#4]
 2640 0048 C023     	 mov r3,#192
 2641 004a 5B00     	 lsl r3,r3,#1
 2642 004c D150     	 str r1,[r2,r3]
 900:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2643              	 .loc 2 900 0
 2644 004e 7A68     	 ldr r2,[r7,#4]
 2645 0050 C023     	 mov r3,#192
 2646 0052 5B00     	 lsl r3,r3,#1
 2647 0054 D258     	 ldr r2,[r2,r3]
 2648 0056 FB1C     	 add r3,r7,#3
 2649 0058 1978     	 ldrb r1,[r3]
 2650 005a FB68     	 ldr r3,[r7,#12]
 2651 005c 9940     	 lsl r1,r1,r3
 2652 005e 0B1C     	 mov r3,r1
 2653 0060 1A43     	 orr r2,r3
 2654 0062 111C     	 mov r1,r2
 2655 0064 7A68     	 ldr r2,[r7,#4]
 2656 0066 C023     	 mov r3,#192
 2657 0068 5B00     	 lsl r3,r3,#1
 2658 006a D150     	 str r1,[r2,r3]
 2659 006c 21E0     	 b .L110
 2660              	.L111:
 901:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 902:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2661              	 .loc 2 902 0
 2662 006e BB1C     	 add r3,r7,#2
 2663 0070 1B78     	 ldrb r3,[r3]
 2664 0072 012B     	 cmp r3,#1
 2665 0074 1DD1     	 bne .L110
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 904:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 2666              	 .loc 2 904 0
 2667 0076 7A68     	 ldr r2,[r7,#4]
 2668 0078 C823     	 mov r3,#200
 2669 007a 5B00     	 lsl r3,r3,#1
 2670 007c D358     	 ldr r3,[r2,r3]
 2671 007e FA68     	 ldr r2,[r7,#12]
 2672 0080 0F21     	 mov r1,#15
 2673 0082 9140     	 lsl r1,r1,r2
 2674 0084 0A1C     	 mov r2,r1
 2675 0086 D243     	 mvn r2,r2
 2676 0088 1A40     	 and r2,r3
 2677 008a 111C     	 mov r1,r2
 2678 008c 7A68     	 ldr r2,[r7,#4]
 2679 008e C823     	 mov r3,#200
 2680 0090 5B00     	 lsl r3,r3,#1
 2681 0092 D150     	 str r1,[r2,r3]
 905:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2682              	 .loc 2 905 0
 2683 0094 7A68     	 ldr r2,[r7,#4]
 2684 0096 C823     	 mov r3,#200
 2685 0098 5B00     	 lsl r3,r3,#1
 2686 009a D258     	 ldr r2,[r2,r3]
 2687 009c FB1C     	 add r3,r7,#3
 2688 009e 1978     	 ldrb r1,[r3]
 2689 00a0 FB68     	 ldr r3,[r7,#12]
 2690 00a2 9940     	 lsl r1,r1,r3
 2691 00a4 0B1C     	 mov r3,r1
 2692 00a6 1A43     	 orr r2,r3
 2693 00a8 111C     	 mov r1,r2
 2694 00aa 7A68     	 ldr r2,[r7,#4]
 2695 00ac C823     	 mov r3,#200
 2696 00ae 5B00     	 lsl r3,r3,#1
 2697 00b0 D150     	 str r1,[r2,r3]
 2698              	.L110:
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2699              	 .loc 2 911 0
 2700 00b2 BD46     	 mov sp,r7
 2701 00b4 05B0     	 add sp,sp,#20
 2702              	 
 2703 00b6 90BD     	 pop {r4,r7,pc}
 2704              	 .cfi_endproc
 2705              	.LFE188:
 2707              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 2708              	 .align 2
 2709              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 2710              	 .code 16
 2711              	 .thumb_func
 2713              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 2714              	.LFB189:
 912:../Libraries/XMCLib/src/xmc_vadc.c **** 
 913:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 914:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 915:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 916:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 917:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2715              	 .loc 2 917 0
 2716              	 .cfi_startproc
 2717 0000 80B5     	 push {r7,lr}
 2718              	.LCFI118:
 2719              	 .cfi_def_cfa_offset 8
 2720              	 .cfi_offset 7,-8
 2721              	 .cfi_offset 14,-4
 2722 0002 82B0     	 sub sp,sp,#8
 2723              	.LCFI119:
 2724              	 .cfi_def_cfa_offset 16
 2725 0004 00AF     	 add r7,sp,#0
 2726              	.LCFI120:
 2727              	 .cfi_def_cfa_register 7
 2728 0006 7860     	 str r0,[r7,#4]
 2729 0008 0A1C     	 mov r2,r1
 2730 000a FB1C     	 add r3,r7,#3
 2731 000c 1A70     	 strb r2,[r3]
 918:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 919:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 921:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 922:../Libraries/XMCLib/src/xmc_vadc.c **** 
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2732              	 .loc 2 924 0
 2733 000e FB1C     	 add r3,r7,#3
 2734 0010 1B78     	 ldrb r3,[r3]
 2735 0012 002B     	 cmp r3,#0
 2736 0014 08D1     	 bne .L114
 925:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 926:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 2737              	 .loc 2 926 0
 2738 0016 7B68     	 ldr r3,[r7,#4]
 2739 0018 E022     	 mov r2,#224
 2740 001a 9B58     	 ldr r3,[r3,r2]
 2741 001c 5B00     	 lsl r3,r3,#1
 2742 001e 5A08     	 lsr r2,r3,#1
 2743 0020 7B68     	 ldr r3,[r7,#4]
 2744 0022 E021     	 mov r1,#224
 2745 0024 5A50     	 str r2,[r3,r1]
 2746 0026 0BE0     	 b .L113
 2747              	.L114:
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2748              	 .loc 2 928 0
 2749 0028 FB1C     	 add r3,r7,#3
 2750 002a 1B78     	 ldrb r3,[r3]
 2751 002c 012B     	 cmp r3,#1
 2752 002e 07D1     	 bne .L113
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 930:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 2753              	 .loc 2 930 0
 2754 0030 7B68     	 ldr r3,[r7,#4]
 2755 0032 E422     	 mov r2,#228
 2756 0034 9B58     	 ldr r3,[r3,r2]
 2757 0036 5B00     	 lsl r3,r3,#1
 2758 0038 5A08     	 lsr r2,r3,#1
 2759 003a 7B68     	 ldr r3,[r7,#4]
 2760 003c E421     	 mov r1,#228
 2761 003e 5A50     	 str r2,[r3,r1]
 2762              	.L113:
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 932:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 934:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 936:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2763              	 .loc 2 936 0
 2764 0040 BD46     	 mov sp,r7
 2765 0042 02B0     	 add sp,sp,#8
 2766              	 
 2767 0044 80BD     	 pop {r7,pc}
 2768              	 .cfi_endproc
 2769              	.LFE189:
 2771 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 2772              	 .align 2
 2773              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 2774              	 .code 16
 2775              	 .thumb_func
 2777              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 2778              	.LFB190:
 937:../Libraries/XMCLib/src/xmc_vadc.c **** 
 938:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 939:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 940:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 941:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2779              	 .loc 2 941 0
 2780              	 .cfi_startproc
 2781 0000 80B5     	 push {r7,lr}
 2782              	.LCFI121:
 2783              	 .cfi_def_cfa_offset 8
 2784              	 .cfi_offset 7,-8
 2785              	 .cfi_offset 14,-4
 2786 0002 82B0     	 sub sp,sp,#8
 2787              	.LCFI122:
 2788              	 .cfi_def_cfa_offset 16
 2789 0004 00AF     	 add r7,sp,#0
 2790              	.LCFI123:
 2791              	 .cfi_def_cfa_register 7
 2792 0006 7860     	 str r0,[r7,#4]
 2793 0008 0A1C     	 mov r2,r1
 2794 000a FB1C     	 add r3,r7,#3
 2795 000c 1A70     	 strb r2,[r3]
 942:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 944:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 945:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 946:../Libraries/XMCLib/src/xmc_vadc.c **** 
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2796              	 .loc 2 947 0
 2797 000e FB1C     	 add r3,r7,#3
 2798 0010 1B78     	 ldrb r3,[r3]
 2799 0012 002B     	 cmp r3,#0
 2800 0014 09D1     	 bne .L117
 948:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 949:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 2801              	 .loc 2 949 0
 2802 0016 7B68     	 ldr r3,[r7,#4]
 2803 0018 E022     	 mov r2,#224
 2804 001a 9B58     	 ldr r3,[r3,r2]
 2805 001c 8022     	 mov r2,#128
 2806 001e 1206     	 lsl r2,r2,#24
 2807 0020 1A43     	 orr r2,r3
 2808 0022 7B68     	 ldr r3,[r7,#4]
 2809 0024 E021     	 mov r1,#224
 2810 0026 5A50     	 str r2,[r3,r1]
 2811 0028 0CE0     	 b .L116
 2812              	.L117:
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2813              	 .loc 2 951 0
 2814 002a FB1C     	 add r3,r7,#3
 2815 002c 1B78     	 ldrb r3,[r3]
 2816 002e 012B     	 cmp r3,#1
 2817 0030 08D1     	 bne .L116
 952:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 953:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 2818              	 .loc 2 953 0
 2819 0032 7B68     	 ldr r3,[r7,#4]
 2820 0034 E422     	 mov r2,#228
 2821 0036 9B58     	 ldr r3,[r3,r2]
 2822 0038 8022     	 mov r2,#128
 2823 003a 1206     	 lsl r2,r2,#24
 2824 003c 1A43     	 orr r2,r3
 2825 003e 7B68     	 ldr r3,[r7,#4]
 2826 0040 E421     	 mov r1,#228
 2827 0042 5A50     	 str r2,[r3,r1]
 2828              	.L116:
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 957:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 959:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2829              	 .loc 2 959 0
 2830 0044 BD46     	 mov sp,r7
 2831 0046 02B0     	 add sp,sp,#8
 2832              	 
 2833 0048 80BD     	 pop {r7,pc}
 2834              	 .cfi_endproc
 2835              	.LFE190:
 2837 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 2838              	 .align 2
 2839              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 2840              	 .code 16
 2841              	 .thumb_func
 2843              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 2844              	.LFB191:
 960:../Libraries/XMCLib/src/xmc_vadc.c **** 
 961:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 962:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 963:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 964:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 965:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2845              	 .loc 2 965 0
 2846              	 .cfi_startproc
 2847 0000 80B5     	 push {r7,lr}
 2848              	.LCFI124:
 2849              	 .cfi_def_cfa_offset 8
 2850              	 .cfi_offset 7,-8
 2851              	 .cfi_offset 14,-4
 2852 0002 84B0     	 sub sp,sp,#16
 2853              	.LCFI125:
 2854              	 .cfi_def_cfa_offset 24
 2855 0004 00AF     	 add r7,sp,#0
 2856              	.LCFI126:
 2857              	 .cfi_def_cfa_register 7
 2858 0006 7860     	 str r0,[r7,#4]
 2859 0008 081C     	 mov r0,r1
 2860 000a 111C     	 mov r1,r2
 2861 000c FB1C     	 add r3,r7,#3
 2862 000e 021C     	 add r2,r0,#0
 2863 0010 1A70     	 strb r2,[r3]
 2864 0012 BB1C     	 add r3,r7,#2
 2865 0014 0A1C     	 add r2,r1,#0
 2866 0016 1A70     	 strb r2,[r3]
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 968:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 969:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 970:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 971:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 972:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 973:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 974:../Libraries/XMCLib/src/xmc_vadc.c **** 
 975:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 2867              	 .loc 2 975 0
 2868 0018 0023     	 mov r3,#0
 2869 001a FB60     	 str r3,[r7,#12]
 976:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2870              	 .loc 2 976 0
 2871 001c FB1C     	 add r3,r7,#3
 2872 001e 1B78     	 ldrb r3,[r3]
 2873 0020 002B     	 cmp r3,#0
 2874 0022 0AD1     	 bne .L120
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 978:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 2875              	 .loc 2 978 0
 2876 0024 7B68     	 ldr r3,[r7,#4]
 2877 0026 E022     	 mov r2,#224
 2878 0028 9A58     	 ldr r2,[r3,r2]
 2879 002a BB1C     	 add r3,r7,#2
 2880 002c 1B78     	 ldrb r3,[r3]
 2881 002e DA40     	 lsr r2,r2,r3
 2882 0030 131C     	 mov r3,r2
 2883 0032 7F22     	 mov r2,#127
 2884 0034 1340     	 and r3,r2
 2885 0036 FB60     	 str r3,[r7,#12]
 2886 0038 0DE0     	 b .L121
 2887              	.L120:
 979:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2888              	 .loc 2 980 0
 2889 003a FB1C     	 add r3,r7,#3
 2890 003c 1B78     	 ldrb r3,[r3]
 2891 003e 012B     	 cmp r3,#1
 2892 0040 09D1     	 bne .L121
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 982:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 2893              	 .loc 2 982 0
 2894 0042 7B68     	 ldr r3,[r7,#4]
 2895 0044 E422     	 mov r2,#228
 2896 0046 9A58     	 ldr r2,[r3,r2]
 2897 0048 BB1C     	 add r3,r7,#2
 2898 004a 1B78     	 ldrb r3,[r3]
 2899 004c DA40     	 lsr r2,r2,r3
 2900 004e 131C     	 mov r3,r2
 2901 0050 7F22     	 mov r2,#127
 2902 0052 1340     	 and r3,r2
 2903 0054 FB60     	 str r3,[r7,#12]
 2904              	.L121:
 983:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 986:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 987:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 988:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 2905              	 .loc 2 988 0
 2906 0056 FB68     	 ldr r3,[r7,#12]
 2907 0058 DBB2     	 uxtb r3,r3
 989:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2908              	 .loc 2 989 0
 2909 005a 181C     	 mov r0,r3
 2910 005c BD46     	 mov sp,r7
 2911 005e 04B0     	 add sp,sp,#16
 2912              	 
 2913 0060 80BD     	 pop {r7,pc}
 2914              	 .cfi_endproc
 2915              	.LFE191:
 2917 0062 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 2918              	 .align 2
 2919              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 2920              	 .code 16
 2921              	 .thumb_func
 2923              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 2924              	.LFB192:
 990:../Libraries/XMCLib/src/xmc_vadc.c **** 
 991:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 992:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 993:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 994:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 995:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 996:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2925              	 .loc 2 996 0
 2926              	 .cfi_startproc
 2927 0000 90B5     	 push {r4,r7,lr}
 2928              	.LCFI127:
 2929              	 .cfi_def_cfa_offset 12
 2930              	 .cfi_offset 4,-12
 2931              	 .cfi_offset 7,-8
 2932              	 .cfi_offset 14,-4
 2933 0002 83B0     	 sub sp,sp,#12
 2934              	.LCFI128:
 2935              	 .cfi_def_cfa_offset 24
 2936 0004 00AF     	 add r7,sp,#0
 2937              	.LCFI129:
 2938              	 .cfi_def_cfa_register 7
 2939 0006 7860     	 str r0,[r7,#4]
 2940 0008 0C1C     	 mov r4,r1
 2941 000a 101C     	 mov r0,r2
 2942 000c 191C     	 mov r1,r3
 2943 000e FB1C     	 add r3,r7,#3
 2944 0010 221C     	 add r2,r4,#0
 2945 0012 1A70     	 strb r2,[r3]
 2946 0014 BB1C     	 add r3,r7,#2
 2947 0016 021C     	 add r2,r0,#0
 2948 0018 1A70     	 strb r2,[r3]
 2949 001a 7B1C     	 add r3,r7,#1
 2950 001c 0A1C     	 add r2,r1,#0
 2951 001e 1A70     	 strb r2,[r3]
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 998:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
1000:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1001:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
1002:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
1003:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
1004:../Libraries/XMCLib/src/xmc_vadc.c **** 
1005:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2952              	 .loc 2 1005 0
 2953 0020 FB1C     	 add r3,r7,#3
 2954 0022 1B78     	 ldrb r3,[r3]
 2955 0024 002B     	 cmp r3,#0
 2956 0026 20D1     	 bne .L124
1006:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1007:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 2957              	 .loc 2 1007 0
 2958 0028 7B68     	 ldr r3,[r7,#4]
 2959 002a E022     	 mov r2,#224
 2960 002c 9B58     	 ldr r3,[r3,r2]
 2961 002e BA1C     	 add r2,r7,#2
 2962 0030 1278     	 ldrb r2,[r2]
 2963 0032 7F21     	 mov r1,#127
 2964 0034 9140     	 lsl r1,r1,r2
 2965 0036 0A1C     	 mov r2,r1
 2966 0038 D243     	 mvn r2,r2
 2967 003a 1340     	 and r3,r2
 2968 003c 8022     	 mov r2,#128
 2969 003e 1202     	 lsl r2,r2,#8
 2970 0040 1A43     	 orr r2,r3
 2971 0042 7B68     	 ldr r3,[r7,#4]
 2972 0044 E021     	 mov r1,#224
 2973 0046 5A50     	 str r2,[r3,r1]
1008:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
1009:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 2974              	 .loc 2 1009 0
 2975 0048 7B68     	 ldr r3,[r7,#4]
 2976 004a E022     	 mov r2,#224
 2977 004c 9A58     	 ldr r2,[r3,r2]
 2978 004e 7B1C     	 add r3,r7,#1
 2979 0050 1978     	 ldrb r1,[r3]
 2980 0052 BB1C     	 add r3,r7,#2
 2981 0054 1B78     	 ldrb r3,[r3]
 2982 0056 9940     	 lsl r1,r1,r3
 2983 0058 0B1C     	 mov r3,r1
 2984 005a 1343     	 orr r3,r2
 2985 005c 8022     	 mov r2,#128
 2986 005e 1202     	 lsl r2,r2,#8
 2987 0060 1A43     	 orr r2,r3
 2988 0062 7B68     	 ldr r3,[r7,#4]
 2989 0064 E021     	 mov r1,#224
 2990 0066 5A50     	 str r2,[r3,r1]
 2991 0068 23E0     	 b .L123
 2992              	.L124:
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1011:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2993              	 .loc 2 1011 0
 2994 006a FB1C     	 add r3,r7,#3
 2995 006c 1B78     	 ldrb r3,[r3]
 2996 006e 012B     	 cmp r3,#1
 2997 0070 1FD1     	 bne .L123
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1013:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 2998              	 .loc 2 1013 0
 2999 0072 7B68     	 ldr r3,[r7,#4]
 3000 0074 E422     	 mov r2,#228
 3001 0076 9B58     	 ldr r3,[r3,r2]
 3002 0078 BA1C     	 add r2,r7,#2
 3003 007a 1278     	 ldrb r2,[r2]
 3004 007c 7F21     	 mov r1,#127
 3005 007e 9140     	 lsl r1,r1,r2
 3006 0080 0A1C     	 mov r2,r1
 3007 0082 D243     	 mvn r2,r2
 3008 0084 1340     	 and r3,r2
 3009 0086 8022     	 mov r2,#128
 3010 0088 1202     	 lsl r2,r2,#8
 3011 008a 1A43     	 orr r2,r3
 3012 008c 7B68     	 ldr r3,[r7,#4]
 3013 008e E421     	 mov r1,#228
 3014 0090 5A50     	 str r2,[r3,r1]
1014:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
1015:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3015              	 .loc 2 1015 0
 3016 0092 7B68     	 ldr r3,[r7,#4]
 3017 0094 E422     	 mov r2,#228
 3018 0096 9A58     	 ldr r2,[r3,r2]
 3019 0098 7B1C     	 add r3,r7,#1
 3020 009a 1978     	 ldrb r1,[r3]
 3021 009c BB1C     	 add r3,r7,#2
 3022 009e 1B78     	 ldrb r3,[r3]
 3023 00a0 9940     	 lsl r1,r1,r3
 3024 00a2 0B1C     	 mov r3,r1
 3025 00a4 1343     	 orr r3,r2
 3026 00a6 8022     	 mov r2,#128
 3027 00a8 1202     	 lsl r2,r2,#8
 3028 00aa 1A43     	 orr r2,r3
 3029 00ac 7B68     	 ldr r3,[r7,#4]
 3030 00ae E421     	 mov r1,#228
 3031 00b0 5A50     	 str r2,[r3,r1]
 3032              	.L123:
1016:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1018:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1019:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1020:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1021:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3033              	 .loc 2 1021 0
 3034 00b2 BD46     	 mov sp,r7
 3035 00b4 03B0     	 add sp,sp,#12
 3036              	 
 3037 00b6 90BD     	 pop {r4,r7,pc}
 3038              	 .cfi_endproc
 3039              	.LFE192:
 3041              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 3042              	 .align 2
 3043              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 3044              	 .code 16
 3045              	 .thumb_func
 3047              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 3048              	.LFB193:
1022:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1023:../Libraries/XMCLib/src/xmc_vadc.c **** 
1024:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1025:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1026:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1027:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1028:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1029:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3049              	 .loc 2 1029 0
 3050              	 .cfi_startproc
 3051 0000 90B5     	 push {r4,r7,lr}
 3052              	.LCFI130:
 3053              	 .cfi_def_cfa_offset 12
 3054              	 .cfi_offset 4,-12
 3055              	 .cfi_offset 7,-8
 3056              	 .cfi_offset 14,-4
 3057 0002 83B0     	 sub sp,sp,#12
 3058              	.LCFI131:
 3059              	 .cfi_def_cfa_offset 24
 3060 0004 00AF     	 add r7,sp,#0
 3061              	.LCFI132:
 3062              	 .cfi_def_cfa_register 7
 3063 0006 7860     	 str r0,[r7,#4]
 3064 0008 0C1C     	 mov r4,r1
 3065 000a 101C     	 mov r0,r2
 3066 000c 191C     	 mov r1,r3
 3067 000e FB1C     	 add r3,r7,#3
 3068 0010 221C     	 add r2,r4,#0
 3069 0012 1A70     	 strb r2,[r3]
 3070 0014 BB1C     	 add r3,r7,#2
 3071 0016 021C     	 add r2,r0,#0
 3072 0018 1A70     	 strb r2,[r3]
 3073 001a 7B1C     	 add r3,r7,#1
 3074 001c 0A1C     	 add r2,r1,#0
 3075 001e 1A70     	 strb r2,[r3]
1030:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1031:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1032:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1033:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1035:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1037:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1038:../Libraries/XMCLib/src/xmc_vadc.c **** 
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 3076              	 .loc 2 1039 0
 3077 0020 7B68     	 ldr r3,[r7,#4]
 3078 0022 1B6D     	 ldr r3,[r3,#80]
1040:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3079              	 .loc 2 1040 0
 3080 0024 BA1C     	 add r2,r7,#2
 3081 0026 1278     	 ldrb r2,[r2]
 3082 0028 0C49     	 ldr r1,.L127
 3083 002a 9140     	 lsl r1,r1,r2
 3084 002c 0A1C     	 mov r2,r1
1039:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3085              	 .loc 2 1039 0
 3086 002e D243     	 mvn r2,r2
 3087 0030 1A40     	 and r2,r3
 3088 0032 7B68     	 ldr r3,[r7,#4]
 3089 0034 1A65     	 str r2,[r3,#80]
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 3090              	 .loc 2 1041 0
 3091 0036 7B68     	 ldr r3,[r7,#4]
 3092 0038 1A6D     	 ldr r2,[r3,#80]
 3093 003a 7B1C     	 add r3,r7,#1
 3094 003c 1978     	 ldrb r1,[r3]
 3095 003e FB1C     	 add r3,r7,#3
 3096 0040 1B78     	 ldrb r3,[r3]
 3097 0042 1B02     	 lsl r3,r3,#8
 3098 0044 1943     	 orr r1,r3
 3099 0046 BB1C     	 add r3,r7,#2
 3100 0048 1B78     	 ldrb r3,[r3]
 3101 004a 9940     	 lsl r1,r1,r3
 3102 004c 0B1C     	 mov r3,r1
 3103 004e 1A43     	 orr r2,r3
 3104 0050 7B68     	 ldr r3,[r7,#4]
 3105 0052 1A65     	 str r2,[r3,#80]
1042:../Libraries/XMCLib/src/xmc_vadc.c **** 
1043:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3106              	 .loc 2 1043 0
 3107 0054 BD46     	 mov sp,r7
 3108 0056 03B0     	 add sp,sp,#12
 3109              	 
 3110 0058 90BD     	 pop {r4,r7,pc}
 3111              	.L128:
 3112 005a C046     	 .align 2
 3113              	.L127:
 3114 005c 1F810000 	 .word 33055
 3115              	 .cfi_endproc
 3116              	.LFE193:
 3118              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 3119              	 .align 2
 3120              	 .global XMC_VADC_GROUP_ScanInit
 3121              	 .code 16
 3122              	 .thumb_func
 3124              	XMC_VADC_GROUP_ScanInit:
 3125              	.LFB194:
1044:../Libraries/XMCLib/src/xmc_vadc.c **** 
1045:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1046:../Libraries/XMCLib/src/xmc_vadc.c **** 
1047:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1048:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1049:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1050:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3126              	 .loc 2 1050 0
 3127              	 .cfi_startproc
 3128 0000 80B5     	 push {r7,lr}
 3129              	.LCFI133:
 3130              	 .cfi_def_cfa_offset 8
 3131              	 .cfi_offset 7,-8
 3132              	 .cfi_offset 14,-4
 3133 0002 84B0     	 sub sp,sp,#16
 3134              	.LCFI134:
 3135              	 .cfi_def_cfa_offset 24
 3136 0004 00AF     	 add r7,sp,#0
 3137              	.LCFI135:
 3138              	 .cfi_def_cfa_register 7
 3139 0006 7860     	 str r0,[r7,#4]
 3140 0008 3960     	 str r1,[r7]
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1052:../Libraries/XMCLib/src/xmc_vadc.c **** 
1053:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1054:../Libraries/XMCLib/src/xmc_vadc.c **** 
1055:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3141              	 .loc 2 1056 0
 3142 000a 7B68     	 ldr r3,[r7,#4]
 3143 000c 181C     	 mov r0,r3
 3144 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   
1058:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3145              	 .loc 2 1059 0
 3146 0012 7B68     	 ldr r3,[r7,#4]
 3147 0014 8422     	 mov r2,#132
 3148 0016 9B58     	 ldr r3,[r3,r2]
 3149 0018 FB60     	 str r3,[r7,#12]
1060:../Libraries/XMCLib/src/xmc_vadc.c **** 
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3150              	 .loc 2 1062 0
 3151 001a FB68     	 ldr r3,[r7,#12]
 3152 001c 3022     	 mov r2,#48
 3153 001e 9343     	 bic r3,r2
 3154 0020 FB60     	 str r3,[r7,#12]
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3155              	 .loc 2 1063 0
 3156 0022 3B68     	 ldr r3,[r7]
 3157 0024 1B78     	 ldrb r3,[r3]
 3158 0026 1B07     	 lsl r3,r3,#28
 3159 0028 9B0F     	 lsr r3,r3,#30
 3160 002a DBB2     	 uxtb r3,r3
 3161 002c 1B01     	 lsl r3,r3,#4
 3162 002e FA68     	 ldr r2,[r7,#12]
 3163 0030 1343     	 orr r3,r2
 3164 0032 FB60     	 str r3,[r7,#12]
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3165              	 .loc 2 1066 0
 3166 0034 3B68     	 ldr r3,[r7]
 3167 0036 1B78     	 ldrb r3,[r3]
 3168 0038 0322     	 mov r2,#3
 3169 003a 1340     	 and r3,r2
 3170 003c DBB2     	 uxtb r3,r3
 3171 003e 002B     	 cmp r3,#0
 3172 0040 03D0     	 beq .L130
1067:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1068:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3173              	 .loc 2 1068 0
 3174 0042 FB68     	 ldr r3,[r7,#12]
 3175 0044 8022     	 mov r2,#128
 3176 0046 1343     	 orr r3,r2
 3177 0048 FB60     	 str r3,[r7,#12]
 3178              	.L130:
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3179              	 .loc 2 1071 0
 3180 004a 7B68     	 ldr r3,[r7,#4]
 3181 004c 8421     	 mov r1,#132
 3182 004e FA68     	 ldr r2,[r7,#12]
 3183 0050 5A50     	 str r2,[r3,r1]
1072:../Libraries/XMCLib/src/xmc_vadc.c **** 
1073:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 3184              	 .loc 2 1073 0
 3185 0052 3B68     	 ldr r3,[r7]
 3186 0054 5B68     	 ldr r3,[r3,#4]
 3187 0056 154A     	 ldr r2,.L132
 3188 0058 1A43     	 orr r2,r3
 3189 005a 111C     	 mov r1,r2
 3190 005c 7A68     	 ldr r2,[r7,#4]
 3191 005e 9023     	 mov r3,#144
 3192 0060 5B00     	 lsl r3,r3,#1
 3193 0062 D150     	 str r1,[r2,r3]
1074:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1075:../Libraries/XMCLib/src/xmc_vadc.c **** 
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3194              	 .loc 2 1076 0
 3195 0064 3B68     	 ldr r3,[r7]
 3196 0066 9B68     	 ldr r3,[r3,#8]
 3197 0068 0122     	 mov r2,#1
 3198 006a 1A43     	 orr r2,r3
 3199 006c 111C     	 mov r1,r2
 3200 006e 7A68     	 ldr r2,[r7,#4]
 3201 0070 9223     	 mov r3,#146
 3202 0072 5B00     	 lsl r3,r3,#1
 3203 0074 D150     	 str r1,[r2,r3]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3204              	 .loc 2 1078 0
 3205 0076 3B68     	 ldr r3,[r7]
 3206 0078 1B78     	 ldrb r3,[r3]
 3207 007a 0322     	 mov r2,#3
 3208 007c 1340     	 and r3,r2
 3209 007e DBB2     	 uxtb r3,r3
 3210 0080 022B     	 cmp r3,#2
 3211 0082 0BD1     	 bne .L131
1079:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1080:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3212              	 .loc 2 1080 0
 3213 0084 7A68     	 ldr r2,[r7,#4]
 3214 0086 9223     	 mov r3,#146
 3215 0088 5B00     	 lsl r3,r3,#1
 3216 008a D358     	 ldr r3,[r2,r3]
 3217 008c 8022     	 mov r2,#128
 3218 008e 5202     	 lsl r2,r2,#9
 3219 0090 1A43     	 orr r2,r3
 3220 0092 111C     	 mov r1,r2
 3221 0094 7A68     	 ldr r2,[r7,#4]
 3222 0096 9223     	 mov r3,#146
 3223 0098 5B00     	 lsl r3,r3,#1
 3224 009a D150     	 str r1,[r2,r3]
 3225              	.L131:
1081:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1082:../Libraries/XMCLib/src/xmc_vadc.c ****   
1083:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3226              	 .loc 2 1084 0
 3227 009c 7B68     	 ldr r3,[r7,#4]
 3228 009e 181C     	 mov r0,r3
 3229 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1085:../Libraries/XMCLib/src/xmc_vadc.c ****   
1086:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3230              	 .loc 2 1086 0
 3231 00a4 BD46     	 mov sp,r7
 3232 00a6 04B0     	 add sp,sp,#16
 3233              	 
 3234 00a8 80BD     	 pop {r7,pc}
 3235              	.L133:
 3236 00aa C046     	 .align 2
 3237              	.L132:
 3238 00ac 00808080 	 .word -2139062272
 3239              	 .cfi_endproc
 3240              	.LFE194:
 3242              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3243              	 .align 2
 3244              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3245              	 .code 16
 3246              	 .thumb_func
 3248              	XMC_VADC_GROUP_ScanSelectTrigger:
 3249              	.LFB195:
1087:../Libraries/XMCLib/src/xmc_vadc.c **** 
1088:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1089:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1090:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3250              	 .loc 2 1090 0
 3251              	 .cfi_startproc
 3252 0000 80B5     	 push {r7,lr}
 3253              	.LCFI136:
 3254              	 .cfi_def_cfa_offset 8
 3255              	 .cfi_offset 7,-8
 3256              	 .cfi_offset 14,-4
 3257 0002 84B0     	 sub sp,sp,#16
 3258              	.LCFI137:
 3259              	 .cfi_def_cfa_offset 24
 3260 0004 00AF     	 add r7,sp,#0
 3261              	.LCFI138:
 3262              	 .cfi_def_cfa_register 7
 3263 0006 7860     	 str r0,[r7,#4]
 3264 0008 0A1C     	 mov r2,r1
 3265 000a FB1C     	 add r3,r7,#3
 3266 000c 1A70     	 strb r2,[r3]
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1092:../Libraries/XMCLib/src/xmc_vadc.c **** 
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1095:../Libraries/XMCLib/src/xmc_vadc.c **** 
1096:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3267              	 .loc 2 1096 0
 3268 000e 7A68     	 ldr r2,[r7,#4]
 3269 0010 9023     	 mov r3,#144
 3270 0012 5B00     	 lsl r3,r3,#1
 3271 0014 D358     	 ldr r3,[r2,r3]
 3272 0016 FB60     	 str r3,[r7,#12]
1097:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3273              	 .loc 2 1097 0
 3274 0018 FB68     	 ldr r3,[r7,#12]
 3275 001a 8022     	 mov r2,#128
 3276 001c 1202     	 lsl r2,r2,#8
 3277 001e 1343     	 orr r3,r2
 3278 0020 FB60     	 str r3,[r7,#12]
1098:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3279              	 .loc 2 1098 0
 3280 0022 FB68     	 ldr r3,[r7,#12]
 3281 0024 084A     	 ldr r2,.L135
 3282 0026 1340     	 and r3,r2
 3283 0028 FB60     	 str r3,[r7,#12]
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3284              	 .loc 2 1099 0
 3285 002a FB1C     	 add r3,r7,#3
 3286 002c 1B78     	 ldrb r3,[r3]
 3287 002e 1B02     	 lsl r3,r3,#8
 3288 0030 FA68     	 ldr r2,[r7,#12]
 3289 0032 1343     	 orr r3,r2
 3290 0034 FB60     	 str r3,[r7,#12]
1100:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3291              	 .loc 2 1100 0
 3292 0036 7A68     	 ldr r2,[r7,#4]
 3293 0038 9023     	 mov r3,#144
 3294 003a 5B00     	 lsl r3,r3,#1
 3295 003c F968     	 ldr r1,[r7,#12]
 3296 003e D150     	 str r1,[r2,r3]
1101:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3297              	 .loc 2 1101 0
 3298 0040 BD46     	 mov sp,r7
 3299 0042 04B0     	 add sp,sp,#16
 3300              	 
 3301 0044 80BD     	 pop {r7,pc}
 3302              	.L136:
 3303 0046 C046     	 .align 2
 3304              	.L135:
 3305 0048 FFF0FFFF 	 .word -3841
 3306              	 .cfi_endproc
 3307              	.LFE195:
 3309              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3310              	 .align 2
 3311              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3312              	 .code 16
 3313              	 .thumb_func
 3315              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3316              	.LFB196:
1102:../Libraries/XMCLib/src/xmc_vadc.c **** 
1103:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1104:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1105:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3317              	 .loc 2 1105 0
 3318              	 .cfi_startproc
 3319 0000 80B5     	 push {r7,lr}
 3320              	.LCFI139:
 3321              	 .cfi_def_cfa_offset 8
 3322              	 .cfi_offset 7,-8
 3323              	 .cfi_offset 14,-4
 3324 0002 84B0     	 sub sp,sp,#16
 3325              	.LCFI140:
 3326              	 .cfi_def_cfa_offset 24
 3327 0004 00AF     	 add r7,sp,#0
 3328              	.LCFI141:
 3329              	 .cfi_def_cfa_register 7
 3330 0006 7860     	 str r0,[r7,#4]
 3331 0008 0A1C     	 mov r2,r1
 3332 000a FB1C     	 add r3,r7,#3
 3333 000c 1A70     	 strb r2,[r3]
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1107:../Libraries/XMCLib/src/xmc_vadc.c **** 
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1109:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1110:../Libraries/XMCLib/src/xmc_vadc.c **** 
1111:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3334              	 .loc 2 1111 0
 3335 000e 7A68     	 ldr r2,[r7,#4]
 3336 0010 9023     	 mov r3,#144
 3337 0012 5B00     	 lsl r3,r3,#1
 3338 0014 D358     	 ldr r3,[r2,r3]
 3339 0016 FB60     	 str r3,[r7,#12]
1112:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3340              	 .loc 2 1112 0
 3341 0018 FB68     	 ldr r3,[r7,#12]
 3342 001a 8022     	 mov r2,#128
 3343 001c 1202     	 lsl r2,r2,#8
 3344 001e 1343     	 orr r3,r2
 3345 0020 FB60     	 str r3,[r7,#12]
1113:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3346              	 .loc 2 1113 0
 3347 0022 FB68     	 ldr r3,[r7,#12]
 3348 0024 084A     	 ldr r2,.L138
 3349 0026 1340     	 and r3,r2
 3350 0028 FB60     	 str r3,[r7,#12]
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3351              	 .loc 2 1114 0
 3352 002a FB1C     	 add r3,r7,#3
 3353 002c 1B78     	 ldrb r3,[r3]
 3354 002e 5B03     	 lsl r3,r3,#13
 3355 0030 FA68     	 ldr r2,[r7,#12]
 3356 0032 1343     	 orr r3,r2
 3357 0034 FB60     	 str r3,[r7,#12]
1115:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3358              	 .loc 2 1115 0
 3359 0036 7A68     	 ldr r2,[r7,#4]
 3360 0038 9023     	 mov r3,#144
 3361 003a 5B00     	 lsl r3,r3,#1
 3362 003c F968     	 ldr r1,[r7,#12]
 3363 003e D150     	 str r1,[r2,r3]
1116:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3364              	 .loc 2 1116 0
 3365 0040 BD46     	 mov sp,r7
 3366 0042 04B0     	 add sp,sp,#16
 3367              	 
 3368 0044 80BD     	 pop {r7,pc}
 3369              	.L139:
 3370 0046 C046     	 .align 2
 3371              	.L138:
 3372 0048 FF9FFFFF 	 .word -24577
 3373              	 .cfi_endproc
 3374              	.LFE196:
 3376              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3377              	 .align 2
 3378              	 .global XMC_VADC_GROUP_ScanSelectGating
 3379              	 .code 16
 3380              	 .thumb_func
 3382              	XMC_VADC_GROUP_ScanSelectGating:
 3383              	.LFB197:
1117:../Libraries/XMCLib/src/xmc_vadc.c **** 
1118:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1119:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1120:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3384              	 .loc 2 1120 0
 3385              	 .cfi_startproc
 3386 0000 80B5     	 push {r7,lr}
 3387              	.LCFI142:
 3388              	 .cfi_def_cfa_offset 8
 3389              	 .cfi_offset 7,-8
 3390              	 .cfi_offset 14,-4
 3391 0002 84B0     	 sub sp,sp,#16
 3392              	.LCFI143:
 3393              	 .cfi_def_cfa_offset 24
 3394 0004 00AF     	 add r7,sp,#0
 3395              	.LCFI144:
 3396              	 .cfi_def_cfa_register 7
 3397 0006 7860     	 str r0,[r7,#4]
 3398 0008 0A1C     	 mov r2,r1
 3399 000a FB1C     	 add r3,r7,#3
 3400 000c 1A70     	 strb r2,[r3]
1121:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1122:../Libraries/XMCLib/src/xmc_vadc.c **** 
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1125:../Libraries/XMCLib/src/xmc_vadc.c **** 
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3401              	 .loc 2 1126 0
 3402 000e 7A68     	 ldr r2,[r7,#4]
 3403 0010 9023     	 mov r3,#144
 3404 0012 5B00     	 lsl r3,r3,#1
 3405 0014 D358     	 ldr r3,[r2,r3]
 3406 0016 FB60     	 str r3,[r7,#12]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3407              	 .loc 2 1127 0
 3408 0018 FB68     	 ldr r3,[r7,#12]
 3409 001a 8022     	 mov r2,#128
 3410 001c 1204     	 lsl r2,r2,#16
 3411 001e 1343     	 orr r3,r2
 3412 0020 FB60     	 str r3,[r7,#12]
1128:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3413              	 .loc 2 1128 0
 3414 0022 FB68     	 ldr r3,[r7,#12]
 3415 0024 084A     	 ldr r2,.L141
 3416 0026 1340     	 and r3,r2
 3417 0028 FB60     	 str r3,[r7,#12]
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3418              	 .loc 2 1129 0
 3419 002a FB1C     	 add r3,r7,#3
 3420 002c 1B78     	 ldrb r3,[r3]
 3421 002e 1B04     	 lsl r3,r3,#16
 3422 0030 FA68     	 ldr r2,[r7,#12]
 3423 0032 1343     	 orr r3,r2
 3424 0034 FB60     	 str r3,[r7,#12]
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3425              	 .loc 2 1130 0
 3426 0036 7A68     	 ldr r2,[r7,#4]
 3427 0038 9023     	 mov r3,#144
 3428 003a 5B00     	 lsl r3,r3,#1
 3429 003c F968     	 ldr r1,[r7,#12]
 3430 003e D150     	 str r1,[r2,r3]
1131:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3431              	 .loc 2 1131 0
 3432 0040 BD46     	 mov sp,r7
 3433 0042 04B0     	 add sp,sp,#16
 3434              	 
 3435 0044 80BD     	 pop {r7,pc}
 3436              	.L142:
 3437 0046 C046     	 .align 2
 3438              	.L141:
 3439 0048 FFFFF0FF 	 .word -983041
 3440              	 .cfi_endproc
 3441              	.LFE197:
 3443              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3444              	 .align 2
 3445              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3446              	 .code 16
 3447              	 .thumb_func
 3449              	XMC_VADC_GROUP_ScanSequenceAbort:
 3450              	.LFB198:
1132:../Libraries/XMCLib/src/xmc_vadc.c **** 
1133:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1134:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1135:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3451              	 .loc 2 1135 0
 3452              	 .cfi_startproc
 3453 0000 80B5     	 push {r7,lr}
 3454              	.LCFI145:
 3455              	 .cfi_def_cfa_offset 8
 3456              	 .cfi_offset 7,-8
 3457              	 .cfi_offset 14,-4
 3458 0002 84B0     	 sub sp,sp,#16
 3459              	.LCFI146:
 3460              	 .cfi_def_cfa_offset 24
 3461 0004 00AF     	 add r7,sp,#0
 3462              	.LCFI147:
 3463              	 .cfi_def_cfa_register 7
 3464 0006 7860     	 str r0,[r7,#4]
1136:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1137:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1138:../Libraries/XMCLib/src/xmc_vadc.c **** 
1139:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1140:../Libraries/XMCLib/src/xmc_vadc.c **** 
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1142:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3465              	 .loc 2 1142 0
 3466 0008 7A68     	 ldr r2,[r7,#4]
 3467 000a 9023     	 mov r3,#144
 3468 000c 5B00     	 lsl r3,r3,#1
 3469 000e D358     	 ldr r3,[r2,r3]
 3470 0010 FB60     	 str r3,[r7,#12]
1143:../Libraries/XMCLib/src/xmc_vadc.c **** 
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3471              	 .loc 2 1144 0
 3472 0012 7A68     	 ldr r2,[r7,#4]
 3473 0014 9023     	 mov r3,#144
 3474 0016 5B00     	 lsl r3,r3,#1
 3475 0018 1E49     	 ldr r1,.L144
 3476 001a D150     	 str r1,[r2,r3]
1145:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1148:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3477              	 .loc 2 1148 0
 3478 001c 7B68     	 ldr r3,[r7,#4]
 3479 001e 8422     	 mov r2,#132
 3480 0020 9B58     	 ldr r3,[r3,r2]
 3481 0022 5B0E     	 lsr r3,r3,#25
 3482 0024 0122     	 mov r2,#1
 3483 0026 1A40     	 and r2,r3
 3484 0028 0B23     	 mov r3,#11
 3485 002a FB18     	 add r3,r7,r3
 3486 002c 511E     	 sub r1,r2,#1
 3487 002e 8A41     	 sbc r2,r2,r1
 3488 0030 1A70     	 strb r2,[r3]
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3489              	 .loc 2 1149 0
 3490 0032 7B68     	 ldr r3,[r7,#4]
 3491 0034 181C     	 mov r0,r3
 3492 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1150:../Libraries/XMCLib/src/xmc_vadc.c **** 
1151:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3493              	 .loc 2 1151 0
 3494 003a 7A68     	 ldr r2,[r7,#4]
 3495 003c 9223     	 mov r3,#146
 3496 003e 5B00     	 lsl r3,r3,#1
 3497 0040 D358     	 ldr r3,[r2,r3]
 3498 0042 0322     	 mov r2,#3
 3499 0044 9343     	 bic r3,r2
 3500 0046 191C     	 mov r1,r3
 3501 0048 7A68     	 ldr r2,[r7,#4]
 3502 004a 9223     	 mov r3,#146
 3503 004c 5B00     	 lsl r3,r3,#1
 3504 004e D150     	 str r1,[r2,r3]
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3505              	 .loc 2 1152 0
 3506 0050 7A68     	 ldr r2,[r7,#4]
 3507 0052 9223     	 mov r3,#146
 3508 0054 5B00     	 lsl r3,r3,#1
 3509 0056 D358     	 ldr r3,[r2,r3]
 3510 0058 8022     	 mov r2,#128
 3511 005a 5200     	 lsl r2,r2,#1
 3512 005c 1A43     	 orr r2,r3
 3513 005e 111C     	 mov r1,r2
 3514 0060 7A68     	 ldr r2,[r7,#4]
 3515 0062 9223     	 mov r3,#146
 3516 0064 5B00     	 lsl r3,r3,#1
 3517 0066 D150     	 str r1,[r2,r3]
1153:../Libraries/XMCLib/src/xmc_vadc.c **** 
1154:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3518              	 .loc 2 1155 0
 3519 0068 7B68     	 ldr r3,[r7,#4]
 3520 006a 8422     	 mov r2,#132
 3521 006c 9A58     	 ldr r2,[r3,r2]
 3522 006e 0B23     	 mov r3,#11
 3523 0070 FB18     	 add r3,r7,r3
 3524 0072 1B78     	 ldrb r3,[r3]
 3525 0074 5B06     	 lsl r3,r3,#25
 3526 0076 1A43     	 orr r2,r3
 3527 0078 7B68     	 ldr r3,[r7,#4]
 3528 007a 8421     	 mov r1,#132
 3529 007c 5A50     	 str r2,[r3,r1]
1156:../Libraries/XMCLib/src/xmc_vadc.c **** 
1157:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1158:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1159:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3530              	 .loc 2 1159 0
 3531 007e FB68     	 ldr r3,[r7,#12]
 3532 0080 044A     	 ldr r2,.L144
 3533 0082 1A43     	 orr r2,r3
 3534 0084 111C     	 mov r1,r2
1158:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3535              	 .loc 2 1158 0
 3536 0086 7A68     	 ldr r2,[r7,#4]
 3537 0088 9023     	 mov r3,#144
 3538 008a 5B00     	 lsl r3,r3,#1
 3539 008c D150     	 str r1,[r2,r3]
1160:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3540              	 .loc 2 1160 0
 3541 008e BD46     	 mov sp,r7
 3542 0090 04B0     	 add sp,sp,#16
 3543              	 
 3544 0092 80BD     	 pop {r7,pc}
 3545              	.L145:
 3546              	 .align 2
 3547              	.L144:
 3548 0094 00808080 	 .word -2139062272
 3549              	 .cfi_endproc
 3550              	.LFE198:
 3552              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3553              	 .align 2
 3554              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3555              	 .code 16
 3556              	 .thumb_func
 3558              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3559              	.LFB199:
1161:../Libraries/XMCLib/src/xmc_vadc.c **** 
1162:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1163:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1164:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3560              	 .loc 2 1164 0
 3561              	 .cfi_startproc
 3562 0000 80B5     	 push {r7,lr}
 3563              	.LCFI148:
 3564              	 .cfi_def_cfa_offset 8
 3565              	 .cfi_offset 7,-8
 3566              	 .cfi_offset 14,-4
 3567 0002 86B0     	 sub sp,sp,#24
 3568              	.LCFI149:
 3569              	 .cfi_def_cfa_offset 32
 3570 0004 00AF     	 add r7,sp,#0
 3571              	.LCFI150:
 3572              	 .cfi_def_cfa_register 7
 3573 0006 7860     	 str r0,[r7,#4]
1165:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1167:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1168:../Libraries/XMCLib/src/xmc_vadc.c **** 
1169:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c **** 
1172:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3574              	 .loc 2 1172 0
 3575 0008 0023     	 mov r3,#0
 3576 000a FB60     	 str r3,[r7,#12]
1173:../Libraries/XMCLib/src/xmc_vadc.c **** 
1174:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3577              	 .loc 2 1174 0
 3578 000c 7A68     	 ldr r2,[r7,#4]
 3579 000e 9623     	 mov r3,#150
 3580 0010 5B00     	 lsl r3,r3,#1
 3581 0012 D358     	 ldr r3,[r2,r3]
 3582 0014 002B     	 cmp r3,#0
 3583 0016 17D0     	 beq .L147
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1176:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 3584              	 .loc 2 1176 0
 3585 0018 7A68     	 ldr r2,[r7,#4]
 3586 001a 9623     	 mov r3,#150
 3587 001c 5B00     	 lsl r3,r3,#1
 3588 001e D358     	 ldr r3,[r2,r3]
 3589 0020 7B61     	 str r3,[r7,#20]
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 3590              	 .loc 2 1178 0
 3591 0022 0023     	 mov r3,#0
 3592 0024 3B61     	 str r3,[r7,#16]
 3593 0026 0CE0     	 b .L148
 3594              	.L150:
1179:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1180:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 3595              	 .loc 2 1180 0
 3596 0028 7B69     	 ldr r3,[r7,#20]
 3597 002a 0122     	 mov r2,#1
 3598 002c 1340     	 and r3,r2
 3599 002e 02D0     	 beq .L149
1181:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1182:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 3600              	 .loc 2 1182 0
 3601 0030 FB68     	 ldr r3,[r7,#12]
 3602 0032 0133     	 add r3,r3,#1
 3603 0034 FB60     	 str r3,[r7,#12]
 3604              	.L149:
1183:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1184:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 3605              	 .loc 2 1184 0 discriminator 2
 3606 0036 7B69     	 ldr r3,[r7,#20]
 3607 0038 5B08     	 lsr r3,r3,#1
 3608 003a 7B61     	 str r3,[r7,#20]
1178:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3609              	 .loc 2 1178 0 discriminator 2
 3610 003c 3B69     	 ldr r3,[r7,#16]
 3611 003e 0133     	 add r3,r3,#1
 3612 0040 3B61     	 str r3,[r7,#16]
 3613              	.L148:
1178:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3614              	 .loc 2 1178 0 is_stmt 0 discriminator 1
 3615 0042 3B69     	 ldr r3,[r7,#16]
 3616 0044 072B     	 cmp r3,#7
 3617 0046 EFD9     	 bls .L150
 3618              	.L147:
1185:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1186:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1187:../Libraries/XMCLib/src/xmc_vadc.c **** 
1188:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3619              	 .loc 2 1188 0 is_stmt 1
 3620 0048 FB68     	 ldr r3,[r7,#12]
1189:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3621              	 .loc 2 1189 0
 3622 004a 181C     	 mov r0,r3
 3623 004c BD46     	 mov sp,r7
 3624 004e 06B0     	 add sp,sp,#24
 3625              	 
 3626 0050 80BD     	 pop {r7,pc}
 3627              	 .cfi_endproc
 3628              	.LFE199:
 3630 0052 C046     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 3631              	 .align 2
 3632              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 3633              	 .code 16
 3634              	 .thumb_func
 3636              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 3637              	.LFB200:
1190:../Libraries/XMCLib/src/xmc_vadc.c **** 
1191:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1192:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1193:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3638              	 .loc 2 1193 0
 3639              	 .cfi_startproc
 3640 0000 80B5     	 push {r7,lr}
 3641              	.LCFI151:
 3642              	 .cfi_def_cfa_offset 8
 3643              	 .cfi_offset 7,-8
 3644              	 .cfi_offset 14,-4
 3645 0002 84B0     	 sub sp,sp,#16
 3646              	.LCFI152:
 3647              	 .cfi_def_cfa_offset 24
 3648 0004 00AF     	 add r7,sp,#0
 3649              	.LCFI153:
 3650              	 .cfi_def_cfa_register 7
 3651 0006 7860     	 str r0,[r7,#4]
 3652 0008 0A1C     	 mov r2,r1
 3653 000a FB1C     	 add r3,r7,#3
 3654 000c 1A70     	 strb r2,[r3]
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1195:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3655              	 .loc 2 1195 0
 3656 000e 7A68     	 ldr r2,[r7,#4]
 3657 0010 E023     	 mov r3,#224
 3658 0012 5B00     	 lsl r3,r3,#1
 3659 0014 D358     	 ldr r3,[r2,r3]
 3660 0016 FB60     	 str r3,[r7,#12]
1196:../Libraries/XMCLib/src/xmc_vadc.c **** 
1197:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1198:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1199:../Libraries/XMCLib/src/xmc_vadc.c **** 
1200:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 3661              	 .loc 2 1200 0
 3662 0018 FB68     	 ldr r3,[r7,#12]
 3663 001a F022     	 mov r2,#240
 3664 001c 9343     	 bic r3,r2
 3665 001e FB60     	 str r3,[r7,#12]
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 3666              	 .loc 2 1201 0
 3667 0020 FB1C     	 add r3,r7,#3
 3668 0022 1B78     	 ldrb r3,[r3]
 3669 0024 1B01     	 lsl r3,r3,#4
 3670 0026 FA68     	 ldr r2,[r7,#12]
 3671 0028 1343     	 orr r3,r2
 3672 002a FB60     	 str r3,[r7,#12]
1202:../Libraries/XMCLib/src/xmc_vadc.c **** 
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 3673              	 .loc 2 1203 0
 3674 002c 7A68     	 ldr r2,[r7,#4]
 3675 002e E023     	 mov r3,#224
 3676 0030 5B00     	 lsl r3,r3,#1
 3677 0032 F968     	 ldr r1,[r7,#12]
 3678 0034 D150     	 str r1,[r2,r3]
1204:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3679              	 .loc 2 1204 0
 3680 0036 BD46     	 mov sp,r7
 3681 0038 04B0     	 add sp,sp,#16
 3682              	 
 3683 003a 80BD     	 pop {r7,pc}
 3684              	 .cfi_endproc
 3685              	.LFE200:
 3687              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 3688              	 .align 2
 3689              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 3690              	 .code 16
 3691              	 .thumb_func
 3693              	XMC_VADC_GROUP_ScanRemoveChannel:
 3694              	.LFB201:
1205:../Libraries/XMCLib/src/xmc_vadc.c **** 
1206:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1207:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1208:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3695              	 .loc 2 1208 0
 3696              	 .cfi_startproc
 3697 0000 80B5     	 push {r7,lr}
 3698              	.LCFI154:
 3699              	 .cfi_def_cfa_offset 8
 3700              	 .cfi_offset 7,-8
 3701              	 .cfi_offset 14,-4
 3702 0002 84B0     	 sub sp,sp,#16
 3703              	.LCFI155:
 3704              	 .cfi_def_cfa_offset 24
 3705 0004 00AF     	 add r7,sp,#0
 3706              	.LCFI156:
 3707              	 .cfi_def_cfa_register 7
 3708 0006 7860     	 str r0,[r7,#4]
 3709 0008 3960     	 str r1,[r7]
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1210:../Libraries/XMCLib/src/xmc_vadc.c **** 
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1213:../Libraries/XMCLib/src/xmc_vadc.c **** 
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 3710              	 .loc 2 1214 0
 3711 000a 7A68     	 ldr r2,[r7,#4]
 3712 000c 9423     	 mov r3,#148
 3713 000e 5B00     	 lsl r3,r3,#1
 3714 0010 D358     	 ldr r3,[r2,r3]
 3715 0012 FB60     	 str r3,[r7,#12]
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 3716              	 .loc 2 1215 0
 3717 0014 3B68     	 ldr r3,[r7]
 3718 0016 0122     	 mov r2,#1
 3719 0018 9A40     	 lsl r2,r2,r3
 3720 001a 131C     	 mov r3,r2
 3721 001c DB43     	 mvn r3,r3
 3722 001e 1A1C     	 mov r2,r3
 3723 0020 FB68     	 ldr r3,[r7,#12]
 3724 0022 1340     	 and r3,r2
 3725 0024 FB60     	 str r3,[r7,#12]
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 3726              	 .loc 2 1216 0
 3727 0026 7A68     	 ldr r2,[r7,#4]
 3728 0028 9423     	 mov r3,#148
 3729 002a 5B00     	 lsl r3,r3,#1
 3730 002c F968     	 ldr r1,[r7,#12]
 3731 002e D150     	 str r1,[r2,r3]
1217:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3732              	 .loc 2 1217 0
 3733 0030 BD46     	 mov sp,r7
 3734 0032 04B0     	 add sp,sp,#16
 3735              	 
 3736 0034 80BD     	 pop {r7,pc}
 3737              	 .cfi_endproc
 3738              	.LFE201:
 3740 0036 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 3741              	 .align 2
 3742              	 .global XMC_VADC_GLOBAL_BackgroundInit
 3743              	 .code 16
 3744              	 .thumb_func
 3746              	XMC_VADC_GLOBAL_BackgroundInit:
 3747              	.LFB202:
1218:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1219:../Libraries/XMCLib/src/xmc_vadc.c **** 
1220:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1221:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1222:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3748              	 .loc 2 1222 0
 3749              	 .cfi_startproc
 3750 0000 80B5     	 push {r7,lr}
 3751              	.LCFI157:
 3752              	 .cfi_def_cfa_offset 8
 3753              	 .cfi_offset 7,-8
 3754              	 .cfi_offset 14,-4
 3755 0002 86B0     	 sub sp,sp,#24
 3756              	.LCFI158:
 3757              	 .cfi_def_cfa_offset 32
 3758 0004 00AF     	 add r7,sp,#0
 3759              	.LCFI159:
 3760              	 .cfi_def_cfa_register 7
 3761 0006 7860     	 str r0,[r7,#4]
 3762 0008 3960     	 str r1,[r7]
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1227:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1228:../Libraries/XMCLib/src/xmc_vadc.c ****   
1229:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1230:../Libraries/XMCLib/src/xmc_vadc.c **** 
1231:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1232:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3763              	 .loc 2 1232 0
 3764 000a 1723     	 mov r3,#23
 3765 000c FB18     	 add r3,r7,r3
 3766 000e 0022     	 mov r2,#0
 3767 0010 1A70     	 strb r2,[r3]
 3768 0012 0FE0     	 b .L155
 3769              	.L156:
1233:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1234:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3770              	 .loc 2 1234 0 discriminator 3
 3771 0014 1723     	 mov r3,#23
 3772 0016 FB18     	 add r3,r7,r3
 3773 0018 1A78     	 ldrb r2,[r3]
 3774 001a 4A4B     	 ldr r3,.L163
 3775 001c 9200     	 lsl r2,r2,#2
 3776 001e D358     	 ldr r3,[r2,r3]
 3777 0020 181C     	 mov r0,r3
 3778 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1232:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3779              	 .loc 2 1232 0 discriminator 3
 3780 0026 1723     	 mov r3,#23
 3781 0028 FB18     	 add r3,r7,r3
 3782 002a 1A78     	 ldrb r2,[r3]
 3783 002c 1723     	 mov r3,#23
 3784 002e FB18     	 add r3,r7,r3
 3785 0030 0132     	 add r2,r2,#1
 3786 0032 1A70     	 strb r2,[r3]
 3787              	.L155:
1232:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3788              	 .loc 2 1232 0 is_stmt 0 discriminator 1
 3789 0034 1723     	 mov r3,#23
 3790 0036 FB18     	 add r3,r7,r3
 3791 0038 1B78     	 ldrb r3,[r3]
 3792 003a 012B     	 cmp r3,#1
 3793 003c EAD9     	 bls .L156
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   
1237:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 3794              	 .loc 2 1237 0 is_stmt 1
 3795 003e 0023     	 mov r3,#0
 3796 0040 3B61     	 str r3,[r7,#16]
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3797              	 .loc 2 1238 0
 3798 0042 3B68     	 ldr r3,[r7]
 3799 0044 1B78     	 ldrb r3,[r3]
 3800 0046 0322     	 mov r2,#3
 3801 0048 1340     	 and r3,r2
 3802 004a DBB2     	 uxtb r3,r3
 3803 004c 002B     	 cmp r3,#0
 3804 004e 02D0     	 beq .L157
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1240:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 3805              	 .loc 2 1240 0
 3806 0050 8023     	 mov r3,#128
 3807 0052 1B01     	 lsl r3,r3,#4
 3808 0054 3B61     	 str r3,[r7,#16]
 3809              	.L157:
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3810              	 .loc 2 1243 0
 3811 0056 1723     	 mov r3,#23
 3812 0058 FB18     	 add r3,r7,r3
 3813 005a 0022     	 mov r2,#0
 3814 005c 1A70     	 strb r2,[r3]
 3815 005e 29E0     	 b .L158
 3816              	.L159:
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1245:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 3817              	 .loc 2 1245 0 discriminator 3
 3818 0060 1723     	 mov r3,#23
 3819 0062 FB18     	 add r3,r7,r3
 3820 0064 1A78     	 ldrb r2,[r3]
 3821 0066 374B     	 ldr r3,.L163
 3822 0068 9200     	 lsl r2,r2,#2
 3823 006a D358     	 ldr r3,[r2,r3]
 3824 006c 8422     	 mov r2,#132
 3825 006e 9B58     	 ldr r3,[r3,r2]
 3826 0070 FB60     	 str r3,[r7,#12]
1246:../Libraries/XMCLib/src/xmc_vadc.c **** 
1247:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 3827              	 .loc 2 1247 0 discriminator 3
 3828 0072 FB68     	 ldr r3,[r7,#12]
 3829 0074 344A     	 ldr r2,.L163+4
 3830 0076 1340     	 and r3,r2
 3831 0078 FB60     	 str r3,[r7,#12]
1248:../Libraries/XMCLib/src/xmc_vadc.c **** 
1249:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1250:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 3832              	 .loc 2 1250 0 discriminator 3
 3833 007a 3B68     	 ldr r3,[r7]
 3834 007c 1B78     	 ldrb r3,[r3]
 3835 007e 1B07     	 lsl r3,r3,#28
 3836 0080 9B0F     	 lsr r3,r3,#30
 3837 0082 DBB2     	 uxtb r3,r3
 3838 0084 1B02     	 lsl r3,r3,#8
 3839 0086 FA68     	 ldr r2,[r7,#12]
 3840 0088 1343     	 orr r3,r2
 3841 008a FB60     	 str r3,[r7,#12]
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   
1252:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1253:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3842              	 .loc 2 1253 0 discriminator 3
 3843 008c FA68     	 ldr r2,[r7,#12]
 3844 008e 3B69     	 ldr r3,[r7,#16]
 3845 0090 1343     	 orr r3,r2
 3846 0092 FB60     	 str r3,[r7,#12]
1254:../Libraries/XMCLib/src/xmc_vadc.c **** 
1255:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3847              	 .loc 2 1255 0 discriminator 3
 3848 0094 1723     	 mov r3,#23
 3849 0096 FB18     	 add r3,r7,r3
 3850 0098 1A78     	 ldrb r2,[r3]
 3851 009a 2A4B     	 ldr r3,.L163
 3852 009c 9200     	 lsl r2,r2,#2
 3853 009e D358     	 ldr r3,[r2,r3]
 3854 00a0 8421     	 mov r1,#132
 3855 00a2 FA68     	 ldr r2,[r7,#12]
 3856 00a4 5A50     	 str r2,[r3,r1]
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3857              	 .loc 2 1243 0 discriminator 3
 3858 00a6 1723     	 mov r3,#23
 3859 00a8 FB18     	 add r3,r7,r3
 3860 00aa 1A78     	 ldrb r2,[r3]
 3861 00ac 1723     	 mov r3,#23
 3862 00ae FB18     	 add r3,r7,r3
 3863 00b0 0132     	 add r2,r2,#1
 3864 00b2 1A70     	 strb r2,[r3]
 3865              	.L158:
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3866              	 .loc 2 1243 0 is_stmt 0 discriminator 1
 3867 00b4 1723     	 mov r3,#23
 3868 00b6 FB18     	 add r3,r7,r3
 3869 00b8 1B78     	 ldrb r3,[r3]
 3870 00ba 012B     	 cmp r3,#1
 3871 00bc D0D9     	 bls .L159
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1259:../Libraries/XMCLib/src/xmc_vadc.c **** 
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1261:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3872              	 .loc 2 1261 0 is_stmt 1
 3873 00be 3B68     	 ldr r3,[r7]
 3874 00c0 5B68     	 ldr r3,[r3,#4]
 3875 00c2 224A     	 ldr r2,.L163+8
 3876 00c4 1A43     	 orr r2,r3
 3877 00c6 111C     	 mov r1,r2
 3878 00c8 7A68     	 ldr r2,[r7,#4]
 3879 00ca 8023     	 mov r3,#128
 3880 00cc 9B00     	 lsl r3,r3,#2
 3881 00ce D150     	 str r1,[r2,r3]
1262:../Libraries/XMCLib/src/xmc_vadc.c **** 
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1264:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3882              	 .loc 2 1264 0
 3883 00d0 3B68     	 ldr r3,[r7]
 3884 00d2 9B68     	 ldr r3,[r3,#8]
 3885 00d4 0122     	 mov r2,#1
 3886 00d6 1A43     	 orr r2,r3
 3887 00d8 111C     	 mov r1,r2
 3888 00da 7A68     	 ldr r2,[r7,#4]
 3889 00dc 8123     	 mov r3,#129
 3890 00de 9B00     	 lsl r3,r3,#2
 3891 00e0 D150     	 str r1,[r2,r3]
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   
1266:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3892              	 .loc 2 1267 0
 3893 00e2 3B68     	 ldr r3,[r7]
 3894 00e4 1B78     	 ldrb r3,[r3]
 3895 00e6 0322     	 mov r2,#3
 3896 00e8 1340     	 and r3,r2
 3897 00ea DBB2     	 uxtb r3,r3
 3898 00ec 022B     	 cmp r3,#2
 3899 00ee 0BD1     	 bne .L160
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1269:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3900              	 .loc 2 1269 0
 3901 00f0 7A68     	 ldr r2,[r7,#4]
 3902 00f2 8123     	 mov r3,#129
 3903 00f4 9B00     	 lsl r3,r3,#2
 3904 00f6 D358     	 ldr r3,[r2,r3]
 3905 00f8 8022     	 mov r2,#128
 3906 00fa 5202     	 lsl r2,r2,#9
 3907 00fc 1A43     	 orr r2,r3
 3908 00fe 111C     	 mov r1,r2
 3909 0100 7A68     	 ldr r2,[r7,#4]
 3910 0102 8123     	 mov r3,#129
 3911 0104 9B00     	 lsl r3,r3,#2
 3912 0106 D150     	 str r1,[r2,r3]
 3913              	.L160:
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1271:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3914              	 .loc 2 1274 0
 3915 0108 1723     	 mov r3,#23
 3916 010a FB18     	 add r3,r7,r3
 3917 010c 0022     	 mov r2,#0
 3918 010e 1A70     	 strb r2,[r3]
 3919 0110 0FE0     	 b .L161
 3920              	.L162:
1275:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1276:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3921              	 .loc 2 1276 0 discriminator 3
 3922 0112 1723     	 mov r3,#23
 3923 0114 FB18     	 add r3,r7,r3
 3924 0116 1A78     	 ldrb r2,[r3]
 3925 0118 0A4B     	 ldr r3,.L163
 3926 011a 9200     	 lsl r2,r2,#2
 3927 011c D358     	 ldr r3,[r2,r3]
 3928 011e 181C     	 mov r0,r3
 3929 0120 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3930              	 .loc 2 1274 0 discriminator 3
 3931 0124 1723     	 mov r3,#23
 3932 0126 FB18     	 add r3,r7,r3
 3933 0128 1A78     	 ldrb r2,[r3]
 3934 012a 1723     	 mov r3,#23
 3935 012c FB18     	 add r3,r7,r3
 3936 012e 0132     	 add r2,r2,#1
 3937 0130 1A70     	 strb r2,[r3]
 3938              	.L161:
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3939              	 .loc 2 1274 0 is_stmt 0 discriminator 1
 3940 0132 1723     	 mov r3,#23
 3941 0134 FB18     	 add r3,r7,r3
 3942 0136 1B78     	 ldrb r3,[r3]
 3943 0138 012B     	 cmp r3,#1
 3944 013a EAD9     	 bls .L162
1277:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1278:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1279:../Libraries/XMCLib/src/xmc_vadc.c ****   
1280:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3945              	 .loc 2 1280 0 is_stmt 1
 3946 013c BD46     	 mov sp,r7
 3947 013e 06B0     	 add sp,sp,#24
 3948              	 
 3949 0140 80BD     	 pop {r7,pc}
 3950              	.L164:
 3951 0142 C046     	 .align 2
 3952              	.L163:
 3953 0144 00000000 	 .word g_xmc_vadc_group_array
 3954 0148 FFFCFFFF 	 .word -769
 3955 014c 00808000 	 .word 8421376
 3956              	 .cfi_endproc
 3957              	.LFE202:
 3959              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3960              	 .align 2
 3961              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3962              	 .code 16
 3963              	 .thumb_func
 3965              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3966              	.LFB203:
1281:../Libraries/XMCLib/src/xmc_vadc.c **** 
1282:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1283:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1284:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3967              	 .loc 2 1284 0
 3968              	 .cfi_startproc
 3969 0000 80B5     	 push {r7,lr}
 3970              	.LCFI160:
 3971              	 .cfi_def_cfa_offset 8
 3972              	 .cfi_offset 7,-8
 3973              	 .cfi_offset 14,-4
 3974 0002 84B0     	 sub sp,sp,#16
 3975              	.LCFI161:
 3976              	 .cfi_def_cfa_offset 24
 3977 0004 00AF     	 add r7,sp,#0
 3978              	.LCFI162:
 3979              	 .cfi_def_cfa_register 7
 3980 0006 7860     	 str r0,[r7,#4]
 3981 0008 3960     	 str r1,[r7]
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1286:../Libraries/XMCLib/src/xmc_vadc.c **** 
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1289:../Libraries/XMCLib/src/xmc_vadc.c **** 
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3982              	 .loc 2 1291 0
 3983 000a 7A68     	 ldr r2,[r7,#4]
 3984 000c 8023     	 mov r3,#128
 3985 000e 9B00     	 lsl r3,r3,#2
 3986 0010 D358     	 ldr r3,[r2,r3]
 3987 0012 FB60     	 str r3,[r7,#12]
1292:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3988              	 .loc 2 1292 0
 3989 0014 FB68     	 ldr r3,[r7,#12]
 3990 0016 8022     	 mov r2,#128
 3991 0018 1202     	 lsl r2,r2,#8
 3992 001a 1343     	 orr r3,r2
 3993 001c FB60     	 str r3,[r7,#12]
1293:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3994              	 .loc 2 1293 0
 3995 001e FB68     	 ldr r3,[r7,#12]
 3996 0020 074A     	 ldr r2,.L166
 3997 0022 1340     	 and r3,r2
 3998 0024 FB60     	 str r3,[r7,#12]
1294:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 3999              	 .loc 2 1294 0
 4000 0026 3B68     	 ldr r3,[r7]
 4001 0028 1B02     	 lsl r3,r3,#8
 4002 002a FA68     	 ldr r2,[r7,#12]
 4003 002c 1343     	 orr r3,r2
 4004 002e FB60     	 str r3,[r7,#12]
1295:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4005              	 .loc 2 1295 0
 4006 0030 7A68     	 ldr r2,[r7,#4]
 4007 0032 8023     	 mov r3,#128
 4008 0034 9B00     	 lsl r3,r3,#2
 4009 0036 F968     	 ldr r1,[r7,#12]
 4010 0038 D150     	 str r1,[r2,r3]
1296:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4011              	 .loc 2 1296 0
 4012 003a BD46     	 mov sp,r7
 4013 003c 04B0     	 add sp,sp,#16
 4014              	 
 4015 003e 80BD     	 pop {r7,pc}
 4016              	.L167:
 4017              	 .align 2
 4018              	.L166:
 4019 0040 FFF0FFFF 	 .word -3841
 4020              	 .cfi_endproc
 4021              	.LFE203:
 4023              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 4024              	 .align 2
 4025              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 4026              	 .code 16
 4027              	 .thumb_func
 4029              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 4030              	.LFB204:
1297:../Libraries/XMCLib/src/xmc_vadc.c **** 
1298:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1299:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1300:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1301:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4031              	 .loc 2 1301 0
 4032              	 .cfi_startproc
 4033 0000 80B5     	 push {r7,lr}
 4034              	.LCFI163:
 4035              	 .cfi_def_cfa_offset 8
 4036              	 .cfi_offset 7,-8
 4037              	 .cfi_offset 14,-4
 4038 0002 84B0     	 sub sp,sp,#16
 4039              	.LCFI164:
 4040              	 .cfi_def_cfa_offset 24
 4041 0004 00AF     	 add r7,sp,#0
 4042              	.LCFI165:
 4043              	 .cfi_def_cfa_register 7
 4044 0006 7860     	 str r0,[r7,#4]
 4045 0008 0A1C     	 mov r2,r1
 4046 000a FB1C     	 add r3,r7,#3
 4047 000c 1A70     	 strb r2,[r3]
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1303:../Libraries/XMCLib/src/xmc_vadc.c **** 
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1306:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1307:../Libraries/XMCLib/src/xmc_vadc.c **** 
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 4048              	 .loc 2 1308 0
 4049 000e 7A68     	 ldr r2,[r7,#4]
 4050 0010 8023     	 mov r3,#128
 4051 0012 9B00     	 lsl r3,r3,#2
 4052 0014 D358     	 ldr r3,[r2,r3]
 4053 0016 FB60     	 str r3,[r7,#12]
1309:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 4054              	 .loc 2 1309 0
 4055 0018 FB68     	 ldr r3,[r7,#12]
 4056 001a 8022     	 mov r2,#128
 4057 001c 1202     	 lsl r2,r2,#8
 4058 001e 1343     	 orr r3,r2
 4059 0020 FB60     	 str r3,[r7,#12]
1310:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 4060              	 .loc 2 1310 0
 4061 0022 FB68     	 ldr r3,[r7,#12]
 4062 0024 084A     	 ldr r2,.L169
 4063 0026 1340     	 and r3,r2
 4064 0028 FB60     	 str r3,[r7,#12]
1311:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 4065              	 .loc 2 1311 0
 4066 002a FB1C     	 add r3,r7,#3
 4067 002c 1B78     	 ldrb r3,[r3]
 4068 002e 5B03     	 lsl r3,r3,#13
 4069 0030 FA68     	 ldr r2,[r7,#12]
 4070 0032 1343     	 orr r3,r2
 4071 0034 FB60     	 str r3,[r7,#12]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4072              	 .loc 2 1312 0
 4073 0036 7A68     	 ldr r2,[r7,#4]
 4074 0038 8023     	 mov r3,#128
 4075 003a 9B00     	 lsl r3,r3,#2
 4076 003c F968     	 ldr r1,[r7,#12]
 4077 003e D150     	 str r1,[r2,r3]
1313:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4078              	 .loc 2 1313 0
 4079 0040 BD46     	 mov sp,r7
 4080 0042 04B0     	 add sp,sp,#16
 4081              	 
 4082 0044 80BD     	 pop {r7,pc}
 4083              	.L170:
 4084 0046 C046     	 .align 2
 4085              	.L169:
 4086 0048 FF9FFFFF 	 .word -24577
 4087              	 .cfi_endproc
 4088              	.LFE204:
 4090              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 4091              	 .align 2
 4092              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 4093              	 .code 16
 4094              	 .thumb_func
 4096              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 4097              	.LFB205:
1314:../Libraries/XMCLib/src/xmc_vadc.c **** 
1315:../Libraries/XMCLib/src/xmc_vadc.c **** 
1316:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1317:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1318:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4098              	 .loc 2 1318 0
 4099              	 .cfi_startproc
 4100 0000 80B5     	 push {r7,lr}
 4101              	.LCFI166:
 4102              	 .cfi_def_cfa_offset 8
 4103              	 .cfi_offset 7,-8
 4104              	 .cfi_offset 14,-4
 4105 0002 84B0     	 sub sp,sp,#16
 4106              	.LCFI167:
 4107              	 .cfi_def_cfa_offset 24
 4108 0004 00AF     	 add r7,sp,#0
 4109              	.LCFI168:
 4110              	 .cfi_def_cfa_register 7
 4111 0006 7860     	 str r0,[r7,#4]
 4112 0008 3960     	 str r1,[r7]
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1320:../Libraries/XMCLib/src/xmc_vadc.c **** 
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4113              	 .loc 2 1324 0
 4114 000a 7A68     	 ldr r2,[r7,#4]
 4115 000c 8023     	 mov r3,#128
 4116 000e 9B00     	 lsl r3,r3,#2
 4117 0010 D358     	 ldr r3,[r2,r3]
 4118 0012 FB60     	 str r3,[r7,#12]
1325:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 4119              	 .loc 2 1325 0
 4120 0014 FB68     	 ldr r3,[r7,#12]
 4121 0016 8022     	 mov r2,#128
 4122 0018 1204     	 lsl r2,r2,#16
 4123 001a 1343     	 orr r3,r2
 4124 001c FB60     	 str r3,[r7,#12]
1326:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 4125              	 .loc 2 1326 0
 4126 001e FB68     	 ldr r3,[r7,#12]
 4127 0020 074A     	 ldr r2,.L172
 4128 0022 1340     	 and r3,r2
 4129 0024 FB60     	 str r3,[r7,#12]
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 4130              	 .loc 2 1327 0
 4131 0026 3B68     	 ldr r3,[r7]
 4132 0028 1B04     	 lsl r3,r3,#16
 4133 002a FA68     	 ldr r2,[r7,#12]
 4134 002c 1343     	 orr r3,r2
 4135 002e FB60     	 str r3,[r7,#12]
1328:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4136              	 .loc 2 1328 0
 4137 0030 7A68     	 ldr r2,[r7,#4]
 4138 0032 8023     	 mov r3,#128
 4139 0034 9B00     	 lsl r3,r3,#2
 4140 0036 F968     	 ldr r1,[r7,#12]
 4141 0038 D150     	 str r1,[r2,r3]
1329:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4142              	 .loc 2 1329 0
 4143 003a BD46     	 mov sp,r7
 4144 003c 04B0     	 add sp,sp,#16
 4145              	 
 4146 003e 80BD     	 pop {r7,pc}
 4147              	.L173:
 4148              	 .align 2
 4149              	.L172:
 4150 0040 FFFFF0FF 	 .word -983041
 4151              	 .cfi_endproc
 4152              	.LFE205:
 4154              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4155              	 .align 2
 4156              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4157              	 .code 16
 4158              	 .thumb_func
 4160              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4161              	.LFB206:
1330:../Libraries/XMCLib/src/xmc_vadc.c **** 
1331:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1332:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1333:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4162              	 .loc 2 1333 0
 4163              	 .cfi_startproc
 4164 0000 80B5     	 push {r7,lr}
 4165              	.LCFI169:
 4166              	 .cfi_def_cfa_offset 8
 4167              	 .cfi_offset 7,-8
 4168              	 .cfi_offset 14,-4
 4169 0002 86B0     	 sub sp,sp,#24
 4170              	.LCFI170:
 4171              	 .cfi_def_cfa_offset 32
 4172 0004 00AF     	 add r7,sp,#0
 4173              	.LCFI171:
 4174              	 .cfi_def_cfa_register 7
 4175 0006 7860     	 str r0,[r7,#4]
1334:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1335:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1338:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1340:../Libraries/XMCLib/src/xmc_vadc.c **** 
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4176              	 .loc 2 1342 0
 4177 0008 7A68     	 ldr r2,[r7,#4]
 4178 000a 8023     	 mov r3,#128
 4179 000c 9B00     	 lsl r3,r3,#2
 4180 000e D358     	 ldr r3,[r2,r3]
 4181 0010 3B61     	 str r3,[r7,#16]
1343:../Libraries/XMCLib/src/xmc_vadc.c **** 
1344:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4182              	 .loc 2 1344 0
 4183 0012 7A68     	 ldr r2,[r7,#4]
 4184 0014 8023     	 mov r3,#128
 4185 0016 9B00     	 lsl r3,r3,#2
 4186 0018 2649     	 ldr r1,.L180
 4187 001a D150     	 str r1,[r2,r3]
1345:../Libraries/XMCLib/src/xmc_vadc.c **** 
1346:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1347:../Libraries/XMCLib/src/xmc_vadc.c **** 
1348:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4188              	 .loc 2 1349 0
 4189 001c 0023     	 mov r3,#0
 4190 001e 7B61     	 str r3,[r7,#20]
 4191 0020 17E0     	 b .L175
 4192              	.L176:
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1351:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4193              	 .loc 2 1351 0 discriminator 3
 4194 0022 254B     	 ldr r3,.L180+4
 4195 0024 7A69     	 ldr r2,[r7,#20]
 4196 0026 9200     	 lsl r2,r2,#2
 4197 0028 D358     	 ldr r3,[r2,r3]
 4198 002a 8422     	 mov r2,#132
 4199 002c 9B58     	 ldr r3,[r3,r2]
 4200 002e 9B0E     	 lsr r3,r3,#26
 4201 0030 D9B2     	 uxtb r1,r3
 4202 0032 0C23     	 mov r3,#12
 4203 0034 FA18     	 add r2,r7,r3
 4204 0036 7B69     	 ldr r3,[r7,#20]
 4205 0038 D318     	 add r3,r2,r3
 4206 003a 0A1C     	 add r2,r1,#0
 4207 003c 1A70     	 strb r2,[r3]
1352:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4208              	 .loc 2 1352 0 discriminator 3
 4209 003e 1E4B     	 ldr r3,.L180+4
 4210 0040 7A69     	 ldr r2,[r7,#20]
 4211 0042 9200     	 lsl r2,r2,#2
 4212 0044 D358     	 ldr r3,[r2,r3]
 4213 0046 181C     	 mov r0,r3
 4214 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4215              	 .loc 2 1349 0 discriminator 3
 4216 004c 7B69     	 ldr r3,[r7,#20]
 4217 004e 0133     	 add r3,r3,#1
 4218 0050 7B61     	 str r3,[r7,#20]
 4219              	.L175:
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4220              	 .loc 2 1349 0 is_stmt 0 discriminator 1
 4221 0052 7B69     	 ldr r3,[r7,#20]
 4222 0054 012B     	 cmp r3,#1
 4223 0056 E4D9     	 bls .L176
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1354:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1355:../Libraries/XMCLib/src/xmc_vadc.c **** 
1356:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4224              	 .loc 2 1357 0 is_stmt 1
 4225 0058 7A68     	 ldr r2,[r7,#4]
 4226 005a 8123     	 mov r3,#129
 4227 005c 9B00     	 lsl r3,r3,#2
 4228 005e D358     	 ldr r3,[r2,r3]
 4229 0060 8022     	 mov r2,#128
 4230 0062 5200     	 lsl r2,r2,#1
 4231 0064 1A43     	 orr r2,r3
 4232 0066 111C     	 mov r1,r2
 4233 0068 7A68     	 ldr r2,[r7,#4]
 4234 006a 8123     	 mov r3,#129
 4235 006c 9B00     	 lsl r3,r3,#2
 4236 006e D150     	 str r1,[r2,r3]
1358:../Libraries/XMCLib/src/xmc_vadc.c **** 
1359:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4237              	 .loc 2 1361 0
 4238 0070 0023     	 mov r3,#0
 4239 0072 7B61     	 str r3,[r7,#20]
 4240 0074 10E0     	 b .L177
 4241              	.L179:
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1363:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4242              	 .loc 2 1363 0
 4243 0076 0C23     	 mov r3,#12
 4244 0078 FA18     	 add r2,r7,r3
 4245 007a 7B69     	 ldr r3,[r7,#20]
 4246 007c D318     	 add r3,r2,r3
 4247 007e 1B78     	 ldrb r3,[r3]
 4248 0080 012B     	 cmp r3,#1
 4249 0082 06D1     	 bne .L178
1364:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1365:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 4250              	 .loc 2 1365 0
 4251 0084 0C4B     	 ldr r3,.L180+4
 4252 0086 7A69     	 ldr r2,[r7,#20]
 4253 0088 9200     	 lsl r2,r2,#2
 4254 008a D358     	 ldr r3,[r2,r3]
 4255 008c 181C     	 mov r0,r3
 4256 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4257              	.L178:
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4258              	 .loc 2 1361 0 discriminator 2
 4259 0092 7B69     	 ldr r3,[r7,#20]
 4260 0094 0133     	 add r3,r3,#1
 4261 0096 7B61     	 str r3,[r7,#20]
 4262              	.L177:
1361:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4263              	 .loc 2 1361 0 is_stmt 0 discriminator 1
 4264 0098 7B69     	 ldr r3,[r7,#20]
 4265 009a 012B     	 cmp r3,#1
 4266 009c EBD9     	 bls .L179
1366:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1368:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1369:../Libraries/XMCLib/src/xmc_vadc.c **** 
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1371:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 4267              	 .loc 2 1371 0 is_stmt 1
 4268 009e 3B69     	 ldr r3,[r7,#16]
 4269 00a0 044A     	 ldr r2,.L180
 4270 00a2 1A43     	 orr r2,r3
 4271 00a4 111C     	 mov r1,r2
 4272 00a6 7A68     	 ldr r2,[r7,#4]
 4273 00a8 8023     	 mov r3,#128
 4274 00aa 9B00     	 lsl r3,r3,#2
 4275 00ac D150     	 str r1,[r2,r3]
1372:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4276              	 .loc 2 1372 0
 4277 00ae BD46     	 mov sp,r7
 4278 00b0 06B0     	 add sp,sp,#24
 4279              	 
 4280 00b2 80BD     	 pop {r7,pc}
 4281              	.L181:
 4282              	 .align 2
 4283              	.L180:
 4284 00b4 00808000 	 .word 8421376
 4285 00b8 00000000 	 .word g_xmc_vadc_group_array
 4286              	 .cfi_endproc
 4287              	.LFE206:
 4289              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4290              	 .align 2
 4291              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4292              	 .code 16
 4293              	 .thumb_func
 4295              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4296              	.LFB207:
1373:../Libraries/XMCLib/src/xmc_vadc.c **** 
1374:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1375:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1376:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4297              	 .loc 2 1376 0
 4298              	 .cfi_startproc
 4299 0000 80B5     	 push {r7,lr}
 4300              	.LCFI172:
 4301              	 .cfi_def_cfa_offset 8
 4302              	 .cfi_offset 7,-8
 4303              	 .cfi_offset 14,-4
 4304 0002 86B0     	 sub sp,sp,#24
 4305              	.LCFI173:
 4306              	 .cfi_def_cfa_offset 32
 4307 0004 00AF     	 add r7,sp,#0
 4308              	.LCFI174:
 4309              	 .cfi_def_cfa_register 7
 4310 0006 7860     	 str r0,[r7,#4]
1377:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1378:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1379:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1381:../Libraries/XMCLib/src/xmc_vadc.c **** 
1382:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1383:../Libraries/XMCLib/src/xmc_vadc.c **** 
1384:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4311              	 .loc 2 1384 0
 4312 0008 0023     	 mov r3,#0
 4313 000a BB60     	 str r3,[r7,#8]
1385:../Libraries/XMCLib/src/xmc_vadc.c ****   
1386:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1387:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4314              	 .loc 2 1387 0
 4315 000c 0023     	 mov r3,#0
 4316 000e 3B61     	 str r3,[r7,#16]
 4317 0010 22E0     	 b .L183
 4318              	.L188:
1388:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1389:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4319              	 .loc 2 1389 0
 4320 0012 7B68     	 ldr r3,[r7,#4]
 4321 0014 3A69     	 ldr r2,[r7,#16]
 4322 0016 6032     	 add r2,r2,#96
 4323 0018 9200     	 lsl r2,r2,#2
 4324 001a D358     	 ldr r3,[r2,r3]
 4325 001c 002B     	 cmp r3,#0
 4326 001e 18D0     	 beq .L184
1390:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1391:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4327              	 .loc 2 1391 0
 4328 0020 7B68     	 ldr r3,[r7,#4]
 4329 0022 3A69     	 ldr r2,[r7,#16]
 4330 0024 7032     	 add r2,r2,#112
 4331 0026 9200     	 lsl r2,r2,#2
 4332 0028 D358     	 ldr r3,[r2,r3]
 4333 002a 7B61     	 str r3,[r7,#20]
1392:../Libraries/XMCLib/src/xmc_vadc.c **** 
1393:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 4334              	 .loc 2 1393 0
 4335 002c 0023     	 mov r3,#0
 4336 002e FB60     	 str r3,[r7,#12]
 4337 0030 0CE0     	 b .L185
 4338              	.L187:
1394:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1395:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4339              	 .loc 2 1395 0
 4340 0032 7B69     	 ldr r3,[r7,#20]
 4341 0034 0122     	 mov r2,#1
 4342 0036 1340     	 and r3,r2
 4343 0038 02D0     	 beq .L186
1396:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1397:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4344              	 .loc 2 1397 0
 4345 003a BB68     	 ldr r3,[r7,#8]
 4346 003c 0133     	 add r3,r3,#1
 4347 003e BB60     	 str r3,[r7,#8]
 4348              	.L186:
1398:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1399:../Libraries/XMCLib/src/xmc_vadc.c **** 
1400:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4349              	 .loc 2 1400 0 discriminator 2
 4350 0040 7B69     	 ldr r3,[r7,#20]
 4351 0042 5B08     	 lsr r3,r3,#1
 4352 0044 7B61     	 str r3,[r7,#20]
1393:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4353              	 .loc 2 1393 0 discriminator 2
 4354 0046 FB68     	 ldr r3,[r7,#12]
 4355 0048 0133     	 add r3,r3,#1
 4356 004a FB60     	 str r3,[r7,#12]
 4357              	.L185:
1393:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4358              	 .loc 2 1393 0 is_stmt 0 discriminator 1
 4359 004c FB68     	 ldr r3,[r7,#12]
 4360 004e 072B     	 cmp r3,#7
 4361 0050 EFD9     	 bls .L187
 4362              	.L184:
1387:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4363              	 .loc 2 1387 0 is_stmt 1 discriminator 2
 4364 0052 3B69     	 ldr r3,[r7,#16]
 4365 0054 0133     	 add r3,r3,#1
 4366 0056 3B61     	 str r3,[r7,#16]
 4367              	.L183:
1387:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4368              	 .loc 2 1387 0 is_stmt 0 discriminator 1
 4369 0058 3B69     	 ldr r3,[r7,#16]
 4370 005a 012B     	 cmp r3,#1
 4371 005c D9D9     	 bls .L188
1401:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1402:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1404:../Libraries/XMCLib/src/xmc_vadc.c **** 
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4372              	 .loc 2 1405 0 is_stmt 1
 4373 005e BB68     	 ldr r3,[r7,#8]
1406:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4374              	 .loc 2 1406 0
 4375 0060 181C     	 mov r0,r3
 4376 0062 BD46     	 mov sp,r7
 4377 0064 06B0     	 add sp,sp,#24
 4378              	 
 4379 0066 80BD     	 pop {r7,pc}
 4380              	 .cfi_endproc
 4381              	.LFE207:
 4383              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4384              	 .align 2
 4385              	 .global XMC_VADC_GROUP_QueueInit
 4386              	 .code 16
 4387              	 .thumb_func
 4389              	XMC_VADC_GROUP_QueueInit:
 4390              	.LFB208:
1407:../Libraries/XMCLib/src/xmc_vadc.c **** 
1408:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1409:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1410:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1411:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4391              	 .loc 2 1411 0
 4392              	 .cfi_startproc
 4393 0000 80B5     	 push {r7,lr}
 4394              	.LCFI175:
 4395              	 .cfi_def_cfa_offset 8
 4396              	 .cfi_offset 7,-8
 4397              	 .cfi_offset 14,-4
 4398 0002 84B0     	 sub sp,sp,#16
 4399              	.LCFI176:
 4400              	 .cfi_def_cfa_offset 24
 4401 0004 00AF     	 add r7,sp,#0
 4402              	.LCFI177:
 4403              	 .cfi_def_cfa_register 7
 4404 0006 7860     	 str r0,[r7,#4]
 4405 0008 3960     	 str r1,[r7]
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4406              	 .loc 2 1417 0
 4407 000a 7B68     	 ldr r3,[r7,#4]
 4408 000c 181C     	 mov r0,r3
 4409 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1418:../Libraries/XMCLib/src/xmc_vadc.c ****   
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4410              	 .loc 2 1419 0
 4411 0012 7B68     	 ldr r3,[r7,#4]
 4412 0014 8422     	 mov r2,#132
 4413 0016 9B58     	 ldr r3,[r3,r2]
 4414 0018 FB60     	 str r3,[r7,#12]
1420:../Libraries/XMCLib/src/xmc_vadc.c **** 
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4415              	 .loc 2 1422 0
 4416 001a FB68     	 ldr r3,[r7,#12]
 4417 001c 0322     	 mov r2,#3
 4418 001e 9343     	 bic r3,r2
 4419 0020 FB60     	 str r3,[r7,#12]
1423:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4420              	 .loc 2 1423 0
 4421 0022 3B68     	 ldr r3,[r7]
 4422 0024 1B78     	 ldrb r3,[r3]
 4423 0026 1B07     	 lsl r3,r3,#28
 4424 0028 9B0F     	 lsr r3,r3,#30
 4425 002a DBB2     	 uxtb r3,r3
 4426 002c 1A1C     	 mov r2,r3
 4427 002e FB68     	 ldr r3,[r7,#12]
 4428 0030 1343     	 orr r3,r2
 4429 0032 FB60     	 str r3,[r7,#12]
1424:../Libraries/XMCLib/src/xmc_vadc.c **** 
1425:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1426:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4430              	 .loc 2 1426 0
 4431 0034 3B68     	 ldr r3,[r7]
 4432 0036 1B78     	 ldrb r3,[r3]
 4433 0038 0322     	 mov r2,#3
 4434 003a 1340     	 and r3,r2
 4435 003c DBB2     	 uxtb r3,r3
 4436 003e 002B     	 cmp r3,#0
 4437 0040 03D0     	 beq .L191
1427:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1428:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4438              	 .loc 2 1428 0
 4439 0042 FB68     	 ldr r3,[r7,#12]
 4440 0044 0822     	 mov r2,#8
 4441 0046 1343     	 orr r3,r2
 4442 0048 FB60     	 str r3,[r7,#12]
 4443              	.L191:
1429:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1430:../Libraries/XMCLib/src/xmc_vadc.c **** 
1431:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4444              	 .loc 2 1431 0
 4445 004a 7B68     	 ldr r3,[r7,#4]
 4446 004c 8421     	 mov r1,#132
 4447 004e FA68     	 ldr r2,[r7,#12]
 4448 0050 5A50     	 str r2,[r3,r1]
1432:../Libraries/XMCLib/src/xmc_vadc.c **** 
1433:../Libraries/XMCLib/src/xmc_vadc.c **** 
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 4449              	 .loc 2 1434 0
 4450 0052 3B68     	 ldr r3,[r7]
 4451 0054 5B68     	 ldr r3,[r3,#4]
 4452 0056 154A     	 ldr r2,.L193
 4453 0058 1A43     	 orr r2,r3
 4454 005a 111C     	 mov r1,r2
 4455 005c 7A68     	 ldr r2,[r7,#4]
 4456 005e 8023     	 mov r3,#128
 4457 0060 5B00     	 lsl r3,r3,#1
 4458 0062 D150     	 str r1,[r2,r3]
1435:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1436:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1437:../Libraries/XMCLib/src/xmc_vadc.c **** 
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4459              	 .loc 2 1439 0
 4460 0064 3B68     	 ldr r3,[r7]
 4461 0066 9B68     	 ldr r3,[r3,#8]
 4462 0068 0122     	 mov r2,#1
 4463 006a 1A43     	 orr r2,r3
 4464 006c 111C     	 mov r1,r2
 4465 006e 7A68     	 ldr r2,[r7,#4]
 4466 0070 8223     	 mov r3,#130
 4467 0072 5B00     	 lsl r3,r3,#1
 4468 0074 D150     	 str r1,[r2,r3]
1440:../Libraries/XMCLib/src/xmc_vadc.c **** 
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4469              	 .loc 2 1441 0
 4470 0076 3B68     	 ldr r3,[r7]
 4471 0078 1B78     	 ldrb r3,[r3]
 4472 007a 0322     	 mov r2,#3
 4473 007c 1340     	 and r3,r2
 4474 007e DBB2     	 uxtb r3,r3
 4475 0080 022B     	 cmp r3,#2
 4476 0082 0BD1     	 bne .L192
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1443:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4477              	 .loc 2 1443 0
 4478 0084 7A68     	 ldr r2,[r7,#4]
 4479 0086 8223     	 mov r3,#130
 4480 0088 5B00     	 lsl r3,r3,#1
 4481 008a D358     	 ldr r3,[r2,r3]
 4482 008c 8022     	 mov r2,#128
 4483 008e 5202     	 lsl r2,r2,#9
 4484 0090 1A43     	 orr r2,r3
 4485 0092 111C     	 mov r1,r2
 4486 0094 7A68     	 ldr r2,[r7,#4]
 4487 0096 8223     	 mov r3,#130
 4488 0098 5B00     	 lsl r3,r3,#1
 4489 009a D150     	 str r1,[r2,r3]
 4490              	.L192:
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1446:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4491              	 .loc 2 1446 0
 4492 009c 7B68     	 ldr r3,[r7,#4]
 4493 009e 181C     	 mov r0,r3
 4494 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1447:../Libraries/XMCLib/src/xmc_vadc.c **** 
1448:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4495              	 .loc 2 1448 0
 4496 00a4 BD46     	 mov sp,r7
 4497 00a6 04B0     	 add sp,sp,#16
 4498              	 
 4499 00a8 80BD     	 pop {r7,pc}
 4500              	.L194:
 4501 00aa C046     	 .align 2
 4502              	.L193:
 4503 00ac 00808080 	 .word -2139062272
 4504              	 .cfi_endproc
 4505              	.LFE208:
 4507              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 4508              	 .align 2
 4509              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 4510              	 .code 16
 4511              	 .thumb_func
 4513              	XMC_VADC_GROUP_QueueSelectTrigger:
 4514              	.LFB209:
1449:../Libraries/XMCLib/src/xmc_vadc.c **** 
1450:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1451:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1452:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1453:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4515              	 .loc 2 1453 0
 4516              	 .cfi_startproc
 4517 0000 80B5     	 push {r7,lr}
 4518              	.LCFI178:
 4519              	 .cfi_def_cfa_offset 8
 4520              	 .cfi_offset 7,-8
 4521              	 .cfi_offset 14,-4
 4522 0002 84B0     	 sub sp,sp,#16
 4523              	.LCFI179:
 4524              	 .cfi_def_cfa_offset 24
 4525 0004 00AF     	 add r7,sp,#0
 4526              	.LCFI180:
 4527              	 .cfi_def_cfa_register 7
 4528 0006 7860     	 str r0,[r7,#4]
 4529 0008 0A1C     	 mov r2,r1
 4530 000a FB1C     	 add r3,r7,#3
 4531 000c 1A70     	 strb r2,[r3]
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1458:../Libraries/XMCLib/src/xmc_vadc.c **** 
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   
1460:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4532              	 .loc 2 1461 0
 4533 000e 7A68     	 ldr r2,[r7,#4]
 4534 0010 8023     	 mov r3,#128
 4535 0012 5B00     	 lsl r3,r3,#1
 4536 0014 D358     	 ldr r3,[r2,r3]
 4537 0016 FB60     	 str r3,[r7,#12]
1462:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4538              	 .loc 2 1462 0
 4539 0018 FB68     	 ldr r3,[r7,#12]
 4540 001a 8022     	 mov r2,#128
 4541 001c 1202     	 lsl r2,r2,#8
 4542 001e 1343     	 orr r3,r2
 4543 0020 FB60     	 str r3,[r7,#12]
1463:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 4544              	 .loc 2 1463 0
 4545 0022 FB68     	 ldr r3,[r7,#12]
 4546 0024 084A     	 ldr r2,.L196
 4547 0026 1340     	 and r3,r2
 4548 0028 FB60     	 str r3,[r7,#12]
1464:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 4549              	 .loc 2 1464 0
 4550 002a FB1C     	 add r3,r7,#3
 4551 002c 1B78     	 ldrb r3,[r3]
 4552 002e 1B02     	 lsl r3,r3,#8
 4553 0030 FA68     	 ldr r2,[r7,#12]
 4554 0032 1343     	 orr r3,r2
 4555 0034 FB60     	 str r3,[r7,#12]
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4556              	 .loc 2 1465 0
 4557 0036 7A68     	 ldr r2,[r7,#4]
 4558 0038 8023     	 mov r3,#128
 4559 003a 5B00     	 lsl r3,r3,#1
 4560 003c F968     	 ldr r1,[r7,#12]
 4561 003e D150     	 str r1,[r2,r3]
1466:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4562              	 .loc 2 1466 0
 4563 0040 BD46     	 mov sp,r7
 4564 0042 04B0     	 add sp,sp,#16
 4565              	 
 4566 0044 80BD     	 pop {r7,pc}
 4567              	.L197:
 4568 0046 C046     	 .align 2
 4569              	.L196:
 4570 0048 FFF0FFFF 	 .word -3841
 4571              	 .cfi_endproc
 4572              	.LFE209:
 4574              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 4575              	 .align 2
 4576              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 4577              	 .code 16
 4578              	 .thumb_func
 4580              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 4581              	.LFB210:
1467:../Libraries/XMCLib/src/xmc_vadc.c **** 
1468:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1469:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1470:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4582              	 .loc 2 1470 0
 4583              	 .cfi_startproc
 4584 0000 80B5     	 push {r7,lr}
 4585              	.LCFI181:
 4586              	 .cfi_def_cfa_offset 8
 4587              	 .cfi_offset 7,-8
 4588              	 .cfi_offset 14,-4
 4589 0002 84B0     	 sub sp,sp,#16
 4590              	.LCFI182:
 4591              	 .cfi_def_cfa_offset 24
 4592 0004 00AF     	 add r7,sp,#0
 4593              	.LCFI183:
 4594              	 .cfi_def_cfa_register 7
 4595 0006 7860     	 str r0,[r7,#4]
 4596 0008 0A1C     	 mov r2,r1
 4597 000a FB1C     	 add r3,r7,#3
 4598 000c 1A70     	 strb r2,[r3]
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1472:../Libraries/XMCLib/src/xmc_vadc.c **** 
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1475:../Libraries/XMCLib/src/xmc_vadc.c **** 
1476:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1477:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4599              	 .loc 2 1477 0
 4600 000e 7A68     	 ldr r2,[r7,#4]
 4601 0010 8023     	 mov r3,#128
 4602 0012 5B00     	 lsl r3,r3,#1
 4603 0014 D358     	 ldr r3,[r2,r3]
 4604 0016 FB60     	 str r3,[r7,#12]
1478:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4605              	 .loc 2 1478 0
 4606 0018 FB68     	 ldr r3,[r7,#12]
 4607 001a 8022     	 mov r2,#128
 4608 001c 1202     	 lsl r2,r2,#8
 4609 001e 1343     	 orr r3,r2
 4610 0020 FB60     	 str r3,[r7,#12]
1479:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 4611              	 .loc 2 1479 0
 4612 0022 FB68     	 ldr r3,[r7,#12]
 4613 0024 084A     	 ldr r2,.L199
 4614 0026 1340     	 and r3,r2
 4615 0028 FB60     	 str r3,[r7,#12]
1480:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 4616              	 .loc 2 1480 0
 4617 002a FB1C     	 add r3,r7,#3
 4618 002c 1B78     	 ldrb r3,[r3]
 4619 002e 5B03     	 lsl r3,r3,#13
 4620 0030 FA68     	 ldr r2,[r7,#12]
 4621 0032 1343     	 orr r3,r2
 4622 0034 FB60     	 str r3,[r7,#12]
1481:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4623              	 .loc 2 1481 0
 4624 0036 7A68     	 ldr r2,[r7,#4]
 4625 0038 8023     	 mov r3,#128
 4626 003a 5B00     	 lsl r3,r3,#1
 4627 003c F968     	 ldr r1,[r7,#12]
 4628 003e D150     	 str r1,[r2,r3]
1482:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4629              	 .loc 2 1482 0
 4630 0040 BD46     	 mov sp,r7
 4631 0042 04B0     	 add sp,sp,#16
 4632              	 
 4633 0044 80BD     	 pop {r7,pc}
 4634              	.L200:
 4635 0046 C046     	 .align 2
 4636              	.L199:
 4637 0048 FF9FFFFF 	 .word -24577
 4638              	 .cfi_endproc
 4639              	.LFE210:
 4641              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 4642              	 .align 2
 4643              	 .global XMC_VADC_GROUP_QueueSelectGating
 4644              	 .code 16
 4645              	 .thumb_func
 4647              	XMC_VADC_GROUP_QueueSelectGating:
 4648              	.LFB211:
1483:../Libraries/XMCLib/src/xmc_vadc.c **** 
1484:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1485:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1486:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4649              	 .loc 2 1486 0
 4650              	 .cfi_startproc
 4651 0000 80B5     	 push {r7,lr}
 4652              	.LCFI184:
 4653              	 .cfi_def_cfa_offset 8
 4654              	 .cfi_offset 7,-8
 4655              	 .cfi_offset 14,-4
 4656 0002 84B0     	 sub sp,sp,#16
 4657              	.LCFI185:
 4658              	 .cfi_def_cfa_offset 24
 4659 0004 00AF     	 add r7,sp,#0
 4660              	.LCFI186:
 4661              	 .cfi_def_cfa_register 7
 4662 0006 7860     	 str r0,[r7,#4]
 4663 0008 0A1C     	 mov r2,r1
 4664 000a FB1C     	 add r3,r7,#3
 4665 000c 1A70     	 strb r2,[r3]
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1488:../Libraries/XMCLib/src/xmc_vadc.c **** 
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4666              	 .loc 2 1493 0
 4667 000e 7A68     	 ldr r2,[r7,#4]
 4668 0010 8023     	 mov r3,#128
 4669 0012 5B00     	 lsl r3,r3,#1
 4670 0014 D358     	 ldr r3,[r2,r3]
 4671 0016 FB60     	 str r3,[r7,#12]
1494:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 4672              	 .loc 2 1494 0
 4673 0018 FB68     	 ldr r3,[r7,#12]
 4674 001a 8022     	 mov r2,#128
 4675 001c 1204     	 lsl r2,r2,#16
 4676 001e 1343     	 orr r3,r2
 4677 0020 FB60     	 str r3,[r7,#12]
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 4678              	 .loc 2 1495 0
 4679 0022 FB68     	 ldr r3,[r7,#12]
 4680 0024 084A     	 ldr r2,.L202
 4681 0026 1340     	 and r3,r2
 4682 0028 FB60     	 str r3,[r7,#12]
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 4683              	 .loc 2 1496 0
 4684 002a FB1C     	 add r3,r7,#3
 4685 002c 1B78     	 ldrb r3,[r3]
 4686 002e 1B04     	 lsl r3,r3,#16
 4687 0030 FA68     	 ldr r2,[r7,#12]
 4688 0032 1343     	 orr r3,r2
 4689 0034 FB60     	 str r3,[r7,#12]
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4690              	 .loc 2 1497 0
 4691 0036 7A68     	 ldr r2,[r7,#4]
 4692 0038 8023     	 mov r3,#128
 4693 003a 5B00     	 lsl r3,r3,#1
 4694 003c F968     	 ldr r1,[r7,#12]
 4695 003e D150     	 str r1,[r2,r3]
1498:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4696              	 .loc 2 1498 0
 4697 0040 BD46     	 mov sp,r7
 4698 0042 04B0     	 add sp,sp,#16
 4699              	 
 4700 0044 80BD     	 pop {r7,pc}
 4701              	.L203:
 4702 0046 C046     	 .align 2
 4703              	.L202:
 4704 0048 FFFFF0FF 	 .word -983041
 4705              	 .cfi_endproc
 4706              	.LFE211:
 4708              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 4709              	 .align 2
 4710              	 .global XMC_VADC_GROUP_QueueGetLength
 4711              	 .code 16
 4712              	 .thumb_func
 4714              	XMC_VADC_GROUP_QueueGetLength:
 4715              	.LFB212:
1499:../Libraries/XMCLib/src/xmc_vadc.c **** 
1500:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1501:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1502:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4716              	 .loc 2 1502 0
 4717              	 .cfi_startproc
 4718 0000 80B5     	 push {r7,lr}
 4719              	.LCFI187:
 4720              	 .cfi_def_cfa_offset 8
 4721              	 .cfi_offset 7,-8
 4722              	 .cfi_offset 14,-4
 4723 0002 86B0     	 sub sp,sp,#24
 4724              	.LCFI188:
 4725              	 .cfi_def_cfa_offset 32
 4726 0004 00AF     	 add r7,sp,#0
 4727              	.LCFI189:
 4728              	 .cfi_def_cfa_register 7
 4729 0006 7860     	 str r0,[r7,#4]
1503:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1505:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1506:../Libraries/XMCLib/src/xmc_vadc.c **** 
1507:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1508:../Libraries/XMCLib/src/xmc_vadc.c **** 
1509:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 4730              	 .loc 2 1509 0
 4731 0008 7A68     	 ldr r2,[r7,#4]
 4732 000a 8423     	 mov r3,#132
 4733 000c 5B00     	 lsl r3,r3,#1
 4734 000e D358     	 ldr r3,[r2,r3]
 4735 0010 3B61     	 str r3,[r7,#16]
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 4736              	 .loc 2 1510 0
 4737 0012 7A68     	 ldr r2,[r7,#4]
 4738 0014 8823     	 mov r3,#136
 4739 0016 5B00     	 lsl r3,r3,#1
 4740 0018 D358     	 ldr r3,[r2,r3]
 4741 001a FB60     	 str r3,[r7,#12]
1511:../Libraries/XMCLib/src/xmc_vadc.c **** 
1512:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 4742              	 .loc 2 1512 0
 4743 001c 3B69     	 ldr r3,[r7,#16]
 4744 001e 2022     	 mov r2,#32
 4745 0020 1340     	 and r3,r2
 4746 0022 02D0     	 beq .L205
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1514:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 4747              	 .loc 2 1514 0
 4748 0024 0023     	 mov r3,#0
 4749 0026 7B61     	 str r3,[r7,#20]
 4750 0028 04E0     	 b .L206
 4751              	.L205:
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1518:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 4752              	 .loc 2 1518 0
 4753 002a 3B69     	 ldr r3,[r7,#16]
 4754 002c 0F22     	 mov r2,#15
 4755 002e 1340     	 and r3,r2
 4756 0030 0133     	 add r3,r3,#1
 4757 0032 7B61     	 str r3,[r7,#20]
 4758              	.L206:
1519:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 4759              	 .loc 2 1521 0
 4760 0034 FA68     	 ldr r2,[r7,#12]
 4761 0036 8023     	 mov r3,#128
 4762 0038 5B00     	 lsl r3,r3,#1
 4763 003a 1340     	 and r3,r2
 4764 003c 02D0     	 beq .L207
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1523:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 4765              	 .loc 2 1523 0
 4766 003e 7B69     	 ldr r3,[r7,#20]
 4767 0040 0133     	 add r3,r3,#1
 4768 0042 7B61     	 str r3,[r7,#20]
 4769              	.L207:
1524:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1525:../Libraries/XMCLib/src/xmc_vadc.c **** 
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 4770              	 .loc 2 1526 0
 4771 0044 7B69     	 ldr r3,[r7,#20]
1527:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4772              	 .loc 2 1527 0
 4773 0046 181C     	 mov r0,r3
 4774 0048 BD46     	 mov sp,r7
 4775 004a 06B0     	 add sp,sp,#24
 4776              	 
 4777 004c 80BD     	 pop {r7,pc}
 4778              	 .cfi_endproc
 4779              	.LFE212:
 4781 004e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 4782              	 .align 2
 4783              	 .global XMC_VADC_GROUP_QueueAbortSequence
 4784              	 .code 16
 4785              	 .thumb_func
 4787              	XMC_VADC_GROUP_QueueAbortSequence:
 4788              	.LFB213:
1528:../Libraries/XMCLib/src/xmc_vadc.c **** 
1529:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1530:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1531:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4789              	 .loc 2 1531 0
 4790              	 .cfi_startproc
 4791 0000 80B5     	 push {r7,lr}
 4792              	.LCFI190:
 4793              	 .cfi_def_cfa_offset 8
 4794              	 .cfi_offset 7,-8
 4795              	 .cfi_offset 14,-4
 4796 0002 84B0     	 sub sp,sp,#16
 4797              	.LCFI191:
 4798              	 .cfi_def_cfa_offset 24
 4799 0004 00AF     	 add r7,sp,#0
 4800              	.LCFI192:
 4801              	 .cfi_def_cfa_register 7
 4802 0006 7860     	 str r0,[r7,#4]
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1534:../Libraries/XMCLib/src/xmc_vadc.c **** 
1535:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1536:../Libraries/XMCLib/src/xmc_vadc.c **** 
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1538:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4803              	 .loc 2 1538 0
 4804 0008 7A68     	 ldr r2,[r7,#4]
 4805 000a 8023     	 mov r3,#128
 4806 000c 5B00     	 lsl r3,r3,#1
 4807 000e D358     	 ldr r3,[r2,r3]
 4808 0010 FB60     	 str r3,[r7,#12]
1539:../Libraries/XMCLib/src/xmc_vadc.c **** 
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4809              	 .loc 2 1540 0
 4810 0012 7A68     	 ldr r2,[r7,#4]
 4811 0014 8023     	 mov r3,#128
 4812 0016 5B00     	 lsl r3,r3,#1
 4813 0018 1549     	 ldr r1,.L210
 4814 001a D150     	 str r1,[r2,r3]
1541:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4815              	 .loc 2 1544 0
 4816 001c 7B68     	 ldr r3,[r7,#4]
 4817 001e 8422     	 mov r2,#132
 4818 0020 9B58     	 ldr r3,[r3,r2]
 4819 0022 1B0E     	 lsr r3,r3,#24
 4820 0024 0122     	 mov r2,#1
 4821 0026 1A40     	 and r2,r3
 4822 0028 0B23     	 mov r3,#11
 4823 002a FB18     	 add r3,r7,r3
 4824 002c 511E     	 sub r1,r2,#1
 4825 002e 8A41     	 sbc r2,r2,r1
 4826 0030 1A70     	 strb r2,[r3]
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4827              	 .loc 2 1545 0
 4828 0032 7B68     	 ldr r3,[r7,#4]
 4829 0034 181C     	 mov r0,r3
 4830 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1546:../Libraries/XMCLib/src/xmc_vadc.c ****    
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1548:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 4831              	 .loc 2 1548 0
 4832 003a 7B68     	 ldr r3,[r7,#4]
 4833 003c 181C     	 mov r0,r3
 4834 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   
1550:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4835              	 .loc 2 1551 0
 4836 0042 7B68     	 ldr r3,[r7,#4]
 4837 0044 8422     	 mov r2,#132
 4838 0046 9A58     	 ldr r2,[r3,r2]
 4839 0048 0B23     	 mov r3,#11
 4840 004a FB18     	 add r3,r7,r3
 4841 004c 1B78     	 ldrb r3,[r3]
 4842 004e 1B06     	 lsl r3,r3,#24
 4843 0050 1A43     	 orr r2,r3
 4844 0052 7B68     	 ldr r3,[r7,#4]
 4845 0054 8421     	 mov r1,#132
 4846 0056 5A50     	 str r2,[r3,r1]
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1555:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4847              	 .loc 2 1555 0
 4848 0058 FB68     	 ldr r3,[r7,#12]
 4849 005a 054A     	 ldr r2,.L210
 4850 005c 1A43     	 orr r2,r3
 4851 005e 111C     	 mov r1,r2
1554:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4852              	 .loc 2 1554 0
 4853 0060 7A68     	 ldr r2,[r7,#4]
 4854 0062 8023     	 mov r3,#128
 4855 0064 5B00     	 lsl r3,r3,#1
 4856 0066 D150     	 str r1,[r2,r3]
1556:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4857              	 .loc 2 1556 0
 4858 0068 BD46     	 mov sp,r7
 4859 006a 04B0     	 add sp,sp,#16
 4860              	 
 4861 006c 80BD     	 pop {r7,pc}
 4862              	.L211:
 4863 006e C046     	 .align 2
 4864              	.L210:
 4865 0070 00808080 	 .word -2139062272
 4866              	 .cfi_endproc
 4867              	.LFE213:
 4869              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 4870              	 .align 2
 4871              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 4872              	 .code 16
 4873              	 .thumb_func
 4875              	XMC_VADC_GROUP_QueueRemoveChannel:
 4876              	.LFB214:
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1559:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1560:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4877              	 .loc 2 1560 0
 4878              	 .cfi_startproc
 4879 0000 80B5     	 push {r7,lr}
 4880              	.LCFI193:
 4881              	 .cfi_def_cfa_offset 8
 4882              	 .cfi_offset 7,-8
 4883              	 .cfi_offset 14,-4
 4884 0002 86B0     	 sub sp,sp,#24
 4885              	.LCFI194:
 4886              	 .cfi_def_cfa_offset 32
 4887 0004 00AF     	 add r7,sp,#0
 4888              	.LCFI195:
 4889              	 .cfi_def_cfa_register 7
 4890 0006 7860     	 str r0,[r7,#4]
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1562:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1563:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1564:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1565:../Libraries/XMCLib/src/xmc_vadc.c **** 
1566:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1567:../Libraries/XMCLib/src/xmc_vadc.c ****   
1568:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1569:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 4891              	 .loc 2 1569 0
 4892 0008 7A68     	 ldr r2,[r7,#4]
 4893 000a 8023     	 mov r3,#128
 4894 000c 5B00     	 lsl r3,r3,#1
 4895 000e D358     	 ldr r3,[r2,r3]
 4896 0010 3B61     	 str r3,[r7,#16]
1570:../Libraries/XMCLib/src/xmc_vadc.c **** 
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4897              	 .loc 2 1571 0
 4898 0012 7A68     	 ldr r2,[r7,#4]
 4899 0014 8023     	 mov r3,#128
 4900 0016 5B00     	 lsl r3,r3,#1
 4901 0018 2649     	 ldr r1,.L216
 4902 001a D150     	 str r1,[r2,r3]
1572:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4903              	 .loc 2 1575 0
 4904 001c 7B68     	 ldr r3,[r7,#4]
 4905 001e 8422     	 mov r2,#132
 4906 0020 9B58     	 ldr r3,[r3,r2]
 4907 0022 1B0E     	 lsr r3,r3,#24
 4908 0024 0122     	 mov r2,#1
 4909 0026 1A40     	 and r2,r3
 4910 0028 0F23     	 mov r3,#15
 4911 002a FB18     	 add r3,r7,r3
 4912 002c 511E     	 sub r1,r2,#1
 4913 002e 8A41     	 sbc r2,r2,r1
 4914 0030 1A70     	 strb r2,[r3]
1576:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4915              	 .loc 2 1576 0
 4916 0032 7B68     	 ldr r3,[r7,#4]
 4917 0034 181C     	 mov r0,r3
 4918 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1577:../Libraries/XMCLib/src/xmc_vadc.c **** 
1578:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4919              	 .loc 2 1578 0
 4920 003a 7B68     	 ldr r3,[r7,#4]
 4921 003c 181C     	 mov r0,r3
 4922 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4923 0042 031C     	 mov r3,r0
 4924 0044 BB60     	 str r3,[r7,#8]
1579:../Libraries/XMCLib/src/xmc_vadc.c **** 
1580:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 4925              	 .loc 2 1580 0
 4926 0046 BB68     	 ldr r3,[r7,#8]
 4927 0048 002B     	 cmp r3,#0
 4928 004a 1CD0     	 beq .L213
1581:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1582:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1583:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4929              	 .loc 2 1583 0
 4930 004c 7A68     	 ldr r2,[r7,#4]
 4931 004e 8223     	 mov r3,#130
 4932 0050 5B00     	 lsl r3,r3,#1
 4933 0052 D358     	 ldr r3,[r2,r3]
 4934 0054 8022     	 mov r2,#128
 4935 0056 5200     	 lsl r2,r2,#1
 4936 0058 1A43     	 orr r2,r3
 4937 005a 111C     	 mov r1,r2
 4938 005c 7A68     	 ldr r2,[r7,#4]
 4939 005e 8223     	 mov r3,#130
 4940 0060 5B00     	 lsl r3,r3,#1
 4941 0062 D150     	 str r1,[r2,r3]
1584:../Libraries/XMCLib/src/xmc_vadc.c **** 
1585:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4942              	 .loc 2 1585 0
 4943 0064 7B68     	 ldr r3,[r7,#4]
 4944 0066 181C     	 mov r0,r3
 4945 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4946 006c 031C     	 mov r3,r0
 4947 006e 7B61     	 str r3,[r7,#20]
1586:../Libraries/XMCLib/src/xmc_vadc.c **** 
1587:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1588:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 4948              	 .loc 2 1588 0
 4949 0070 05E0     	 b .L214
 4950              	.L215:
1589:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1590:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4951              	 .loc 2 1590 0
 4952 0072 7B68     	 ldr r3,[r7,#4]
 4953 0074 181C     	 mov r0,r3
 4954 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4955 007a 031C     	 mov r3,r0
 4956 007c 7B61     	 str r3,[r7,#20]
 4957              	.L214:
1588:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4958              	 .loc 2 1588 0
 4959 007e 7A69     	 ldr r2,[r7,#20]
 4960 0080 BB68     	 ldr r3,[r7,#8]
 4961 0082 9A42     	 cmp r2,r3
 4962 0084 F5D0     	 beq .L215
 4963              	.L213:
1591:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1592:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1594:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4964              	 .loc 2 1594 0
 4965 0086 7B68     	 ldr r3,[r7,#4]
 4966 0088 8422     	 mov r2,#132
 4967 008a 9A58     	 ldr r2,[r3,r2]
 4968 008c 0F23     	 mov r3,#15
 4969 008e FB18     	 add r3,r7,r3
 4970 0090 1B78     	 ldrb r3,[r3]
 4971 0092 1B06     	 lsl r3,r3,#24
 4972 0094 1A43     	 orr r2,r3
 4973 0096 7B68     	 ldr r3,[r7,#4]
 4974 0098 8421     	 mov r1,#132
 4975 009a 5A50     	 str r2,[r3,r1]
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1598:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4976              	 .loc 2 1598 0
 4977 009c 3B69     	 ldr r3,[r7,#16]
 4978 009e 054A     	 ldr r2,.L216
 4979 00a0 1A43     	 orr r2,r3
 4980 00a2 111C     	 mov r1,r2
1597:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4981              	 .loc 2 1597 0
 4982 00a4 7A68     	 ldr r2,[r7,#4]
 4983 00a6 8023     	 mov r3,#128
 4984 00a8 5B00     	 lsl r3,r3,#1
 4985 00aa D150     	 str r1,[r2,r3]
1599:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4986              	 .loc 2 1599 0
 4987 00ac BD46     	 mov sp,r7
 4988 00ae 06B0     	 add sp,sp,#24
 4989              	 
 4990 00b0 80BD     	 pop {r7,pc}
 4991              	.L217:
 4992 00b2 C046     	 .align 2
 4993              	.L216:
 4994 00b4 00808080 	 .word -2139062272
 4995              	 .cfi_endproc
 4996              	.LFE214:
 4998              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 4999              	 .align 2
 5000              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 5001              	 .code 16
 5002              	 .thumb_func
 5004              	XMC_VADC_GROUP_QueueGetNextChannel:
 5005              	.LFB215:
1600:../Libraries/XMCLib/src/xmc_vadc.c **** 
1601:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1602:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1603:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5006              	 .loc 2 1603 0
 5007              	 .cfi_startproc
 5008 0000 80B5     	 push {r7,lr}
 5009              	.LCFI196:
 5010              	 .cfi_def_cfa_offset 8
 5011              	 .cfi_offset 7,-8
 5012              	 .cfi_offset 14,-4
 5013 0002 84B0     	 sub sp,sp,#16
 5014              	.LCFI197:
 5015              	 .cfi_def_cfa_offset 24
 5016 0004 00AF     	 add r7,sp,#0
 5017              	.LCFI198:
 5018              	 .cfi_def_cfa_register 7
 5019 0006 7860     	 str r0,[r7,#4]
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1605:../Libraries/XMCLib/src/xmc_vadc.c **** 
1606:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1607:../Libraries/XMCLib/src/xmc_vadc.c ****   
1608:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1609:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1610:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1611:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5020              	 .loc 2 1612 0
 5021 0008 7A68     	 ldr r2,[r7,#4]
 5022 000a 8823     	 mov r3,#136
 5023 000c 5B00     	 lsl r3,r3,#1
 5024 000e D258     	 ldr r2,[r2,r3]
 5025 0010 8023     	 mov r3,#128
 5026 0012 5B00     	 lsl r3,r3,#1
 5027 0014 1340     	 and r3,r2
 5028 0016 08D0     	 beq .L219
1613:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1614:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5029              	 .loc 2 1614 0
 5030 0018 7A68     	 ldr r2,[r7,#4]
 5031 001a 8823     	 mov r3,#136
 5032 001c 5B00     	 lsl r3,r3,#1
 5033 001e D358     	 ldr r3,[r2,r3]
 5034 0020 1A1C     	 mov r2,r3
 5035 0022 1F23     	 mov r3,#31
 5036 0024 1340     	 and r3,r2
 5037 0026 FB60     	 str r3,[r7,#12]
 5038 0028 13E0     	 b .L220
 5039              	.L219:
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1616:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 5040              	 .loc 2 1616 0
 5041 002a 7A68     	 ldr r2,[r7,#4]
 5042 002c 8623     	 mov r3,#134
 5043 002e 5B00     	 lsl r3,r3,#1
 5044 0030 D258     	 ldr r2,[r2,r3]
 5045 0032 8023     	 mov r3,#128
 5046 0034 5B00     	 lsl r3,r3,#1
 5047 0036 1340     	 and r3,r2
 5048 0038 08D0     	 beq .L221
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1618:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 5049              	 .loc 2 1618 0
 5050 003a 7A68     	 ldr r2,[r7,#4]
 5051 003c 8623     	 mov r3,#134
 5052 003e 5B00     	 lsl r3,r3,#1
 5053 0040 D358     	 ldr r3,[r2,r3]
 5054 0042 1A1C     	 mov r2,r3
 5055 0044 1F23     	 mov r3,#31
 5056 0046 1340     	 and r3,r2
 5057 0048 FB60     	 str r3,[r7,#12]
 5058 004a 02E0     	 b .L220
 5059              	.L221:
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1622:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1623:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5060              	 .loc 2 1623 0
 5061 004c 0123     	 mov r3,#1
 5062 004e 5B42     	 neg r3,r3
 5063 0050 FB60     	 str r3,[r7,#12]
 5064              	.L220:
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1625:../Libraries/XMCLib/src/xmc_vadc.c **** 
1626:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5065              	 .loc 2 1626 0
 5066 0052 FB68     	 ldr r3,[r7,#12]
1627:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5067              	 .loc 2 1627 0
 5068 0054 181C     	 mov r0,r3
 5069 0056 BD46     	 mov sp,r7
 5070 0058 04B0     	 add sp,sp,#16
 5071              	 
 5072 005a 80BD     	 pop {r7,pc}
 5073              	 .cfi_endproc
 5074              	.LFE215:
 5076              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 5077              	 .align 2
 5078              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 5079              	 .code 16
 5080              	 .thumb_func
 5082              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 5083              	.LFB216:
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1630:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1631:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5084              	 .loc 2 1631 0
 5085              	 .cfi_startproc
 5086 0000 80B5     	 push {r7,lr}
 5087              	.LCFI199:
 5088              	 .cfi_def_cfa_offset 8
 5089              	 .cfi_offset 7,-8
 5090              	 .cfi_offset 14,-4
 5091 0002 84B0     	 sub sp,sp,#16
 5092              	.LCFI200:
 5093              	 .cfi_def_cfa_offset 24
 5094 0004 00AF     	 add r7,sp,#0
 5095              	.LCFI201:
 5096              	 .cfi_def_cfa_register 7
 5097 0006 7860     	 str r0,[r7,#4]
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1633:../Libraries/XMCLib/src/xmc_vadc.c **** 
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   
1636:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5098              	 .loc 2 1636 0
 5099 0008 7A68     	 ldr r2,[r7,#4]
 5100 000a 8823     	 mov r3,#136
 5101 000c 5B00     	 lsl r3,r3,#1
 5102 000e D258     	 ldr r2,[r2,r3]
 5103 0010 8023     	 mov r3,#128
 5104 0012 5B00     	 lsl r3,r3,#1
 5105 0014 1340     	 and r3,r2
 5106 0016 08D0     	 beq .L224
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1638:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5107              	 .loc 2 1638 0
 5108 0018 7A68     	 ldr r2,[r7,#4]
 5109 001a 8823     	 mov r3,#136
 5110 001c 5B00     	 lsl r3,r3,#1
 5111 001e D358     	 ldr r3,[r2,r3]
 5112 0020 1A1C     	 mov r2,r3
 5113 0022 1F23     	 mov r3,#31
 5114 0024 1340     	 and r3,r2
 5115 0026 FB60     	 str r3,[r7,#12]
 5116 0028 02E0     	 b .L225
 5117              	.L224:
1639:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1641:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1642:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1643:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5118              	 .loc 2 1643 0
 5119 002a 0123     	 mov r3,#1
 5120 002c 5B42     	 neg r3,r3
 5121 002e FB60     	 str r3,[r7,#12]
 5122              	.L225:
1644:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1645:../Libraries/XMCLib/src/xmc_vadc.c **** 
1646:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5123              	 .loc 2 1646 0
 5124 0030 FB68     	 ldr r3,[r7,#12]
1647:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5125              	 .loc 2 1647 0
 5126 0032 181C     	 mov r0,r3
 5127 0034 BD46     	 mov sp,r7
 5128 0036 04B0     	 add sp,sp,#16
 5129              	 
 5130 0038 80BD     	 pop {r7,pc}
 5131              	 .cfi_endproc
 5132              	.LFE216:
 5134 003a C046     	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 5135              	 .align 2
 5136              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 5137              	 .code 16
 5138              	 .thumb_func
 5140              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 5141              	.LFB217:
1648:../Libraries/XMCLib/src/xmc_vadc.c **** 
1649:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1650:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1651:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5142              	 .loc 2 1651 0
 5143              	 .cfi_startproc
 5144 0000 80B5     	 push {r7,lr}
 5145              	.LCFI202:
 5146              	 .cfi_def_cfa_offset 8
 5147              	 .cfi_offset 7,-8
 5148              	 .cfi_offset 14,-4
 5149 0002 84B0     	 sub sp,sp,#16
 5150              	.LCFI203:
 5151              	 .cfi_def_cfa_offset 24
 5152 0004 00AF     	 add r7,sp,#0
 5153              	.LCFI204:
 5154              	 .cfi_def_cfa_register 7
 5155 0006 7860     	 str r0,[r7,#4]
 5156 0008 0A1C     	 mov r2,r1
 5157 000a FB1C     	 add r3,r7,#3
 5158 000c 1A70     	 strb r2,[r3]
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1653:../Libraries/XMCLib/src/xmc_vadc.c **** 
1654:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1656:../Libraries/XMCLib/src/xmc_vadc.c **** 
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5159              	 .loc 2 1657 0
 5160 000e 7A68     	 ldr r2,[r7,#4]
 5161 0010 E023     	 mov r3,#224
 5162 0012 5B00     	 lsl r3,r3,#1
 5163 0014 D358     	 ldr r3,[r2,r3]
 5164 0016 FB60     	 str r3,[r7,#12]
1658:../Libraries/XMCLib/src/xmc_vadc.c **** 
1659:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5165              	 .loc 2 1659 0
 5166 0018 FB68     	 ldr r3,[r7,#12]
 5167 001a 0F22     	 mov r2,#15
 5168 001c 9343     	 bic r3,r2
 5169 001e FB60     	 str r3,[r7,#12]
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5170              	 .loc 2 1660 0
 5171 0020 FB1C     	 add r3,r7,#3
 5172 0022 1B78     	 ldrb r3,[r3]
 5173 0024 FA68     	 ldr r2,[r7,#12]
 5174 0026 1343     	 orr r3,r2
 5175 0028 FB60     	 str r3,[r7,#12]
1661:../Libraries/XMCLib/src/xmc_vadc.c **** 
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5176              	 .loc 2 1662 0
 5177 002a 7A68     	 ldr r2,[r7,#4]
 5178 002c E023     	 mov r3,#224
 5179 002e 5B00     	 lsl r3,r3,#1
 5180 0030 F968     	 ldr r1,[r7,#12]
 5181 0032 D150     	 str r1,[r2,r3]
1663:../Libraries/XMCLib/src/xmc_vadc.c **** 
1664:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5182              	 .loc 2 1664 0
 5183 0034 BD46     	 mov sp,r7
 5184 0036 04B0     	 add sp,sp,#16
 5185              	 
 5186 0038 80BD     	 pop {r7,pc}
 5187              	 .cfi_endproc
 5188              	.LFE217:
 5190 003a C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5191              	 .align 2
 5192              	 .global XMC_VADC_GROUP_ChannelInit
 5193              	 .code 16
 5194              	 .thumb_func
 5196              	XMC_VADC_GROUP_ChannelInit:
 5197              	.LFB218:
1665:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1666:../Libraries/XMCLib/src/xmc_vadc.c **** 
1667:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1668:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1669:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1670:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1671:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5198              	 .loc 2 1671 0
 5199              	 .cfi_startproc
 5200 0000 80B5     	 push {r7,lr}
 5201              	.LCFI205:
 5202              	 .cfi_def_cfa_offset 8
 5203              	 .cfi_offset 7,-8
 5204              	 .cfi_offset 14,-4
 5205 0002 88B0     	 sub sp,sp,#32
 5206              	.LCFI206:
 5207              	 .cfi_def_cfa_offset 40
 5208 0004 00AF     	 add r7,sp,#0
 5209              	.LCFI207:
 5210              	 .cfi_def_cfa_register 7
 5211 0006 F860     	 str r0,[r7,#12]
 5212 0008 B960     	 str r1,[r7,#8]
 5213 000a 7A60     	 str r2,[r7,#4]
1672:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1673:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1674:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1675:../Libraries/XMCLib/src/xmc_vadc.c **** 
1676:../Libraries/XMCLib/src/xmc_vadc.c **** 
1677:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1678:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1679:../Libraries/XMCLib/src/xmc_vadc.c ****   
1680:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5214              	 .loc 2 1680 0
 5215 000c 7B68     	 ldr r3,[r7,#4]
 5216 000e 1B7B     	 ldrb r3,[r3,#12]
 5217 0010 BB61     	 str r3,[r7,#24]
1681:../Libraries/XMCLib/src/xmc_vadc.c **** 
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1683:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5218              	 .loc 2 1683 0
 5219 0012 FB68     	 ldr r3,[r7,#12]
 5220 0014 8822     	 mov r2,#136
 5221 0016 9B58     	 ldr r3,[r3,r2]
 5222 0018 7B61     	 str r3,[r7,#20]
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5223              	 .loc 2 1684 0
 5224 001a BB68     	 ldr r3,[r7,#8]
 5225 001c 0122     	 mov r2,#1
 5226 001e 9A40     	 lsl r2,r2,r3
 5227 0020 131C     	 mov r3,r2
 5228 0022 DA43     	 mvn r2,r3
 5229 0024 7B69     	 ldr r3,[r7,#20]
 5230 0026 1340     	 and r3,r2
 5231 0028 7B61     	 str r3,[r7,#20]
1685:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5232              	 .loc 2 1685 0
 5233 002a BB68     	 ldr r3,[r7,#8]
 5234 002c BA69     	 ldr r2,[r7,#24]
 5235 002e 9A40     	 lsl r2,r2,r3
 5236 0030 131C     	 mov r3,r2
 5237 0032 7A69     	 ldr r2,[r7,#20]
 5238 0034 1343     	 orr r3,r2
 5239 0036 7B61     	 str r3,[r7,#20]
1686:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5240              	 .loc 2 1686 0
 5241 0038 FB68     	 ldr r3,[r7,#12]
 5242 003a 8821     	 mov r1,#136
 5243 003c 7A69     	 ldr r2,[r7,#20]
 5244 003e 5A50     	 str r2,[r3,r1]
1687:../Libraries/XMCLib/src/xmc_vadc.c **** 
1688:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5245              	 .loc 2 1689 0
 5246 0040 7B68     	 ldr r3,[r7,#4]
 5247 0042 5B7B     	 ldrb r3,[r3,#13]
 5248 0044 5BB2     	 sxtb r3,r3
 5249 0046 002B     	 cmp r3,#0
 5250 0048 2ADB     	 blt .L229
1690:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1691:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5251              	 .loc 2 1691 0
 5252 004a 0023     	 mov r3,#0
 5253 004c FB61     	 str r3,[r7,#28]
1692:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5254              	 .loc 2 1692 0
 5255 004e BB68     	 ldr r3,[r7,#8]
 5256 0050 012B     	 cmp r3,#1
 5257 0052 0AD1     	 bne .L230
1693:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1694:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5258              	 .loc 2 1694 0
 5259 0054 0823     	 mov r3,#8
 5260 0056 FB61     	 str r3,[r7,#28]
1695:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5261              	 .loc 2 1695 0
 5262 0058 FB68     	 ldr r3,[r7,#12]
 5263 005a B022     	 mov r2,#176
 5264 005c 9B58     	 ldr r3,[r3,r2]
 5265 005e 1E4A     	 ldr r2,.L232
 5266 0060 1A40     	 and r2,r3
 5267 0062 FB68     	 ldr r3,[r7,#12]
 5268 0064 B021     	 mov r1,#176
 5269 0066 5A50     	 str r2,[r3,r1]
 5270 0068 0DE0     	 b .L231
 5271              	.L230:
1696:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1697:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5272              	 .loc 2 1697 0
 5273 006a BB68     	 ldr r3,[r7,#8]
 5274 006c 002B     	 cmp r3,#0
 5275 006e 0AD1     	 bne .L231
1698:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1699:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5276              	 .loc 2 1699 0
 5277 0070 0023     	 mov r3,#0
 5278 0072 FB61     	 str r3,[r7,#28]
1700:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5279              	 .loc 2 1700 0
 5280 0074 FB68     	 ldr r3,[r7,#12]
 5281 0076 B022     	 mov r2,#176
 5282 0078 9B58     	 ldr r3,[r3,r2]
 5283 007a 1F22     	 mov r2,#31
 5284 007c 9343     	 bic r3,r2
 5285 007e 1A1C     	 mov r2,r3
 5286 0080 FB68     	 ldr r3,[r7,#12]
 5287 0082 B021     	 mov r1,#176
 5288 0084 5A50     	 str r2,[r3,r1]
 5289              	.L231:
1701:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1702:../Libraries/XMCLib/src/xmc_vadc.c **** 
1703:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5290              	 .loc 2 1703 0
 5291 0086 FB68     	 ldr r3,[r7,#12]
 5292 0088 B022     	 mov r2,#176
 5293 008a 9B58     	 ldr r3,[r3,r2]
 5294 008c 7A68     	 ldr r2,[r7,#4]
 5295 008e 527B     	 ldrb r2,[r2,#13]
 5296 0090 51B2     	 sxtb r1,r2
 5297 0092 FA69     	 ldr r2,[r7,#28]
 5298 0094 9140     	 lsl r1,r1,r2
 5299 0096 0A1C     	 mov r2,r1
 5300 0098 1A43     	 orr r2,r3
 5301 009a FB68     	 ldr r3,[r7,#12]
 5302 009c B021     	 mov r1,#176
 5303 009e 5A50     	 str r2,[r3,r1]
 5304              	.L229:
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1705:../Libraries/XMCLib/src/xmc_vadc.c **** 
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5305              	 .loc 2 1706 0
 5306 00a0 FB68     	 ldr r3,[r7,#12]
 5307 00a2 C822     	 mov r2,#200
 5308 00a4 9A58     	 ldr r2,[r3,r2]
 5309 00a6 7B68     	 ldr r3,[r7,#4]
 5310 00a8 5B68     	 ldr r3,[r3,#4]
 5311 00aa 1A43     	 orr r2,r3
 5312 00ac FB68     	 ldr r3,[r7,#12]
 5313 00ae C821     	 mov r1,#200
 5314 00b0 5A50     	 str r2,[r3,r1]
1707:../Libraries/XMCLib/src/xmc_vadc.c **** 
1708:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5315              	 .loc 2 1709 0
 5316 00b2 FB68     	 ldr r3,[r7,#12]
 5317 00b4 D022     	 mov r2,#208
 5318 00b6 9A58     	 ldr r2,[r3,r2]
 5319 00b8 7B68     	 ldr r3,[r7,#4]
 5320 00ba 9B68     	 ldr r3,[r3,#8]
 5321 00bc 1A43     	 orr r2,r3
 5322 00be FB68     	 ldr r3,[r7,#12]
 5323 00c0 D021     	 mov r1,#208
 5324 00c2 5A50     	 str r2,[r3,r1]
1710:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1711:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5325              	 .loc 2 1712 0
 5326 00c4 7B68     	 ldr r3,[r7,#4]
 5327 00c6 1968     	 ldr r1,[r3]
 5328 00c8 FB68     	 ldr r3,[r7,#12]
 5329 00ca BA68     	 ldr r2,[r7,#8]
 5330 00cc 8032     	 add r2,r2,#128
 5331 00ce 9200     	 lsl r2,r2,#2
 5332 00d0 D150     	 str r1,[r2,r3]
1713:../Libraries/XMCLib/src/xmc_vadc.c **** 
1714:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5333              	 .loc 2 1714 0
 5334 00d2 BD46     	 mov sp,r7
 5335 00d4 08B0     	 add sp,sp,#32
 5336              	 
 5337 00d6 80BD     	 pop {r7,pc}
 5338              	.L233:
 5339              	 .align 2
 5340              	.L232:
 5341 00d8 FFE0FFFF 	 .word -7937
 5342              	 .cfi_endproc
 5343              	.LFE218:
 5345              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 5346              	 .align 2
 5347              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 5348              	 .code 16
 5349              	 .thumb_func
 5351              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 5352              	.LFB219:
1715:../Libraries/XMCLib/src/xmc_vadc.c **** 
1716:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1717:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1718:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5353              	 .loc 2 1718 0
 5354              	 .cfi_startproc
 5355 0000 80B5     	 push {r7,lr}
 5356              	.LCFI208:
 5357              	 .cfi_def_cfa_offset 8
 5358              	 .cfi_offset 7,-8
 5359              	 .cfi_offset 14,-4
 5360 0002 86B0     	 sub sp,sp,#24
 5361              	.LCFI209:
 5362              	 .cfi_def_cfa_offset 32
 5363 0004 00AF     	 add r7,sp,#0
 5364              	.LCFI210:
 5365              	 .cfi_def_cfa_register 7
 5366 0006 7860     	 str r0,[r7,#4]
 5367 0008 3960     	 str r1,[r7]
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1721:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1722:../Libraries/XMCLib/src/xmc_vadc.c **** 
1723:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1725:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1726:../Libraries/XMCLib/src/xmc_vadc.c **** 
1727:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 5368              	 .loc 2 1727 0
 5369 000a 1723     	 mov r3,#23
 5370 000c FB18     	 add r3,r7,r3
 5371 000e 0022     	 mov r2,#0
 5372 0010 1A70     	 strb r2,[r3]
1728:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1729:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1730:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1731:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5373              	 .loc 2 1733 0
 5374 0012 7B68     	 ldr r3,[r7,#4]
 5375 0014 3A68     	 ldr r2,[r7]
 5376 0016 8032     	 add r2,r2,#128
 5377 0018 9200     	 lsl r2,r2,#2
 5378 001a D358     	 ldr r3,[r2,r3]
 5379 001c 3B61     	 str r3,[r7,#16]
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 5380              	 .loc 2 1734 0
 5381 001e 3B69     	 ldr r3,[r7,#16]
 5382 0020 1B0A     	 lsr r3,r3,#8
 5383 0022 0322     	 mov r2,#3
 5384 0024 1340     	 and r3,r2
 5385 0026 3B61     	 str r3,[r7,#16]
1735:../Libraries/XMCLib/src/xmc_vadc.c **** 
1736:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 5386              	 .loc 2 1737 0
 5387 0028 7A68     	 ldr r2,[r7,#4]
 5388 002a C023     	 mov r3,#192
 5389 002c 5B00     	 lsl r3,r3,#1
 5390 002e D358     	 ldr r3,[r2,r3]
 5391 0030 FB60     	 str r3,[r7,#12]
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 5392              	 .loc 2 1738 0
 5393 0032 3B68     	 ldr r3,[r7]
 5394 0034 0122     	 mov r2,#1
 5395 0036 9A40     	 lsl r2,r2,r3
 5396 0038 FB68     	 ldr r3,[r7,#12]
 5397 003a 1340     	 and r3,r2
 5398 003c FB60     	 str r3,[r7,#12]
1739:../Libraries/XMCLib/src/xmc_vadc.c **** 
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 5399              	 .loc 2 1741 0
 5400 003e 3B69     	 ldr r3,[r7,#16]
 5401 0040 012B     	 cmp r3,#1
 5402 0042 02D0     	 beq .L235
1742:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 5403              	 .loc 2 1742 0
 5404 0044 3B69     	 ldr r3,[r7,#16]
 5405 0046 022B     	 cmp r3,#2
 5406 0048 06D1     	 bne .L236
 5407              	.L235:
 5408              	 .loc 2 1742 0 is_stmt 0 discriminator 1
 5409 004a FB68     	 ldr r3,[r7,#12]
 5410 004c 002B     	 cmp r3,#0
 5411 004e 03D0     	 beq .L236
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1744:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 5412              	 .loc 2 1744 0 is_stmt 1
 5413 0050 1723     	 mov r3,#23
 5414 0052 FB18     	 add r3,r7,r3
 5415 0054 0122     	 mov r2,#1
 5416 0056 1A70     	 strb r2,[r3]
 5417              	.L236:
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1746:../Libraries/XMCLib/src/xmc_vadc.c **** 
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 5418              	 .loc 2 1747 0
 5419 0058 1723     	 mov r3,#23
 5420 005a FB18     	 add r3,r7,r3
 5421 005c 1B78     	 ldrb r3,[r3]
1748:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5422              	 .loc 2 1748 0
 5423 005e 181C     	 mov r0,r3
 5424 0060 BD46     	 mov sp,r7
 5425 0062 06B0     	 add sp,sp,#24
 5426              	 
 5427 0064 80BD     	 pop {r7,pc}
 5428              	 .cfi_endproc
 5429              	.LFE219:
 5431 0066 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 5432              	 .align 2
 5433              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 5434              	 .code 16
 5435              	 .thumb_func
 5437              	XMC_VADC_GROUP_ChannelSetInputReference:
 5438              	.LFB220:
1749:../Libraries/XMCLib/src/xmc_vadc.c **** 
1750:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1751:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1752:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1753:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1754:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5439              	 .loc 2 1754 0
 5440              	 .cfi_startproc
 5441 0000 80B5     	 push {r7,lr}
 5442              	.LCFI211:
 5443              	 .cfi_def_cfa_offset 8
 5444              	 .cfi_offset 7,-8
 5445              	 .cfi_offset 14,-4
 5446 0002 86B0     	 sub sp,sp,#24
 5447              	.LCFI212:
 5448              	 .cfi_def_cfa_offset 32
 5449 0004 00AF     	 add r7,sp,#0
 5450              	.LCFI213:
 5451              	 .cfi_def_cfa_register 7
 5452 0006 F860     	 str r0,[r7,#12]
 5453 0008 B960     	 str r1,[r7,#8]
 5454 000a FB1D     	 add r3,r7,#7
 5455 000c 1A70     	 strb r2,[r3]
1755:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1757:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1758:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1759:../Libraries/XMCLib/src/xmc_vadc.c **** 
1760:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5456              	 .loc 2 1760 0
 5457 000e FB68     	 ldr r3,[r7,#12]
 5458 0010 BA68     	 ldr r2,[r7,#8]
 5459 0012 8032     	 add r2,r2,#128
 5460 0014 9200     	 lsl r2,r2,#2
 5461 0016 D358     	 ldr r3,[r2,r3]
 5462 0018 7B61     	 str r3,[r7,#20]
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 5463              	 .loc 2 1761 0
 5464 001a 7B69     	 ldr r3,[r7,#20]
 5465 001c 084A     	 ldr r2,.L239
 5466 001e 1340     	 and r3,r2
 5467 0020 7B61     	 str r3,[r7,#20]
1762:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 5468              	 .loc 2 1762 0
 5469 0022 FB1D     	 add r3,r7,#7
 5470 0024 1B78     	 ldrb r3,[r3]
 5471 0026 DB02     	 lsl r3,r3,#11
 5472 0028 7A69     	 ldr r2,[r7,#20]
 5473 002a 1343     	 orr r3,r2
 5474 002c 7B61     	 str r3,[r7,#20]
1763:../Libraries/XMCLib/src/xmc_vadc.c **** 
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5475              	 .loc 2 1764 0
 5476 002e FB68     	 ldr r3,[r7,#12]
 5477 0030 BA68     	 ldr r2,[r7,#8]
 5478 0032 8032     	 add r2,r2,#128
 5479 0034 9200     	 lsl r2,r2,#2
 5480 0036 7969     	 ldr r1,[r7,#20]
 5481 0038 D150     	 str r1,[r2,r3]
1765:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5482              	 .loc 2 1765 0
 5483 003a BD46     	 mov sp,r7
 5484 003c 06B0     	 add sp,sp,#24
 5485              	 
 5486 003e 80BD     	 pop {r7,pc}
 5487              	.L240:
 5488              	 .align 2
 5489              	.L239:
 5490 0040 FFF7FFFF 	 .word -2049
 5491              	 .cfi_endproc
 5492              	.LFE220:
 5494              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 5495              	 .align 2
 5496              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 5497              	 .code 16
 5498              	 .thumb_func
 5500              	XMC_VADC_GROUP_ChannelSetResultRegister:
 5501              	.LFB221:
1766:../Libraries/XMCLib/src/xmc_vadc.c **** 
1767:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1768:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1769:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1770:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1771:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5502              	 .loc 2 1771 0
 5503              	 .cfi_startproc
 5504 0000 80B5     	 push {r7,lr}
 5505              	.LCFI214:
 5506              	 .cfi_def_cfa_offset 8
 5507              	 .cfi_offset 7,-8
 5508              	 .cfi_offset 14,-4
 5509 0002 86B0     	 sub sp,sp,#24
 5510              	.LCFI215:
 5511              	 .cfi_def_cfa_offset 32
 5512 0004 00AF     	 add r7,sp,#0
 5513              	.LCFI216:
 5514              	 .cfi_def_cfa_register 7
 5515 0006 F860     	 str r0,[r7,#12]
 5516 0008 B960     	 str r1,[r7,#8]
 5517 000a 7A60     	 str r2,[r7,#4]
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1773:../Libraries/XMCLib/src/xmc_vadc.c **** 
1774:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1775:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1776:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1777:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1778:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1779:../Libraries/XMCLib/src/xmc_vadc.c **** 
1780:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5518              	 .loc 2 1780 0
 5519 000c FB68     	 ldr r3,[r7,#12]
 5520 000e BA68     	 ldr r2,[r7,#8]
 5521 0010 8032     	 add r2,r2,#128
 5522 0012 9200     	 lsl r2,r2,#2
 5523 0014 D358     	 ldr r3,[r2,r3]
 5524 0016 7B61     	 str r3,[r7,#20]
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 5525              	 .loc 2 1781 0
 5526 0018 7B69     	 ldr r3,[r7,#20]
 5527 001a 084A     	 ldr r2,.L242
 5528 001c 1340     	 and r3,r2
 5529 001e 7B61     	 str r3,[r7,#20]
1782:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 5530              	 .loc 2 1782 0
 5531 0020 7B68     	 ldr r3,[r7,#4]
 5532 0022 1B04     	 lsl r3,r3,#16
 5533 0024 7A69     	 ldr r2,[r7,#20]
 5534 0026 1343     	 orr r3,r2
 5535 0028 7B61     	 str r3,[r7,#20]
1783:../Libraries/XMCLib/src/xmc_vadc.c **** 
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5536              	 .loc 2 1784 0
 5537 002a FB68     	 ldr r3,[r7,#12]
 5538 002c BA68     	 ldr r2,[r7,#8]
 5539 002e 8032     	 add r2,r2,#128
 5540 0030 9200     	 lsl r2,r2,#2
 5541 0032 7969     	 ldr r1,[r7,#20]
 5542 0034 D150     	 str r1,[r2,r3]
1785:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5543              	 .loc 2 1785 0
 5544 0036 BD46     	 mov sp,r7
 5545 0038 06B0     	 add sp,sp,#24
 5546              	 
 5547 003a 80BD     	 pop {r7,pc}
 5548              	.L243:
 5549              	 .align 2
 5550              	.L242:
 5551 003c FFFFF0FF 	 .word -983041
 5552              	 .cfi_endproc
 5553              	.LFE221:
 5555              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 5556              	 .align 2
 5557              	 .global XMC_VADC_GROUP_ChannelSetIclass
 5558              	 .code 16
 5559              	 .thumb_func
 5561              	XMC_VADC_GROUP_ChannelSetIclass:
 5562              	.LFB222:
1786:../Libraries/XMCLib/src/xmc_vadc.c **** 
1787:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1788:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1789:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1790:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1791:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5563              	 .loc 2 1791 0
 5564              	 .cfi_startproc
 5565 0000 80B5     	 push {r7,lr}
 5566              	.LCFI217:
 5567              	 .cfi_def_cfa_offset 8
 5568              	 .cfi_offset 7,-8
 5569              	 .cfi_offset 14,-4
 5570 0002 86B0     	 sub sp,sp,#24
 5571              	.LCFI218:
 5572              	 .cfi_def_cfa_offset 32
 5573 0004 00AF     	 add r7,sp,#0
 5574              	.LCFI219:
 5575              	 .cfi_def_cfa_register 7
 5576 0006 F860     	 str r0,[r7,#12]
 5577 0008 B960     	 str r1,[r7,#8]
 5578 000a FB1D     	 add r3,r7,#7
 5579 000c 1A70     	 strb r2,[r3]
1792:../Libraries/XMCLib/src/xmc_vadc.c **** 
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1794:../Libraries/XMCLib/src/xmc_vadc.c **** 
1795:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1796:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1797:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1799:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1800:../Libraries/XMCLib/src/xmc_vadc.c **** 
1801:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5580              	 .loc 2 1801 0
 5581 000e FB68     	 ldr r3,[r7,#12]
 5582 0010 BA68     	 ldr r2,[r7,#8]
 5583 0012 8032     	 add r2,r2,#128
 5584 0014 9200     	 lsl r2,r2,#2
 5585 0016 D358     	 ldr r3,[r2,r3]
 5586 0018 7B61     	 str r3,[r7,#20]
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 5587              	 .loc 2 1802 0
 5588 001a 7B69     	 ldr r3,[r7,#20]
 5589 001c 0322     	 mov r2,#3
 5590 001e 9343     	 bic r3,r2
 5591 0020 7B61     	 str r3,[r7,#20]
1803:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 5592              	 .loc 2 1803 0
 5593 0022 FB1D     	 add r3,r7,#7
 5594 0024 1B78     	 ldrb r3,[r3]
 5595 0026 7A69     	 ldr r2,[r7,#20]
 5596 0028 1343     	 orr r3,r2
 5597 002a 7B61     	 str r3,[r7,#20]
1804:../Libraries/XMCLib/src/xmc_vadc.c **** 
1805:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5598              	 .loc 2 1805 0
 5599 002c FB68     	 ldr r3,[r7,#12]
 5600 002e BA68     	 ldr r2,[r7,#8]
 5601 0030 8032     	 add r2,r2,#128
 5602 0032 9200     	 lsl r2,r2,#2
 5603 0034 7969     	 ldr r1,[r7,#20]
 5604 0036 D150     	 str r1,[r2,r3]
1806:../Libraries/XMCLib/src/xmc_vadc.c **** 
1807:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5605              	 .loc 2 1807 0
 5606 0038 BD46     	 mov sp,r7
 5607 003a 06B0     	 add sp,sp,#24
 5608              	 
 5609 003c 80BD     	 pop {r7,pc}
 5610              	 .cfi_endproc
 5611              	.LFE222:
 5613 003e C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 5614              	 .align 2
 5615              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 5616              	 .code 16
 5617              	 .thumb_func
 5619              	XMC_VADC_GROUP_ChannelGetResultRegister:
 5620              	.LFB223:
1808:../Libraries/XMCLib/src/xmc_vadc.c **** 
1809:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1810:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1811:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5621              	 .loc 2 1811 0
 5622              	 .cfi_startproc
 5623 0000 80B5     	 push {r7,lr}
 5624              	.LCFI220:
 5625              	 .cfi_def_cfa_offset 8
 5626              	 .cfi_offset 7,-8
 5627              	 .cfi_offset 14,-4
 5628 0002 84B0     	 sub sp,sp,#16
 5629              	.LCFI221:
 5630              	 .cfi_def_cfa_offset 24
 5631 0004 00AF     	 add r7,sp,#0
 5632              	.LCFI222:
 5633              	 .cfi_def_cfa_register 7
 5634 0006 7860     	 str r0,[r7,#4]
 5635 0008 3960     	 str r1,[r7]
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1813:../Libraries/XMCLib/src/xmc_vadc.c **** 
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1815:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1816:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 5636              	 .loc 2 1818 0
 5637 000a 7B68     	 ldr r3,[r7,#4]
 5638 000c 3A68     	 ldr r2,[r7]
 5639 000e 8032     	 add r2,r2,#128
 5640 0010 9200     	 lsl r2,r2,#2
 5641 0012 D258     	 ldr r2,[r2,r3]
 5642 0014 F023     	 mov r3,#240
 5643 0016 1B03     	 lsl r3,r3,#12
 5644 0018 1340     	 and r3,r2
 5645 001a 1A0C     	 lsr r2,r3,#16
 5646 001c 0F23     	 mov r3,#15
 5647 001e FB18     	 add r3,r7,r3
 5648 0020 1A70     	 strb r2,[r3]
1819:../Libraries/XMCLib/src/xmc_vadc.c **** 
1820:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 5649              	 .loc 2 1820 0
 5650 0022 0F23     	 mov r3,#15
 5651 0024 FB18     	 add r3,r7,r3
 5652 0026 1B78     	 ldrb r3,[r3]
1821:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5653              	 .loc 2 1821 0
 5654 0028 181C     	 mov r0,r3
 5655 002a BD46     	 mov sp,r7
 5656 002c 04B0     	 add sp,sp,#16
 5657              	 
 5658 002e 80BD     	 pop {r7,pc}
 5659              	 .cfi_endproc
 5660              	.LFE223:
 5662              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 5663              	 .align 2
 5664              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 5665              	 .code 16
 5666              	 .thumb_func
 5668              	XMC_VADC_GROUP_ChannelTriggerEvent:
 5669              	.LFB224:
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1824:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1825:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5670              	 .loc 2 1825 0
 5671              	 .cfi_startproc
 5672 0000 80B5     	 push {r7,lr}
 5673              	.LCFI223:
 5674              	 .cfi_def_cfa_offset 8
 5675              	 .cfi_offset 7,-8
 5676              	 .cfi_offset 14,-4
 5677 0002 84B0     	 sub sp,sp,#16
 5678              	.LCFI224:
 5679              	 .cfi_def_cfa_offset 24
 5680 0004 00AF     	 add r7,sp,#0
 5681              	.LCFI225:
 5682              	 .cfi_def_cfa_register 7
 5683 0006 7860     	 str r0,[r7,#4]
 5684 0008 3960     	 str r1,[r7]
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1827:../Libraries/XMCLib/src/xmc_vadc.c **** 
1828:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1830:../Libraries/XMCLib/src/xmc_vadc.c **** 
1831:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 5685              	 .loc 2 1831 0
 5686 000a 7A68     	 ldr r2,[r7,#4]
 5687 000c C023     	 mov r3,#192
 5688 000e 5B00     	 lsl r3,r3,#1
 5689 0010 D358     	 ldr r3,[r2,r3]
 5690 0012 FB60     	 str r3,[r7,#12]
1832:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 5691              	 .loc 2 1832 0
 5692 0014 3B68     	 ldr r3,[r7]
 5693 0016 0122     	 mov r2,#1
 5694 0018 9A40     	 lsl r2,r2,r3
 5695 001a 131C     	 mov r3,r2
 5696 001c FA68     	 ldr r2,[r7,#12]
 5697 001e 1343     	 orr r3,r2
 5698 0020 FB60     	 str r3,[r7,#12]
1833:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 5699              	 .loc 2 1833 0
 5700 0022 7A68     	 ldr r2,[r7,#4]
 5701 0024 C023     	 mov r3,#192
 5702 0026 5B00     	 lsl r3,r3,#1
 5703 0028 F968     	 ldr r1,[r7,#12]
 5704 002a D150     	 str r1,[r2,r3]
1834:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5705              	 .loc 2 1834 0
 5706 002c BD46     	 mov sp,r7
 5707 002e 04B0     	 add sp,sp,#16
 5708              	 
 5709 0030 80BD     	 pop {r7,pc}
 5710              	 .cfi_endproc
 5711              	.LFE224:
 5713 0032 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 5714              	 .align 2
 5715              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 5716              	 .code 16
 5717              	 .thumb_func
 5719              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 5720              	.LFB225:
1835:../Libraries/XMCLib/src/xmc_vadc.c **** 
1836:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1837:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1838:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1839:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1840:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5721              	 .loc 2 1840 0
 5722              	 .cfi_startproc
 5723 0000 80B5     	 push {r7,lr}
 5724              	.LCFI226:
 5725              	 .cfi_def_cfa_offset 8
 5726              	 .cfi_offset 7,-8
 5727              	 .cfi_offset 14,-4
 5728 0002 86B0     	 sub sp,sp,#24
 5729              	.LCFI227:
 5730              	 .cfi_def_cfa_offset 32
 5731 0004 00AF     	 add r7,sp,#0
 5732              	.LCFI228:
 5733              	 .cfi_def_cfa_register 7
 5734 0006 F860     	 str r0,[r7,#12]
 5735 0008 B960     	 str r1,[r7,#8]
 5736 000a FB1D     	 add r3,r7,#7
 5737 000c 1A70     	 strb r2,[r3]
1841:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1842:../Libraries/XMCLib/src/xmc_vadc.c **** 
1843:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1845:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1846:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1847:../Libraries/XMCLib/src/xmc_vadc.c **** 
1848:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 5738              	 .loc 2 1848 0
 5739 000e FA68     	 ldr r2,[r7,#12]
 5740 0010 D023     	 mov r3,#208
 5741 0012 5B00     	 lsl r3,r3,#1
 5742 0014 D358     	 ldr r3,[r2,r3]
 5743 0016 7B61     	 str r3,[r7,#20]
1849:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 5744              	 .loc 2 1849 0
 5745 0018 BB68     	 ldr r3,[r7,#8]
 5746 001a 9B00     	 lsl r3,r3,#2
 5747 001c 1A1C     	 mov r2,r3
 5748 001e 0F23     	 mov r3,#15
 5749 0020 9340     	 lsl r3,r3,r2
 5750 0022 DA43     	 mvn r2,r3
 5751 0024 7B69     	 ldr r3,[r7,#20]
 5752 0026 1340     	 and r3,r2
 5753 0028 7B61     	 str r3,[r7,#20]
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 5754              	 .loc 2 1850 0
 5755 002a FB1D     	 add r3,r7,#7
 5756 002c 1B78     	 ldrb r3,[r3]
 5757 002e BA68     	 ldr r2,[r7,#8]
 5758 0030 9200     	 lsl r2,r2,#2
 5759 0032 9340     	 lsl r3,r3,r2
 5760 0034 7A69     	 ldr r2,[r7,#20]
 5761 0036 1343     	 orr r3,r2
 5762 0038 7B61     	 str r3,[r7,#20]
1851:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 5763              	 .loc 2 1851 0
 5764 003a FA68     	 ldr r2,[r7,#12]
 5765 003c D023     	 mov r3,#208
 5766 003e 5B00     	 lsl r3,r3,#1
 5767 0040 7969     	 ldr r1,[r7,#20]
 5768 0042 D150     	 str r1,[r2,r3]
1852:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5769              	 .loc 2 1852 0
 5770 0044 BD46     	 mov sp,r7
 5771 0046 06B0     	 add sp,sp,#24
 5772              	 
 5773 0048 80BD     	 pop {r7,pc}
 5774              	 .cfi_endproc
 5775              	.LFE225:
 5777 004a C046     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 5778              	 .align 2
 5779              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 5780              	 .code 16
 5781              	 .thumb_func
 5783              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 5784              	.LFB226:
1853:../Libraries/XMCLib/src/xmc_vadc.c **** 
1854:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1855:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1856:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1857:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1858:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5785              	 .loc 2 1858 0
 5786              	 .cfi_startproc
 5787 0000 80B5     	 push {r7,lr}
 5788              	.LCFI229:
 5789              	 .cfi_def_cfa_offset 8
 5790              	 .cfi_offset 7,-8
 5791              	 .cfi_offset 14,-4
 5792 0002 86B0     	 sub sp,sp,#24
 5793              	.LCFI230:
 5794              	 .cfi_def_cfa_offset 32
 5795 0004 00AF     	 add r7,sp,#0
 5796              	.LCFI231:
 5797              	 .cfi_def_cfa_register 7
 5798 0006 F860     	 str r0,[r7,#12]
 5799 0008 B960     	 str r1,[r7,#8]
 5800 000a FB1D     	 add r3,r7,#7
 5801 000c 1A70     	 strb r2,[r3]
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1860:../Libraries/XMCLib/src/xmc_vadc.c **** 
1861:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1862:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1863:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1864:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1865:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1866:../Libraries/XMCLib/src/xmc_vadc.c **** 
1867:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5802              	 .loc 2 1867 0
 5803 000e FB68     	 ldr r3,[r7,#12]
 5804 0010 BA68     	 ldr r2,[r7,#8]
 5805 0012 8032     	 add r2,r2,#128
 5806 0014 9200     	 lsl r2,r2,#2
 5807 0016 D358     	 ldr r3,[r2,r3]
 5808 0018 7B61     	 str r3,[r7,#20]
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 5809              	 .loc 2 1868 0
 5810 001a 7B69     	 ldr r3,[r7,#20]
 5811 001c 084A     	 ldr r2,.L250
 5812 001e 1340     	 and r3,r2
 5813 0020 7B61     	 str r3,[r7,#20]
1869:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 5814              	 .loc 2 1869 0
 5815 0022 FB1D     	 add r3,r7,#7
 5816 0024 1B78     	 ldrb r3,[r3]
 5817 0026 1B02     	 lsl r3,r3,#8
 5818 0028 7A69     	 ldr r2,[r7,#20]
 5819 002a 1343     	 orr r3,r2
 5820 002c 7B61     	 str r3,[r7,#20]
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5821              	 .loc 2 1870 0
 5822 002e FB68     	 ldr r3,[r7,#12]
 5823 0030 BA68     	 ldr r2,[r7,#8]
 5824 0032 8032     	 add r2,r2,#128
 5825 0034 9200     	 lsl r2,r2,#2
 5826 0036 7969     	 ldr r1,[r7,#20]
 5827 0038 D150     	 str r1,[r2,r3]
1871:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5828              	 .loc 2 1871 0
 5829 003a BD46     	 mov sp,r7
 5830 003c 06B0     	 add sp,sp,#24
 5831              	 
 5832 003e 80BD     	 pop {r7,pc}
 5833              	.L251:
 5834              	 .align 2
 5835              	.L250:
 5836 0040 FFFCFFFF 	 .word -769
 5837              	 .cfi_endproc
 5838              	.LFE226:
 5840              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 5841              	 .align 2
 5842              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 5843              	 .code 16
 5844              	 .thumb_func
 5846              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5847              	.LFB227:
1872:../Libraries/XMCLib/src/xmc_vadc.c **** 
1873:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1874:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1875:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1876:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1877:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1878:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5848              	 .loc 2 1878 0
 5849              	 .cfi_startproc
 5850 0000 80B5     	 push {r7,lr}
 5851              	.LCFI232:
 5852              	 .cfi_def_cfa_offset 8
 5853              	 .cfi_offset 7,-8
 5854              	 .cfi_offset 14,-4
 5855 0002 84B0     	 sub sp,sp,#16
 5856              	.LCFI233:
 5857              	 .cfi_def_cfa_offset 24
 5858 0004 00AF     	 add r7,sp,#0
 5859              	.LCFI234:
 5860              	 .cfi_def_cfa_register 7
 5861 0006 F860     	 str r0,[r7,#12]
 5862 0008 B960     	 str r1,[r7,#8]
 5863 000a 191C     	 mov r1,r3
 5864 000c FB1D     	 add r3,r7,#7
 5865 000e 1A70     	 strb r2,[r3]
 5866 0010 BB1D     	 add r3,r7,#6
 5867 0012 0A1C     	 add r2,r1,#0
 5868 0014 1A70     	 strb r2,[r3]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1880:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1881:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1882:../Libraries/XMCLib/src/xmc_vadc.c **** 
1883:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5869              	 .loc 2 1883 0
 5870 0016 FB68     	 ldr r3,[r7,#12]
 5871 0018 BA68     	 ldr r2,[r7,#8]
 5872 001a 8032     	 add r2,r2,#128
 5873 001c 9200     	 lsl r2,r2,#2
 5874 001e D358     	 ldr r3,[r2,r3]
 5875 0020 FA1D     	 add r2,r7,#7
 5876 0022 1278     	 ldrb r2,[r2]
 5877 0024 3021     	 mov r1,#48
 5878 0026 9140     	 lsl r1,r1,r2
 5879 0028 0A1C     	 mov r2,r1
 5880 002a D243     	 mvn r2,r2
 5881 002c 1A40     	 and r2,r3
 5882 002e 111C     	 mov r1,r2
 5883 0030 FB68     	 ldr r3,[r7,#12]
 5884 0032 BA68     	 ldr r2,[r7,#8]
 5885 0034 8032     	 add r2,r2,#128
 5886 0036 9200     	 lsl r2,r2,#2
 5887 0038 D150     	 str r1,[r2,r3]
1884:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 5888              	 .loc 2 1884 0
 5889 003a FB68     	 ldr r3,[r7,#12]
 5890 003c BA68     	 ldr r2,[r7,#8]
 5891 003e 8032     	 add r2,r2,#128
 5892 0040 9200     	 lsl r2,r2,#2
 5893 0042 D358     	 ldr r3,[r2,r3]
 5894 0044 BA1D     	 add r2,r7,#6
 5895 0046 1278     	 ldrb r2,[r2]
 5896 0048 F91D     	 add r1,r7,#7
 5897 004a 0978     	 ldrb r1,[r1]
 5898 004c 0431     	 add r1,r1,#4
 5899 004e 8A40     	 lsl r2,r2,r1
 5900 0050 1343     	 orr r3,r2
 5901 0052 191C     	 mov r1,r3
 5902 0054 FB68     	 ldr r3,[r7,#12]
 5903 0056 BA68     	 ldr r2,[r7,#8]
 5904 0058 8032     	 add r2,r2,#128
 5905 005a 9200     	 lsl r2,r2,#2
 5906 005c D150     	 str r1,[r2,r3]
1885:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5907              	 .loc 2 1885 0
 5908 005e BD46     	 mov sp,r7
 5909 0060 04B0     	 add sp,sp,#16
 5910              	 
 5911 0062 80BD     	 pop {r7,pc}
 5912              	 .cfi_endproc
 5913              	.LFE227:
 5915              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 5916              	 .align 2
 5917              	 .global XMC_VADC_GROUP_AddResultToFifo
 5918              	 .code 16
 5919              	 .thumb_func
 5921              	XMC_VADC_GROUP_AddResultToFifo:
 5922              	.LFB228:
1886:../Libraries/XMCLib/src/xmc_vadc.c **** 
1887:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1888:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1889:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5923              	 .loc 2 1889 0
 5924              	 .cfi_startproc
 5925 0000 80B5     	 push {r7,lr}
 5926              	.LCFI235:
 5927              	 .cfi_def_cfa_offset 8
 5928              	 .cfi_offset 7,-8
 5929              	 .cfi_offset 14,-4
 5930 0002 84B0     	 sub sp,sp,#16
 5931              	.LCFI236:
 5932              	 .cfi_def_cfa_offset 24
 5933 0004 00AF     	 add r7,sp,#0
 5934              	.LCFI237:
 5935              	 .cfi_def_cfa_register 7
 5936 0006 7860     	 str r0,[r7,#4]
 5937 0008 3960     	 str r1,[r7]
1890:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1891:../Libraries/XMCLib/src/xmc_vadc.c **** 
1892:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1894:../Libraries/XMCLib/src/xmc_vadc.c **** 
1895:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1896:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5938              	 .loc 2 1896 0
 5939 000a 7B68     	 ldr r3,[r7,#4]
 5940 000c 3A68     	 ldr r2,[r7]
 5941 000e A032     	 add r2,r2,#160
 5942 0010 9200     	 lsl r2,r2,#2
 5943 0012 D358     	 ldr r3,[r2,r3]
 5944 0014 FB60     	 str r3,[r7,#12]
1897:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5945              	 .loc 2 1897 0
 5946 0016 FB68     	 ldr r3,[r7,#12]
 5947 0018 084A     	 ldr r2,.L254
 5948 001a 1340     	 and r3,r2
 5949 001c FB60     	 str r3,[r7,#12]
1898:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1899:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5950              	 .loc 2 1899 0
 5951 001e FB68     	 ldr r3,[r7,#12]
 5952 0020 8022     	 mov r2,#128
 5953 0022 9204     	 lsl r2,r2,#18
 5954 0024 1343     	 orr r3,r2
 5955 0026 FB60     	 str r3,[r7,#12]
1900:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5956              	 .loc 2 1900 0
 5957 0028 7B68     	 ldr r3,[r7,#4]
 5958 002a 3A68     	 ldr r2,[r7]
 5959 002c A032     	 add r2,r2,#160
 5960 002e 9200     	 lsl r2,r2,#2
 5961 0030 F968     	 ldr r1,[r7,#12]
 5962 0032 D150     	 str r1,[r2,r3]
1901:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5963              	 .loc 2 1901 0
 5964 0034 BD46     	 mov sp,r7
 5965 0036 04B0     	 add sp,sp,#16
 5966              	 
 5967 0038 80BD     	 pop {r7,pc}
 5968              	.L255:
 5969 003a C046     	 .align 2
 5970              	.L254:
 5971 003c FFFFFFF9 	 .word -100663297
 5972              	 .cfi_endproc
 5973              	.LFE228:
 5975              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 5976              	 .align 2
 5977              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 5978              	 .code 16
 5979              	 .thumb_func
 5981              	XMC_VADC_GROUP_SetResultFastCompareValue:
 5982              	.LFB229:
1902:../Libraries/XMCLib/src/xmc_vadc.c **** 
1903:../Libraries/XMCLib/src/xmc_vadc.c **** 
1904:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1905:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1906:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1907:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1908:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5983              	 .loc 2 1908 0
 5984              	 .cfi_startproc
 5985 0000 80B5     	 push {r7,lr}
 5986              	.LCFI238:
 5987              	 .cfi_def_cfa_offset 8
 5988              	 .cfi_offset 7,-8
 5989              	 .cfi_offset 14,-4
 5990 0002 86B0     	 sub sp,sp,#24
 5991              	.LCFI239:
 5992              	 .cfi_def_cfa_offset 32
 5993 0004 00AF     	 add r7,sp,#0
 5994              	.LCFI240:
 5995              	 .cfi_def_cfa_register 7
 5996 0006 F860     	 str r0,[r7,#12]
 5997 0008 B960     	 str r1,[r7,#8]
 5998 000a BB1D     	 add r3,r7,#6
 5999 000c 1A80     	 strh r2,[r3]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 6000              	 .loc 2 1909 0
 6001 000e FB68     	 ldr r3,[r7,#12]
 6002 0010 BA68     	 ldr r2,[r7,#8]
 6003 0012 C032     	 add r2,r2,#192
 6004 0014 9200     	 lsl r2,r2,#2
 6005 0016 D358     	 ldr r3,[r2,r3]
 6006 0018 7B61     	 str r3,[r7,#20]
1910:../Libraries/XMCLib/src/xmc_vadc.c **** 
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1912:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1913:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1914:../Libraries/XMCLib/src/xmc_vadc.c **** 
1915:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6007              	 .loc 2 1915 0
 6008 001a 7B69     	 ldr r3,[r7,#20]
 6009 001c 1B0C     	 lsr r3,r3,#16
 6010 001e 1B04     	 lsl r3,r3,#16
 6011 0020 7B61     	 str r3,[r7,#20]
1916:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 6012              	 .loc 2 1916 0
 6013 0022 BB1D     	 add r3,r7,#6
 6014 0024 1B88     	 ldrh r3,[r3]
 6015 0026 9B00     	 lsl r3,r3,#2
 6016 0028 7A69     	 ldr r2,[r7,#20]
 6017 002a 1343     	 orr r3,r2
 6018 002c 7B61     	 str r3,[r7,#20]
1917:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 6019              	 .loc 2 1917 0
 6020 002e FB68     	 ldr r3,[r7,#12]
 6021 0030 BA68     	 ldr r2,[r7,#8]
 6022 0032 C032     	 add r2,r2,#192
 6023 0034 9200     	 lsl r2,r2,#2
 6024 0036 7969     	 ldr r1,[r7,#20]
 6025 0038 D150     	 str r1,[r2,r3]
1918:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6026              	 .loc 2 1918 0
 6027 003a BD46     	 mov sp,r7
 6028 003c 06B0     	 add sp,sp,#24
 6029              	 
 6030 003e 80BD     	 pop {r7,pc}
 6031              	 .cfi_endproc
 6032              	.LFE229:
 6034              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 6035              	 .align 2
 6036              	 .global XMC_VADC_GROUP_GetFastCompareResult
 6037              	 .code 16
 6038              	 .thumb_func
 6040              	XMC_VADC_GROUP_GetFastCompareResult:
 6041              	.LFB230:
1919:../Libraries/XMCLib/src/xmc_vadc.c **** 
1920:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1921:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1922:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6042              	 .loc 2 1922 0
 6043              	 .cfi_startproc
 6044 0000 80B5     	 push {r7,lr}
 6045              	.LCFI241:
 6046              	 .cfi_def_cfa_offset 8
 6047              	 .cfi_offset 7,-8
 6048              	 .cfi_offset 14,-4
 6049 0002 84B0     	 sub sp,sp,#16
 6050              	.LCFI242:
 6051              	 .cfi_def_cfa_offset 24
 6052 0004 00AF     	 add r7,sp,#0
 6053              	.LCFI243:
 6054              	 .cfi_def_cfa_register 7
 6055 0006 7860     	 str r0,[r7,#4]
 6056 0008 3960     	 str r1,[r7]
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1925:../Libraries/XMCLib/src/xmc_vadc.c **** 
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1927:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 6057              	 .loc 2 1929 0
 6058 000a 7B68     	 ldr r3,[r7,#4]
 6059 000c 3A68     	 ldr r2,[r7]
 6060 000e C032     	 add r2,r2,#192
 6061 0010 9200     	 lsl r2,r2,#2
 6062 0012 D358     	 ldr r3,[r2,r3]
 6063 0014 BB60     	 str r3,[r7,#8]
1930:../Libraries/XMCLib/src/xmc_vadc.c **** 
1931:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 6064              	 .loc 2 1931 0
 6065 0016 BB68     	 ldr r3,[r7,#8]
 6066 0018 002B     	 cmp r3,#0
 6067 001a 08DA     	 bge .L258
1932:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1933:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 6068              	 .loc 2 1933 0
 6069 001c BB68     	 ldr r3,[r7,#8]
 6070 001e 9B0F     	 lsr r3,r3,#30
 6071 0020 DAB2     	 uxtb r2,r3
 6072 0022 0F23     	 mov r3,#15
 6073 0024 FB18     	 add r3,r7,r3
 6074 0026 0121     	 mov r1,#1
 6075 0028 0A40     	 and r2,r1
 6076 002a 1A70     	 strb r2,[r3]
 6077 002c 03E0     	 b .L259
 6078              	.L258:
1934:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1937:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6079              	 .loc 2 1937 0
 6080 002e 0F23     	 mov r3,#15
 6081 0030 FB18     	 add r3,r7,r3
 6082 0032 0222     	 mov r2,#2
 6083 0034 1A70     	 strb r2,[r3]
 6084              	.L259:
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6085              	 .loc 2 1940 0
 6086 0036 0F23     	 mov r3,#15
 6087 0038 FB18     	 add r3,r7,r3
 6088 003a 1B78     	 ldrb r3,[r3]
1941:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6089              	 .loc 2 1941 0
 6090 003c 181C     	 mov r0,r3
 6091 003e BD46     	 mov sp,r7
 6092 0040 04B0     	 add sp,sp,#16
 6093              	 
 6094 0042 80BD     	 pop {r7,pc}
 6095              	 .cfi_endproc
 6096              	.LFE230:
 6098              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6099              	 .align 2
 6100              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6101              	 .code 16
 6102              	 .thumb_func
 6104              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6105              	.LFB231:
1942:../Libraries/XMCLib/src/xmc_vadc.c **** 
1943:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1944:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1945:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1946:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6106              	 .loc 2 1946 0
 6107              	 .cfi_startproc
 6108 0000 80B5     	 push {r7,lr}
 6109              	.LCFI244:
 6110              	 .cfi_def_cfa_offset 8
 6111              	 .cfi_offset 7,-8
 6112              	 .cfi_offset 14,-4
 6113 0002 84B0     	 sub sp,sp,#16
 6114              	.LCFI245:
 6115              	 .cfi_def_cfa_offset 24
 6116 0004 00AF     	 add r7,sp,#0
 6117              	.LCFI246:
 6118              	 .cfi_def_cfa_register 7
 6119 0006 7860     	 str r0,[r7,#4]
 6120 0008 0A1C     	 mov r2,r1
 6121 000a BB1C     	 add r3,r7,#2
 6122 000c 1A80     	 strh r2,[r3]
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1948:../Libraries/XMCLib/src/xmc_vadc.c **** 
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1950:../Libraries/XMCLib/src/xmc_vadc.c **** 
1951:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6123              	 .loc 2 1951 0
 6124 000e 7A68     	 ldr r2,[r7,#4]
 6125 0010 C023     	 mov r3,#192
 6126 0012 9B00     	 lsl r3,r3,#2
 6127 0014 D358     	 ldr r3,[r2,r3]
 6128 0016 FB60     	 str r3,[r7,#12]
1952:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6129              	 .loc 2 1952 0
 6130 0018 FB68     	 ldr r3,[r7,#12]
 6131 001a 1B0C     	 lsr r3,r3,#16
 6132 001c 1B04     	 lsl r3,r3,#16
 6133 001e FB60     	 str r3,[r7,#12]
1953:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6134              	 .loc 2 1953 0
 6135 0020 BB1C     	 add r3,r7,#2
 6136 0022 1B88     	 ldrh r3,[r3]
 6137 0024 FA68     	 ldr r2,[r7,#12]
 6138 0026 1343     	 orr r3,r2
 6139 0028 FB60     	 str r3,[r7,#12]
1954:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6140              	 .loc 2 1954 0
 6141 002a 7A68     	 ldr r2,[r7,#4]
 6142 002c C023     	 mov r3,#192
 6143 002e 9B00     	 lsl r3,r3,#2
 6144 0030 F968     	 ldr r1,[r7,#12]
 6145 0032 D150     	 str r1,[r2,r3]
1955:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6146              	 .loc 2 1955 0
 6147 0034 BD46     	 mov sp,r7
 6148 0036 04B0     	 add sp,sp,#16
 6149              	 
 6150 0038 80BD     	 pop {r7,pc}
 6151              	 .cfi_endproc
 6152              	.LFE231:
 6154 003a C046     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6155              	 .align 2
 6156              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6157              	 .code 16
 6158              	 .thumb_func
 6160              	XMC_VADC_GROUP_SetResultInterruptNode:
 6161              	.LFB232:
1956:../Libraries/XMCLib/src/xmc_vadc.c **** 
1957:../Libraries/XMCLib/src/xmc_vadc.c **** 
1958:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1959:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1960:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1961:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1962:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6162              	 .loc 2 1962 0
 6163              	 .cfi_startproc
 6164 0000 80B5     	 push {r7,lr}
 6165              	.LCFI247:
 6166              	 .cfi_def_cfa_offset 8
 6167              	 .cfi_offset 7,-8
 6168              	 .cfi_offset 14,-4
 6169 0002 86B0     	 sub sp,sp,#24
 6170              	.LCFI248:
 6171              	 .cfi_def_cfa_offset 32
 6172 0004 00AF     	 add r7,sp,#0
 6173              	.LCFI249:
 6174              	 .cfi_def_cfa_register 7
 6175 0006 F860     	 str r0,[r7,#12]
 6176 0008 B960     	 str r1,[r7,#8]
 6177 000a FB1D     	 add r3,r7,#7
 6178 000c 1A70     	 strb r2,[r3]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1964:../Libraries/XMCLib/src/xmc_vadc.c **** 
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1966:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1967:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1968:../Libraries/XMCLib/src/xmc_vadc.c **** 
1969:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6179              	 .loc 2 1969 0
 6180 000e BB68     	 ldr r3,[r7,#8]
 6181 0010 072B     	 cmp r3,#7
 6182 0012 1BD8     	 bhi .L263
1970:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1971:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6183              	 .loc 2 1971 0
 6184 0014 FA68     	 ldr r2,[r7,#12]
 6185 0016 D823     	 mov r3,#216
 6186 0018 5B00     	 lsl r3,r3,#1
 6187 001a D358     	 ldr r3,[r2,r3]
 6188 001c 7B61     	 str r3,[r7,#20]
1972:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6189              	 .loc 2 1972 0
 6190 001e BB68     	 ldr r3,[r7,#8]
 6191 0020 9B00     	 lsl r3,r3,#2
 6192 0022 1A1C     	 mov r2,r3
 6193 0024 0F23     	 mov r3,#15
 6194 0026 9340     	 lsl r3,r3,r2
 6195 0028 DA43     	 mvn r2,r3
 6196 002a 7B69     	 ldr r3,[r7,#20]
 6197 002c 1340     	 and r3,r2
 6198 002e 7B61     	 str r3,[r7,#20]
1973:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6199              	 .loc 2 1973 0
 6200 0030 FB1D     	 add r3,r7,#7
 6201 0032 1B78     	 ldrb r3,[r3]
 6202 0034 BA68     	 ldr r2,[r7,#8]
 6203 0036 9200     	 lsl r2,r2,#2
 6204 0038 9340     	 lsl r3,r3,r2
 6205 003a 7A69     	 ldr r2,[r7,#20]
 6206 003c 1343     	 orr r3,r2
 6207 003e 7B61     	 str r3,[r7,#20]
1974:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 6208              	 .loc 2 1974 0
 6209 0040 FA68     	 ldr r2,[r7,#12]
 6210 0042 D823     	 mov r3,#216
 6211 0044 5B00     	 lsl r3,r3,#1
 6212 0046 7969     	 ldr r1,[r7,#20]
 6213 0048 D150     	 str r1,[r2,r3]
 6214 004a 20E0     	 b .L262
 6215              	.L263:
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1978:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 6216              	 .loc 2 1978 0
 6217 004c FA68     	 ldr r2,[r7,#12]
 6218 004e DA23     	 mov r3,#218
 6219 0050 5B00     	 lsl r3,r3,#1
 6220 0052 D358     	 ldr r3,[r2,r3]
 6221 0054 7B61     	 str r3,[r7,#20]
1979:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 6222              	 .loc 2 1979 0
 6223 0056 BB68     	 ldr r3,[r7,#8]
 6224 0058 0E4A     	 ldr r2,.L265
 6225 005a 9446     	 mov ip,r2
 6226 005c 6344     	 add r3,r3,ip
 6227 005e 9B00     	 lsl r3,r3,#2
 6228 0060 1A1C     	 mov r2,r3
 6229 0062 0F23     	 mov r3,#15
 6230 0064 9340     	 lsl r3,r3,r2
 6231 0066 DA43     	 mvn r2,r3
 6232 0068 7B69     	 ldr r3,[r7,#20]
 6233 006a 1340     	 and r3,r2
 6234 006c 7B61     	 str r3,[r7,#20]
1980:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 6235              	 .loc 2 1980 0
 6236 006e FB1D     	 add r3,r7,#7
 6237 0070 1B78     	 ldrb r3,[r3]
 6238 0072 BA68     	 ldr r2,[r7,#8]
 6239 0074 0749     	 ldr r1,.L265
 6240 0076 8C46     	 mov ip,r1
 6241 0078 6244     	 add r2,r2,ip
 6242 007a 9200     	 lsl r2,r2,#2
 6243 007c 9340     	 lsl r3,r3,r2
 6244 007e 7A69     	 ldr r2,[r7,#20]
 6245 0080 1343     	 orr r3,r2
 6246 0082 7B61     	 str r3,[r7,#20]
1981:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 6247              	 .loc 2 1981 0
 6248 0084 FA68     	 ldr r2,[r7,#12]
 6249 0086 DA23     	 mov r3,#218
 6250 0088 5B00     	 lsl r3,r3,#1
 6251 008a 7969     	 ldr r1,[r7,#20]
 6252 008c D150     	 str r1,[r2,r3]
 6253              	.L262:
1982:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1983:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6254              	 .loc 2 1983 0
 6255 008e BD46     	 mov sp,r7
 6256 0090 06B0     	 add sp,sp,#24
 6257              	 
 6258 0092 80BD     	 pop {r7,pc}
 6259              	.L266:
 6260              	 .align 2
 6261              	.L265:
 6262 0094 F8FFFF3F 	 .word 1073741816
 6263              	 .cfi_endproc
 6264              	.LFE232:
 6266              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 6267              	 .align 2
 6268              	 .global XMC_VADC_GROUP_GetResultFifoTail
 6269              	 .code 16
 6270              	 .thumb_func
 6272              	XMC_VADC_GROUP_GetResultFifoTail:
 6273              	.LFB233:
1984:../Libraries/XMCLib/src/xmc_vadc.c **** 
1985:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1986:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1987:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6274              	 .loc 2 1987 0
 6275              	 .cfi_startproc
 6276 0000 80B5     	 push {r7,lr}
 6277              	.LCFI250:
 6278              	 .cfi_def_cfa_offset 8
 6279              	 .cfi_offset 7,-8
 6280              	 .cfi_offset 14,-4
 6281 0002 86B0     	 sub sp,sp,#24
 6282              	.LCFI251:
 6283              	 .cfi_def_cfa_offset 32
 6284 0004 00AF     	 add r7,sp,#0
 6285              	.LCFI252:
 6286              	 .cfi_def_cfa_register 7
 6287 0006 7860     	 str r0,[r7,#4]
 6288 0008 3960     	 str r1,[r7]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
1989:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
1990:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
1992:../Libraries/XMCLib/src/xmc_vadc.c **** 
1993:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1994:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
1995:../Libraries/XMCLib/src/xmc_vadc.c **** 
1996:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 6289              	 .loc 2 1996 0
 6290 000a 0023     	 mov r3,#0
 6291 000c 7B61     	 str r3,[r7,#20]
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 6292              	 .loc 2 1997 0
 6293 000e 0F23     	 mov r3,#15
 6294 0010 FB18     	 add r3,r7,r3
 6295 0012 0022     	 mov r2,#0
 6296 0014 1A70     	 strb r2,[r3]
1998:../Libraries/XMCLib/src/xmc_vadc.c **** 
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6297              	 .loc 2 1999 0
 6298 0016 7A68     	 ldr r2,[r7,#4]
 6299 0018 3B68     	 ldr r3,[r7]
 6300 001a 101C     	 mov r0,r2
 6301 001c 191C     	 mov r1,r3
 6302 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6303 0022 031E     	 sub r3,r0,#0
 6304 0024 02D0     	 beq .L268
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2001:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 6305              	 .loc 2 2001 0
 6306 0026 3B68     	 ldr r3,[r7]
 6307 0028 013B     	 sub r3,r3,#1
 6308 002a 3B60     	 str r3,[r7]
 6309              	.L268:
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2003:../Libraries/XMCLib/src/xmc_vadc.c **** 
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 6310              	 .loc 2 2005 0
 6311 002c 3B68     	 ldr r3,[r7]
 6312 002e 002B     	 cmp r3,#0
 6313 0030 02D1     	 bne .L269
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2007:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 6314              	 .loc 2 2007 0
 6315 0032 0023     	 mov r3,#0
 6316 0034 7B61     	 str r3,[r7,#20]
 6317 0036 2DE0     	 b .L270
 6318              	.L269:
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2009:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2011:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2012:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 6319              	 .loc 2 2012 0
 6320 0038 3B68     	 ldr r3,[r7]
 6321 003a 3B61     	 str r3,[r7,#16]
 6322 003c 27E0     	 b .L271
 6323              	.L276:
2013:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2014:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 6324              	 .loc 2 2014 0
 6325 003e 7B68     	 ldr r3,[r7,#4]
 6326 0040 3A69     	 ldr r2,[r7,#16]
 6327 0042 A032     	 add r2,r2,#160
 6328 0044 9200     	 lsl r2,r2,#2
 6329 0046 D358     	 ldr r3,[r2,r3]
 6330 0048 BB60     	 str r3,[r7,#8]
2015:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6331              	 .loc 2 2015 0
 6332 004a BA68     	 ldr r2,[r7,#8]
 6333 004c C023     	 mov r3,#192
 6334 004e DB04     	 lsl r3,r3,#19
 6335 0050 1340     	 and r3,r2
 6336 0052 BB60     	 str r3,[r7,#8]
2016:../Libraries/XMCLib/src/xmc_vadc.c **** 
2017:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 6337              	 .loc 2 2017 0
 6338 0054 BB68     	 ldr r3,[r7,#8]
 6339 0056 002B     	 cmp r3,#0
 6340 0058 09D0     	 beq .L272
2018:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2019:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 6341              	 .loc 2 2019 0
 6342 005a 3B69     	 ldr r3,[r7,#16]
 6343 005c 002B     	 cmp r3,#0
 6344 005e 0DD1     	 bne .L274
2020:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2021:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2022:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 6345              	 .loc 2 2022 0
 6346 0060 0023     	 mov r3,#0
 6347 0062 7B61     	 str r3,[r7,#20]
2023:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 6348              	 .loc 2 2023 0
 6349 0064 0F23     	 mov r3,#15
 6350 0066 FB18     	 add r3,r7,r3
 6351 0068 0122     	 mov r2,#1
 6352 006a 1A70     	 strb r2,[r3]
 6353 006c 06E0     	 b .L274
 6354              	.L272:
2024:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2025:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2027:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2029:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 6355              	 .loc 2 2029 0
 6356 006e 3B69     	 ldr r3,[r7,#16]
 6357 0070 0133     	 add r3,r3,#1
 6358 0072 7B61     	 str r3,[r7,#20]
2030:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 6359              	 .loc 2 2030 0
 6360 0074 0F23     	 mov r3,#15
 6361 0076 FB18     	 add r3,r7,r3
 6362 0078 0122     	 mov r2,#1
 6363 007a 1A70     	 strb r2,[r3]
 6364              	.L274:
2031:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2032:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 6365              	 .loc 2 2032 0
 6366 007c 0F23     	 mov r3,#15
 6367 007e FB18     	 add r3,r7,r3
 6368 0080 1B78     	 ldrb r3,[r3]
 6369 0082 002B     	 cmp r3,#0
 6370 0084 00D0     	 beq .L275
2033:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2034:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 6371              	 .loc 2 2034 0
 6372 0086 05E0     	 b .L270
 6373              	.L275:
2012:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6374              	 .loc 2 2012 0 discriminator 2
 6375 0088 3B69     	 ldr r3,[r7,#16]
 6376 008a 013B     	 sub r3,r3,#1
 6377 008c 3B61     	 str r3,[r7,#16]
 6378              	.L271:
2012:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6379              	 .loc 2 2012 0 is_stmt 0 discriminator 1
 6380 008e 3B69     	 ldr r3,[r7,#16]
 6381 0090 002B     	 cmp r3,#0
 6382 0092 D4DA     	 bge .L276
 6383              	.L270:
2035:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2036:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2037:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2038:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 6384              	 .loc 2 2038 0 is_stmt 1
 6385 0094 7B69     	 ldr r3,[r7,#20]
2039:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6386              	 .loc 2 2039 0
 6387 0096 181C     	 mov r0,r3
 6388 0098 BD46     	 mov sp,r7
 6389 009a 06B0     	 add sp,sp,#24
 6390              	 
 6391 009c 80BD     	 pop {r7,pc}
 6392              	 .cfi_endproc
 6393              	.LFE233:
 6395 009e C046     	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 6396              	 .align 2
 6397              	 .global XMC_VADC_GROUP_GetResultFifoHead
 6398              	 .code 16
 6399              	 .thumb_func
 6401              	XMC_VADC_GROUP_GetResultFifoHead:
 6402              	.LFB234:
2040:../Libraries/XMCLib/src/xmc_vadc.c **** 
2041:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2042:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2043:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6403              	 .loc 2 2043 0
 6404              	 .cfi_startproc
 6405 0000 80B5     	 push {r7,lr}
 6406              	.LCFI253:
 6407              	 .cfi_def_cfa_offset 8
 6408              	 .cfi_offset 7,-8
 6409              	 .cfi_offset 14,-4
 6410 0002 86B0     	 sub sp,sp,#24
 6411              	.LCFI254:
 6412              	 .cfi_def_cfa_offset 32
 6413 0004 00AF     	 add r7,sp,#0
 6414              	.LCFI255:
 6415              	 .cfi_def_cfa_register 7
 6416 0006 7860     	 str r0,[r7,#4]
 6417 0008 3960     	 str r1,[r7]
2044:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2045:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2046:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2047:../Libraries/XMCLib/src/xmc_vadc.c **** 
2048:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2049:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2050:../Libraries/XMCLib/src/xmc_vadc.c **** 
2051:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6418              	 .loc 2 2051 0
 6419 000a 7A68     	 ldr r2,[r7,#4]
 6420 000c 3B68     	 ldr r3,[r7]
 6421 000e 101C     	 mov r0,r2
 6422 0010 191C     	 mov r1,r3
 6423 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6424 0016 031E     	 sub r3,r0,#0
 6425 0018 02D0     	 beq .L279
2052:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2053:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 6426              	 .loc 2 2053 0
 6427 001a 3B68     	 ldr r3,[r7]
 6428 001c 7B61     	 str r3,[r7,#20]
 6429 001e 1BE0     	 b .L280
 6430              	.L279:
2054:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2056:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2057:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 6431              	 .loc 2 2057 0
 6432 0020 0F23     	 mov r3,#15
 6433 0022 7B61     	 str r3,[r7,#20]
2058:../Libraries/XMCLib/src/xmc_vadc.c **** 
2059:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 6434              	 .loc 2 2059 0
 6435 0024 3B68     	 ldr r3,[r7]
 6436 0026 3B61     	 str r3,[r7,#16]
 6437 0028 13E0     	 b .L281
 6438              	.L283:
2060:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2061:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6439              	 .loc 2 2061 0
 6440 002a 7B68     	 ldr r3,[r7,#4]
 6441 002c 3A69     	 ldr r2,[r7,#16]
 6442 002e A032     	 add r2,r2,#160
 6443 0030 9200     	 lsl r2,r2,#2
 6444 0032 D358     	 ldr r3,[r2,r3]
 6445 0034 FB60     	 str r3,[r7,#12]
2062:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6446              	 .loc 2 2062 0
 6447 0036 FA68     	 ldr r2,[r7,#12]
 6448 0038 C023     	 mov r3,#192
 6449 003a DB04     	 lsl r3,r3,#19
 6450 003c 1340     	 and r3,r2
 6451 003e FB60     	 str r3,[r7,#12]
2063:../Libraries/XMCLib/src/xmc_vadc.c **** 
2064:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 6452              	 .loc 2 2064 0
 6453 0040 FB68     	 ldr r3,[r7,#12]
 6454 0042 002B     	 cmp r3,#0
 6455 0044 02D1     	 bne .L282
2065:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2066:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2067:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 6456              	 .loc 2 2067 0
 6457 0046 3B69     	 ldr r3,[r7,#16]
 6458 0048 7B61     	 str r3,[r7,#20]
2068:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6459              	 .loc 2 2068 0
 6460 004a 05E0     	 b .L280
 6461              	.L282:
2059:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6462              	 .loc 2 2059 0 discriminator 2
 6463 004c 3B69     	 ldr r3,[r7,#16]
 6464 004e 0133     	 add r3,r3,#1
 6465 0050 3B61     	 str r3,[r7,#16]
 6466              	.L281:
2059:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6467              	 .loc 2 2059 0 is_stmt 0 discriminator 1
 6468 0052 3B69     	 ldr r3,[r7,#16]
 6469 0054 0F2B     	 cmp r3,#15
 6470 0056 E8D9     	 bls .L283
 6471              	.L280:
2069:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2071:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2072:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 6472              	 .loc 2 2072 0 is_stmt 1
 6473 0058 7B69     	 ldr r3,[r7,#20]
2073:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6474              	 .loc 2 2073 0
 6475 005a 181C     	 mov r0,r3
 6476 005c BD46     	 mov sp,r7
 6477 005e 06B0     	 add sp,sp,#24
 6478              	 
 6479 0060 80BD     	 pop {r7,pc}
 6480              	 .cfi_endproc
 6481              	.LFE234:
 6483 0062 C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 6484              	 .align 2
 6485              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 6486              	 .code 16
 6487              	 .thumb_func
 6489              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 6490              	.LFB235:
2074:../Libraries/XMCLib/src/xmc_vadc.c **** 
2075:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2076:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2077:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6491              	 .loc 2 2077 0
 6492              	 .cfi_startproc
 6493 0000 80B5     	 push {r7,lr}
 6494              	.LCFI256:
 6495              	 .cfi_def_cfa_offset 8
 6496              	 .cfi_offset 7,-8
 6497              	 .cfi_offset 14,-4
 6498 0002 86B0     	 sub sp,sp,#24
 6499              	.LCFI257:
 6500              	 .cfi_def_cfa_offset 32
 6501 0004 00AF     	 add r7,sp,#0
 6502              	.LCFI258:
 6503              	 .cfi_def_cfa_register 7
 6504 0006 7860     	 str r0,[r7,#4]
 6505 0008 3960     	 str r1,[r7]
2078:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2079:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2080:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2081:../Libraries/XMCLib/src/xmc_vadc.c **** 
2082:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2083:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2084:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2085:../Libraries/XMCLib/src/xmc_vadc.c **** 
2086:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 6506              	 .loc 2 2086 0
 6507 000a 7B68     	 ldr r3,[r7,#4]
 6508 000c 3A68     	 ldr r2,[r7]
 6509 000e A032     	 add r2,r2,#160
 6510 0010 9200     	 lsl r2,r2,#2
 6511 0012 D358     	 ldr r3,[r2,r3]
 6512 0014 3B61     	 str r3,[r7,#16]
2087:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6513              	 .loc 2 2087 0
 6514 0016 3A69     	 ldr r2,[r7,#16]
 6515 0018 C023     	 mov r3,#192
 6516 001a DB04     	 lsl r3,r3,#19
 6517 001c 1340     	 and r3,r2
 6518 001e 3B61     	 str r3,[r7,#16]
2088:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 6519              	 .loc 2 2088 0
 6520 0020 3B68     	 ldr r3,[r7]
 6521 0022 5A1E     	 sub r2,r3,#1
 6522 0024 7B68     	 ldr r3,[r7,#4]
 6523 0026 A032     	 add r2,r2,#160
 6524 0028 9200     	 lsl r2,r2,#2
 6525 002a D358     	 ldr r3,[r2,r3]
 6526 002c FB60     	 str r3,[r7,#12]
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6527              	 .loc 2 2089 0
 6528 002e FA68     	 ldr r2,[r7,#12]
 6529 0030 C023     	 mov r3,#192
 6530 0032 DB04     	 lsl r3,r3,#19
 6531 0034 1340     	 and r3,r2
 6532 0036 FB60     	 str r3,[r7,#12]
2090:../Libraries/XMCLib/src/xmc_vadc.c **** 
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 6533              	 .loc 2 2091 0
 6534 0038 3B69     	 ldr r3,[r7,#16]
 6535 003a 002B     	 cmp r3,#0
 6536 003c 04D0     	 beq .L286
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2093:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6537              	 .loc 2 2093 0
 6538 003e 1723     	 mov r3,#23
 6539 0040 FB18     	 add r3,r7,r3
 6540 0042 0022     	 mov r2,#0
 6541 0044 1A70     	 strb r2,[r3]
 6542 0046 0BE0     	 b .L287
 6543              	.L286:
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 6544              	 .loc 2 2095 0
 6545 0048 FB68     	 ldr r3,[r7,#12]
 6546 004a 002B     	 cmp r3,#0
 6547 004c 04D0     	 beq .L288
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2097:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 6548              	 .loc 2 2097 0
 6549 004e 1723     	 mov r3,#23
 6550 0050 FB18     	 add r3,r7,r3
 6551 0052 0122     	 mov r2,#1
 6552 0054 1A70     	 strb r2,[r3]
 6553 0056 03E0     	 b .L287
 6554              	.L288:
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2099:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2101:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6555              	 .loc 2 2101 0
 6556 0058 1723     	 mov r3,#23
 6557 005a FB18     	 add r3,r7,r3
 6558 005c 0022     	 mov r2,#0
 6559 005e 1A70     	 strb r2,[r3]
 6560              	.L287:
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2103:../Libraries/XMCLib/src/xmc_vadc.c **** 
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 6561              	 .loc 2 2104 0
 6562 0060 1723     	 mov r3,#23
 6563 0062 FB18     	 add r3,r7,r3
 6564 0064 1B78     	 ldrb r3,[r3]
2105:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6565              	 .loc 2 2105 0
 6566 0066 181C     	 mov r0,r3
 6567 0068 BD46     	 mov sp,r7
 6568 006a 06B0     	 add sp,sp,#24
 6569              	 
 6570 006c 80BD     	 pop {r7,pc}
 6571              	 .cfi_endproc
 6572              	.LFE235:
 6574 006e C046     	 .text
 6575              	.Letext0:
 6576              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6577              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6578              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 6579              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc1_scu.h"
 6580              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include/cmsis_gcc.h"
 6581              	 .file 8 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:22     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:123    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:127    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:162    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:166    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:199    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000020 $d
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:243    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:247    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:280    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000020 $d
    {standard input}:285    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:289    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:324    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:328    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:361    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000020 $d
    {standard input}:366    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:370    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:419    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:422    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:426    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:431    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:455    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:460    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:483    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:488    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:555    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:560    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:616    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:622    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:627    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:717    .text.XMC_VADC_GLOBAL_StartupCalibration:00000070 $d
    {standard input}:722    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:727    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:773    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:778    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:856    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000068 $d
    {standard input}:861    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:866    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:919    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:924    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:981    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:986    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1060   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1065   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1134   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000005c $d
    {standard input}:1139   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1144   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1213   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1218   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1304   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1299   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1448   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1453   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1502   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1507   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1564   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1569   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1609   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1614   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1691   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000060 $d
    {standard input}:1696   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1701   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1779   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000060 $d
    {standard input}:1784   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1789   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1839   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1844   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1896   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1901   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1951   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000003c $d
    {standard input}:1956   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1961   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2005   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2010   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2067   .text.XMC_VADC_GROUP_SetBoundaries:00000044 $d
    {standard input}:2072   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2077   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2155   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000068 $d
    {standard input}:2160   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2165   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2230   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2235   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2299   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:2304   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2358   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:2363   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2422   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:2427   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2488   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:2493   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2578   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000078 $d
    {standard input}:2583   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:2588   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:2708   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2713   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:2772   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2777   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:2838   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:2843   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:2918   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:2923   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:3042   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:3047   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:3114   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000005c $d
    {standard input}:3119   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:3124   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3238   .text.XMC_VADC_GROUP_ScanInit:000000ac $d
    {standard input}:3243   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:3248   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3305   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000048 $d
    {standard input}:3310   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:3315   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3372   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000048 $d
    {standard input}:3377   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:3382   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3439   .text.XMC_VADC_GROUP_ScanSelectGating:00000048 $d
    {standard input}:3444   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:3449   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3548   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000094 $d
    {standard input}:3553   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:3558   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:3631   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3636   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:3688   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:3693   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:3741   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:3746   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3953   .text.XMC_VADC_GLOBAL_BackgroundInit:00000144 $d
    {standard input}:3960   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3965   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:4019   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000040 $d
    {standard input}:4024   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:4029   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:4086   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000048 $d
    {standard input}:4091   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:4096   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4150   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000040 $d
    {standard input}:4155   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:4160   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4284   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000b4 $d
    {standard input}:4290   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:4295   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4384   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:4389   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:4503   .text.XMC_VADC_GROUP_QueueInit:000000ac $d
    {standard input}:4508   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:4513   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:4570   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000048 $d
    {standard input}:4575   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:4580   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:4637   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000048 $d
    {standard input}:4642   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:4647   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:4704   .text.XMC_VADC_GROUP_QueueSelectGating:00000048 $d
    {standard input}:4709   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:4714   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:4782   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:4787   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:4865   .text.XMC_VADC_GROUP_QueueAbortSequence:00000070 $d
    {standard input}:4870   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:4875   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:4994   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000b4 $d
    {standard input}:4999   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:5004   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:5077   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:5082   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:5135   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:5140   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5191   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:5196   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5341   .text.XMC_VADC_GROUP_ChannelInit:000000d8 $d
    {standard input}:5346   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:5351   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:5432   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:5437   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:5490   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000040 $d
    {standard input}:5495   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:5500   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:5551   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000003c $d
    {standard input}:5556   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:5561   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:5614   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:5619   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:5663   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:5668   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:5714   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:5719   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:5778   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:5783   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:5836   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000040 $d
    {standard input}:5841   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5846   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:5916   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5921   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5971   .text.XMC_VADC_GROUP_AddResultToFifo:0000003c $d
    {standard input}:5976   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:5981   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:6035   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:6040   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6099   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:6104   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6155   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:6160   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:6262   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000094 $d
    {standard input}:6267   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:6272   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:6489   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:6396   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:6401   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:6484   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
