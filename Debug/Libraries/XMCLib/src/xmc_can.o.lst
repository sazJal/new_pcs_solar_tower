   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_can.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CAN_IsPanelControlReady:
  23              	.LFB67:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {  
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       };
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
  25              	 .loc 1 674 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  39              	 .loc 1 675 0
  40 0008 7A68     	 ldr r2,[r7,#4]
  41 000a E223     	 mov r3,#226
  42 000c 5B00     	 lsl r3,r3,#1
  43 000e D258     	 ldr r2,[r2,r3]
  44 0010 C023     	 mov r3,#192
  45 0012 9B00     	 lsl r3,r3,#2
  46 0014 1340     	 and r3,r2
  47 0016 5A42     	 neg r2,r3
  48 0018 5341     	 adc r3,r3,r2
  49 001a DBB2     	 uxtb r3,r3
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
  50              	 .loc 1 676 0
  51 001c 181C     	 mov r0,r3
  52 001e BD46     	 mov sp,r7
  53 0020 02B0     	 add sp,sp,#8
  54              	 
  55 0022 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE67:
  59              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  60              	 .align 2
  61              	 .code 16
  62              	 .thumb_func
  64              	XMC_CAN_PanelControl:
  65              	.LFB68:
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
  66              	 .loc 1 705 0
  67              	 .cfi_startproc
  68 0000 90B5     	 push {r4,r7,lr}
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 12
  71              	 .cfi_offset 4,-12
  72              	 .cfi_offset 7,-8
  73              	 .cfi_offset 14,-4
  74 0002 83B0     	 sub sp,sp,#12
  75              	.LCFI4:
  76              	 .cfi_def_cfa_offset 24
  77 0004 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
  80 0006 7860     	 str r0,[r7,#4]
  81 0008 0C1C     	 mov r4,r1
  82 000a 101C     	 mov r0,r2
  83 000c 191C     	 mov r1,r3
  84 000e FB1C     	 add r3,r7,#3
  85 0010 221C     	 add r2,r4,#0
  86 0012 1A70     	 strb r2,[r3]
  87 0014 BB1C     	 add r3,r7,#2
  88 0016 021C     	 add r2,r0,#0
  89 0018 1A70     	 strb r2,[r3]
  90 001a 7B1C     	 add r3,r7,#1
  91 001c 0A1C     	 add r2,r1,#0
  92 001e 1A70     	 strb r2,[r3]
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  93              	 .loc 1 706 0
  94 0020 FB1C     	 add r3,r7,#3
  95 0022 1A78     	 ldrb r2,[r3]
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  96              	 .loc 1 707 0
  97 0024 BB1C     	 add r3,r7,#2
  98 0026 1B78     	 ldrb r3,[r3]
  99 0028 1904     	 lsl r1,r3,#16
 100 002a FF23     	 mov r3,#255
 101 002c 1B04     	 lsl r3,r3,#16
 102 002e 0B40     	 and r3,r1
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 103              	 .loc 1 706 0
 104 0030 1A43     	 orr r2,r3
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 105              	 .loc 1 708 0
 106 0032 7B1C     	 add r3,r7,#1
 107 0034 1B78     	 ldrb r3,[r3]
 108 0036 1B06     	 lsl r3,r3,#24
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 109              	 .loc 1 707 0
 110 0038 1A43     	 orr r2,r3
 111 003a 111C     	 mov r1,r2
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 112              	 .loc 1 706 0
 113 003c 7A68     	 ldr r2,[r7,#4]
 114 003e E223     	 mov r3,#226
 115 0040 5B00     	 lsl r3,r3,#1
 116 0042 D150     	 str r1,[r2,r3]
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 709 0
 118 0044 BD46     	 mov sp,r7
 119 0046 03B0     	 add sp,sp,#12
 120              	 
 121 0048 90BD     	 pop {r4,r7,pc}
 122              	 .cfi_endproc
 123              	.LFE68:
 125 004a C046     	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 126              	 .align 2
 127              	 .code 16
 128              	 .thumb_func
 130              	XMC_CAN_NODE_EnableConfigurationChange:
 131              	.LFB84:
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency 
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 132              	 .loc 1 1280 0
 133              	 .cfi_startproc
 134 0000 80B5     	 push {r7,lr}
 135              	.LCFI6:
 136              	 .cfi_def_cfa_offset 8
 137              	 .cfi_offset 7,-8
 138              	 .cfi_offset 14,-4
 139 0002 82B0     	 sub sp,sp,#8
 140              	.LCFI7:
 141              	 .cfi_def_cfa_offset 16
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI8:
 144              	 .cfi_def_cfa_register 7
 145 0006 7860     	 str r0,[r7,#4]
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 146              	 .loc 1 1281 0
 147 0008 7B68     	 ldr r3,[r7,#4]
 148 000a 1B68     	 ldr r3,[r3]
 149 000c 4022     	 mov r2,#64
 150 000e 1A43     	 orr r2,r3
 151 0010 7B68     	 ldr r3,[r7,#4]
 152 0012 1A60     	 str r2,[r3]
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 153              	 .loc 1 1282 0
 154 0014 BD46     	 mov sp,r7
 155 0016 02B0     	 add sp,sp,#8
 156              	 
 157 0018 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE84:
 161 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_CAN_NODE_DisableConfigurationChange:
 167              	.LFB85:
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 168              	 .loc 1 1300 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI9:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI10:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI11:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 182              	 .loc 1 1301 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 1B68     	 ldr r3,[r3]
 185 000c 4022     	 mov r2,#64
 186 000e 9343     	 bic r3,r2
 187 0010 1A1C     	 mov r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 1A60     	 str r2,[r3]
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 190              	 .loc 1 1302 0
 191 0016 BD46     	 mov sp,r7
 192 0018 02B0     	 add sp,sp,#8
 193              	 
 194 001a 80BD     	 pop {r7,pc}
 195              	 .cfi_endproc
 196              	.LFE85:
 198              	 .section .text.max,"ax",%progbits
 199              	 .align 2
 200              	 .code 16
 201              	 .thumb_func
 203              	max:
 204              	.LFB125:
 205              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2019-06-26
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *
  70:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-11-12:
  71:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  72:../Libraries/XMCLib/src/xmc_can.c ****  *
  73:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-05-07:
  74:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed compilation warnings
  75:../Libraries/XMCLib/src/xmc_can.c ****  *
  76:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-06-26:
  77:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx() non returning, decrementing ntq before cont
  78:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_GetClockFrequency()
  79:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_InitEx() so that XMC_CAN_SetBaudrateClockSource() is invoked before XMC_CAN_
  80:../Libraries/XMCLib/src/xmc_can.c ****  *
  81:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  82:../Libraries/XMCLib/src/xmc_can.c ****  *
  83:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  84:../Libraries/XMCLib/src/xmc_can.c **** 
  85:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  86:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  87:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  88:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  89:../Libraries/XMCLib/src/xmc_can.c **** 
  90:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  91:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  94:../Libraries/XMCLib/src/xmc_can.c **** {
 206              	 .loc 2 94 0
 207              	 .cfi_startproc
 208 0000 80B5     	 push {r7,lr}
 209              	.LCFI12:
 210              	 .cfi_def_cfa_offset 8
 211              	 .cfi_offset 7,-8
 212              	 .cfi_offset 14,-4
 213 0002 82B0     	 sub sp,sp,#8
 214              	.LCFI13:
 215              	 .cfi_def_cfa_offset 16
 216 0004 00AF     	 add r7,sp,#0
 217              	.LCFI14:
 218              	 .cfi_def_cfa_register 7
 219 0006 7860     	 str r0,[r7,#4]
 220 0008 3960     	 str r1,[r7]
  95:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 221              	 .loc 2 95 0
 222 000a 7A68     	 ldr r2,[r7,#4]
 223 000c 3B68     	 ldr r3,[r7]
 224 000e 9342     	 cmp r3,r2
 225 0010 00D2     	 bcs .L8
 226 0012 131C     	 mov r3,r2
 227              	.L8:
  96:../Libraries/XMCLib/src/xmc_can.c **** }
 228              	 .loc 2 96 0 discriminator 1
 229 0014 181C     	 mov r0,r3
 230 0016 BD46     	 mov sp,r7
 231 0018 02B0     	 add sp,sp,#8
 232              	 
 233 001a 80BD     	 pop {r7,pc}
 234              	 .cfi_endproc
 235              	.LFE125:
 237              	 .section .text.min,"ax",%progbits
 238              	 .align 2
 239              	 .code 16
 240              	 .thumb_func
 242              	min:
 243              	.LFB126:
  97:../Libraries/XMCLib/src/xmc_can.c **** 
  98:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  99:../Libraries/XMCLib/src/xmc_can.c **** {
 244              	 .loc 2 99 0
 245              	 .cfi_startproc
 246 0000 80B5     	 push {r7,lr}
 247              	.LCFI15:
 248              	 .cfi_def_cfa_offset 8
 249              	 .cfi_offset 7,-8
 250              	 .cfi_offset 14,-4
 251 0002 82B0     	 sub sp,sp,#8
 252              	.LCFI16:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI17:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 258 0008 3960     	 str r1,[r7]
 100:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 259              	 .loc 2 100 0
 260 000a 7A68     	 ldr r2,[r7,#4]
 261 000c 3B68     	 ldr r3,[r7]
 262 000e 9342     	 cmp r3,r2
 263 0010 00D9     	 bls .L11
 264 0012 131C     	 mov r3,r2
 265              	.L11:
 101:../Libraries/XMCLib/src/xmc_can.c **** }
 266              	 .loc 2 101 0 discriminator 1
 267 0014 181C     	 mov r0,r3
 268 0016 BD46     	 mov sp,r7
 269 0018 02B0     	 add sp,sp,#8
 270              	 
 271 001a 80BD     	 pop {r7,pc}
 272              	 .cfi_endproc
 273              	.LFE126:
 275              	 .global __aeabi_uidivmod
 276              	 .global __aeabi_uidiv
 277              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 278              	 .align 2
 279              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 280              	 .code 16
 281              	 .thumb_func
 283              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 284              	.LFB127:
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
 104:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
 105:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
 106:../Libraries/XMCLib/src/xmc_can.c **** 
 107:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 108:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 109:../Libraries/XMCLib/src/xmc_can.c **** 
 110:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 111:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 112:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 113:../Libraries/XMCLib/src/xmc_can.c **** 
 114:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 115:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 116:../Libraries/XMCLib/src/xmc_can.c **** 
 117:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 118:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 119:../Libraries/XMCLib/src/xmc_can.c **** 
 120:../Libraries/XMCLib/src/xmc_can.c **** 
 121:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 122:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 123:../Libraries/XMCLib/src/xmc_can.c **** {
 285              	 .loc 2 123 0
 286              	 .cfi_startproc
 287 0000 80B5     	 push {r7,lr}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 8
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 88B0     	 sub sp,sp,#32
 293              	.LCFI19:
 294              	 .cfi_def_cfa_offset 40
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI20:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
 299 0008 3960     	 str r1,[r7]
 124:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 125:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 300              	 .loc 2 125 0
 301 000a 3B68     	 ldr r3,[r7]
 302 000c 1A68     	 ldr r2,[r3]
 303 000e 3B68     	 ldr r3,[r7]
 304 0010 5B68     	 ldr r3,[r3,#4]
 305 0012 101C     	 mov r0,r2
 306 0014 191C     	 mov r1,r3
 307 0016 FFF7FEFF 	 bl __aeabi_uidivmod
 308 001a 0B1E     	 sub r3,r1,#0
 309 001c 00D0     	 beq .LCB258
 310 001e 94E0     	 b .L13
 311              	.LCB258:
 312              	.LBB2:
 126:../Libraries/XMCLib/src/xmc_can.c ****   {
 127:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t prescaler;
 128:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t div8 = 0;
 313              	 .loc 2 128 0
 314 0020 0023     	 mov r3,#0
 315 0022 BB61     	 str r3,[r7,#24]
 129:../Libraries/XMCLib/src/xmc_can.c **** 
 130:../Libraries/XMCLib/src/xmc_can.c ****     /* Calculate the factor between can frequency and required baudrate, this is equal to (prescale
 131:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 316              	 .loc 2 131 0
 317 0024 3B68     	 ldr r3,[r7]
 318 0026 1A68     	 ldr r2,[r3]
 319 0028 3B68     	 ldr r3,[r7]
 320 002a 5B68     	 ldr r3,[r3,#4]
 321 002c 101C     	 mov r0,r2
 322 002e 191C     	 mov r1,r3
 323 0030 FFF7FEFF 	 bl __aeabi_uidiv
 324 0034 031C     	 mov r3,r0
 325 0036 BB60     	 str r3,[r7,#8]
 132:../Libraries/XMCLib/src/xmc_can.c **** 
 133:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 134:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 326              	 .loc 2 134 0
 327 0038 1923     	 mov r3,#25
 328 003a 7B61     	 str r3,[r7,#20]
 135:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 329              	 .loc 2 135 0
 330 003c 0023     	 mov r3,#0
 331 003e 3B61     	 str r3,[r7,#16]
 136:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 332              	 .loc 2 136 0
 333 0040 0023     	 mov r3,#0
 334 0042 FB60     	 str r3,[r7,#12]
 137:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 335              	 .loc 2 137 0
 336 0044 49E0     	 b .L14
 337              	.L19:
 138:../Libraries/XMCLib/src/xmc_can.c ****     {
 139:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 140:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 338              	 .loc 2 140 0
 339 0046 BB68     	 ldr r3,[r7,#8]
 340 0048 181C     	 mov r0,r3
 341 004a 7969     	 ldr r1,[r7,#20]
 342 004c FFF7FEFF 	 bl __aeabi_uidivmod
 343 0050 0B1E     	 sub r3,r1,#0
 344 0052 3FD1     	 bne .L15
 141:../Libraries/XMCLib/src/xmc_can.c ****       {
 142:../Libraries/XMCLib/src/xmc_can.c ****     	  div8 = 0;
 345              	 .loc 2 142 0
 346 0054 0023     	 mov r3,#0
 347 0056 BB61     	 str r3,[r7,#24]
 143:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 348              	 .loc 2 143 0
 349 0058 B868     	 ldr r0,[r7,#8]
 350 005a 7969     	 ldr r1,[r7,#20]
 351 005c FFF7FEFF 	 bl __aeabi_uidiv
 352 0060 031C     	 mov r3,r0
 353 0062 FB61     	 str r3,[r7,#28]
 144:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 354              	 .loc 2 144 0
 355 0064 FB69     	 ldr r3,[r7,#28]
 356 0066 002B     	 cmp r3,#0
 357 0068 34D0     	 beq .L15
 358              	 .loc 2 144 0 is_stmt 0 discriminator 1
 359 006a FA69     	 ldr r2,[r7,#28]
 360 006c 8023     	 mov r3,#128
 361 006e 9B00     	 lsl r3,r3,#2
 362 0070 9A42     	 cmp r2,r3
 363 0072 2FD8     	 bhi .L15
 145:../Libraries/XMCLib/src/xmc_can.c ****         {
 146:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 364              	 .loc 2 146 0 is_stmt 1
 365 0074 FB69     	 ldr r3,[r7,#28]
 366 0076 3F2B     	 cmp r3,#63
 367 0078 09D9     	 bls .L16
 147:../Libraries/XMCLib/src/xmc_can.c ****           {
 148:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 149:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 368              	 .loc 2 149 0
 369 007a FB69     	 ldr r3,[r7,#28]
 370 007c 0722     	 mov r2,#7
 371 007e 1340     	 and r3,r2
 372 0080 03D0     	 beq .L17
 150:../Libraries/XMCLib/src/xmc_can.c ****             {
 151:../Libraries/XMCLib/src/xmc_can.c ****               --ntq;
 373              	 .loc 2 151 0
 374 0082 7B69     	 ldr r3,[r7,#20]
 375 0084 013B     	 sub r3,r3,#1
 376 0086 7B61     	 str r3,[r7,#20]
 152:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 377              	 .loc 2 152 0
 378 0088 27E0     	 b .L14
 379              	.L17:
 153:../Libraries/XMCLib/src/xmc_can.c ****             }
 154:../Libraries/XMCLib/src/xmc_can.c ****             else
 155:../Libraries/XMCLib/src/xmc_can.c ****             {
 156:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 380              	 .loc 2 156 0
 381 008a 0123     	 mov r3,#1
 382 008c BB61     	 str r3,[r7,#24]
 383              	.L16:
 157:../Libraries/XMCLib/src/xmc_can.c ****             }
 158:../Libraries/XMCLib/src/xmc_can.c ****           }
 159:../Libraries/XMCLib/src/xmc_can.c **** 
 160:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 384              	 .loc 2 160 0
 385 008e 7B69     	 ldr r3,[r7,#20]
 386 0090 013B     	 sub r3,r3,#1
 387 0092 3A68     	 ldr r2,[r7]
 388 0094 1289     	 ldrh r2,[r2,#8]
 389 0096 5343     	 mul r3,r2
 390 0098 181C     	 mov r0,r3
 391 009a 2E49     	 ldr r1,.L21
 392 009c FFF7FEFF 	 bl __aeabi_uidiv
 393 00a0 031C     	 mov r3,r0
 394 00a2 3B61     	 str r3,[r7,#16]
 161:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 395              	 .loc 2 161 0
 396 00a4 7A69     	 ldr r2,[r7,#20]
 397 00a6 3B69     	 ldr r3,[r7,#16]
 398 00a8 D31A     	 sub r3,r2,r3
 399 00aa 013B     	 sub r3,r3,#1
 400 00ac FB60     	 str r3,[r7,#12]
 162:../Libraries/XMCLib/src/xmc_can.c **** 
 163:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 401              	 .loc 2 163 0
 402 00ae 3B69     	 ldr r3,[r7,#16]
 403 00b0 022B     	 cmp r3,#2
 404 00b2 0FD9     	 bls .L15
 405              	 .loc 2 163 0 is_stmt 0 discriminator 1
 406 00b4 3B69     	 ldr r3,[r7,#16]
 407 00b6 0F2B     	 cmp r3,#15
 408 00b8 0CD8     	 bhi .L15
 409              	 .loc 2 163 0 discriminator 2
 410 00ba FB68     	 ldr r3,[r7,#12]
 411 00bc 012B     	 cmp r3,#1
 412 00be 09D9     	 bls .L15
 164:../Libraries/XMCLib/src/xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
 413              	 .loc 2 164 0 is_stmt 1
 414 00c0 FB68     	 ldr r3,[r7,#12]
 415 00c2 062B     	 cmp r3,#6
 416 00c4 06D8     	 bhi .L15
 417              	 .loc 2 164 0 is_stmt 0 discriminator 1
 418 00c6 3B68     	 ldr r3,[r7]
 419 00c8 5B89     	 ldrh r3,[r3,#10]
 420 00ca 1A1E     	 sub r2,r3,#0
 421 00cc FB68     	 ldr r3,[r7,#12]
 422 00ce 9A42     	 cmp r2,r3
 423 00d0 00D8     	 bhi .L15
 165:../Libraries/XMCLib/src/xmc_can.c ****           {
 166:../Libraries/XMCLib/src/xmc_can.c ****             break;
 424              	 .loc 2 166 0 is_stmt 1
 425 00d2 05E0     	 b .L18
 426              	.L15:
 167:../Libraries/XMCLib/src/xmc_can.c ****           }
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c **** 
 170:../Libraries/XMCLib/src/xmc_can.c ****         }
 171:../Libraries/XMCLib/src/xmc_can.c ****       }
 172:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 427              	 .loc 2 172 0
 428 00d4 7B69     	 ldr r3,[r7,#20]
 429 00d6 013B     	 sub r3,r3,#1
 430 00d8 7B61     	 str r3,[r7,#20]
 431              	.L14:
 137:../Libraries/XMCLib/src/xmc_can.c ****     {
 432              	 .loc 2 137 0
 433 00da 7B69     	 ldr r3,[r7,#20]
 434 00dc 072B     	 cmp r3,#7
 435 00de B2D8     	 bhi .L19
 436              	.L18:
 173:../Libraries/XMCLib/src/xmc_can.c ****     }
 174:../Libraries/XMCLib/src/xmc_can.c **** 
 175:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 437              	 .loc 2 175 0
 438 00e0 7B69     	 ldr r3,[r7,#20]
 439 00e2 072B     	 cmp r3,#7
 440 00e4 31D9     	 bls .L13
 176:../Libraries/XMCLib/src/xmc_can.c ****     {
 177:../Libraries/XMCLib/src/xmc_can.c **** 
 178:../Libraries/XMCLib/src/xmc_can.c **** 
 179:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 441              	 .loc 2 179 0
 442 00e6 7B68     	 ldr r3,[r7,#4]
 443 00e8 181C     	 mov r0,r3
 444 00ea FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 180:../Libraries/XMCLib/src/xmc_can.c **** 
 181:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 182:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 445              	 .loc 2 182 0
 446 00ee FB68     	 ldr r3,[r7,#12]
 447 00f0 013B     	 sub r3,r3,#1
 448 00f2 1A03     	 lsl r2,r3,#12
 449 00f4 E023     	 mov r3,#224
 450 00f6 DB01     	 lsl r3,r3,#7
 451 00f8 1A40     	 and r2,r3
 183:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 452              	 .loc 2 183 0
 453 00fa 3B68     	 ldr r3,[r7]
 454 00fc 5B89     	 ldrh r3,[r3,#10]
 455 00fe 013B     	 sub r3,r3,#1
 456 0100 9B01     	 lsl r3,r3,#6
 457 0102 FF21     	 mov r1,#255
 458 0104 0B40     	 and r3,r1
 182:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 459              	 .loc 2 182 0
 460 0106 1A43     	 orr r2,r3
 184:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 461              	 .loc 2 184 0
 462 0108 3B69     	 ldr r3,[r7,#16]
 463 010a 013B     	 sub r3,r3,#1
 464 010c 1902     	 lsl r1,r3,#8
 465 010e F023     	 mov r3,#240
 466 0110 1B01     	 lsl r3,r3,#4
 467 0112 0B40     	 and r3,r1
 183:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 468              	 .loc 2 183 0
 469 0114 1A43     	 orr r2,r3
 470 0116 111C     	 mov r1,r2
 185:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 471              	 .loc 2 185 0
 472 0118 BA69     	 ldr r2,[r7,#24]
 473 011a 131C     	 mov r3,r2
 474 011c 5B00     	 lsl r3,r3,#1
 475 011e 9B18     	 add r3,r3,r2
 476 0120 1A1C     	 mov r2,r3
 477 0122 FB69     	 ldr r3,[r7,#28]
 478 0124 D340     	 lsr r3,r3,r2
 479 0126 013B     	 sub r3,r3,#1
 480 0128 3F22     	 mov r2,#63
 481 012a 1340     	 and r3,r2
 184:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 482              	 .loc 2 184 0
 483 012c 0A1C     	 mov r2,r1
 484 012e 1A43     	 orr r2,r3
 186:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 485              	 .loc 2 186 0
 486 0130 BB69     	 ldr r3,[r7,#24]
 487 0132 DB03     	 lsl r3,r3,#15
 488 0134 1B04     	 lsl r3,r3,#16
 489 0136 1B0C     	 lsr r3,r3,#16
 185:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 490              	 .loc 2 185 0
 491 0138 1A43     	 orr r2,r3
 182:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 492              	 .loc 2 182 0
 493 013a 7B68     	 ldr r3,[r7,#4]
 494 013c 1A61     	 str r2,[r3,#16]
 187:../Libraries/XMCLib/src/xmc_can.c **** 
 188:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 495              	 .loc 2 188 0
 496 013e 7B68     	 ldr r3,[r7,#4]
 497 0140 181C     	 mov r0,r3
 498 0142 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 189:../Libraries/XMCLib/src/xmc_can.c **** 
 190:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 499              	 .loc 2 190 0
 500 0146 0023     	 mov r3,#0
 501 0148 00E0     	 b .L20
 502              	.L13:
 503              	.LBE2:
 191:../Libraries/XMCLib/src/xmc_can.c ****     }
 192:../Libraries/XMCLib/src/xmc_can.c ****   }
 193:../Libraries/XMCLib/src/xmc_can.c **** 
 194:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 504              	 .loc 2 194 0
 505 014a 0123     	 mov r3,#1
 506              	.L20:
 195:../Libraries/XMCLib/src/xmc_can.c **** }
 507              	 .loc 2 195 0
 508 014c 181C     	 mov r0,r3
 509 014e BD46     	 mov sp,r7
 510 0150 08B0     	 add sp,sp,#32
 511              	 
 512 0152 80BD     	 pop {r7,pc}
 513              	.L22:
 514              	 .align 2
 515              	.L21:
 516 0154 10270000 	 .word 10000
 517              	 .cfi_endproc
 518              	.LFE127:
 520              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 521              	 .align 2
 522              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 523              	 .code 16
 524              	 .thumb_func
 526              	XMC_CAN_NODE_NominalBitTimeConfigure:
 527              	.LFB128:
 196:../Libraries/XMCLib/src/xmc_can.c **** 
 197:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 198:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 199:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 200:../Libraries/XMCLib/src/xmc_can.c **** {
 528              	 .loc 2 200 0
 529              	 .cfi_startproc
 530 0000 80B5     	 push {r7,lr}
 531              	.LCFI21:
 532              	 .cfi_def_cfa_offset 8
 533              	 .cfi_offset 7,-8
 534              	 .cfi_offset 14,-4
 535 0002 90B0     	 sub sp,sp,#64
 536              	.LCFI22:
 537              	 .cfi_def_cfa_offset 72
 538 0004 00AF     	 add r7,sp,#0
 539              	.LCFI23:
 540              	 .cfi_def_cfa_register 7
 541 0006 7860     	 str r0,[r7,#4]
 542 0008 3960     	 str r1,[r7]
 201:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 543              	 .loc 2 201 0
 544 000a 0C23     	 mov r3,#12
 545 000c FB63     	 str r3,[r7,#60]
 202:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 546              	 .loc 2 202 0
 547 000e 0C23     	 mov r3,#12
 548 0010 BB63     	 str r3,[r7,#56]
 203:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 549              	 .loc 2 203 0
 550 0012 0023     	 mov r3,#0
 551 0014 7B63     	 str r3,[r7,#52]
 204:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 552              	 .loc 2 204 0
 553 0016 0123     	 mov r3,#1
 554 0018 3B63     	 str r3,[r7,#48]
 205:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 555              	 .loc 2 205 0
 556 001a 0023     	 mov r3,#0
 557 001c 7B61     	 str r3,[r7,#20]
 206:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 558              	 .loc 2 206 0
 559 001e 0023     	 mov r3,#0
 560 0020 FB62     	 str r3,[r7,#44]
 207:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 561              	 .loc 2 207 0
 562 0022 6A4B     	 ldr r3,.L41
 563 0024 BB62     	 str r3,[r7,#40]
 208:../Libraries/XMCLib/src/xmc_can.c **** 
 209:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 210:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 211:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 212:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 213:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 214:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 215:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 216:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 217:../Libraries/XMCLib/src/xmc_can.c ****        
 218:../Libraries/XMCLib/src/xmc_can.c ****   /*
 219:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 220:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 221:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 222:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 223:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 224:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 225:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 226:../Libraries/XMCLib/src/xmc_can.c ****    *
 227:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 228:../Libraries/XMCLib/src/xmc_can.c ****    *
 229:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 230:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 231:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 232:../Libraries/XMCLib/src/xmc_can.c ****    */
 233:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 234:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 564              	 .loc 2 234 0
 565 0026 0123     	 mov r3,#1
 566 0028 FB63     	 str r3,[r7,#60]
 567 002a 6AE0     	 b .L24
 568              	.L33:
 569              	.LBB3:
 235:../Libraries/XMCLib/src/xmc_can.c ****   {
 236:../Libraries/XMCLib/src/xmc_can.c **** 
 237:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 570              	 .loc 2 237 0
 571 002c 3B68     	 ldr r3,[r7]
 572 002e 1A68     	 ldr r2,[r3]
 573 0030 131C     	 mov r3,r2
 574 0032 9B00     	 lsl r3,r3,#2
 575 0034 9B18     	 add r3,r3,r2
 576 0036 5B00     	 lsl r3,r3,#1
 577 0038 181C     	 mov r0,r3
 578 003a F96B     	 ldr r1,[r7,#60]
 579 003c FFF7FEFF 	 bl __aeabi_uidiv
 580 0040 031C     	 mov r3,r0
 581 0042 3B61     	 str r3,[r7,#16]
 238:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 582              	 .loc 2 238 0
 583 0044 3B68     	 ldr r3,[r7]
 584 0046 5B68     	 ldr r3,[r3,#4]
 585 0048 3869     	 ldr r0,[r7,#16]
 586 004a 191C     	 mov r1,r3
 587 004c FFF7FEFF 	 bl __aeabi_uidiv
 588 0050 031C     	 mov r3,r0
 589 0052 7B62     	 str r3,[r7,#36]
 239:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 240:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 241:../Libraries/XMCLib/src/xmc_can.c **** 
 242:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 590              	 .loc 2 242 0
 591 0054 7B6A     	 ldr r3,[r7,#36]
 592 0056 181C     	 mov r0,r3
 593 0058 0A21     	 mov r1,#10
 594 005a FFF7FEFF 	 bl __aeabi_uidivmod
 595 005e 0B1E     	 sub r3,r1,#0
 596 0060 052B     	 cmp r3,#5
 597 0062 0AD9     	 bls .L25
 243:../Libraries/XMCLib/src/xmc_can.c ****   {
 244:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 598              	 .loc 2 244 0
 599 0064 7B6A     	 ldr r3,[r7,#36]
 600 0066 181C     	 mov r0,r3
 601 0068 0A21     	 mov r1,#10
 602 006a FFF7FEFF 	 bl __aeabi_uidiv
 603 006e 031C     	 mov r3,r0
 604 0070 7B62     	 str r3,[r7,#36]
 245:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 605              	 .loc 2 245 0
 606 0072 7B6A     	 ldr r3,[r7,#36]
 607 0074 0133     	 add r3,r3,#1
 608 0076 7B62     	 str r3,[r7,#36]
 609 0078 06E0     	 b .L26
 610              	.L25:
 246:../Libraries/XMCLib/src/xmc_can.c ****   }
 247:../Libraries/XMCLib/src/xmc_can.c ****   else
 248:../Libraries/XMCLib/src/xmc_can.c ****   {
 249:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 611              	 .loc 2 249 0
 612 007a 7B6A     	 ldr r3,[r7,#36]
 613 007c 181C     	 mov r0,r3
 614 007e 0A21     	 mov r1,#10
 615 0080 FFF7FEFF 	 bl __aeabi_uidiv
 616 0084 031C     	 mov r3,r0
 617 0086 7B62     	 str r3,[r7,#36]
 618              	.L26:
 250:../Libraries/XMCLib/src/xmc_can.c ****   }
 251:../Libraries/XMCLib/src/xmc_can.c **** 
 252:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 619              	 .loc 2 252 0
 620 0088 7B6A     	 ldr r3,[r7,#36]
 621 008a 002B     	 cmp r3,#0
 622 008c 0BD0     	 beq .L27
 253:../Libraries/XMCLib/src/xmc_can.c ****   {
 254:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 623              	 .loc 2 254 0
 624 008e 7A6A     	 ldr r2,[r7,#36]
 625 0090 131C     	 mov r3,r2
 626 0092 9B00     	 lsl r3,r3,#2
 627 0094 9B18     	 add r3,r3,r2
 628 0096 5B00     	 lsl r3,r3,#1
 629 0098 3869     	 ldr r0,[r7,#16]
 630 009a 191C     	 mov r1,r3
 631 009c FFF7FEFF 	 bl __aeabi_uidiv
 632 00a0 031C     	 mov r3,r0
 633 00a2 3B62     	 str r3,[r7,#32]
 634 00a4 08E0     	 b .L28
 635              	.L27:
 255:../Libraries/XMCLib/src/xmc_can.c ****   }
 256:../Libraries/XMCLib/src/xmc_can.c ****   else
 257:../Libraries/XMCLib/src/xmc_can.c ****   {
 258:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 636              	 .loc 2 258 0
 637 00a6 3B69     	 ldr r3,[r7,#16]
 638 00a8 181C     	 mov r0,r3
 639 00aa 0A21     	 mov r1,#10
 640 00ac FFF7FEFF 	 bl __aeabi_uidiv
 641 00b0 031C     	 mov r3,r0
 642 00b2 3B62     	 str r3,[r7,#32]
 259:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 643              	 .loc 2 259 0
 644 00b4 0123     	 mov r3,#1
 645 00b6 7B62     	 str r3,[r7,#36]
 646              	.L28:
 260:../Libraries/XMCLib/src/xmc_can.c ****   }
 261:../Libraries/XMCLib/src/xmc_can.c **** 
 262:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 647              	 .loc 2 262 0
 648 00b8 3B68     	 ldr r3,[r7]
 649 00ba 5A68     	 ldr r2,[r3,#4]
 650 00bc 3B6A     	 ldr r3,[r7,#32]
 651 00be 9A42     	 cmp r2,r3
 652 00c0 05D8     	 bhi .L29
 263:../Libraries/XMCLib/src/xmc_can.c ****   {
 264:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 653              	 .loc 2 264 0
 654 00c2 3B68     	 ldr r3,[r7]
 655 00c4 5B68     	 ldr r3,[r3,#4]
 656 00c6 3A6A     	 ldr r2,[r7,#32]
 657 00c8 D31A     	 sub r3,r2,r3
 658 00ca FB61     	 str r3,[r7,#28]
 659 00cc 04E0     	 b .L30
 660              	.L29:
 265:../Libraries/XMCLib/src/xmc_can.c ****   }
 266:../Libraries/XMCLib/src/xmc_can.c ****   else
 267:../Libraries/XMCLib/src/xmc_can.c ****   {
 268:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 661              	 .loc 2 268 0
 662 00ce 3B68     	 ldr r3,[r7]
 663 00d0 5A68     	 ldr r2,[r3,#4]
 664 00d2 3B6A     	 ldr r3,[r7,#32]
 665 00d4 D31A     	 sub r3,r2,r3
 666 00d6 FB61     	 str r3,[r7,#28]
 667              	.L30:
 269:../Libraries/XMCLib/src/xmc_can.c ****   }
 270:../Libraries/XMCLib/src/xmc_can.c **** 
 271:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 668              	 .loc 2 271 0
 669 00d8 7B6A     	 ldr r3,[r7,#36]
 670 00da 142B     	 cmp r3,#20
 671 00dc 0ED8     	 bhi .L31
 672              	 .loc 2 271 0 is_stmt 0 discriminator 1
 673 00de BA6A     	 ldr r2,[r7,#40]
 674 00e0 FB69     	 ldr r3,[r7,#28]
 675 00e2 9A42     	 cmp r2,r3
 676 00e4 0AD9     	 bls .L31
 272:../Libraries/XMCLib/src/xmc_can.c ****   {
 273:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 677              	 .loc 2 273 0 is_stmt 1
 678 00e6 FB6B     	 ldr r3,[r7,#60]
 679 00e8 7B63     	 str r3,[r7,#52]
 274:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 680              	 .loc 2 274 0
 681 00ea 7B6A     	 ldr r3,[r7,#36]
 682 00ec FB62     	 str r3,[r7,#44]
 275:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 683              	 .loc 2 275 0
 684 00ee FB69     	 ldr r3,[r7,#28]
 685 00f0 BB62     	 str r3,[r7,#40]
 276:../Libraries/XMCLib/src/xmc_can.c **** 
 277:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 686              	 .loc 2 277 0
 687 00f2 FB69     	 ldr r3,[r7,#28]
 688 00f4 364A     	 ldr r2,.L41+4
 689 00f6 9342     	 cmp r3,r2
 690 00f8 00D8     	 bhi .L31
 278:../Libraries/XMCLib/src/xmc_can.c ****     {
 279:../Libraries/XMCLib/src/xmc_can.c ****       break;
 691              	 .loc 2 279 0
 692 00fa 05E0     	 b .L32
 693              	.L31:
 694              	.LBE3:
 234:../Libraries/XMCLib/src/xmc_can.c ****   {
 695              	 .loc 2 234 0 discriminator 2
 696 00fc FB6B     	 ldr r3,[r7,#60]
 697 00fe 0133     	 add r3,r3,#1
 698 0100 FB63     	 str r3,[r7,#60]
 699              	.L24:
 234:../Libraries/XMCLib/src/xmc_can.c ****   {
 700              	 .loc 2 234 0 is_stmt 0 discriminator 1
 701 0102 FB6B     	 ldr r3,[r7,#60]
 702 0104 402B     	 cmp r3,#64
 703 0106 91D9     	 bls .L33
 704              	.L32:
 280:../Libraries/XMCLib/src/xmc_can.c ****     }
 281:../Libraries/XMCLib/src/xmc_can.c ****    }
 282:../Libraries/XMCLib/src/xmc_can.c ****   }
 283:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 284:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 705              	 .loc 2 284 0 is_stmt 1
 706 0108 304B     	 ldr r3,.L41
 707 010a BB62     	 str r3,[r7,#40]
 285:../Libraries/XMCLib/src/xmc_can.c **** 
 286:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 708              	 .loc 2 286 0
 709 010c 4023     	 mov r3,#64
 710 010e BB63     	 str r3,[r7,#56]
 711 0110 2EE0     	 b .L34
 712              	.L40:
 713              	.LBB4:
 287:../Libraries/XMCLib/src/xmc_can.c ****   {
 288:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 714              	 .loc 2 288 0
 715 0112 BB6B     	 ldr r3,[r7,#56]
 716 0114 0133     	 add r3,r3,#1
 717 0116 2D4A     	 ldr r2,.L41
 718 0118 5343     	 mul r3,r2
 719 011a 181C     	 mov r0,r3
 720 011c F96A     	 ldr r1,[r7,#44]
 721 011e FFF7FEFF 	 bl __aeabi_uidiv
 722 0122 031C     	 mov r3,r0
 723 0124 FB60     	 str r3,[r7,#12]
 289:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 290:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 724              	 .loc 2 290 0
 725 0126 3B68     	 ldr r3,[r7]
 726 0128 1B89     	 ldrh r3,[r3,#8]
 727 012a 1A1E     	 sub r2,r3,#0
 728 012c FB68     	 ldr r3,[r7,#12]
 729 012e 9A42     	 cmp r2,r3
 730 0130 06D8     	 bhi .L35
 291:../Libraries/XMCLib/src/xmc_can.c ****   {
 292:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 731              	 .loc 2 292 0
 732 0132 3B68     	 ldr r3,[r7]
 733 0134 1B89     	 ldrh r3,[r3,#8]
 734 0136 1A1C     	 mov r2,r3
 735 0138 FB68     	 ldr r3,[r7,#12]
 736 013a 9B1A     	 sub r3,r3,r2
 737 013c BB61     	 str r3,[r7,#24]
 738 013e 05E0     	 b .L36
 739              	.L35:
 293:../Libraries/XMCLib/src/xmc_can.c ****   }
 294:../Libraries/XMCLib/src/xmc_can.c ****   else
 295:../Libraries/XMCLib/src/xmc_can.c ****   {
 296:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 740              	 .loc 2 296 0
 741 0140 3B68     	 ldr r3,[r7]
 742 0142 1B89     	 ldrh r3,[r3,#8]
 743 0144 1A1C     	 mov r2,r3
 744 0146 FB68     	 ldr r3,[r7,#12]
 745 0148 D31A     	 sub r3,r2,r3
 746 014a BB61     	 str r3,[r7,#24]
 747              	.L36:
 297:../Libraries/XMCLib/src/xmc_can.c ****   }
 298:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 748              	 .loc 2 298 0
 749 014c BA6A     	 ldr r2,[r7,#40]
 750 014e BB69     	 ldr r3,[r7,#24]
 751 0150 9A42     	 cmp r2,r3
 752 0152 03D9     	 bls .L37
 299:../Libraries/XMCLib/src/xmc_can.c ****     {
 300:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 753              	 .loc 2 300 0
 754 0154 BB6B     	 ldr r3,[r7,#56]
 755 0156 3B63     	 str r3,[r7,#48]
 301:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 756              	 .loc 2 301 0
 757 0158 BB69     	 ldr r3,[r7,#24]
 758 015a BB62     	 str r3,[r7,#40]
 759              	.L37:
 302:../Libraries/XMCLib/src/xmc_can.c ****     }
 303:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 760              	 .loc 2 303 0
 761 015c 3B68     	 ldr r3,[r7]
 762 015e 1B89     	 ldrh r3,[r3,#8]
 763 0160 1A1E     	 sub r2,r3,#0
 764 0162 FB68     	 ldr r3,[r7,#12]
 765 0164 9A42     	 cmp r2,r3
 766 0166 00D9     	 bls .L38
 304:../Libraries/XMCLib/src/xmc_can.c ****     {
 305:../Libraries/XMCLib/src/xmc_can.c ****       break;
 767              	 .loc 2 305 0
 768 0168 05E0     	 b .L39
 769              	.L38:
 770              	.LBE4:
 286:../Libraries/XMCLib/src/xmc_can.c ****   {
 771              	 .loc 2 286 0 discriminator 2
 772 016a BB6B     	 ldr r3,[r7,#56]
 773 016c 013B     	 sub r3,r3,#1
 774 016e BB63     	 str r3,[r7,#56]
 775              	.L34:
 286:../Libraries/XMCLib/src/xmc_can.c ****   {
 776              	 .loc 2 286 0 is_stmt 0 discriminator 1
 777 0170 BB6B     	 ldr r3,[r7,#56]
 778 0172 022B     	 cmp r3,#2
 779 0174 CDD8     	 bhi .L40
 780              	.L39:
 306:../Libraries/XMCLib/src/xmc_can.c ****     }
 307:../Libraries/XMCLib/src/xmc_can.c ****   }
 308:../Libraries/XMCLib/src/xmc_can.c **** 
 309:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 781              	 .loc 2 309 0 is_stmt 1
 782 0176 FA6A     	 ldr r2,[r7,#44]
 783 0178 3B6B     	 ldr r3,[r7,#48]
 784 017a D31A     	 sub r3,r2,r3
 785 017c 013B     	 sub r3,r3,#1
 786 017e 7B61     	 str r3,[r7,#20]
 310:../Libraries/XMCLib/src/xmc_can.c **** 
 311:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 787              	 .loc 2 311 0
 788 0180 7B68     	 ldr r3,[r7,#4]
 789 0182 181C     	 mov r0,r3
 790 0184 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 312:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 313:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 791              	 .loc 2 313 0
 792 0188 7B69     	 ldr r3,[r7,#20]
 793 018a 013B     	 sub r3,r3,#1
 794 018c 1A03     	 lsl r2,r3,#12
 795 018e E023     	 mov r3,#224
 796 0190 DB01     	 lsl r3,r3,#7
 797 0192 1A40     	 and r2,r3
 314:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 798              	 .loc 2 314 0
 799 0194 3B68     	 ldr r3,[r7]
 800 0196 5B89     	 ldrh r3,[r3,#10]
 801 0198 013B     	 sub r3,r3,#1
 802 019a 9B01     	 lsl r3,r3,#6
 803 019c FF21     	 mov r1,#255
 804 019e 0B40     	 and r3,r1
 313:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 805              	 .loc 2 313 0
 806 01a0 1A43     	 orr r2,r3
 315:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 807              	 .loc 2 315 0
 808 01a2 3B6B     	 ldr r3,[r7,#48]
 809 01a4 013B     	 sub r3,r3,#1
 810 01a6 1902     	 lsl r1,r3,#8
 811 01a8 F023     	 mov r3,#240
 812 01aa 1B01     	 lsl r3,r3,#4
 813 01ac 0B40     	 and r3,r1
 314:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 814              	 .loc 2 314 0
 815 01ae 1A43     	 orr r2,r3
 316:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 816              	 .loc 2 316 0
 817 01b0 7B6B     	 ldr r3,[r7,#52]
 818 01b2 013B     	 sub r3,r3,#1
 819 01b4 3F21     	 mov r1,#63
 820 01b6 0B40     	 and r3,r1
 821 01b8 1A43     	 orr r2,r3
 313:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 822              	 .loc 2 313 0
 823 01ba 7B68     	 ldr r3,[r7,#4]
 824 01bc 1A61     	 str r2,[r3,#16]
 317:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 318:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 825              	 .loc 2 318 0
 826 01be 7B68     	 ldr r3,[r7,#4]
 827 01c0 181C     	 mov r0,r3
 828 01c2 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 319:../Libraries/XMCLib/src/xmc_can.c **** }
 829              	 .loc 2 319 0
 830 01c6 BD46     	 mov sp,r7
 831 01c8 10B0     	 add sp,sp,#64
 832              	 
 833 01ca 80BD     	 pop {r7,pc}
 834              	.L42:
 835              	 .align 2
 836              	.L41:
 837 01cc 10270000 	 .word 10000
 838 01d0 E7030000 	 .word 999
 839              	 .cfi_endproc
 840              	.LFE128:
 842              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 843              	 .align 2
 844              	 .global XMC_CAN_AllocateMOtoNodeList
 845              	 .code 16
 846              	 .thumb_func
 848              	XMC_CAN_AllocateMOtoNodeList:
 849              	.LFB129:
 320:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 321:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 850              	 .loc 2 322 0
 851              	 .cfi_startproc
 852 0000 90B5     	 push {r4,r7,lr}
 853              	.LCFI24:
 854              	 .cfi_def_cfa_offset 12
 855              	 .cfi_offset 4,-12
 856              	 .cfi_offset 7,-8
 857              	 .cfi_offset 14,-4
 858 0002 83B0     	 sub sp,sp,#12
 859              	.LCFI25:
 860              	 .cfi_def_cfa_offset 24
 861 0004 00AF     	 add r7,sp,#0
 862              	.LCFI26:
 863              	 .cfi_def_cfa_register 7
 864 0006 7860     	 str r0,[r7,#4]
 865 0008 081C     	 mov r0,r1
 866 000a 111C     	 mov r1,r2
 867 000c FB1C     	 add r3,r7,#3
 868 000e 021C     	 add r2,r0,#0
 869 0010 1A70     	 strb r2,[r3]
 870 0012 BB1C     	 add r3,r7,#2
 871 0014 0A1C     	 add r2,r1,#0
 872 0016 1A70     	 strb r2,[r3]
 323:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 324:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 873              	 .loc 2 324 0
 874 0018 C046     	 mov r8,r8
 875              	.L44:
 876              	 .loc 2 324 0 is_stmt 0 discriminator 1
 877 001a 7B68     	 ldr r3,[r7,#4]
 878 001c 181C     	 mov r0,r3
 879 001e FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 880 0022 031C     	 mov r3,r0
 881 0024 1A1C     	 mov r2,r3
 882 0026 0123     	 mov r3,#1
 883 0028 5340     	 eor r3,r2
 884 002a DBB2     	 uxtb r3,r3
 885 002c 002B     	 cmp r3,#0
 886 002e F4D1     	 bne .L44
 325:../Libraries/XMCLib/src/xmc_can.c ****   {
 326:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 327:../Libraries/XMCLib/src/xmc_can.c ****   };
 328:../Libraries/XMCLib/src/xmc_can.c **** 
 329:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 330:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 887              	 .loc 2 330 0 is_stmt 1
 888 0030 FB1C     	 add r3,r7,#3
 889 0032 1B78     	 ldrb r3,[r3]
 890 0034 0133     	 add r3,r3,#1
 891 0036 DCB2     	 uxtb r4,r3
 892 0038 7A68     	 ldr r2,[r7,#4]
 893 003a BB1C     	 add r3,r7,#2
 894 003c 1B78     	 ldrb r3,[r3]
 895 003e 101C     	 mov r0,r2
 896 0040 0221     	 mov r1,#2
 897 0042 1A1C     	 mov r2,r3
 898 0044 231C     	 mov r3,r4
 899 0046 FFF7FEFF 	 bl XMC_CAN_PanelControl
 331:../Libraries/XMCLib/src/xmc_can.c **** }
 900              	 .loc 2 331 0
 901 004a BD46     	 mov sp,r7
 902 004c 03B0     	 add sp,sp,#12
 903              	 
 904 004e 90BD     	 pop {r4,r7,pc}
 905              	 .cfi_endproc
 906              	.LFE129:
 908              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 909              	 .align 2
 910              	 .global XMC_CAN_Disable
 911              	 .code 16
 912              	 .thumb_func
 914              	XMC_CAN_Disable:
 915              	.LFB130:
 332:../Libraries/XMCLib/src/xmc_can.c **** 
 333:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 334:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 335:../Libraries/XMCLib/src/xmc_can.c **** {
 916              	 .loc 2 335 0
 917              	 .cfi_startproc
 918 0000 80B5     	 push {r7,lr}
 919              	.LCFI27:
 920              	 .cfi_def_cfa_offset 8
 921              	 .cfi_offset 7,-8
 922              	 .cfi_offset 14,-4
 923 0002 82B0     	 sub sp,sp,#8
 924              	.LCFI28:
 925              	 .cfi_def_cfa_offset 16
 926 0004 00AF     	 add r7,sp,#0
 927              	.LCFI29:
 928              	 .cfi_def_cfa_register 7
 929 0006 7860     	 str r0,[r7,#4]
 336:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 337:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 930              	 .loc 2 337 0
 931 0008 7B68     	 ldr r3,[r7,#4]
 932 000a 0122     	 mov r2,#1
 933 000c 1A60     	 str r2,[r3]
 338:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 339:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 340:../Libraries/XMCLib/src/xmc_can.c **** #endif
 341:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 342:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 934              	 .loc 2 342 0
 935 000e 8023     	 mov r3,#128
 936 0010 9B03     	 lsl r3,r3,#14
 937 0012 181C     	 mov r0,r3
 938 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 343:../Libraries/XMCLib/src/xmc_can.c **** #endif
 344:../Libraries/XMCLib/src/xmc_can.c **** }
 939              	 .loc 2 344 0
 940 0018 BD46     	 mov sp,r7
 941 001a 02B0     	 add sp,sp,#8
 942              	 
 943 001c 80BD     	 pop {r7,pc}
 944              	 .cfi_endproc
 945              	.LFE130:
 947 001e C046     	 .section .text.XMC_CAN_Enable,"ax",%progbits
 948              	 .align 2
 949              	 .global XMC_CAN_Enable
 950              	 .code 16
 951              	 .thumb_func
 953              	XMC_CAN_Enable:
 954              	.LFB131:
 345:../Libraries/XMCLib/src/xmc_can.c **** 
 346:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 347:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 348:../Libraries/XMCLib/src/xmc_can.c **** {
 955              	 .loc 2 348 0
 956              	 .cfi_startproc
 957 0000 80B5     	 push {r7,lr}
 958              	.LCFI30:
 959              	 .cfi_def_cfa_offset 8
 960              	 .cfi_offset 7,-8
 961              	 .cfi_offset 14,-4
 962 0002 82B0     	 sub sp,sp,#8
 963              	.LCFI31:
 964              	 .cfi_def_cfa_offset 16
 965 0004 00AF     	 add r7,sp,#0
 966              	.LCFI32:
 967              	 .cfi_def_cfa_register 7
 968 0006 7860     	 str r0,[r7,#4]
 349:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 350:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 969              	 .loc 2 350 0
 970 0008 8023     	 mov r3,#128
 971 000a 9B03     	 lsl r3,r3,#14
 972 000c 181C     	 mov r0,r3
 973 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 351:../Libraries/XMCLib/src/xmc_can.c **** #endif
 352:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 353:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 354:../Libraries/XMCLib/src/xmc_can.c **** #endif
 355:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 356:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 974              	 .loc 2 356 0
 975 0012 7B68     	 ldr r3,[r7,#4]
 976 0014 1B68     	 ldr r3,[r3]
 977 0016 0122     	 mov r2,#1
 978 0018 9343     	 bic r3,r2
 979 001a 1A1C     	 mov r2,r3
 980 001c 7B68     	 ldr r3,[r7,#4]
 981 001e 1A60     	 str r2,[r3]
 357:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 982              	 .loc 2 357 0
 983 0020 C046     	 mov r8,r8
 984              	.L47:
 985              	 .loc 2 357 0 is_stmt 0 discriminator 1
 986 0022 7B68     	 ldr r3,[r7,#4]
 987 0024 1B68     	 ldr r3,[r3]
 988 0026 0222     	 mov r2,#2
 989 0028 1340     	 and r3,r2
 990 002a FAD1     	 bne .L47
 358:../Libraries/XMCLib/src/xmc_can.c ****   {
 359:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 360:../Libraries/XMCLib/src/xmc_can.c ****   };
 361:../Libraries/XMCLib/src/xmc_can.c **** }
 991              	 .loc 2 361 0 is_stmt 1
 992 002c BD46     	 mov sp,r7
 993 002e 02B0     	 add sp,sp,#8
 994              	 
 995 0030 80BD     	 pop {r7,pc}
 996              	 .cfi_endproc
 997              	.LFE131:
 999 0032 C046     	 .section .text.XMC_CAN_Init,"ax",%progbits
 1000              	 .align 2
 1001              	 .global XMC_CAN_Init
 1002              	 .code 16
 1003              	 .thumb_func
 1005              	XMC_CAN_Init:
 1006              	.LFB132:
 362:../Libraries/XMCLib/src/xmc_can.c **** 
 363:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 364:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 365:../Libraries/XMCLib/src/xmc_can.c **** {
 1007              	 .loc 2 365 0
 1008              	 .cfi_startproc
 1009 0000 80B5     	 push {r7,lr}
 1010              	.LCFI33:
 1011              	 .cfi_def_cfa_offset 8
 1012              	 .cfi_offset 7,-8
 1013              	 .cfi_offset 14,-4
 1014 0002 8EB0     	 sub sp,sp,#56
 1015              	.LCFI34:
 1016              	 .cfi_def_cfa_offset 64
 1017 0004 00AF     	 add r7,sp,#0
 1018              	.LCFI35:
 1019              	 .cfi_def_cfa_register 7
 1020 0006 F860     	 str r0,[r7,#12]
 1021 0008 7A60     	 str r2,[r7,#4]
 1022 000a 0B23     	 mov r3,#11
 1023 000c FB18     	 add r3,r7,r3
 1024 000e 0A1C     	 add r2,r1,#0
 1025 0010 1A70     	 strb r2,[r3]
 366:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 367:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 368:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 369:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 370:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 371:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 372:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 373:../Libraries/XMCLib/src/xmc_can.c **** 
 374:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 375:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 376:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1026              	 .loc 2 376 0
 1027 0012 FB68     	 ldr r3,[r7,#12]
 1028 0014 181C     	 mov r0,r3
 1029 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1030              	 .loc 2 378 0
 1031 001a FA68     	 ldr r2,[r7,#12]
 1032 001c 0B23     	 mov r3,#11
 1033 001e FB18     	 add r3,r7,r3
 1034 0020 1B78     	 ldrb r3,[r3]
 1035 0022 101C     	 mov r0,r2
 1036 0024 191C     	 mov r1,r3
 1037 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1038              	 .loc 2 380 0
 1039 002a FB68     	 ldr r3,[r7,#12]
 1040 002c 181C     	 mov r0,r3
 1041 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1042 0032 031C     	 mov r3,r0
 1043 0034 7B63     	 str r3,[r7,#52]
 381:../Libraries/XMCLib/src/xmc_can.c **** 
 382:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 383:../Libraries/XMCLib/src/xmc_can.c **** 
 384:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 385:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1044              	 .loc 2 385 0
 1045 0036 786B     	 ldr r0,[r7,#52]
 1046 0038 7968     	 ldr r1,[r7,#4]
 1047 003a FFF7FEFF 	 bl __aeabi_uidiv
 1048 003e 031C     	 mov r3,r0
 1049 0040 1A1C     	 mov r2,r3
 1050 0042 8023     	 mov r3,#128
 1051 0044 DB00     	 lsl r3,r3,#3
 1052 0046 9B1A     	 sub r3,r3,r2
 1053 0048 0020     	 mov r0,#0
 1054 004a 191C     	 mov r1,r3
 1055 004c FFF7FEFF 	 bl max
 1056 0050 021C     	 mov r2,r0
 1057 0052 314B     	 ldr r3,.L53
 1058 0054 101C     	 mov r0,r2
 1059 0056 191C     	 mov r1,r3
 1060 0058 FFF7FEFF 	 bl min
 1061 005c 031C     	 mov r3,r0
 1062 005e 3B63     	 str r3,[r7,#48]
 386:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1063              	 .loc 2 386 0
 1064 0060 3B6B     	 ldr r3,[r7,#48]
 1065 0062 8022     	 mov r2,#128
 1066 0064 D200     	 lsl r2,r2,#3
 1067 0066 D31A     	 sub r3,r2,r3
 1068 0068 786B     	 ldr r0,[r7,#52]
 1069 006a 191C     	 mov r1,r3
 1070 006c FFF7FEFF 	 bl __aeabi_uidiv
 1071 0070 031C     	 mov r3,r0
 1072 0072 FB62     	 str r3,[r7,#44]
 387:../Libraries/XMCLib/src/xmc_can.c **** 
 388:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 389:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1073              	 .loc 2 389 0
 1074 0074 7B68     	 ldr r3,[r7,#4]
 1075 0076 9B09     	 lsr r3,r3,#6
 1076 0078 BB62     	 str r3,[r7,#40]
 390:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1077              	 .loc 2 390 0
 1078 007a 7B6B     	 ldr r3,[r7,#52]
 1079 007c 9B09     	 lsr r3,r3,#6
 1080 007e 7B62     	 str r3,[r7,#36]
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1081              	 .loc 2 392 0
 1082 0080 BB6A     	 ldr r3,[r7,#40]
 1083 0082 9B02     	 lsl r3,r3,#10
 1084 0084 181C     	 mov r0,r3
 1085 0086 796A     	 ldr r1,[r7,#36]
 1086 0088 FFF7FEFF 	 bl __aeabi_uidiv
 1087 008c 031C     	 mov r3,r0
 1088 008e 1A1C     	 mov r2,r3
 1089 0090 214B     	 ldr r3,.L53
 1090 0092 101C     	 mov r0,r2
 1091 0094 191C     	 mov r1,r3
 1092 0096 FFF7FEFF 	 bl min
 1093 009a 031C     	 mov r3,r0
 1094 009c 3B62     	 str r3,[r7,#32]
 393:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1095              	 .loc 2 393 0
 1096 009e 7B6A     	 ldr r3,[r7,#36]
 1097 00a0 3A6A     	 ldr r2,[r7,#32]
 1098 00a2 5343     	 mul r3,r2
 1099 00a4 9B0A     	 lsr r3,r3,#10
 1100 00a6 FB61     	 str r3,[r7,#28]
 394:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1101              	 .loc 2 394 0
 1102 00a8 FB69     	 ldr r3,[r7,#28]
 1103 00aa 9B01     	 lsl r3,r3,#6
 1104 00ac FB61     	 str r3,[r7,#28]
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1105              	 .loc 2 396 0
 1106 00ae 7A68     	 ldr r2,[r7,#4]
 1107 00b0 FB6A     	 ldr r3,[r7,#44]
 1108 00b2 D11A     	 sub r1,r2,r3
 1109 00b4 7A68     	 ldr r2,[r7,#4]
 1110 00b6 FB69     	 ldr r3,[r7,#28]
 1111 00b8 D01A     	 sub r0,r2,r3
 1112 00ba 1B23     	 mov r3,#27
 1113 00bc FA18     	 add r2,r7,r3
 1114 00be 0023     	 mov r3,#0
 1115 00c0 8842     	 cmp r0,r1
 1116 00c2 5B41     	 adc r3,r3,r3
 1117 00c4 1370     	 strb r3,[r2]
 397:../Libraries/XMCLib/src/xmc_can.c **** 
 398:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1118              	 .loc 2 398 0
 1119 00c6 1B23     	 mov r3,#27
 1120 00c8 FB18     	 add r3,r7,r3
 1121 00ca 1B78     	 ldrb r3,[r3]
 1122 00cc 002B     	 cmp r3,#0
 1123 00ce 01D0     	 beq .L49
 1124              	 .loc 2 398 0 is_stmt 0 discriminator 1
 1125 00d0 3B6B     	 ldr r3,[r7,#48]
 1126 00d2 00E0     	 b .L50
 1127              	.L49:
 1128              	 .loc 2 398 0 discriminator 2
 1129 00d4 3B6A     	 ldr r3,[r7,#32]
 1130              	.L50:
 1131              	 .loc 2 398 0 discriminator 4
 1132 00d6 7B61     	 str r3,[r7,#20]
 399:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1133              	 .loc 2 399 0 is_stmt 1 discriminator 4
 1134 00d8 1B23     	 mov r3,#27
 1135 00da FB18     	 add r3,r7,r3
 1136 00dc 1B78     	 ldrb r3,[r3]
 1137 00de 002B     	 cmp r3,#0
 1138 00e0 01D0     	 beq .L51
 1139              	 .loc 2 399 0 is_stmt 0 discriminator 1
 1140 00e2 0122     	 mov r2,#1
 1141 00e4 00E0     	 b .L52
 1142              	.L51:
 1143              	 .loc 2 399 0 discriminator 2
 1144 00e6 0222     	 mov r2,#2
 1145              	.L52:
 1146              	 .loc 2 399 0 discriminator 4
 1147 00e8 1323     	 mov r3,#19
 1148 00ea FB18     	 add r3,r7,r3
 1149 00ec 1A70     	 strb r2,[r3]
 400:../Libraries/XMCLib/src/xmc_can.c **** 
 401:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1150              	 .loc 2 401 0 is_stmt 1 discriminator 4
 1151 00ee FB68     	 ldr r3,[r7,#12]
 1152 00f0 DB68     	 ldr r3,[r3,#12]
 1153 00f2 0A4A     	 ldr r2,.L53+4
 1154 00f4 1A40     	 and r2,r3
 1155 00f6 FB68     	 ldr r3,[r7,#12]
 1156 00f8 DA60     	 str r2,[r3,#12]
 402:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1157              	 .loc 2 402 0 discriminator 4
 1158 00fa FB68     	 ldr r3,[r7,#12]
 1159 00fc DA68     	 ldr r2,[r3,#12]
 1160 00fe 1323     	 mov r3,#19
 1161 0100 FB18     	 add r3,r7,r3
 1162 0102 1B78     	 ldrb r3,[r3]
 1163 0104 9903     	 lsl r1,r3,#14
 1164 0106 7B69     	 ldr r3,[r7,#20]
 1165 0108 0B43     	 orr r3,r1
 1166 010a 1A43     	 orr r2,r3
 1167 010c FB68     	 ldr r3,[r7,#12]
 1168 010e DA60     	 str r2,[r3,#12]
 403:../Libraries/XMCLib/src/xmc_can.c **** 
 404:../Libraries/XMCLib/src/xmc_can.c **** }
 1169              	 .loc 2 404 0 discriminator 4
 1170 0110 BD46     	 mov sp,r7
 1171 0112 0EB0     	 add sp,sp,#56
 1172              	 
 1173 0114 80BD     	 pop {r7,pc}
 1174              	.L54:
 1175 0116 C046     	 .align 2
 1176              	.L53:
 1177 0118 FF030000 	 .word 1023
 1178 011c 003CFFFF 	 .word -50176
 1179              	 .cfi_endproc
 1180              	.LFE132:
 1182              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1183              	 .align 2
 1184              	 .global XMC_CAN_SetBaudrateClockSource
 1185              	 .code 16
 1186              	 .thumb_func
 1188              	XMC_CAN_SetBaudrateClockSource:
 1189              	.LFB133:
 405:../Libraries/XMCLib/src/xmc_can.c **** 
 406:../Libraries/XMCLib/src/xmc_can.c **** #else
 407:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 408:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 409:../Libraries/XMCLib/src/xmc_can.c **** {
 410:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 411:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 412:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 413:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 414:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 415:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 416:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 417:../Libraries/XMCLib/src/xmc_can.c **** 
 418:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 419:../Libraries/XMCLib/src/xmc_can.c **** 
 420:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 421:../Libraries/XMCLib/src/xmc_can.c **** 
 422:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 423:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 424:../Libraries/XMCLib/src/xmc_can.c **** 
 425:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 426:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 427:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 428:../Libraries/XMCLib/src/xmc_can.c **** 
 429:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 430:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 431:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 432:../Libraries/XMCLib/src/xmc_can.c **** 
 433:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 434:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 435:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 438:../Libraries/XMCLib/src/xmc_can.c **** 
 439:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 440:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 441:../Libraries/XMCLib/src/xmc_can.c **** 
 442:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 443:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 444:../Libraries/XMCLib/src/xmc_can.c **** }
 445:../Libraries/XMCLib/src/xmc_can.c **** #endif
 446:../Libraries/XMCLib/src/xmc_can.c **** 
 447:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 448:../Libraries/XMCLib/src/xmc_can.c **** {
 1190              	 .loc 2 448 0
 1191              	 .cfi_startproc
 1192 0000 80B5     	 push {r7,lr}
 1193              	.LCFI36:
 1194              	 .cfi_def_cfa_offset 8
 1195              	 .cfi_offset 7,-8
 1196              	 .cfi_offset 14,-4
 1197 0002 82B0     	 sub sp,sp,#8
 1198              	.LCFI37:
 1199              	 .cfi_def_cfa_offset 16
 1200 0004 00AF     	 add r7,sp,#0
 1201              	.LCFI38:
 1202              	 .cfi_def_cfa_register 7
 1203 0006 7860     	 str r0,[r7,#4]
 1204 0008 0A1C     	 mov r2,r1
 1205 000a FB1C     	 add r3,r7,#3
 1206 000c 1A70     	 strb r2,[r3]
 449:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 450:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1207              	 .loc 2 450 0
 1208 000e 7A68     	 ldr r2,[r7,#4]
 1209 0010 E423     	 mov r3,#228
 1210 0012 5B00     	 lsl r3,r3,#1
 1211 0014 D358     	 ldr r3,[r2,r3]
 1212 0016 0F22     	 mov r2,#15
 1213 0018 9343     	 bic r3,r2
 1214 001a 1A1C     	 mov r2,r3
 1215 001c FB1C     	 add r3,r7,#3
 1216 001e 1B78     	 ldrb r3,[r3]
 1217 0020 1A43     	 orr r2,r3
 1218 0022 111C     	 mov r1,r2
 1219 0024 7A68     	 ldr r2,[r7,#4]
 1220 0026 E423     	 mov r3,#228
 1221 0028 5B00     	 lsl r3,r3,#1
 1222 002a D150     	 str r1,[r2,r3]
 451:../Libraries/XMCLib/src/xmc_can.c **** #else
 452:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 453:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(source);
 454:../Libraries/XMCLib/src/xmc_can.c **** #endif
 455:../Libraries/XMCLib/src/xmc_can.c **** }
 1223              	 .loc 2 455 0
 1224 002c BD46     	 mov sp,r7
 1225 002e 02B0     	 add sp,sp,#8
 1226              	 
 1227 0030 80BD     	 pop {r7,pc}
 1228              	 .cfi_endproc
 1229              	.LFE133:
 1231 0032 C046     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1232              	 .align 2
 1233              	 .global XMC_CAN_GetBaudrateClockSource
 1234              	 .code 16
 1235              	 .thumb_func
 1237              	XMC_CAN_GetBaudrateClockSource:
 1238              	.LFB134:
 456:../Libraries/XMCLib/src/xmc_can.c **** 
 457:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 458:../Libraries/XMCLib/src/xmc_can.c **** {
 1239              	 .loc 2 458 0
 1240              	 .cfi_startproc
 1241 0000 80B5     	 push {r7,lr}
 1242              	.LCFI39:
 1243              	 .cfi_def_cfa_offset 8
 1244              	 .cfi_offset 7,-8
 1245              	 .cfi_offset 14,-4
 1246 0002 82B0     	 sub sp,sp,#8
 1247              	.LCFI40:
 1248              	 .cfi_def_cfa_offset 16
 1249 0004 00AF     	 add r7,sp,#0
 1250              	.LCFI41:
 1251              	 .cfi_def_cfa_register 7
 1252 0006 7860     	 str r0,[r7,#4]
 459:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 460:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1253              	 .loc 2 460 0
 1254 0008 7A68     	 ldr r2,[r7,#4]
 1255 000a E423     	 mov r3,#228
 1256 000c 5B00     	 lsl r3,r3,#1
 1257 000e D358     	 ldr r3,[r2,r3]
 1258 0010 DBB2     	 uxtb r3,r3
 1259 0012 0F22     	 mov r2,#15
 1260 0014 1340     	 and r3,r2
 1261 0016 DBB2     	 uxtb r3,r3
 461:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 462:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 463:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 464:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 465:../Libraries/XMCLib/src/xmc_can.c **** }
 1262              	 .loc 2 465 0
 1263 0018 181C     	 mov r0,r3
 1264 001a BD46     	 mov sp,r7
 1265 001c 02B0     	 add sp,sp,#8
 1266              	 
 1267 001e 80BD     	 pop {r7,pc}
 1268              	 .cfi_endproc
 1269              	.LFE134:
 1271              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1272              	 .align 2
 1273              	 .global XMC_CAN_GetBaudrateClockFrequency
 1274              	 .code 16
 1275              	 .thumb_func
 1277              	XMC_CAN_GetBaudrateClockFrequency:
 1278              	.LFB135:
 466:../Libraries/XMCLib/src/xmc_can.c **** 
 467:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 468:../Libraries/XMCLib/src/xmc_can.c **** {
 1279              	 .loc 2 468 0
 1280              	 .cfi_startproc
 1281 0000 80B5     	 push {r7,lr}
 1282              	.LCFI42:
 1283              	 .cfi_def_cfa_offset 8
 1284              	 .cfi_offset 7,-8
 1285              	 .cfi_offset 14,-4
 1286 0002 84B0     	 sub sp,sp,#16
 1287              	.LCFI43:
 1288              	 .cfi_def_cfa_offset 24
 1289 0004 00AF     	 add r7,sp,#0
 1290              	.LCFI44:
 1291              	 .cfi_def_cfa_register 7
 1292 0006 7860     	 str r0,[r7,#4]
 469:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 470:../Libraries/XMCLib/src/xmc_can.c **** 
 471:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 472:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1293              	 .loc 2 472 0
 1294 0008 7B68     	 ldr r3,[r7,#4]
 1295 000a 181C     	 mov r0,r3
 1296 000c FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1297 0010 031E     	 sub r3,r0,#0
 1298 0012 012B     	 cmp r3,#1
 1299 0014 02D0     	 beq .L60
 1300 0016 022B     	 cmp r3,#2
 1301 0018 05D0     	 beq .L61
 1302 001a 09E0     	 b .L64
 1303              	.L60:
 473:../Libraries/XMCLib/src/xmc_can.c ****   {
 474:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 475:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 476:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 477:../Libraries/XMCLib/src/xmc_can.c ****       break;
 478:../Libraries/XMCLib/src/xmc_can.c **** #else
 479:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 480:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1304              	 .loc 2 480 0
 1305 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1306 0020 031C     	 mov r3,r0
 1307 0022 FB60     	 str r3,[r7,#12]
 481:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1308              	 .loc 2 481 0
 1309 0024 07E0     	 b .L62
 1310              	.L61:
 482:../Libraries/XMCLib/src/xmc_can.c **** #endif
 483:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 484:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1311              	 .loc 2 484 0
 1312 0026 FFF7FEFF 	 bl OSCHP_GetFrequency
 1313 002a 031C     	 mov r3,r0
 1314 002c FB60     	 str r3,[r7,#12]
 485:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1315              	 .loc 2 485 0
 1316 002e 02E0     	 b .L62
 1317              	.L64:
 486:../Libraries/XMCLib/src/xmc_can.c **** 
 487:../Libraries/XMCLib/src/xmc_can.c ****     default:
 488:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 1318              	 .loc 2 488 0
 1319 0030 0023     	 mov r3,#0
 1320 0032 FB60     	 str r3,[r7,#12]
 489:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1321              	 .loc 2 489 0
 1322 0034 C046     	 mov r8,r8
 1323              	.L62:
 490:../Libraries/XMCLib/src/xmc_can.c ****   }
 491:../Libraries/XMCLib/src/xmc_can.c **** #else
 492:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 493:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 494:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 495:../Libraries/XMCLib/src/xmc_can.c **** 
 496:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1324              	 .loc 2 496 0
 1325 0036 FB68     	 ldr r3,[r7,#12]
 497:../Libraries/XMCLib/src/xmc_can.c **** }
 1326              	 .loc 2 497 0
 1327 0038 181C     	 mov r0,r3
 1328 003a BD46     	 mov sp,r7
 1329 003c 04B0     	 add sp,sp,#16
 1330              	 
 1331 003e 80BD     	 pop {r7,pc}
 1332              	 .cfi_endproc
 1333              	.LFE135:
 1335              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1336              	 .align 2
 1337              	 .global XMC_CAN_InitEx
 1338              	 .code 16
 1339              	 .thumb_func
 1341              	XMC_CAN_InitEx:
 1342              	.LFB136:
 498:../Libraries/XMCLib/src/xmc_can.c **** 
 499:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 500:../Libraries/XMCLib/src/xmc_can.c **** {
 1343              	 .loc 2 500 0
 1344              	 .cfi_startproc
 1345 0000 80B5     	 push {r7,lr}
 1346              	.LCFI45:
 1347              	 .cfi_def_cfa_offset 8
 1348              	 .cfi_offset 7,-8
 1349              	 .cfi_offset 14,-4
 1350 0002 88B0     	 sub sp,sp,#32
 1351              	.LCFI46:
 1352              	 .cfi_def_cfa_offset 40
 1353 0004 00AF     	 add r7,sp,#0
 1354              	.LCFI47:
 1355              	 .cfi_def_cfa_register 7
 1356 0006 F860     	 str r0,[r7,#12]
 1357 0008 7A60     	 str r2,[r7,#4]
 1358 000a 0B23     	 mov r3,#11
 1359 000c FB18     	 add r3,r7,r3
 1360 000e 0A1C     	 add r2,r1,#0
 1361 0010 1A70     	 strb r2,[r3]
 501:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 502:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 503:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 504:../Libraries/XMCLib/src/xmc_can.c **** 
 505:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 506:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1362              	 .loc 2 506 0
 1363 0012 FB68     	 ldr r3,[r7,#12]
 1364 0014 181C     	 mov r0,r3
 1365 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 507:../Libraries/XMCLib/src/xmc_can.c **** 
 508:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1366              	 .loc 2 508 0
 1367 001a FA68     	 ldr r2,[r7,#12]
 1368 001c 0B23     	 mov r3,#11
 1369 001e FB18     	 add r3,r7,r3
 1370 0020 1B78     	 ldrb r3,[r3]
 1371 0022 101C     	 mov r0,r2
 1372 0024 191C     	 mov r1,r3
 1373 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 509:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1374              	 .loc 2 509 0
 1375 002a FB68     	 ldr r3,[r7,#12]
 1376 002c 181C     	 mov r0,r3
 1377 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1378 0032 031C     	 mov r3,r0
 1379 0034 FB61     	 str r3,[r7,#28]
 510:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 511:../Libraries/XMCLib/src/xmc_can.c **** 
 512:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 513:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1380              	 .loc 2 513 0
 1381 0036 F869     	 ldr r0,[r7,#28]
 1382 0038 7968     	 ldr r1,[r7,#4]
 1383 003a FFF7FEFF 	 bl __aeabi_uidiv
 1384 003e 031C     	 mov r3,r0
 1385 0040 1A1C     	 mov r2,r3
 1386 0042 8023     	 mov r3,#128
 1387 0044 DB00     	 lsl r3,r3,#3
 1388 0046 9B1A     	 sub r3,r3,r2
 1389 0048 0020     	 mov r0,#0
 1390 004a 191C     	 mov r1,r3
 1391 004c FFF7FEFF 	 bl max
 1392 0050 021C     	 mov r2,r0
 1393 0052 124B     	 ldr r3,.L67
 1394 0054 101C     	 mov r0,r2
 1395 0056 191C     	 mov r1,r3
 1396 0058 FFF7FEFF 	 bl min
 1397 005c 031C     	 mov r3,r0
 1398 005e BB61     	 str r3,[r7,#24]
 514:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1399              	 .loc 2 514 0
 1400 0060 BB69     	 ldr r3,[r7,#24]
 1401 0062 8022     	 mov r2,#128
 1402 0064 D200     	 lsl r2,r2,#3
 1403 0066 D31A     	 sub r3,r2,r3
 1404 0068 F869     	 ldr r0,[r7,#28]
 1405 006a 191C     	 mov r1,r3
 1406 006c FFF7FEFF 	 bl __aeabi_uidiv
 1407 0070 031C     	 mov r3,r0
 1408 0072 7B61     	 str r3,[r7,#20]
 515:../Libraries/XMCLib/src/xmc_can.c **** 
 516:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1409              	 .loc 2 516 0
 1410 0074 FB68     	 ldr r3,[r7,#12]
 1411 0076 DB68     	 ldr r3,[r3,#12]
 1412 0078 094A     	 ldr r2,.L67+4
 1413 007a 1A40     	 and r2,r3
 1414 007c FB68     	 ldr r3,[r7,#12]
 1415 007e DA60     	 str r2,[r3,#12]
 517:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1416              	 .loc 2 517 0
 1417 0080 FB68     	 ldr r3,[r7,#12]
 1418 0082 DA68     	 ldr r2,[r3,#12]
 1419 0084 BB69     	 ldr r3,[r7,#24]
 1420 0086 1343     	 orr r3,r2
 1421 0088 8022     	 mov r2,#128
 1422 008a D201     	 lsl r2,r2,#7
 1423 008c 1A43     	 orr r2,r3
 1424 008e FB68     	 ldr r3,[r7,#12]
 1425 0090 DA60     	 str r2,[r3,#12]
 518:../Libraries/XMCLib/src/xmc_can.c **** 
 519:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1426              	 .loc 2 519 0
 1427 0092 7B69     	 ldr r3,[r7,#20]
 520:../Libraries/XMCLib/src/xmc_can.c **** }
 1428              	 .loc 2 520 0
 1429 0094 181C     	 mov r0,r3
 1430 0096 BD46     	 mov sp,r7
 1431 0098 08B0     	 add sp,sp,#32
 1432              	 
 1433 009a 80BD     	 pop {r7,pc}
 1434              	.L68:
 1435              	 .align 2
 1436              	.L67:
 1437 009c FF030000 	 .word 1023
 1438 00a0 003CFFFF 	 .word -50176
 1439              	 .cfi_endproc
 1440              	.LFE136:
 1442              	 .section .text.XMC_CAN_GetClockFrequency,"ax",%progbits
 1443              	 .align 2
 1444              	 .global XMC_CAN_GetClockFrequency
 1445              	 .code 16
 1446              	 .thumb_func
 1448              	XMC_CAN_GetClockFrequency:
 1449              	.LFB137:
 521:../Libraries/XMCLib/src/xmc_can.c **** 
 522:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj)
 523:../Libraries/XMCLib/src/xmc_can.c **** {
 1450              	 .loc 2 523 0
 1451              	 .cfi_startproc
 1452 0000 80B5     	 push {r7,lr}
 1453              	.LCFI48:
 1454              	 .cfi_def_cfa_offset 8
 1455              	 .cfi_offset 7,-8
 1456              	 .cfi_offset 14,-4
 1457 0002 84B0     	 sub sp,sp,#16
 1458              	.LCFI49:
 1459              	 .cfi_def_cfa_offset 24
 1460 0004 00AF     	 add r7,sp,#0
 1461              	.LCFI50:
 1462              	 .cfi_def_cfa_register 7
 1463 0006 7860     	 str r0,[r7,#4]
 524:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n = (obj->FDR & CAN_FDR_STEP_Msk) >> CAN_FDR_STEP_Pos;
 1464              	 .loc 2 524 0
 1465 0008 7B68     	 ldr r3,[r7,#4]
 1466 000a DB68     	 ldr r3,[r3,#12]
 1467 000c 9B05     	 lsl r3,r3,#22
 1468 000e 9B0D     	 lsr r3,r3,#22
 1469 0010 FB60     	 str r3,[r7,#12]
 525:../Libraries/XMCLib/src/xmc_can.c ****   return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
 1470              	 .loc 2 525 0
 1471 0012 7B68     	 ldr r3,[r7,#4]
 1472 0014 181C     	 mov r0,r3
 1473 0016 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1474 001a 011C     	 mov r1,r0
 1475 001c FB68     	 ldr r3,[r7,#12]
 1476 001e 8022     	 mov r2,#128
 1477 0020 D200     	 lsl r2,r2,#3
 1478 0022 D31A     	 sub r3,r2,r3
 1479 0024 4B43     	 mul r3,r1
 526:../Libraries/XMCLib/src/xmc_can.c **** }
 1480              	 .loc 2 526 0
 1481 0026 181C     	 mov r0,r3
 1482 0028 BD46     	 mov sp,r7
 1483 002a 04B0     	 add sp,sp,#16
 1484              	 
 1485 002c 80BD     	 pop {r7,pc}
 1486              	 .cfi_endproc
 1487              	.LFE137:
 1489 002e C046     	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1490              	 .align 2
 1491              	 .global XMC_CAN_MO_SetIdentifier
 1492              	 .code 16
 1493              	 .thumb_func
 1495              	XMC_CAN_MO_SetIdentifier:
 1496              	.LFB138:
 527:../Libraries/XMCLib/src/xmc_can.c **** 
 528:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 529:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 530:../Libraries/XMCLib/src/xmc_can.c **** {
 1497              	 .loc 2 530 0
 1498              	 .cfi_startproc
 1499 0000 80B5     	 push {r7,lr}
 1500              	.LCFI51:
 1501              	 .cfi_def_cfa_offset 8
 1502              	 .cfi_offset 7,-8
 1503              	 .cfi_offset 14,-4
 1504 0002 82B0     	 sub sp,sp,#8
 1505              	.LCFI52:
 1506              	 .cfi_def_cfa_offset 16
 1507 0004 00AF     	 add r7,sp,#0
 1508              	.LCFI53:
 1509              	 .cfi_def_cfa_register 7
 1510 0006 7860     	 str r0,[r7,#4]
 1511 0008 3960     	 str r1,[r7]
 531:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1512              	 .loc 2 531 0
 1513 000a 7B68     	 ldr r3,[r7,#4]
 1514 000c 1B68     	 ldr r3,[r3]
 1515 000e 9A69     	 ldr r2,[r3,#24]
 1516 0010 8023     	 mov r3,#128
 1517 0012 9B05     	 lsl r3,r3,#22
 1518 0014 1340     	 and r3,r2
 1519 0016 0DD1     	 bne .L72
 532:../Libraries/XMCLib/src/xmc_can.c ****   {
 533:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1520              	 .loc 2 533 0
 1521 0018 7B68     	 ldr r3,[r7,#4]
 1522 001a 1B68     	 ldr r3,[r3]
 1523 001c 7A68     	 ldr r2,[r7,#4]
 1524 001e 1268     	 ldr r2,[r2]
 1525 0020 9269     	 ldr r2,[r2,#24]
 1526 0022 520F     	 lsr r2,r2,#29
 1527 0024 5107     	 lsl r1,r2,#29
 534:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1528              	 .loc 2 534 0
 1529 0026 3A68     	 ldr r2,[r7]
 1530 0028 9204     	 lsl r2,r2,#18
 1531 002a D200     	 lsl r2,r2,#3
 1532 002c D208     	 lsr r2,r2,#3
 533:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1533              	 .loc 2 533 0
 1534 002e 0A43     	 orr r2,r1
 1535 0030 9A61     	 str r2,[r3,#24]
 1536 0032 0BE0     	 b .L73
 1537              	.L72:
 535:../Libraries/XMCLib/src/xmc_can.c ****   }
 536:../Libraries/XMCLib/src/xmc_can.c ****   else
 537:../Libraries/XMCLib/src/xmc_can.c ****   {
 538:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1538              	 .loc 2 538 0
 1539 0034 7B68     	 ldr r3,[r7,#4]
 1540 0036 1B68     	 ldr r3,[r3]
 1541 0038 7A68     	 ldr r2,[r7,#4]
 1542 003a 1268     	 ldr r2,[r2]
 1543 003c 9269     	 ldr r2,[r2,#24]
 1544 003e 520F     	 lsr r2,r2,#29
 1545 0040 5107     	 lsl r1,r2,#29
 539:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1546              	 .loc 2 539 0
 1547 0042 3A68     	 ldr r2,[r7]
 1548 0044 D200     	 lsl r2,r2,#3
 1549 0046 D208     	 lsr r2,r2,#3
 538:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1550              	 .loc 2 538 0
 1551 0048 0A43     	 orr r2,r1
 1552 004a 9A61     	 str r2,[r3,#24]
 1553              	.L73:
 540:../Libraries/XMCLib/src/xmc_can.c ****   }
 541:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1554              	 .loc 2 541 0
 1555 004c 3B68     	 ldr r3,[r7]
 1556 004e DB00     	 lsl r3,r3,#3
 1557 0050 DA08     	 lsr r2,r3,#3
 1558 0052 7B68     	 ldr r3,[r7,#4]
 1559 0054 D200     	 lsl r2,r2,#3
 1560 0056 D208     	 lsr r2,r2,#3
 1561 0058 5968     	 ldr r1,[r3,#4]
 1562 005a 490F     	 lsr r1,r1,#29
 1563 005c 4907     	 lsl r1,r1,#29
 1564 005e 0A43     	 orr r2,r1
 1565 0060 5A60     	 str r2,[r3,#4]
 542:../Libraries/XMCLib/src/xmc_can.c **** }
 1566              	 .loc 2 542 0
 1567 0062 BD46     	 mov sp,r7
 1568 0064 02B0     	 add sp,sp,#8
 1569              	 
 1570 0066 80BD     	 pop {r7,pc}
 1571              	 .cfi_endproc
 1572              	.LFE138:
 1574              	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1575              	 .align 2
 1576              	 .global XMC_CAN_MO_GetIdentifier
 1577              	 .code 16
 1578              	 .thumb_func
 1580              	XMC_CAN_MO_GetIdentifier:
 1581              	.LFB139:
 543:../Libraries/XMCLib/src/xmc_can.c **** 
 544:../Libraries/XMCLib/src/xmc_can.c **** 
 545:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 546:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 547:../Libraries/XMCLib/src/xmc_can.c **** {
 1582              	 .loc 2 547 0
 1583              	 .cfi_startproc
 1584 0000 80B5     	 push {r7,lr}
 1585              	.LCFI54:
 1586              	 .cfi_def_cfa_offset 8
 1587              	 .cfi_offset 7,-8
 1588              	 .cfi_offset 14,-4
 1589 0002 84B0     	 sub sp,sp,#16
 1590              	.LCFI55:
 1591              	 .cfi_def_cfa_offset 24
 1592 0004 00AF     	 add r7,sp,#0
 1593              	.LCFI56:
 1594              	 .cfi_def_cfa_register 7
 1595 0006 7860     	 str r0,[r7,#4]
 548:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 549:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1596              	 .loc 2 549 0
 1597 0008 7B68     	 ldr r3,[r7,#4]
 1598 000a 1B68     	 ldr r3,[r3]
 1599 000c 9A69     	 ldr r2,[r3,#24]
 1600 000e 8023     	 mov r3,#128
 1601 0010 9B05     	 lsl r3,r3,#22
 1602 0012 1340     	 and r3,r2
 1603 0014 07D1     	 bne .L75
 550:../Libraries/XMCLib/src/xmc_can.c ****   {
 551:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1604              	 .loc 2 551 0
 1605 0016 7B68     	 ldr r3,[r7,#4]
 1606 0018 1B68     	 ldr r3,[r3]
 1607 001a 9B69     	 ldr r3,[r3,#24]
 1608 001c DB00     	 lsl r3,r3,#3
 1609 001e DB08     	 lsr r3,r3,#3
 1610 0020 9B0C     	 lsr r3,r3,#18
 1611 0022 FB60     	 str r3,[r7,#12]
 1612 0024 05E0     	 b .L76
 1613              	.L75:
 552:../Libraries/XMCLib/src/xmc_can.c ****   }
 553:../Libraries/XMCLib/src/xmc_can.c ****   else
 554:../Libraries/XMCLib/src/xmc_can.c ****   {
 555:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1614              	 .loc 2 555 0
 1615 0026 7B68     	 ldr r3,[r7,#4]
 1616 0028 1B68     	 ldr r3,[r3]
 1617 002a 9B69     	 ldr r3,[r3,#24]
 1618 002c DB00     	 lsl r3,r3,#3
 1619 002e DB08     	 lsr r3,r3,#3
 1620 0030 FB60     	 str r3,[r7,#12]
 1621              	.L76:
 556:../Libraries/XMCLib/src/xmc_can.c ****   }
 557:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1622              	 .loc 2 557 0
 1623 0032 FB68     	 ldr r3,[r7,#12]
 558:../Libraries/XMCLib/src/xmc_can.c **** }
 1624              	 .loc 2 558 0
 1625 0034 181C     	 mov r0,r3
 1626 0036 BD46     	 mov sp,r7
 1627 0038 04B0     	 add sp,sp,#16
 1628              	 
 1629 003a 80BD     	 pop {r7,pc}
 1630              	 .cfi_endproc
 1631              	.LFE139:
 1633              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1634              	 .align 2
 1635              	 .global XMC_CAN_MO_GetAcceptanceMask
 1636              	 .code 16
 1637              	 .thumb_func
 1639              	XMC_CAN_MO_GetAcceptanceMask:
 1640              	.LFB140:
 559:../Libraries/XMCLib/src/xmc_can.c **** 
 560:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 561:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 562:../Libraries/XMCLib/src/xmc_can.c **** {
 1641              	 .loc 2 562 0
 1642              	 .cfi_startproc
 1643 0000 80B5     	 push {r7,lr}
 1644              	.LCFI57:
 1645              	 .cfi_def_cfa_offset 8
 1646              	 .cfi_offset 7,-8
 1647              	 .cfi_offset 14,-4
 1648 0002 84B0     	 sub sp,sp,#16
 1649              	.LCFI58:
 1650              	 .cfi_def_cfa_offset 24
 1651 0004 00AF     	 add r7,sp,#0
 1652              	.LCFI59:
 1653              	 .cfi_def_cfa_register 7
 1654 0006 7860     	 str r0,[r7,#4]
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 564:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1655              	 .loc 2 564 0
 1656 0008 7B68     	 ldr r3,[r7,#4]
 1657 000a 1B68     	 ldr r3,[r3]
 1658 000c DA68     	 ldr r2,[r3,#12]
 1659 000e 8023     	 mov r3,#128
 1660 0010 9B05     	 lsl r3,r3,#22
 1661 0012 1340     	 and r3,r2
 1662 0014 0ED1     	 bne .L79
 565:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1663              	 .loc 2 565 0
 1664 0016 7B68     	 ldr r3,[r7,#4]
 1665 0018 1B68     	 ldr r3,[r3]
 1666 001a 9A69     	 ldr r2,[r3,#24]
 1667 001c 8023     	 mov r3,#128
 1668 001e 9B05     	 lsl r3,r3,#22
 1669 0020 1340     	 and r3,r2
 1670 0022 07D1     	 bne .L79
 566:../Libraries/XMCLib/src/xmc_can.c ****   {
 567:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1671              	 .loc 2 567 0
 1672 0024 7B68     	 ldr r3,[r7,#4]
 1673 0026 1B68     	 ldr r3,[r3]
 1674 0028 DB68     	 ldr r3,[r3,#12]
 1675 002a DB00     	 lsl r3,r3,#3
 1676 002c DB08     	 lsr r3,r3,#3
 1677 002e 9B0C     	 lsr r3,r3,#18
 1678 0030 FB60     	 str r3,[r7,#12]
 1679 0032 05E0     	 b .L80
 1680              	.L79:
 568:../Libraries/XMCLib/src/xmc_can.c ****   }
 569:../Libraries/XMCLib/src/xmc_can.c ****   else
 570:../Libraries/XMCLib/src/xmc_can.c ****   {
 571:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1681              	 .loc 2 571 0
 1682 0034 7B68     	 ldr r3,[r7,#4]
 1683 0036 1B68     	 ldr r3,[r3]
 1684 0038 DB68     	 ldr r3,[r3,#12]
 1685 003a DB00     	 lsl r3,r3,#3
 1686 003c DB08     	 lsr r3,r3,#3
 1687 003e FB60     	 str r3,[r7,#12]
 1688              	.L80:
 572:../Libraries/XMCLib/src/xmc_can.c ****   }
 573:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1689              	 .loc 2 573 0
 1690 0040 FB68     	 ldr r3,[r7,#12]
 574:../Libraries/XMCLib/src/xmc_can.c **** }
 1691              	 .loc 2 574 0
 1692 0042 181C     	 mov r0,r3
 1693 0044 BD46     	 mov sp,r7
 1694 0046 04B0     	 add sp,sp,#16
 1695              	 
 1696 0048 80BD     	 pop {r7,pc}
 1697              	 .cfi_endproc
 1698              	.LFE140:
 1700 004a C046     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1701              	 .align 2
 1702              	 .global XMC_CAN_MO_SetAcceptanceMask
 1703              	 .code 16
 1704              	 .thumb_func
 1706              	XMC_CAN_MO_SetAcceptanceMask:
 1707              	.LFB141:
 575:../Libraries/XMCLib/src/xmc_can.c **** 
 576:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 577:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 578:../Libraries/XMCLib/src/xmc_can.c **** {
 1708              	 .loc 2 578 0
 1709              	 .cfi_startproc
 1710 0000 80B5     	 push {r7,lr}
 1711              	.LCFI60:
 1712              	 .cfi_def_cfa_offset 8
 1713              	 .cfi_offset 7,-8
 1714              	 .cfi_offset 14,-4
 1715 0002 82B0     	 sub sp,sp,#8
 1716              	.LCFI61:
 1717              	 .cfi_def_cfa_offset 16
 1718 0004 00AF     	 add r7,sp,#0
 1719              	.LCFI62:
 1720              	 .cfi_def_cfa_register 7
 1721 0006 7860     	 str r0,[r7,#4]
 1722 0008 3960     	 str r1,[r7]
 579:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1723              	 .loc 2 579 0
 1724 000a 7B68     	 ldr r3,[r7,#4]
 1725 000c 1B68     	 ldr r3,[r3]
 1726 000e DA68     	 ldr r2,[r3,#12]
 1727 0010 8023     	 mov r3,#128
 1728 0012 9B05     	 lsl r3,r3,#22
 1729 0014 1340     	 and r3,r2
 1730 0016 12D1     	 bne .L83
 580:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1731              	 .loc 2 580 0
 1732 0018 7B68     	 ldr r3,[r7,#4]
 1733 001a 1B68     	 ldr r3,[r3]
 1734 001c 9A69     	 ldr r2,[r3,#24]
 1735 001e 8023     	 mov r3,#128
 1736 0020 9B05     	 lsl r3,r3,#22
 1737 0022 1340     	 and r3,r2
 1738 0024 0BD1     	 bne .L83
 581:../Libraries/XMCLib/src/xmc_can.c ****   {
 582:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1739              	 .loc 2 582 0
 1740 0026 7B68     	 ldr r3,[r7,#4]
 1741 0028 1B68     	 ldr r3,[r3]
 1742 002a 7A68     	 ldr r2,[r7,#4]
 1743 002c 1268     	 ldr r2,[r2]
 1744 002e D268     	 ldr r2,[r2,#12]
 1745 0030 520F     	 lsr r2,r2,#29
 1746 0032 5107     	 lsl r1,r2,#29
 583:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1747              	 .loc 2 583 0
 1748 0034 3A68     	 ldr r2,[r7]
 1749 0036 9204     	 lsl r2,r2,#18
 582:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1750              	 .loc 2 582 0
 1751 0038 0A43     	 orr r2,r1
 1752 003a DA60     	 str r2,[r3,#12]
 1753 003c 0BE0     	 b .L84
 1754              	.L83:
 584:../Libraries/XMCLib/src/xmc_can.c ****   }
 585:../Libraries/XMCLib/src/xmc_can.c ****   else
 586:../Libraries/XMCLib/src/xmc_can.c ****   {
 587:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1755              	 .loc 2 587 0
 1756 003e 7B68     	 ldr r3,[r7,#4]
 1757 0040 1B68     	 ldr r3,[r3]
 1758 0042 7A68     	 ldr r2,[r7,#4]
 1759 0044 1268     	 ldr r2,[r2]
 1760 0046 D268     	 ldr r2,[r2,#12]
 1761 0048 520F     	 lsr r2,r2,#29
 1762 004a 5107     	 lsl r1,r2,#29
 588:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1763              	 .loc 2 588 0
 1764 004c 3A68     	 ldr r2,[r7]
 1765 004e D200     	 lsl r2,r2,#3
 1766 0050 D208     	 lsr r2,r2,#3
 587:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1767              	 .loc 2 587 0
 1768 0052 0A43     	 orr r2,r1
 1769 0054 DA60     	 str r2,[r3,#12]
 1770              	.L84:
 589:../Libraries/XMCLib/src/xmc_can.c ****   }
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1771              	 .loc 2 590 0
 1772 0056 3B68     	 ldr r3,[r7]
 1773 0058 DB00     	 lsl r3,r3,#3
 1774 005a DA08     	 lsr r2,r3,#3
 1775 005c 7B68     	 ldr r3,[r7,#4]
 1776 005e D200     	 lsl r2,r2,#3
 1777 0060 D208     	 lsr r2,r2,#3
 1778 0062 9968     	 ldr r1,[r3,#8]
 1779 0064 490F     	 lsr r1,r1,#29
 1780 0066 4907     	 lsl r1,r1,#29
 1781 0068 0A43     	 orr r2,r1
 1782 006a 9A60     	 str r2,[r3,#8]
 591:../Libraries/XMCLib/src/xmc_can.c **** }
 1783              	 .loc 2 591 0
 1784 006c BD46     	 mov sp,r7
 1785 006e 02B0     	 add sp,sp,#8
 1786              	 
 1787 0070 80BD     	 pop {r7,pc}
 1788              	 .cfi_endproc
 1789              	.LFE141:
 1791 0072 C046     	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1792              	 .align 2
 1793              	 .global XMC_CAN_MO_Config
 1794              	 .code 16
 1795              	 .thumb_func
 1797              	XMC_CAN_MO_Config:
 1798              	.LFB142:
 592:../Libraries/XMCLib/src/xmc_can.c **** 
 593:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 594:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 595:../Libraries/XMCLib/src/xmc_can.c **** {
 1799              	 .loc 2 595 0
 1800              	 .cfi_startproc
 1801 0000 80B5     	 push {r7,lr}
 1802              	.LCFI63:
 1803              	 .cfi_def_cfa_offset 8
 1804              	 .cfi_offset 7,-8
 1805              	 .cfi_offset 14,-4
 1806 0002 86B0     	 sub sp,sp,#24
 1807              	.LCFI64:
 1808              	 .cfi_def_cfa_offset 32
 1809 0004 00AF     	 add r7,sp,#0
 1810              	.LCFI65:
 1811              	 .cfi_def_cfa_register 7
 1812 0006 7860     	 str r0,[r7,#4]
 596:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 597:../Libraries/XMCLib/src/xmc_can.c ****   
 598:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 599:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1813              	 .loc 2 599 0
 1814 0008 7B68     	 ldr r3,[r7,#4]
 1815 000a 1B68     	 ldr r3,[r3]
 1816 000c 484A     	 ldr r2,.L92
 1817 000e 9446     	 mov ip,r2
 1818 0010 6344     	 add r3,r3,ip
 1819 0012 5B09     	 lsr r3,r3,#5
 1820 0014 7B61     	 str r3,[r7,#20]
 600:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1821              	 .loc 2 600 0
 1822 0016 7B69     	 ldr r3,[r7,#20]
 1823 0018 5B09     	 lsr r3,r3,#5
 1824 001a 5A03     	 lsl r2,r3,#13
 1825 001c 7B69     	 ldr r3,[r7,#20]
 1826 001e 1F21     	 mov r1,#31
 1827 0020 0B40     	 and r3,r1
 1828 0022 1B02     	 lsl r3,r3,#8
 1829 0024 1343     	 orr r3,r2
 1830 0026 3B61     	 str r3,[r7,#16]
 601:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1831              	 .loc 2 601 0
 1832 0028 7B68     	 ldr r3,[r7,#4]
 1833 002a 1B68     	 ldr r3,[r3]
 1834 002c 7A68     	 ldr r2,[r7,#4]
 1835 002e 1268     	 ldr r2,[r2]
 1836 0030 9268     	 ldr r2,[r2,#8]
 1837 0032 4049     	 ldr r1,.L92+4
 1838 0034 0A40     	 and r2,r1
 1839 0036 9A60     	 str r2,[r3,#8]
 602:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1840              	 .loc 2 602 0
 1841 0038 7B68     	 ldr r3,[r7,#4]
 1842 003a 1B68     	 ldr r3,[r3]
 1843 003c 7A68     	 ldr r2,[r7,#4]
 1844 003e 1268     	 ldr r2,[r2]
 1845 0040 9168     	 ldr r1,[r2,#8]
 1846 0042 3A69     	 ldr r2,[r7,#16]
 1847 0044 0A43     	 orr r2,r1
 1848 0046 9A60     	 str r2,[r3,#8]
 603:../Libraries/XMCLib/src/xmc_can.c ****   
 604:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1849              	 .loc 2 604 0
 1850 0048 7B68     	 ldr r3,[r7,#4]
 1851 004a DB79     	 ldrb r3,[r3,#7]
 1852 004c 2022     	 mov r2,#32
 1853 004e 1340     	 and r3,r2
 1854 0050 DBB2     	 uxtb r3,r3
 1855 0052 002B     	 cmp r3,#0
 1856 0054 07D0     	 beq .L86
 605:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1857              	 .loc 2 605 0 discriminator 1
 1858 0056 7B68     	 ldr r3,[r7,#4]
 1859 0058 DB79     	 ldrb r3,[r3,#7]
 1860 005a 2022     	 mov r2,#32
 1861 005c 1340     	 and r3,r2
 1862 005e DBB2     	 uxtb r3,r3
 604:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1863              	 .loc 2 604 0 discriminator 1
 1864 0060 002B     	 cmp r3,#0
 1865 0062 00D1     	 bne .L86
 604:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1866              	 .loc 2 604 0 is_stmt 0
 1867 0064 61E0     	 b .L85
 1868              	.L86:
 606:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1869              	 .loc 2 606 0 is_stmt 1
 1870 0066 7B68     	 ldr r3,[r7,#4]
 1871 0068 1B7E     	 ldrb r3,[r3,#24]
 605:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1872              	 .loc 2 605 0
 1873 006a 002B     	 cmp r3,#0
 1874 006c 04D0     	 beq .L88
 607:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1875              	 .loc 2 607 0
 1876 006e 7B68     	 ldr r3,[r7,#4]
 1877 0070 1B7E     	 ldrb r3,[r3,#24]
 606:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1878              	 .loc 2 606 0
 1879 0072 012B     	 cmp r3,#1
 1880 0074 00D0     	 beq .L88
 1881 0076 58E0     	 b .L85
 1882              	.L88:
 608:../Libraries/XMCLib/src/xmc_can.c ****   {
 609:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 610:../Libraries/XMCLib/src/xmc_can.c ****   }
 611:../Libraries/XMCLib/src/xmc_can.c ****   else
 612:../Libraries/XMCLib/src/xmc_can.c ****   {
 613:../Libraries/XMCLib/src/xmc_can.c **** 
 614:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 615:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1883              	 .loc 2 615 0
 1884 0078 7B68     	 ldr r3,[r7,#4]
 1885 007a 1B68     	 ldr r3,[r3]
 1886 007c 2022     	 mov r2,#32
 1887 007e DA61     	 str r2,[r3,#28]
 616:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1888              	 .loc 2 616 0
 1889 0080 7B68     	 ldr r3,[r7,#4]
 1890 0082 DB79     	 ldrb r3,[r3,#7]
 1891 0084 2022     	 mov r2,#32
 1892 0086 1340     	 and r3,r2
 1893 0088 DBB2     	 uxtb r3,r3
 1894 008a 002B     	 cmp r3,#0
 1895 008c 28D1     	 bne .L89
 617:../Libraries/XMCLib/src/xmc_can.c ****     {
 618:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1896              	 .loc 2 618 0
 1897 008e 7B68     	 ldr r3,[r7,#4]
 1898 0090 5B68     	 ldr r3,[r3,#4]
 1899 0092 FB60     	 str r3,[r7,#12]
 619:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1900              	 .loc 2 619 0
 1901 0094 FB68     	 ldr r3,[r7,#12]
 1902 0096 5B0F     	 lsr r3,r3,#29
 1903 0098 5B07     	 lsl r3,r3,#29
 1904 009a FB60     	 str r3,[r7,#12]
 620:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1905              	 .loc 2 620 0
 1906 009c 7B68     	 ldr r3,[r7,#4]
 1907 009e 5B68     	 ldr r3,[r3,#4]
 1908 00a0 DB00     	 lsl r3,r3,#3
 1909 00a2 DB08     	 lsr r3,r3,#3
 1910 00a4 9B04     	 lsl r3,r3,#18
 1911 00a6 1A1C     	 mov r2,r3
 1912 00a8 FB68     	 ldr r3,[r7,#12]
 1913 00aa 1343     	 orr r3,r2
 1914 00ac FB60     	 str r3,[r7,#12]
 621:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1915              	 .loc 2 621 0
 1916 00ae 7B68     	 ldr r3,[r7,#4]
 1917 00b0 1B68     	 ldr r3,[r3]
 1918 00b2 FA68     	 ldr r2,[r7,#12]
 1919 00b4 9A61     	 str r2,[r3,#24]
 622:../Libraries/XMCLib/src/xmc_can.c **** 
 623:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1920              	 .loc 2 623 0
 1921 00b6 7B68     	 ldr r3,[r7,#4]
 1922 00b8 9B68     	 ldr r3,[r3,#8]
 1923 00ba FB60     	 str r3,[r7,#12]
 624:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1924              	 .loc 2 624 0
 1925 00bc FB68     	 ldr r3,[r7,#12]
 1926 00be 5B0F     	 lsr r3,r3,#29
 1927 00c0 5B07     	 lsl r3,r3,#29
 1928 00c2 FB60     	 str r3,[r7,#12]
 625:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1929              	 .loc 2 625 0
 1930 00c4 7B68     	 ldr r3,[r7,#4]
 1931 00c6 9B68     	 ldr r3,[r3,#8]
 1932 00c8 DB00     	 lsl r3,r3,#3
 1933 00ca DB08     	 lsr r3,r3,#3
 1934 00cc 9B04     	 lsl r3,r3,#18
 1935 00ce 1A1C     	 mov r2,r3
 1936 00d0 FB68     	 ldr r3,[r7,#12]
 1937 00d2 1343     	 orr r3,r2
 1938 00d4 FB60     	 str r3,[r7,#12]
 626:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1939              	 .loc 2 626 0
 1940 00d6 7B68     	 ldr r3,[r7,#4]
 1941 00d8 1B68     	 ldr r3,[r3]
 1942 00da FA68     	 ldr r2,[r7,#12]
 1943 00dc DA60     	 str r2,[r3,#12]
 1944 00de 09E0     	 b .L90
 1945              	.L89:
 627:../Libraries/XMCLib/src/xmc_can.c ****     }
 628:../Libraries/XMCLib/src/xmc_can.c ****     else
 629:../Libraries/XMCLib/src/xmc_can.c ****     {
 630:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1946              	 .loc 2 630 0
 1947 00e0 7B68     	 ldr r3,[r7,#4]
 1948 00e2 1B68     	 ldr r3,[r3]
 1949 00e4 7A68     	 ldr r2,[r7,#4]
 1950 00e6 5268     	 ldr r2,[r2,#4]
 1951 00e8 9A61     	 str r2,[r3,#24]
 631:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1952              	 .loc 2 631 0
 1953 00ea 7B68     	 ldr r3,[r7,#4]
 1954 00ec 1B68     	 ldr r3,[r3]
 1955 00ee 7A68     	 ldr r2,[r7,#4]
 1956 00f0 9268     	 ldr r2,[r2,#8]
 1957 00f2 DA60     	 str r2,[r3,#12]
 1958              	.L90:
 632:../Libraries/XMCLib/src/xmc_can.c ****     }
 633:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 634:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1959              	 .loc 2 634 0
 1960 00f4 7B68     	 ldr r3,[r7,#4]
 1961 00f6 1B7E     	 ldrb r3,[r3,#24]
 1962 00f8 012B     	 cmp r3,#1
 1963 00fa 0DD1     	 bne .L91
 635:../Libraries/XMCLib/src/xmc_can.c ****     {
 636:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 637:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1964              	 .loc 2 637 0
 1965 00fc 7B68     	 ldr r3,[r7,#4]
 1966 00fe 181C     	 mov r0,r3
 1967 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 638:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1968              	 .loc 2 638 0
 1969 0104 7B68     	 ldr r3,[r7,#4]
 1970 0106 1B68     	 ldr r3,[r3]
 1971 0108 8022     	 mov r2,#128
 1972 010a 1205     	 lsl r2,r2,#20
 1973 010c DA61     	 str r2,[r3,#28]
 639:../Libraries/XMCLib/src/xmc_can.c **** 
 640:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 641:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1974              	 .loc 2 641 0
 1975 010e 7B68     	 ldr r3,[r7,#4]
 1976 0110 1B68     	 ldr r3,[r3]
 1977 0112 094A     	 ldr r2,.L92+8
 1978 0114 DA61     	 str r2,[r3,#28]
 1979 0116 08E0     	 b .L85
 1980              	.L91:
 642:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 643:../Libraries/XMCLib/src/xmc_can.c ****     }
 644:../Libraries/XMCLib/src/xmc_can.c ****     else
 645:../Libraries/XMCLib/src/xmc_can.c ****     {
 646:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 647:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1981              	 .loc 2 647 0
 1982 0118 7B68     	 ldr r3,[r7,#4]
 1983 011a 1B68     	 ldr r3,[r3]
 1984 011c 8022     	 mov r2,#128
 1985 011e 1201     	 lsl r2,r2,#4
 1986 0120 DA61     	 str r2,[r3,#28]
 648:../Libraries/XMCLib/src/xmc_can.c **** 
 649:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 650:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1987              	 .loc 2 650 0
 1988 0122 7B68     	 ldr r3,[r7,#4]
 1989 0124 1B68     	 ldr r3,[r3]
 1990 0126 054A     	 ldr r2,.L92+12
 1991 0128 DA61     	 str r2,[r3,#28]
 1992              	.L85:
 651:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 652:../Libraries/XMCLib/src/xmc_can.c ****     }
 653:../Libraries/XMCLib/src/xmc_can.c **** 
 654:../Libraries/XMCLib/src/xmc_can.c ****   }
 655:../Libraries/XMCLib/src/xmc_can.c **** }
 1993              	 .loc 2 655 0
 1994 012a BD46     	 mov sp,r7
 1995 012c 06B0     	 add sp,sp,#24
 1996              	 
 1997 012e 80BD     	 pop {r7,pc}
 1998              	.L93:
 1999              	 .align 2
 2000              	.L92:
 2001 0130 00F0FBAF 	 .word -1342443520
 2002 0134 FF00FFFF 	 .word -65281
 2003 0138 C0002006 	 .word 102760640
 2004 013c 4006A000 	 .word 10487360
 2005              	 .cfi_endproc
 2006              	.LFE142:
 2008              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 2009              	 .align 2
 2010              	 .global XMC_CAN_MO_UpdateData
 2011              	 .code 16
 2012              	 .thumb_func
 2014              	XMC_CAN_MO_UpdateData:
 2015              	.LFB143:
 656:../Libraries/XMCLib/src/xmc_can.c **** 
 657:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 658:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 659:../Libraries/XMCLib/src/xmc_can.c **** {
 2016              	 .loc 2 659 0
 2017              	 .cfi_startproc
 2018 0000 80B5     	 push {r7,lr}
 2019              	.LCFI66:
 2020              	 .cfi_def_cfa_offset 8
 2021              	 .cfi_offset 7,-8
 2022              	 .cfi_offset 14,-4
 2023 0002 84B0     	 sub sp,sp,#16
 2024              	.LCFI67:
 2025              	 .cfi_def_cfa_offset 24
 2026 0004 00AF     	 add r7,sp,#0
 2027              	.LCFI68:
 2028              	 .cfi_def_cfa_register 7
 2029 0006 7860     	 str r0,[r7,#4]
 660:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2030              	 .loc 2 660 0
 2031 0008 0F23     	 mov r3,#15
 2032 000a FB18     	 add r3,r7,r3
 2033 000c 0322     	 mov r2,#3
 2034 000e 1A70     	 strb r2,[r3]
 661:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 662:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 2035              	 .loc 2 662 0
 2036 0010 7B68     	 ldr r3,[r7,#4]
 2037 0012 1B7E     	 ldrb r3,[r3,#24]
 2038 0014 012B     	 cmp r3,#1
 2039 0016 25D1     	 bne .L95
 663:../Libraries/XMCLib/src/xmc_can.c ****   {
 664:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 2040              	 .loc 2 664 0
 2041 0018 7B68     	 ldr r3,[r7,#4]
 2042 001a 1B68     	 ldr r3,[r3]
 2043 001c 2022     	 mov r2,#32
 2044 001e DA61     	 str r2,[r3,#28]
 665:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 666:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 2045              	 .loc 2 666 0
 2046 0020 7B68     	 ldr r3,[r7,#4]
 2047 0022 1B68     	 ldr r3,[r3]
 2048 0024 7A68     	 ldr r2,[r7,#4]
 2049 0026 1268     	 ldr r2,[r2]
 2050 0028 1268     	 ldr r2,[r2]
 2051 002a 1449     	 ldr r1,.L98
 2052 002c 1140     	 and r1,r2
 667:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2053              	 .loc 2 667 0
 2054 002e 7A68     	 ldr r2,[r7,#4]
 2055 0030 127B     	 ldrb r2,[r2,#12]
 2056 0032 1006     	 lsl r0,r2,#24
 2057 0034 F022     	 mov r2,#240
 2058 0036 1205     	 lsl r2,r2,#20
 2059 0038 0240     	 and r2,r0
 666:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2060              	 .loc 2 666 0
 2061 003a 0A43     	 orr r2,r1
 2062 003c 1A60     	 str r2,[r3]
 668:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 669:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2063              	 .loc 2 669 0
 2064 003e 7B68     	 ldr r3,[r7,#4]
 2065 0040 1B68     	 ldr r3,[r3]
 2066 0042 7A68     	 ldr r2,[r7,#4]
 2067 0044 1269     	 ldr r2,[r2,#16]
 2068 0046 1A61     	 str r2,[r3,#16]
 670:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2069              	 .loc 2 670 0
 2070 0048 7B68     	 ldr r3,[r7,#4]
 2071 004a 1B68     	 ldr r3,[r3]
 2072 004c 7A68     	 ldr r2,[r7,#4]
 2073 004e 5269     	 ldr r2,[r2,#20]
 2074 0050 5A61     	 str r2,[r3,#20]
 671:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 672:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2075              	 .loc 2 672 0
 2076 0052 7B68     	 ldr r3,[r7,#4]
 2077 0054 1B68     	 ldr r3,[r3]
 2078 0056 0A4A     	 ldr r2,.L98+4
 2079 0058 DA61     	 str r2,[r3,#28]
 673:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2080              	 .loc 2 673 0
 2081 005a 0F23     	 mov r3,#15
 2082 005c FB18     	 add r3,r7,r3
 2083 005e 0022     	 mov r2,#0
 2084 0060 1A70     	 strb r2,[r3]
 2085 0062 03E0     	 b .L96
 2086              	.L95:
 674:../Libraries/XMCLib/src/xmc_can.c ****   }
 675:../Libraries/XMCLib/src/xmc_can.c ****   else
 676:../Libraries/XMCLib/src/xmc_can.c ****   {
 677:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2087              	 .loc 2 677 0
 2088 0064 0F23     	 mov r3,#15
 2089 0066 FB18     	 add r3,r7,r3
 2090 0068 0322     	 mov r2,#3
 2091 006a 1A70     	 strb r2,[r3]
 2092              	.L96:
 678:../Libraries/XMCLib/src/xmc_can.c ****   }
 679:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2093              	 .loc 2 679 0
 2094 006c 0F23     	 mov r3,#15
 2095 006e FB18     	 add r3,r7,r3
 2096 0070 1B78     	 ldrb r3,[r3]
 680:../Libraries/XMCLib/src/xmc_can.c **** }
 2097              	 .loc 2 680 0
 2098 0072 181C     	 mov r0,r3
 2099 0074 BD46     	 mov sp,r7
 2100 0076 04B0     	 add sp,sp,#16
 2101              	 
 2102 0078 80BD     	 pop {r7,pc}
 2103              	.L99:
 2104 007a C046     	 .align 2
 2105              	.L98:
 2106 007c FFFFFFF0 	 .word -251658241
 2107 0080 40002800 	 .word 2621504
 2108              	 .cfi_endproc
 2109              	.LFE143:
 2111              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2112              	 .align 2
 2113              	 .global XMC_CAN_MO_Transmit
 2114              	 .code 16
 2115              	 .thumb_func
 2117              	XMC_CAN_MO_Transmit:
 2118              	.LFB144:
 681:../Libraries/XMCLib/src/xmc_can.c **** 
 682:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 683:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 684:../Libraries/XMCLib/src/xmc_can.c **** {
 2119              	 .loc 2 684 0
 2120              	 .cfi_startproc
 2121 0000 80B5     	 push {r7,lr}
 2122              	.LCFI69:
 2123              	 .cfi_def_cfa_offset 8
 2124              	 .cfi_offset 7,-8
 2125              	 .cfi_offset 14,-4
 2126 0002 86B0     	 sub sp,sp,#24
 2127              	.LCFI70:
 2128              	 .cfi_def_cfa_offset 32
 2129 0004 00AF     	 add r7,sp,#0
 2130              	.LCFI71:
 2131              	 .cfi_def_cfa_register 7
 2132 0006 7860     	 str r0,[r7,#4]
 685:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2133              	 .loc 2 685 0
 2134 0008 1723     	 mov r3,#23
 2135 000a FB18     	 add r3,r7,r3
 2136 000c 0122     	 mov r2,#1
 2137 000e 1A70     	 strb r2,[r3]
 686:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2138              	 .loc 2 686 0
 2139 0010 7B68     	 ldr r3,[r7,#4]
 2140 0012 1B68     	 ldr r3,[r3]
 2141 0014 DB69     	 ldr r3,[r3,#28]
 2142 0016 2022     	 mov r2,#32
 2143 0018 1340     	 and r3,r2
 2144 001a 5B09     	 lsr r3,r3,#5
 2145 001c 3B61     	 str r3,[r7,#16]
 687:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2146              	 .loc 2 687 0
 2147 001e 7B68     	 ldr r3,[r7,#4]
 2148 0020 1B68     	 ldr r3,[r3]
 2149 0022 DA69     	 ldr r2,[r3,#28]
 2150 0024 8023     	 mov r3,#128
 2151 0026 5B00     	 lsl r3,r3,#1
 2152 0028 1340     	 and r3,r2
 2153 002a 1B0A     	 lsr r3,r3,#8
 2154 002c FB60     	 str r3,[r7,#12]
 688:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 689:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2155              	 .loc 2 689 0
 2156 002e 3B69     	 ldr r3,[r7,#16]
 2157 0030 002B     	 cmp r3,#0
 2158 0032 04D1     	 bne .L101
 690:../Libraries/XMCLib/src/xmc_can.c ****   {
 691:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2159              	 .loc 2 691 0
 2160 0034 1723     	 mov r3,#23
 2161 0036 FB18     	 add r3,r7,r3
 2162 0038 0422     	 mov r2,#4
 2163 003a 1A70     	 strb r2,[r3]
 2164 003c 10E0     	 b .L102
 2165              	.L101:
 692:../Libraries/XMCLib/src/xmc_can.c ****   }
 693:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 694:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2166              	 .loc 2 694 0
 2167 003e FB68     	 ldr r3,[r7,#12]
 2168 0040 012B     	 cmp r3,#1
 2169 0042 04D1     	 bne .L103
 695:../Libraries/XMCLib/src/xmc_can.c ****   {
 696:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2170              	 .loc 2 696 0
 2171 0044 1723     	 mov r3,#23
 2172 0046 FB18     	 add r3,r7,r3
 2173 0048 0222     	 mov r2,#2
 2174 004a 1A70     	 strb r2,[r3]
 2175 004c 08E0     	 b .L102
 2176              	.L103:
 697:../Libraries/XMCLib/src/xmc_can.c ****   }
 698:../Libraries/XMCLib/src/xmc_can.c ****   else
 699:../Libraries/XMCLib/src/xmc_can.c ****   {
 700:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 701:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2177              	 .loc 2 701 0
 2178 004e 7B68     	 ldr r3,[r7,#4]
 2179 0050 1B68     	 ldr r3,[r3]
 2180 0052 E022     	 mov r2,#224
 2181 0054 D204     	 lsl r2,r2,#19
 2182 0056 DA61     	 str r2,[r3,#28]
 702:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2183              	 .loc 2 702 0
 2184 0058 1723     	 mov r3,#23
 2185 005a FB18     	 add r3,r7,r3
 2186 005c 0022     	 mov r2,#0
 2187 005e 1A70     	 strb r2,[r3]
 2188              	.L102:
 703:../Libraries/XMCLib/src/xmc_can.c ****   }
 704:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2189              	 .loc 2 704 0
 2190 0060 1723     	 mov r3,#23
 2191 0062 FB18     	 add r3,r7,r3
 2192 0064 1B78     	 ldrb r3,[r3]
 705:../Libraries/XMCLib/src/xmc_can.c **** }
 2193              	 .loc 2 705 0
 2194 0066 181C     	 mov r0,r3
 2195 0068 BD46     	 mov sp,r7
 2196 006a 06B0     	 add sp,sp,#24
 2197              	 
 2198 006c 80BD     	 pop {r7,pc}
 2199              	 .cfi_endproc
 2200              	.LFE144:
 2202 006e C046     	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2203              	 .align 2
 2204              	 .global XMC_CAN_MO_ReceiveData
 2205              	 .code 16
 2206              	 .thumb_func
 2208              	XMC_CAN_MO_ReceiveData:
 2209              	.LFB145:
 706:../Libraries/XMCLib/src/xmc_can.c **** 
 707:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 708:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 709:../Libraries/XMCLib/src/xmc_can.c **** {
 2210              	 .loc 2 709 0
 2211              	 .cfi_startproc
 2212 0000 80B5     	 push {r7,lr}
 2213              	.LCFI72:
 2214              	 .cfi_def_cfa_offset 8
 2215              	 .cfi_offset 7,-8
 2216              	 .cfi_offset 14,-4
 2217 0002 86B0     	 sub sp,sp,#24
 2218              	.LCFI73:
 2219              	 .cfi_def_cfa_offset 32
 2220 0004 00AF     	 add r7,sp,#0
 2221              	.LCFI74:
 2222              	 .cfi_def_cfa_register 7
 2223 0006 7860     	 str r0,[r7,#4]
 710:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2224              	 .loc 2 710 0
 2225 0008 1723     	 mov r3,#23
 2226 000a FB18     	 add r3,r7,r3
 2227 000c 0122     	 mov r2,#1
 2228 000e 1A70     	 strb r2,[r3]
 711:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2229              	 .loc 2 711 0
 2230 0010 1623     	 mov r3,#22
 2231 0012 FB18     	 add r3,r7,r3
 2232 0014 0022     	 mov r2,#0
 2233 0016 1A70     	 strb r2,[r3]
 712:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2234              	 .loc 2 712 0
 2235 0018 1523     	 mov r3,#21
 2236 001a FB18     	 add r3,r7,r3
 2237 001c 0022     	 mov r2,#0
 2238 001e 1A70     	 strb r2,[r3]
 713:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2239              	 .loc 2 713 0
 2240 0020 7B68     	 ldr r3,[r7,#4]
 2241 0022 1B68     	 ldr r3,[r3]
 2242 0024 DA69     	 ldr r2,[r3,#28]
 2243 0026 8023     	 mov r3,#128
 2244 0028 1B01     	 lsl r3,r3,#4
 2245 002a 1340     	 and r3,r2
 2246 002c DB0A     	 lsr r3,r3,#11
 2247 002e 3B61     	 str r3,[r7,#16]
 714:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2248              	 .loc 2 714 0
 2249 0030 7B68     	 ldr r3,[r7,#4]
 2250 0032 1B68     	 ldr r3,[r3]
 2251 0034 DB69     	 ldr r3,[r3,#28]
 2252 0036 0422     	 mov r2,#4
 2253 0038 1340     	 and r3,r2
 2254 003a 9B08     	 lsr r3,r3,#2
 2255 003c FB60     	 str r3,[r7,#12]
 715:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 716:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2256              	 .loc 2 716 0
 2257 003e 3B69     	 ldr r3,[r7,#16]
 2258 0040 002B     	 cmp r3,#0
 2259 0042 04D0     	 beq .L106
 717:../Libraries/XMCLib/src/xmc_can.c ****   {
 718:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2260              	 .loc 2 718 0
 2261 0044 1723     	 mov r3,#23
 2262 0046 FB18     	 add r3,r7,r3
 2263 0048 0322     	 mov r2,#3
 2264 004a 1A70     	 strb r2,[r3]
 2265 004c 31E0     	 b .L107
 2266              	.L106:
 719:../Libraries/XMCLib/src/xmc_can.c ****   }
 720:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 721:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2267              	 .loc 2 721 0
 2268 004e FB68     	 ldr r3,[r7,#12]
 2269 0050 012B     	 cmp r3,#1
 2270 0052 04D1     	 bne .L108
 722:../Libraries/XMCLib/src/xmc_can.c ****   {
 723:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2271              	 .loc 2 723 0
 2272 0054 1723     	 mov r3,#23
 2273 0056 FB18     	 add r3,r7,r3
 2274 0058 0222     	 mov r2,#2
 2275 005a 1A70     	 strb r2,[r3]
 2276 005c 29E0     	 b .L107
 2277              	.L108:
 724:../Libraries/XMCLib/src/xmc_can.c ****   }
 725:../Libraries/XMCLib/src/xmc_can.c ****   else
 726:../Libraries/XMCLib/src/xmc_can.c ****   {
 727:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 728:../Libraries/XMCLib/src/xmc_can.c ****     do
 729:../Libraries/XMCLib/src/xmc_can.c ****     {
 730:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2278              	 .loc 2 730 0 discriminator 2
 2279 005e 7B68     	 ldr r3,[r7,#4]
 2280 0060 1B68     	 ldr r3,[r3]
 2281 0062 1A69     	 ldr r2,[r3,#16]
 2282 0064 7B68     	 ldr r3,[r7,#4]
 2283 0066 1A61     	 str r2,[r3,#16]
 731:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2284              	 .loc 2 731 0 discriminator 2
 2285 0068 7B68     	 ldr r3,[r7,#4]
 2286 006a 1B68     	 ldr r3,[r3]
 2287 006c 5A69     	 ldr r2,[r3,#20]
 2288 006e 7B68     	 ldr r3,[r7,#4]
 2289 0070 5A61     	 str r2,[r3,#20]
 732:../Libraries/XMCLib/src/xmc_can.c **** 
 733:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2290              	 .loc 2 733 0 discriminator 2
 2291 0072 7B68     	 ldr r3,[r7,#4]
 2292 0074 1B68     	 ldr r3,[r3]
 2293 0076 DB69     	 ldr r3,[r3,#28]
 2294 0078 0422     	 mov r2,#4
 2295 007a 1340     	 and r3,r2
 2296 007c 9A08     	 lsr r2,r3,#2
 2297 007e 1623     	 mov r3,#22
 2298 0080 FB18     	 add r3,r7,r3
 2299 0082 1A70     	 strb r2,[r3]
 734:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2300              	 .loc 2 734 0 discriminator 2
 2301 0084 7B68     	 ldr r3,[r7,#4]
 2302 0086 1B68     	 ldr r3,[r3]
 2303 0088 DB69     	 ldr r3,[r3,#28]
 2304 008a 0822     	 mov r2,#8
 2305 008c 1340     	 and r3,r2
 2306 008e DA08     	 lsr r2,r3,#3
 2307 0090 1523     	 mov r3,#21
 2308 0092 FB18     	 add r3,r7,r3
 2309 0094 1A70     	 strb r2,[r3]
 735:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2310              	 .loc 2 735 0 discriminator 2
 2311 0096 1623     	 mov r3,#22
 2312 0098 FB18     	 add r3,r7,r3
 2313 009a 1B78     	 ldrb r3,[r3]
 2314 009c 002B     	 cmp r3,#0
 2315 009e 04D0     	 beq .L109
 2316              	 .loc 2 735 0 is_stmt 0 discriminator 1
 2317 00a0 1523     	 mov r3,#21
 2318 00a2 FB18     	 add r3,r7,r3
 2319 00a4 1B78     	 ldrb r3,[r3]
 2320 00a6 002B     	 cmp r3,#0
 2321 00a8 D9D1     	 bne .L108
 2322              	.L109:
 736:../Libraries/XMCLib/src/xmc_can.c **** 
 737:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2323              	 .loc 2 737 0 is_stmt 1
 2324 00aa 1723     	 mov r3,#23
 2325 00ac FB18     	 add r3,r7,r3
 2326 00ae 0022     	 mov r2,#0
 2327 00b0 1A70     	 strb r2,[r3]
 2328              	.L107:
 738:../Libraries/XMCLib/src/xmc_can.c ****   }
 739:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2329              	 .loc 2 739 0
 2330 00b2 1723     	 mov r3,#23
 2331 00b4 FB18     	 add r3,r7,r3
 2332 00b6 1B78     	 ldrb r3,[r3]
 740:../Libraries/XMCLib/src/xmc_can.c **** }
 2333              	 .loc 2 740 0
 2334 00b8 181C     	 mov r0,r3
 2335 00ba BD46     	 mov sp,r7
 2336 00bc 06B0     	 add sp,sp,#24
 2337              	 
 2338 00be 80BD     	 pop {r7,pc}
 2339              	 .cfi_endproc
 2340              	.LFE145:
 2342              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2343              	 .align 2
 2344              	 .global XMC_CAN_MO_Receive
 2345              	 .code 16
 2346              	 .thumb_func
 2348              	XMC_CAN_MO_Receive:
 2349              	.LFB146:
 741:../Libraries/XMCLib/src/xmc_can.c **** 
 742:../Libraries/XMCLib/src/xmc_can.c **** 
 743:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 744:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 745:../Libraries/XMCLib/src/xmc_can.c **** {
 2350              	 .loc 2 745 0
 2351              	 .cfi_startproc
 2352 0000 80B5     	 push {r7,lr}
 2353              	.LCFI75:
 2354              	 .cfi_def_cfa_offset 8
 2355              	 .cfi_offset 7,-8
 2356              	 .cfi_offset 14,-4
 2357 0002 86B0     	 sub sp,sp,#24
 2358              	.LCFI76:
 2359              	 .cfi_def_cfa_offset 32
 2360 0004 00AF     	 add r7,sp,#0
 2361              	.LCFI77:
 2362              	 .cfi_def_cfa_register 7
 2363 0006 7860     	 str r0,[r7,#4]
 746:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2364              	 .loc 2 746 0
 2365 0008 1723     	 mov r3,#23
 2366 000a FB18     	 add r3,r7,r3
 2367 000c 0122     	 mov r2,#1
 2368 000e 1A70     	 strb r2,[r3]
 747:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2369              	 .loc 2 747 0
 2370 0010 1623     	 mov r3,#22
 2371 0012 FB18     	 add r3,r7,r3
 2372 0014 0022     	 mov r2,#0
 2373 0016 1A70     	 strb r2,[r3]
 748:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2374              	 .loc 2 748 0
 2375 0018 1523     	 mov r3,#21
 2376 001a FB18     	 add r3,r7,r3
 2377 001c 0022     	 mov r2,#0
 2378 001e 1A70     	 strb r2,[r3]
 749:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2379              	 .loc 2 749 0
 2380 0020 7B68     	 ldr r3,[r7,#4]
 2381 0022 1B68     	 ldr r3,[r3]
 2382 0024 DA69     	 ldr r2,[r3,#28]
 2383 0026 8023     	 mov r3,#128
 2384 0028 1B01     	 lsl r3,r3,#4
 2385 002a 1340     	 and r3,r2
 2386 002c DB0A     	 lsr r3,r3,#11
 2387 002e 3B61     	 str r3,[r7,#16]
 750:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2388              	 .loc 2 750 0
 2389 0030 7B68     	 ldr r3,[r7,#4]
 2390 0032 1B68     	 ldr r3,[r3]
 2391 0034 DB69     	 ldr r3,[r3,#28]
 2392 0036 0422     	 mov r2,#4
 2393 0038 1340     	 and r3,r2
 2394 003a 9B08     	 lsr r3,r3,#2
 2395 003c FB60     	 str r3,[r7,#12]
 751:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 752:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2396              	 .loc 2 752 0
 2397 003e 3B69     	 ldr r3,[r7,#16]
 2398 0040 002B     	 cmp r3,#0
 2399 0042 04D0     	 beq .L112
 753:../Libraries/XMCLib/src/xmc_can.c ****   {
 754:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2400              	 .loc 2 754 0
 2401 0044 1723     	 mov r3,#23
 2402 0046 FB18     	 add r3,r7,r3
 2403 0048 0322     	 mov r2,#3
 2404 004a 1A70     	 strb r2,[r3]
 2405 004c D3E0     	 b .L113
 2406              	.L112:
 755:../Libraries/XMCLib/src/xmc_can.c ****   }
 756:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 757:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2407              	 .loc 2 757 0
 2408 004e FB68     	 ldr r3,[r7,#12]
 2409 0050 012B     	 cmp r3,#1
 2410 0052 04D1     	 bne .L114
 758:../Libraries/XMCLib/src/xmc_can.c ****   {
 759:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2411              	 .loc 2 759 0
 2412 0054 1723     	 mov r3,#23
 2413 0056 FB18     	 add r3,r7,r3
 2414 0058 0222     	 mov r2,#2
 2415 005a 1A70     	 strb r2,[r3]
 2416 005c CBE0     	 b .L113
 2417              	.L114:
 760:../Libraries/XMCLib/src/xmc_can.c ****   }
 761:../Libraries/XMCLib/src/xmc_can.c ****   else
 762:../Libraries/XMCLib/src/xmc_can.c ****   {
 763:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 764:../Libraries/XMCLib/src/xmc_can.c ****     do
 765:../Libraries/XMCLib/src/xmc_can.c ****     {
 766:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2418              	 .loc 2 766 0
 2419 005e 7B68     	 ldr r3,[r7,#4]
 2420 0060 1B68     	 ldr r3,[r3]
 2421 0062 0822     	 mov r2,#8
 2422 0064 DA61     	 str r2,[r3,#28]
 767:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2423              	 .loc 2 767 0
 2424 0066 7B68     	 ldr r3,[r7,#4]
 2425 0068 1B68     	 ldr r3,[r3]
 2426 006a 9A69     	 ldr r2,[r3,#24]
 2427 006c 8023     	 mov r3,#128
 2428 006e 9B05     	 lsl r3,r3,#22
 2429 0070 1340     	 and r3,r2
 2430 0072 5B0F     	 lsr r3,r3,#29
 2431 0074 51D1     	 bne .L115
 768:../Libraries/XMCLib/src/xmc_can.c ****       {
 769:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2432              	 .loc 2 769 0
 2433 0076 7B68     	 ldr r3,[r7,#4]
 2434 0078 DA79     	 ldrb r2,[r3,#7]
 2435 007a 2021     	 mov r1,#32
 2436 007c 8A43     	 bic r2,r1
 2437 007e DA71     	 strb r2,[r3,#7]
 770:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2438              	 .loc 2 770 0
 2439 0080 7B68     	 ldr r3,[r7,#4]
 2440 0082 1B68     	 ldr r3,[r3]
 2441 0084 9B69     	 ldr r3,[r3,#24]
 2442 0086 5F4A     	 ldr r2,.L121
 2443 0088 1340     	 and r3,r2
 2444 008a 9B0C     	 lsr r3,r3,#18
 2445 008c DB00     	 lsl r3,r3,#3
 2446 008e DA08     	 lsr r2,r3,#3
 2447 0090 7B68     	 ldr r3,[r7,#4]
 2448 0092 D200     	 lsl r2,r2,#3
 2449 0094 D208     	 lsr r2,r2,#3
 2450 0096 5968     	 ldr r1,[r3,#4]
 2451 0098 490F     	 lsr r1,r1,#29
 2452 009a 4907     	 lsl r1,r1,#29
 2453 009c 0A43     	 orr r2,r1
 2454 009e 5A60     	 str r2,[r3,#4]
 771:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2455              	 .loc 2 771 0
 2456 00a0 7B68     	 ldr r3,[r7,#4]
 2457 00a2 1B68     	 ldr r3,[r3]
 2458 00a4 DA68     	 ldr r2,[r3,#12]
 2459 00a6 8023     	 mov r3,#128
 2460 00a8 9B05     	 lsl r3,r3,#22
 2461 00aa 1340     	 and r3,r2
 2462 00ac 5B0F     	 lsr r3,r3,#29
 2463 00ae DBB2     	 uxtb r3,r3
 2464 00b0 1A1C     	 add r2,r3,#0
 2465 00b2 0123     	 mov r3,#1
 2466 00b4 1340     	 and r3,r2
 2467 00b6 DAB2     	 uxtb r2,r3
 2468 00b8 7B68     	 ldr r3,[r7,#4]
 2469 00ba 0121     	 mov r1,#1
 2470 00bc 0A40     	 and r2,r1
 2471 00be 5001     	 lsl r0,r2,#5
 2472 00c0 DA7A     	 ldrb r2,[r3,#11]
 2473 00c2 2021     	 mov r1,#32
 2474 00c4 8A43     	 bic r2,r1
 2475 00c6 111C     	 add r1,r2,#0
 2476 00c8 021C     	 add r2,r0,#0
 2477 00ca 0A43     	 orr r2,r1
 2478 00cc DA72     	 strb r2,[r3,#11]
 772:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2479              	 .loc 2 772 0
 2480 00ce 7B68     	 ldr r3,[r7,#4]
 2481 00d0 DB7A     	 ldrb r3,[r3,#11]
 2482 00d2 2022     	 mov r2,#32
 2483 00d4 1340     	 and r3,r2
 2484 00d6 DBB2     	 uxtb r3,r3
 2485 00d8 002B     	 cmp r3,#0
 2486 00da 10D0     	 beq .L116
 773:../Libraries/XMCLib/src/xmc_can.c ****         {
 774:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2487              	 .loc 2 774 0
 2488 00dc 7B68     	 ldr r3,[r7,#4]
 2489 00de 1B68     	 ldr r3,[r3]
 2490 00e0 DB68     	 ldr r3,[r3,#12]
 2491 00e2 484A     	 ldr r2,.L121
 2492 00e4 1340     	 and r3,r2
 2493 00e6 9B0C     	 lsr r3,r3,#18
 2494 00e8 DB00     	 lsl r3,r3,#3
 2495 00ea DA08     	 lsr r2,r3,#3
 2496 00ec 7B68     	 ldr r3,[r7,#4]
 2497 00ee D200     	 lsl r2,r2,#3
 2498 00f0 D208     	 lsr r2,r2,#3
 2499 00f2 9968     	 ldr r1,[r3,#8]
 2500 00f4 490F     	 lsr r1,r1,#29
 2501 00f6 4907     	 lsl r1,r1,#29
 2502 00f8 0A43     	 orr r2,r1
 2503 00fa 9A60     	 str r2,[r3,#8]
 2504 00fc 43E0     	 b .L118
 2505              	.L116:
 775:../Libraries/XMCLib/src/xmc_can.c ****         }
 776:../Libraries/XMCLib/src/xmc_can.c ****         else
 777:../Libraries/XMCLib/src/xmc_can.c ****         {
 778:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2506              	 .loc 2 778 0
 2507 00fe 7B68     	 ldr r3,[r7,#4]
 2508 0100 1B68     	 ldr r3,[r3]
 2509 0102 DB68     	 ldr r3,[r3,#12]
 2510 0104 DB00     	 lsl r3,r3,#3
 2511 0106 DA08     	 lsr r2,r3,#3
 2512 0108 7B68     	 ldr r3,[r7,#4]
 2513 010a D200     	 lsl r2,r2,#3
 2514 010c D208     	 lsr r2,r2,#3
 2515 010e 9968     	 ldr r1,[r3,#8]
 2516 0110 490F     	 lsr r1,r1,#29
 2517 0112 4907     	 lsl r1,r1,#29
 2518 0114 0A43     	 orr r2,r1
 2519 0116 9A60     	 str r2,[r3,#8]
 2520 0118 35E0     	 b .L118
 2521              	.L115:
 779:../Libraries/XMCLib/src/xmc_can.c ****         }
 780:../Libraries/XMCLib/src/xmc_can.c ****       }
 781:../Libraries/XMCLib/src/xmc_can.c ****       else
 782:../Libraries/XMCLib/src/xmc_can.c ****       {
 783:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2522              	 .loc 2 783 0
 2523 011a 7B68     	 ldr r3,[r7,#4]
 2524 011c DA79     	 ldrb r2,[r3,#7]
 2525 011e 2021     	 mov r1,#32
 2526 0120 0A43     	 orr r2,r1
 2527 0122 DA71     	 strb r2,[r3,#7]
 784:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2528              	 .loc 2 784 0
 2529 0124 7B68     	 ldr r3,[r7,#4]
 2530 0126 1B68     	 ldr r3,[r3]
 2531 0128 9B69     	 ldr r3,[r3,#24]
 2532 012a DB00     	 lsl r3,r3,#3
 2533 012c DA08     	 lsr r2,r3,#3
 2534 012e 7B68     	 ldr r3,[r7,#4]
 2535 0130 D200     	 lsl r2,r2,#3
 2536 0132 D208     	 lsr r2,r2,#3
 2537 0134 5968     	 ldr r1,[r3,#4]
 2538 0136 490F     	 lsr r1,r1,#29
 2539 0138 4907     	 lsl r1,r1,#29
 2540 013a 0A43     	 orr r2,r1
 2541 013c 5A60     	 str r2,[r3,#4]
 785:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2542              	 .loc 2 785 0
 2543 013e 7B68     	 ldr r3,[r7,#4]
 2544 0140 1B68     	 ldr r3,[r3]
 2545 0142 DB68     	 ldr r3,[r3,#12]
 2546 0144 DB00     	 lsl r3,r3,#3
 2547 0146 DA08     	 lsr r2,r3,#3
 2548 0148 7B68     	 ldr r3,[r7,#4]
 2549 014a D200     	 lsl r2,r2,#3
 2550 014c D208     	 lsr r2,r2,#3
 2551 014e 9968     	 ldr r1,[r3,#8]
 2552 0150 490F     	 lsr r1,r1,#29
 2553 0152 4907     	 lsl r1,r1,#29
 2554 0154 0A43     	 orr r2,r1
 2555 0156 9A60     	 str r2,[r3,#8]
 786:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2556              	 .loc 2 786 0
 2557 0158 7B68     	 ldr r3,[r7,#4]
 2558 015a 1B68     	 ldr r3,[r3]
 2559 015c DA68     	 ldr r2,[r3,#12]
 2560 015e 8023     	 mov r3,#128
 2561 0160 9B05     	 lsl r3,r3,#22
 2562 0162 1340     	 and r3,r2
 2563 0164 5B0F     	 lsr r3,r3,#29
 2564 0166 DBB2     	 uxtb r3,r3
 2565 0168 1A1C     	 add r2,r3,#0
 2566 016a 0123     	 mov r3,#1
 2567 016c 1340     	 and r3,r2
 2568 016e DAB2     	 uxtb r2,r3
 2569 0170 7B68     	 ldr r3,[r7,#4]
 2570 0172 0121     	 mov r1,#1
 2571 0174 0A40     	 and r2,r1
 2572 0176 5001     	 lsl r0,r2,#5
 2573 0178 DA7A     	 ldrb r2,[r3,#11]
 2574 017a 2021     	 mov r1,#32
 2575 017c 8A43     	 bic r2,r1
 2576 017e 111C     	 add r1,r2,#0
 2577 0180 021C     	 add r2,r0,#0
 2578 0182 0A43     	 orr r2,r1
 2579 0184 DA72     	 strb r2,[r3,#11]
 2580              	.L118:
 787:../Libraries/XMCLib/src/xmc_can.c ****       }
 788:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2581              	 .loc 2 788 0
 2582 0186 7B68     	 ldr r3,[r7,#4]
 2583 0188 1B68     	 ldr r3,[r3]
 2584 018a 1A68     	 ldr r2,[r3]
 2585 018c F023     	 mov r3,#240
 2586 018e 1B05     	 lsl r3,r3,#20
 2587 0190 1340     	 and r3,r2
 2588 0192 1B0E     	 lsr r3,r3,#24
 2589 0194 DAB2     	 uxtb r2,r3
 2590 0196 7B68     	 ldr r3,[r7,#4]
 2591 0198 1A73     	 strb r2,[r3,#12]
 789:../Libraries/XMCLib/src/xmc_can.c **** 
 790:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2592              	 .loc 2 790 0
 2593 019a 7B68     	 ldr r3,[r7,#4]
 2594 019c 1B68     	 ldr r3,[r3]
 2595 019e 1A69     	 ldr r2,[r3,#16]
 2596 01a0 7B68     	 ldr r3,[r7,#4]
 2597 01a2 1A61     	 str r2,[r3,#16]
 791:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2598              	 .loc 2 791 0
 2599 01a4 7B68     	 ldr r3,[r7,#4]
 2600 01a6 1B68     	 ldr r3,[r3]
 2601 01a8 5A69     	 ldr r2,[r3,#20]
 2602 01aa 7B68     	 ldr r3,[r7,#4]
 2603 01ac 5A61     	 str r2,[r3,#20]
 792:../Libraries/XMCLib/src/xmc_can.c **** 
 793:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2604              	 .loc 2 793 0
 2605 01ae 7B68     	 ldr r3,[r7,#4]
 2606 01b0 1B68     	 ldr r3,[r3]
 2607 01b2 DB69     	 ldr r3,[r3,#28]
 2608 01b4 0422     	 mov r2,#4
 2609 01b6 1340     	 and r3,r2
 2610 01b8 9A08     	 lsr r2,r3,#2
 2611 01ba 1623     	 mov r3,#22
 2612 01bc FB18     	 add r3,r7,r3
 2613 01be 1A70     	 strb r2,[r3]
 794:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2614              	 .loc 2 794 0
 2615 01c0 7B68     	 ldr r3,[r7,#4]
 2616 01c2 1B68     	 ldr r3,[r3]
 2617 01c4 DB69     	 ldr r3,[r3,#28]
 2618 01c6 0822     	 mov r2,#8
 2619 01c8 1340     	 and r3,r2
 2620 01ca DA08     	 lsr r2,r3,#3
 2621 01cc 1523     	 mov r3,#21
 2622 01ce FB18     	 add r3,r7,r3
 2623 01d0 1A70     	 strb r2,[r3]
 795:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2624              	 .loc 2 795 0
 2625 01d2 1623     	 mov r3,#22
 2626 01d4 FB18     	 add r3,r7,r3
 2627 01d6 1B78     	 ldrb r3,[r3]
 2628 01d8 002B     	 cmp r3,#0
 2629 01da 05D0     	 beq .L119
 2630              	 .loc 2 795 0 is_stmt 0 discriminator 1
 2631 01dc 1523     	 mov r3,#21
 2632 01de FB18     	 add r3,r7,r3
 2633 01e0 1B78     	 ldrb r3,[r3]
 2634 01e2 002B     	 cmp r3,#0
 2635 01e4 00D0     	 beq .LCB2354
 2636 01e6 3AE7     	 b .L114
 2637              	.LCB2354:
 2638              	.L119:
 796:../Libraries/XMCLib/src/xmc_can.c **** 
 797:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2639              	 .loc 2 797 0 is_stmt 1
 2640 01e8 7B68     	 ldr r3,[r7,#4]
 2641 01ea 0022     	 mov r2,#0
 2642 01ec 1A76     	 strb r2,[r3,#24]
 798:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2643              	 .loc 2 798 0
 2644 01ee 1723     	 mov r3,#23
 2645 01f0 FB18     	 add r3,r7,r3
 2646 01f2 0022     	 mov r2,#0
 2647 01f4 1A70     	 strb r2,[r3]
 2648              	.L113:
 799:../Libraries/XMCLib/src/xmc_can.c ****   }
 800:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2649              	 .loc 2 800 0
 2650 01f6 1723     	 mov r3,#23
 2651 01f8 FB18     	 add r3,r7,r3
 2652 01fa 1B78     	 ldrb r3,[r3]
 801:../Libraries/XMCLib/src/xmc_can.c **** }
 2653              	 .loc 2 801 0
 2654 01fc 181C     	 mov r0,r3
 2655 01fe BD46     	 mov sp,r7
 2656 0200 06B0     	 add sp,sp,#24
 2657              	 
 2658 0202 80BD     	 pop {r7,pc}
 2659              	.L122:
 2660              	 .align 2
 2661              	.L121:
 2662 0204 0000FC1F 	 .word 536608768
 2663              	 .cfi_endproc
 2664              	.LFE146:
 2666              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2667              	 .align 2
 2668              	 .global XMC_CAN_NODE_EnableEvent
 2669              	 .code 16
 2670              	 .thumb_func
 2672              	XMC_CAN_NODE_EnableEvent:
 2673              	.LFB147:
 802:../Libraries/XMCLib/src/xmc_can.c **** 
 803:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 804:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 805:../Libraries/XMCLib/src/xmc_can.c **** {
 2674              	 .loc 2 805 0
 2675              	 .cfi_startproc
 2676 0000 80B5     	 push {r7,lr}
 2677              	.LCFI78:
 2678              	 .cfi_def_cfa_offset 8
 2679              	 .cfi_offset 7,-8
 2680              	 .cfi_offset 14,-4
 2681 0002 82B0     	 sub sp,sp,#8
 2682              	.LCFI79:
 2683              	 .cfi_def_cfa_offset 16
 2684 0004 00AF     	 add r7,sp,#0
 2685              	.LCFI80:
 2686              	 .cfi_def_cfa_register 7
 2687 0006 7860     	 str r0,[r7,#4]
 2688 0008 3960     	 str r1,[r7]
 806:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2689              	 .loc 2 806 0
 2690 000a 3A68     	 ldr r2,[r7]
 2691 000c 8023     	 mov r3,#128
 2692 000e DB03     	 lsl r3,r3,#15
 2693 0010 9A42     	 cmp r2,r3
 2694 0012 06D0     	 beq .L124
 807:../Libraries/XMCLib/src/xmc_can.c ****   {
 808:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2695              	 .loc 2 808 0
 2696 0014 7B68     	 ldr r3,[r7,#4]
 2697 0016 1A68     	 ldr r2,[r3]
 2698 0018 3B68     	 ldr r3,[r7]
 2699 001a 1A43     	 orr r2,r3
 2700 001c 7B68     	 ldr r3,[r7,#4]
 2701 001e 1A60     	 str r2,[r3]
 2702 0020 05E0     	 b .L123
 2703              	.L124:
 809:../Libraries/XMCLib/src/xmc_can.c ****   }
 810:../Libraries/XMCLib/src/xmc_can.c ****   else
 811:../Libraries/XMCLib/src/xmc_can.c ****   {
 812:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2704              	 .loc 2 812 0
 2705 0022 7B68     	 ldr r3,[r7,#4]
 2706 0024 9A69     	 ldr r2,[r3,#24]
 2707 0026 3B68     	 ldr r3,[r7]
 2708 0028 1A43     	 orr r2,r3
 2709 002a 7B68     	 ldr r3,[r7,#4]
 2710 002c 9A61     	 str r2,[r3,#24]
 2711              	.L123:
 813:../Libraries/XMCLib/src/xmc_can.c ****   }
 814:../Libraries/XMCLib/src/xmc_can.c **** }
 2712              	 .loc 2 814 0
 2713 002e BD46     	 mov sp,r7
 2714 0030 02B0     	 add sp,sp,#8
 2715              	 
 2716 0032 80BD     	 pop {r7,pc}
 2717              	 .cfi_endproc
 2718              	.LFE147:
 2720              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2721              	 .align 2
 2722              	 .global XMC_CAN_NODE_DisableEvent
 2723              	 .code 16
 2724              	 .thumb_func
 2726              	XMC_CAN_NODE_DisableEvent:
 2727              	.LFB148:
 815:../Libraries/XMCLib/src/xmc_can.c **** 
 816:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 817:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 818:../Libraries/XMCLib/src/xmc_can.c **** {
 2728              	 .loc 2 818 0
 2729              	 .cfi_startproc
 2730 0000 80B5     	 push {r7,lr}
 2731              	.LCFI81:
 2732              	 .cfi_def_cfa_offset 8
 2733              	 .cfi_offset 7,-8
 2734              	 .cfi_offset 14,-4
 2735 0002 82B0     	 sub sp,sp,#8
 2736              	.LCFI82:
 2737              	 .cfi_def_cfa_offset 16
 2738 0004 00AF     	 add r7,sp,#0
 2739              	.LCFI83:
 2740              	 .cfi_def_cfa_register 7
 2741 0006 7860     	 str r0,[r7,#4]
 2742 0008 3960     	 str r1,[r7]
 819:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2743              	 .loc 2 819 0
 2744 000a 3A68     	 ldr r2,[r7]
 2745 000c 8023     	 mov r3,#128
 2746 000e DB03     	 lsl r3,r3,#15
 2747 0010 9A42     	 cmp r2,r3
 2748 0012 07D0     	 beq .L127
 820:../Libraries/XMCLib/src/xmc_can.c ****   {
 821:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2749              	 .loc 2 821 0
 2750 0014 7B68     	 ldr r3,[r7,#4]
 2751 0016 1B68     	 ldr r3,[r3]
 2752 0018 3A68     	 ldr r2,[r7]
 2753 001a D243     	 mvn r2,r2
 2754 001c 1A40     	 and r2,r3
 2755 001e 7B68     	 ldr r3,[r7,#4]
 2756 0020 1A60     	 str r2,[r3]
 2757 0022 06E0     	 b .L126
 2758              	.L127:
 822:../Libraries/XMCLib/src/xmc_can.c ****   }
 823:../Libraries/XMCLib/src/xmc_can.c ****   else
 824:../Libraries/XMCLib/src/xmc_can.c ****   {
 825:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2759              	 .loc 2 825 0
 2760 0024 7B68     	 ldr r3,[r7,#4]
 2761 0026 9B69     	 ldr r3,[r3,#24]
 2762 0028 3A68     	 ldr r2,[r7]
 2763 002a D243     	 mvn r2,r2
 2764 002c 1A40     	 and r2,r3
 2765 002e 7B68     	 ldr r3,[r7,#4]
 2766 0030 9A61     	 str r2,[r3,#24]
 2767              	.L126:
 826:../Libraries/XMCLib/src/xmc_can.c ****   }
 827:../Libraries/XMCLib/src/xmc_can.c **** }
 2768              	 .loc 2 827 0
 2769 0032 BD46     	 mov sp,r7
 2770 0034 02B0     	 add sp,sp,#8
 2771              	 
 2772 0036 80BD     	 pop {r7,pc}
 2773              	 .cfi_endproc
 2774              	.LFE148:
 2776              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2777              	 .align 2
 2778              	 .global XMC_CAN_TXFIFO_Transmit
 2779              	 .code 16
 2780              	 .thumb_func
 2782              	XMC_CAN_TXFIFO_Transmit:
 2783              	.LFB149:
 828:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 829:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 830:../Libraries/XMCLib/src/xmc_can.c **** {
 2784              	 .loc 2 830 0
 2785              	 .cfi_startproc
 2786 0000 80B5     	 push {r7,lr}
 2787              	.LCFI84:
 2788              	 .cfi_def_cfa_offset 8
 2789              	 .cfi_offset 7,-8
 2790              	 .cfi_offset 14,-4
 2791 0002 88B0     	 sub sp,sp,#32
 2792              	.LCFI85:
 2793              	 .cfi_def_cfa_offset 40
 2794 0004 00AF     	 add r7,sp,#0
 2795              	.LCFI86:
 2796              	 .cfi_def_cfa_register 7
 2797 0006 7860     	 str r0,[r7,#4]
 831:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2798              	 .loc 2 831 0
 2799 0008 1F23     	 mov r3,#31
 2800 000a FB18     	 add r3,r7,r3
 2801 000c 0122     	 mov r2,#1
 2802 000e 1A70     	 strb r2,[r3]
 832:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2803              	 .loc 2 832 0
 2804 0010 7B68     	 ldr r3,[r7,#4]
 2805 0012 1B68     	 ldr r3,[r3]
 2806 0014 DB69     	 ldr r3,[r3,#28]
 2807 0016 2022     	 mov r2,#32
 2808 0018 1340     	 and r3,r2
 2809 001a 5B09     	 lsr r3,r3,#5
 2810 001c BB61     	 str r3,[r7,#24]
 833:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2811              	 .loc 2 833 0
 2812 001e 7B68     	 ldr r3,[r7,#4]
 2813 0020 1B68     	 ldr r3,[r3]
 2814 0022 DA69     	 ldr r2,[r3,#28]
 2815 0024 8023     	 mov r3,#128
 2816 0026 5B00     	 lsl r3,r3,#1
 2817 0028 1340     	 and r3,r2
 2818 002a 1B0A     	 lsr r3,r3,#8
 2819 002c 7B61     	 str r3,[r7,#20]
 834:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2820              	 .loc 2 834 0
 2821 002e 7B68     	 ldr r3,[r7,#4]
 2822 0030 1B68     	 ldr r3,[r3]
 2823 0032 5A68     	 ldr r2,[r3,#4]
 2824 0034 FF23     	 mov r3,#255
 2825 0036 1B04     	 lsl r3,r3,#16
 2826 0038 1340     	 and r3,r2
 2827 003a 1B0C     	 lsr r3,r3,#16
 2828 003c 3B61     	 str r3,[r7,#16]
 835:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2829              	 .loc 2 835 0
 2830 003e 3B69     	 ldr r3,[r7,#16]
 2831 0040 114A     	 ldr r2,.L134
 2832 0042 9446     	 mov ip,r2
 2833 0044 6344     	 add r3,r3,ip
 2834 0046 5B01     	 lsl r3,r3,#5
 2835 0048 FB60     	 str r3,[r7,#12]
 836:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 837:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2836              	 .loc 2 837 0
 2837 004a BB69     	 ldr r3,[r7,#24]
 2838 004c 002B     	 cmp r3,#0
 2839 004e 04D1     	 bne .L130
 838:../Libraries/XMCLib/src/xmc_can.c ****   {
 839:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2840              	 .loc 2 839 0
 2841 0050 1F23     	 mov r3,#31
 2842 0052 FB18     	 add r3,r7,r3
 2843 0054 0422     	 mov r2,#4
 2844 0056 1A70     	 strb r2,[r3]
 2845 0058 0FE0     	 b .L131
 2846              	.L130:
 840:../Libraries/XMCLib/src/xmc_can.c ****   }
 841:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 842:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2847              	 .loc 2 842 0
 2848 005a 7B69     	 ldr r3,[r7,#20]
 2849 005c 012B     	 cmp r3,#1
 2850 005e 04D1     	 bne .L132
 843:../Libraries/XMCLib/src/xmc_can.c ****   {
 844:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2851              	 .loc 2 844 0
 2852 0060 1F23     	 mov r3,#31
 2853 0062 FB18     	 add r3,r7,r3
 2854 0064 0222     	 mov r2,#2
 2855 0066 1A70     	 strb r2,[r3]
 2856 0068 07E0     	 b .L131
 2857              	.L132:
 845:../Libraries/XMCLib/src/xmc_can.c ****   }
 846:../Libraries/XMCLib/src/xmc_can.c ****   else
 847:../Libraries/XMCLib/src/xmc_can.c ****   {
 848:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2858              	 .loc 2 848 0
 2859 006a FB68     	 ldr r3,[r7,#12]
 2860 006c E022     	 mov r2,#224
 2861 006e D204     	 lsl r2,r2,#19
 2862 0070 DA61     	 str r2,[r3,#28]
 849:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2863              	 .loc 2 849 0
 2864 0072 1F23     	 mov r3,#31
 2865 0074 FB18     	 add r3,r7,r3
 2866 0076 0022     	 mov r2,#0
 2867 0078 1A70     	 strb r2,[r3]
 2868              	.L131:
 850:../Libraries/XMCLib/src/xmc_can.c ****   }
 851:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2869              	 .loc 2 851 0
 2870 007a 1F23     	 mov r3,#31
 2871 007c FB18     	 add r3,r7,r3
 2872 007e 1B78     	 ldrb r3,[r3]
 852:../Libraries/XMCLib/src/xmc_can.c **** }
 2873              	 .loc 2 852 0
 2874 0080 181C     	 mov r0,r3
 2875 0082 BD46     	 mov sp,r7
 2876 0084 08B0     	 add sp,sp,#32
 2877              	 
 2878 0086 80BD     	 pop {r7,pc}
 2879              	.L135:
 2880              	 .align 2
 2881              	.L134:
 2882 0088 80208002 	 .word 41951360
 2883              	 .cfi_endproc
 2884              	.LFE149:
 2886              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2887              	 .align 2
 2888              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2889              	 .code 16
 2890              	 .thumb_func
 2892              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2893              	.LFB150:
 853:../Libraries/XMCLib/src/xmc_can.c **** 
 854:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 855:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 856:../Libraries/XMCLib/src/xmc_can.c **** {
 2894              	 .loc 2 856 0
 2895              	 .cfi_startproc
 2896 0000 80B5     	 push {r7,lr}
 2897              	.LCFI87:
 2898              	 .cfi_def_cfa_offset 8
 2899              	 .cfi_offset 7,-8
 2900              	 .cfi_offset 14,-4
 2901 0002 82B0     	 sub sp,sp,#8
 2902              	.LCFI88:
 2903              	 .cfi_def_cfa_offset 16
 2904 0004 00AF     	 add r7,sp,#0
 2905              	.LCFI89:
 2906              	 .cfi_def_cfa_register 7
 2907 0006 7860     	 str r0,[r7,#4]
 2908 0008 3B1C     	 mov r3,r7
 2909 000a 1960     	 str r1,[r3]
 857:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2910              	 .loc 2 857 0
 2911 000c 7B68     	 ldr r3,[r7,#4]
 2912 000e 1B68     	 ldr r3,[r3]
 2913 0010 7A68     	 ldr r2,[r7,#4]
 2914 0012 1268     	 ldr r2,[r2]
 2915 0014 1268     	 ldr r2,[r2]
 2916 0016 0F21     	 mov r1,#15
 2917 0018 8A43     	 bic r2,r1
 2918 001a 0221     	 mov r1,#2
 2919 001c 0A43     	 orr r2,r1
 2920 001e 1A60     	 str r2,[r3]
 858:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 859:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2921              	 .loc 2 859 0
 2922 0020 7B68     	 ldr r3,[r7,#4]
 2923 0022 1B68     	 ldr r3,[r3]
 2924 0024 7A68     	 ldr r2,[r7,#4]
 2925 0026 1268     	 ldr r2,[r2]
 2926 0028 5268     	 ldr r2,[r2,#4]
 2927 002a 120E     	 lsr r2,r2,#24
 2928 002c 1206     	 lsl r2,r2,#24
 860:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 861:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 862:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2929              	 .loc 2 862 0
 2930 002e 391C     	 mov r1,r7
 2931 0030 0978     	 ldrb r1,[r1]
 861:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2932              	 .loc 2 861 0
 2933 0032 1143     	 orr r1,r2
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2934              	 .loc 2 863 0
 2935 0034 3A1C     	 mov r2,r7
 2936 0036 9278     	 ldrb r2,[r2,#2]
 2937 0038 1004     	 lsl r0,r2,#16
 2938 003a FF22     	 mov r2,#255
 2939 003c 1204     	 lsl r2,r2,#16
 2940 003e 0240     	 and r2,r0
 862:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2941              	 .loc 2 862 0
 2942 0040 1143     	 orr r1,r2
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2943              	 .loc 2 864 0
 2944 0042 3A1C     	 mov r2,r7
 2945 0044 5278     	 ldrb r2,[r2,#1]
 2946 0046 1202     	 lsl r2,r2,#8
 2947 0048 1204     	 lsl r2,r2,#16
 2948 004a 120C     	 lsr r2,r2,#16
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2949              	 .loc 2 863 0
 2950 004c 0A43     	 orr r2,r1
 859:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2951              	 .loc 2 859 0
 2952 004e 5A60     	 str r2,[r3,#4]
 865:../Libraries/XMCLib/src/xmc_can.c **** }
 2953              	 .loc 2 865 0
 2954 0050 BD46     	 mov sp,r7
 2955 0052 02B0     	 add sp,sp,#8
 2956              	 
 2957 0054 80BD     	 pop {r7,pc}
 2958              	 .cfi_endproc
 2959              	.LFE150:
 2961 0056 C046     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2962              	 .align 2
 2963              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2964              	 .code 16
 2965              	 .thumb_func
 2967              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2968              	.LFB151:
 866:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 867:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 868:../Libraries/XMCLib/src/xmc_can.c **** {
 2969              	 .loc 2 868 0
 2970              	 .cfi_startproc
 2971 0000 80B5     	 push {r7,lr}
 2972              	.LCFI90:
 2973              	 .cfi_def_cfa_offset 8
 2974              	 .cfi_offset 7,-8
 2975              	 .cfi_offset 14,-4
 2976 0002 82B0     	 sub sp,sp,#8
 2977              	.LCFI91:
 2978              	 .cfi_def_cfa_offset 16
 2979 0004 00AF     	 add r7,sp,#0
 2980              	.LCFI92:
 2981              	 .cfi_def_cfa_register 7
 2982 0006 7860     	 str r0,[r7,#4]
 2983 0008 3B1C     	 mov r3,r7
 2984 000a 1960     	 str r1,[r3]
 869:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2985              	 .loc 2 869 0
 2986 000c 7B68     	 ldr r3,[r7,#4]
 2987 000e 1B68     	 ldr r3,[r3]
 2988 0010 7A68     	 ldr r2,[r7,#4]
 2989 0012 1268     	 ldr r2,[r2]
 2990 0014 1268     	 ldr r2,[r2]
 2991 0016 0F21     	 mov r1,#15
 2992 0018 8A43     	 bic r2,r1
 2993 001a 0121     	 mov r1,#1
 2994 001c 0A43     	 orr r2,r1
 2995 001e 1A60     	 str r2,[r3]
 870:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 871:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2996              	 .loc 2 871 0
 2997 0020 7B68     	 ldr r3,[r7,#4]
 2998 0022 1B68     	 ldr r3,[r3]
 2999 0024 7A68     	 ldr r2,[r7,#4]
 3000 0026 1268     	 ldr r2,[r2]
 3001 0028 5268     	 ldr r2,[r2,#4]
 3002 002a 120E     	 lsr r2,r2,#24
 3003 002c 1206     	 lsl r2,r2,#24
 872:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 873:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3004              	 .loc 2 874 0
 3005 002e 391C     	 mov r1,r7
 3006 0030 0978     	 ldrb r1,[r1]
 873:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3007              	 .loc 2 873 0
 3008 0032 1143     	 orr r1,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3009              	 .loc 2 875 0
 3010 0034 3A1C     	 mov r2,r7
 3011 0036 9278     	 ldrb r2,[r2,#2]
 3012 0038 1004     	 lsl r0,r2,#16
 3013 003a FF22     	 mov r2,#255
 3014 003c 1204     	 lsl r2,r2,#16
 3015 003e 0240     	 and r2,r0
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3016              	 .loc 2 874 0
 3017 0040 1143     	 orr r1,r2
 876:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 3018              	 .loc 2 876 0
 3019 0042 3A1C     	 mov r2,r7
 3020 0044 5278     	 ldrb r2,[r2,#1]
 3021 0046 1202     	 lsl r2,r2,#8
 3022 0048 1204     	 lsl r2,r2,#16
 3023 004a 120C     	 lsr r2,r2,#16
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3024              	 .loc 2 875 0
 3025 004c 0A43     	 orr r2,r1
 871:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 3026              	 .loc 2 871 0
 3027 004e 5A60     	 str r2,[r3,#4]
 877:../Libraries/XMCLib/src/xmc_can.c **** }
 3028              	 .loc 2 877 0
 3029 0050 BD46     	 mov sp,r7
 3030 0052 02B0     	 add sp,sp,#8
 3031              	 
 3032 0054 80BD     	 pop {r7,pc}
 3033              	 .cfi_endproc
 3034              	.LFE151:
 3036 0056 C046     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 3037              	 .align 2
 3038              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 3039              	 .code 16
 3040              	 .thumb_func
 3042              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 3043              	.LFB152:
 878:../Libraries/XMCLib/src/xmc_can.c **** 
 879:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 880:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 881:../Libraries/XMCLib/src/xmc_can.c **** {
 3044              	 .loc 2 881 0
 3045              	 .cfi_startproc
 3046 0000 80B5     	 push {r7,lr}
 3047              	.LCFI93:
 3048              	 .cfi_def_cfa_offset 8
 3049              	 .cfi_offset 7,-8
 3050              	 .cfi_offset 14,-4
 3051 0002 82B0     	 sub sp,sp,#8
 3052              	.LCFI94:
 3053              	 .cfi_def_cfa_offset 16
 3054 0004 00AF     	 add r7,sp,#0
 3055              	.LCFI95:
 3056              	 .cfi_def_cfa_register 7
 3057 0006 7860     	 str r0,[r7,#4]
 3058 0008 3B1C     	 mov r3,r7
 3059 000a 1960     	 str r1,[r3]
 882:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3060              	 .loc 2 882 0
 3061 000c 7B68     	 ldr r3,[r7,#4]
 3062 000e 1B68     	 ldr r3,[r3]
 3063 0010 7A68     	 ldr r2,[r7,#4]
 3064 0012 1268     	 ldr r2,[r2]
 3065 0014 1268     	 ldr r2,[r2]
 3066 0016 0F21     	 mov r1,#15
 3067 0018 8A43     	 bic r2,r1
 3068 001a 0321     	 mov r1,#3
 3069 001c 0A43     	 orr r2,r1
 3070 001e 1A60     	 str r2,[r3]
 883:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 884:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 3071              	 .loc 2 884 0
 3072 0020 7B68     	 ldr r3,[r7,#4]
 3073 0022 1B68     	 ldr r3,[r3]
 3074 0024 7A68     	 ldr r2,[r7,#4]
 3075 0026 1268     	 ldr r2,[r2]
 3076 0028 5268     	 ldr r2,[r2,#4]
 3077 002a 0849     	 ldr r1,.L139
 3078 002c 1140     	 and r1,r2
 885:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3079              	 .loc 2 885 0
 3080 002e 3A1C     	 mov r2,r7
 3081 0030 9278     	 ldrb r2,[r2,#2]
 3082 0032 1004     	 lsl r0,r2,#16
 3083 0034 FF22     	 mov r2,#255
 3084 0036 1204     	 lsl r2,r2,#16
 3085 0038 0240     	 and r2,r0
 884:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3086              	 .loc 2 884 0
 3087 003a 0A43     	 orr r2,r1
 3088 003c 5A60     	 str r2,[r3,#4]
 886:../Libraries/XMCLib/src/xmc_can.c **** 
 887:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 3089              	 .loc 2 887 0
 3090 003e 7B68     	 ldr r3,[r7,#4]
 3091 0040 1B68     	 ldr r3,[r3]
 3092 0042 034A     	 ldr r2,.L139+4
 3093 0044 DA61     	 str r2,[r3,#28]
 888:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 889:../Libraries/XMCLib/src/xmc_can.c **** }
 3094              	 .loc 2 889 0
 3095 0046 BD46     	 mov sp,r7
 3096 0048 02B0     	 add sp,sp,#8
 3097              	 
 3098 004a 80BD     	 pop {r7,pc}
 3099              	.L140:
 3100              	 .align 2
 3101              	.L139:
 3102 004c FFFF00FF 	 .word -16711681
 3103 0050 00040002 	 .word 33555456
 3104              	 .cfi_endproc
 3105              	.LFE152:
 3107              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3108              	 .align 2
 3109              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3110              	 .code 16
 3111              	 .thumb_func
 3113              	XMC_CAN_GATEWAY_InitSourceObject:
 3114              	.LFB153:
 890:../Libraries/XMCLib/src/xmc_can.c **** 
 891:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 892:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 893:../Libraries/XMCLib/src/xmc_can.c **** {
 3115              	 .loc 2 893 0
 3116              	 .cfi_startproc
 3117 0000 80B5     	 push {r7,lr}
 3118              	.LCFI96:
 3119              	 .cfi_def_cfa_offset 8
 3120              	 .cfi_offset 7,-8
 3121              	 .cfi_offset 14,-4
 3122 0002 84B0     	 sub sp,sp,#16
 3123              	.LCFI97:
 3124              	 .cfi_def_cfa_offset 24
 3125 0004 00AF     	 add r7,sp,#0
 3126              	.LCFI98:
 3127              	 .cfi_def_cfa_register 7
 3128 0006 F860     	 str r0,[r7,#12]
 3129 0008 3B1D     	 add r3,r7,#4
 3130 000a 1960     	 str r1,[r3]
 3131 000c 5A60     	 str r2,[r3,#4]
 894:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3132              	 .loc 2 894 0
 3133 000e FB68     	 ldr r3,[r7,#12]
 3134 0010 1B68     	 ldr r3,[r3]
 895:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3135              	 .loc 2 895 0
 3136 0012 3A1D     	 add r2,r7,#4
 3137 0014 D278     	 ldrb r2,[r2,#3]
 3138 0016 1102     	 lsl r1,r2,#8
 3139 0018 8022     	 mov r2,#128
 3140 001a 5200     	 lsl r2,r2,#1
 3141 001c 1140     	 and r1,r2
 896:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3142              	 .loc 2 896 0
 3143 001e 3A1D     	 add r2,r7,#4
 3144 0020 5279     	 ldrb r2,[r2,#5]
 3145 0022 9002     	 lsl r0,r2,#10
 3146 0024 8022     	 mov r2,#128
 3147 0026 D200     	 lsl r2,r2,#3
 3148 0028 0240     	 and r2,r0
 895:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3149              	 .loc 2 895 0
 3150 002a 1143     	 orr r1,r2
 897:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3151              	 .loc 2 897 0
 3152 002c 3A1D     	 add r2,r7,#4
 3153 002e 1279     	 ldrb r2,[r2,#4]
 3154 0030 5002     	 lsl r0,r2,#9
 3155 0032 8022     	 mov r2,#128
 3156 0034 9200     	 lsl r2,r2,#2
 3157 0036 0240     	 and r2,r0
 896:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3158              	 .loc 2 896 0
 3159 0038 1143     	 orr r1,r2
 898:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3160              	 .loc 2 898 0
 3161 003a 3A1D     	 add r2,r7,#4
 3162 003c 9279     	 ldrb r2,[r2,#6]
 3163 003e D002     	 lsl r0,r2,#11
 3164 0040 8022     	 mov r2,#128
 3165 0042 1201     	 lsl r2,r2,#4
 3166 0044 0240     	 and r2,r0
 897:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3167              	 .loc 2 897 0
 3168 0046 0A43     	 orr r2,r1
 3169 0048 0421     	 mov r1,#4
 3170 004a 0A43     	 orr r2,r1
 894:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3171              	 .loc 2 894 0
 3172 004c 1A60     	 str r2,[r3]
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3173              	 .loc 2 899 0
 3174 004e FB68     	 ldr r3,[r7,#12]
 3175 0050 1B68     	 ldr r3,[r3]
 3176 0052 3A1D     	 add r2,r7,#4
 3177 0054 1278     	 ldrb r2,[r2]
 3178 0056 101C     	 mov r0,r2
 900:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3179              	 .loc 2 900 0
 3180 0058 3A1D     	 add r2,r7,#4
 3181 005a 9278     	 ldrb r2,[r2,#2]
 3182 005c 1104     	 lsl r1,r2,#16
 3183 005e FF22     	 mov r2,#255
 3184 0060 1204     	 lsl r2,r2,#16
 3185 0062 0A40     	 and r2,r1
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3186              	 .loc 2 899 0
 3187 0064 011C     	 mov r1,r0
 3188 0066 1143     	 orr r1,r2
 901:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3189              	 .loc 2 901 0
 3190 0068 3A1D     	 add r2,r7,#4
 3191 006a 5278     	 ldrb r2,[r2,#1]
 3192 006c 1202     	 lsl r2,r2,#8
 3193 006e 1204     	 lsl r2,r2,#16
 3194 0070 120C     	 lsr r2,r2,#16
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3195              	 .loc 2 899 0
 3196 0072 0A43     	 orr r2,r1
 3197 0074 5A60     	 str r2,[r3,#4]
 902:../Libraries/XMCLib/src/xmc_can.c **** }
 3198              	 .loc 2 902 0
 3199 0076 BD46     	 mov sp,r7
 3200 0078 04B0     	 add sp,sp,#16
 3201              	 
 3202 007a 80BD     	 pop {r7,pc}
 3203              	 .cfi_endproc
 3204              	.LFE153:
 3206              	 .text
 3207              	.Letext0:
 3208              	 .file 3 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3209              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3210              	 .file 5 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 3211              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc1_scu.h"
 3212              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include/cmsis_gcc.h"
 3213              	 .file 8 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:18     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:22     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:60     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:64     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:126    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:130    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:162    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:166    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:199    .text.max:00000000 $t
    {standard input}:203    .text.max:00000000 max
    {standard input}:238    .text.min:00000000 $t
    {standard input}:242    .text.min:00000000 min
    {standard input}:278    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:283    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:516    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000154 $d
    {standard input}:521    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:526    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:837    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001cc $d
    {standard input}:843    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:848    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:909    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:914    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:948    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:953    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1000   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1005   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1188   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1277   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1177   .text.XMC_CAN_Init:00000118 $d
    {standard input}:1183   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1232   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1237   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1272   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1336   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1341   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1437   .text.XMC_CAN_InitEx:0000009c $d
    {standard input}:1443   .text.XMC_CAN_GetClockFrequency:00000000 $t
    {standard input}:1448   .text.XMC_CAN_GetClockFrequency:00000000 XMC_CAN_GetClockFrequency
    {standard input}:1490   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1495   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1575   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1580   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1634   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1639   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1701   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1706   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1792   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1797   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:2014   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:2001   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:2009   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2106   .text.XMC_CAN_MO_UpdateData:0000007c $d
    {standard input}:2112   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2117   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2203   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2208   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2343   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2348   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2662   .text.XMC_CAN_MO_Receive:00000204 $d
    {standard input}:2667   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2672   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2721   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2726   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2777   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2782   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2882   .text.XMC_CAN_TXFIFO_Transmit:00000088 $d
    {standard input}:2887   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2892   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2962   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2967   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:3037   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:3042   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3102   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:3108   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3113   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
