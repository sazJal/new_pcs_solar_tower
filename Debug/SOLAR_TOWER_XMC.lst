
SOLAR_TOWER_XMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c1e8  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  1000d1e8  1000d1e8  0000d1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000144  2000000c  1000d1e8  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  4 .data         00000200  20000550  1000d32c  00010550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000410  20000750  00000600  00010750  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  7 .debug_aranges 00000cc0  00000000  00000000  00010750  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001c086  00000000  00000000  00011410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e73  00000000  00000000  0002d496  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007c99  00000000  00000000  00030309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000381c  00000000  00000000  00037fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000a6f3  00000000  00000000  0003b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004654  00000000  00000000  00045eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000af0  00000000  00000000  0004a508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000ef4  00000000  00000000  0004aff8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	1000d1e8 	.word	0x1000d1e8
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	10004b1d 	.word	0x10004b1d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000d32c 	.word	0x1000d32c
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000750 	.word	0x20000750
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000d52c 	.word	0x1000d52c
	ldr	r2, =__ram_code_start
10001084:	20000750 	.word	0x20000750
	ldr	r3, =__ram_code_end
10001088:	20000750 	.word	0x20000750
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000750 	.word	0x20000750
	ldr	r2, =__bss_end
10001090:	20000b5c 	.word	0x20000b5c
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10008b45 	.word	0x10008b45
    blx  r0
#endif

    ldr  r0, =main
10001098:	1000656d 	.word	0x1000656d

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	b082      	sub	sp, #8
100010a4:	af00      	add	r7, sp, #0
100010a6:	6078      	str	r0, [r7, #4]
100010a8:	1c0a      	adds	r2, r1, #0
100010aa:	1cfb      	adds	r3, r7, #3
100010ac:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
100010ae:	687b      	ldr	r3, [r7, #4]
100010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100010b2:	1cfb      	adds	r3, r7, #3
100010b4:	781b      	ldrb	r3, [r3, #0]
100010b6:	40da      	lsrs	r2, r3
100010b8:	1c13      	adds	r3, r2, #0
100010ba:	2201      	movs	r2, #1
100010bc:	4013      	ands	r3, r2
}
100010be:	1c18      	adds	r0, r3, #0
100010c0:	46bd      	mov	sp, r7
100010c2:	b002      	add	sp, #8
100010c4:	bd80      	pop	{r7, pc}
100010c6:	46c0      	nop			; (mov r8, r8)

100010c8 <OP_SetupConnection>:
OP_CTRL_FLAG_t controlFlag;


void OP_SetupConnection(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam,
						OP_CTRL_FLAG_t *ctrlFlag, float pvVoltage, PCS_BMC_STATUS_t *pcsBmsStatus, PCS_STATUS_t *pcsStatus)
{
100010c8:	b580      	push	{r7, lr}
100010ca:	b084      	sub	sp, #16
100010cc:	af00      	add	r7, sp, #0
100010ce:	60f8      	str	r0, [r7, #12]
100010d0:	60b9      	str	r1, [r7, #8]
100010d2:	607a      	str	r2, [r7, #4]
100010d4:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	/* 1. Ensure all relay at initial state */
	/* Initiate relay status */
	PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
100010d6:	2000      	movs	r0, #0
100010d8:	2100      	movs	r1, #0
100010da:	f001 feb3 	bl	10002e44 <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
100010de:	2003      	movs	r0, #3
100010e0:	2100      	movs	r1, #0
100010e2:	f001 feaf 	bl	10002e44 <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KMP,  PDU_RELAY_OPEN);
100010e6:	2001      	movs	r0, #1
100010e8:	2100      	movs	r1, #0
100010ea:	f001 feab 	bl	10002e44 <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_OPEN);
100010ee:	2002      	movs	r0, #2
100010f0:	2100      	movs	r1, #0
100010f2:	f001 fea7 	bl	10002e44 <PDU_Switch_Relay>

	/* CAN Status Setup */
	pcsBmsStatus->bmc_main_relay		= RELAY_OPEN;
100010f6:	69bb      	ldr	r3, [r7, #24]
100010f8:	2200      	movs	r2, #0
100010fa:	709a      	strb	r2, [r3, #2]
	pcsBmsStatus->bmc_precharge_relay	= RELAY_OPEN;
100010fc:	69bb      	ldr	r3, [r7, #24]
100010fe:	2200      	movs	r2, #0
10001100:	70da      	strb	r2, [r3, #3]
	pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
10001102:	69bb      	ldr	r3, [r7, #24]
10001104:	2201      	movs	r2, #1
10001106:	701a      	strb	r2, [r3, #0]
	pcsBmsStatus->bmc_pcs_command		= BMU_PCS_STOP;
10001108:	69bb      	ldr	r3, [r7, #24]
1000110a:	2200      	movs	r2, #0
1000110c:	705a      	strb	r2, [r3, #1]

	/* 2. Checking PV Condition */
	if((pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode))
1000110e:	6838      	ldr	r0, [r7, #0]
10001110:	4921      	ldr	r1, [pc, #132]	; (10001198 <OP_SetupConnection+0xd0>)
10001112:	f005 fd4d 	bl	10006bb0 <__aeabi_fcmpgt>
10001116:	1e03      	subs	r3, r0, #0
10001118:	d103      	bne.n	10001122 <OP_SetupConnection+0x5a>
1000111a:	687b      	ldr	r3, [r7, #4]
1000111c:	78db      	ldrb	r3, [r3, #3]
1000111e:	2b00      	cmp	r3, #0
10001120:	d036      	beq.n	10001190 <OP_SetupConnection+0xc8>
	{
		if((!sysTickParam->isTimeOut) && !toggle_timer) // start timer
10001122:	68bb      	ldr	r3, [r7, #8]
10001124:	791b      	ldrb	r3, [r3, #4]
10001126:	2201      	movs	r2, #1
10001128:	4053      	eors	r3, r2
1000112a:	b2db      	uxtb	r3, r3
1000112c:	2b00      	cmp	r3, #0
1000112e:	d010      	beq.n	10001152 <OP_SetupConnection+0x8a>
10001130:	4b1a      	ldr	r3, [pc, #104]	; (1000119c <OP_SetupConnection+0xd4>)
10001132:	781b      	ldrb	r3, [r3, #0]
10001134:	2201      	movs	r2, #1
10001136:	4053      	eors	r3, r2
10001138:	b2db      	uxtb	r3, r3
1000113a:	2b00      	cmp	r3, #0
1000113c:	d009      	beq.n	10001152 <OP_SetupConnection+0x8a>
		{
			toggle_timer = true;
1000113e:	4b17      	ldr	r3, [pc, #92]	; (1000119c <OP_SetupConnection+0xd4>)
10001140:	2201      	movs	r2, #1
10001142:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
10001144:	68bb      	ldr	r3, [r7, #8]
10001146:	2201      	movs	r2, #1
10001148:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 5;
1000114a:	68bb      	ldr	r3, [r7, #8]
1000114c:	2205      	movs	r2, #5
1000114e:	805a      	strh	r2, [r3, #2]
10001150:	e01e      	b.n	10001190 <OP_SetupConnection+0xc8>
		}
		else if((sysTickParam->isTimeOut) && toggle_timer)
10001152:	68bb      	ldr	r3, [r7, #8]
10001154:	791b      	ldrb	r3, [r3, #4]
10001156:	2b00      	cmp	r3, #0
10001158:	d01a      	beq.n	10001190 <OP_SetupConnection+0xc8>
1000115a:	4b10      	ldr	r3, [pc, #64]	; (1000119c <OP_SetupConnection+0xd4>)
1000115c:	781b      	ldrb	r3, [r3, #0]
1000115e:	2b00      	cmp	r3, #0
10001160:	d016      	beq.n	10001190 <OP_SetupConnection+0xc8>
		{
			toggle_timer = false;
10001162:	4b0e      	ldr	r3, [pc, #56]	; (1000119c <OP_SetupConnection+0xd4>)
10001164:	2200      	movs	r2, #0
10001166:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut	= false;
10001168:	68bb      	ldr	r3, [r7, #8]
1000116a:	2200      	movs	r2, #0
1000116c:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
1000116e:	68bb      	ldr	r3, [r7, #8]
10001170:	2200      	movs	r2, #0
10001172:	805a      	strh	r2, [r3, #2]
			PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_CLOSE);
10001174:	2002      	movs	r0, #2
10001176:	2101      	movs	r1, #1
10001178:	f001 fe64 	bl	10002e44 <PDU_Switch_Relay>
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
1000117c:	2003      	movs	r0, #3
1000117e:	2101      	movs	r1, #1
10001180:	f001 fe60 	bl	10002e44 <PDU_Switch_Relay>
			pcsBmsStatus->bmc_precharge_relay = RELAY_CLOSE;
10001184:	69bb      	ldr	r3, [r7, #24]
10001186:	2201      	movs	r2, #1
10001188:	70da      	strb	r2, [r3, #3]
			*state	= OP_TURN_ON;
1000118a:	68fb      	ldr	r3, [r7, #12]
1000118c:	2201      	movs	r2, #1
1000118e:	701a      	strb	r2, [r3, #0]
		}
	}
}
10001190:	46bd      	mov	sp, r7
10001192:	b004      	add	sp, #16
10001194:	bd80      	pop	{r7, pc}
10001196:	46c0      	nop			; (mov r8, r8)
10001198:	43160000 	.word	0x43160000
1000119c:	20000750 	.word	0x20000750

100011a0 <OP_TurnOnPCS>:

void OP_TurnOnPCS(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam,
		OP_CTRL_FLAG_t *ctrlFlag, PCS_BMC_STATUS_t *pcsBmsStatus, PCS_STATUS_t *pcsStatus)
{
100011a0:	b580      	push	{r7, lr}
100011a2:	b084      	sub	sp, #16
100011a4:	af00      	add	r7, sp, #0
100011a6:	60f8      	str	r0, [r7, #12]
100011a8:	60b9      	str	r1, [r7, #8]
100011aa:	607a      	str	r2, [r7, #4]
100011ac:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	static bool isPrechargeExecuted = false;

	if(!XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted && (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
100011ae:	4b51      	ldr	r3, [pc, #324]	; (100012f4 <OP_TurnOnPCS+0x154>)
100011b0:	1c18      	adds	r0, r3, #0
100011b2:	2102      	movs	r1, #2
100011b4:	f7ff ff74 	bl	100010a0 <XMC_GPIO_GetInput>
100011b8:	1e03      	subs	r3, r0, #0
100011ba:	d142      	bne.n	10001242 <OP_TurnOnPCS+0xa2>
100011bc:	4b4e      	ldr	r3, [pc, #312]	; (100012f8 <OP_TurnOnPCS+0x158>)
100011be:	781b      	ldrb	r3, [r3, #0]
100011c0:	2201      	movs	r2, #1
100011c2:	4053      	eors	r3, r2
100011c4:	b2db      	uxtb	r3, r3
100011c6:	2b00      	cmp	r3, #0
100011c8:	d03b      	beq.n	10001242 <OP_TurnOnPCS+0xa2>
100011ca:	69bb      	ldr	r3, [r7, #24]
100011cc:	781b      	ldrb	r3, [r3, #0]
100011ce:	2b04      	cmp	r3, #4
100011d0:	d137      	bne.n	10001242 <OP_TurnOnPCS+0xa2>
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
100011d2:	68bb      	ldr	r3, [r7, #8]
100011d4:	791b      	ldrb	r3, [r3, #4]
100011d6:	2201      	movs	r2, #1
100011d8:	4053      	eors	r3, r2
100011da:	b2db      	uxtb	r3, r3
100011dc:	2b00      	cmp	r3, #0
100011de:	d017      	beq.n	10001210 <OP_TurnOnPCS+0x70>
100011e0:	68bb      	ldr	r3, [r7, #8]
100011e2:	781b      	ldrb	r3, [r3, #0]
100011e4:	2201      	movs	r2, #1
100011e6:	4053      	eors	r3, r2
100011e8:	b2db      	uxtb	r3, r3
100011ea:	2b00      	cmp	r3, #0
100011ec:	d010      	beq.n	10001210 <OP_TurnOnPCS+0x70>
100011ee:	4b43      	ldr	r3, [pc, #268]	; (100012fc <OP_TurnOnPCS+0x15c>)
100011f0:	781b      	ldrb	r3, [r3, #0]
100011f2:	2201      	movs	r2, #1
100011f4:	4053      	eors	r3, r2
100011f6:	b2db      	uxtb	r3, r3
100011f8:	2b00      	cmp	r3, #0
100011fa:	d009      	beq.n	10001210 <OP_TurnOnPCS+0x70>
		{
			toggle_timer			= true;
100011fc:	4b3f      	ldr	r3, [pc, #252]	; (100012fc <OP_TurnOnPCS+0x15c>)
100011fe:	2201      	movs	r2, #1
10001200:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
10001202:	68bb      	ldr	r3, [r7, #8]
10001204:	2201      	movs	r2, #1
10001206:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 2;
10001208:	68bb      	ldr	r3, [r7, #8]
1000120a:	2202      	movs	r2, #2
1000120c:	805a      	strh	r2, [r3, #2]
1000120e:	e017      	b.n	10001240 <OP_TurnOnPCS+0xa0>
		}
		else if ((sysTickParam->isTimeOut) && (!sysTickParam->enable))
10001210:	68bb      	ldr	r3, [r7, #8]
10001212:	791b      	ldrb	r3, [r3, #4]
10001214:	2b00      	cmp	r3, #0
10001216:	d013      	beq.n	10001240 <OP_TurnOnPCS+0xa0>
10001218:	68bb      	ldr	r3, [r7, #8]
1000121a:	781b      	ldrb	r3, [r3, #0]
1000121c:	2201      	movs	r2, #1
1000121e:	4053      	eors	r3, r2
10001220:	b2db      	uxtb	r3, r3
10001222:	2b00      	cmp	r3, #0
10001224:	d00c      	beq.n	10001240 <OP_TurnOnPCS+0xa0>
		{
			ctrlFlag->isPerforming_Precharge = true;
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	2201      	movs	r2, #1
1000122a:	701a      	strb	r2, [r3, #0]
			toggle_timer			= false;
1000122c:	4b33      	ldr	r3, [pc, #204]	; (100012fc <OP_TurnOnPCS+0x15c>)
1000122e:	2200      	movs	r2, #0
10001230:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut = false;
10001232:	68bb      	ldr	r3, [r7, #8]
10001234:	2200      	movs	r2, #0
10001236:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
10001238:	68bb      	ldr	r3, [r7, #8]
1000123a:	2200      	movs	r2, #0
1000123c:	805a      	strh	r2, [r3, #2]
	static bool toggle_timer = false;
	static bool isPrechargeExecuted = false;

	if(!XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted && (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
1000123e:	e017      	b.n	10001270 <OP_TurnOnPCS+0xd0>
10001240:	e016      	b.n	10001270 <OP_TurnOnPCS+0xd0>
			toggle_timer			= false;
			sysTickParam->isTimeOut = false;
			sysTickParam->count		= 0;
		}
	}
	else if(XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted)
10001242:	4b2c      	ldr	r3, [pc, #176]	; (100012f4 <OP_TurnOnPCS+0x154>)
10001244:	1c18      	adds	r0, r3, #0
10001246:	2102      	movs	r1, #2
10001248:	f7ff ff2a 	bl	100010a0 <XMC_GPIO_GetInput>
1000124c:	1e03      	subs	r3, r0, #0
1000124e:	d00f      	beq.n	10001270 <OP_TurnOnPCS+0xd0>
10001250:	4b29      	ldr	r3, [pc, #164]	; (100012f8 <OP_TurnOnPCS+0x158>)
10001252:	781b      	ldrb	r3, [r3, #0]
10001254:	2201      	movs	r2, #1
10001256:	4053      	eors	r3, r2
10001258:	b2db      	uxtb	r3, r3
1000125a:	2b00      	cmp	r3, #0
1000125c:	d008      	beq.n	10001270 <OP_TurnOnPCS+0xd0>
	{
		toggle_timer			= false;
1000125e:	4b27      	ldr	r3, [pc, #156]	; (100012fc <OP_TurnOnPCS+0x15c>)
10001260:	2200      	movs	r2, #0
10001262:	701a      	strb	r2, [r3, #0]
		sysTickParam->enable 	= false;
10001264:	68bb      	ldr	r3, [r7, #8]
10001266:	2200      	movs	r2, #0
10001268:	701a      	strb	r2, [r3, #0]
		sysTickParam->count 	= 0;
1000126a:	68bb      	ldr	r3, [r7, #8]
1000126c:	2200      	movs	r2, #0
1000126e:	805a      	strh	r2, [r3, #2]
	}

	if(ctrlFlag->isPerforming_Precharge)
10001270:	687b      	ldr	r3, [r7, #4]
10001272:	781b      	ldrb	r3, [r3, #0]
10001274:	2b00      	cmp	r3, #0
10001276:	d03a      	beq.n	100012ee <OP_TurnOnPCS+0x14e>
	{
		if(!isPrechargeExecuted)
10001278:	4b1f      	ldr	r3, [pc, #124]	; (100012f8 <OP_TurnOnPCS+0x158>)
1000127a:	781b      	ldrb	r3, [r3, #0]
1000127c:	2201      	movs	r2, #1
1000127e:	4053      	eors	r3, r2
10001280:	b2db      	uxtb	r3, r3
10001282:	2b00      	cmp	r3, #0
10001284:	d00e      	beq.n	100012a4 <OP_TurnOnPCS+0x104>
		{
			pcsBmsStatus->bmc_main_relay 		= RELAY_OPEN;
10001286:	683b      	ldr	r3, [r7, #0]
10001288:	2200      	movs	r2, #0
1000128a:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bmc_precharge_relay	= RELAY_CLOSE;
1000128c:	683b      	ldr	r3, [r7, #0]
1000128e:	2201      	movs	r2, #1
10001290:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
10001292:	683b      	ldr	r3, [r7, #0]
10001294:	2201      	movs	r2, #1
10001296:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bmc_pcs_command		= BMU_PCS_STOP;
10001298:	683b      	ldr	r3, [r7, #0]
1000129a:	2200      	movs	r2, #0
1000129c:	705a      	strb	r2, [r3, #1]
			isPrechargeExecuted					= true;
1000129e:	4b16      	ldr	r3, [pc, #88]	; (100012f8 <OP_TurnOnPCS+0x158>)
100012a0:	2201      	movs	r2, #1
100012a2:	701a      	strb	r2, [r3, #0]
		}

		if(pcsStatus->pcs_precharge_IsComplete)
100012a4:	69bb      	ldr	r3, [r7, #24]
100012a6:	785b      	ldrb	r3, [r3, #1]
100012a8:	2b00      	cmp	r3, #0
100012aa:	d020      	beq.n	100012ee <OP_TurnOnPCS+0x14e>
		{
			/* CLose Main Relay */
			PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_CLOSE);
100012ac:	2001      	movs	r0, #1
100012ae:	2101      	movs	r1, #1
100012b0:	f001 fdc8 	bl	10002e44 <PDU_Switch_Relay>

			/* Open Predischarge Relay */
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
100012b4:	2003      	movs	r0, #3
100012b6:	2100      	movs	r1, #0
100012b8:	f001 fdc4 	bl	10002e44 <PDU_Switch_Relay>

			pcsBmsStatus->bmc_main_relay		= RELAY_CLOSE;
100012bc:	683b      	ldr	r3, [r7, #0]
100012be:	2201      	movs	r2, #1
100012c0:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bmc_precharge_relay	= RELAY_OPEN;
100012c2:	683b      	ldr	r3, [r7, #0]
100012c4:	2200      	movs	r2, #0
100012c6:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bmc_status			= BMU_RUNNING;
100012c8:	683b      	ldr	r3, [r7, #0]
100012ca:	2202      	movs	r2, #2
100012cc:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bmc_pcs_command		= BMU_PCS_START;
100012ce:	683b      	ldr	r3, [r7, #0]
100012d0:	2201      	movs	r2, #1
100012d2:	705a      	strb	r2, [r3, #1]

			*state = OP_RUNNING;
100012d4:	68fb      	ldr	r3, [r7, #12]
100012d6:	2202      	movs	r2, #2
100012d8:	701a      	strb	r2, [r3, #0]

			/* close battery relay */
			PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_CLOSE);
100012da:	2000      	movs	r0, #0
100012dc:	2101      	movs	r1, #1
100012de:	f001 fdb1 	bl	10002e44 <PDU_Switch_Relay>
			isPrechargeExecuted					= false;
100012e2:	4b05      	ldr	r3, [pc, #20]	; (100012f8 <OP_TurnOnPCS+0x158>)
100012e4:	2200      	movs	r2, #0
100012e6:	701a      	strb	r2, [r3, #0]
			ctrlFlag->isPerforming_Precharge	= false;
100012e8:	687b      	ldr	r3, [r7, #4]
100012ea:	2200      	movs	r2, #0
100012ec:	701a      	strb	r2, [r3, #0]
		}
	}
}
100012ee:	46bd      	mov	sp, r7
100012f0:	b004      	add	sp, #16
100012f2:	bd80      	pop	{r7, pc}
100012f4:	40040200 	.word	0x40040200
100012f8:	20000751 	.word	0x20000751
100012fc:	20000752 	.word	0x20000752

10001300 <OP_CheckingPCSStatus>:

void OP_CheckingPCSStatus(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						  MISC_SYSTICK_PARAM_t *sysTickParam,
						  OP_CTRL_FLAG_t *ctrlFlag)
{
10001300:	b580      	push	{r7, lr}
10001302:	b084      	sub	sp, #16
10001304:	af00      	add	r7, sp, #0
10001306:	60f8      	str	r0, [r7, #12]
10001308:	60b9      	str	r1, [r7, #8]
1000130a:	607a      	str	r2, [r7, #4]
1000130c:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	static bool isPutToStandbyExecuted = false;

	/* 1. Check PCS Warning Status */
	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
1000130e:	68bb      	ldr	r3, [r7, #8]
10001310:	781b      	ldrb	r3, [r3, #0]
10001312:	2b04      	cmp	r3, #4
10001314:	d102      	bne.n	1000131c <OP_CheckingPCSStatus+0x1c>
	{
		*state = OP_ERROR;
10001316:	68fb      	ldr	r3, [r7, #12]
10001318:	2204      	movs	r2, #4
1000131a:	701a      	strb	r2, [r3, #0]
	}

	if(!XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
1000131c:	4b3a      	ldr	r3, [pc, #232]	; (10001408 <OP_CheckingPCSStatus+0x108>)
1000131e:	1c18      	adds	r0, r3, #0
10001320:	2102      	movs	r1, #2
10001322:	f7ff febd 	bl	100010a0 <XMC_GPIO_GetInput>
10001326:	1e03      	subs	r3, r0, #0
10001328:	d142      	bne.n	100013b0 <OP_CheckingPCSStatus+0xb0>
1000132a:	4b38      	ldr	r3, [pc, #224]	; (1000140c <OP_CheckingPCSStatus+0x10c>)
1000132c:	781b      	ldrb	r3, [r3, #0]
1000132e:	2201      	movs	r2, #1
10001330:	4053      	eors	r3, r2
10001332:	b2db      	uxtb	r3, r3
10001334:	2b00      	cmp	r3, #0
10001336:	d03b      	beq.n	100013b0 <OP_CheckingPCSStatus+0xb0>
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
10001338:	687b      	ldr	r3, [r7, #4]
1000133a:	791b      	ldrb	r3, [r3, #4]
1000133c:	2201      	movs	r2, #1
1000133e:	4053      	eors	r3, r2
10001340:	b2db      	uxtb	r3, r3
10001342:	2b00      	cmp	r3, #0
10001344:	d017      	beq.n	10001376 <OP_CheckingPCSStatus+0x76>
10001346:	687b      	ldr	r3, [r7, #4]
10001348:	781b      	ldrb	r3, [r3, #0]
1000134a:	2201      	movs	r2, #1
1000134c:	4053      	eors	r3, r2
1000134e:	b2db      	uxtb	r3, r3
10001350:	2b00      	cmp	r3, #0
10001352:	d010      	beq.n	10001376 <OP_CheckingPCSStatus+0x76>
10001354:	4b2e      	ldr	r3, [pc, #184]	; (10001410 <OP_CheckingPCSStatus+0x110>)
10001356:	781b      	ldrb	r3, [r3, #0]
10001358:	2201      	movs	r2, #1
1000135a:	4053      	eors	r3, r2
1000135c:	b2db      	uxtb	r3, r3
1000135e:	2b00      	cmp	r3, #0
10001360:	d009      	beq.n	10001376 <OP_CheckingPCSStatus+0x76>
		{
			toggle_timer			= true;
10001362:	4b2b      	ldr	r3, [pc, #172]	; (10001410 <OP_CheckingPCSStatus+0x110>)
10001364:	2201      	movs	r2, #1
10001366:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
10001368:	687b      	ldr	r3, [r7, #4]
1000136a:	2201      	movs	r2, #1
1000136c:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 3;
1000136e:	687b      	ldr	r3, [r7, #4]
10001370:	2203      	movs	r2, #3
10001372:	805a      	strh	r2, [r3, #2]
10001374:	e01b      	b.n	100013ae <OP_CheckingPCSStatus+0xae>
		}
		else if ((sysTickParam->isTimeOut) && (!sysTickParam->enable) && toggle_timer)
10001376:	687b      	ldr	r3, [r7, #4]
10001378:	791b      	ldrb	r3, [r3, #4]
1000137a:	2b00      	cmp	r3, #0
1000137c:	d017      	beq.n	100013ae <OP_CheckingPCSStatus+0xae>
1000137e:	687b      	ldr	r3, [r7, #4]
10001380:	781b      	ldrb	r3, [r3, #0]
10001382:	2201      	movs	r2, #1
10001384:	4053      	eors	r3, r2
10001386:	b2db      	uxtb	r3, r3
10001388:	2b00      	cmp	r3, #0
1000138a:	d010      	beq.n	100013ae <OP_CheckingPCSStatus+0xae>
1000138c:	4b20      	ldr	r3, [pc, #128]	; (10001410 <OP_CheckingPCSStatus+0x110>)
1000138e:	781b      	ldrb	r3, [r3, #0]
10001390:	2b00      	cmp	r3, #0
10001392:	d00c      	beq.n	100013ae <OP_CheckingPCSStatus+0xae>
		{
			isPutToStandbyExecuted	= true;
10001394:	4b1d      	ldr	r3, [pc, #116]	; (1000140c <OP_CheckingPCSStatus+0x10c>)
10001396:	2201      	movs	r2, #1
10001398:	701a      	strb	r2, [r3, #0]
			toggle_timer			= false;
1000139a:	4b1d      	ldr	r3, [pc, #116]	; (10001410 <OP_CheckingPCSStatus+0x110>)
1000139c:	2200      	movs	r2, #0
1000139e:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut = false;
100013a0:	687b      	ldr	r3, [r7, #4]
100013a2:	2200      	movs	r2, #0
100013a4:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
100013a6:	687b      	ldr	r3, [r7, #4]
100013a8:	2200      	movs	r2, #0
100013aa:	805a      	strh	r2, [r3, #2]
		*state = OP_ERROR;
	}

	if(!XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
100013ac:	e017      	b.n	100013de <OP_CheckingPCSStatus+0xde>
100013ae:	e016      	b.n	100013de <OP_CheckingPCSStatus+0xde>
			toggle_timer			= false;
			sysTickParam->isTimeOut = false;
			sysTickParam->count		= 0;
		}
	}
	else if(XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
100013b0:	4b15      	ldr	r3, [pc, #84]	; (10001408 <OP_CheckingPCSStatus+0x108>)
100013b2:	1c18      	adds	r0, r3, #0
100013b4:	2102      	movs	r1, #2
100013b6:	f7ff fe73 	bl	100010a0 <XMC_GPIO_GetInput>
100013ba:	1e03      	subs	r3, r0, #0
100013bc:	d00f      	beq.n	100013de <OP_CheckingPCSStatus+0xde>
100013be:	4b13      	ldr	r3, [pc, #76]	; (1000140c <OP_CheckingPCSStatus+0x10c>)
100013c0:	781b      	ldrb	r3, [r3, #0]
100013c2:	2201      	movs	r2, #1
100013c4:	4053      	eors	r3, r2
100013c6:	b2db      	uxtb	r3, r3
100013c8:	2b00      	cmp	r3, #0
100013ca:	d008      	beq.n	100013de <OP_CheckingPCSStatus+0xde>
	{
		toggle_timer			= false;
100013cc:	4b10      	ldr	r3, [pc, #64]	; (10001410 <OP_CheckingPCSStatus+0x110>)
100013ce:	2200      	movs	r2, #0
100013d0:	701a      	strb	r2, [r3, #0]
		sysTickParam->enable 	= false;
100013d2:	687b      	ldr	r3, [r7, #4]
100013d4:	2200      	movs	r2, #0
100013d6:	701a      	strb	r2, [r3, #0]
		sysTickParam->count 	= 0;
100013d8:	687b      	ldr	r3, [r7, #4]
100013da:	2200      	movs	r2, #0
100013dc:	805a      	strh	r2, [r3, #2]
	}

	/* Change to STANDBY upon the timer's time-out and button is released */
	if(isPutToStandbyExecuted)
100013de:	4b0b      	ldr	r3, [pc, #44]	; (1000140c <OP_CheckingPCSStatus+0x10c>)
100013e0:	781b      	ldrb	r3, [r3, #0]
100013e2:	2b00      	cmp	r3, #0
100013e4:	d00c      	beq.n	10001400 <OP_CheckingPCSStatus+0x100>
	{
		if(XMC_GPIO_GetInput(P2_2))
100013e6:	4b08      	ldr	r3, [pc, #32]	; (10001408 <OP_CheckingPCSStatus+0x108>)
100013e8:	1c18      	adds	r0, r3, #0
100013ea:	2102      	movs	r1, #2
100013ec:	f7ff fe58 	bl	100010a0 <XMC_GPIO_GetInput>
100013f0:	1e03      	subs	r3, r0, #0
100013f2:	d005      	beq.n	10001400 <OP_CheckingPCSStatus+0x100>
		{
			isPutToStandbyExecuted	= false;
100013f4:	4b05      	ldr	r3, [pc, #20]	; (1000140c <OP_CheckingPCSStatus+0x10c>)
100013f6:	2200      	movs	r2, #0
100013f8:	701a      	strb	r2, [r3, #0]
			*state					= OP_STANDBY;
100013fa:	68fb      	ldr	r3, [r7, #12]
100013fc:	2203      	movs	r2, #3
100013fe:	701a      	strb	r2, [r3, #0]
		}
	}
}
10001400:	46bd      	mov	sp, r7
10001402:	b004      	add	sp, #16
10001404:	bd80      	pop	{r7, pc}
10001406:	46c0      	nop			; (mov r8, r8)
10001408:	40040200 	.word	0x40040200
1000140c:	20000753 	.word	0x20000753
10001410:	20000754 	.word	0x20000754

10001414 <OP_PutSystemStandby>:

void OP_PutSystemStandby(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						 OP_CTRL_FLAG_t *ctrlFlag,
						 PCS_BMC_STATUS_t *pcsBmsStatus)
{
10001414:	b580      	push	{r7, lr}
10001416:	b084      	sub	sp, #16
10001418:	af00      	add	r7, sp, #0
1000141a:	60f8      	str	r0, [r7, #12]
1000141c:	60b9      	str	r1, [r7, #8]
1000141e:	607a      	str	r2, [r7, #4]
10001420:	603b      	str	r3, [r7, #0]
	static bool isStandbyExecuted = false;

	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
10001422:	68bb      	ldr	r3, [r7, #8]
10001424:	781b      	ldrb	r3, [r3, #0]
10001426:	2b06      	cmp	r3, #6
10001428:	d10c      	bne.n	10001444 <OP_PutSystemStandby+0x30>
	{
		if(!isStandbyExecuted)
1000142a:	4b15      	ldr	r3, [pc, #84]	; (10001480 <OP_PutSystemStandby+0x6c>)
1000142c:	781b      	ldrb	r3, [r3, #0]
1000142e:	2201      	movs	r2, #1
10001430:	4053      	eors	r3, r2
10001432:	b2db      	uxtb	r3, r3
10001434:	2b00      	cmp	r3, #0
10001436:	d005      	beq.n	10001444 <OP_PutSystemStandby+0x30>
		{
			pcsBmsStatus->bmc_pcs_command = BMU_PCS_STOP;
10001438:	683b      	ldr	r3, [r7, #0]
1000143a:	2200      	movs	r2, #0
1000143c:	705a      	strb	r2, [r3, #1]
			isStandbyExecuted = true;
1000143e:	4b10      	ldr	r3, [pc, #64]	; (10001480 <OP_PutSystemStandby+0x6c>)
10001440:	2201      	movs	r2, #1
10001442:	701a      	strb	r2, [r3, #0]
		}
	}

	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
10001444:	68bb      	ldr	r3, [r7, #8]
10001446:	781b      	ldrb	r3, [r3, #0]
10001448:	2b04      	cmp	r3, #4
1000144a:	d116      	bne.n	1000147a <OP_PutSystemStandby+0x66>
	{
		/* Open Pre Discharge Relay */
		PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
1000144c:	2003      	movs	r0, #3
1000144e:	2100      	movs	r1, #0
10001450:	f001 fcf8 	bl	10002e44 <PDU_Switch_Relay>

		/* Open Main Relay */
		PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_OPEN);
10001454:	2001      	movs	r0, #1
10001456:	2100      	movs	r1, #0
10001458:	f001 fcf4 	bl	10002e44 <PDU_Switch_Relay>

		pcsBmsStatus->bmc_main_relay		= RELAY_OPEN;
1000145c:	683b      	ldr	r3, [r7, #0]
1000145e:	2200      	movs	r2, #0
10001460:	709a      	strb	r2, [r3, #2]
		pcsBmsStatus->bmc_precharge_relay	= RELAY_OPEN;
10001462:	683b      	ldr	r3, [r7, #0]
10001464:	2200      	movs	r2, #0
10001466:	70da      	strb	r2, [r3, #3]
		pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
10001468:	683b      	ldr	r3, [r7, #0]
1000146a:	2201      	movs	r2, #1
1000146c:	701a      	strb	r2, [r3, #0]

		*state = OP_TURN_ON;
1000146e:	68fb      	ldr	r3, [r7, #12]
10001470:	2201      	movs	r2, #1
10001472:	701a      	strb	r2, [r3, #0]
		isStandbyExecuted = false;
10001474:	4b02      	ldr	r3, [pc, #8]	; (10001480 <OP_PutSystemStandby+0x6c>)
10001476:	2200      	movs	r2, #0
10001478:	701a      	strb	r2, [r3, #0]
	}
}
1000147a:	46bd      	mov	sp, r7
1000147c:	b004      	add	sp, #16
1000147e:	bd80      	pop	{r7, pc}
10001480:	20000755 	.word	0x20000755

10001484 <OP_HandlingPCSWarning>:

void OP_HandlingPCSWarning(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						   MISC_SYSTICK_PARAM_t *sysTickParam,
						   OP_CTRL_FLAG_t *ctrlFlag, BMC_PARAMETER_t *bmsParam,
						   PCS_BMC_STATUS_t *pcsBmsStatus)
{
10001484:	b580      	push	{r7, lr}
10001486:	b084      	sub	sp, #16
10001488:	af00      	add	r7, sp, #0
1000148a:	60f8      	str	r0, [r7, #12]
1000148c:	60b9      	str	r1, [r7, #8]
1000148e:	607a      	str	r2, [r7, #4]
10001490:	603b      	str	r3, [r7, #0]

	/* 1. if error elapsed, attempt for change PCS to RUN state */
	if(!ctrlFlag->isStandby)
10001492:	683b      	ldr	r3, [r7, #0]
10001494:	785b      	ldrb	r3, [r3, #1]
10001496:	2201      	movs	r2, #1
10001498:	4053      	eors	r3, r2
1000149a:	b2db      	uxtb	r3, r3
1000149c:	2b00      	cmp	r3, #0
1000149e:	d002      	beq.n	100014a6 <OP_HandlingPCSWarning+0x22>
	{
		pcsBmsStatus->bmc_pcs_command = BMU_PCS_START;
100014a0:	69fb      	ldr	r3, [r7, #28]
100014a2:	2201      	movs	r2, #1
100014a4:	705a      	strb	r2, [r3, #1]
	}

	/* 1. if PCS acknowledged that already change to RUN, return the state to RUNNING */
	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
100014a6:	68bb      	ldr	r3, [r7, #8]
100014a8:	781b      	ldrb	r3, [r3, #0]
100014aa:	2b06      	cmp	r3, #6
100014ac:	d102      	bne.n	100014b4 <OP_HandlingPCSWarning+0x30>
	{
		*state = OP_RUNNING;
100014ae:	68fb      	ldr	r3, [r7, #12]
100014b0:	2202      	movs	r2, #2
100014b2:	701a      	strb	r2, [r3, #0]
	//if(ctrlFlag->isForced_shut_down){bmsParam->soc = 2;}
//	if((bmsParam->soc <= 50) && (!ctrlFlag->isBypass_power_mode))
//	{
//		*state = OP_SHUTDOWN;
//	}
}
100014b4:	46bd      	mov	sp, r7
100014b6:	b004      	add	sp, #16
100014b8:	bd80      	pop	{r7, pc}
100014ba:	46c0      	nop			; (mov r8, r8)

100014bc <OP_PutSystemShutDown>:

void OP_PutSystemShutDown(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam)
{
100014bc:	b580      	push	{r7, lr}
100014be:	b082      	sub	sp, #8
100014c0:	af00      	add	r7, sp, #0
100014c2:	6078      	str	r0, [r7, #4]
100014c4:	6039      	str	r1, [r7, #0]
	if(!sysTickParam->isTimeOut)
100014c6:	683b      	ldr	r3, [r7, #0]
100014c8:	791b      	ldrb	r3, [r3, #4]
100014ca:	2201      	movs	r2, #1
100014cc:	4053      	eors	r3, r2
100014ce:	b2db      	uxtb	r3, r3
100014d0:	2b00      	cmp	r3, #0
100014d2:	d006      	beq.n	100014e2 <OP_PutSystemShutDown+0x26>
	{
		sysTickParam->enable	= true;
100014d4:	683b      	ldr	r3, [r7, #0]
100014d6:	2201      	movs	r2, #1
100014d8:	701a      	strb	r2, [r3, #0]
		sysTickParam->count		= 1;
100014da:	683b      	ldr	r3, [r7, #0]
100014dc:	2201      	movs	r2, #1
100014de:	805a      	strh	r2, [r3, #2]
100014e0:	e00c      	b.n	100014fc <OP_PutSystemShutDown+0x40>
	}
	else
	{
		PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
100014e2:	2000      	movs	r0, #0
100014e4:	2100      	movs	r1, #0
100014e6:	f001 fcad 	bl	10002e44 <PDU_Switch_Relay>
		sysTickParam->isTimeOut = false;
100014ea:	683b      	ldr	r3, [r7, #0]
100014ec:	2200      	movs	r2, #0
100014ee:	711a      	strb	r2, [r3, #4]
		sysTickParam->count = 0;
100014f0:	683b      	ldr	r3, [r7, #0]
100014f2:	2200      	movs	r2, #0
100014f4:	805a      	strh	r2, [r3, #2]
		*state = OP_SETUP;
100014f6:	687b      	ldr	r3, [r7, #4]
100014f8:	2200      	movs	r2, #0
100014fa:	701a      	strb	r2, [r3, #0]
	}
}
100014fc:	46bd      	mov	sp, r7
100014fe:	b002      	add	sp, #8
10001500:	bd80      	pop	{r7, pc}
10001502:	46c0      	nop			; (mov r8, r8)

10001504 <OP_CheckingMode>:

void OP_CheckingMode(OP_CTRL_FLAG_t *ctrlFlag)
{
10001504:	b580      	push	{r7, lr}
10001506:	b082      	sub	sp, #8
10001508:	af00      	add	r7, sp, #0
1000150a:	6078      	str	r0, [r7, #4]
	/* Read Dip Switch */
	(XMC_GPIO_GetInput(P4_2) == 1)?(ctrlFlag->isBypass_power_mode = true):
1000150c:	4b1f      	ldr	r3, [pc, #124]	; (1000158c <OP_CheckingMode+0x88>)
1000150e:	1c18      	adds	r0, r3, #0
10001510:	2102      	movs	r1, #2
10001512:	f7ff fdc5 	bl	100010a0 <XMC_GPIO_GetInput>
10001516:	1e03      	subs	r3, r0, #0
10001518:	2b01      	cmp	r3, #1
1000151a:	d103      	bne.n	10001524 <OP_CheckingMode+0x20>
1000151c:	687b      	ldr	r3, [r7, #4]
1000151e:	2201      	movs	r2, #1
10001520:	70da      	strb	r2, [r3, #3]
10001522:	e002      	b.n	1000152a <OP_CheckingMode+0x26>
								   (ctrlFlag->isBypass_power_mode = false);
10001524:	687b      	ldr	r3, [r7, #4]
10001526:	2200      	movs	r2, #0
10001528:	70da      	strb	r2, [r3, #3]
	(XMC_GPIO_GetInput(P4_3) == 1)?(ctrlFlag->isAuto_mode = true):
1000152a:	4b18      	ldr	r3, [pc, #96]	; (1000158c <OP_CheckingMode+0x88>)
1000152c:	1c18      	adds	r0, r3, #0
1000152e:	2103      	movs	r1, #3
10001530:	f7ff fdb6 	bl	100010a0 <XMC_GPIO_GetInput>
10001534:	1e03      	subs	r3, r0, #0
10001536:	2b01      	cmp	r3, #1
10001538:	d103      	bne.n	10001542 <OP_CheckingMode+0x3e>
1000153a:	687b      	ldr	r3, [r7, #4]
1000153c:	2201      	movs	r2, #1
1000153e:	709a      	strb	r2, [r3, #2]
10001540:	e002      	b.n	10001548 <OP_CheckingMode+0x44>
								   (ctrlFlag->isAuto_mode = false);
10001542:	687b      	ldr	r3, [r7, #4]
10001544:	2200      	movs	r2, #0
10001546:	709a      	strb	r2, [r3, #2]
	(XMC_GPIO_GetInput(P4_4) == 1)?(ctrlFlag->isChecking_peripheral = true):
10001548:	4b10      	ldr	r3, [pc, #64]	; (1000158c <OP_CheckingMode+0x88>)
1000154a:	1c18      	adds	r0, r3, #0
1000154c:	2104      	movs	r1, #4
1000154e:	f7ff fda7 	bl	100010a0 <XMC_GPIO_GetInput>
10001552:	1e03      	subs	r3, r0, #0
10001554:	2b01      	cmp	r3, #1
10001556:	d103      	bne.n	10001560 <OP_CheckingMode+0x5c>
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	2201      	movs	r2, #1
1000155c:	715a      	strb	r2, [r3, #5]
1000155e:	e002      	b.n	10001566 <OP_CheckingMode+0x62>
								   (ctrlFlag->isChecking_peripheral = false);
10001560:	687b      	ldr	r3, [r7, #4]
10001562:	2200      	movs	r2, #0
10001564:	715a      	strb	r2, [r3, #5]
	(XMC_GPIO_GetInput(P4_5) == 1)?(ctrlFlag->isForced_shutting_down = true):
10001566:	4b09      	ldr	r3, [pc, #36]	; (1000158c <OP_CheckingMode+0x88>)
10001568:	1c18      	adds	r0, r3, #0
1000156a:	2105      	movs	r1, #5
1000156c:	f7ff fd98 	bl	100010a0 <XMC_GPIO_GetInput>
10001570:	1e03      	subs	r3, r0, #0
10001572:	2b01      	cmp	r3, #1
10001574:	d103      	bne.n	1000157e <OP_CheckingMode+0x7a>
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	2201      	movs	r2, #1
1000157a:	711a      	strb	r2, [r3, #4]
1000157c:	e002      	b.n	10001584 <OP_CheckingMode+0x80>
								   (ctrlFlag->isForced_shutting_down = false);
1000157e:	687b      	ldr	r3, [r7, #4]
10001580:	2200      	movs	r2, #0
10001582:	711a      	strb	r2, [r3, #4]
}
10001584:	46bd      	mov	sp, r7
10001586:	b002      	add	sp, #8
10001588:	bd80      	pop	{r7, pc}
1000158a:	46c0      	nop			; (mov r8, r8)
1000158c:	40040400 	.word	0x40040400

10001590 <OP_CheckingError>:

void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
10001590:	b580      	push	{r7, lr}
10001592:	b084      	sub	sp, #16
10001594:	af00      	add	r7, sp, #0
10001596:	60f8      	str	r0, [r7, #12]
10001598:	60b9      	str	r1, [r7, #8]
1000159a:	607a      	str	r2, [r7, #4]
1000159c:	603b      	str	r3, [r7, #0]
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
1000159e:	68bb      	ldr	r3, [r7, #8]
100015a0:	791b      	ldrb	r3, [r3, #4]
100015a2:	1c1a      	adds	r2, r3, #0
						  gridStatus->dcgrid_system_pcsIsStandBy |\
100015a4:	687b      	ldr	r3, [r7, #4]
100015a6:	78db      	ldrb	r3, [r3, #3]
void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
100015a8:	4313      	orrs	r3, r2
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
100015aa:	683a      	ldr	r2, [r7, #0]
100015ac:	78d2      	ldrb	r2, [r2, #3]
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
100015ae:	4313      	orrs	r3, r2
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
100015b0:	69ba      	ldr	r2, [r7, #24]
100015b2:	78d2      	ldrb	r2, [r2, #3]
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
100015b4:	4313      	orrs	r3, r2
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
100015b6:	69fa      	ldr	r2, [r7, #28]
100015b8:	78d2      	ldrb	r2, [r2, #3]
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
100015ba:	4313      	orrs	r3, r2
100015bc:	1e5a      	subs	r2, r3, #1
100015be:	4193      	sbcs	r3, r2
100015c0:	b2da      	uxtb	r2, r3
void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
100015c2:	68fb      	ldr	r3, [r7, #12]
100015c4:	705a      	strb	r2, [r3, #1]
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
}
100015c6:	46bd      	mov	sp, r7
100015c8:	b004      	add	sp, #16
100015ca:	bd80      	pop	{r7, pc}

100015cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
100015cc:	b580      	push	{r7, lr}
100015ce:	b082      	sub	sp, #8
100015d0:	af00      	add	r7, sp, #0
100015d2:	1c02      	adds	r2, r0, #0
100015d4:	1dfb      	adds	r3, r7, #7
100015d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100015d8:	1dfb      	adds	r3, r7, #7
100015da:	781b      	ldrb	r3, [r3, #0]
100015dc:	2b7f      	cmp	r3, #127	; 0x7f
100015de:	d80a      	bhi.n	100015f6 <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100015e0:	4906      	ldr	r1, [pc, #24]	; (100015fc <__NVIC_ClearPendingIRQ+0x30>)
100015e2:	1dfb      	adds	r3, r7, #7
100015e4:	781b      	ldrb	r3, [r3, #0]
100015e6:	1c1a      	adds	r2, r3, #0
100015e8:	231f      	movs	r3, #31
100015ea:	4013      	ands	r3, r2
100015ec:	2201      	movs	r2, #1
100015ee:	409a      	lsls	r2, r3
100015f0:	23c0      	movs	r3, #192	; 0xc0
100015f2:	005b      	lsls	r3, r3, #1
100015f4:	50ca      	str	r2, [r1, r3]
  }
}
100015f6:	46bd      	mov	sp, r7
100015f8:	b002      	add	sp, #8
100015fa:	bd80      	pop	{r7, pc}
100015fc:	e000e100 	.word	0xe000e100

10001600 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10001600:	b580      	push	{r7, lr}
10001602:	b082      	sub	sp, #8
10001604:	af00      	add	r7, sp, #0
10001606:	6078      	str	r0, [r7, #4]
10001608:	1c0a      	adds	r2, r1, #0
1000160a:	1cfb      	adds	r3, r7, #3
1000160c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
1000160e:	1cfb      	adds	r3, r7, #3
10001610:	781b      	ldrb	r3, [r3, #0]
10001612:	2280      	movs	r2, #128	; 0x80
10001614:	0252      	lsls	r2, r2, #9
10001616:	409a      	lsls	r2, r3
10001618:	687b      	ldr	r3, [r7, #4]
1000161a:	605a      	str	r2, [r3, #4]
}
1000161c:	46bd      	mov	sp, r7
1000161e:	b002      	add	sp, #8
10001620:	bd80      	pop	{r7, pc}
10001622:	46c0      	nop			; (mov r8, r8)

10001624 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10001624:	b580      	push	{r7, lr}
10001626:	b082      	sub	sp, #8
10001628:	af00      	add	r7, sp, #0
1000162a:	6078      	str	r0, [r7, #4]
1000162c:	1c0a      	adds	r2, r1, #0
1000162e:	1cfb      	adds	r3, r7, #3
10001630:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
10001632:	1cfb      	adds	r3, r7, #3
10001634:	781b      	ldrb	r3, [r3, #0]
10001636:	4a03      	ldr	r2, [pc, #12]	; (10001644 <XMC_GPIO_ToggleOutput+0x20>)
10001638:	409a      	lsls	r2, r3
1000163a:	687b      	ldr	r3, [r7, #4]
1000163c:	605a      	str	r2, [r3, #4]
}
1000163e:	46bd      	mov	sp, r7
10001640:	b002      	add	sp, #8
10001642:	bd80      	pop	{r7, pc}
10001644:	00010001 	.word	0x00010001

10001648 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10001648:	b580      	push	{r7, lr}
1000164a:	b082      	sub	sp, #8
1000164c:	af00      	add	r7, sp, #0
1000164e:	6078      	str	r0, [r7, #4]
10001650:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10001652:	687b      	ldr	r3, [r7, #4]
10001654:	683a      	ldr	r2, [r7, #0]
10001656:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001658:	46bd      	mov	sp, r7
1000165a:	b002      	add	sp, #8
1000165c:	bd80      	pop	{r7, pc}
1000165e:	46c0      	nop			; (mov r8, r8)

10001660 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10001660:	b580      	push	{r7, lr}
10001662:	b082      	sub	sp, #8
10001664:	af00      	add	r7, sp, #0
10001666:	6078      	str	r0, [r7, #4]
10001668:	1c0a      	adds	r2, r1, #0
1000166a:	1cfb      	adds	r3, r7, #3
1000166c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
1000166e:	1cfb      	adds	r3, r7, #3
10001670:	781b      	ldrb	r3, [r3, #0]
10001672:	2201      	movs	r2, #1
10001674:	409a      	lsls	r2, r3
10001676:	687b      	ldr	r3, [r7, #4]
10001678:	21b0      	movs	r1, #176	; 0xb0
1000167a:	505a      	str	r2, [r3, r1]
}
1000167c:	46bd      	mov	sp, r7
1000167e:	b002      	add	sp, #8
10001680:	bd80      	pop	{r7, pc}
10001682:	46c0      	nop			; (mov r8, r8)

10001684 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
10001684:	b580      	push	{r7, lr}
10001686:	b082      	sub	sp, #8
10001688:	af00      	add	r7, sp, #0
1000168a:	6078      	str	r0, [r7, #4]
1000168c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
1000168e:	687b      	ldr	r3, [r7, #4]
10001690:	683a      	ldr	r2, [r7, #0]
10001692:	32c0      	adds	r2, #192	; 0xc0
10001694:	0092      	lsls	r2, r2, #2
10001696:	58d3      	ldr	r3, [r2, r3]
10001698:	b29b      	uxth	r3, r3
}
1000169a:	1c18      	adds	r0, r3, #0
1000169c:	46bd      	mov	sp, r7
1000169e:	b002      	add	sp, #8
100016a0:	bd80      	pop	{r7, pc}
100016a2:	46c0      	nop			; (mov r8, r8)

100016a4 <XMC_VADC_GROUP_ClearResultEvent>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_ChannelTriggerEvent().
 */
__STATIC_INLINE void XMC_VADC_GROUP_ClearResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
100016a4:	b580      	push	{r7, lr}
100016a6:	b082      	sub	sp, #8
100016a8:	af00      	add	r7, sp, #0
100016aa:	6078      	str	r0, [r7, #4]
100016ac:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  group_ptr->REFCLR = (uint32_t)((uint32_t)1 << res_reg);
100016ae:	683b      	ldr	r3, [r7, #0]
100016b0:	2201      	movs	r2, #1
100016b2:	409a      	lsls	r2, r3
100016b4:	1c11      	adds	r1, r2, #0
100016b6:	687a      	ldr	r2, [r7, #4]
100016b8:	23ca      	movs	r3, #202	; 0xca
100016ba:	005b      	lsls	r3, r3, #1
100016bc:	50d1      	str	r1, [r2, r3]
}
100016be:	46bd      	mov	sp, r7
100016c0:	b002      	add	sp, #8
100016c2:	bd80      	pop	{r7, pc}

100016c4 <IRQ12_Handler>:
 */

#include "interrupts.h"

void genixrs485_intrpt_handler(void)
{
100016c4:	b580      	push	{r7, lr}
100016c6:	b082      	sub	sp, #8
100016c8:	af00      	add	r7, sp, #0
	static uint8_t 	count;
	static uint8_t 	length;
	static char buffer[32];
	uint8_t data;

	XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0,
100016ca:	4a83      	ldr	r2, [pc, #524]	; (100018d8 <IRQ12_Handler+0x214>)
100016cc:	2380      	movs	r3, #128	; 0x80
100016ce:	01db      	lsls	r3, r3, #7
100016d0:	1c10      	adds	r0, r2, #0
100016d2:	1c19      	adds	r1, r3, #0
100016d4:	f7ff ffb8 	bl	10001648 <XMC_UART_CH_ClearStatusFlag>
								XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);

	data = XMC_UART_CH_GetReceivedData(XMC_USIC1_CH0);
100016d8:	4b7f      	ldr	r3, [pc, #508]	; (100018d8 <IRQ12_Handler+0x214>)
100016da:	1c18      	adds	r0, r3, #0
100016dc:	f004 f9fe 	bl	10005adc <XMC_UART_CH_GetReceivedData>
100016e0:	1c03      	adds	r3, r0, #0
100016e2:	1c1a      	adds	r2, r3, #0
100016e4:	1dfb      	adds	r3, r7, #7
100016e6:	701a      	strb	r2, [r3, #0]
	switch(rcvState)
100016e8:	4b7c      	ldr	r3, [pc, #496]	; (100018dc <IRQ12_Handler+0x218>)
100016ea:	781b      	ldrb	r3, [r3, #0]
100016ec:	2b05      	cmp	r3, #5
100016ee:	d900      	bls.n	100016f2 <IRQ12_Handler+0x2e>
100016f0:	e0ed      	b.n	100018ce <IRQ12_Handler+0x20a>
100016f2:	009a      	lsls	r2, r3, #2
100016f4:	4b7a      	ldr	r3, [pc, #488]	; (100018e0 <IRQ12_Handler+0x21c>)
100016f6:	18d3      	adds	r3, r2, r3
100016f8:	681b      	ldr	r3, [r3, #0]
100016fa:	469f      	mov	pc, r3
	{
		case RCV_HEADER_CHECK	:
			head = (head << 8) | data;
100016fc:	4b79      	ldr	r3, [pc, #484]	; (100018e4 <IRQ12_Handler+0x220>)
100016fe:	881b      	ldrh	r3, [r3, #0]
10001700:	021b      	lsls	r3, r3, #8
10001702:	b29a      	uxth	r2, r3
10001704:	1dfb      	adds	r3, r7, #7
10001706:	781b      	ldrb	r3, [r3, #0]
10001708:	b29b      	uxth	r3, r3
1000170a:	4313      	orrs	r3, r2
1000170c:	b29b      	uxth	r3, r3
1000170e:	b29a      	uxth	r2, r3
10001710:	4b74      	ldr	r3, [pc, #464]	; (100018e4 <IRQ12_Handler+0x220>)
10001712:	801a      	strh	r2, [r3, #0]
			if(head == 0xAABB)
10001714:	4b73      	ldr	r3, [pc, #460]	; (100018e4 <IRQ12_Handler+0x220>)
10001716:	881b      	ldrh	r3, [r3, #0]
10001718:	4a73      	ldr	r2, [pc, #460]	; (100018e8 <IRQ12_Handler+0x224>)
1000171a:	4293      	cmp	r3, r2
1000171c:	d10e      	bne.n	1000173c <IRQ12_Handler+0x78>
			{
				XMC_GPIO_SetOutputLow(P2_11);
1000171e:	4b73      	ldr	r3, [pc, #460]	; (100018ec <IRQ12_Handler+0x228>)
10001720:	1c18      	adds	r0, r3, #0
10001722:	210b      	movs	r1, #11
10001724:	f7ff ff6c 	bl	10001600 <XMC_GPIO_SetOutputLow>
				rcvState = RCV_DATA_LENGTH;
10001728:	4b6c      	ldr	r3, [pc, #432]	; (100018dc <IRQ12_Handler+0x218>)
1000172a:	2201      	movs	r2, #1
1000172c:	701a      	strb	r2, [r3, #0]
				head	 = 0x0000;
1000172e:	4b6d      	ldr	r3, [pc, #436]	; (100018e4 <IRQ12_Handler+0x220>)
10001730:	2200      	movs	r2, #0
10001732:	801a      	strh	r2, [r3, #0]
				length   = 0;
10001734:	4b6e      	ldr	r3, [pc, #440]	; (100018f0 <IRQ12_Handler+0x22c>)
10001736:	2200      	movs	r2, #0
10001738:	701a      	strb	r2, [r3, #0]
			}
			break;
1000173a:	e0c9      	b.n	100018d0 <IRQ12_Handler+0x20c>
1000173c:	e0c8      	b.n	100018d0 <IRQ12_Handler+0x20c>
		case RCV_DATA_LENGTH	:
			if(data == 32)
1000173e:	1dfb      	adds	r3, r7, #7
10001740:	781b      	ldrb	r3, [r3, #0]
10001742:	2b20      	cmp	r3, #32
10001744:	d109      	bne.n	1000175a <IRQ12_Handler+0x96>
			{

				length = data-4; // dont know why substracted by 4. LoL
10001746:	1dfb      	adds	r3, r7, #7
10001748:	781b      	ldrb	r3, [r3, #0]
1000174a:	3b04      	subs	r3, #4
1000174c:	b2da      	uxtb	r2, r3
1000174e:	4b68      	ldr	r3, [pc, #416]	; (100018f0 <IRQ12_Handler+0x22c>)
10001750:	701a      	strb	r2, [r3, #0]
				rcvState = RCV_RESPONSE_CODE;
10001752:	4b62      	ldr	r3, [pc, #392]	; (100018dc <IRQ12_Handler+0x218>)
10001754:	2202      	movs	r2, #2
10001756:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
			}
			break;
10001758:	e0ba      	b.n	100018d0 <IRQ12_Handler+0x20c>
				length = data-4; // dont know why substracted by 4. LoL
				rcvState = RCV_RESPONSE_CODE;
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
1000175a:	4b60      	ldr	r3, [pc, #384]	; (100018dc <IRQ12_Handler+0x218>)
1000175c:	2200      	movs	r2, #0
1000175e:	701a      	strb	r2, [r3, #0]
			}
			break;
10001760:	e0b6      	b.n	100018d0 <IRQ12_Handler+0x20c>
		case RCV_RESPONSE_CODE	:
			if(data == GENIX_SUMMARY)
10001762:	1dfb      	adds	r3, r7, #7
10001764:	781b      	ldrb	r3, [r3, #0]
10001766:	2b02      	cmp	r3, #2
10001768:	d106      	bne.n	10001778 <IRQ12_Handler+0xb4>
			{

				rcvState = RCV_COLLECT_DATA;
1000176a:	4b5c      	ldr	r3, [pc, #368]	; (100018dc <IRQ12_Handler+0x218>)
1000176c:	2203      	movs	r2, #3
1000176e:	701a      	strb	r2, [r3, #0]
				count=0;
10001770:	4b60      	ldr	r3, [pc, #384]	; (100018f4 <IRQ12_Handler+0x230>)
10001772:	2200      	movs	r2, #0
10001774:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
			}
			break;
10001776:	e0ab      	b.n	100018d0 <IRQ12_Handler+0x20c>
				rcvState = RCV_COLLECT_DATA;
				count=0;
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
10001778:	4b58      	ldr	r3, [pc, #352]	; (100018dc <IRQ12_Handler+0x218>)
1000177a:	2200      	movs	r2, #0
1000177c:	701a      	strb	r2, [r3, #0]
			}
			break;
1000177e:	e0a7      	b.n	100018d0 <IRQ12_Handler+0x20c>
		case RCV_COLLECT_DATA	:
			if(count == length-1)
10001780:	4b5c      	ldr	r3, [pc, #368]	; (100018f4 <IRQ12_Handler+0x230>)
10001782:	781b      	ldrb	r3, [r3, #0]
10001784:	1c1a      	adds	r2, r3, #0
10001786:	4b5a      	ldr	r3, [pc, #360]	; (100018f0 <IRQ12_Handler+0x22c>)
10001788:	781b      	ldrb	r3, [r3, #0]
1000178a:	3b01      	subs	r3, #1
1000178c:	429a      	cmp	r2, r3
1000178e:	d10d      	bne.n	100017ac <IRQ12_Handler+0xe8>
			{

				buffer[count] = data;
10001790:	4b58      	ldr	r3, [pc, #352]	; (100018f4 <IRQ12_Handler+0x230>)
10001792:	781b      	ldrb	r3, [r3, #0]
10001794:	1c19      	adds	r1, r3, #0
10001796:	4b58      	ldr	r3, [pc, #352]	; (100018f8 <IRQ12_Handler+0x234>)
10001798:	1dfa      	adds	r2, r7, #7
1000179a:	7812      	ldrb	r2, [r2, #0]
1000179c:	545a      	strb	r2, [r3, r1]
				rcvState = RCV_ECC_CHECK;
1000179e:	4b4f      	ldr	r3, [pc, #316]	; (100018dc <IRQ12_Handler+0x218>)
100017a0:	2204      	movs	r2, #4
100017a2:	701a      	strb	r2, [r3, #0]
				count = 0;
100017a4:	4b53      	ldr	r3, [pc, #332]	; (100018f4 <IRQ12_Handler+0x230>)
100017a6:	2200      	movs	r2, #0
100017a8:	701a      	strb	r2, [r3, #0]
			else
			{
				buffer[count] = data;
				count++;
			}
			break;
100017aa:	e091      	b.n	100018d0 <IRQ12_Handler+0x20c>
				rcvState = RCV_ECC_CHECK;
				count = 0;
			}
			else
			{
				buffer[count] = data;
100017ac:	4b51      	ldr	r3, [pc, #324]	; (100018f4 <IRQ12_Handler+0x230>)
100017ae:	781b      	ldrb	r3, [r3, #0]
100017b0:	1c19      	adds	r1, r3, #0
100017b2:	4b51      	ldr	r3, [pc, #324]	; (100018f8 <IRQ12_Handler+0x234>)
100017b4:	1dfa      	adds	r2, r7, #7
100017b6:	7812      	ldrb	r2, [r2, #0]
100017b8:	545a      	strb	r2, [r3, r1]
				count++;
100017ba:	4b4e      	ldr	r3, [pc, #312]	; (100018f4 <IRQ12_Handler+0x230>)
100017bc:	781b      	ldrb	r3, [r3, #0]
100017be:	3301      	adds	r3, #1
100017c0:	b2da      	uxtb	r2, r3
100017c2:	4b4c      	ldr	r3, [pc, #304]	; (100018f4 <IRQ12_Handler+0x230>)
100017c4:	701a      	strb	r2, [r3, #0]
			}
			break;
100017c6:	e083      	b.n	100018d0 <IRQ12_Handler+0x20c>
		case RCV_ECC_CHECK :
			tail = 0x0000;
100017c8:	4b4c      	ldr	r3, [pc, #304]	; (100018fc <IRQ12_Handler+0x238>)
100017ca:	2200      	movs	r2, #0
100017cc:	801a      	strh	r2, [r3, #0]
			rcvState = RCV_TAIL_CHECK;
100017ce:	4b43      	ldr	r3, [pc, #268]	; (100018dc <IRQ12_Handler+0x218>)
100017d0:	2205      	movs	r2, #5
100017d2:	701a      	strb	r2, [r3, #0]
			break;
100017d4:	e07c      	b.n	100018d0 <IRQ12_Handler+0x20c>
		case RCV_TAIL_CHECK :
			tail = (tail << 8) | data;
100017d6:	4b49      	ldr	r3, [pc, #292]	; (100018fc <IRQ12_Handler+0x238>)
100017d8:	881b      	ldrh	r3, [r3, #0]
100017da:	021b      	lsls	r3, r3, #8
100017dc:	b29a      	uxth	r2, r3
100017de:	1dfb      	adds	r3, r7, #7
100017e0:	781b      	ldrb	r3, [r3, #0]
100017e2:	b29b      	uxth	r3, r3
100017e4:	4313      	orrs	r3, r2
100017e6:	b29b      	uxth	r3, r3
100017e8:	b29a      	uxth	r2, r3
100017ea:	4b44      	ldr	r3, [pc, #272]	; (100018fc <IRQ12_Handler+0x238>)
100017ec:	801a      	strh	r2, [r3, #0]
			if(count == 1)
100017ee:	4b41      	ldr	r3, [pc, #260]	; (100018f4 <IRQ12_Handler+0x230>)
100017f0:	781b      	ldrb	r3, [r3, #0]
100017f2:	2b01      	cmp	r3, #1
100017f4:	d164      	bne.n	100018c0 <IRQ12_Handler+0x1fc>
			{
				if(tail == 0x0D0A)
100017f6:	4b41      	ldr	r3, [pc, #260]	; (100018fc <IRQ12_Handler+0x238>)
100017f8:	881b      	ldrh	r3, [r3, #0]
100017fa:	4a41      	ldr	r2, [pc, #260]	; (10001900 <IRQ12_Handler+0x23c>)
100017fc:	4293      	cmp	r3, r2
100017fe:	d15b      	bne.n	100018b8 <IRQ12_Handler+0x1f4>
				{
					/* do a parse */
					/* Battery Voltage */
					genix_data.pack_voltage = (((uint16_t)(buffer[0]) << 8) | buffer[1]);
10001800:	4b3d      	ldr	r3, [pc, #244]	; (100018f8 <IRQ12_Handler+0x234>)
10001802:	781b      	ldrb	r3, [r3, #0]
10001804:	021b      	lsls	r3, r3, #8
10001806:	b29a      	uxth	r2, r3
10001808:	4b3b      	ldr	r3, [pc, #236]	; (100018f8 <IRQ12_Handler+0x234>)
1000180a:	785b      	ldrb	r3, [r3, #1]
1000180c:	b29b      	uxth	r3, r3
1000180e:	4313      	orrs	r3, r2
10001810:	b29b      	uxth	r3, r3
10001812:	b29a      	uxth	r2, r3
10001814:	4b3b      	ldr	r3, [pc, #236]	; (10001904 <IRQ12_Handler+0x240>)
10001816:	805a      	strh	r2, [r3, #2]
					data_group.vBat_genix = genix_data.pack_voltage;
10001818:	4b3a      	ldr	r3, [pc, #232]	; (10001904 <IRQ12_Handler+0x240>)
1000181a:	885a      	ldrh	r2, [r3, #2]
1000181c:	4b3a      	ldr	r3, [pc, #232]	; (10001908 <IRQ12_Handler+0x244>)
1000181e:	875a      	strh	r2, [r3, #58]	; 0x3a
					/* Current */
					genix_data.pack_current = ((((int16_t)(buffer[2]) << 8) | buffer[3]) - 30000);
10001820:	4b35      	ldr	r3, [pc, #212]	; (100018f8 <IRQ12_Handler+0x234>)
10001822:	789b      	ldrb	r3, [r3, #2]
10001824:	021b      	lsls	r3, r3, #8
10001826:	b29a      	uxth	r2, r3
10001828:	4b33      	ldr	r3, [pc, #204]	; (100018f8 <IRQ12_Handler+0x234>)
1000182a:	78db      	ldrb	r3, [r3, #3]
1000182c:	b29b      	uxth	r3, r3
1000182e:	4313      	orrs	r3, r2
10001830:	b29b      	uxth	r3, r3
10001832:	b29b      	uxth	r3, r3
10001834:	4a35      	ldr	r2, [pc, #212]	; (1000190c <IRQ12_Handler+0x248>)
10001836:	4694      	mov	ip, r2
10001838:	4463      	add	r3, ip
1000183a:	b29b      	uxth	r3, r3
1000183c:	b29a      	uxth	r2, r3
1000183e:	4b31      	ldr	r3, [pc, #196]	; (10001904 <IRQ12_Handler+0x240>)
10001840:	80da      	strh	r2, [r3, #6]
					data_group.iBat_genix = (genix_data.pack_current)/10;
10001842:	4b30      	ldr	r3, [pc, #192]	; (10001904 <IRQ12_Handler+0x240>)
10001844:	88db      	ldrh	r3, [r3, #6]
10001846:	b21b      	sxth	r3, r3
10001848:	1c18      	adds	r0, r3, #0
1000184a:	210a      	movs	r1, #10
1000184c:	f005 f85a 	bl	10006904 <__aeabi_idiv>
10001850:	1c03      	adds	r3, r0, #0
10001852:	b29b      	uxth	r3, r3
10001854:	b21b      	sxth	r3, r3
10001856:	1c18      	adds	r0, r3, #0
10001858:	f005 fd60 	bl	1000731c <__aeabi_i2f>
1000185c:	1c02      	adds	r2, r0, #0
1000185e:	4b2a      	ldr	r3, [pc, #168]	; (10001908 <IRQ12_Handler+0x244>)
10001860:	63da      	str	r2, [r3, #60]	; 0x3c
					/* Max Cell Temperature */
					genix_data.pack_max_temp = ((uint16_t)(buffer[11])-40)*10;
10001862:	4b25      	ldr	r3, [pc, #148]	; (100018f8 <IRQ12_Handler+0x234>)
10001864:	7adb      	ldrb	r3, [r3, #11]
10001866:	3b28      	subs	r3, #40	; 0x28
10001868:	b29b      	uxth	r3, r3
1000186a:	1c1a      	adds	r2, r3, #0
1000186c:	0092      	lsls	r2, r2, #2
1000186e:	18d3      	adds	r3, r2, r3
10001870:	18db      	adds	r3, r3, r3
10001872:	b29a      	uxth	r2, r3
10001874:	4b23      	ldr	r3, [pc, #140]	; (10001904 <IRQ12_Handler+0x240>)
10001876:	809a      	strh	r2, [r3, #4]
					data_group.temp_genix = genix_data.pack_max_temp/10;
10001878:	4b22      	ldr	r3, [pc, #136]	; (10001904 <IRQ12_Handler+0x240>)
1000187a:	889b      	ldrh	r3, [r3, #4]
1000187c:	1c18      	adds	r0, r3, #0
1000187e:	210a      	movs	r1, #10
10001880:	f004 ffb0 	bl	100067e4 <__aeabi_uidiv>
10001884:	1c03      	adds	r3, r0, #0
10001886:	b29b      	uxth	r3, r3
10001888:	b2d9      	uxtb	r1, r3
1000188a:	4b1f      	ldr	r3, [pc, #124]	; (10001908 <IRQ12_Handler+0x244>)
1000188c:	2240      	movs	r2, #64	; 0x40
1000188e:	5499      	strb	r1, [r3, r2]
					/* SoC */
					genix_data.pack_soc = (uint16_t)(buffer[4]);
10001890:	4b19      	ldr	r3, [pc, #100]	; (100018f8 <IRQ12_Handler+0x234>)
10001892:	791b      	ldrb	r3, [r3, #4]
10001894:	b29a      	uxth	r2, r3
10001896:	4b1b      	ldr	r3, [pc, #108]	; (10001904 <IRQ12_Handler+0x240>)
10001898:	801a      	strh	r2, [r3, #0]
					data_group.soC = genix_data.pack_soc/10;
1000189a:	4b1a      	ldr	r3, [pc, #104]	; (10001904 <IRQ12_Handler+0x240>)
1000189c:	881b      	ldrh	r3, [r3, #0]
1000189e:	1c18      	adds	r0, r3, #0
100018a0:	210a      	movs	r1, #10
100018a2:	f004 ff9f 	bl	100067e4 <__aeabi_uidiv>
100018a6:	1c03      	adds	r3, r0, #0
100018a8:	b29b      	uxth	r3, r3
100018aa:	b2d9      	uxtb	r1, r3
100018ac:	4b16      	ldr	r3, [pc, #88]	; (10001908 <IRQ12_Handler+0x244>)
100018ae:	2239      	movs	r2, #57	; 0x39
100018b0:	5499      	strb	r1, [r3, r2]
					count = 0;
100018b2:	4b10      	ldr	r3, [pc, #64]	; (100018f4 <IRQ12_Handler+0x230>)
100018b4:	2200      	movs	r2, #0
100018b6:	701a      	strb	r2, [r3, #0]
				}
				rcvState = RCV_HEADER_CHECK;
100018b8:	4b08      	ldr	r3, [pc, #32]	; (100018dc <IRQ12_Handler+0x218>)
100018ba:	2200      	movs	r2, #0
100018bc:	701a      	strb	r2, [r3, #0]
			}
			else count++;
			break;
100018be:	e007      	b.n	100018d0 <IRQ12_Handler+0x20c>
					data_group.soC = genix_data.pack_soc/10;
					count = 0;
				}
				rcvState = RCV_HEADER_CHECK;
			}
			else count++;
100018c0:	4b0c      	ldr	r3, [pc, #48]	; (100018f4 <IRQ12_Handler+0x230>)
100018c2:	781b      	ldrb	r3, [r3, #0]
100018c4:	3301      	adds	r3, #1
100018c6:	b2da      	uxtb	r2, r3
100018c8:	4b0a      	ldr	r3, [pc, #40]	; (100018f4 <IRQ12_Handler+0x230>)
100018ca:	701a      	strb	r2, [r3, #0]
			break;
100018cc:	e000      	b.n	100018d0 <IRQ12_Handler+0x20c>
		default				:break;
100018ce:	46c0      	nop			; (mov r8, r8)
	}
}
100018d0:	46bd      	mov	sp, r7
100018d2:	b002      	add	sp, #8
100018d4:	bd80      	pop	{r7, pc}
100018d6:	46c0      	nop			; (mov r8, r8)
100018d8:	48004000 	.word	0x48004000
100018dc:	20000756 	.word	0x20000756
100018e0:	1000cdd8 	.word	0x1000cdd8
100018e4:	20000758 	.word	0x20000758
100018e8:	0000aabb 	.word	0x0000aabb
100018ec:	40040200 	.word	0x40040200
100018f0:	2000075a 	.word	0x2000075a
100018f4:	2000075b 	.word	0x2000075b
100018f8:	2000075c 	.word	0x2000075c
100018fc:	2000077c 	.word	0x2000077c
10001900:	00000d0a 	.word	0x00000d0a
10001904:	20000ad0 	.word	0x20000ad0
10001908:	20000a48 	.word	0x20000a48
1000190c:	ffff8ad0 	.word	0xffff8ad0

10001910 <IRQ18_Handler>:

void esp32uart_intrpt_handler(void)
{
10001910:	b580      	push	{r7, lr}
10001912:	b082      	sub	sp, #8
10001914:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	uint8_t data;
	static uint8_t crc=0;
	static uint8_t buffData[7];
	static bool isValid;
	XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0,XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);
10001916:	2390      	movs	r3, #144	; 0x90
10001918:	05da      	lsls	r2, r3, #23
1000191a:	2380      	movs	r3, #128	; 0x80
1000191c:	01db      	lsls	r3, r3, #7
1000191e:	1c10      	adds	r0, r2, #0
10001920:	1c19      	adds	r1, r3, #0
10001922:	f7ff fe91 	bl	10001648 <XMC_UART_CH_ClearStatusFlag>
	data = XMC_UART_CH_GetReceivedData(XMC_USIC0_CH0);
10001926:	2390      	movs	r3, #144	; 0x90
10001928:	05db      	lsls	r3, r3, #23
1000192a:	1c18      	adds	r0, r3, #0
1000192c:	f004 f8d6 	bl	10005adc <XMC_UART_CH_GetReceivedData>
10001930:	1c03      	adds	r3, r0, #0
10001932:	b2da      	uxtb	r2, r3
10001934:	1dfb      	adds	r3, r7, #7
10001936:	701a      	strb	r2, [r3, #0]

	switch(state)
10001938:	4b3d      	ldr	r3, [pc, #244]	; (10001a30 <IRQ18_Handler+0x120>)
1000193a:	781b      	ldrb	r3, [r3, #0]
1000193c:	2b04      	cmp	r3, #4
1000193e:	d900      	bls.n	10001942 <IRQ18_Handler+0x32>
10001940:	e071      	b.n	10001a26 <IRQ18_Handler+0x116>
10001942:	009a      	lsls	r2, r3, #2
10001944:	4b3b      	ldr	r3, [pc, #236]	; (10001a34 <IRQ18_Handler+0x124>)
10001946:	18d3      	adds	r3, r2, r3
10001948:	681b      	ldr	r3, [r3, #0]
1000194a:	469f      	mov	pc, r3
	{
		case ESP_SOF	:
			if(data == 0x04)
1000194c:	1dfb      	adds	r3, r7, #7
1000194e:	781b      	ldrb	r3, [r3, #0]
10001950:	2b04      	cmp	r3, #4
10001952:	d106      	bne.n	10001962 <IRQ18_Handler+0x52>
			{
				isValid = false;
10001954:	4b38      	ldr	r3, [pc, #224]	; (10001a38 <IRQ18_Handler+0x128>)
10001956:	2200      	movs	r2, #0
10001958:	701a      	strb	r2, [r3, #0]
				state = ESP_LENGTH;
1000195a:	4b35      	ldr	r3, [pc, #212]	; (10001a30 <IRQ18_Handler+0x120>)
1000195c:	2201      	movs	r2, #1
1000195e:	701a      	strb	r2, [r3, #0]
			}
			break;
10001960:	e062      	b.n	10001a28 <IRQ18_Handler+0x118>
10001962:	e061      	b.n	10001a28 <IRQ18_Handler+0x118>
		case ESP_LENGTH	:
			length = data;
10001964:	1dfb      	adds	r3, r7, #7
10001966:	781a      	ldrb	r2, [r3, #0]
10001968:	4b34      	ldr	r3, [pc, #208]	; (10001a3c <IRQ18_Handler+0x12c>)
1000196a:	701a      	strb	r2, [r3, #0]
			count = 0;
1000196c:	4b34      	ldr	r3, [pc, #208]	; (10001a40 <IRQ18_Handler+0x130>)
1000196e:	2200      	movs	r2, #0
10001970:	701a      	strb	r2, [r3, #0]
			crc = 0;
10001972:	4b34      	ldr	r3, [pc, #208]	; (10001a44 <IRQ18_Handler+0x134>)
10001974:	2200      	movs	r2, #0
10001976:	701a      	strb	r2, [r3, #0]
			state = ESP_DATA;
10001978:	4b2d      	ldr	r3, [pc, #180]	; (10001a30 <IRQ18_Handler+0x120>)
1000197a:	2202      	movs	r2, #2
1000197c:	701a      	strb	r2, [r3, #0]
			break;
1000197e:	e053      	b.n	10001a28 <IRQ18_Handler+0x118>
		case ESP_DATA :
			ESP32_SendStream((char*)&data, 1);
10001980:	1dfb      	adds	r3, r7, #7
10001982:	1c18      	adds	r0, r3, #0
10001984:	2101      	movs	r1, #1
10001986:	f002 fca5 	bl	100042d4 <ESP32_SendStream>
			if(count == length-1)
1000198a:	4b2d      	ldr	r3, [pc, #180]	; (10001a40 <IRQ18_Handler+0x130>)
1000198c:	781b      	ldrb	r3, [r3, #0]
1000198e:	1c1a      	adds	r2, r3, #0
10001990:	4b2a      	ldr	r3, [pc, #168]	; (10001a3c <IRQ18_Handler+0x12c>)
10001992:	781b      	ldrb	r3, [r3, #0]
10001994:	3b01      	subs	r3, #1
10001996:	429a      	cmp	r2, r3
10001998:	d116      	bne.n	100019c8 <IRQ18_Handler+0xb8>
			{
				buffData[count] = data;
1000199a:	4b29      	ldr	r3, [pc, #164]	; (10001a40 <IRQ18_Handler+0x130>)
1000199c:	781b      	ldrb	r3, [r3, #0]
1000199e:	1c1a      	adds	r2, r3, #0
100019a0:	1dfb      	adds	r3, r7, #7
100019a2:	7819      	ldrb	r1, [r3, #0]
100019a4:	4b28      	ldr	r3, [pc, #160]	; (10001a48 <IRQ18_Handler+0x138>)
100019a6:	5499      	strb	r1, [r3, r2]
				crc = ESP32_CRC8_maxim(buffData, length);
100019a8:	4b24      	ldr	r3, [pc, #144]	; (10001a3c <IRQ18_Handler+0x12c>)
100019aa:	781b      	ldrb	r3, [r3, #0]
100019ac:	1c1a      	adds	r2, r3, #0
100019ae:	4b26      	ldr	r3, [pc, #152]	; (10001a48 <IRQ18_Handler+0x138>)
100019b0:	1c18      	adds	r0, r3, #0
100019b2:	1c11      	adds	r1, r2, #0
100019b4:	f003 f856 	bl	10004a64 <ESP32_CRC8_maxim>
100019b8:	1c03      	adds	r3, r0, #0
100019ba:	1c1a      	adds	r2, r3, #0
100019bc:	4b21      	ldr	r3, [pc, #132]	; (10001a44 <IRQ18_Handler+0x134>)
100019be:	701a      	strb	r2, [r3, #0]
				state = ESP_CRC8;
100019c0:	4b1b      	ldr	r3, [pc, #108]	; (10001a30 <IRQ18_Handler+0x120>)
100019c2:	2203      	movs	r2, #3
100019c4:	701a      	strb	r2, [r3, #0]
			else
			{
				buffData[count] = data;
				count++;
			}
			break;
100019c6:	e02f      	b.n	10001a28 <IRQ18_Handler+0x118>
				crc = ESP32_CRC8_maxim(buffData, length);
				state = ESP_CRC8;
			}
			else
			{
				buffData[count] = data;
100019c8:	4b1d      	ldr	r3, [pc, #116]	; (10001a40 <IRQ18_Handler+0x130>)
100019ca:	781b      	ldrb	r3, [r3, #0]
100019cc:	1c1a      	adds	r2, r3, #0
100019ce:	1dfb      	adds	r3, r7, #7
100019d0:	7819      	ldrb	r1, [r3, #0]
100019d2:	4b1d      	ldr	r3, [pc, #116]	; (10001a48 <IRQ18_Handler+0x138>)
100019d4:	5499      	strb	r1, [r3, r2]
				count++;
100019d6:	4b1a      	ldr	r3, [pc, #104]	; (10001a40 <IRQ18_Handler+0x130>)
100019d8:	781b      	ldrb	r3, [r3, #0]
100019da:	3301      	adds	r3, #1
100019dc:	b2da      	uxtb	r2, r3
100019de:	4b18      	ldr	r3, [pc, #96]	; (10001a40 <IRQ18_Handler+0x130>)
100019e0:	701a      	strb	r2, [r3, #0]
			}
			break;
100019e2:	e021      	b.n	10001a28 <IRQ18_Handler+0x118>
		case ESP_CRC8 :
			if(data == crc)
100019e4:	1dfb      	adds	r3, r7, #7
100019e6:	781a      	ldrb	r2, [r3, #0]
100019e8:	4b16      	ldr	r3, [pc, #88]	; (10001a44 <IRQ18_Handler+0x134>)
100019ea:	781b      	ldrb	r3, [r3, #0]
100019ec:	429a      	cmp	r2, r3
100019ee:	d102      	bne.n	100019f6 <IRQ18_Handler+0xe6>
//				date_data.month		= buffData[2];
//				date_data.date		= buffData[3];
//				time_data.hour		= buffData[4];
//				time_data.minute	= buffData[5];
//				time_data.second	= buffData[6];
				isValid				= true;
100019f0:	4b11      	ldr	r3, [pc, #68]	; (10001a38 <IRQ18_Handler+0x128>)
100019f2:	2201      	movs	r2, #1
100019f4:	701a      	strb	r2, [r3, #0]
			}
			state = ESP_EOF;
100019f6:	4b0e      	ldr	r3, [pc, #56]	; (10001a30 <IRQ18_Handler+0x120>)
100019f8:	2204      	movs	r2, #4
100019fa:	701a      	strb	r2, [r3, #0]
			break;
100019fc:	e014      	b.n	10001a28 <IRQ18_Handler+0x118>
		case ESP_EOF :
			if(data == 0x0B)
100019fe:	1dfb      	adds	r3, r7, #7
10001a00:	781b      	ldrb	r3, [r3, #0]
10001a02:	2b0b      	cmp	r3, #11
10001a04:	d10b      	bne.n	10001a1e <IRQ18_Handler+0x10e>
			{
				if(isValid)
10001a06:	4b0c      	ldr	r3, [pc, #48]	; (10001a38 <IRQ18_Handler+0x128>)
10001a08:	781b      	ldrb	r3, [r3, #0]
10001a0a:	2b00      	cmp	r3, #0
10001a0c:	d007      	beq.n	10001a1e <IRQ18_Handler+0x10e>
				{
					XMC_GPIO_ToggleOutput(P2_13);
10001a0e:	4b0f      	ldr	r3, [pc, #60]	; (10001a4c <IRQ18_Handler+0x13c>)
10001a10:	1c18      	adds	r0, r3, #0
10001a12:	210d      	movs	r1, #13
10001a14:	f7ff fe06 	bl	10001624 <XMC_GPIO_ToggleOutput>
					isValid = false;
10001a18:	4b07      	ldr	r3, [pc, #28]	; (10001a38 <IRQ18_Handler+0x128>)
10001a1a:	2200      	movs	r2, #0
10001a1c:	701a      	strb	r2, [r3, #0]
				}
			}
			state= ESP_SOF;
10001a1e:	4b04      	ldr	r3, [pc, #16]	; (10001a30 <IRQ18_Handler+0x120>)
10001a20:	2200      	movs	r2, #0
10001a22:	701a      	strb	r2, [r3, #0]
			break;
10001a24:	e000      	b.n	10001a28 <IRQ18_Handler+0x118>
		default			: break;
10001a26:	46c0      	nop			; (mov r8, r8)
	}
}
10001a28:	46bd      	mov	sp, r7
10001a2a:	b002      	add	sp, #8
10001a2c:	bd80      	pop	{r7, pc}
10001a2e:	46c0      	nop			; (mov r8, r8)
10001a30:	2000077e 	.word	0x2000077e
10001a34:	1000cdf0 	.word	0x1000cdf0
10001a38:	2000077f 	.word	0x2000077f
10001a3c:	20000780 	.word	0x20000780
10001a40:	20000781 	.word	0x20000781
10001a44:	20000782 	.word	0x20000782
10001a48:	20000784 	.word	0x20000784
10001a4c:	40040200 	.word	0x40040200

10001a50 <IRQ7_Handler>:

void pcsCAN_intrpt_handler(void)
{
10001a50:	b590      	push	{r4, r7, lr}
10001a52:	b083      	sub	sp, #12
10001a54:	af00      	add	r7, sp, #0
	// takes 30 us
	XMC_CAN_MO_Receive(&msgObjFromPCS);
10001a56:	4bcb      	ldr	r3, [pc, #812]	; (10001d84 <IRQ7_Handler+0x334>)
10001a58:	1c18      	adds	r0, r3, #0
10001a5a:	f003 fde1 	bl	10005620 <XMC_CAN_MO_Receive>
	switch(msgObjFromPCS.can_identifier)
10001a5e:	4bc9      	ldr	r3, [pc, #804]	; (10001d84 <IRQ7_Handler+0x334>)
10001a60:	685b      	ldr	r3, [r3, #4]
10001a62:	00db      	lsls	r3, r3, #3
10001a64:	08db      	lsrs	r3, r3, #3
10001a66:	4ac8      	ldr	r2, [pc, #800]	; (10001d88 <IRQ7_Handler+0x338>)
10001a68:	4694      	mov	ip, r2
10001a6a:	4463      	add	r3, ip
10001a6c:	2b08      	cmp	r3, #8
10001a6e:	d901      	bls.n	10001a74 <IRQ7_Handler+0x24>
10001a70:	f000 fb7a 	bl	10002168 <IRQ7_Handler+0x718>
10001a74:	009a      	lsls	r2, r3, #2
10001a76:	4bc5      	ldr	r3, [pc, #788]	; (10001d8c <IRQ7_Handler+0x33c>)
10001a78:	18d3      	adds	r3, r2, r3
10001a7a:	681b      	ldr	r3, [r3, #0]
10001a7c:	469f      	mov	pc, r3
	{
		case 0x200 : // PCS System Properties
			pcsSystemStatus = PCS_GetPCSStatus(&msgObjFromPCS);
10001a7e:	4cc4      	ldr	r4, [pc, #784]	; (10001d90 <IRQ7_Handler+0x340>)
10001a80:	1c3a      	adds	r2, r7, #0
10001a82:	4bc0      	ldr	r3, [pc, #768]	; (10001d84 <IRQ7_Handler+0x334>)
10001a84:	1c10      	adds	r0, r2, #0
10001a86:	1c19      	adds	r1, r3, #0
10001a88:	f001 fc52 	bl	10003330 <PCS_GetPCSStatus>
10001a8c:	1c3b      	adds	r3, r7, #0
10001a8e:	1c21      	adds	r1, r4, #0
10001a90:	1c1a      	adds	r2, r3, #0
10001a92:	2305      	movs	r3, #5
10001a94:	1c08      	adds	r0, r1, #0
10001a96:	1c11      	adds	r1, r2, #0
10001a98:	1c1a      	adds	r2, r3, #0
10001a9a:	f007 f879 	bl	10008b90 <memcpy>

			data_group.pcs_system = 0x00;
10001a9e:	4bbd      	ldr	r3, [pc, #756]	; (10001d94 <IRQ7_Handler+0x344>)
10001aa0:	2200      	movs	r2, #0
10001aa2:	701a      	strb	r2, [r3, #0]
			if(pcsSystemStatus.pcs_system_status == PCS_STAT_INITIAL)		{data_group.pcs_system = 0x01;}
10001aa4:	4bba      	ldr	r3, [pc, #744]	; (10001d90 <IRQ7_Handler+0x340>)
10001aa6:	781b      	ldrb	r3, [r3, #0]
10001aa8:	2b00      	cmp	r3, #0
10001aaa:	d103      	bne.n	10001ab4 <IRQ7_Handler+0x64>
10001aac:	4bb9      	ldr	r3, [pc, #740]	; (10001d94 <IRQ7_Handler+0x344>)
10001aae:	2201      	movs	r2, #1
10001ab0:	701a      	strb	r2, [r3, #0]
10001ab2:	e00e      	b.n	10001ad2 <IRQ7_Handler+0x82>
			else if(pcsSystemStatus.pcs_system_status == PCS_STAT_STANDBY)	{data_group.pcs_system = 0x02;}
10001ab4:	4bb6      	ldr	r3, [pc, #728]	; (10001d90 <IRQ7_Handler+0x340>)
10001ab6:	781b      	ldrb	r3, [r3, #0]
10001ab8:	2b04      	cmp	r3, #4
10001aba:	d103      	bne.n	10001ac4 <IRQ7_Handler+0x74>
10001abc:	4bb5      	ldr	r3, [pc, #724]	; (10001d94 <IRQ7_Handler+0x344>)
10001abe:	2202      	movs	r2, #2
10001ac0:	701a      	strb	r2, [r3, #0]
10001ac2:	e006      	b.n	10001ad2 <IRQ7_Handler+0x82>
			else if(pcsSystemStatus.pcs_system_status == PCS_STAT_RUNNING)	{data_group.pcs_system = 0x03;}
10001ac4:	4bb2      	ldr	r3, [pc, #712]	; (10001d90 <IRQ7_Handler+0x340>)
10001ac6:	781b      	ldrb	r3, [r3, #0]
10001ac8:	2b06      	cmp	r3, #6
10001aca:	d102      	bne.n	10001ad2 <IRQ7_Handler+0x82>
10001acc:	4bb1      	ldr	r3, [pc, #708]	; (10001d94 <IRQ7_Handler+0x344>)
10001ace:	2203      	movs	r2, #3
10001ad0:	701a      	strb	r2, [r3, #0]

			if(pcsSystemStatus.pcs_precharge_IsComplete) {data_group.pcs_system |= 0x04;}
10001ad2:	4baf      	ldr	r3, [pc, #700]	; (10001d90 <IRQ7_Handler+0x340>)
10001ad4:	785b      	ldrb	r3, [r3, #1]
10001ad6:	2b00      	cmp	r3, #0
10001ad8:	d007      	beq.n	10001aea <IRQ7_Handler+0x9a>
10001ada:	4bae      	ldr	r3, [pc, #696]	; (10001d94 <IRQ7_Handler+0x344>)
10001adc:	781b      	ldrb	r3, [r3, #0]
10001ade:	2204      	movs	r2, #4
10001ae0:	4313      	orrs	r3, r2
10001ae2:	b2da      	uxtb	r2, r3
10001ae4:	4bab      	ldr	r3, [pc, #684]	; (10001d94 <IRQ7_Handler+0x344>)
10001ae6:	701a      	strb	r2, [r3, #0]
10001ae8:	e003      	b.n	10001af2 <IRQ7_Handler+0xa2>
			else {data_group.pcs_system |= 0x00;}
10001aea:	4baa      	ldr	r3, [pc, #680]	; (10001d94 <IRQ7_Handler+0x344>)
10001aec:	781a      	ldrb	r2, [r3, #0]
10001aee:	4ba9      	ldr	r3, [pc, #676]	; (10001d94 <IRQ7_Handler+0x344>)
10001af0:	701a      	strb	r2, [r3, #0]

			if(pcsSystemStatus.pcs_system_warning == PCS_WARN_NORMAL) 			{data_group.pcs_system |= (0x00 << 3);}
10001af2:	4ba7      	ldr	r3, [pc, #668]	; (10001d90 <IRQ7_Handler+0x340>)
10001af4:	789b      	ldrb	r3, [r3, #2]
10001af6:	2b00      	cmp	r3, #0
10001af8:	d104      	bne.n	10001b04 <IRQ7_Handler+0xb4>
10001afa:	4ba6      	ldr	r3, [pc, #664]	; (10001d94 <IRQ7_Handler+0x344>)
10001afc:	781a      	ldrb	r2, [r3, #0]
10001afe:	4ba5      	ldr	r3, [pc, #660]	; (10001d94 <IRQ7_Handler+0x344>)
10001b00:	701a      	strb	r2, [r3, #0]
10001b02:	e047      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_PCS_OT) 	{data_group.pcs_system |= (0x01 << 3);}
10001b04:	4ba2      	ldr	r3, [pc, #648]	; (10001d90 <IRQ7_Handler+0x340>)
10001b06:	789b      	ldrb	r3, [r3, #2]
10001b08:	2b06      	cmp	r3, #6
10001b0a:	d107      	bne.n	10001b1c <IRQ7_Handler+0xcc>
10001b0c:	4ba1      	ldr	r3, [pc, #644]	; (10001d94 <IRQ7_Handler+0x344>)
10001b0e:	781b      	ldrb	r3, [r3, #0]
10001b10:	2208      	movs	r2, #8
10001b12:	4313      	orrs	r3, r2
10001b14:	b2da      	uxtb	r2, r3
10001b16:	4b9f      	ldr	r3, [pc, #636]	; (10001d94 <IRQ7_Handler+0x344>)
10001b18:	701a      	strb	r2, [r3, #0]
10001b1a:	e03b      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVCHG) 	{data_group.pcs_system |= (0x02 << 3);}
10001b1c:	4b9c      	ldr	r3, [pc, #624]	; (10001d90 <IRQ7_Handler+0x340>)
10001b1e:	789b      	ldrb	r3, [r3, #2]
10001b20:	2b01      	cmp	r3, #1
10001b22:	d107      	bne.n	10001b34 <IRQ7_Handler+0xe4>
10001b24:	4b9b      	ldr	r3, [pc, #620]	; (10001d94 <IRQ7_Handler+0x344>)
10001b26:	781b      	ldrb	r3, [r3, #0]
10001b28:	2210      	movs	r2, #16
10001b2a:	4313      	orrs	r3, r2
10001b2c:	b2da      	uxtb	r2, r3
10001b2e:	4b99      	ldr	r3, [pc, #612]	; (10001d94 <IRQ7_Handler+0x344>)
10001b30:	701a      	strb	r2, [r3, #0]
10001b32:	e02f      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_CHGSUP) {data_group.pcs_system |= (0x03 << 3);}
10001b34:	4b96      	ldr	r3, [pc, #600]	; (10001d90 <IRQ7_Handler+0x340>)
10001b36:	789b      	ldrb	r3, [r3, #2]
10001b38:	2b02      	cmp	r3, #2
10001b3a:	d107      	bne.n	10001b4c <IRQ7_Handler+0xfc>
10001b3c:	4b95      	ldr	r3, [pc, #596]	; (10001d94 <IRQ7_Handler+0x344>)
10001b3e:	781b      	ldrb	r3, [r3, #0]
10001b40:	2218      	movs	r2, #24
10001b42:	4313      	orrs	r3, r2
10001b44:	b2da      	uxtb	r2, r3
10001b46:	4b93      	ldr	r3, [pc, #588]	; (10001d94 <IRQ7_Handler+0x344>)
10001b48:	701a      	strb	r2, [r3, #0]
10001b4a:	e023      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_DSGSUP) {data_group.pcs_system |= (0x04 << 3);}
10001b4c:	4b90      	ldr	r3, [pc, #576]	; (10001d90 <IRQ7_Handler+0x340>)
10001b4e:	789b      	ldrb	r3, [r3, #2]
10001b50:	2b03      	cmp	r3, #3
10001b52:	d107      	bne.n	10001b64 <IRQ7_Handler+0x114>
10001b54:	4b8f      	ldr	r3, [pc, #572]	; (10001d94 <IRQ7_Handler+0x344>)
10001b56:	781b      	ldrb	r3, [r3, #0]
10001b58:	2220      	movs	r2, #32
10001b5a:	4313      	orrs	r3, r2
10001b5c:	b2da      	uxtb	r2, r3
10001b5e:	4b8d      	ldr	r3, [pc, #564]	; (10001d94 <IRQ7_Handler+0x344>)
10001b60:	701a      	strb	r2, [r3, #0]
10001b62:	e017      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVDSG)  {data_group.pcs_system |= (0x05 << 3);}
10001b64:	4b8a      	ldr	r3, [pc, #552]	; (10001d90 <IRQ7_Handler+0x340>)
10001b66:	789b      	ldrb	r3, [r3, #2]
10001b68:	2b04      	cmp	r3, #4
10001b6a:	d107      	bne.n	10001b7c <IRQ7_Handler+0x12c>
10001b6c:	4b89      	ldr	r3, [pc, #548]	; (10001d94 <IRQ7_Handler+0x344>)
10001b6e:	781b      	ldrb	r3, [r3, #0]
10001b70:	2228      	movs	r2, #40	; 0x28
10001b72:	4313      	orrs	r3, r2
10001b74:	b2da      	uxtb	r2, r3
10001b76:	4b87      	ldr	r3, [pc, #540]	; (10001d94 <IRQ7_Handler+0x344>)
10001b78:	701a      	strb	r2, [r3, #0]
10001b7a:	e00b      	b.n	10001b94 <IRQ7_Handler+0x144>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVDSG2) {data_group.pcs_system |= (0x06 << 3);}
10001b7c:	4b84      	ldr	r3, [pc, #528]	; (10001d90 <IRQ7_Handler+0x340>)
10001b7e:	789b      	ldrb	r3, [r3, #2]
10001b80:	2b05      	cmp	r3, #5
10001b82:	d107      	bne.n	10001b94 <IRQ7_Handler+0x144>
10001b84:	4b83      	ldr	r3, [pc, #524]	; (10001d94 <IRQ7_Handler+0x344>)
10001b86:	781b      	ldrb	r3, [r3, #0]
10001b88:	2230      	movs	r2, #48	; 0x30
10001b8a:	4313      	orrs	r3, r2
10001b8c:	b2da      	uxtb	r2, r3
10001b8e:	4b81      	ldr	r3, [pc, #516]	; (10001d94 <IRQ7_Handler+0x344>)
10001b90:	701a      	strb	r2, [r3, #0]
			break;
10001b92:	e2ea      	b.n	1000216a <IRQ7_Handler+0x71a>
10001b94:	e2e9      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x201 : // DC Grid Converter Properties
			pcsDCgridStatus = PCS_GetDCGridStatus(&msgObjFromPCS);
10001b96:	4b7b      	ldr	r3, [pc, #492]	; (10001d84 <IRQ7_Handler+0x334>)
10001b98:	1c18      	adds	r0, r3, #0
10001b9a:	f001 fc83 	bl	100034a4 <PCS_GetDCGridStatus>
10001b9e:	1c03      	adds	r3, r0, #0
10001ba0:	1c1a      	adds	r2, r3, #0
10001ba2:	4b7d      	ldr	r3, [pc, #500]	; (10001d98 <IRQ7_Handler+0x348>)
10001ba4:	1c11      	adds	r1, r2, #0
10001ba6:	7019      	strb	r1, [r3, #0]
10001ba8:	0411      	lsls	r1, r2, #16
10001baa:	0e09      	lsrs	r1, r1, #24
10001bac:	7059      	strb	r1, [r3, #1]
10001bae:	0211      	lsls	r1, r2, #8
10001bb0:	0e09      	lsrs	r1, r1, #24
10001bb2:	7099      	strb	r1, [r3, #2]
10001bb4:	0e12      	lsrs	r2, r2, #24
10001bb6:	70da      	strb	r2, [r3, #3]

			data_group.dcgrid_system = 0x00;
10001bb8:	4b76      	ldr	r3, [pc, #472]	; (10001d94 <IRQ7_Handler+0x344>)
10001bba:	2200      	movs	r2, #0
10001bbc:	705a      	strb	r2, [r3, #1]
			if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_NOT_RUNNING) 	{data_group.dcgrid_system |= 0x01;}
10001bbe:	4b76      	ldr	r3, [pc, #472]	; (10001d98 <IRQ7_Handler+0x348>)
10001bc0:	781b      	ldrb	r3, [r3, #0]
10001bc2:	2b00      	cmp	r3, #0
10001bc4:	d107      	bne.n	10001bd6 <IRQ7_Handler+0x186>
10001bc6:	4b73      	ldr	r3, [pc, #460]	; (10001d94 <IRQ7_Handler+0x344>)
10001bc8:	785b      	ldrb	r3, [r3, #1]
10001bca:	2201      	movs	r2, #1
10001bcc:	4313      	orrs	r3, r2
10001bce:	b2da      	uxtb	r2, r3
10001bd0:	4b70      	ldr	r3, [pc, #448]	; (10001d94 <IRQ7_Handler+0x344>)
10001bd2:	705a      	strb	r2, [r3, #1]
10001bd4:	e016      	b.n	10001c04 <IRQ7_Handler+0x1b4>
			else if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_CHG) 		{data_group.dcgrid_system |= 0x02;}
10001bd6:	4b70      	ldr	r3, [pc, #448]	; (10001d98 <IRQ7_Handler+0x348>)
10001bd8:	781b      	ldrb	r3, [r3, #0]
10001bda:	2b04      	cmp	r3, #4
10001bdc:	d107      	bne.n	10001bee <IRQ7_Handler+0x19e>
10001bde:	4b6d      	ldr	r3, [pc, #436]	; (10001d94 <IRQ7_Handler+0x344>)
10001be0:	785b      	ldrb	r3, [r3, #1]
10001be2:	2202      	movs	r2, #2
10001be4:	4313      	orrs	r3, r2
10001be6:	b2da      	uxtb	r2, r3
10001be8:	4b6a      	ldr	r3, [pc, #424]	; (10001d94 <IRQ7_Handler+0x344>)
10001bea:	705a      	strb	r2, [r3, #1]
10001bec:	e00a      	b.n	10001c04 <IRQ7_Handler+0x1b4>
			else if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_DSG) 		{data_group.dcgrid_system |= 0x03;}
10001bee:	4b6a      	ldr	r3, [pc, #424]	; (10001d98 <IRQ7_Handler+0x348>)
10001bf0:	781b      	ldrb	r3, [r3, #0]
10001bf2:	2b08      	cmp	r3, #8
10001bf4:	d106      	bne.n	10001c04 <IRQ7_Handler+0x1b4>
10001bf6:	4b67      	ldr	r3, [pc, #412]	; (10001d94 <IRQ7_Handler+0x344>)
10001bf8:	785b      	ldrb	r3, [r3, #1]
10001bfa:	2203      	movs	r2, #3
10001bfc:	4313      	orrs	r3, r2
10001bfe:	b2da      	uxtb	r2, r3
10001c00:	4b64      	ldr	r3, [pc, #400]	; (10001d94 <IRQ7_Handler+0x344>)
10001c02:	705a      	strb	r2, [r3, #1]

			if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_NORMAL)	{data_group.dcgrid_system |= (0x00 << 2);}
10001c04:	4b64      	ldr	r3, [pc, #400]	; (10001d98 <IRQ7_Handler+0x348>)
10001c06:	785b      	ldrb	r3, [r3, #1]
10001c08:	2b00      	cmp	r3, #0
10001c0a:	d104      	bne.n	10001c16 <IRQ7_Handler+0x1c6>
10001c0c:	4b61      	ldr	r3, [pc, #388]	; (10001d94 <IRQ7_Handler+0x344>)
10001c0e:	785a      	ldrb	r2, [r3, #1]
10001c10:	4b60      	ldr	r3, [pc, #384]	; (10001d94 <IRQ7_Handler+0x344>)
10001c12:	705a      	strb	r2, [r3, #1]
10001c14:	e017      	b.n	10001c46 <IRQ7_Handler+0x1f6>
			else if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_OV)	{data_group.dcgrid_system |= (0x01 << 2);}
10001c16:	4b60      	ldr	r3, [pc, #384]	; (10001d98 <IRQ7_Handler+0x348>)
10001c18:	785b      	ldrb	r3, [r3, #1]
10001c1a:	2b01      	cmp	r3, #1
10001c1c:	d107      	bne.n	10001c2e <IRQ7_Handler+0x1de>
10001c1e:	4b5d      	ldr	r3, [pc, #372]	; (10001d94 <IRQ7_Handler+0x344>)
10001c20:	785b      	ldrb	r3, [r3, #1]
10001c22:	2204      	movs	r2, #4
10001c24:	4313      	orrs	r3, r2
10001c26:	b2da      	uxtb	r2, r3
10001c28:	4b5a      	ldr	r3, [pc, #360]	; (10001d94 <IRQ7_Handler+0x344>)
10001c2a:	705a      	strb	r2, [r3, #1]
10001c2c:	e00b      	b.n	10001c46 <IRQ7_Handler+0x1f6>
			else if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_OC)	{data_group.dcgrid_system |= (0x02 << 2);}
10001c2e:	4b5a      	ldr	r3, [pc, #360]	; (10001d98 <IRQ7_Handler+0x348>)
10001c30:	785b      	ldrb	r3, [r3, #1]
10001c32:	2b02      	cmp	r3, #2
10001c34:	d107      	bne.n	10001c46 <IRQ7_Handler+0x1f6>
10001c36:	4b57      	ldr	r3, [pc, #348]	; (10001d94 <IRQ7_Handler+0x344>)
10001c38:	785b      	ldrb	r3, [r3, #1]
10001c3a:	2208      	movs	r2, #8
10001c3c:	4313      	orrs	r3, r2
10001c3e:	b2da      	uxtb	r2, r3
10001c40:	4b54      	ldr	r3, [pc, #336]	; (10001d94 <IRQ7_Handler+0x344>)
10001c42:	705a      	strb	r2, [r3, #1]
			break;
10001c44:	e291      	b.n	1000216a <IRQ7_Handler+0x71a>
10001c46:	e290      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x202 : // AC Inverter Properties
			pcsACinvStatus = PCS_GetACInvStatus(&msgObjFromPCS);
10001c48:	4b4e      	ldr	r3, [pc, #312]	; (10001d84 <IRQ7_Handler+0x334>)
10001c4a:	1c18      	adds	r0, r3, #0
10001c4c:	f001 fcb6 	bl	100035bc <PCS_GetACInvStatus>
10001c50:	1c03      	adds	r3, r0, #0
10001c52:	1c1a      	adds	r2, r3, #0
10001c54:	4b51      	ldr	r3, [pc, #324]	; (10001d9c <IRQ7_Handler+0x34c>)
10001c56:	1c11      	adds	r1, r2, #0
10001c58:	7019      	strb	r1, [r3, #0]
10001c5a:	0411      	lsls	r1, r2, #16
10001c5c:	0e09      	lsrs	r1, r1, #24
10001c5e:	7059      	strb	r1, [r3, #1]
10001c60:	0211      	lsls	r1, r2, #8
10001c62:	0e09      	lsrs	r1, r1, #24
10001c64:	7099      	strb	r1, [r3, #2]
10001c66:	0e12      	lsrs	r2, r2, #24
10001c68:	70da      	strb	r2, [r3, #3]

			data_group.inv_system = 0x00;
10001c6a:	4b4a      	ldr	r3, [pc, #296]	; (10001d94 <IRQ7_Handler+0x344>)
10001c6c:	2200      	movs	r2, #0
10001c6e:	709a      	strb	r2, [r3, #2]
			if(pcsACinvStatus.acinv_system_status == INV_STAT_NOT_RUNNING) 	{data_group.inv_system |= 0x01;}
10001c70:	4b4a      	ldr	r3, [pc, #296]	; (10001d9c <IRQ7_Handler+0x34c>)
10001c72:	781b      	ldrb	r3, [r3, #0]
10001c74:	2b00      	cmp	r3, #0
10001c76:	d107      	bne.n	10001c88 <IRQ7_Handler+0x238>
10001c78:	4b46      	ldr	r3, [pc, #280]	; (10001d94 <IRQ7_Handler+0x344>)
10001c7a:	789b      	ldrb	r3, [r3, #2]
10001c7c:	2201      	movs	r2, #1
10001c7e:	4313      	orrs	r3, r2
10001c80:	b2da      	uxtb	r2, r3
10001c82:	4b44      	ldr	r3, [pc, #272]	; (10001d94 <IRQ7_Handler+0x344>)
10001c84:	709a      	strb	r2, [r3, #2]
10001c86:	e016      	b.n	10001cb6 <IRQ7_Handler+0x266>
			else if(pcsACinvStatus.acinv_system_status == INV_STAT_RUNNING) {data_group.inv_system |= 0x02;}
10001c88:	4b44      	ldr	r3, [pc, #272]	; (10001d9c <IRQ7_Handler+0x34c>)
10001c8a:	781b      	ldrb	r3, [r3, #0]
10001c8c:	2b0e      	cmp	r3, #14
10001c8e:	d107      	bne.n	10001ca0 <IRQ7_Handler+0x250>
10001c90:	4b40      	ldr	r3, [pc, #256]	; (10001d94 <IRQ7_Handler+0x344>)
10001c92:	789b      	ldrb	r3, [r3, #2]
10001c94:	2202      	movs	r2, #2
10001c96:	4313      	orrs	r3, r2
10001c98:	b2da      	uxtb	r2, r3
10001c9a:	4b3e      	ldr	r3, [pc, #248]	; (10001d94 <IRQ7_Handler+0x344>)
10001c9c:	709a      	strb	r2, [r3, #2]
10001c9e:	e00a      	b.n	10001cb6 <IRQ7_Handler+0x266>
			else if(pcsACinvStatus.acinv_system_status == INV_STAT_NONE) 	{data_group.inv_system |= 0x03;}
10001ca0:	4b3e      	ldr	r3, [pc, #248]	; (10001d9c <IRQ7_Handler+0x34c>)
10001ca2:	781b      	ldrb	r3, [r3, #0]
10001ca4:	2b04      	cmp	r3, #4
10001ca6:	d106      	bne.n	10001cb6 <IRQ7_Handler+0x266>
10001ca8:	4b3a      	ldr	r3, [pc, #232]	; (10001d94 <IRQ7_Handler+0x344>)
10001caa:	789b      	ldrb	r3, [r3, #2]
10001cac:	2203      	movs	r2, #3
10001cae:	4313      	orrs	r3, r2
10001cb0:	b2da      	uxtb	r2, r3
10001cb2:	4b38      	ldr	r3, [pc, #224]	; (10001d94 <IRQ7_Handler+0x344>)
10001cb4:	709a      	strb	r2, [r3, #2]

			if(pcsACinvStatus.acinv_system_warning == INV_WARN_NORMAL)		{data_group.inv_system |= (0x00 << 2);}
10001cb6:	4b39      	ldr	r3, [pc, #228]	; (10001d9c <IRQ7_Handler+0x34c>)
10001cb8:	785b      	ldrb	r3, [r3, #1]
10001cba:	2b00      	cmp	r3, #0
10001cbc:	d104      	bne.n	10001cc8 <IRQ7_Handler+0x278>
10001cbe:	4b35      	ldr	r3, [pc, #212]	; (10001d94 <IRQ7_Handler+0x344>)
10001cc0:	789a      	ldrb	r2, [r3, #2]
10001cc2:	4b34      	ldr	r3, [pc, #208]	; (10001d94 <IRQ7_Handler+0x344>)
10001cc4:	709a      	strb	r2, [r3, #2]
10001cc6:	e03b      	b.n	10001d40 <IRQ7_Handler+0x2f0>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_MCU_OV)	{data_group.inv_system |= (0x01 << 2);}
10001cc8:	4b34      	ldr	r3, [pc, #208]	; (10001d9c <IRQ7_Handler+0x34c>)
10001cca:	785b      	ldrb	r3, [r3, #1]
10001ccc:	2b01      	cmp	r3, #1
10001cce:	d107      	bne.n	10001ce0 <IRQ7_Handler+0x290>
10001cd0:	4b30      	ldr	r3, [pc, #192]	; (10001d94 <IRQ7_Handler+0x344>)
10001cd2:	789b      	ldrb	r3, [r3, #2]
10001cd4:	2204      	movs	r2, #4
10001cd6:	4313      	orrs	r3, r2
10001cd8:	b2da      	uxtb	r2, r3
10001cda:	4b2e      	ldr	r3, [pc, #184]	; (10001d94 <IRQ7_Handler+0x344>)
10001cdc:	709a      	strb	r2, [r3, #2]
10001cde:	e02f      	b.n	10001d40 <IRQ7_Handler+0x2f0>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OT)		{data_group.inv_system |= (0x02 << 2);}
10001ce0:	4b2e      	ldr	r3, [pc, #184]	; (10001d9c <IRQ7_Handler+0x34c>)
10001ce2:	785b      	ldrb	r3, [r3, #1]
10001ce4:	2b02      	cmp	r3, #2
10001ce6:	d107      	bne.n	10001cf8 <IRQ7_Handler+0x2a8>
10001ce8:	4b2a      	ldr	r3, [pc, #168]	; (10001d94 <IRQ7_Handler+0x344>)
10001cea:	789b      	ldrb	r3, [r3, #2]
10001cec:	2208      	movs	r2, #8
10001cee:	4313      	orrs	r3, r2
10001cf0:	b2da      	uxtb	r2, r3
10001cf2:	4b28      	ldr	r3, [pc, #160]	; (10001d94 <IRQ7_Handler+0x344>)
10001cf4:	709a      	strb	r2, [r3, #2]
10001cf6:	e023      	b.n	10001d40 <IRQ7_Handler+0x2f0>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OV)		{data_group.inv_system |= (0x03 << 2);}
10001cf8:	4b28      	ldr	r3, [pc, #160]	; (10001d9c <IRQ7_Handler+0x34c>)
10001cfa:	785b      	ldrb	r3, [r3, #1]
10001cfc:	2b03      	cmp	r3, #3
10001cfe:	d107      	bne.n	10001d10 <IRQ7_Handler+0x2c0>
10001d00:	4b24      	ldr	r3, [pc, #144]	; (10001d94 <IRQ7_Handler+0x344>)
10001d02:	789b      	ldrb	r3, [r3, #2]
10001d04:	220c      	movs	r2, #12
10001d06:	4313      	orrs	r3, r2
10001d08:	b2da      	uxtb	r2, r3
10001d0a:	4b22      	ldr	r3, [pc, #136]	; (10001d94 <IRQ7_Handler+0x344>)
10001d0c:	709a      	strb	r2, [r3, #2]
10001d0e:	e017      	b.n	10001d40 <IRQ7_Handler+0x2f0>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_UV)		{data_group.inv_system |= (0x04 << 2);}
10001d10:	4b22      	ldr	r3, [pc, #136]	; (10001d9c <IRQ7_Handler+0x34c>)
10001d12:	785b      	ldrb	r3, [r3, #1]
10001d14:	2b04      	cmp	r3, #4
10001d16:	d107      	bne.n	10001d28 <IRQ7_Handler+0x2d8>
10001d18:	4b1e      	ldr	r3, [pc, #120]	; (10001d94 <IRQ7_Handler+0x344>)
10001d1a:	789b      	ldrb	r3, [r3, #2]
10001d1c:	2210      	movs	r2, #16
10001d1e:	4313      	orrs	r3, r2
10001d20:	b2da      	uxtb	r2, r3
10001d22:	4b1c      	ldr	r3, [pc, #112]	; (10001d94 <IRQ7_Handler+0x344>)
10001d24:	709a      	strb	r2, [r3, #2]
10001d26:	e00b      	b.n	10001d40 <IRQ7_Handler+0x2f0>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OL)		{data_group.inv_system |= (0x05 << 2);}
10001d28:	4b1c      	ldr	r3, [pc, #112]	; (10001d9c <IRQ7_Handler+0x34c>)
10001d2a:	785b      	ldrb	r3, [r3, #1]
10001d2c:	2b05      	cmp	r3, #5
10001d2e:	d107      	bne.n	10001d40 <IRQ7_Handler+0x2f0>
10001d30:	4b18      	ldr	r3, [pc, #96]	; (10001d94 <IRQ7_Handler+0x344>)
10001d32:	789b      	ldrb	r3, [r3, #2]
10001d34:	2214      	movs	r2, #20
10001d36:	4313      	orrs	r3, r2
10001d38:	b2da      	uxtb	r2, r3
10001d3a:	4b16      	ldr	r3, [pc, #88]	; (10001d94 <IRQ7_Handler+0x344>)
10001d3c:	709a      	strb	r2, [r3, #2]
			break;
10001d3e:	e214      	b.n	1000216a <IRQ7_Handler+0x71a>
10001d40:	e213      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x203 : // PV Converter Properties
			pcsPVconvStatus = PCS_GetPVConvStatus(&msgObjFromPCS);
10001d42:	4b10      	ldr	r3, [pc, #64]	; (10001d84 <IRQ7_Handler+0x334>)
10001d44:	1c18      	adds	r0, r3, #0
10001d46:	f001 fce3 	bl	10003710 <PCS_GetPVConvStatus>
10001d4a:	1c03      	adds	r3, r0, #0
10001d4c:	1c1a      	adds	r2, r3, #0
10001d4e:	4b14      	ldr	r3, [pc, #80]	; (10001da0 <IRQ7_Handler+0x350>)
10001d50:	1c11      	adds	r1, r2, #0
10001d52:	7019      	strb	r1, [r3, #0]
10001d54:	0411      	lsls	r1, r2, #16
10001d56:	0e09      	lsrs	r1, r1, #24
10001d58:	7059      	strb	r1, [r3, #1]
10001d5a:	0211      	lsls	r1, r2, #8
10001d5c:	0e09      	lsrs	r1, r1, #24
10001d5e:	7099      	strb	r1, [r3, #2]
10001d60:	0e12      	lsrs	r2, r2, #24
10001d62:	70da      	strb	r2, [r3, #3]

			data_group.pvconv_system = 0x00;
10001d64:	4b0b      	ldr	r3, [pc, #44]	; (10001d94 <IRQ7_Handler+0x344>)
10001d66:	2200      	movs	r2, #0
10001d68:	70da      	strb	r2, [r3, #3]
			if(pcsPVconvStatus.pvconv_system_status == PV_STAT_NOT_RUNNING)		{data_group.pvconv_system |= 0x01;}
10001d6a:	4b0d      	ldr	r3, [pc, #52]	; (10001da0 <IRQ7_Handler+0x350>)
10001d6c:	781b      	ldrb	r3, [r3, #0]
10001d6e:	2b00      	cmp	r3, #0
10001d70:	d118      	bne.n	10001da4 <IRQ7_Handler+0x354>
10001d72:	4b08      	ldr	r3, [pc, #32]	; (10001d94 <IRQ7_Handler+0x344>)
10001d74:	78db      	ldrb	r3, [r3, #3]
10001d76:	2201      	movs	r2, #1
10001d78:	4313      	orrs	r3, r2
10001d7a:	b2da      	uxtb	r2, r3
10001d7c:	4b05      	ldr	r3, [pc, #20]	; (10001d94 <IRQ7_Handler+0x344>)
10001d7e:	70da      	strb	r2, [r3, #3]
10001d80:	e01b      	b.n	10001dba <IRQ7_Handler+0x36a>
10001d82:	46c0      	nop			; (mov r8, r8)
10001d84:	20000658 	.word	0x20000658
10001d88:	fffffe00 	.word	0xfffffe00
10001d8c:	1000ce04 	.word	0x1000ce04
10001d90:	20000b44 	.word	0x20000b44
10001d94:	20000a48 	.word	0x20000a48
10001d98:	20000ad8 	.word	0x20000ad8
10001d9c:	20000a9c 	.word	0x20000a9c
10001da0:	20000a44 	.word	0x20000a44
			else if (pcsPVconvStatus.pvconv_system_status == PV_STAT_RUNNING) 	{data_group.pvconv_system |= 0x02;}
10001da4:	4bcb      	ldr	r3, [pc, #812]	; (100020d4 <IRQ7_Handler+0x684>)
10001da6:	781b      	ldrb	r3, [r3, #0]
10001da8:	2b04      	cmp	r3, #4
10001daa:	d106      	bne.n	10001dba <IRQ7_Handler+0x36a>
10001dac:	4bca      	ldr	r3, [pc, #808]	; (100020d8 <IRQ7_Handler+0x688>)
10001dae:	78db      	ldrb	r3, [r3, #3]
10001db0:	2202      	movs	r2, #2
10001db2:	4313      	orrs	r3, r2
10001db4:	b2da      	uxtb	r2, r3
10001db6:	4bc8      	ldr	r3, [pc, #800]	; (100020d8 <IRQ7_Handler+0x688>)
10001db8:	70da      	strb	r2, [r3, #3]

			if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_NORMAL)		{data_group.pvconv_system |= (0x00 << 2);}
10001dba:	4bc6      	ldr	r3, [pc, #792]	; (100020d4 <IRQ7_Handler+0x684>)
10001dbc:	785b      	ldrb	r3, [r3, #1]
10001dbe:	2b00      	cmp	r3, #0
10001dc0:	d104      	bne.n	10001dcc <IRQ7_Handler+0x37c>
10001dc2:	4bc5      	ldr	r3, [pc, #788]	; (100020d8 <IRQ7_Handler+0x688>)
10001dc4:	78da      	ldrb	r2, [r3, #3]
10001dc6:	4bc4      	ldr	r3, [pc, #784]	; (100020d8 <IRQ7_Handler+0x688>)
10001dc8:	70da      	strb	r2, [r3, #3]
10001dca:	e017      	b.n	10001dfc <IRQ7_Handler+0x3ac>
			else if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_OV) 	{data_group.pvconv_system |= (0x01 << 2);}
10001dcc:	4bc1      	ldr	r3, [pc, #772]	; (100020d4 <IRQ7_Handler+0x684>)
10001dce:	785b      	ldrb	r3, [r3, #1]
10001dd0:	2b01      	cmp	r3, #1
10001dd2:	d107      	bne.n	10001de4 <IRQ7_Handler+0x394>
10001dd4:	4bc0      	ldr	r3, [pc, #768]	; (100020d8 <IRQ7_Handler+0x688>)
10001dd6:	78db      	ldrb	r3, [r3, #3]
10001dd8:	2204      	movs	r2, #4
10001dda:	4313      	orrs	r3, r2
10001ddc:	b2da      	uxtb	r2, r3
10001dde:	4bbe      	ldr	r3, [pc, #760]	; (100020d8 <IRQ7_Handler+0x688>)
10001de0:	70da      	strb	r2, [r3, #3]
10001de2:	e00b      	b.n	10001dfc <IRQ7_Handler+0x3ac>
			else if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_OC) 	{data_group.pvconv_system |= (0x02 << 2);}
10001de4:	4bbb      	ldr	r3, [pc, #748]	; (100020d4 <IRQ7_Handler+0x684>)
10001de6:	785b      	ldrb	r3, [r3, #1]
10001de8:	2b02      	cmp	r3, #2
10001dea:	d107      	bne.n	10001dfc <IRQ7_Handler+0x3ac>
10001dec:	4bba      	ldr	r3, [pc, #744]	; (100020d8 <IRQ7_Handler+0x688>)
10001dee:	78db      	ldrb	r3, [r3, #3]
10001df0:	2208      	movs	r2, #8
10001df2:	4313      	orrs	r3, r2
10001df4:	b2da      	uxtb	r2, r3
10001df6:	4bb8      	ldr	r3, [pc, #736]	; (100020d8 <IRQ7_Handler+0x688>)
10001df8:	70da      	strb	r2, [r3, #3]
			break;
10001dfa:	e1b6      	b.n	1000216a <IRQ7_Handler+0x71a>
10001dfc:	e1b5      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x204 : // Battery Converter Properties
			pcsBatconvStatus = PCS_GetBatConvStatus(&msgObjFromPCS);
10001dfe:	4bb7      	ldr	r3, [pc, #732]	; (100020dc <IRQ7_Handler+0x68c>)
10001e00:	1c18      	adds	r0, r3, #0
10001e02:	f001 fcf7 	bl	100037f4 <PCS_GetBatConvStatus>
10001e06:	1c03      	adds	r3, r0, #0
10001e08:	1c1a      	adds	r2, r3, #0
10001e0a:	4bb5      	ldr	r3, [pc, #724]	; (100020e0 <IRQ7_Handler+0x690>)
10001e0c:	1c11      	adds	r1, r2, #0
10001e0e:	7019      	strb	r1, [r3, #0]
10001e10:	0411      	lsls	r1, r2, #16
10001e12:	0e09      	lsrs	r1, r1, #24
10001e14:	7059      	strb	r1, [r3, #1]
10001e16:	0211      	lsls	r1, r2, #8
10001e18:	0e09      	lsrs	r1, r1, #24
10001e1a:	7099      	strb	r1, [r3, #2]
10001e1c:	0e12      	lsrs	r2, r2, #24
10001e1e:	70da      	strb	r2, [r3, #3]
			data_group.batconv_system = ((pcsBatconvStatus.batconv_system_warning & 0xFF) << 2) | (pcsBatconvStatus.batconv_system_status);
10001e20:	4baf      	ldr	r3, [pc, #700]	; (100020e0 <IRQ7_Handler+0x690>)
10001e22:	785b      	ldrb	r3, [r3, #1]
10001e24:	009b      	lsls	r3, r3, #2
10001e26:	b2da      	uxtb	r2, r3
10001e28:	4bad      	ldr	r3, [pc, #692]	; (100020e0 <IRQ7_Handler+0x690>)
10001e2a:	781b      	ldrb	r3, [r3, #0]
10001e2c:	b2db      	uxtb	r3, r3
10001e2e:	4313      	orrs	r3, r2
10001e30:	b2db      	uxtb	r3, r3
10001e32:	b2da      	uxtb	r2, r3
10001e34:	4ba8      	ldr	r3, [pc, #672]	; (100020d8 <IRQ7_Handler+0x688>)
10001e36:	711a      	strb	r2, [r3, #4]

			data_group.batconv_system = 0x00;
10001e38:	4ba7      	ldr	r3, [pc, #668]	; (100020d8 <IRQ7_Handler+0x688>)
10001e3a:	2200      	movs	r2, #0
10001e3c:	711a      	strb	r2, [r3, #4]
			if(pcsBatconvStatus.batconv_system_status == BATCONV_STAT_NOT_RUNNING) 	{data_group.batconv_system |= 0x01;}
10001e3e:	4ba8      	ldr	r3, [pc, #672]	; (100020e0 <IRQ7_Handler+0x690>)
10001e40:	781b      	ldrb	r3, [r3, #0]
10001e42:	2b00      	cmp	r3, #0
10001e44:	d107      	bne.n	10001e56 <IRQ7_Handler+0x406>
10001e46:	4ba4      	ldr	r3, [pc, #656]	; (100020d8 <IRQ7_Handler+0x688>)
10001e48:	791b      	ldrb	r3, [r3, #4]
10001e4a:	2201      	movs	r2, #1
10001e4c:	4313      	orrs	r3, r2
10001e4e:	b2da      	uxtb	r2, r3
10001e50:	4ba1      	ldr	r3, [pc, #644]	; (100020d8 <IRQ7_Handler+0x688>)
10001e52:	711a      	strb	r2, [r3, #4]
10001e54:	e00a      	b.n	10001e6c <IRQ7_Handler+0x41c>
			else if(pcsBatconvStatus.batconv_system_status == BATCONV_STAT_RUNNING) {data_group.batconv_system |= 0x02;}
10001e56:	4ba2      	ldr	r3, [pc, #648]	; (100020e0 <IRQ7_Handler+0x690>)
10001e58:	781b      	ldrb	r3, [r3, #0]
10001e5a:	2b04      	cmp	r3, #4
10001e5c:	d106      	bne.n	10001e6c <IRQ7_Handler+0x41c>
10001e5e:	4b9e      	ldr	r3, [pc, #632]	; (100020d8 <IRQ7_Handler+0x688>)
10001e60:	791b      	ldrb	r3, [r3, #4]
10001e62:	2202      	movs	r2, #2
10001e64:	4313      	orrs	r3, r2
10001e66:	b2da      	uxtb	r2, r3
10001e68:	4b9b      	ldr	r3, [pc, #620]	; (100020d8 <IRQ7_Handler+0x688>)
10001e6a:	711a      	strb	r2, [r3, #4]

			if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_NORMAL) 		 {data_group.batconv_system |= (0x00 << 2);}
10001e6c:	4b9c      	ldr	r3, [pc, #624]	; (100020e0 <IRQ7_Handler+0x690>)
10001e6e:	785b      	ldrb	r3, [r3, #1]
10001e70:	2b00      	cmp	r3, #0
10001e72:	d104      	bne.n	10001e7e <IRQ7_Handler+0x42e>
10001e74:	4b98      	ldr	r3, [pc, #608]	; (100020d8 <IRQ7_Handler+0x688>)
10001e76:	791a      	ldrb	r2, [r3, #4]
10001e78:	4b97      	ldr	r3, [pc, #604]	; (100020d8 <IRQ7_Handler+0x688>)
10001e7a:	711a      	strb	r2, [r3, #4]
10001e7c:	e02f      	b.n	10001ede <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_OV) 	 {data_group.batconv_system |= (0x01 << 2);}
10001e7e:	4b98      	ldr	r3, [pc, #608]	; (100020e0 <IRQ7_Handler+0x690>)
10001e80:	785b      	ldrb	r3, [r3, #1]
10001e82:	2b01      	cmp	r3, #1
10001e84:	d107      	bne.n	10001e96 <IRQ7_Handler+0x446>
10001e86:	4b94      	ldr	r3, [pc, #592]	; (100020d8 <IRQ7_Handler+0x688>)
10001e88:	791b      	ldrb	r3, [r3, #4]
10001e8a:	2204      	movs	r2, #4
10001e8c:	4313      	orrs	r3, r2
10001e8e:	b2da      	uxtb	r2, r3
10001e90:	4b91      	ldr	r3, [pc, #580]	; (100020d8 <IRQ7_Handler+0x688>)
10001e92:	711a      	strb	r2, [r3, #4]
10001e94:	e023      	b.n	10001ede <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_OC) 	 {data_group.batconv_system |= (0x02 << 2);}
10001e96:	4b92      	ldr	r3, [pc, #584]	; (100020e0 <IRQ7_Handler+0x690>)
10001e98:	785b      	ldrb	r3, [r3, #1]
10001e9a:	2b02      	cmp	r3, #2
10001e9c:	d107      	bne.n	10001eae <IRQ7_Handler+0x45e>
10001e9e:	4b8e      	ldr	r3, [pc, #568]	; (100020d8 <IRQ7_Handler+0x688>)
10001ea0:	791b      	ldrb	r3, [r3, #4]
10001ea2:	2208      	movs	r2, #8
10001ea4:	4313      	orrs	r3, r2
10001ea6:	b2da      	uxtb	r2, r3
10001ea8:	4b8b      	ldr	r3, [pc, #556]	; (100020d8 <IRQ7_Handler+0x688>)
10001eaa:	711a      	strb	r2, [r3, #4]
10001eac:	e017      	b.n	10001ede <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_DCDC_OV) {data_group.batconv_system |= (0x03 << 2);}
10001eae:	4b8c      	ldr	r3, [pc, #560]	; (100020e0 <IRQ7_Handler+0x690>)
10001eb0:	785b      	ldrb	r3, [r3, #1]
10001eb2:	2b03      	cmp	r3, #3
10001eb4:	d107      	bne.n	10001ec6 <IRQ7_Handler+0x476>
10001eb6:	4b88      	ldr	r3, [pc, #544]	; (100020d8 <IRQ7_Handler+0x688>)
10001eb8:	791b      	ldrb	r3, [r3, #4]
10001eba:	220c      	movs	r2, #12
10001ebc:	4313      	orrs	r3, r2
10001ebe:	b2da      	uxtb	r2, r3
10001ec0:	4b85      	ldr	r3, [pc, #532]	; (100020d8 <IRQ7_Handler+0x688>)
10001ec2:	711a      	strb	r2, [r3, #4]
10001ec4:	e00b      	b.n	10001ede <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_DCDC_OT) {data_group.batconv_system |= (0x04 << 2);}
10001ec6:	4b86      	ldr	r3, [pc, #536]	; (100020e0 <IRQ7_Handler+0x690>)
10001ec8:	785b      	ldrb	r3, [r3, #1]
10001eca:	2b04      	cmp	r3, #4
10001ecc:	d107      	bne.n	10001ede <IRQ7_Handler+0x48e>
10001ece:	4b82      	ldr	r3, [pc, #520]	; (100020d8 <IRQ7_Handler+0x688>)
10001ed0:	791b      	ldrb	r3, [r3, #4]
10001ed2:	2210      	movs	r2, #16
10001ed4:	4313      	orrs	r3, r2
10001ed6:	b2da      	uxtb	r2, r3
10001ed8:	4b7f      	ldr	r3, [pc, #508]	; (100020d8 <IRQ7_Handler+0x688>)
10001eda:	711a      	strb	r2, [r3, #4]
			break;
10001edc:	e145      	b.n	1000216a <IRQ7_Handler+0x71a>
10001ede:	e144      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x205 : // Voltage Properties
			pcsVoltages = PCS_GetVoltParam(&msgObjFromPCS);
10001ee0:	4c80      	ldr	r4, [pc, #512]	; (100020e4 <IRQ7_Handler+0x694>)
10001ee2:	1c3a      	adds	r2, r7, #0
10001ee4:	4b7d      	ldr	r3, [pc, #500]	; (100020dc <IRQ7_Handler+0x68c>)
10001ee6:	1c10      	adds	r0, r2, #0
10001ee8:	1c19      	adds	r1, r3, #0
10001eea:	f001 fd1f 	bl	1000392c <PCS_GetVoltParam>
10001eee:	1c3b      	adds	r3, r7, #0
10001ef0:	1c21      	adds	r1, r4, #0
10001ef2:	1c1a      	adds	r2, r3, #0
10001ef4:	2308      	movs	r3, #8
10001ef6:	1c08      	adds	r0, r1, #0
10001ef8:	1c11      	adds	r1, r2, #0
10001efa:	1c1a      	adds	r2, r3, #0
10001efc:	f006 fe48 	bl	10008b90 <memcpy>
			data_group.vPv_conv 	= pcsVoltages.vPV*0.1;
10001f00:	4b78      	ldr	r3, [pc, #480]	; (100020e4 <IRQ7_Handler+0x694>)
10001f02:	889b      	ldrh	r3, [r3, #4]
10001f04:	1c18      	adds	r0, r3, #0
10001f06:	f006 fca7 	bl	10008858 <__aeabi_i2d>
10001f0a:	1c03      	adds	r3, r0, #0
10001f0c:	1c0c      	adds	r4, r1, #0
10001f0e:	1c18      	adds	r0, r3, #0
10001f10:	1c21      	adds	r1, r4, #0
10001f12:	4a75      	ldr	r2, [pc, #468]	; (100020e8 <IRQ7_Handler+0x698>)
10001f14:	4b75      	ldr	r3, [pc, #468]	; (100020ec <IRQ7_Handler+0x69c>)
10001f16:	f005 fe8b 	bl	10007c30 <__aeabi_dmul>
10001f1a:	1c03      	adds	r3, r0, #0
10001f1c:	1c0c      	adds	r4, r1, #0
10001f1e:	1c18      	adds	r0, r3, #0
10001f20:	1c21      	adds	r1, r4, #0
10001f22:	f006 fd5b 	bl	100089dc <__aeabi_d2f>
10001f26:	1c02      	adds	r2, r0, #0
10001f28:	4b6b      	ldr	r3, [pc, #428]	; (100020d8 <IRQ7_Handler+0x688>)
10001f2a:	611a      	str	r2, [r3, #16]
			data_group.vDC_grid 	= pcsVoltages.vdcGrid*0.1;
10001f2c:	4b6d      	ldr	r3, [pc, #436]	; (100020e4 <IRQ7_Handler+0x694>)
10001f2e:	881b      	ldrh	r3, [r3, #0]
10001f30:	1c18      	adds	r0, r3, #0
10001f32:	f006 fc91 	bl	10008858 <__aeabi_i2d>
10001f36:	1c03      	adds	r3, r0, #0
10001f38:	1c0c      	adds	r4, r1, #0
10001f3a:	1c18      	adds	r0, r3, #0
10001f3c:	1c21      	adds	r1, r4, #0
10001f3e:	4a6a      	ldr	r2, [pc, #424]	; (100020e8 <IRQ7_Handler+0x698>)
10001f40:	4b6a      	ldr	r3, [pc, #424]	; (100020ec <IRQ7_Handler+0x69c>)
10001f42:	f005 fe75 	bl	10007c30 <__aeabi_dmul>
10001f46:	1c03      	adds	r3, r0, #0
10001f48:	1c0c      	adds	r4, r1, #0
10001f4a:	1c18      	adds	r0, r3, #0
10001f4c:	1c21      	adds	r1, r4, #0
10001f4e:	f006 fd45 	bl	100089dc <__aeabi_d2f>
10001f52:	1c02      	adds	r2, r0, #0
10001f54:	4b60      	ldr	r3, [pc, #384]	; (100020d8 <IRQ7_Handler+0x688>)
10001f56:	609a      	str	r2, [r3, #8]
			data_group.vBat_conv 	= pcsVoltages.vbat*0.1;
10001f58:	4b62      	ldr	r3, [pc, #392]	; (100020e4 <IRQ7_Handler+0x694>)
10001f5a:	88db      	ldrh	r3, [r3, #6]
10001f5c:	1c18      	adds	r0, r3, #0
10001f5e:	f006 fc7b 	bl	10008858 <__aeabi_i2d>
10001f62:	1c03      	adds	r3, r0, #0
10001f64:	1c0c      	adds	r4, r1, #0
10001f66:	1c18      	adds	r0, r3, #0
10001f68:	1c21      	adds	r1, r4, #0
10001f6a:	4a5f      	ldr	r2, [pc, #380]	; (100020e8 <IRQ7_Handler+0x698>)
10001f6c:	4b5f      	ldr	r3, [pc, #380]	; (100020ec <IRQ7_Handler+0x69c>)
10001f6e:	f005 fe5f 	bl	10007c30 <__aeabi_dmul>
10001f72:	1c03      	adds	r3, r0, #0
10001f74:	1c0c      	adds	r4, r1, #0
10001f76:	1c18      	adds	r0, r3, #0
10001f78:	1c21      	adds	r1, r4, #0
10001f7a:	f006 fd2f 	bl	100089dc <__aeabi_d2f>
10001f7e:	1c02      	adds	r2, r0, #0
10001f80:	4b55      	ldr	r3, [pc, #340]	; (100020d8 <IRQ7_Handler+0x688>)
10001f82:	615a      	str	r2, [r3, #20]
			data_group.vAC_inv 		= pcsVoltages.vacOut*0.1;
10001f84:	4b57      	ldr	r3, [pc, #348]	; (100020e4 <IRQ7_Handler+0x694>)
10001f86:	885b      	ldrh	r3, [r3, #2]
10001f88:	1c18      	adds	r0, r3, #0
10001f8a:	f006 fc65 	bl	10008858 <__aeabi_i2d>
10001f8e:	1c03      	adds	r3, r0, #0
10001f90:	1c0c      	adds	r4, r1, #0
10001f92:	1c18      	adds	r0, r3, #0
10001f94:	1c21      	adds	r1, r4, #0
10001f96:	4a54      	ldr	r2, [pc, #336]	; (100020e8 <IRQ7_Handler+0x698>)
10001f98:	4b54      	ldr	r3, [pc, #336]	; (100020ec <IRQ7_Handler+0x69c>)
10001f9a:	f005 fe49 	bl	10007c30 <__aeabi_dmul>
10001f9e:	1c03      	adds	r3, r0, #0
10001fa0:	1c0c      	adds	r4, r1, #0
10001fa2:	1c18      	adds	r0, r3, #0
10001fa4:	1c21      	adds	r1, r4, #0
10001fa6:	f006 fd19 	bl	100089dc <__aeabi_d2f>
10001faa:	1c02      	adds	r2, r0, #0
10001fac:	4b4a      	ldr	r3, [pc, #296]	; (100020d8 <IRQ7_Handler+0x688>)
10001fae:	60da      	str	r2, [r3, #12]
			break;
10001fb0:	e0db      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x206 : // Current Properties
			pcsCurrents = PCS_GetAmpParam(&msgObjFromPCS);
10001fb2:	4c4f      	ldr	r4, [pc, #316]	; (100020f0 <IRQ7_Handler+0x6a0>)
10001fb4:	1c3a      	adds	r2, r7, #0
10001fb6:	4b49      	ldr	r3, [pc, #292]	; (100020dc <IRQ7_Handler+0x68c>)
10001fb8:	1c10      	adds	r0, r2, #0
10001fba:	1c19      	adds	r1, r3, #0
10001fbc:	f001 fcfe 	bl	100039bc <PCS_GetAmpParam>
10001fc0:	1c3b      	adds	r3, r7, #0
10001fc2:	1c21      	adds	r1, r4, #0
10001fc4:	1c1a      	adds	r2, r3, #0
10001fc6:	2308      	movs	r3, #8
10001fc8:	1c08      	adds	r0, r1, #0
10001fca:	1c11      	adds	r1, r2, #0
10001fcc:	1c1a      	adds	r2, r3, #0
10001fce:	f006 fddf 	bl	10008b90 <memcpy>
			data_group.iPv_conv		= pcsCurrents.iPV*0.1;
10001fd2:	4b47      	ldr	r3, [pc, #284]	; (100020f0 <IRQ7_Handler+0x6a0>)
10001fd4:	889b      	ldrh	r3, [r3, #4]
10001fd6:	b21b      	sxth	r3, r3
10001fd8:	1c18      	adds	r0, r3, #0
10001fda:	f006 fc3d 	bl	10008858 <__aeabi_i2d>
10001fde:	1c03      	adds	r3, r0, #0
10001fe0:	1c0c      	adds	r4, r1, #0
10001fe2:	1c18      	adds	r0, r3, #0
10001fe4:	1c21      	adds	r1, r4, #0
10001fe6:	4a40      	ldr	r2, [pc, #256]	; (100020e8 <IRQ7_Handler+0x698>)
10001fe8:	4b40      	ldr	r3, [pc, #256]	; (100020ec <IRQ7_Handler+0x69c>)
10001fea:	f005 fe21 	bl	10007c30 <__aeabi_dmul>
10001fee:	1c03      	adds	r3, r0, #0
10001ff0:	1c0c      	adds	r4, r1, #0
10001ff2:	1c18      	adds	r0, r3, #0
10001ff4:	1c21      	adds	r1, r4, #0
10001ff6:	f006 fcf1 	bl	100089dc <__aeabi_d2f>
10001ffa:	1c02      	adds	r2, r0, #0
10001ffc:	4b36      	ldr	r3, [pc, #216]	; (100020d8 <IRQ7_Handler+0x688>)
10001ffe:	621a      	str	r2, [r3, #32]
			data_group.iDC_grid		= pcsCurrents.idcGrid*0.1;
10002000:	4b3b      	ldr	r3, [pc, #236]	; (100020f0 <IRQ7_Handler+0x6a0>)
10002002:	881b      	ldrh	r3, [r3, #0]
10002004:	b21b      	sxth	r3, r3
10002006:	1c18      	adds	r0, r3, #0
10002008:	f006 fc26 	bl	10008858 <__aeabi_i2d>
1000200c:	1c03      	adds	r3, r0, #0
1000200e:	1c0c      	adds	r4, r1, #0
10002010:	1c18      	adds	r0, r3, #0
10002012:	1c21      	adds	r1, r4, #0
10002014:	4a34      	ldr	r2, [pc, #208]	; (100020e8 <IRQ7_Handler+0x698>)
10002016:	4b35      	ldr	r3, [pc, #212]	; (100020ec <IRQ7_Handler+0x69c>)
10002018:	f005 fe0a 	bl	10007c30 <__aeabi_dmul>
1000201c:	1c03      	adds	r3, r0, #0
1000201e:	1c0c      	adds	r4, r1, #0
10002020:	1c18      	adds	r0, r3, #0
10002022:	1c21      	adds	r1, r4, #0
10002024:	f006 fcda 	bl	100089dc <__aeabi_d2f>
10002028:	1c02      	adds	r2, r0, #0
1000202a:	4b2b      	ldr	r3, [pc, #172]	; (100020d8 <IRQ7_Handler+0x688>)
1000202c:	619a      	str	r2, [r3, #24]
			data_group.iBat_conv	= pcsCurrents.ibat*0.1;
1000202e:	4b30      	ldr	r3, [pc, #192]	; (100020f0 <IRQ7_Handler+0x6a0>)
10002030:	88db      	ldrh	r3, [r3, #6]
10002032:	b21b      	sxth	r3, r3
10002034:	1c18      	adds	r0, r3, #0
10002036:	f006 fc0f 	bl	10008858 <__aeabi_i2d>
1000203a:	1c03      	adds	r3, r0, #0
1000203c:	1c0c      	adds	r4, r1, #0
1000203e:	1c18      	adds	r0, r3, #0
10002040:	1c21      	adds	r1, r4, #0
10002042:	4a29      	ldr	r2, [pc, #164]	; (100020e8 <IRQ7_Handler+0x698>)
10002044:	4b29      	ldr	r3, [pc, #164]	; (100020ec <IRQ7_Handler+0x69c>)
10002046:	f005 fdf3 	bl	10007c30 <__aeabi_dmul>
1000204a:	1c03      	adds	r3, r0, #0
1000204c:	1c0c      	adds	r4, r1, #0
1000204e:	1c18      	adds	r0, r3, #0
10002050:	1c21      	adds	r1, r4, #0
10002052:	f006 fcc3 	bl	100089dc <__aeabi_d2f>
10002056:	1c02      	adds	r2, r0, #0
10002058:	4b1f      	ldr	r3, [pc, #124]	; (100020d8 <IRQ7_Handler+0x688>)
1000205a:	625a      	str	r2, [r3, #36]	; 0x24
			data_group.iAC_inv		= pcsCurrents.iacOut*0.1;
1000205c:	4b24      	ldr	r3, [pc, #144]	; (100020f0 <IRQ7_Handler+0x6a0>)
1000205e:	885b      	ldrh	r3, [r3, #2]
10002060:	b21b      	sxth	r3, r3
10002062:	1c18      	adds	r0, r3, #0
10002064:	f006 fbf8 	bl	10008858 <__aeabi_i2d>
10002068:	1c03      	adds	r3, r0, #0
1000206a:	1c0c      	adds	r4, r1, #0
1000206c:	1c18      	adds	r0, r3, #0
1000206e:	1c21      	adds	r1, r4, #0
10002070:	4a1d      	ldr	r2, [pc, #116]	; (100020e8 <IRQ7_Handler+0x698>)
10002072:	4b1e      	ldr	r3, [pc, #120]	; (100020ec <IRQ7_Handler+0x69c>)
10002074:	f005 fddc 	bl	10007c30 <__aeabi_dmul>
10002078:	1c03      	adds	r3, r0, #0
1000207a:	1c0c      	adds	r4, r1, #0
1000207c:	1c18      	adds	r0, r3, #0
1000207e:	1c21      	adds	r1, r4, #0
10002080:	f006 fcac 	bl	100089dc <__aeabi_d2f>
10002084:	1c02      	adds	r2, r0, #0
10002086:	4b14      	ldr	r3, [pc, #80]	; (100020d8 <IRQ7_Handler+0x688>)
10002088:	61da      	str	r2, [r3, #28]
			break;
1000208a:	e06e      	b.n	1000216a <IRQ7_Handler+0x71a>

		case 0x207 : // Power Properties
			pcsPowers = PCS_GetPowerParam(&msgObjFromPCS);
1000208c:	4c19      	ldr	r4, [pc, #100]	; (100020f4 <IRQ7_Handler+0x6a4>)
1000208e:	1c3a      	adds	r2, r7, #0
10002090:	4b12      	ldr	r3, [pc, #72]	; (100020dc <IRQ7_Handler+0x68c>)
10002092:	1c10      	adds	r0, r2, #0
10002094:	1c19      	adds	r1, r3, #0
10002096:	f001 fcd5 	bl	10003a44 <PCS_GetPowerParam>
1000209a:	1c3b      	adds	r3, r7, #0
1000209c:	1c21      	adds	r1, r4, #0
1000209e:	1c1a      	adds	r2, r3, #0
100020a0:	2308      	movs	r3, #8
100020a2:	1c08      	adds	r0, r1, #0
100020a4:	1c11      	adds	r1, r2, #0
100020a6:	1c1a      	adds	r2, r3, #0
100020a8:	f006 fd72 	bl	10008b90 <memcpy>
			data_group.pPv_conv		= pcsPowers.pPV;
100020ac:	4b11      	ldr	r3, [pc, #68]	; (100020f4 <IRQ7_Handler+0x6a4>)
100020ae:	889a      	ldrh	r2, [r3, #4]
100020b0:	4b09      	ldr	r3, [pc, #36]	; (100020d8 <IRQ7_Handler+0x688>)
100020b2:	859a      	strh	r2, [r3, #44]	; 0x2c
			data_group.pDC_grid		= pcsPowers.pdcGrid;
100020b4:	4b0f      	ldr	r3, [pc, #60]	; (100020f4 <IRQ7_Handler+0x6a4>)
100020b6:	881b      	ldrh	r3, [r3, #0]
100020b8:	b29a      	uxth	r2, r3
100020ba:	4b07      	ldr	r3, [pc, #28]	; (100020d8 <IRQ7_Handler+0x688>)
100020bc:	851a      	strh	r2, [r3, #40]	; 0x28
			data_group.pBat_conv	= pcsPowers.pbat;
100020be:	4b0d      	ldr	r3, [pc, #52]	; (100020f4 <IRQ7_Handler+0x6a4>)
100020c0:	88db      	ldrh	r3, [r3, #6]
100020c2:	b29a      	uxth	r2, r3
100020c4:	4b04      	ldr	r3, [pc, #16]	; (100020d8 <IRQ7_Handler+0x688>)
100020c6:	85da      	strh	r2, [r3, #46]	; 0x2e
			data_group.pAC_inv		= pcsPowers.pacOut;
100020c8:	4b0a      	ldr	r3, [pc, #40]	; (100020f4 <IRQ7_Handler+0x6a4>)
100020ca:	885a      	ldrh	r2, [r3, #2]
100020cc:	4b02      	ldr	r3, [pc, #8]	; (100020d8 <IRQ7_Handler+0x688>)
100020ce:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
100020d0:	e04b      	b.n	1000216a <IRQ7_Handler+0x71a>
100020d2:	46c0      	nop			; (mov r8, r8)
100020d4:	20000a44 	.word	0x20000a44
100020d8:	20000a48 	.word	0x20000a48
100020dc:	20000658 	.word	0x20000658
100020e0:	20000ab4 	.word	0x20000ab4
100020e4:	20000a34 	.word	0x20000a34
100020e8:	9999999a 	.word	0x9999999a
100020ec:	3fb99999 	.word	0x3fb99999
100020f0:	20000aa0 	.word	0x20000aa0
100020f4:	20000b2c 	.word	0x20000b2c

		case 0x208 : // Frequency and Temperature Properties
			pcsMiscs = PCS_GetMiscParam(&msgObjFromPCS);
100020f8:	4b1f      	ldr	r3, [pc, #124]	; (10002178 <IRQ7_Handler+0x728>)
100020fa:	1c18      	adds	r0, r3, #0
100020fc:	f001 fcea 	bl	10003ad4 <PCS_GetMiscParam>
10002100:	1c03      	adds	r3, r0, #0
10002102:	1c1a      	adds	r2, r3, #0
10002104:	4b1d      	ldr	r3, [pc, #116]	; (1000217c <IRQ7_Handler+0x72c>)
10002106:	1c11      	adds	r1, r2, #0
10002108:	8019      	strh	r1, [r3, #0]
1000210a:	0c12      	lsrs	r2, r2, #16
1000210c:	805a      	strh	r2, [r3, #2]
			data_group.temp_sensor	= pcsMiscs.tempPCS*0.1;
1000210e:	4b1b      	ldr	r3, [pc, #108]	; (1000217c <IRQ7_Handler+0x72c>)
10002110:	881b      	ldrh	r3, [r3, #0]
10002112:	1c18      	adds	r0, r3, #0
10002114:	f006 fba0 	bl	10008858 <__aeabi_i2d>
10002118:	1c03      	adds	r3, r0, #0
1000211a:	1c0c      	adds	r4, r1, #0
1000211c:	1c18      	adds	r0, r3, #0
1000211e:	1c21      	adds	r1, r4, #0
10002120:	4a17      	ldr	r2, [pc, #92]	; (10002180 <IRQ7_Handler+0x730>)
10002122:	4b18      	ldr	r3, [pc, #96]	; (10002184 <IRQ7_Handler+0x734>)
10002124:	f005 fd84 	bl	10007c30 <__aeabi_dmul>
10002128:	1c03      	adds	r3, r0, #0
1000212a:	1c0c      	adds	r4, r1, #0
1000212c:	1c18      	adds	r0, r3, #0
1000212e:	1c21      	adds	r1, r4, #0
10002130:	f006 fc54 	bl	100089dc <__aeabi_d2f>
10002134:	1c02      	adds	r2, r0, #0
10002136:	4b14      	ldr	r3, [pc, #80]	; (10002188 <IRQ7_Handler+0x738>)
10002138:	631a      	str	r2, [r3, #48]	; 0x30
			data_group.frequency	= pcsMiscs.frequency*0.1;
1000213a:	4b10      	ldr	r3, [pc, #64]	; (1000217c <IRQ7_Handler+0x72c>)
1000213c:	885b      	ldrh	r3, [r3, #2]
1000213e:	1c18      	adds	r0, r3, #0
10002140:	f006 fb8a 	bl	10008858 <__aeabi_i2d>
10002144:	1c03      	adds	r3, r0, #0
10002146:	1c0c      	adds	r4, r1, #0
10002148:	1c18      	adds	r0, r3, #0
1000214a:	1c21      	adds	r1, r4, #0
1000214c:	4a0c      	ldr	r2, [pc, #48]	; (10002180 <IRQ7_Handler+0x730>)
1000214e:	4b0d      	ldr	r3, [pc, #52]	; (10002184 <IRQ7_Handler+0x734>)
10002150:	f005 fd6e 	bl	10007c30 <__aeabi_dmul>
10002154:	1c03      	adds	r3, r0, #0
10002156:	1c0c      	adds	r4, r1, #0
10002158:	1c18      	adds	r0, r3, #0
1000215a:	1c21      	adds	r1, r4, #0
1000215c:	f006 fc3e 	bl	100089dc <__aeabi_d2f>
10002160:	1c02      	adds	r2, r0, #0
10002162:	4b09      	ldr	r3, [pc, #36]	; (10002188 <IRQ7_Handler+0x738>)
10002164:	635a      	str	r2, [r3, #52]	; 0x34
			break;
10002166:	e000      	b.n	1000216a <IRQ7_Handler+0x71a>

		default    : // others
			break;
10002168:	46c0      	nop			; (mov r8, r8)
	}

	NVIC_ClearPendingIRQ(IRQ7_IRQn);
1000216a:	2007      	movs	r0, #7
1000216c:	f7ff fa2e 	bl	100015cc <__NVIC_ClearPendingIRQ>
}
10002170:	46bd      	mov	sp, r7
10002172:	b003      	add	sp, #12
10002174:	bd90      	pop	{r4, r7, pc}
10002176:	46c0      	nop			; (mov r8, r8)
10002178:	20000658 	.word	0x20000658
1000217c:	20000acc 	.word	0x20000acc
10002180:	9999999a 	.word	0x9999999a
10002184:	3fb99999 	.word	0x3fb99999
10002188:	20000a48 	.word	0x20000a48

1000218c <IRQ19_Handler>:

void adc_intrpt_handler(void)
{
1000218c:	b598      	push	{r3, r4, r7, lr}
1000218e:	af00      	add	r7, sp, #0
	static PDU_SENSOR_AVG_t sensorAvgBuff;

	XMC_VADC_GROUP_ClearResultEvent(VADC_G1,2); // Clear Result 2 event flag
10002190:	4b76      	ldr	r3, [pc, #472]	; (1000236c <IRQ19_Handler+0x1e0>)
10002192:	1c18      	adds	r0, r3, #0
10002194:	2102      	movs	r1, #2
10002196:	f7ff fa85 	bl	100016a4 <XMC_VADC_GROUP_ClearResultEvent>
	pduSensorRaw.rawPVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,0));
1000219a:	4b74      	ldr	r3, [pc, #464]	; (1000236c <IRQ19_Handler+0x1e0>)
1000219c:	1c18      	adds	r0, r3, #0
1000219e:	2100      	movs	r1, #0
100021a0:	f7ff fa70 	bl	10001684 <XMC_VADC_GROUP_GetResult>
100021a4:	1c03      	adds	r3, r0, #0
100021a6:	1c1a      	adds	r2, r3, #0
100021a8:	4b71      	ldr	r3, [pc, #452]	; (10002370 <IRQ19_Handler+0x1e4>)
100021aa:	801a      	strh	r2, [r3, #0]
	pduSensorRaw.rawBTPT = (XMC_VADC_GROUP_GetResult(VADC_G1,1));
100021ac:	4b6f      	ldr	r3, [pc, #444]	; (1000236c <IRQ19_Handler+0x1e0>)
100021ae:	1c18      	adds	r0, r3, #0
100021b0:	2101      	movs	r1, #1
100021b2:	f7ff fa67 	bl	10001684 <XMC_VADC_GROUP_GetResult>
100021b6:	1c03      	adds	r3, r0, #0
100021b8:	1c1a      	adds	r2, r3, #0
100021ba:	4b6d      	ldr	r3, [pc, #436]	; (10002370 <IRQ19_Handler+0x1e4>)
100021bc:	805a      	strh	r2, [r3, #2]
	pduSensorRaw.rawDCCT = (XMC_VADC_GROUP_GetResult(VADC_G1,2));
100021be:	4b6b      	ldr	r3, [pc, #428]	; (1000236c <IRQ19_Handler+0x1e0>)
100021c0:	1c18      	adds	r0, r3, #0
100021c2:	2102      	movs	r1, #2
100021c4:	f7ff fa5e 	bl	10001684 <XMC_VADC_GROUP_GetResult>
100021c8:	1c03      	adds	r3, r0, #0
100021ca:	1c1a      	adds	r2, r3, #0
100021cc:	4b68      	ldr	r3, [pc, #416]	; (10002370 <IRQ19_Handler+0x1e4>)
100021ce:	80da      	strh	r2, [r3, #6]
	pduSensorRaw.rawPVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,3));
100021d0:	4b66      	ldr	r3, [pc, #408]	; (1000236c <IRQ19_Handler+0x1e0>)
100021d2:	1c18      	adds	r0, r3, #0
100021d4:	2103      	movs	r1, #3
100021d6:	f7ff fa55 	bl	10001684 <XMC_VADC_GROUP_GetResult>
100021da:	1c03      	adds	r3, r0, #0
100021dc:	1c1a      	adds	r2, r3, #0
100021de:	4b64      	ldr	r3, [pc, #400]	; (10002370 <IRQ19_Handler+0x1e4>)
100021e0:	801a      	strh	r2, [r3, #0]



	sensorAvgBuff.sumAvgBTPT = sensorAvgBuff.sumAvgBTPT + pduSensorRaw.rawBTPT;
100021e2:	4b64      	ldr	r3, [pc, #400]	; (10002374 <IRQ19_Handler+0x1e8>)
100021e4:	689b      	ldr	r3, [r3, #8]
100021e6:	4a62      	ldr	r2, [pc, #392]	; (10002370 <IRQ19_Handler+0x1e4>)
100021e8:	8852      	ldrh	r2, [r2, #2]
100021ea:	189a      	adds	r2, r3, r2
100021ec:	4b61      	ldr	r3, [pc, #388]	; (10002374 <IRQ19_Handler+0x1e8>)
100021ee:	609a      	str	r2, [r3, #8]
	sensorAvgBuff.sumAvgPVPT = sensorAvgBuff.sumAvgPVPT + pduSensorRaw.rawPVPT;
100021f0:	4b60      	ldr	r3, [pc, #384]	; (10002374 <IRQ19_Handler+0x1e8>)
100021f2:	685b      	ldr	r3, [r3, #4]
100021f4:	4a5e      	ldr	r2, [pc, #376]	; (10002370 <IRQ19_Handler+0x1e4>)
100021f6:	8812      	ldrh	r2, [r2, #0]
100021f8:	189a      	adds	r2, r3, r2
100021fa:	4b5e      	ldr	r3, [pc, #376]	; (10002374 <IRQ19_Handler+0x1e8>)
100021fc:	605a      	str	r2, [r3, #4]
	sensorAvgBuff.sumAvgHVPT = sensorAvgBuff.sumAvgHVPT + pduSensorRaw.rawHVPT;
100021fe:	4b5d      	ldr	r3, [pc, #372]	; (10002374 <IRQ19_Handler+0x1e8>)
10002200:	68db      	ldr	r3, [r3, #12]
10002202:	4a5b      	ldr	r2, [pc, #364]	; (10002370 <IRQ19_Handler+0x1e4>)
10002204:	8892      	ldrh	r2, [r2, #4]
10002206:	189a      	adds	r2, r3, r2
10002208:	4b5a      	ldr	r3, [pc, #360]	; (10002374 <IRQ19_Handler+0x1e8>)
1000220a:	60da      	str	r2, [r3, #12]
	sensorAvgBuff.sumAvgDCCT = sensorAvgBuff.sumAvgDCCT + pduSensorRaw.rawDCCT;
1000220c:	4b59      	ldr	r3, [pc, #356]	; (10002374 <IRQ19_Handler+0x1e8>)
1000220e:	691b      	ldr	r3, [r3, #16]
10002210:	4a57      	ldr	r2, [pc, #348]	; (10002370 <IRQ19_Handler+0x1e4>)
10002212:	88d2      	ldrh	r2, [r2, #6]
10002214:	189a      	adds	r2, r3, r2
10002216:	4b57      	ldr	r3, [pc, #348]	; (10002374 <IRQ19_Handler+0x1e8>)
10002218:	611a      	str	r2, [r3, #16]

	if(pduSensorAvg.count == 31)
1000221a:	4b57      	ldr	r3, [pc, #348]	; (10002378 <IRQ19_Handler+0x1ec>)
1000221c:	789b      	ldrb	r3, [r3, #2]
1000221e:	2b1f      	cmp	r3, #31
10002220:	d000      	beq.n	10002224 <IRQ19_Handler+0x98>
10002222:	e09b      	b.n	1000235c <IRQ19_Handler+0x1d0>
	{
		pduSensorAvg.sumAvgPVPT = sensorAvgBuff.sumAvgPVPT >> 5;
10002224:	4b53      	ldr	r3, [pc, #332]	; (10002374 <IRQ19_Handler+0x1e8>)
10002226:	685b      	ldr	r3, [r3, #4]
10002228:	095a      	lsrs	r2, r3, #5
1000222a:	4b53      	ldr	r3, [pc, #332]	; (10002378 <IRQ19_Handler+0x1ec>)
1000222c:	605a      	str	r2, [r3, #4]
		pduSensorAvg.sumAvgHVPT = sensorAvgBuff.sumAvgHVPT >> 5;
1000222e:	4b51      	ldr	r3, [pc, #324]	; (10002374 <IRQ19_Handler+0x1e8>)
10002230:	68db      	ldr	r3, [r3, #12]
10002232:	095a      	lsrs	r2, r3, #5
10002234:	4b50      	ldr	r3, [pc, #320]	; (10002378 <IRQ19_Handler+0x1ec>)
10002236:	60da      	str	r2, [r3, #12]
		pduSensorAvg.sumAvgBTPT = sensorAvgBuff.sumAvgBTPT >> 5;
10002238:	4b4e      	ldr	r3, [pc, #312]	; (10002374 <IRQ19_Handler+0x1e8>)
1000223a:	689b      	ldr	r3, [r3, #8]
1000223c:	095a      	lsrs	r2, r3, #5
1000223e:	4b4e      	ldr	r3, [pc, #312]	; (10002378 <IRQ19_Handler+0x1ec>)
10002240:	609a      	str	r2, [r3, #8]
		pduSensorAvg.sumAvgDCCT = sensorAvgBuff.sumAvgDCCT >> 5;
10002242:	4b4c      	ldr	r3, [pc, #304]	; (10002374 <IRQ19_Handler+0x1e8>)
10002244:	691b      	ldr	r3, [r3, #16]
10002246:	095a      	lsrs	r2, r3, #5
10002248:	4b4b      	ldr	r3, [pc, #300]	; (10002378 <IRQ19_Handler+0x1ec>)
1000224a:	611a      	str	r2, [r3, #16]
		sensorAvgBuff.sumAvgBTPT = 0;
1000224c:	4b49      	ldr	r3, [pc, #292]	; (10002374 <IRQ19_Handler+0x1e8>)
1000224e:	2200      	movs	r2, #0
10002250:	609a      	str	r2, [r3, #8]
		sensorAvgBuff.sumAvgPVPT = 0;
10002252:	4b48      	ldr	r3, [pc, #288]	; (10002374 <IRQ19_Handler+0x1e8>)
10002254:	2200      	movs	r2, #0
10002256:	605a      	str	r2, [r3, #4]
		sensorAvgBuff.sumAvgHVPT = 0;
10002258:	4b46      	ldr	r3, [pc, #280]	; (10002374 <IRQ19_Handler+0x1e8>)
1000225a:	2200      	movs	r2, #0
1000225c:	60da      	str	r2, [r3, #12]
		sensorAvgBuff.sumAvgDCCT = 0;
1000225e:	4b45      	ldr	r3, [pc, #276]	; (10002374 <IRQ19_Handler+0x1e8>)
10002260:	2200      	movs	r2, #0
10002262:	611a      	str	r2, [r3, #16]

		pduSensor.mDCCT = 0.0296*pduSensorAvg.sumAvgDCCT - 60.441;
10002264:	4b44      	ldr	r3, [pc, #272]	; (10002378 <IRQ19_Handler+0x1ec>)
10002266:	691b      	ldr	r3, [r3, #16]
10002268:	1c18      	adds	r0, r3, #0
1000226a:	f006 fb31 	bl	100088d0 <__aeabi_ui2d>
1000226e:	1c03      	adds	r3, r0, #0
10002270:	1c0c      	adds	r4, r1, #0
10002272:	1c18      	adds	r0, r3, #0
10002274:	1c21      	adds	r1, r4, #0
10002276:	4a41      	ldr	r2, [pc, #260]	; (1000237c <IRQ19_Handler+0x1f0>)
10002278:	4b41      	ldr	r3, [pc, #260]	; (10002380 <IRQ19_Handler+0x1f4>)
1000227a:	f005 fcd9 	bl	10007c30 <__aeabi_dmul>
1000227e:	1c03      	adds	r3, r0, #0
10002280:	1c0c      	adds	r4, r1, #0
10002282:	1c18      	adds	r0, r3, #0
10002284:	1c21      	adds	r1, r4, #0
10002286:	4a3f      	ldr	r2, [pc, #252]	; (10002384 <IRQ19_Handler+0x1f8>)
10002288:	4b3f      	ldr	r3, [pc, #252]	; (10002388 <IRQ19_Handler+0x1fc>)
1000228a:	f005 ff6b 	bl	10008164 <__aeabi_dsub>
1000228e:	1c03      	adds	r3, r0, #0
10002290:	1c0c      	adds	r4, r1, #0
10002292:	1c18      	adds	r0, r3, #0
10002294:	1c21      	adds	r1, r4, #0
10002296:	f006 fba1 	bl	100089dc <__aeabi_d2f>
1000229a:	1c02      	adds	r2, r0, #0
1000229c:	4b3b      	ldr	r3, [pc, #236]	; (1000238c <IRQ19_Handler+0x200>)
1000229e:	60da      	str	r2, [r3, #12]
		pduSensor.mBTPT = 0.0986*pduSensorAvg.sumAvgBTPT - 2.4981;
100022a0:	4b35      	ldr	r3, [pc, #212]	; (10002378 <IRQ19_Handler+0x1ec>)
100022a2:	689b      	ldr	r3, [r3, #8]
100022a4:	1c18      	adds	r0, r3, #0
100022a6:	f006 fb13 	bl	100088d0 <__aeabi_ui2d>
100022aa:	1c03      	adds	r3, r0, #0
100022ac:	1c0c      	adds	r4, r1, #0
100022ae:	1c18      	adds	r0, r3, #0
100022b0:	1c21      	adds	r1, r4, #0
100022b2:	4a37      	ldr	r2, [pc, #220]	; (10002390 <IRQ19_Handler+0x204>)
100022b4:	4b37      	ldr	r3, [pc, #220]	; (10002394 <IRQ19_Handler+0x208>)
100022b6:	f005 fcbb 	bl	10007c30 <__aeabi_dmul>
100022ba:	1c03      	adds	r3, r0, #0
100022bc:	1c0c      	adds	r4, r1, #0
100022be:	1c18      	adds	r0, r3, #0
100022c0:	1c21      	adds	r1, r4, #0
100022c2:	4a35      	ldr	r2, [pc, #212]	; (10002398 <IRQ19_Handler+0x20c>)
100022c4:	4b35      	ldr	r3, [pc, #212]	; (1000239c <IRQ19_Handler+0x210>)
100022c6:	f005 ff4d 	bl	10008164 <__aeabi_dsub>
100022ca:	1c03      	adds	r3, r0, #0
100022cc:	1c0c      	adds	r4, r1, #0
100022ce:	1c18      	adds	r0, r3, #0
100022d0:	1c21      	adds	r1, r4, #0
100022d2:	f006 fb83 	bl	100089dc <__aeabi_d2f>
100022d6:	1c02      	adds	r2, r0, #0
100022d8:	4b2c      	ldr	r3, [pc, #176]	; (1000238c <IRQ19_Handler+0x200>)
100022da:	605a      	str	r2, [r3, #4]
		pduSensor.mHVPT = 0.0977*pduSensorAvg.sumAvgHVPT + 0.413;
100022dc:	4b26      	ldr	r3, [pc, #152]	; (10002378 <IRQ19_Handler+0x1ec>)
100022de:	68db      	ldr	r3, [r3, #12]
100022e0:	1c18      	adds	r0, r3, #0
100022e2:	f006 faf5 	bl	100088d0 <__aeabi_ui2d>
100022e6:	1c03      	adds	r3, r0, #0
100022e8:	1c0c      	adds	r4, r1, #0
100022ea:	1c18      	adds	r0, r3, #0
100022ec:	1c21      	adds	r1, r4, #0
100022ee:	4a2c      	ldr	r2, [pc, #176]	; (100023a0 <IRQ19_Handler+0x214>)
100022f0:	4b2c      	ldr	r3, [pc, #176]	; (100023a4 <IRQ19_Handler+0x218>)
100022f2:	f005 fc9d 	bl	10007c30 <__aeabi_dmul>
100022f6:	1c03      	adds	r3, r0, #0
100022f8:	1c0c      	adds	r4, r1, #0
100022fa:	1c18      	adds	r0, r3, #0
100022fc:	1c21      	adds	r1, r4, #0
100022fe:	4a2a      	ldr	r2, [pc, #168]	; (100023a8 <IRQ19_Handler+0x21c>)
10002300:	4b2a      	ldr	r3, [pc, #168]	; (100023ac <IRQ19_Handler+0x220>)
10002302:	f005 f853 	bl	100073ac <__aeabi_dadd>
10002306:	1c03      	adds	r3, r0, #0
10002308:	1c0c      	adds	r4, r1, #0
1000230a:	1c18      	adds	r0, r3, #0
1000230c:	1c21      	adds	r1, r4, #0
1000230e:	f006 fb65 	bl	100089dc <__aeabi_d2f>
10002312:	1c02      	adds	r2, r0, #0
10002314:	4b1d      	ldr	r3, [pc, #116]	; (1000238c <IRQ19_Handler+0x200>)
10002316:	609a      	str	r2, [r3, #8]
		pduSensor.mPVPT = 0.0977*pduSensorAvg.sumAvgPVPT + 0.4414;
10002318:	4b17      	ldr	r3, [pc, #92]	; (10002378 <IRQ19_Handler+0x1ec>)
1000231a:	685b      	ldr	r3, [r3, #4]
1000231c:	1c18      	adds	r0, r3, #0
1000231e:	f006 fad7 	bl	100088d0 <__aeabi_ui2d>
10002322:	1c03      	adds	r3, r0, #0
10002324:	1c0c      	adds	r4, r1, #0
10002326:	1c18      	adds	r0, r3, #0
10002328:	1c21      	adds	r1, r4, #0
1000232a:	4a1d      	ldr	r2, [pc, #116]	; (100023a0 <IRQ19_Handler+0x214>)
1000232c:	4b1d      	ldr	r3, [pc, #116]	; (100023a4 <IRQ19_Handler+0x218>)
1000232e:	f005 fc7f 	bl	10007c30 <__aeabi_dmul>
10002332:	1c03      	adds	r3, r0, #0
10002334:	1c0c      	adds	r4, r1, #0
10002336:	1c18      	adds	r0, r3, #0
10002338:	1c21      	adds	r1, r4, #0
1000233a:	4a1d      	ldr	r2, [pc, #116]	; (100023b0 <IRQ19_Handler+0x224>)
1000233c:	4b1d      	ldr	r3, [pc, #116]	; (100023b4 <IRQ19_Handler+0x228>)
1000233e:	f005 f835 	bl	100073ac <__aeabi_dadd>
10002342:	1c03      	adds	r3, r0, #0
10002344:	1c0c      	adds	r4, r1, #0
10002346:	1c18      	adds	r0, r3, #0
10002348:	1c21      	adds	r1, r4, #0
1000234a:	f006 fb47 	bl	100089dc <__aeabi_d2f>
1000234e:	1c02      	adds	r2, r0, #0
10002350:	4b0e      	ldr	r3, [pc, #56]	; (1000238c <IRQ19_Handler+0x200>)
10002352:	601a      	str	r2, [r3, #0]
		pduSensorAvg.count = 0;
10002354:	4b08      	ldr	r3, [pc, #32]	; (10002378 <IRQ19_Handler+0x1ec>)
10002356:	2200      	movs	r2, #0
10002358:	709a      	strb	r2, [r3, #2]
1000235a:	e005      	b.n	10002368 <IRQ19_Handler+0x1dc>
	}
	else {pduSensorAvg.count++;}
1000235c:	4b06      	ldr	r3, [pc, #24]	; (10002378 <IRQ19_Handler+0x1ec>)
1000235e:	789b      	ldrb	r3, [r3, #2]
10002360:	3301      	adds	r3, #1
10002362:	b2da      	uxtb	r2, r3
10002364:	4b04      	ldr	r3, [pc, #16]	; (10002378 <IRQ19_Handler+0x1ec>)
10002366:	709a      	strb	r2, [r3, #2]

	/* Do moving Average Filter */
//	MF_MovingAverage(&pduSensorAvg, &pduSensorRaw);
}
10002368:	46bd      	mov	sp, r7
1000236a:	bd98      	pop	{r3, r4, r7, pc}
1000236c:	48030800 	.word	0x48030800
10002370:	20000aac 	.word	0x20000aac
10002374:	2000078c 	.word	0x2000078c
10002378:	20000ab8 	.word	0x20000ab8
1000237c:	5fd8adac 	.word	0x5fd8adac
10002380:	3f9e4f76 	.word	0x3f9e4f76
10002384:	b020c49c 	.word	0xb020c49c
10002388:	404e3872 	.word	0x404e3872
1000238c:	20000b34 	.word	0x20000b34
10002390:	7f62b6ae 	.word	0x7f62b6ae
10002394:	3fb93dd9 	.word	0x3fb93dd9
10002398:	da5119ce 	.word	0xda5119ce
1000239c:	4003fc1b 	.word	0x4003fc1b
100023a0:	00d1b717 	.word	0x00d1b717
100023a4:	3fb902de 	.word	0x3fb902de
100023a8:	8d4fdf3b 	.word	0x8d4fdf3b
100023ac:	3fda6e97 	.word	0x3fda6e97
100023b0:	c91d14e4 	.word	0xc91d14e4
100023b4:	3fdc3fe5 	.word	0x3fdc3fe5

100023b8 <IRQ23_Handler>:

void one_msec_intrpt_handler(void)
{
100023b8:	b580      	push	{r7, lr}
100023ba:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_ClearEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100023bc:	4b04      	ldr	r3, [pc, #16]	; (100023d0 <IRQ23_Handler+0x18>)
100023be:	1c18      	adds	r0, r3, #0
100023c0:	2100      	movs	r1, #0
100023c2:	f7ff f94d 	bl	10001660 <XMC_CCU4_SLICE_ClearEvent>
	PDU_ADC_Start();
100023c6:	f000 fda9 	bl	10002f1c <PDU_ADC_Start>
}
100023ca:	46bd      	mov	sp, r7
100023cc:	bd80      	pop	{r7, pc}
100023ce:	46c0      	nop			; (mov r8, r8)
100023d0:	48040100 	.word	0x48040100

100023d4 <IRQ24_Handler>:

void hundred_msec_intrpt_handler(void)
{
100023d4:	b590      	push	{r4, r7, lr}
100023d6:	b083      	sub	sp, #12
100023d8:	af00      	add	r7, sp, #0
	float soc_f;
	float ocv;

	ocv = genix_data.pack_voltage*0.1;
100023da:	4ba3      	ldr	r3, [pc, #652]	; (10002668 <IRQ24_Handler+0x294>)
100023dc:	885b      	ldrh	r3, [r3, #2]
100023de:	1c18      	adds	r0, r3, #0
100023e0:	f006 fa3a 	bl	10008858 <__aeabi_i2d>
100023e4:	1c03      	adds	r3, r0, #0
100023e6:	1c0c      	adds	r4, r1, #0
100023e8:	1c18      	adds	r0, r3, #0
100023ea:	1c21      	adds	r1, r4, #0
100023ec:	4a9f      	ldr	r2, [pc, #636]	; (1000266c <IRQ24_Handler+0x298>)
100023ee:	4ba0      	ldr	r3, [pc, #640]	; (10002670 <IRQ24_Handler+0x29c>)
100023f0:	f005 fc1e 	bl	10007c30 <__aeabi_dmul>
100023f4:	1c03      	adds	r3, r0, #0
100023f6:	1c0c      	adds	r4, r1, #0
100023f8:	1c18      	adds	r0, r3, #0
100023fa:	1c21      	adds	r1, r4, #0
100023fc:	f006 faee 	bl	100089dc <__aeabi_d2f>
10002400:	1c03      	adds	r3, r0, #0
10002402:	603b      	str	r3, [r7, #0]

	/* piece-wise OCV-SoC transformation */
	if 		((ocv > 182.25)  && (ocv <= 201.75)) {soc_f = 0.1425*ocv - 25.962;}
10002404:	6838      	ldr	r0, [r7, #0]
10002406:	499b      	ldr	r1, [pc, #620]	; (10002674 <IRQ24_Handler+0x2a0>)
10002408:	f004 fbd2 	bl	10006bb0 <__aeabi_fcmpgt>
1000240c:	1e03      	subs	r3, r0, #0
1000240e:	d021      	beq.n	10002454 <IRQ24_Handler+0x80>
10002410:	6838      	ldr	r0, [r7, #0]
10002412:	4999      	ldr	r1, [pc, #612]	; (10002678 <IRQ24_Handler+0x2a4>)
10002414:	f004 fbc2 	bl	10006b9c <__aeabi_fcmple>
10002418:	1e03      	subs	r3, r0, #0
1000241a:	d01b      	beq.n	10002454 <IRQ24_Handler+0x80>
1000241c:	6838      	ldr	r0, [r7, #0]
1000241e:	f006 fa89 	bl	10008934 <__aeabi_f2d>
10002422:	1c03      	adds	r3, r0, #0
10002424:	1c0c      	adds	r4, r1, #0
10002426:	1c18      	adds	r0, r3, #0
10002428:	1c21      	adds	r1, r4, #0
1000242a:	4a94      	ldr	r2, [pc, #592]	; (1000267c <IRQ24_Handler+0x2a8>)
1000242c:	4b94      	ldr	r3, [pc, #592]	; (10002680 <IRQ24_Handler+0x2ac>)
1000242e:	f005 fbff 	bl	10007c30 <__aeabi_dmul>
10002432:	1c03      	adds	r3, r0, #0
10002434:	1c0c      	adds	r4, r1, #0
10002436:	1c18      	adds	r0, r3, #0
10002438:	1c21      	adds	r1, r4, #0
1000243a:	4a92      	ldr	r2, [pc, #584]	; (10002684 <IRQ24_Handler+0x2b0>)
1000243c:	4b92      	ldr	r3, [pc, #584]	; (10002688 <IRQ24_Handler+0x2b4>)
1000243e:	f005 fe91 	bl	10008164 <__aeabi_dsub>
10002442:	1c03      	adds	r3, r0, #0
10002444:	1c0c      	adds	r4, r1, #0
10002446:	1c18      	adds	r0, r3, #0
10002448:	1c21      	adds	r1, r4, #0
1000244a:	f006 fac7 	bl	100089dc <__aeabi_d2f>
1000244e:	1c03      	adds	r3, r0, #0
10002450:	607b      	str	r3, [r7, #4]
10002452:	e0be      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if ((ocv > 201.75)  && (ocv <= 235.125)){soc_f = 0.3167*ocv - 61.374;}
10002454:	6838      	ldr	r0, [r7, #0]
10002456:	4988      	ldr	r1, [pc, #544]	; (10002678 <IRQ24_Handler+0x2a4>)
10002458:	f004 fbaa 	bl	10006bb0 <__aeabi_fcmpgt>
1000245c:	1e03      	subs	r3, r0, #0
1000245e:	d021      	beq.n	100024a4 <IRQ24_Handler+0xd0>
10002460:	6838      	ldr	r0, [r7, #0]
10002462:	498a      	ldr	r1, [pc, #552]	; (1000268c <IRQ24_Handler+0x2b8>)
10002464:	f004 fb9a 	bl	10006b9c <__aeabi_fcmple>
10002468:	1e03      	subs	r3, r0, #0
1000246a:	d01b      	beq.n	100024a4 <IRQ24_Handler+0xd0>
1000246c:	6838      	ldr	r0, [r7, #0]
1000246e:	f006 fa61 	bl	10008934 <__aeabi_f2d>
10002472:	1c03      	adds	r3, r0, #0
10002474:	1c0c      	adds	r4, r1, #0
10002476:	1c18      	adds	r0, r3, #0
10002478:	1c21      	adds	r1, r4, #0
1000247a:	4a85      	ldr	r2, [pc, #532]	; (10002690 <IRQ24_Handler+0x2bc>)
1000247c:	4b85      	ldr	r3, [pc, #532]	; (10002694 <IRQ24_Handler+0x2c0>)
1000247e:	f005 fbd7 	bl	10007c30 <__aeabi_dmul>
10002482:	1c03      	adds	r3, r0, #0
10002484:	1c0c      	adds	r4, r1, #0
10002486:	1c18      	adds	r0, r3, #0
10002488:	1c21      	adds	r1, r4, #0
1000248a:	4a83      	ldr	r2, [pc, #524]	; (10002698 <IRQ24_Handler+0x2c4>)
1000248c:	4b83      	ldr	r3, [pc, #524]	; (1000269c <IRQ24_Handler+0x2c8>)
1000248e:	f005 fe69 	bl	10008164 <__aeabi_dsub>
10002492:	1c03      	adds	r3, r0, #0
10002494:	1c0c      	adds	r4, r1, #0
10002496:	1c18      	adds	r0, r3, #0
10002498:	1c21      	adds	r1, r4, #0
1000249a:	f006 fa9f 	bl	100089dc <__aeabi_d2f>
1000249e:	1c03      	adds	r3, r0, #0
100024a0:	607b      	str	r3, [r7, #4]
100024a2:	e096      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if ((ocv > 235.125) && (ocv <= 245.25)){soc_f = 2.4691*ocv - 566.67;}
100024a4:	6838      	ldr	r0, [r7, #0]
100024a6:	4979      	ldr	r1, [pc, #484]	; (1000268c <IRQ24_Handler+0x2b8>)
100024a8:	f004 fb82 	bl	10006bb0 <__aeabi_fcmpgt>
100024ac:	1e03      	subs	r3, r0, #0
100024ae:	d021      	beq.n	100024f4 <IRQ24_Handler+0x120>
100024b0:	6838      	ldr	r0, [r7, #0]
100024b2:	497b      	ldr	r1, [pc, #492]	; (100026a0 <IRQ24_Handler+0x2cc>)
100024b4:	f004 fb72 	bl	10006b9c <__aeabi_fcmple>
100024b8:	1e03      	subs	r3, r0, #0
100024ba:	d01b      	beq.n	100024f4 <IRQ24_Handler+0x120>
100024bc:	6838      	ldr	r0, [r7, #0]
100024be:	f006 fa39 	bl	10008934 <__aeabi_f2d>
100024c2:	1c03      	adds	r3, r0, #0
100024c4:	1c0c      	adds	r4, r1, #0
100024c6:	1c18      	adds	r0, r3, #0
100024c8:	1c21      	adds	r1, r4, #0
100024ca:	4a76      	ldr	r2, [pc, #472]	; (100026a4 <IRQ24_Handler+0x2d0>)
100024cc:	4b76      	ldr	r3, [pc, #472]	; (100026a8 <IRQ24_Handler+0x2d4>)
100024ce:	f005 fbaf 	bl	10007c30 <__aeabi_dmul>
100024d2:	1c03      	adds	r3, r0, #0
100024d4:	1c0c      	adds	r4, r1, #0
100024d6:	1c18      	adds	r0, r3, #0
100024d8:	1c21      	adds	r1, r4, #0
100024da:	4a74      	ldr	r2, [pc, #464]	; (100026ac <IRQ24_Handler+0x2d8>)
100024dc:	4b74      	ldr	r3, [pc, #464]	; (100026b0 <IRQ24_Handler+0x2dc>)
100024de:	f005 fe41 	bl	10008164 <__aeabi_dsub>
100024e2:	1c03      	adds	r3, r0, #0
100024e4:	1c0c      	adds	r4, r1, #0
100024e6:	1c18      	adds	r0, r3, #0
100024e8:	1c21      	adds	r1, r4, #0
100024ea:	f006 fa77 	bl	100089dc <__aeabi_d2f>
100024ee:	1c03      	adds	r3, r0, #0
100024f0:	607b      	str	r3, [r7, #4]
100024f2:	e06e      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if ((ocv > 245.25) && (ocv <= 250.65)){soc_f = 9.2593*ocv - 2231.9;}
100024f4:	6838      	ldr	r0, [r7, #0]
100024f6:	496a      	ldr	r1, [pc, #424]	; (100026a0 <IRQ24_Handler+0x2cc>)
100024f8:	f004 fb5a 	bl	10006bb0 <__aeabi_fcmpgt>
100024fc:	1e03      	subs	r3, r0, #0
100024fe:	d028      	beq.n	10002552 <IRQ24_Handler+0x17e>
10002500:	6838      	ldr	r0, [r7, #0]
10002502:	f006 fa17 	bl	10008934 <__aeabi_f2d>
10002506:	1c03      	adds	r3, r0, #0
10002508:	1c0c      	adds	r4, r1, #0
1000250a:	1c18      	adds	r0, r3, #0
1000250c:	1c21      	adds	r1, r4, #0
1000250e:	4a69      	ldr	r2, [pc, #420]	; (100026b4 <IRQ24_Handler+0x2e0>)
10002510:	4b69      	ldr	r3, [pc, #420]	; (100026b8 <IRQ24_Handler+0x2e4>)
10002512:	f004 fb09 	bl	10006b28 <__aeabi_dcmple>
10002516:	1e03      	subs	r3, r0, #0
10002518:	d01b      	beq.n	10002552 <IRQ24_Handler+0x17e>
1000251a:	6838      	ldr	r0, [r7, #0]
1000251c:	f006 fa0a 	bl	10008934 <__aeabi_f2d>
10002520:	1c03      	adds	r3, r0, #0
10002522:	1c0c      	adds	r4, r1, #0
10002524:	1c18      	adds	r0, r3, #0
10002526:	1c21      	adds	r1, r4, #0
10002528:	4a64      	ldr	r2, [pc, #400]	; (100026bc <IRQ24_Handler+0x2e8>)
1000252a:	4b65      	ldr	r3, [pc, #404]	; (100026c0 <IRQ24_Handler+0x2ec>)
1000252c:	f005 fb80 	bl	10007c30 <__aeabi_dmul>
10002530:	1c03      	adds	r3, r0, #0
10002532:	1c0c      	adds	r4, r1, #0
10002534:	1c18      	adds	r0, r3, #0
10002536:	1c21      	adds	r1, r4, #0
10002538:	4a5e      	ldr	r2, [pc, #376]	; (100026b4 <IRQ24_Handler+0x2e0>)
1000253a:	4b62      	ldr	r3, [pc, #392]	; (100026c4 <IRQ24_Handler+0x2f0>)
1000253c:	f005 fe12 	bl	10008164 <__aeabi_dsub>
10002540:	1c03      	adds	r3, r0, #0
10002542:	1c0c      	adds	r4, r1, #0
10002544:	1c18      	adds	r0, r3, #0
10002546:	1c21      	adds	r1, r4, #0
10002548:	f006 fa48 	bl	100089dc <__aeabi_d2f>
1000254c:	1c03      	adds	r3, r0, #0
1000254e:	607b      	str	r3, [r7, #4]
10002550:	e03f      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if ((ocv > 250.65) && (ocv <= 250.875)){soc_f = 37.037*ocv - 9194.4;}
10002552:	6838      	ldr	r0, [r7, #0]
10002554:	f006 f9ee 	bl	10008934 <__aeabi_f2d>
10002558:	1c03      	adds	r3, r0, #0
1000255a:	1c0c      	adds	r4, r1, #0
1000255c:	1c18      	adds	r0, r3, #0
1000255e:	1c21      	adds	r1, r4, #0
10002560:	4a54      	ldr	r2, [pc, #336]	; (100026b4 <IRQ24_Handler+0x2e0>)
10002562:	4b55      	ldr	r3, [pc, #340]	; (100026b8 <IRQ24_Handler+0x2e4>)
10002564:	f004 faea 	bl	10006b3c <__aeabi_dcmpgt>
10002568:	1e03      	subs	r3, r0, #0
1000256a:	d021      	beq.n	100025b0 <IRQ24_Handler+0x1dc>
1000256c:	6838      	ldr	r0, [r7, #0]
1000256e:	4956      	ldr	r1, [pc, #344]	; (100026c8 <IRQ24_Handler+0x2f4>)
10002570:	f004 fb14 	bl	10006b9c <__aeabi_fcmple>
10002574:	1e03      	subs	r3, r0, #0
10002576:	d01b      	beq.n	100025b0 <IRQ24_Handler+0x1dc>
10002578:	6838      	ldr	r0, [r7, #0]
1000257a:	f006 f9db 	bl	10008934 <__aeabi_f2d>
1000257e:	1c03      	adds	r3, r0, #0
10002580:	1c0c      	adds	r4, r1, #0
10002582:	1c18      	adds	r0, r3, #0
10002584:	1c21      	adds	r1, r4, #0
10002586:	4a51      	ldr	r2, [pc, #324]	; (100026cc <IRQ24_Handler+0x2f8>)
10002588:	4b51      	ldr	r3, [pc, #324]	; (100026d0 <IRQ24_Handler+0x2fc>)
1000258a:	f005 fb51 	bl	10007c30 <__aeabi_dmul>
1000258e:	1c03      	adds	r3, r0, #0
10002590:	1c0c      	adds	r4, r1, #0
10002592:	1c18      	adds	r0, r3, #0
10002594:	1c21      	adds	r1, r4, #0
10002596:	4a4f      	ldr	r2, [pc, #316]	; (100026d4 <IRQ24_Handler+0x300>)
10002598:	4b4f      	ldr	r3, [pc, #316]	; (100026d8 <IRQ24_Handler+0x304>)
1000259a:	f005 fde3 	bl	10008164 <__aeabi_dsub>
1000259e:	1c03      	adds	r3, r0, #0
100025a0:	1c0c      	adds	r4, r1, #0
100025a2:	1c18      	adds	r0, r3, #0
100025a4:	1c21      	adds	r1, r4, #0
100025a6:	f006 fa19 	bl	100089dc <__aeabi_d2f>
100025aa:	1c03      	adds	r3, r0, #0
100025ac:	607b      	str	r3, [r7, #4]
100025ae:	e010      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if (ocv  > 250.875){soc_f = 100.0;}
100025b0:	6838      	ldr	r0, [r7, #0]
100025b2:	4945      	ldr	r1, [pc, #276]	; (100026c8 <IRQ24_Handler+0x2f4>)
100025b4:	f004 fafc 	bl	10006bb0 <__aeabi_fcmpgt>
100025b8:	1e03      	subs	r3, r0, #0
100025ba:	d002      	beq.n	100025c2 <IRQ24_Handler+0x1ee>
100025bc:	4b47      	ldr	r3, [pc, #284]	; (100026dc <IRQ24_Handler+0x308>)
100025be:	607b      	str	r3, [r7, #4]
100025c0:	e007      	b.n	100025d2 <IRQ24_Handler+0x1fe>
	else if (ocv <= 182.25){soc_f = 0.0;}
100025c2:	6838      	ldr	r0, [r7, #0]
100025c4:	492b      	ldr	r1, [pc, #172]	; (10002674 <IRQ24_Handler+0x2a0>)
100025c6:	f004 fae9 	bl	10006b9c <__aeabi_fcmple>
100025ca:	1e03      	subs	r3, r0, #0
100025cc:	d001      	beq.n	100025d2 <IRQ24_Handler+0x1fe>
100025ce:	2300      	movs	r3, #0
100025d0:	607b      	str	r3, [r7, #4]
	/* send PCS status */
	bmsSensor.vbat 		= pduSensor.mBTPT*10;
100025d2:	4b43      	ldr	r3, [pc, #268]	; (100026e0 <IRQ24_Handler+0x30c>)
100025d4:	685b      	ldr	r3, [r3, #4]
100025d6:	1c18      	adds	r0, r3, #0
100025d8:	4942      	ldr	r1, [pc, #264]	; (100026e4 <IRQ24_Handler+0x310>)
100025da:	f004 fbcf 	bl	10006d7c <__aeabi_fmul>
100025de:	1c03      	adds	r3, r0, #0
100025e0:	1c18      	adds	r0, r3, #0
100025e2:	f004 faf9 	bl	10006bd8 <__aeabi_f2uiz>
100025e6:	1c03      	adds	r3, r0, #0
100025e8:	b29a      	uxth	r2, r3
100025ea:	4b3f      	ldr	r3, [pc, #252]	; (100026e8 <IRQ24_Handler+0x314>)
100025ec:	805a      	strh	r2, [r3, #2]
	bmsSensor.ibat 		= pduSensor.mDCCT*10;
100025ee:	4b3c      	ldr	r3, [pc, #240]	; (100026e0 <IRQ24_Handler+0x30c>)
100025f0:	68db      	ldr	r3, [r3, #12]
100025f2:	1c18      	adds	r0, r3, #0
100025f4:	493b      	ldr	r1, [pc, #236]	; (100026e4 <IRQ24_Handler+0x310>)
100025f6:	f004 fbc1 	bl	10006d7c <__aeabi_fmul>
100025fa:	1c03      	adds	r3, r0, #0
100025fc:	1c18      	adds	r0, r3, #0
100025fe:	f004 faeb 	bl	10006bd8 <__aeabi_f2uiz>
10002602:	1c03      	adds	r3, r0, #0
10002604:	b29a      	uxth	r2, r3
10002606:	4b38      	ldr	r3, [pc, #224]	; (100026e8 <IRQ24_Handler+0x314>)
10002608:	809a      	strh	r2, [r3, #4]
//	bmsSensor.soc		= genix_data.pack_soc;
	bmsSensor.soc		= soc_f*10;
1000260a:	6878      	ldr	r0, [r7, #4]
1000260c:	4935      	ldr	r1, [pc, #212]	; (100026e4 <IRQ24_Handler+0x310>)
1000260e:	f004 fbb5 	bl	10006d7c <__aeabi_fmul>
10002612:	1c03      	adds	r3, r0, #0
10002614:	1c18      	adds	r0, r3, #0
10002616:	f004 fadf 	bl	10006bd8 <__aeabi_f2uiz>
1000261a:	1c03      	adds	r3, r0, #0
1000261c:	b29a      	uxth	r2, r3
1000261e:	4b32      	ldr	r3, [pc, #200]	; (100026e8 <IRQ24_Handler+0x314>)
10002620:	801a      	strh	r2, [r3, #0]
	bmsSensor.tempbat 	= genix_data.pack_max_temp;
10002622:	4b11      	ldr	r3, [pc, #68]	; (10002668 <IRQ24_Handler+0x294>)
10002624:	889a      	ldrh	r2, [r3, #4]
10002626:	4b30      	ldr	r3, [pc, #192]	; (100026e8 <IRQ24_Handler+0x314>)
10002628:	80da      	strh	r2, [r3, #6]

	/* Obtain data from Genix Battery */
	GENIX_RequestData(GENIX_SUMMARY);
1000262a:	2002      	movs	r0, #2
1000262c:	f001 fc84 	bl	10003f38 <GENIX_RequestData>
	PCS_BMUTransmitToPCS(0x100, &pcsBmsStatus, &bmsSensor);
10002630:	2380      	movs	r3, #128	; 0x80
10002632:	0059      	lsls	r1, r3, #1
10002634:	4a2d      	ldr	r2, [pc, #180]	; (100026ec <IRQ24_Handler+0x318>)
10002636:	4b2c      	ldr	r3, [pc, #176]	; (100026e8 <IRQ24_Handler+0x314>)
10002638:	1c08      	adds	r0, r1, #0
1000263a:	1c11      	adds	r1, r2, #0
1000263c:	1c1a      	adds	r2, r3, #0
1000263e:	f000 fde7 	bl	10003210 <PCS_BMUTransmitToPCS>
	PCS_BMUTransmitToPCS(0x101, &pcsBmsStatus, &bmsSensor);
10002642:	2302      	movs	r3, #2
10002644:	33ff      	adds	r3, #255	; 0xff
10002646:	1c19      	adds	r1, r3, #0
10002648:	4a28      	ldr	r2, [pc, #160]	; (100026ec <IRQ24_Handler+0x318>)
1000264a:	4b27      	ldr	r3, [pc, #156]	; (100026e8 <IRQ24_Handler+0x314>)
1000264c:	1c08      	adds	r0, r1, #0
1000264e:	1c11      	adds	r1, r2, #0
10002650:	1c1a      	adds	r2, r3, #0
10002652:	f000 fddd 	bl	10003210 <PCS_BMUTransmitToPCS>
	XMC_CCU4_SLICE_ClearEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002656:	4b26      	ldr	r3, [pc, #152]	; (100026f0 <IRQ24_Handler+0x31c>)
10002658:	1c18      	adds	r0, r3, #0
1000265a:	2100      	movs	r1, #0
1000265c:	f7ff f800 	bl	10001660 <XMC_CCU4_SLICE_ClearEvent>
}
10002660:	46bd      	mov	sp, r7
10002662:	b003      	add	sp, #12
10002664:	bd90      	pop	{r4, r7, pc}
10002666:	46c0      	nop			; (mov r8, r8)
10002668:	20000ad0 	.word	0x20000ad0
1000266c:	9999999a 	.word	0x9999999a
10002670:	3fb99999 	.word	0x3fb99999
10002674:	43364000 	.word	0x43364000
10002678:	4349c000 	.word	0x4349c000
1000267c:	a3d70a3d 	.word	0xa3d70a3d
10002680:	3fc23d70 	.word	0x3fc23d70
10002684:	a1cac083 	.word	0xa1cac083
10002688:	4039f645 	.word	0x4039f645
1000268c:	436b2000 	.word	0x436b2000
10002690:	13a92a30 	.word	0x13a92a30
10002694:	3fd444d0 	.word	0x3fd444d0
10002698:	3b645a1d 	.word	0x3b645a1d
1000269c:	404eafdf 	.word	0x404eafdf
100026a0:	43754000 	.word	0x43754000
100026a4:	80346dc6 	.word	0x80346dc6
100026a8:	4003c0b7 	.word	0x4003c0b7
100026ac:	28f5c28f 	.word	0x28f5c28f
100026b0:	4081b55c 	.word	0x4081b55c
100026b4:	cccccccd 	.word	0xcccccccd
100026b8:	406f54cc 	.word	0x406f54cc
100026bc:	f837b4a2 	.word	0xf837b4a2
100026c0:	402284c2 	.word	0x402284c2
100026c4:	40a16fcc 	.word	0x40a16fcc
100026c8:	437ae000 	.word	0x437ae000
100026cc:	6a7ef9db 	.word	0x6a7ef9db
100026d0:	404284bc 	.word	0x404284bc
100026d4:	33333333 	.word	0x33333333
100026d8:	40c1f533 	.word	0x40c1f533
100026dc:	42c80000 	.word	0x42c80000
100026e0:	20000b34 	.word	0x20000b34
100026e4:	41200000 	.word	0x41200000
100026e8:	20000a3c 	.word	0x20000a3c
100026ec:	20000b4c 	.word	0x20000b4c
100026f0:	48040200 	.word	0x48040200

100026f4 <IRQ21_Handler>:

void five_hundreds_intrpt_handler(void)
{
100026f4:	b580      	push	{r7, lr}
100026f6:	af00      	add	r7, sp, #0
	static uint8_t counting=0;
	if(counting == 1)
100026f8:	4b1e      	ldr	r3, [pc, #120]	; (10002774 <IRQ21_Handler+0x80>)
100026fa:	781b      	ldrb	r3, [r3, #0]
100026fc:	2b01      	cmp	r3, #1
100026fe:	d118      	bne.n	10002732 <IRQ21_Handler+0x3e>
	{
		if(sysTickParamHandle.enable)
10002700:	4b1d      	ldr	r3, [pc, #116]	; (10002778 <IRQ21_Handler+0x84>)
10002702:	781b      	ldrb	r3, [r3, #0]
10002704:	2b00      	cmp	r3, #0
10002706:	d010      	beq.n	1000272a <IRQ21_Handler+0x36>
		{
//			XMC_GPIO_ToggleOutput(P2_13);
			if(sysTickParamHandle.count == 0)
10002708:	4b1b      	ldr	r3, [pc, #108]	; (10002778 <IRQ21_Handler+0x84>)
1000270a:	885b      	ldrh	r3, [r3, #2]
1000270c:	2b00      	cmp	r3, #0
1000270e:	d106      	bne.n	1000271e <IRQ21_Handler+0x2a>
			{
				sysTickParamHandle.enable = false;
10002710:	4b19      	ldr	r3, [pc, #100]	; (10002778 <IRQ21_Handler+0x84>)
10002712:	2200      	movs	r2, #0
10002714:	701a      	strb	r2, [r3, #0]
				sysTickParamHandle.isTimeOut = true;
10002716:	4b18      	ldr	r3, [pc, #96]	; (10002778 <IRQ21_Handler+0x84>)
10002718:	2201      	movs	r2, #1
1000271a:	711a      	strb	r2, [r3, #4]
1000271c:	e005      	b.n	1000272a <IRQ21_Handler+0x36>
			}
			else
			{
				sysTickParamHandle.count--;
1000271e:	4b16      	ldr	r3, [pc, #88]	; (10002778 <IRQ21_Handler+0x84>)
10002720:	885b      	ldrh	r3, [r3, #2]
10002722:	3b01      	subs	r3, #1
10002724:	b29a      	uxth	r2, r3
10002726:	4b14      	ldr	r3, [pc, #80]	; (10002778 <IRQ21_Handler+0x84>)
10002728:	805a      	strh	r2, [r3, #2]
			}
		}
		counting = 0;
1000272a:	4b12      	ldr	r3, [pc, #72]	; (10002774 <IRQ21_Handler+0x80>)
1000272c:	2200      	movs	r2, #0
1000272e:	701a      	strb	r2, [r3, #0]
10002730:	e005      	b.n	1000273e <IRQ21_Handler+0x4a>
	}
	else
	{
		counting++;
10002732:	4b10      	ldr	r3, [pc, #64]	; (10002774 <IRQ21_Handler+0x80>)
10002734:	781b      	ldrb	r3, [r3, #0]
10002736:	3301      	adds	r3, #1
10002738:	b2da      	uxtb	r2, r3
1000273a:	4b0e      	ldr	r3, [pc, #56]	; (10002774 <IRQ21_Handler+0x80>)
1000273c:	701a      	strb	r2, [r3, #0]
	}
	buffptr = ESP32_Map_Data(&data_group);
1000273e:	4b0f      	ldr	r3, [pc, #60]	; (1000277c <IRQ21_Handler+0x88>)
10002740:	1c18      	adds	r0, r3, #0
10002742:	f001 fe01 	bl	10004348 <ESP32_Map_Data>
10002746:	1c02      	adds	r2, r0, #0
10002748:	4b0d      	ldr	r3, [pc, #52]	; (10002780 <IRQ21_Handler+0x8c>)
1000274a:	601a      	str	r2, [r3, #0]
	memcpy(espBuffer, buffptr, ESP_DATA_LENGTH);
1000274c:	4b0c      	ldr	r3, [pc, #48]	; (10002780 <IRQ21_Handler+0x8c>)
1000274e:	681b      	ldr	r3, [r3, #0]
10002750:	4a0c      	ldr	r2, [pc, #48]	; (10002784 <IRQ21_Handler+0x90>)
10002752:	1c10      	adds	r0, r2, #0
10002754:	1c19      	adds	r1, r3, #0
10002756:	224b      	movs	r2, #75	; 0x4b
10002758:	f006 fa1a 	bl	10008b90 <memcpy>
	ESP32_SendStream((char*)&espBuffer, ESP_DATA_LENGTH);
1000275c:	4b09      	ldr	r3, [pc, #36]	; (10002784 <IRQ21_Handler+0x90>)
1000275e:	1c18      	adds	r0, r3, #0
10002760:	214b      	movs	r1, #75	; 0x4b
10002762:	f001 fdb7 	bl	100042d4 <ESP32_SendStream>

	XMC_CCU4_SLICE_ClearEvent(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002766:	4b08      	ldr	r3, [pc, #32]	; (10002788 <IRQ21_Handler+0x94>)
10002768:	1c18      	adds	r0, r3, #0
1000276a:	2100      	movs	r1, #0
1000276c:	f7fe ff78 	bl	10001660 <XMC_CCU4_SLICE_ClearEvent>
}
10002770:	46bd      	mov	sp, r7
10002772:	bd80      	pop	{r7, pc}
10002774:	200007a0 	.word	0x200007a0
10002778:	20000a94 	.word	0x20000a94
1000277c:	20000a48 	.word	0x20000a48
10002780:	20000aa8 	.word	0x20000aa8
10002784:	20000adc 	.word	0x20000adc
10002788:	48040300 	.word	0x48040300

1000278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000278c:	b580      	push	{r7, lr}
1000278e:	b082      	sub	sp, #8
10002790:	af00      	add	r7, sp, #0
10002792:	1c02      	adds	r2, r0, #0
10002794:	1dfb      	adds	r3, r7, #7
10002796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002798:	1dfb      	adds	r3, r7, #7
1000279a:	781b      	ldrb	r3, [r3, #0]
1000279c:	2b7f      	cmp	r3, #127	; 0x7f
1000279e:	d809      	bhi.n	100027b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100027a0:	4b06      	ldr	r3, [pc, #24]	; (100027bc <__NVIC_EnableIRQ+0x30>)
100027a2:	1dfa      	adds	r2, r7, #7
100027a4:	7812      	ldrb	r2, [r2, #0]
100027a6:	1c11      	adds	r1, r2, #0
100027a8:	221f      	movs	r2, #31
100027aa:	400a      	ands	r2, r1
100027ac:	2101      	movs	r1, #1
100027ae:	4091      	lsls	r1, r2
100027b0:	1c0a      	adds	r2, r1, #0
100027b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100027b4:	46bd      	mov	sp, r7
100027b6:	b002      	add	sp, #8
100027b8:	bd80      	pop	{r7, pc}
100027ba:	46c0      	nop			; (mov r8, r8)
100027bc:	e000e100 	.word	0xe000e100

100027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100027c0:	b5b0      	push	{r4, r5, r7, lr}
100027c2:	b082      	sub	sp, #8
100027c4:	af00      	add	r7, sp, #0
100027c6:	1c02      	adds	r2, r0, #0
100027c8:	6039      	str	r1, [r7, #0]
100027ca:	1dfb      	adds	r3, r7, #7
100027cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100027ce:	1dfb      	adds	r3, r7, #7
100027d0:	781b      	ldrb	r3, [r3, #0]
100027d2:	2b7f      	cmp	r3, #127	; 0x7f
100027d4:	d827      	bhi.n	10002826 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100027d6:	4c2d      	ldr	r4, [pc, #180]	; (1000288c <__NVIC_SetPriority+0xcc>)
100027d8:	1dfb      	adds	r3, r7, #7
100027da:	781b      	ldrb	r3, [r3, #0]
100027dc:	b25b      	sxtb	r3, r3
100027de:	089b      	lsrs	r3, r3, #2
100027e0:	492a      	ldr	r1, [pc, #168]	; (1000288c <__NVIC_SetPriority+0xcc>)
100027e2:	1dfa      	adds	r2, r7, #7
100027e4:	7812      	ldrb	r2, [r2, #0]
100027e6:	b252      	sxtb	r2, r2
100027e8:	0892      	lsrs	r2, r2, #2
100027ea:	32c0      	adds	r2, #192	; 0xc0
100027ec:	0092      	lsls	r2, r2, #2
100027ee:	5852      	ldr	r2, [r2, r1]
100027f0:	1df9      	adds	r1, r7, #7
100027f2:	7809      	ldrb	r1, [r1, #0]
100027f4:	1c08      	adds	r0, r1, #0
100027f6:	2103      	movs	r1, #3
100027f8:	4001      	ands	r1, r0
100027fa:	00c9      	lsls	r1, r1, #3
100027fc:	1c08      	adds	r0, r1, #0
100027fe:	21ff      	movs	r1, #255	; 0xff
10002800:	4081      	lsls	r1, r0
10002802:	43c9      	mvns	r1, r1
10002804:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002806:	683a      	ldr	r2, [r7, #0]
10002808:	0192      	lsls	r2, r2, #6
1000280a:	20ff      	movs	r0, #255	; 0xff
1000280c:	4002      	ands	r2, r0
1000280e:	1df8      	adds	r0, r7, #7
10002810:	7800      	ldrb	r0, [r0, #0]
10002812:	1c05      	adds	r5, r0, #0
10002814:	2003      	movs	r0, #3
10002816:	4028      	ands	r0, r5
10002818:	00c0      	lsls	r0, r0, #3
1000281a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000281c:	430a      	orrs	r2, r1
1000281e:	33c0      	adds	r3, #192	; 0xc0
10002820:	009b      	lsls	r3, r3, #2
10002822:	511a      	str	r2, [r3, r4]
10002824:	e02e      	b.n	10002884 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002826:	4c1a      	ldr	r4, [pc, #104]	; (10002890 <__NVIC_SetPriority+0xd0>)
10002828:	1dfb      	adds	r3, r7, #7
1000282a:	781b      	ldrb	r3, [r3, #0]
1000282c:	1c1a      	adds	r2, r3, #0
1000282e:	230f      	movs	r3, #15
10002830:	4013      	ands	r3, r2
10002832:	3b08      	subs	r3, #8
10002834:	0899      	lsrs	r1, r3, #2
10002836:	4a16      	ldr	r2, [pc, #88]	; (10002890 <__NVIC_SetPriority+0xd0>)
10002838:	1dfb      	adds	r3, r7, #7
1000283a:	781b      	ldrb	r3, [r3, #0]
1000283c:	1c18      	adds	r0, r3, #0
1000283e:	230f      	movs	r3, #15
10002840:	4003      	ands	r3, r0
10002842:	3b08      	subs	r3, #8
10002844:	089b      	lsrs	r3, r3, #2
10002846:	3306      	adds	r3, #6
10002848:	009b      	lsls	r3, r3, #2
1000284a:	18d3      	adds	r3, r2, r3
1000284c:	685b      	ldr	r3, [r3, #4]
1000284e:	1dfa      	adds	r2, r7, #7
10002850:	7812      	ldrb	r2, [r2, #0]
10002852:	1c10      	adds	r0, r2, #0
10002854:	2203      	movs	r2, #3
10002856:	4002      	ands	r2, r0
10002858:	00d2      	lsls	r2, r2, #3
1000285a:	1c10      	adds	r0, r2, #0
1000285c:	22ff      	movs	r2, #255	; 0xff
1000285e:	4082      	lsls	r2, r0
10002860:	43d2      	mvns	r2, r2
10002862:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002864:	683b      	ldr	r3, [r7, #0]
10002866:	019b      	lsls	r3, r3, #6
10002868:	20ff      	movs	r0, #255	; 0xff
1000286a:	4003      	ands	r3, r0
1000286c:	1df8      	adds	r0, r7, #7
1000286e:	7800      	ldrb	r0, [r0, #0]
10002870:	1c05      	adds	r5, r0, #0
10002872:	2003      	movs	r0, #3
10002874:	4028      	ands	r0, r5
10002876:	00c0      	lsls	r0, r0, #3
10002878:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000287a:	431a      	orrs	r2, r3
1000287c:	1d8b      	adds	r3, r1, #6
1000287e:	009b      	lsls	r3, r3, #2
10002880:	18e3      	adds	r3, r4, r3
10002882:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002884:	46bd      	mov	sp, r7
10002886:	b002      	add	sp, #8
10002888:	bdb0      	pop	{r4, r5, r7, pc}
1000288a:	46c0      	nop			; (mov r8, r8)
1000288c:	e000e100 	.word	0xe000e100
10002890:	e000ed00 	.word	0xe000ed00

10002894 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10002894:	b580      	push	{r7, lr}
10002896:	b082      	sub	sp, #8
10002898:	af00      	add	r7, sp, #0
1000289a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
1000289c:	687b      	ldr	r3, [r7, #4]
1000289e:	2280      	movs	r2, #128	; 0x80
100028a0:	0052      	lsls	r2, r2, #1
100028a2:	60da      	str	r2, [r3, #12]
}
100028a4:	46bd      	mov	sp, r7
100028a6:	b002      	add	sp, #8
100028a8:	bd80      	pop	{r7, pc}
100028aa:	46c0      	nop			; (mov r8, r8)

100028ac <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
100028ac:	b580      	push	{r7, lr}
100028ae:	b082      	sub	sp, #8
100028b0:	af00      	add	r7, sp, #0
100028b2:	6078      	str	r0, [r7, #4]
100028b4:	1c0a      	adds	r2, r1, #0
100028b6:	1cfb      	adds	r3, r7, #3
100028b8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
100028ba:	1cfb      	adds	r3, r7, #3
100028bc:	781b      	ldrb	r3, [r3, #0]
100028be:	2201      	movs	r2, #1
100028c0:	409a      	lsls	r2, r3
100028c2:	687b      	ldr	r3, [r7, #4]
100028c4:	60da      	str	r2, [r3, #12]
}
100028c6:	46bd      	mov	sp, r7
100028c8:	b002      	add	sp, #8
100028ca:	bd80      	pop	{r7, pc}

100028cc <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100028cc:	b580      	push	{r7, lr}
100028ce:	b082      	sub	sp, #8
100028d0:	af00      	add	r7, sp, #0
100028d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100028d4:	687b      	ldr	r3, [r7, #4]
100028d6:	2201      	movs	r2, #1
100028d8:	60da      	str	r2, [r3, #12]
}
100028da:	46bd      	mov	sp, r7
100028dc:	b002      	add	sp, #8
100028de:	bd80      	pop	{r7, pc}

100028e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100028e0:	b580      	push	{r7, lr}
100028e2:	b082      	sub	sp, #8
100028e4:	af00      	add	r7, sp, #0
100028e6:	6078      	str	r0, [r7, #4]
100028e8:	1c0a      	adds	r2, r1, #0
100028ea:	1cbb      	adds	r3, r7, #2
100028ec:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100028ee:	1cbb      	adds	r3, r7, #2
100028f0:	881a      	ldrh	r2, [r3, #0]
100028f2:	687b      	ldr	r3, [r7, #4]
100028f4:	635a      	str	r2, [r3, #52]	; 0x34
}
100028f6:	46bd      	mov	sp, r7
100028f8:	b002      	add	sp, #8
100028fa:	bd80      	pop	{r7, pc}

100028fc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
100028fc:	b580      	push	{r7, lr}
100028fe:	b082      	sub	sp, #8
10002900:	af00      	add	r7, sp, #0
10002902:	6078      	str	r0, [r7, #4]
10002904:	1c0a      	adds	r2, r1, #0
10002906:	1cbb      	adds	r3, r7, #2
10002908:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000290a:	1cbb      	adds	r3, r7, #2
1000290c:	881a      	ldrh	r2, [r3, #0]
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	63da      	str	r2, [r3, #60]	; 0x3c
}
10002912:	46bd      	mov	sp, r7
10002914:	b002      	add	sp, #8
10002916:	bd80      	pop	{r7, pc}

10002918 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002918:	b580      	push	{r7, lr}
1000291a:	b082      	sub	sp, #8
1000291c:	af00      	add	r7, sp, #0
1000291e:	6078      	str	r0, [r7, #4]
10002920:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10002922:	687b      	ldr	r3, [r7, #4]
10002924:	683a      	ldr	r2, [r7, #0]
10002926:	611a      	str	r2, [r3, #16]
}
10002928:	46bd      	mov	sp, r7
1000292a:	b002      	add	sp, #8
1000292c:	bd80      	pop	{r7, pc}
1000292e:	46c0      	nop			; (mov r8, r8)

10002930 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002930:	b580      	push	{r7, lr}
10002932:	b082      	sub	sp, #8
10002934:	af00      	add	r7, sp, #0
10002936:	6078      	str	r0, [r7, #4]
10002938:	1c0a      	adds	r2, r1, #0
1000293a:	1cfb      	adds	r3, r7, #3
1000293c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000293e:	687b      	ldr	r3, [r7, #4]
10002940:	22a4      	movs	r2, #164	; 0xa4
10002942:	589a      	ldr	r2, [r3, r2]
10002944:	1cfb      	adds	r3, r7, #3
10002946:	781b      	ldrb	r3, [r3, #0]
10002948:	2101      	movs	r1, #1
1000294a:	4099      	lsls	r1, r3
1000294c:	1c0b      	adds	r3, r1, #0
1000294e:	431a      	orrs	r2, r3
10002950:	687b      	ldr	r3, [r7, #4]
10002952:	21a4      	movs	r1, #164	; 0xa4
10002954:	505a      	str	r2, [r3, r1]
}
10002956:	46bd      	mov	sp, r7
10002958:	b002      	add	sp, #8
1000295a:	bd80      	pop	{r7, pc}

1000295c <TIMING_TimerInit>:
 */

#include "timing_op.h"

void TIMING_TimerInit(void)
{
1000295c:	b580      	push	{r7, lr}
1000295e:	af00      	add	r7, sp, #0

	/* Enable clock, enable prescaler block and configure global control */
	XMC_CCU4_Init(CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
10002960:	4b53      	ldr	r3, [pc, #332]	; (10002ab0 <TIMING_TimerInit+0x154>)
10002962:	1c18      	adds	r0, r3, #0
10002964:	2100      	movs	r1, #0
10002966:	f002 ff93 	bl	10005890 <XMC_CCU4_Init>

	/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(CCU40);
1000296a:	4b51      	ldr	r3, [pc, #324]	; (10002ab0 <TIMING_TimerInit+0x154>)
1000296c:	1c18      	adds	r0, r3, #0
1000296e:	f7ff ff91 	bl	10002894 <XMC_CCU4_StartPrescaler>

	/* Start of CCU4 configurations */
	/* Ensure fCCU reaches CCU40 */
	XMC_CCU4_SetModuleClock(CCU40, XMC_CCU4_CLOCK_SCU);
10002972:	4b4f      	ldr	r3, [pc, #316]	; (10002ab0 <TIMING_TimerInit+0x154>)
10002974:	1c18      	adds	r0, r3, #0
10002976:	2100      	movs	r1, #0
10002978:	f002 ffae 	bl	100058d8 <XMC_CCU4_SetModuleClock>

	//Configure Slice(s) Functions, Interrupts and Start-up
	/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(CCU40_CC40, &SLICE0_config);
1000297c:	4a4d      	ldr	r2, [pc, #308]	; (10002ab4 <TIMING_TimerInit+0x158>)
1000297e:	4b4e      	ldr	r3, [pc, #312]	; (10002ab8 <TIMING_TimerInit+0x15c>)
10002980:	1c10      	adds	r0, r2, #0
10002982:	1c19      	adds	r1, r3, #0
10002984:	f002 ffc2 	bl	1000590c <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CompareInit(CCU40_CC41, &SLICE1_config);
10002988:	4a4c      	ldr	r2, [pc, #304]	; (10002abc <TIMING_TimerInit+0x160>)
1000298a:	4b4d      	ldr	r3, [pc, #308]	; (10002ac0 <TIMING_TimerInit+0x164>)
1000298c:	1c10      	adds	r0, r2, #0
1000298e:	1c19      	adds	r1, r3, #0
10002990:	f002 ffbc 	bl	1000590c <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CompareInit(CCU40_CC42, &SLICE2_config);
10002994:	4a4b      	ldr	r2, [pc, #300]	; (10002ac4 <TIMING_TimerInit+0x168>)
10002996:	4b4c      	ldr	r3, [pc, #304]	; (10002ac8 <TIMING_TimerInit+0x16c>)
10002998:	1c10      	adds	r0, r2, #0
1000299a:	1c19      	adds	r1, r3, #0
1000299c:	f002 ffb6 	bl	1000590c <XMC_CCU4_SLICE_CompareInit>


	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 32 = 3 MHz */
	/* Program duty cycle[50%] and frequency [1 kHz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC40, 1500); // any value less than PWM Period Counter
100029a0:	4a44      	ldr	r2, [pc, #272]	; (10002ab4 <TIMING_TimerInit+0x158>)
100029a2:	4b4a      	ldr	r3, [pc, #296]	; (10002acc <TIMING_TimerInit+0x170>)
100029a4:	1c10      	adds	r0, r2, #0
100029a6:	1c19      	adds	r1, r3, #0
100029a8:	f7ff ffa8 	bl	100028fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC40, 3000);
100029ac:	4a41      	ldr	r2, [pc, #260]	; (10002ab4 <TIMING_TimerInit+0x158>)
100029ae:	4b48      	ldr	r3, [pc, #288]	; (10002ad0 <TIMING_TimerInit+0x174>)
100029b0:	1c10      	adds	r0, r2, #0
100029b2:	1c19      	adds	r1, r3, #0
100029b4:	f7ff ff94 	bl	100028e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 1024 = 93750 Hz */
	/* Program duty cycle[50%] and frequency [10 Hz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC41, 4687); // any value less than PWM Period Counter
100029b8:	4a40      	ldr	r2, [pc, #256]	; (10002abc <TIMING_TimerInit+0x160>)
100029ba:	4b46      	ldr	r3, [pc, #280]	; (10002ad4 <TIMING_TimerInit+0x178>)
100029bc:	1c10      	adds	r0, r2, #0
100029be:	1c19      	adds	r1, r3, #0
100029c0:	f7ff ff9c 	bl	100028fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC41, 9375);
100029c4:	4a3d      	ldr	r2, [pc, #244]	; (10002abc <TIMING_TimerInit+0x160>)
100029c6:	4b44      	ldr	r3, [pc, #272]	; (10002ad8 <TIMING_TimerInit+0x17c>)
100029c8:	1c10      	adds	r0, r2, #0
100029ca:	1c19      	adds	r1, r3, #0
100029cc:	f7ff ff88 	bl	100028e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 8192 = 11718.75 Hz */
	/* Program duty cycle[50%] and frequency [2 Hz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC42, 2930); // any value less than PWM Period Counter
100029d0:	4a3c      	ldr	r2, [pc, #240]	; (10002ac4 <TIMING_TimerInit+0x168>)
100029d2:	4b42      	ldr	r3, [pc, #264]	; (10002adc <TIMING_TimerInit+0x180>)
100029d4:	1c10      	adds	r0, r2, #0
100029d6:	1c19      	adds	r1, r3, #0
100029d8:	f7ff ff90 	bl	100028fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC42, 5859);
100029dc:	4a39      	ldr	r2, [pc, #228]	; (10002ac4 <TIMING_TimerInit+0x168>)
100029de:	4b40      	ldr	r3, [pc, #256]	; (10002ae0 <TIMING_TimerInit+0x184>)
100029e0:	1c10      	adds	r0, r2, #0
100029e2:	1c19      	adds	r1, r3, #0
100029e4:	f7ff ff7c 	bl	100028e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Enable shadow transfer for PWM Slice */
	XMC_CCU4_EnableShadowTransfer(CCU40, \
100029e8:	4b31      	ldr	r3, [pc, #196]	; (10002ab0 <TIMING_TimerInit+0x154>)
100029ea:	1c18      	adds	r0, r3, #0
100029ec:	2105      	movs	r1, #5
100029ee:	f7ff ff93 	bl	10002918 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	XMC_CCU4_EnableShadowTransfer(CCU40, \
100029f2:	4b2f      	ldr	r3, [pc, #188]	; (10002ab0 <TIMING_TimerInit+0x154>)
100029f4:	1c18      	adds	r0, r3, #0
100029f6:	2150      	movs	r1, #80	; 0x50
100029f8:	f7ff ff8e 	bl	10002918 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_1|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1));
	XMC_CCU4_EnableShadowTransfer(CCU40, \
100029fc:	4a2c      	ldr	r2, [pc, #176]	; (10002ab0 <TIMING_TimerInit+0x154>)
100029fe:	23a0      	movs	r3, #160	; 0xa0
10002a00:	00db      	lsls	r3, r3, #3
10002a02:	1c10      	adds	r0, r2, #0
10002a04:	1c19      	adds	r1, r3, #0
10002a06:	f7ff ff87 	bl	10002918 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_2|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2));

	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a0a:	4b2a      	ldr	r3, [pc, #168]	; (10002ab4 <TIMING_TimerInit+0x158>)
10002a0c:	1c18      	adds	r0, r3, #0
10002a0e:	2100      	movs	r1, #0
10002a10:	f7ff ff8e 	bl	10002930 <XMC_CCU4_SLICE_EnableEvent>
	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a14:	4b29      	ldr	r3, [pc, #164]	; (10002abc <TIMING_TimerInit+0x160>)
10002a16:	1c18      	adds	r0, r3, #0
10002a18:	2100      	movs	r1, #0
10002a1a:	f7ff ff89 	bl	10002930 <XMC_CCU4_SLICE_EnableEvent>
	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a1e:	4b29      	ldr	r3, [pc, #164]	; (10002ac4 <TIMING_TimerInit+0x168>)
10002a20:	1c18      	adds	r0, r3, #0
10002a22:	2100      	movs	r1, #0
10002a24:	f7ff ff84 	bl	10002930 <XMC_CCU4_SLICE_EnableEvent>

	/* Connect event to SR2 */
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_2);
10002a28:	4b22      	ldr	r3, [pc, #136]	; (10002ab4 <TIMING_TimerInit+0x158>)
10002a2a:	1c18      	adds	r0, r3, #0
10002a2c:	2100      	movs	r1, #0
10002a2e:	2202      	movs	r2, #2
10002a30:	f002 ffa0 	bl	10005974 <XMC_CCU4_SLICE_SetInterruptNode>
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_3);
10002a34:	4b21      	ldr	r3, [pc, #132]	; (10002abc <TIMING_TimerInit+0x160>)
10002a36:	1c18      	adds	r0, r3, #0
10002a38:	2100      	movs	r1, #0
10002a3a:	2203      	movs	r2, #3
10002a3c:	f002 ff9a 	bl	10005974 <XMC_CCU4_SLICE_SetInterruptNode>
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
10002a40:	4b20      	ldr	r3, [pc, #128]	; (10002ac4 <TIMING_TimerInit+0x168>)
10002a42:	1c18      	adds	r0, r3, #0
10002a44:	2100      	movs	r1, #0
10002a46:	2200      	movs	r2, #0
10002a48:	f002 ff94 	bl	10005974 <XMC_CCU4_SLICE_SetInterruptNode>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ23_IRQn, 3U); // for CCU40_CC40
10002a4c:	2017      	movs	r0, #23
10002a4e:	2103      	movs	r1, #3
10002a50:	f7ff feb6 	bl	100027c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ23_IRQn);
10002a54:	2017      	movs	r0, #23
10002a56:	f7ff fe99 	bl	1000278c <__NVIC_EnableIRQ>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ24_IRQn, 9U); // for CCU40_CC41
10002a5a:	2018      	movs	r0, #24
10002a5c:	2109      	movs	r1, #9
10002a5e:	f7ff feaf 	bl	100027c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ24_IRQn);
10002a62:	2018      	movs	r0, #24
10002a64:	f7ff fe92 	bl	1000278c <__NVIC_EnableIRQ>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ21_IRQn, 2U); // for CCU40_CC42
10002a68:	2015      	movs	r0, #21
10002a6a:	2102      	movs	r1, #2
10002a6c:	f7ff fea8 	bl	100027c0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ21_IRQn);
10002a70:	2015      	movs	r0, #21
10002a72:	f7ff fe8b 	bl	1000278c <__NVIC_EnableIRQ>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(CCU40, 0U);
10002a76:	4b0e      	ldr	r3, [pc, #56]	; (10002ab0 <TIMING_TimerInit+0x154>)
10002a78:	1c18      	adds	r0, r3, #0
10002a7a:	2100      	movs	r1, #0
10002a7c:	f7ff ff16 	bl	100028ac <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(CCU40, 1U);
10002a80:	4b0b      	ldr	r3, [pc, #44]	; (10002ab0 <TIMING_TimerInit+0x154>)
10002a82:	1c18      	adds	r0, r3, #0
10002a84:	2101      	movs	r1, #1
10002a86:	f7ff ff11 	bl	100028ac <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(CCU40, 2U);
10002a8a:	4b09      	ldr	r3, [pc, #36]	; (10002ab0 <TIMING_TimerInit+0x154>)
10002a8c:	1c18      	adds	r0, r3, #0
10002a8e:	2102      	movs	r1, #2
10002a90:	f7ff ff0c 	bl	100028ac <XMC_CCU4_EnableClock>

	/* Start the TImer*/
	XMC_CCU4_SLICE_StartTimer(CCU40_CC40); // timer for Handshaking
10002a94:	4b07      	ldr	r3, [pc, #28]	; (10002ab4 <TIMING_TimerInit+0x158>)
10002a96:	1c18      	adds	r0, r3, #0
10002a98:	f7ff ff18 	bl	100028cc <XMC_CCU4_SLICE_StartTimer>
	XMC_CCU4_SLICE_StartTimer(CCU40_CC41); // clocking for BMS and ESP32
10002a9c:	4b07      	ldr	r3, [pc, #28]	; (10002abc <TIMING_TimerInit+0x160>)
10002a9e:	1c18      	adds	r0, r3, #0
10002aa0:	f7ff ff14 	bl	100028cc <XMC_CCU4_SLICE_StartTimer>
	XMC_CCU4_SLICE_StartTimer(CCU40_CC42); // send data via bluetooth
10002aa4:	4b07      	ldr	r3, [pc, #28]	; (10002ac4 <TIMING_TimerInit+0x168>)
10002aa6:	1c18      	adds	r0, r3, #0
10002aa8:	f7ff ff10 	bl	100028cc <XMC_CCU4_SLICE_StartTimer>

}
10002aac:	46bd      	mov	sp, r7
10002aae:	bd80      	pop	{r7, pc}
10002ab0:	48040000 	.word	0x48040000
10002ab4:	48040100 	.word	0x48040100
10002ab8:	20000550 	.word	0x20000550
10002abc:	48040200 	.word	0x48040200
10002ac0:	20000558 	.word	0x20000558
10002ac4:	48040300 	.word	0x48040300
10002ac8:	20000560 	.word	0x20000560
10002acc:	000005dc 	.word	0x000005dc
10002ad0:	00000bb8 	.word	0x00000bb8
10002ad4:	0000124f 	.word	0x0000124f
10002ad8:	0000249f 	.word	0x0000249f
10002adc:	00000b72 	.word	0x00000b72
10002ae0:	000016e3 	.word	0x000016e3

10002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002ae4:	b580      	push	{r7, lr}
10002ae6:	b082      	sub	sp, #8
10002ae8:	af00      	add	r7, sp, #0
10002aea:	1c02      	adds	r2, r0, #0
10002aec:	1dfb      	adds	r3, r7, #7
10002aee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002af0:	1dfb      	adds	r3, r7, #7
10002af2:	781b      	ldrb	r3, [r3, #0]
10002af4:	2b7f      	cmp	r3, #127	; 0x7f
10002af6:	d809      	bhi.n	10002b0c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002af8:	4b06      	ldr	r3, [pc, #24]	; (10002b14 <__NVIC_EnableIRQ+0x30>)
10002afa:	1dfa      	adds	r2, r7, #7
10002afc:	7812      	ldrb	r2, [r2, #0]
10002afe:	1c11      	adds	r1, r2, #0
10002b00:	221f      	movs	r2, #31
10002b02:	400a      	ands	r2, r1
10002b04:	2101      	movs	r1, #1
10002b06:	4091      	lsls	r1, r2
10002b08:	1c0a      	adds	r2, r1, #0
10002b0a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002b0c:	46bd      	mov	sp, r7
10002b0e:	b002      	add	sp, #8
10002b10:	bd80      	pop	{r7, pc}
10002b12:	46c0      	nop			; (mov r8, r8)
10002b14:	e000e100 	.word	0xe000e100

10002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002b18:	b5b0      	push	{r4, r5, r7, lr}
10002b1a:	b082      	sub	sp, #8
10002b1c:	af00      	add	r7, sp, #0
10002b1e:	1c02      	adds	r2, r0, #0
10002b20:	6039      	str	r1, [r7, #0]
10002b22:	1dfb      	adds	r3, r7, #7
10002b24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002b26:	1dfb      	adds	r3, r7, #7
10002b28:	781b      	ldrb	r3, [r3, #0]
10002b2a:	2b7f      	cmp	r3, #127	; 0x7f
10002b2c:	d827      	bhi.n	10002b7e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b2e:	4c2d      	ldr	r4, [pc, #180]	; (10002be4 <__NVIC_SetPriority+0xcc>)
10002b30:	1dfb      	adds	r3, r7, #7
10002b32:	781b      	ldrb	r3, [r3, #0]
10002b34:	b25b      	sxtb	r3, r3
10002b36:	089b      	lsrs	r3, r3, #2
10002b38:	492a      	ldr	r1, [pc, #168]	; (10002be4 <__NVIC_SetPriority+0xcc>)
10002b3a:	1dfa      	adds	r2, r7, #7
10002b3c:	7812      	ldrb	r2, [r2, #0]
10002b3e:	b252      	sxtb	r2, r2
10002b40:	0892      	lsrs	r2, r2, #2
10002b42:	32c0      	adds	r2, #192	; 0xc0
10002b44:	0092      	lsls	r2, r2, #2
10002b46:	5852      	ldr	r2, [r2, r1]
10002b48:	1df9      	adds	r1, r7, #7
10002b4a:	7809      	ldrb	r1, [r1, #0]
10002b4c:	1c08      	adds	r0, r1, #0
10002b4e:	2103      	movs	r1, #3
10002b50:	4001      	ands	r1, r0
10002b52:	00c9      	lsls	r1, r1, #3
10002b54:	1c08      	adds	r0, r1, #0
10002b56:	21ff      	movs	r1, #255	; 0xff
10002b58:	4081      	lsls	r1, r0
10002b5a:	43c9      	mvns	r1, r1
10002b5c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002b5e:	683a      	ldr	r2, [r7, #0]
10002b60:	0192      	lsls	r2, r2, #6
10002b62:	20ff      	movs	r0, #255	; 0xff
10002b64:	4002      	ands	r2, r0
10002b66:	1df8      	adds	r0, r7, #7
10002b68:	7800      	ldrb	r0, [r0, #0]
10002b6a:	1c05      	adds	r5, r0, #0
10002b6c:	2003      	movs	r0, #3
10002b6e:	4028      	ands	r0, r5
10002b70:	00c0      	lsls	r0, r0, #3
10002b72:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b74:	430a      	orrs	r2, r1
10002b76:	33c0      	adds	r3, #192	; 0xc0
10002b78:	009b      	lsls	r3, r3, #2
10002b7a:	511a      	str	r2, [r3, r4]
10002b7c:	e02e      	b.n	10002bdc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002b7e:	4c1a      	ldr	r4, [pc, #104]	; (10002be8 <__NVIC_SetPriority+0xd0>)
10002b80:	1dfb      	adds	r3, r7, #7
10002b82:	781b      	ldrb	r3, [r3, #0]
10002b84:	1c1a      	adds	r2, r3, #0
10002b86:	230f      	movs	r3, #15
10002b88:	4013      	ands	r3, r2
10002b8a:	3b08      	subs	r3, #8
10002b8c:	0899      	lsrs	r1, r3, #2
10002b8e:	4a16      	ldr	r2, [pc, #88]	; (10002be8 <__NVIC_SetPriority+0xd0>)
10002b90:	1dfb      	adds	r3, r7, #7
10002b92:	781b      	ldrb	r3, [r3, #0]
10002b94:	1c18      	adds	r0, r3, #0
10002b96:	230f      	movs	r3, #15
10002b98:	4003      	ands	r3, r0
10002b9a:	3b08      	subs	r3, #8
10002b9c:	089b      	lsrs	r3, r3, #2
10002b9e:	3306      	adds	r3, #6
10002ba0:	009b      	lsls	r3, r3, #2
10002ba2:	18d3      	adds	r3, r2, r3
10002ba4:	685b      	ldr	r3, [r3, #4]
10002ba6:	1dfa      	adds	r2, r7, #7
10002ba8:	7812      	ldrb	r2, [r2, #0]
10002baa:	1c10      	adds	r0, r2, #0
10002bac:	2203      	movs	r2, #3
10002bae:	4002      	ands	r2, r0
10002bb0:	00d2      	lsls	r2, r2, #3
10002bb2:	1c10      	adds	r0, r2, #0
10002bb4:	22ff      	movs	r2, #255	; 0xff
10002bb6:	4082      	lsls	r2, r0
10002bb8:	43d2      	mvns	r2, r2
10002bba:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002bbc:	683b      	ldr	r3, [r7, #0]
10002bbe:	019b      	lsls	r3, r3, #6
10002bc0:	20ff      	movs	r0, #255	; 0xff
10002bc2:	4003      	ands	r3, r0
10002bc4:	1df8      	adds	r0, r7, #7
10002bc6:	7800      	ldrb	r0, [r0, #0]
10002bc8:	1c05      	adds	r5, r0, #0
10002bca:	2003      	movs	r0, #3
10002bcc:	4028      	ands	r0, r5
10002bce:	00c0      	lsls	r0, r0, #3
10002bd0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bd2:	431a      	orrs	r2, r3
10002bd4:	1d8b      	adds	r3, r1, #6
10002bd6:	009b      	lsls	r3, r3, #2
10002bd8:	18e3      	adds	r3, r4, r3
10002bda:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002bdc:	46bd      	mov	sp, r7
10002bde:	b002      	add	sp, #8
10002be0:	bdb0      	pop	{r4, r5, r7, pc}
10002be2:	46c0      	nop			; (mov r8, r8)
10002be4:	e000e100 	.word	0xe000e100
10002be8:	e000ed00 	.word	0xe000ed00

10002bec <XMC_VADC_GROUP_QueueTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
{
10002bec:	b580      	push	{r7, lr}
10002bee:	b082      	sub	sp, #8
10002bf0:	af00      	add	r7, sp, #0
10002bf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
10002bf4:	687a      	ldr	r2, [r7, #4]
10002bf6:	2382      	movs	r3, #130	; 0x82
10002bf8:	005b      	lsls	r3, r3, #1
10002bfa:	58d3      	ldr	r3, [r2, r3]
10002bfc:	2280      	movs	r2, #128	; 0x80
10002bfe:	0092      	lsls	r2, r2, #2
10002c00:	431a      	orrs	r2, r3
10002c02:	1c11      	adds	r1, r2, #0
10002c04:	687a      	ldr	r2, [r7, #4]
10002c06:	2382      	movs	r3, #130	; 0x82
10002c08:	005b      	lsls	r3, r3, #1
10002c0a:	50d1      	str	r1, [r2, r3]
}
10002c0c:	46bd      	mov	sp, r7
10002c0e:	b002      	add	sp, #8
10002c10:	bd80      	pop	{r7, pc}
10002c12:	46c0      	nop			; (mov r8, r8)

10002c14 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
10002c14:	b580      	push	{r7, lr}
10002c16:	b082      	sub	sp, #8
10002c18:	af00      	add	r7, sp, #0
10002c1a:	6078      	str	r0, [r7, #4]
10002c1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
10002c1e:	6839      	ldr	r1, [r7, #0]
10002c20:	687a      	ldr	r2, [r7, #4]
10002c22:	2388      	movs	r3, #136	; 0x88
10002c24:	005b      	lsls	r3, r3, #1
10002c26:	50d1      	str	r1, [r2, r3]
}
10002c28:	46bd      	mov	sp, r7
10002c2a:	b002      	add	sp, #8
10002c2c:	bd80      	pop	{r7, pc}
10002c2e:	46c0      	nop			; (mov r8, r8)

10002c30 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10002c30:	b580      	push	{r7, lr}
10002c32:	b084      	sub	sp, #16
10002c34:	af00      	add	r7, sp, #0
10002c36:	60f8      	str	r0, [r7, #12]
10002c38:	60b9      	str	r1, [r7, #8]
10002c3a:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10002c3c:	687b      	ldr	r3, [r7, #4]
10002c3e:	6819      	ldr	r1, [r3, #0]
10002c40:	68fb      	ldr	r3, [r7, #12]
10002c42:	68ba      	ldr	r2, [r7, #8]
10002c44:	32a0      	adds	r2, #160	; 0xa0
10002c46:	0092      	lsls	r2, r2, #2
10002c48:	50d1      	str	r1, [r2, r3]

}
10002c4a:	46bd      	mov	sp, r7
10002c4c:	b004      	add	sp, #16
10002c4e:	bd80      	pop	{r7, pc}

10002c50 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10002c50:	b580      	push	{r7, lr}
10002c52:	b084      	sub	sp, #16
10002c54:	af00      	add	r7, sp, #0
10002c56:	60f8      	str	r0, [r7, #12]
10002c58:	607a      	str	r2, [r7, #4]
10002c5a:	230b      	movs	r3, #11
10002c5c:	18fb      	adds	r3, r7, r3
10002c5e:	1c0a      	adds	r2, r1, #0
10002c60:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
10002c62:	230b      	movs	r3, #11
10002c64:	18fb      	adds	r3, r7, r3
10002c66:	781b      	ldrb	r3, [r3, #0]
10002c68:	687a      	ldr	r2, [r7, #4]
10002c6a:	409a      	lsls	r2, r3
10002c6c:	68fb      	ldr	r3, [r7, #12]
10002c6e:	605a      	str	r2, [r3, #4]
}
10002c70:	46bd      	mov	sp, r7
10002c72:	b004      	add	sp, #16
10002c74:	bd80      	pop	{r7, pc}
10002c76:	46c0      	nop			; (mov r8, r8)

10002c78 <PDU_SensorADC_Init>:
 */

#include "pdu_op.h"

void PDU_SensorADC_Init(void)
{
10002c78:	b580      	push	{r7, lr}
10002c7a:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_9,&adc_io);
10002c7c:	4a4c      	ldr	r2, [pc, #304]	; (10002db0 <PDU_SensorADC_Init+0x138>)
10002c7e:	4b4d      	ldr	r3, [pc, #308]	; (10002db4 <PDU_SensorADC_Init+0x13c>)
10002c80:	1c10      	adds	r0, r2, #0
10002c82:	2109      	movs	r1, #9
10002c84:	1c1a      	adds	r2, r3, #0
10002c86:	f001 ffe7 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_3,&adc_io);
10002c8a:	4a49      	ldr	r2, [pc, #292]	; (10002db0 <PDU_SensorADC_Init+0x138>)
10002c8c:	4b49      	ldr	r3, [pc, #292]	; (10002db4 <PDU_SensorADC_Init+0x13c>)
10002c8e:	1c10      	adds	r0, r2, #0
10002c90:	2103      	movs	r1, #3
10002c92:	1c1a      	adds	r2, r3, #0
10002c94:	f001 ffe0 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_4,&adc_io);
10002c98:	4a45      	ldr	r2, [pc, #276]	; (10002db0 <PDU_SensorADC_Init+0x138>)
10002c9a:	4b46      	ldr	r3, [pc, #280]	; (10002db4 <PDU_SensorADC_Init+0x13c>)
10002c9c:	1c10      	adds	r0, r2, #0
10002c9e:	2104      	movs	r1, #4
10002ca0:	1c1a      	adds	r2, r3, #0
10002ca2:	f001 ffd9 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_5,&adc_io);
10002ca6:	4a42      	ldr	r2, [pc, #264]	; (10002db0 <PDU_SensorADC_Init+0x138>)
10002ca8:	4b42      	ldr	r3, [pc, #264]	; (10002db4 <PDU_SensorADC_Init+0x13c>)
10002caa:	1c10      	adds	r0, r2, #0
10002cac:	2105      	movs	r1, #5
10002cae:	1c1a      	adds	r2, r3, #0
10002cb0:	f001 ffd2 	bl	10004c58 <XMC_GPIO_Init>

	XMC_VADC_GLOBAL_Init(VADC, &g_global_handle);
10002cb4:	4a40      	ldr	r2, [pc, #256]	; (10002db8 <PDU_SensorADC_Init+0x140>)
10002cb6:	4b41      	ldr	r3, [pc, #260]	; (10002dbc <PDU_SensorADC_Init+0x144>)
10002cb8:	1c10      	adds	r0, r2, #0
10002cba:	1c19      	adds	r1, r3, #0
10002cbc:	f003 f93c 	bl	10005f38 <XMC_VADC_GLOBAL_Init>
	/* Configure a conversion kernel */
	XMC_VADC_GROUP_Init(VADC_G1, &g_group_handle);
10002cc0:	4a3f      	ldr	r2, [pc, #252]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002cc2:	4b40      	ldr	r3, [pc, #256]	; (10002dc4 <PDU_SensorADC_Init+0x14c>)
10002cc4:	1c10      	adds	r0, r2, #0
10002cc6:	1c19      	adds	r1, r3, #0
10002cc8:	f003 f99c 	bl	10006004 <XMC_VADC_GROUP_Init>

	/* Enable the analog converters */
	XMC_VADC_GROUP_SetPowerMode(VADC_G1, XMC_VADC_GROUP_POWERMODE_NORMAL);
10002ccc:	4b3c      	ldr	r3, [pc, #240]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002cce:	1c18      	adds	r0, r3, #0
10002cd0:	2103      	movs	r1, #3
10002cd2:	f003 fa3f 	bl	10006154 <XMC_VADC_GROUP_SetPowerMode>

	XMC_VADC_GLOBAL_StartupCalibration(VADC);		//XMC1400 EE step will not work with this API here
10002cd6:	4b38      	ldr	r3, [pc, #224]	; (10002db8 <PDU_SensorADC_Init+0x140>)
10002cd8:	1c18      	adds	r0, r3, #0
10002cda:	f003 f959 	bl	10005f90 <XMC_VADC_GLOBAL_StartupCalibration>

	/* Configure the queue request source of the aforesaid conversion kernel */
	XMC_VADC_GROUP_QueueInit(VADC_G1, &g_queue_handle);
10002cde:	4a38      	ldr	r2, [pc, #224]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002ce0:	4b39      	ldr	r3, [pc, #228]	; (10002dc8 <PDU_SensorADC_Init+0x150>)
10002ce2:	1c10      	adds	r0, r2, #0
10002ce4:	1c19      	adds	r1, r3, #0
10002ce6:	f003 fa51 	bl	1000618c <XMC_VADC_GROUP_QueueInit>

	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[0]);	// Queue no.0
10002cea:	4a35      	ldr	r2, [pc, #212]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002cec:	4b37      	ldr	r3, [pc, #220]	; (10002dcc <PDU_SensorADC_Init+0x154>)
10002cee:	681b      	ldr	r3, [r3, #0]
10002cf0:	1c10      	adds	r0, r2, #0
10002cf2:	1c19      	adds	r1, r3, #0
10002cf4:	f7ff ff8e 	bl	10002c14 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[1]);	// Queue no.1
10002cf8:	4a31      	ldr	r2, [pc, #196]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002cfa:	4b34      	ldr	r3, [pc, #208]	; (10002dcc <PDU_SensorADC_Init+0x154>)
10002cfc:	685b      	ldr	r3, [r3, #4]
10002cfe:	1c10      	adds	r0, r2, #0
10002d00:	1c19      	adds	r1, r3, #0
10002d02:	f7ff ff87 	bl	10002c14 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[2]);	// Queue no.2
10002d06:	4a2e      	ldr	r2, [pc, #184]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d08:	4b30      	ldr	r3, [pc, #192]	; (10002dcc <PDU_SensorADC_Init+0x154>)
10002d0a:	689b      	ldr	r3, [r3, #8]
10002d0c:	1c10      	adds	r0, r2, #0
10002d0e:	1c19      	adds	r1, r3, #0
10002d10:	f7ff ff80 	bl	10002c14 <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[3]);	// Queue no.3
10002d14:	4a2a      	ldr	r2, [pc, #168]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d16:	4b2d      	ldr	r3, [pc, #180]	; (10002dcc <PDU_SensorADC_Init+0x154>)
10002d18:	68db      	ldr	r3, [r3, #12]
10002d1a:	1c10      	adds	r0, r2, #0
10002d1c:	1c19      	adds	r1, r3, #0
10002d1e:	f7ff ff79 	bl	10002c14 <XMC_VADC_GROUP_QueueInsertChannel>

	XMC_VADC_GROUP_ChannelInit(VADC_G1,4, &g_channel_handle[0]);	// G1 ch 4 P2_9
10002d22:	4a27      	ldr	r2, [pc, #156]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d24:	4b2a      	ldr	r3, [pc, #168]	; (10002dd0 <PDU_SensorADC_Init+0x158>)
10002d26:	1c10      	adds	r0, r2, #0
10002d28:	2104      	movs	r1, #4
10002d2a:	1c1a      	adds	r2, r3, #0
10002d2c:	f003 fa86 	bl	1000623c <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,5, &g_channel_handle[1]);	// G1 ch 5 P2_3
10002d30:	4a23      	ldr	r2, [pc, #140]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d32:	4b28      	ldr	r3, [pc, #160]	; (10002dd4 <PDU_SensorADC_Init+0x15c>)
10002d34:	1c10      	adds	r0, r2, #0
10002d36:	2105      	movs	r1, #5
10002d38:	1c1a      	adds	r2, r3, #0
10002d3a:	f003 fa7f 	bl	1000623c <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,6, &g_channel_handle[2]);	// G1 ch 6 P2_4
10002d3e:	4a20      	ldr	r2, [pc, #128]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d40:	4b25      	ldr	r3, [pc, #148]	; (10002dd8 <PDU_SensorADC_Init+0x160>)
10002d42:	1c10      	adds	r0, r2, #0
10002d44:	2106      	movs	r1, #6
10002d46:	1c1a      	adds	r2, r3, #0
10002d48:	f003 fa78 	bl	1000623c <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,7, &g_channel_handle[3]);	// G1 ch 7 P2_5
10002d4c:	4a1c      	ldr	r2, [pc, #112]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d4e:	4b23      	ldr	r3, [pc, #140]	; (10002ddc <PDU_SensorADC_Init+0x164>)
10002d50:	1c10      	adds	r0, r2, #0
10002d52:	2107      	movs	r1, #7
10002d54:	1c1a      	adds	r2, r3, #0
10002d56:	f003 fa71 	bl	1000623c <XMC_VADC_GROUP_ChannelInit>

	XMC_VADC_GROUP_ResultInit(VADC_G1, 0, &g_result_handle[0]);
10002d5a:	4a19      	ldr	r2, [pc, #100]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d5c:	4b20      	ldr	r3, [pc, #128]	; (10002de0 <PDU_SensorADC_Init+0x168>)
10002d5e:	1c10      	adds	r0, r2, #0
10002d60:	2100      	movs	r1, #0
10002d62:	1c1a      	adds	r2, r3, #0
10002d64:	f7ff ff64 	bl	10002c30 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 1, &g_result_handle[1]);
10002d68:	4a15      	ldr	r2, [pc, #84]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d6a:	4b1e      	ldr	r3, [pc, #120]	; (10002de4 <PDU_SensorADC_Init+0x16c>)
10002d6c:	1c10      	adds	r0, r2, #0
10002d6e:	2101      	movs	r1, #1
10002d70:	1c1a      	adds	r2, r3, #0
10002d72:	f7ff ff5d 	bl	10002c30 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 2, &g_result_handle[2]);
10002d76:	4a12      	ldr	r2, [pc, #72]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d78:	4b1b      	ldr	r3, [pc, #108]	; (10002de8 <PDU_SensorADC_Init+0x170>)
10002d7a:	1c10      	adds	r0, r2, #0
10002d7c:	2102      	movs	r1, #2
10002d7e:	1c1a      	adds	r2, r3, #0
10002d80:	f7ff ff56 	bl	10002c30 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 3, &g_result_handle[3]);
10002d84:	4a0e      	ldr	r2, [pc, #56]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d86:	4b19      	ldr	r3, [pc, #100]	; (10002dec <PDU_SensorADC_Init+0x174>)
10002d88:	1c10      	adds	r0, r2, #0
10002d8a:	2103      	movs	r1, #3
10002d8c:	1c1a      	adds	r2, r3, #0
10002d8e:	f7ff ff4f 	bl	10002c30 <XMC_VADC_GROUP_ResultInit>
//	XMC_VADC_GROUP_ChannelSetEventInterruptNode(VADC_G1, 7, XMC_VADC_SR_GROUP_SR1); // For Channel 7
//	NVIC_SetPriority(IRQ20_IRQn, IRQ20_IRQn_11);			// Table 4-3 Interrupt Node assignment
//	NVIC_EnableIRQ(IRQ20_IRQn);

	/* Enable event at check g_result_handle[i].event_gen_enable */
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, VADC_RES_MAX-1, XMC_VADC_SR_GROUP_SR0);
10002d92:	4b0b      	ldr	r3, [pc, #44]	; (10002dc0 <PDU_SensorADC_Init+0x148>)
10002d94:	1c18      	adds	r0, r3, #0
10002d96:	2103      	movs	r1, #3
10002d98:	2200      	movs	r2, #0
10002d9a:	f003 fabd 	bl	10006318 <XMC_VADC_GROUP_SetResultInterruptNode>
	NVIC_SetPriority(IRQ19_IRQn, 17U);
10002d9e:	2013      	movs	r0, #19
10002da0:	2111      	movs	r1, #17
10002da2:	f7ff feb9 	bl	10002b18 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ19_IRQn);
10002da6:	2013      	movs	r0, #19
10002da8:	f7ff fe9c 	bl	10002ae4 <__NVIC_EnableIRQ>
}
10002dac:	46bd      	mov	sp, r7
10002dae:	bd80      	pop	{r7, pc}
10002db0:	40040200 	.word	0x40040200
10002db4:	200007a4 	.word	0x200007a4
10002db8:	48030000 	.word	0x48030000
10002dbc:	20000568 	.word	0x20000568
10002dc0:	48030800 	.word	0x48030800
10002dc4:	20000580 	.word	0x20000580
10002dc8:	20000594 	.word	0x20000594
10002dcc:	200005a0 	.word	0x200005a0
10002dd0:	200005b0 	.word	0x200005b0
10002dd4:	200005c0 	.word	0x200005c0
10002dd8:	200005d0 	.word	0x200005d0
10002ddc:	200005e0 	.word	0x200005e0
10002de0:	200005f0 	.word	0x200005f0
10002de4:	200005f4 	.word	0x200005f4
10002de8:	200005f8 	.word	0x200005f8
10002dec:	200005fc 	.word	0x200005fc

10002df0 <PDU_Relay_Init>:

void PDU_Relay_Init(void)
{
10002df0:	b580      	push	{r7, lr}
10002df2:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P1_4, &relay_KBAT);
10002df4:	4a0e      	ldr	r2, [pc, #56]	; (10002e30 <PDU_Relay_Init+0x40>)
10002df6:	4b0f      	ldr	r3, [pc, #60]	; (10002e34 <PDU_Relay_Init+0x44>)
10002df8:	1c10      	adds	r0, r2, #0
10002dfa:	2104      	movs	r1, #4
10002dfc:	1c1a      	adds	r2, r3, #0
10002dfe:	f001 ff2b 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_5, &relay_KMP);
10002e02:	4a0b      	ldr	r2, [pc, #44]	; (10002e30 <PDU_Relay_Init+0x40>)
10002e04:	4b0c      	ldr	r3, [pc, #48]	; (10002e38 <PDU_Relay_Init+0x48>)
10002e06:	1c10      	adds	r0, r2, #0
10002e08:	2105      	movs	r1, #5
10002e0a:	1c1a      	adds	r2, r3, #0
10002e0c:	f001 ff24 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_6, &relay_KMF);
10002e10:	4a07      	ldr	r2, [pc, #28]	; (10002e30 <PDU_Relay_Init+0x40>)
10002e12:	4b0a      	ldr	r3, [pc, #40]	; (10002e3c <PDU_Relay_Init+0x4c>)
10002e14:	1c10      	adds	r0, r2, #0
10002e16:	2106      	movs	r1, #6
10002e18:	1c1a      	adds	r2, r3, #0
10002e1a:	f001 ff1d 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
10002e1e:	4a04      	ldr	r2, [pc, #16]	; (10002e30 <PDU_Relay_Init+0x40>)
10002e20:	4b07      	ldr	r3, [pc, #28]	; (10002e40 <PDU_Relay_Init+0x50>)
10002e22:	1c10      	adds	r0, r2, #0
10002e24:	2107      	movs	r1, #7
10002e26:	1c1a      	adds	r2, r3, #0
10002e28:	f001 ff16 	bl	10004c58 <XMC_GPIO_Init>
}
10002e2c:	46bd      	mov	sp, r7
10002e2e:	bd80      	pop	{r7, pc}
10002e30:	40040100 	.word	0x40040100
10002e34:	20000618 	.word	0x20000618
10002e38:	20000600 	.word	0x20000600
10002e3c:	20000608 	.word	0x20000608
10002e40:	20000610 	.word	0x20000610

10002e44 <PDU_Switch_Relay>:

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
10002e44:	b580      	push	{r7, lr}
10002e46:	b082      	sub	sp, #8
10002e48:	af00      	add	r7, sp, #0
10002e4a:	1c02      	adds	r2, r0, #0
10002e4c:	1dfb      	adds	r3, r7, #7
10002e4e:	701a      	strb	r2, [r3, #0]
10002e50:	1dbb      	adds	r3, r7, #6
10002e52:	1c0a      	adds	r2, r1, #0
10002e54:	701a      	strb	r2, [r3, #0]
	switch(relay_name)
10002e56:	1dfb      	adds	r3, r7, #7
10002e58:	781b      	ldrb	r3, [r3, #0]
10002e5a:	2b01      	cmp	r3, #1
10002e5c:	d01c      	beq.n	10002e98 <PDU_Switch_Relay+0x54>
10002e5e:	dc02      	bgt.n	10002e66 <PDU_Switch_Relay+0x22>
10002e60:	2b00      	cmp	r3, #0
10002e62:	d005      	beq.n	10002e70 <PDU_Switch_Relay+0x2c>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10002e64:	e054      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
}

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
10002e66:	2b02      	cmp	r3, #2
10002e68:	d02a      	beq.n	10002ec0 <PDU_Switch_Relay+0x7c>
10002e6a:	2b03      	cmp	r3, #3
10002e6c:	d03c      	beq.n	10002ee8 <PDU_Switch_Relay+0xa4>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10002e6e:	e04f      	b.n	10002f10 <PDU_Switch_Relay+0xcc>

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002e70:	1dbb      	adds	r3, r7, #6
10002e72:	781b      	ldrb	r3, [r3, #0]
10002e74:	2b00      	cmp	r3, #0
10002e76:	d006      	beq.n	10002e86 <PDU_Switch_Relay+0x42>
10002e78:	4b27      	ldr	r3, [pc, #156]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002e7a:	1c18      	adds	r0, r3, #0
10002e7c:	2104      	movs	r1, #4
10002e7e:	2201      	movs	r2, #1
10002e80:	f7ff fee6 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
10002e84:	e044      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002e86:	4a24      	ldr	r2, [pc, #144]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002e88:	2380      	movs	r3, #128	; 0x80
10002e8a:	025b      	lsls	r3, r3, #9
10002e8c:	1c10      	adds	r0, r2, #0
10002e8e:	2104      	movs	r1, #4
10002e90:	1c1a      	adds	r2, r3, #0
10002e92:	f7ff fedd 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
						  	  break;
10002e96:	e03b      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002e98:	1dbb      	adds	r3, r7, #6
10002e9a:	781b      	ldrb	r3, [r3, #0]
10002e9c:	2b00      	cmp	r3, #0
10002e9e:	d006      	beq.n	10002eae <PDU_Switch_Relay+0x6a>
10002ea0:	4b1d      	ldr	r3, [pc, #116]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002ea2:	1c18      	adds	r0, r3, #0
10002ea4:	2105      	movs	r1, #5
10002ea6:	2201      	movs	r2, #1
10002ea8:	f7ff fed2 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002eac:	e030      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002eae:	4a1a      	ldr	r2, [pc, #104]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002eb0:	2380      	movs	r3, #128	; 0x80
10002eb2:	025b      	lsls	r3, r3, #9
10002eb4:	1c10      	adds	r0, r2, #0
10002eb6:	2105      	movs	r1, #5
10002eb8:	1c1a      	adds	r2, r3, #0
10002eba:	f7ff fec9 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
							  break;
10002ebe:	e027      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002ec0:	1dbb      	adds	r3, r7, #6
10002ec2:	781b      	ldrb	r3, [r3, #0]
10002ec4:	2b00      	cmp	r3, #0
10002ec6:	d006      	beq.n	10002ed6 <PDU_Switch_Relay+0x92>
10002ec8:	4b13      	ldr	r3, [pc, #76]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002eca:	1c18      	adds	r0, r3, #0
10002ecc:	2106      	movs	r1, #6
10002ece:	2201      	movs	r2, #1
10002ed0:	f7ff febe 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002ed4:	e01c      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002ed6:	4a10      	ldr	r2, [pc, #64]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002ed8:	2380      	movs	r3, #128	; 0x80
10002eda:	025b      	lsls	r3, r3, #9
10002edc:	1c10      	adds	r0, r2, #0
10002ede:	2106      	movs	r1, #6
10002ee0:	1c1a      	adds	r2, r3, #0
10002ee2:	f7ff feb5 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
							  break;
10002ee6:	e013      	b.n	10002f10 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002ee8:	1dbb      	adds	r3, r7, #6
10002eea:	781b      	ldrb	r3, [r3, #0]
10002eec:	2b00      	cmp	r3, #0
10002eee:	d006      	beq.n	10002efe <PDU_Switch_Relay+0xba>
10002ef0:	4b09      	ldr	r3, [pc, #36]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002ef2:	1c18      	adds	r0, r3, #0
10002ef4:	2107      	movs	r1, #7
10002ef6:	2201      	movs	r2, #1
10002ef8:	f7ff feaa 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002efc:	e007      	b.n	10002f0e <PDU_Switch_Relay+0xca>
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002efe:	4a06      	ldr	r2, [pc, #24]	; (10002f18 <PDU_Switch_Relay+0xd4>)
10002f00:	2380      	movs	r3, #128	; 0x80
10002f02:	025b      	lsls	r3, r3, #9
10002f04:	1c10      	adds	r0, r2, #0
10002f06:	2107      	movs	r1, #7
10002f08:	1c1a      	adds	r2, r3, #0
10002f0a:	f7ff fea1 	bl	10002c50 <XMC_GPIO_SetOutputLevel>
							  break;
10002f0e:	46c0      	nop			; (mov r8, r8)
		default				: break;
	}
}
10002f10:	46bd      	mov	sp, r7
10002f12:	b002      	add	sp, #8
10002f14:	bd80      	pop	{r7, pc}
10002f16:	46c0      	nop			; (mov r8, r8)
10002f18:	40040100 	.word	0x40040100

10002f1c <PDU_ADC_Start>:

void PDU_ADC_Start(void)
{
10002f1c:	b580      	push	{r7, lr}
10002f1e:	af00      	add	r7, sp, #0
	XMC_VADC_GROUP_QueueTriggerConversion(VADC_G1);
10002f20:	4b02      	ldr	r3, [pc, #8]	; (10002f2c <PDU_ADC_Start+0x10>)
10002f22:	1c18      	adds	r0, r3, #0
10002f24:	f7ff fe62 	bl	10002bec <XMC_VADC_GROUP_QueueTriggerConversion>
}
10002f28:	46bd      	mov	sp, r7
10002f2a:	bd80      	pop	{r7, pc}
10002f2c:	48030800 	.word	0x48030800

10002f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002f30:	b580      	push	{r7, lr}
10002f32:	b082      	sub	sp, #8
10002f34:	af00      	add	r7, sp, #0
10002f36:	1c02      	adds	r2, r0, #0
10002f38:	1dfb      	adds	r3, r7, #7
10002f3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f3c:	1dfb      	adds	r3, r7, #7
10002f3e:	781b      	ldrb	r3, [r3, #0]
10002f40:	2b7f      	cmp	r3, #127	; 0x7f
10002f42:	d809      	bhi.n	10002f58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002f44:	4b06      	ldr	r3, [pc, #24]	; (10002f60 <__NVIC_EnableIRQ+0x30>)
10002f46:	1dfa      	adds	r2, r7, #7
10002f48:	7812      	ldrb	r2, [r2, #0]
10002f4a:	1c11      	adds	r1, r2, #0
10002f4c:	221f      	movs	r2, #31
10002f4e:	400a      	ands	r2, r1
10002f50:	2101      	movs	r1, #1
10002f52:	4091      	lsls	r1, r2
10002f54:	1c0a      	adds	r2, r1, #0
10002f56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002f58:	46bd      	mov	sp, r7
10002f5a:	b002      	add	sp, #8
10002f5c:	bd80      	pop	{r7, pc}
10002f5e:	46c0      	nop			; (mov r8, r8)
10002f60:	e000e100 	.word	0xe000e100

10002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002f64:	b5b0      	push	{r4, r5, r7, lr}
10002f66:	b082      	sub	sp, #8
10002f68:	af00      	add	r7, sp, #0
10002f6a:	1c02      	adds	r2, r0, #0
10002f6c:	6039      	str	r1, [r7, #0]
10002f6e:	1dfb      	adds	r3, r7, #7
10002f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002f72:	1dfb      	adds	r3, r7, #7
10002f74:	781b      	ldrb	r3, [r3, #0]
10002f76:	2b7f      	cmp	r3, #127	; 0x7f
10002f78:	d827      	bhi.n	10002fca <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002f7a:	4c2d      	ldr	r4, [pc, #180]	; (10003030 <__NVIC_SetPriority+0xcc>)
10002f7c:	1dfb      	adds	r3, r7, #7
10002f7e:	781b      	ldrb	r3, [r3, #0]
10002f80:	b25b      	sxtb	r3, r3
10002f82:	089b      	lsrs	r3, r3, #2
10002f84:	492a      	ldr	r1, [pc, #168]	; (10003030 <__NVIC_SetPriority+0xcc>)
10002f86:	1dfa      	adds	r2, r7, #7
10002f88:	7812      	ldrb	r2, [r2, #0]
10002f8a:	b252      	sxtb	r2, r2
10002f8c:	0892      	lsrs	r2, r2, #2
10002f8e:	32c0      	adds	r2, #192	; 0xc0
10002f90:	0092      	lsls	r2, r2, #2
10002f92:	5852      	ldr	r2, [r2, r1]
10002f94:	1df9      	adds	r1, r7, #7
10002f96:	7809      	ldrb	r1, [r1, #0]
10002f98:	1c08      	adds	r0, r1, #0
10002f9a:	2103      	movs	r1, #3
10002f9c:	4001      	ands	r1, r0
10002f9e:	00c9      	lsls	r1, r1, #3
10002fa0:	1c08      	adds	r0, r1, #0
10002fa2:	21ff      	movs	r1, #255	; 0xff
10002fa4:	4081      	lsls	r1, r0
10002fa6:	43c9      	mvns	r1, r1
10002fa8:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002faa:	683a      	ldr	r2, [r7, #0]
10002fac:	0192      	lsls	r2, r2, #6
10002fae:	20ff      	movs	r0, #255	; 0xff
10002fb0:	4002      	ands	r2, r0
10002fb2:	1df8      	adds	r0, r7, #7
10002fb4:	7800      	ldrb	r0, [r0, #0]
10002fb6:	1c05      	adds	r5, r0, #0
10002fb8:	2003      	movs	r0, #3
10002fba:	4028      	ands	r0, r5
10002fbc:	00c0      	lsls	r0, r0, #3
10002fbe:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fc0:	430a      	orrs	r2, r1
10002fc2:	33c0      	adds	r3, #192	; 0xc0
10002fc4:	009b      	lsls	r3, r3, #2
10002fc6:	511a      	str	r2, [r3, r4]
10002fc8:	e02e      	b.n	10003028 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002fca:	4c1a      	ldr	r4, [pc, #104]	; (10003034 <__NVIC_SetPriority+0xd0>)
10002fcc:	1dfb      	adds	r3, r7, #7
10002fce:	781b      	ldrb	r3, [r3, #0]
10002fd0:	1c1a      	adds	r2, r3, #0
10002fd2:	230f      	movs	r3, #15
10002fd4:	4013      	ands	r3, r2
10002fd6:	3b08      	subs	r3, #8
10002fd8:	0899      	lsrs	r1, r3, #2
10002fda:	4a16      	ldr	r2, [pc, #88]	; (10003034 <__NVIC_SetPriority+0xd0>)
10002fdc:	1dfb      	adds	r3, r7, #7
10002fde:	781b      	ldrb	r3, [r3, #0]
10002fe0:	1c18      	adds	r0, r3, #0
10002fe2:	230f      	movs	r3, #15
10002fe4:	4003      	ands	r3, r0
10002fe6:	3b08      	subs	r3, #8
10002fe8:	089b      	lsrs	r3, r3, #2
10002fea:	3306      	adds	r3, #6
10002fec:	009b      	lsls	r3, r3, #2
10002fee:	18d3      	adds	r3, r2, r3
10002ff0:	685b      	ldr	r3, [r3, #4]
10002ff2:	1dfa      	adds	r2, r7, #7
10002ff4:	7812      	ldrb	r2, [r2, #0]
10002ff6:	1c10      	adds	r0, r2, #0
10002ff8:	2203      	movs	r2, #3
10002ffa:	4002      	ands	r2, r0
10002ffc:	00d2      	lsls	r2, r2, #3
10002ffe:	1c10      	adds	r0, r2, #0
10003000:	22ff      	movs	r2, #255	; 0xff
10003002:	4082      	lsls	r2, r0
10003004:	43d2      	mvns	r2, r2
10003006:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003008:	683b      	ldr	r3, [r7, #0]
1000300a:	019b      	lsls	r3, r3, #6
1000300c:	20ff      	movs	r0, #255	; 0xff
1000300e:	4003      	ands	r3, r0
10003010:	1df8      	adds	r0, r7, #7
10003012:	7800      	ldrb	r0, [r0, #0]
10003014:	1c05      	adds	r5, r0, #0
10003016:	2003      	movs	r0, #3
10003018:	4028      	ands	r0, r5
1000301a:	00c0      	lsls	r0, r0, #3
1000301c:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000301e:	431a      	orrs	r2, r3
10003020:	1d8b      	adds	r3, r1, #6
10003022:	009b      	lsls	r3, r3, #2
10003024:	18e3      	adds	r3, r4, r3
10003026:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003028:	46bd      	mov	sp, r7
1000302a:	b002      	add	sp, #8
1000302c:	bdb0      	pop	{r4, r5, r7, pc}
1000302e:	46c0      	nop			; (mov r8, r8)
10003030:	e000e100 	.word	0xe000e100
10003034:	e000ed00 	.word	0xe000ed00

10003038 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
10003038:	b580      	push	{r7, lr}
1000303a:	b082      	sub	sp, #8
1000303c:	af00      	add	r7, sp, #0
1000303e:	6078      	str	r0, [r7, #4]
10003040:	1c0a      	adds	r2, r1, #0
10003042:	1cfb      	adds	r3, r7, #3
10003044:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003046:	687b      	ldr	r3, [r7, #4]
10003048:	68db      	ldr	r3, [r3, #12]
1000304a:	2207      	movs	r2, #7
1000304c:	4393      	bics	r3, r2
1000304e:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
10003050:	1cfb      	adds	r3, r7, #3
10003052:	781b      	ldrb	r3, [r3, #0]
10003054:	2107      	movs	r1, #7
10003056:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
10003058:	431a      	orrs	r2, r3
1000305a:	687b      	ldr	r3, [r7, #4]
1000305c:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
1000305e:	46bd      	mov	sp, r7
10003060:	b002      	add	sp, #8
10003062:	bd80      	pop	{r7, pc}

10003064 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003064:	b580      	push	{r7, lr}
10003066:	b082      	sub	sp, #8
10003068:	af00      	add	r7, sp, #0
1000306a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
1000306c:	687b      	ldr	r3, [r7, #4]
1000306e:	681b      	ldr	r3, [r3, #0]
10003070:	2240      	movs	r2, #64	; 0x40
10003072:	431a      	orrs	r2, r3
10003074:	687b      	ldr	r3, [r7, #4]
10003076:	601a      	str	r2, [r3, #0]
}
10003078:	46bd      	mov	sp, r7
1000307a:	b002      	add	sp, #8
1000307c:	bd80      	pop	{r7, pc}
1000307e:	46c0      	nop			; (mov r8, r8)

10003080 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10003080:	b580      	push	{r7, lr}
10003082:	b082      	sub	sp, #8
10003084:	af00      	add	r7, sp, #0
10003086:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10003088:	687b      	ldr	r3, [r7, #4]
1000308a:	681b      	ldr	r3, [r3, #0]
1000308c:	2240      	movs	r2, #64	; 0x40
1000308e:	4393      	bics	r3, r2
10003090:	1c1a      	adds	r2, r3, #0
10003092:	687b      	ldr	r3, [r7, #4]
10003094:	601a      	str	r2, [r3, #0]
}
10003096:	46bd      	mov	sp, r7
10003098:	b002      	add	sp, #8
1000309a:	bd80      	pop	{r7, pc}

1000309c <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
1000309c:	b580      	push	{r7, lr}
1000309e:	b082      	sub	sp, #8
100030a0:	af00      	add	r7, sp, #0
100030a2:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
100030a4:	687b      	ldr	r3, [r7, #4]
100030a6:	681b      	ldr	r3, [r3, #0]
100030a8:	2201      	movs	r2, #1
100030aa:	4393      	bics	r3, r2
100030ac:	1c1a      	adds	r2, r3, #0
100030ae:	687b      	ldr	r3, [r7, #4]
100030b0:	601a      	str	r2, [r3, #0]
}
100030b2:	46bd      	mov	sp, r7
100030b4:	b002      	add	sp, #8
100030b6:	bd80      	pop	{r7, pc}

100030b8 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
100030b8:	b580      	push	{r7, lr}
100030ba:	b084      	sub	sp, #16
100030bc:	af00      	add	r7, sp, #0
100030be:	60f8      	str	r0, [r7, #12]
100030c0:	607a      	str	r2, [r7, #4]
100030c2:	230b      	movs	r3, #11
100030c4:	18fb      	adds	r3, r7, r3
100030c6:	1c0a      	adds	r2, r1, #0
100030c8:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
100030ca:	68fb      	ldr	r3, [r7, #12]
100030cc:	681b      	ldr	r3, [r3, #0]
100030ce:	68fa      	ldr	r2, [r7, #12]
100030d0:	6812      	ldr	r2, [r2, #0]
100030d2:	6892      	ldr	r2, [r2, #8]
100030d4:	210b      	movs	r1, #11
100030d6:	1879      	adds	r1, r7, r1
100030d8:	7809      	ldrb	r1, [r1, #0]
100030da:	2007      	movs	r0, #7
100030dc:	4088      	lsls	r0, r1
100030de:	1c01      	adds	r1, r0, #0
100030e0:	43c9      	mvns	r1, r1
100030e2:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
100030e4:	220b      	movs	r2, #11
100030e6:	18ba      	adds	r2, r7, r2
100030e8:	7812      	ldrb	r2, [r2, #0]
100030ea:	6878      	ldr	r0, [r7, #4]
100030ec:	4090      	lsls	r0, r2
100030ee:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
100030f0:	430a      	orrs	r2, r1
100030f2:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
100030f4:	46bd      	mov	sp, r7
100030f6:	b004      	add	sp, #16
100030f8:	bd80      	pop	{r7, pc}
100030fa:	46c0      	nop			; (mov r8, r8)

100030fc <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
100030fc:	b580      	push	{r7, lr}
100030fe:	b082      	sub	sp, #8
10003100:	af00      	add	r7, sp, #0
10003102:	6078      	str	r0, [r7, #4]
10003104:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
10003106:	687b      	ldr	r3, [r7, #4]
10003108:	681b      	ldr	r3, [r3, #0]
1000310a:	687a      	ldr	r2, [r7, #4]
1000310c:	6812      	ldr	r2, [r2, #0]
1000310e:	6811      	ldr	r1, [r2, #0]
10003110:	683a      	ldr	r2, [r7, #0]
10003112:	430a      	orrs	r2, r1
10003114:	601a      	str	r2, [r3, #0]
}
10003116:	46bd      	mov	sp, r7
10003118:	b002      	add	sp, #8
1000311a:	bd80      	pop	{r7, pc}

1000311c <PCS_ConnectionInit>:
 */

#include "pcs_op.h"

void PCS_ConnectionInit(void)
{
1000311c:	b580      	push	{r7, lr}
1000311e:	af00      	add	r7, sp, #0
	/* Configure CAN Module */
	XMC_GPIO_Init(CAN0_TXD, &CAN0_txd_config);
10003120:	4a31      	ldr	r2, [pc, #196]	; (100031e8 <PCS_ConnectionInit+0xcc>)
10003122:	4b32      	ldr	r3, [pc, #200]	; (100031ec <PCS_ConnectionInit+0xd0>)
10003124:	1c10      	adds	r0, r2, #0
10003126:	2105      	movs	r1, #5
10003128:	1c1a      	adds	r2, r3, #0
1000312a:	f001 fd95 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(CAN0_RXD, &CAN0_rxd_config);
1000312e:	4a2e      	ldr	r2, [pc, #184]	; (100031e8 <PCS_ConnectionInit+0xcc>)
10003130:	4b2f      	ldr	r3, [pc, #188]	; (100031f0 <PCS_ConnectionInit+0xd4>)
10003132:	1c10      	adds	r0, r2, #0
10003134:	2104      	movs	r1, #4
10003136:	1c1a      	adds	r2, r3, #0
10003138:	f001 fd8e 	bl	10004c58 <XMC_GPIO_Init>

	XMC_CAN_Init(CAN, XMC_CAN_CANCLKSRC_MCLK, 11000000);
1000313c:	4a2d      	ldr	r2, [pc, #180]	; (100031f4 <PCS_ConnectionInit+0xd8>)
1000313e:	4b2e      	ldr	r3, [pc, #184]	; (100031f8 <PCS_ConnectionInit+0xdc>)
10003140:	1c10      	adds	r0, r2, #0
10003142:	2101      	movs	r1, #1
10003144:	1c1a      	adds	r2, r3, #0
10003146:	f002 f877 	bl	10005238 <XMC_CAN_Init>

	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
1000314a:	4b2c      	ldr	r3, [pc, #176]	; (100031fc <PCS_ConnectionInit+0xe0>)
1000314c:	1c18      	adds	r0, r3, #0
1000314e:	f7ff ff89 	bl	10003064 <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_SetReceiveInput(CAN_NODE0, XMC_CAN_NODE_RECEIVE_INPUT_RXDCA);
10003152:	4b2a      	ldr	r3, [pc, #168]	; (100031fc <PCS_ConnectionInit+0xe0>)
10003154:	1c18      	adds	r0, r3, #0
10003156:	2100      	movs	r1, #0
10003158:	f7ff ff6e 	bl	10003038 <XMC_CAN_NODE_SetReceiveInput>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
1000315c:	4b27      	ldr	r3, [pc, #156]	; (100031fc <PCS_ConnectionInit+0xe0>)
1000315e:	1c18      	adds	r0, r3, #0
10003160:	f7ff ff8e 	bl	10003080 <XMC_CAN_NODE_DisableConfigurationChange>

	/* NODE 1 Initialization */
	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
10003164:	4b25      	ldr	r3, [pc, #148]	; (100031fc <PCS_ConnectionInit+0xe0>)
10003166:	1c18      	adds	r0, r3, #0
10003168:	f7ff ff7c 	bl	10003064 <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_NominalBitTimeConfigure(CAN_NODE0,&can_baud);
1000316c:	4a23      	ldr	r2, [pc, #140]	; (100031fc <PCS_ConnectionInit+0xe0>)
1000316e:	4b24      	ldr	r3, [pc, #144]	; (10003200 <PCS_ConnectionInit+0xe4>)
10003170:	1c10      	adds	r0, r2, #0
10003172:	1c19      	adds	r1, r3, #0
10003174:	f001 ff34 	bl	10004fe0 <XMC_CAN_NODE_NominalBitTimeConfigure>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
10003178:	4b20      	ldr	r3, [pc, #128]	; (100031fc <PCS_ConnectionInit+0xe0>)
1000317a:	1c18      	adds	r0, r3, #0
1000317c:	f7ff ff80 	bl	10003080 <XMC_CAN_NODE_DisableConfigurationChange>

	XMC_CAN_MO_Config(&msgObjToPCS);
10003180:	4b20      	ldr	r3, [pc, #128]	; (10003204 <PCS_ConnectionInit+0xe8>)
10003182:	1c18      	adds	r0, r3, #0
10003184:	f002 f932 	bl	100053ec <XMC_CAN_MO_Config>
	XMC_CAN_MO_Config(&msgObjFromPCS);
10003188:	4b1f      	ldr	r3, [pc, #124]	; (10003208 <PCS_ConnectionInit+0xec>)
1000318a:	1c18      	adds	r0, r3, #0
1000318c:	f002 f92e 	bl	100053ec <XMC_CAN_MO_Config>

	/* Enable receive event */
	XMC_CAN_MO_EnableEvent(&msgObjFromPCS, XMC_CAN_MO_EVENT_RECEIVE);
10003190:	4a1d      	ldr	r2, [pc, #116]	; (10003208 <PCS_ConnectionInit+0xec>)
10003192:	2380      	movs	r3, #128	; 0x80
10003194:	025b      	lsls	r3, r3, #9
10003196:	1c10      	adds	r0, r2, #0
10003198:	1c19      	adds	r1, r3, #0
1000319a:	f7ff ffaf 	bl	100030fc <XMC_CAN_MO_EnableEvent>

	/* Set receive interrupt Service request number */
	XMC_SCU_SetInterruptControl(7, XMC_SCU_IRQCTRL_CAN0_SR3_IRQ7);
1000319e:	4b1b      	ldr	r3, [pc, #108]	; (1000320c <PCS_ConnectionInit+0xf0>)
100031a0:	2007      	movs	r0, #7
100031a2:	1c19      	adds	r1, r3, #0
100031a4:	f001 fe66 	bl	10004e74 <XMC_SCU_SetInterruptControl>
	XMC_CAN_MO_SetEventNodePointer(&msgObjFromPCS, XMC_CAN_MO_POINTER_EVENT_RECEIVE, 3);
100031a8:	4b17      	ldr	r3, [pc, #92]	; (10003208 <PCS_ConnectionInit+0xec>)
100031aa:	1c18      	adds	r0, r3, #0
100031ac:	2100      	movs	r1, #0
100031ae:	2203      	movs	r2, #3
100031b0:	f7ff ff82 	bl	100030b8 <XMC_CAN_MO_SetEventNodePointer>
	NVIC_SetPriority(IRQ7_IRQn, 1);
100031b4:	2007      	movs	r0, #7
100031b6:	2101      	movs	r1, #1
100031b8:	f7ff fed4 	bl	10002f64 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ7_IRQn);
100031bc:	2007      	movs	r0, #7
100031be:	f7ff feb7 	bl	10002f30 <__NVIC_EnableIRQ>

	XMC_CAN_AllocateMOtoNodeList(CAN,0,4);
100031c2:	4b0c      	ldr	r3, [pc, #48]	; (100031f4 <PCS_ConnectionInit+0xd8>)
100031c4:	1c18      	adds	r0, r3, #0
100031c6:	2100      	movs	r1, #0
100031c8:	2204      	movs	r2, #4
100031ca:	f001 fff3 	bl	100051b4 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_AllocateMOtoNodeList(CAN,0,2);
100031ce:	4b09      	ldr	r3, [pc, #36]	; (100031f4 <PCS_ConnectionInit+0xd8>)
100031d0:	1c18      	adds	r0, r3, #0
100031d2:	2100      	movs	r1, #0
100031d4:	2202      	movs	r2, #2
100031d6:	f001 ffed 	bl	100051b4 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_NODE_ResetInitBit(CAN_NODE0);
100031da:	4b08      	ldr	r3, [pc, #32]	; (100031fc <PCS_ConnectionInit+0xe0>)
100031dc:	1c18      	adds	r0, r3, #0
100031de:	f7ff ff5d 	bl	1000309c <XMC_CAN_NODE_ResetInitBit>
}
100031e2:	46bd      	mov	sp, r7
100031e4:	bd80      	pop	{r7, pc}
100031e6:	46c0      	nop			; (mov r8, r8)
100031e8:	40040000 	.word	0x40040000
100031ec:	20000620 	.word	0x20000620
100031f0:	200007ac 	.word	0x200007ac
100031f4:	50040000 	.word	0x50040000
100031f8:	00a7d8c0 	.word	0x00a7d8c0
100031fc:	50040200 	.word	0x50040200
10003200:	20000628 	.word	0x20000628
10003204:	20000638 	.word	0x20000638
10003208:	20000658 	.word	0x20000658
1000320c:	00000701 	.word	0x00000701

10003210 <PCS_BMUTransmitToPCS>:

void PCS_BMUTransmitToPCS(uint32_t id, PCS_BMC_STATUS_t *bmuStatus, BMC_PARAMETER_t *bmuParam)
{
10003210:	b580      	push	{r7, lr}
10003212:	b084      	sub	sp, #16
10003214:	af00      	add	r7, sp, #0
10003216:	60f8      	str	r0, [r7, #12]
10003218:	60b9      	str	r1, [r7, #8]
1000321a:	607a      	str	r2, [r7, #4]
	switch(id)
1000321c:	68fb      	ldr	r3, [r7, #12]
1000321e:	2280      	movs	r2, #128	; 0x80
10003220:	0052      	lsls	r2, r2, #1
10003222:	4293      	cmp	r3, r2
10003224:	d004      	beq.n	10003230 <PCS_BMUTransmitToPCS+0x20>
10003226:	2202      	movs	r2, #2
10003228:	32ff      	adds	r2, #255	; 0xff
1000322a:	4293      	cmp	r3, r2
1000322c:	d037      	beq.n	1000329e <PCS_BMUTransmitToPCS+0x8e>
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
			break;
		default		:
			break;
1000322e:	e072      	b.n	10003316 <PCS_BMUTransmitToPCS+0x106>
void PCS_BMUTransmitToPCS(uint32_t id, PCS_BMC_STATUS_t *bmuStatus, BMC_PARAMETER_t *bmuParam)
{
	switch(id)
	{
		case (0x100)	:
			msgObjToPCS.can_identifier 	 = id;
10003230:	68fb      	ldr	r3, [r7, #12]
10003232:	00db      	lsls	r3, r3, #3
10003234:	08da      	lsrs	r2, r3, #3
10003236:	4b3d      	ldr	r3, [pc, #244]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003238:	00d2      	lsls	r2, r2, #3
1000323a:	08d2      	lsrs	r2, r2, #3
1000323c:	6859      	ldr	r1, [r3, #4]
1000323e:	0f49      	lsrs	r1, r1, #29
10003240:	0749      	lsls	r1, r1, #29
10003242:	430a      	orrs	r2, r1
10003244:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = 0x00;
10003246:	4b39      	ldr	r3, [pc, #228]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003248:	2200      	movs	r2, #0
1000324a:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = bmuStatus->bmc_status;
1000324c:	68bb      	ldr	r3, [r7, #8]
1000324e:	781a      	ldrb	r2, [r3, #0]
10003250:	4b36      	ldr	r3, [pc, #216]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003252:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = 0x00;
10003254:	4b35      	ldr	r3, [pc, #212]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003256:	2200      	movs	r2, #0
10003258:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = bmuStatus->bmc_pcs_command;
1000325a:	68bb      	ldr	r3, [r7, #8]
1000325c:	785a      	ldrb	r2, [r3, #1]
1000325e:	4b33      	ldr	r3, [pc, #204]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003260:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = 0x00;
10003262:	4b32      	ldr	r3, [pc, #200]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003264:	2200      	movs	r2, #0
10003266:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = 0x00;
10003268:	4b30      	ldr	r3, [pc, #192]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
1000326a:	2200      	movs	r2, #0
1000326c:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[5]|= (bmuStatus->bmc_precharge_relay<<1) | bmuStatus->bmc_main_relay;
1000326e:	4b2f      	ldr	r3, [pc, #188]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003270:	7d5b      	ldrb	r3, [r3, #21]
10003272:	b2da      	uxtb	r2, r3
10003274:	68bb      	ldr	r3, [r7, #8]
10003276:	78db      	ldrb	r3, [r3, #3]
10003278:	005b      	lsls	r3, r3, #1
1000327a:	b2d9      	uxtb	r1, r3
1000327c:	68bb      	ldr	r3, [r7, #8]
1000327e:	789b      	ldrb	r3, [r3, #2]
10003280:	b2db      	uxtb	r3, r3
10003282:	430b      	orrs	r3, r1
10003284:	b2db      	uxtb	r3, r3
10003286:	4313      	orrs	r3, r2
10003288:	b2db      	uxtb	r3, r3
1000328a:	b2da      	uxtb	r2, r3
1000328c:	4b27      	ldr	r3, [pc, #156]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
1000328e:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = 0x00;
10003290:	4b26      	ldr	r3, [pc, #152]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003292:	2200      	movs	r2, #0
10003294:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = 0x00;
10003296:	4b25      	ldr	r3, [pc, #148]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003298:	2200      	movs	r2, #0
1000329a:	75da      	strb	r2, [r3, #23]
			break;
1000329c:	e03b      	b.n	10003316 <PCS_BMUTransmitToPCS+0x106>
		case (0x101)	:
			msgObjToPCS.can_identifier 	 = id;
1000329e:	68fb      	ldr	r3, [r7, #12]
100032a0:	00db      	lsls	r3, r3, #3
100032a2:	08da      	lsrs	r2, r3, #3
100032a4:	4b21      	ldr	r3, [pc, #132]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032a6:	00d2      	lsls	r2, r2, #3
100032a8:	08d2      	lsrs	r2, r2, #3
100032aa:	6859      	ldr	r1, [r3, #4]
100032ac:	0f49      	lsrs	r1, r1, #29
100032ae:	0749      	lsls	r1, r1, #29
100032b0:	430a      	orrs	r2, r1
100032b2:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmuParam->soc>>8);
100032b4:	687b      	ldr	r3, [r7, #4]
100032b6:	881b      	ldrh	r3, [r3, #0]
100032b8:	0a1b      	lsrs	r3, r3, #8
100032ba:	b29b      	uxth	r3, r3
100032bc:	b2da      	uxtb	r2, r3
100032be:	4b1b      	ldr	r3, [pc, #108]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032c0:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmuParam->soc);
100032c2:	687b      	ldr	r3, [r7, #4]
100032c4:	881b      	ldrh	r3, [r3, #0]
100032c6:	b2da      	uxtb	r2, r3
100032c8:	4b18      	ldr	r3, [pc, #96]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032ca:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmuParam->vbat>>8);
100032cc:	687b      	ldr	r3, [r7, #4]
100032ce:	885b      	ldrh	r3, [r3, #2]
100032d0:	0a1b      	lsrs	r3, r3, #8
100032d2:	b29b      	uxth	r3, r3
100032d4:	b2da      	uxtb	r2, r3
100032d6:	4b15      	ldr	r3, [pc, #84]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032d8:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmuParam->vbat);
100032da:	687b      	ldr	r3, [r7, #4]
100032dc:	885b      	ldrh	r3, [r3, #2]
100032de:	b2da      	uxtb	r2, r3
100032e0:	4b12      	ldr	r3, [pc, #72]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032e2:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmuParam->ibat>>8);
100032e4:	687b      	ldr	r3, [r7, #4]
100032e6:	889b      	ldrh	r3, [r3, #4]
100032e8:	0a1b      	lsrs	r3, r3, #8
100032ea:	b29b      	uxth	r3, r3
100032ec:	b2da      	uxtb	r2, r3
100032ee:	4b0f      	ldr	r3, [pc, #60]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032f0:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
100032f2:	687b      	ldr	r3, [r7, #4]
100032f4:	889b      	ldrh	r3, [r3, #4]
100032f6:	b2da      	uxtb	r2, r3
100032f8:	4b0c      	ldr	r3, [pc, #48]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
100032fa:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
100032fc:	687b      	ldr	r3, [r7, #4]
100032fe:	88db      	ldrh	r3, [r3, #6]
10003300:	0a1b      	lsrs	r3, r3, #8
10003302:	b29b      	uxth	r3, r3
10003304:	b2da      	uxtb	r2, r3
10003306:	4b09      	ldr	r3, [pc, #36]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003308:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
1000330a:	687b      	ldr	r3, [r7, #4]
1000330c:	88db      	ldrh	r3, [r3, #6]
1000330e:	b2da      	uxtb	r2, r3
10003310:	4b06      	ldr	r3, [pc, #24]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003312:	75da      	strb	r2, [r3, #23]
			break;
10003314:	46c0      	nop			; (mov r8, r8)
		default		:
			break;
	}
	XMC_CAN_MO_Config(&msgObjToPCS);
10003316:	4b05      	ldr	r3, [pc, #20]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003318:	1c18      	adds	r0, r3, #0
1000331a:	f002 f867 	bl	100053ec <XMC_CAN_MO_Config>
	XMC_CAN_MO_Transmit(&msgObjToPCS);
1000331e:	4b03      	ldr	r3, [pc, #12]	; (1000332c <PCS_BMUTransmitToPCS+0x11c>)
10003320:	1c18      	adds	r0, r3, #0
10003322:	f002 f945 	bl	100055b0 <XMC_CAN_MO_Transmit>
}
10003326:	46bd      	mov	sp, r7
10003328:	b004      	add	sp, #16
1000332a:	bd80      	pop	{r7, pc}
1000332c:	20000638 	.word	0x20000638

10003330 <PCS_GetPCSStatus>:

PCS_STATUS_t PCS_GetPCSStatus(XMC_CAN_MO_t *can_m0_obj)
{
10003330:	b580      	push	{r7, lr}
10003332:	b084      	sub	sp, #16
10003334:	af00      	add	r7, sp, #0
10003336:	6078      	str	r0, [r7, #4]
10003338:	6039      	str	r1, [r7, #0]
	PCS_STATUS_t param;
	uint8_t 	 status;
	status = can_m0_obj->can_data_byte[0];
1000333a:	230f      	movs	r3, #15
1000333c:	18fb      	adds	r3, r7, r3
1000333e:	683a      	ldr	r2, [r7, #0]
10003340:	7c12      	ldrb	r2, [r2, #16]
10003342:	701a      	strb	r2, [r3, #0]
	if(status<=3) 						{param.pcs_system_status = PCS_STAT_INITIAL;}
10003344:	230f      	movs	r3, #15
10003346:	18fb      	adds	r3, r7, r3
10003348:	781b      	ldrb	r3, [r3, #0]
1000334a:	2b03      	cmp	r3, #3
1000334c:	d804      	bhi.n	10003358 <PCS_GetPCSStatus+0x28>
1000334e:	2308      	movs	r3, #8
10003350:	18fb      	adds	r3, r7, r3
10003352:	2200      	movs	r2, #0
10003354:	701a      	strb	r2, [r3, #0]
10003356:	e017      	b.n	10003388 <PCS_GetPCSStatus+0x58>
	else if((status==4) ) 				{param.pcs_system_status = PCS_STAT_STANDBY;}
10003358:	230f      	movs	r3, #15
1000335a:	18fb      	adds	r3, r7, r3
1000335c:	781b      	ldrb	r3, [r3, #0]
1000335e:	2b04      	cmp	r3, #4
10003360:	d104      	bne.n	1000336c <PCS_GetPCSStatus+0x3c>
10003362:	2308      	movs	r3, #8
10003364:	18fb      	adds	r3, r7, r3
10003366:	2204      	movs	r2, #4
10003368:	701a      	strb	r2, [r3, #0]
1000336a:	e00d      	b.n	10003388 <PCS_GetPCSStatus+0x58>
	else if((status==6) || (status==5)) {param.pcs_system_status = PCS_STAT_RUNNING;}
1000336c:	230f      	movs	r3, #15
1000336e:	18fb      	adds	r3, r7, r3
10003370:	781b      	ldrb	r3, [r3, #0]
10003372:	2b06      	cmp	r3, #6
10003374:	d004      	beq.n	10003380 <PCS_GetPCSStatus+0x50>
10003376:	230f      	movs	r3, #15
10003378:	18fb      	adds	r3, r7, r3
1000337a:	781b      	ldrb	r3, [r3, #0]
1000337c:	2b05      	cmp	r3, #5
1000337e:	d103      	bne.n	10003388 <PCS_GetPCSStatus+0x58>
10003380:	2308      	movs	r3, #8
10003382:	18fb      	adds	r3, r7, r3
10003384:	2206      	movs	r2, #6
10003386:	701a      	strb	r2, [r3, #0]

	status = can_m0_obj->can_data_byte[1];
10003388:	230f      	movs	r3, #15
1000338a:	18fb      	adds	r3, r7, r3
1000338c:	683a      	ldr	r2, [r7, #0]
1000338e:	7c52      	ldrb	r2, [r2, #17]
10003390:	701a      	strb	r2, [r3, #0]
	if(status)	{param.pcs_precharge_IsComplete = true;}
10003392:	230f      	movs	r3, #15
10003394:	18fb      	adds	r3, r7, r3
10003396:	781b      	ldrb	r3, [r3, #0]
10003398:	2b00      	cmp	r3, #0
1000339a:	d004      	beq.n	100033a6 <PCS_GetPCSStatus+0x76>
1000339c:	2308      	movs	r3, #8
1000339e:	18fb      	adds	r3, r7, r3
100033a0:	2201      	movs	r2, #1
100033a2:	705a      	strb	r2, [r3, #1]
100033a4:	e003      	b.n	100033ae <PCS_GetPCSStatus+0x7e>
	else 		{param.pcs_precharge_IsComplete = false;}
100033a6:	2308      	movs	r3, #8
100033a8:	18fb      	adds	r3, r7, r3
100033aa:	2200      	movs	r2, #0
100033ac:	705a      	strb	r2, [r3, #1]

	param.pcs_system_warning = PCS_WARN_NORMAL;
100033ae:	2308      	movs	r3, #8
100033b0:	18fb      	adds	r3, r7, r3
100033b2:	2200      	movs	r2, #0
100033b4:	709a      	strb	r2, [r3, #2]
	param.pcs_system_pcsIsStandBy = false;
100033b6:	2308      	movs	r3, #8
100033b8:	18fb      	adds	r3, r7, r3
100033ba:	2200      	movs	r2, #0
100033bc:	711a      	strb	r2, [r3, #4]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
100033be:	230f      	movs	r3, #15
100033c0:	18fb      	adds	r3, r7, r3
100033c2:	683a      	ldr	r2, [r7, #0]
100033c4:	7c92      	ldrb	r2, [r2, #18]
100033c6:	701a      	strb	r2, [r3, #0]
	if((status>>6)&0x01)
100033c8:	230f      	movs	r3, #15
100033ca:	18fb      	adds	r3, r7, r3
100033cc:	781b      	ldrb	r3, [r3, #0]
100033ce:	099b      	lsrs	r3, r3, #6
100033d0:	b2db      	uxtb	r3, r3
100033d2:	1c1a      	adds	r2, r3, #0
100033d4:	2301      	movs	r3, #1
100033d6:	4013      	ands	r3, r2
100033d8:	d007      	beq.n	100033ea <PCS_GetPCSStatus+0xba>
	{
		param.pcs_system_warning = PCS_WARN_PCS_OT;
100033da:	2308      	movs	r3, #8
100033dc:	18fb      	adds	r3, r7, r3
100033de:	2206      	movs	r2, #6
100033e0:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
100033e2:	2308      	movs	r3, #8
100033e4:	18fb      	adds	r3, r7, r3
100033e6:	2201      	movs	r2, #1
100033e8:	711a      	strb	r2, [r3, #4]
	}

	status = can_m0_obj->can_data_byte[3];
100033ea:	230f      	movs	r3, #15
100033ec:	18fb      	adds	r3, r7, r3
100033ee:	683a      	ldr	r2, [r7, #0]
100033f0:	7cd2      	ldrb	r2, [r2, #19]
100033f2:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
100033f4:	230f      	movs	r3, #15
100033f6:	18fb      	adds	r3, r7, r3
100033f8:	781b      	ldrb	r3, [r3, #0]
100033fa:	09db      	lsrs	r3, r3, #7
100033fc:	b2db      	uxtb	r3, r3
100033fe:	1c1a      	adds	r2, r3, #0
10003400:	2301      	movs	r3, #1
10003402:	4013      	ands	r3, r2
10003404:	d007      	beq.n	10003416 <PCS_GetPCSStatus+0xe6>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVCHG;
10003406:	2308      	movs	r3, #8
10003408:	18fb      	adds	r3, r7, r3
1000340a:	2201      	movs	r2, #1
1000340c:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
1000340e:	2308      	movs	r3, #8
10003410:	18fb      	adds	r3, r7, r3
10003412:	2201      	movs	r2, #1
10003414:	711a      	strb	r2, [r3, #4]
	}
	if((status>>6)&0x01){param.pcs_system_warning = PCS_WARN_BAT_CHGSUP;}
10003416:	230f      	movs	r3, #15
10003418:	18fb      	adds	r3, r7, r3
1000341a:	781b      	ldrb	r3, [r3, #0]
1000341c:	099b      	lsrs	r3, r3, #6
1000341e:	b2db      	uxtb	r3, r3
10003420:	1c1a      	adds	r2, r3, #0
10003422:	2301      	movs	r3, #1
10003424:	4013      	ands	r3, r2
10003426:	d003      	beq.n	10003430 <PCS_GetPCSStatus+0x100>
10003428:	2308      	movs	r3, #8
1000342a:	18fb      	adds	r3, r7, r3
1000342c:	2202      	movs	r2, #2
1000342e:	709a      	strb	r2, [r3, #2]
	if((status>>5)&0x01){param.pcs_system_warning = PCS_WARN_BAT_DSGSUP;}
10003430:	230f      	movs	r3, #15
10003432:	18fb      	adds	r3, r7, r3
10003434:	781b      	ldrb	r3, [r3, #0]
10003436:	095b      	lsrs	r3, r3, #5
10003438:	b2db      	uxtb	r3, r3
1000343a:	1c1a      	adds	r2, r3, #0
1000343c:	2301      	movs	r3, #1
1000343e:	4013      	ands	r3, r2
10003440:	d003      	beq.n	1000344a <PCS_GetPCSStatus+0x11a>
10003442:	2308      	movs	r3, #8
10003444:	18fb      	adds	r3, r7, r3
10003446:	2203      	movs	r2, #3
10003448:	709a      	strb	r2, [r3, #2]
	if((status>>4)&0x01){param.pcs_system_warning = PCS_WARN_BAT_OVDSG;}
1000344a:	230f      	movs	r3, #15
1000344c:	18fb      	adds	r3, r7, r3
1000344e:	781b      	ldrb	r3, [r3, #0]
10003450:	091b      	lsrs	r3, r3, #4
10003452:	b2db      	uxtb	r3, r3
10003454:	1c1a      	adds	r2, r3, #0
10003456:	2301      	movs	r3, #1
10003458:	4013      	ands	r3, r2
1000345a:	d003      	beq.n	10003464 <PCS_GetPCSStatus+0x134>
1000345c:	2308      	movs	r3, #8
1000345e:	18fb      	adds	r3, r7, r3
10003460:	2204      	movs	r2, #4
10003462:	709a      	strb	r2, [r3, #2]
	if((status>>3)&0x01)
10003464:	230f      	movs	r3, #15
10003466:	18fb      	adds	r3, r7, r3
10003468:	781b      	ldrb	r3, [r3, #0]
1000346a:	08db      	lsrs	r3, r3, #3
1000346c:	b2db      	uxtb	r3, r3
1000346e:	1c1a      	adds	r2, r3, #0
10003470:	2301      	movs	r3, #1
10003472:	4013      	ands	r3, r2
10003474:	d007      	beq.n	10003486 <PCS_GetPCSStatus+0x156>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVDSG2;
10003476:	2308      	movs	r3, #8
10003478:	18fb      	adds	r3, r7, r3
1000347a:	2205      	movs	r2, #5
1000347c:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
1000347e:	2308      	movs	r3, #8
10003480:	18fb      	adds	r3, r7, r3
10003482:	2201      	movs	r2, #1
10003484:	711a      	strb	r2, [r3, #4]
	}

	return param;
10003486:	687a      	ldr	r2, [r7, #4]
10003488:	2308      	movs	r3, #8
1000348a:	18fb      	adds	r3, r7, r3
1000348c:	1c11      	adds	r1, r2, #0
1000348e:	1c1a      	adds	r2, r3, #0
10003490:	2305      	movs	r3, #5
10003492:	1c08      	adds	r0, r1, #0
10003494:	1c11      	adds	r1, r2, #0
10003496:	1c1a      	adds	r2, r3, #0
10003498:	f005 fb7a 	bl	10008b90 <memcpy>
}
1000349c:	6878      	ldr	r0, [r7, #4]
1000349e:	46bd      	mov	sp, r7
100034a0:	b004      	add	sp, #16
100034a2:	bd80      	pop	{r7, pc}

100034a4 <PCS_GetDCGridStatus>:

DCGRID_STATUS_t 	PCS_GetDCGridStatus(XMC_CAN_MO_t *can_m0_obj)
{
100034a4:	b580      	push	{r7, lr}
100034a6:	b086      	sub	sp, #24
100034a8:	af00      	add	r7, sp, #0
100034aa:	6078      	str	r0, [r7, #4]
	DCGRID_STATUS_t param;
	uint8_t			status;

	param.dcgrid_system_pcsIsStandBy = false;
100034ac:	230c      	movs	r3, #12
100034ae:	18fb      	adds	r3, r7, r3
100034b0:	2200      	movs	r2, #0
100034b2:	70da      	strb	r2, [r3, #3]

	status = can_m0_obj->can_data_byte[0];
100034b4:	2317      	movs	r3, #23
100034b6:	18fb      	adds	r3, r7, r3
100034b8:	687a      	ldr	r2, [r7, #4]
100034ba:	7c12      	ldrb	r2, [r2, #16]
100034bc:	701a      	strb	r2, [r3, #0]
	if		((status<=3)||(status==6)||(status==7)) {param.dcgrid_system_status = GRID_STAT_NOT_RUNNING;}
100034be:	2317      	movs	r3, #23
100034c0:	18fb      	adds	r3, r7, r3
100034c2:	781b      	ldrb	r3, [r3, #0]
100034c4:	2b03      	cmp	r3, #3
100034c6:	d909      	bls.n	100034dc <PCS_GetDCGridStatus+0x38>
100034c8:	2317      	movs	r3, #23
100034ca:	18fb      	adds	r3, r7, r3
100034cc:	781b      	ldrb	r3, [r3, #0]
100034ce:	2b06      	cmp	r3, #6
100034d0:	d004      	beq.n	100034dc <PCS_GetDCGridStatus+0x38>
100034d2:	2317      	movs	r3, #23
100034d4:	18fb      	adds	r3, r7, r3
100034d6:	781b      	ldrb	r3, [r3, #0]
100034d8:	2b07      	cmp	r3, #7
100034da:	d104      	bne.n	100034e6 <PCS_GetDCGridStatus+0x42>
100034dc:	230c      	movs	r3, #12
100034de:	18fb      	adds	r3, r7, r3
100034e0:	2200      	movs	r2, #0
100034e2:	701a      	strb	r2, [r3, #0]
100034e4:	e01c      	b.n	10003520 <PCS_GetDCGridStatus+0x7c>
	else if ((status==4)||(status ==5)) 			{param.dcgrid_system_status = GRID_STAT_CHG;}
100034e6:	2317      	movs	r3, #23
100034e8:	18fb      	adds	r3, r7, r3
100034ea:	781b      	ldrb	r3, [r3, #0]
100034ec:	2b04      	cmp	r3, #4
100034ee:	d004      	beq.n	100034fa <PCS_GetDCGridStatus+0x56>
100034f0:	2317      	movs	r3, #23
100034f2:	18fb      	adds	r3, r7, r3
100034f4:	781b      	ldrb	r3, [r3, #0]
100034f6:	2b05      	cmp	r3, #5
100034f8:	d104      	bne.n	10003504 <PCS_GetDCGridStatus+0x60>
100034fa:	230c      	movs	r3, #12
100034fc:	18fb      	adds	r3, r7, r3
100034fe:	2204      	movs	r2, #4
10003500:	701a      	strb	r2, [r3, #0]
10003502:	e00d      	b.n	10003520 <PCS_GetDCGridStatus+0x7c>
	else if ((status==8)||(status ==9)) 			{param.dcgrid_system_status = GRID_STAT_DSG;}
10003504:	2317      	movs	r3, #23
10003506:	18fb      	adds	r3, r7, r3
10003508:	781b      	ldrb	r3, [r3, #0]
1000350a:	2b08      	cmp	r3, #8
1000350c:	d004      	beq.n	10003518 <PCS_GetDCGridStatus+0x74>
1000350e:	2317      	movs	r3, #23
10003510:	18fb      	adds	r3, r7, r3
10003512:	781b      	ldrb	r3, [r3, #0]
10003514:	2b09      	cmp	r3, #9
10003516:	d103      	bne.n	10003520 <PCS_GetDCGridStatus+0x7c>
10003518:	230c      	movs	r3, #12
1000351a:	18fb      	adds	r3, r7, r3
1000351c:	2208      	movs	r2, #8
1000351e:	701a      	strb	r2, [r3, #0]

	param.dcgrid_system_warning=GRID_WARN_NORMAL;
10003520:	230c      	movs	r3, #12
10003522:	18fb      	adds	r3, r7, r3
10003524:	2200      	movs	r2, #0
10003526:	705a      	strb	r2, [r3, #1]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10003528:	2317      	movs	r3, #23
1000352a:	18fb      	adds	r3, r7, r3
1000352c:	687a      	ldr	r2, [r7, #4]
1000352e:	7c92      	ldrb	r2, [r2, #18]
10003530:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.dcgrid_system_warning=GRID_WARN_OV;}
10003532:	2317      	movs	r3, #23
10003534:	18fb      	adds	r3, r7, r3
10003536:	781b      	ldrb	r3, [r3, #0]
10003538:	09db      	lsrs	r3, r3, #7
1000353a:	b2db      	uxtb	r3, r3
1000353c:	1c1a      	adds	r2, r3, #0
1000353e:	2301      	movs	r3, #1
10003540:	4013      	ands	r3, r2
10003542:	d003      	beq.n	1000354c <PCS_GetDCGridStatus+0xa8>
10003544:	230c      	movs	r3, #12
10003546:	18fb      	adds	r3, r7, r3
10003548:	2201      	movs	r2, #1
1000354a:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.dcgrid_system_warning=GRID_WARN_OC;}
1000354c:	2317      	movs	r3, #23
1000354e:	18fb      	adds	r3, r7, r3
10003550:	781b      	ldrb	r3, [r3, #0]
10003552:	099b      	lsrs	r3, r3, #6
10003554:	b2db      	uxtb	r3, r3
10003556:	1c1a      	adds	r2, r3, #0
10003558:	2301      	movs	r3, #1
1000355a:	4013      	ands	r3, r2
1000355c:	d003      	beq.n	10003566 <PCS_GetDCGridStatus+0xc2>
1000355e:	230c      	movs	r3, #12
10003560:	18fb      	adds	r3, r7, r3
10003562:	2202      	movs	r2, #2
10003564:	705a      	strb	r2, [r3, #1]

	return param;
10003566:	2310      	movs	r3, #16
10003568:	18fb      	adds	r3, r7, r3
1000356a:	220c      	movs	r2, #12
1000356c:	18ba      	adds	r2, r7, r2
1000356e:	6812      	ldr	r2, [r2, #0]
10003570:	601a      	str	r2, [r3, #0]
10003572:	2310      	movs	r3, #16
10003574:	18fa      	adds	r2, r7, r3
10003576:	2300      	movs	r3, #0
10003578:	7811      	ldrb	r1, [r2, #0]
1000357a:	20ff      	movs	r0, #255	; 0xff
1000357c:	4001      	ands	r1, r0
1000357e:	20ff      	movs	r0, #255	; 0xff
10003580:	4383      	bics	r3, r0
10003582:	430b      	orrs	r3, r1
10003584:	7851      	ldrb	r1, [r2, #1]
10003586:	20ff      	movs	r0, #255	; 0xff
10003588:	4001      	ands	r1, r0
1000358a:	0209      	lsls	r1, r1, #8
1000358c:	4809      	ldr	r0, [pc, #36]	; (100035b4 <PCS_GetDCGridStatus+0x110>)
1000358e:	4003      	ands	r3, r0
10003590:	430b      	orrs	r3, r1
10003592:	7891      	ldrb	r1, [r2, #2]
10003594:	20ff      	movs	r0, #255	; 0xff
10003596:	4001      	ands	r1, r0
10003598:	0409      	lsls	r1, r1, #16
1000359a:	4807      	ldr	r0, [pc, #28]	; (100035b8 <PCS_GetDCGridStatus+0x114>)
1000359c:	4003      	ands	r3, r0
1000359e:	430b      	orrs	r3, r1
100035a0:	78d2      	ldrb	r2, [r2, #3]
100035a2:	0612      	lsls	r2, r2, #24
100035a4:	021b      	lsls	r3, r3, #8
100035a6:	0a1b      	lsrs	r3, r3, #8
100035a8:	4313      	orrs	r3, r2
}
100035aa:	1c18      	adds	r0, r3, #0
100035ac:	46bd      	mov	sp, r7
100035ae:	b006      	add	sp, #24
100035b0:	bd80      	pop	{r7, pc}
100035b2:	46c0      	nop			; (mov r8, r8)
100035b4:	ffff00ff 	.word	0xffff00ff
100035b8:	ff00ffff 	.word	0xff00ffff

100035bc <PCS_GetACInvStatus>:

ACINV_STATUS_t 		PCS_GetACInvStatus(XMC_CAN_MO_t *can_m0_obj)
{
100035bc:	b580      	push	{r7, lr}
100035be:	b086      	sub	sp, #24
100035c0:	af00      	add	r7, sp, #0
100035c2:	6078      	str	r0, [r7, #4]
	ACINV_STATUS_t param;
	uint8_t		   status;

	status = can_m0_obj->can_data_byte[0];
100035c4:	2317      	movs	r3, #23
100035c6:	18fb      	adds	r3, r7, r3
100035c8:	687a      	ldr	r2, [r7, #4]
100035ca:	7c12      	ldrb	r2, [r2, #16]
100035cc:	701a      	strb	r2, [r3, #0]
	if((status<=3)||(status==11)||(status==13))	{param.acinv_system_status = INV_STAT_NOT_RUNNING;}
100035ce:	2317      	movs	r3, #23
100035d0:	18fb      	adds	r3, r7, r3
100035d2:	781b      	ldrb	r3, [r3, #0]
100035d4:	2b03      	cmp	r3, #3
100035d6:	d909      	bls.n	100035ec <PCS_GetACInvStatus+0x30>
100035d8:	2317      	movs	r3, #23
100035da:	18fb      	adds	r3, r7, r3
100035dc:	781b      	ldrb	r3, [r3, #0]
100035de:	2b0b      	cmp	r3, #11
100035e0:	d004      	beq.n	100035ec <PCS_GetACInvStatus+0x30>
100035e2:	2317      	movs	r3, #23
100035e4:	18fb      	adds	r3, r7, r3
100035e6:	781b      	ldrb	r3, [r3, #0]
100035e8:	2b0d      	cmp	r3, #13
100035ea:	d104      	bne.n	100035f6 <PCS_GetACInvStatus+0x3a>
100035ec:	230c      	movs	r3, #12
100035ee:	18fb      	adds	r3, r7, r3
100035f0:	2200      	movs	r2, #0
100035f2:	701a      	strb	r2, [r3, #0]
100035f4:	e012      	b.n	1000361c <PCS_GetACInvStatus+0x60>
	else if((status==14)||(status ==15))  		{param.acinv_system_status = INV_STAT_RUNNING;}
100035f6:	2317      	movs	r3, #23
100035f8:	18fb      	adds	r3, r7, r3
100035fa:	781b      	ldrb	r3, [r3, #0]
100035fc:	2b0e      	cmp	r3, #14
100035fe:	d004      	beq.n	1000360a <PCS_GetACInvStatus+0x4e>
10003600:	2317      	movs	r3, #23
10003602:	18fb      	adds	r3, r7, r3
10003604:	781b      	ldrb	r3, [r3, #0]
10003606:	2b0f      	cmp	r3, #15
10003608:	d104      	bne.n	10003614 <PCS_GetACInvStatus+0x58>
1000360a:	230c      	movs	r3, #12
1000360c:	18fb      	adds	r3, r7, r3
1000360e:	220e      	movs	r2, #14
10003610:	701a      	strb	r2, [r3, #0]
10003612:	e003      	b.n	1000361c <PCS_GetACInvStatus+0x60>
	else							 			{param.acinv_system_status = INV_STAT_NONE;}
10003614:	230c      	movs	r3, #12
10003616:	18fb      	adds	r3, r7, r3
10003618:	2204      	movs	r2, #4
1000361a:	701a      	strb	r2, [r3, #0]

	param.acinv_system_warning = INV_WARN_NORMAL;
1000361c:	230c      	movs	r3, #12
1000361e:	18fb      	adds	r3, r7, r3
10003620:	2200      	movs	r2, #0
10003622:	705a      	strb	r2, [r3, #1]
	param.acinv_system_pcsIsStandBy = false;
10003624:	230c      	movs	r3, #12
10003626:	18fb      	adds	r3, r7, r3
10003628:	2200      	movs	r2, #0
1000362a:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
1000362c:	2317      	movs	r3, #23
1000362e:	18fb      	adds	r3, r7, r3
10003630:	687a      	ldr	r2, [r7, #4]
10003632:	7c92      	ldrb	r2, [r2, #18]
10003634:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
10003636:	2317      	movs	r3, #23
10003638:	18fb      	adds	r3, r7, r3
1000363a:	781b      	ldrb	r3, [r3, #0]
1000363c:	09db      	lsrs	r3, r3, #7
1000363e:	b2db      	uxtb	r3, r3
10003640:	1c1a      	adds	r2, r3, #0
10003642:	2301      	movs	r3, #1
10003644:	4013      	ands	r3, r2
10003646:	d007      	beq.n	10003658 <PCS_GetACInvStatus+0x9c>
		{
			param.acinv_system_warning = INV_WARN_MCU_OV;
10003648:	230c      	movs	r3, #12
1000364a:	18fb      	adds	r3, r7, r3
1000364c:	2201      	movs	r2, #1
1000364e:	705a      	strb	r2, [r3, #1]
			param.acinv_system_pcsIsStandBy = true;
10003650:	230c      	movs	r3, #12
10003652:	18fb      	adds	r3, r7, r3
10003654:	2201      	movs	r2, #1
10003656:	70da      	strb	r2, [r3, #3]
		}
	if((status>>3)&0x01){param.acinv_system_warning = INV_WARN_OT;}
10003658:	2317      	movs	r3, #23
1000365a:	18fb      	adds	r3, r7, r3
1000365c:	781b      	ldrb	r3, [r3, #0]
1000365e:	08db      	lsrs	r3, r3, #3
10003660:	b2db      	uxtb	r3, r3
10003662:	1c1a      	adds	r2, r3, #0
10003664:	2301      	movs	r3, #1
10003666:	4013      	ands	r3, r2
10003668:	d003      	beq.n	10003672 <PCS_GetACInvStatus+0xb6>
1000366a:	230c      	movs	r3, #12
1000366c:	18fb      	adds	r3, r7, r3
1000366e:	2202      	movs	r2, #2
10003670:	705a      	strb	r2, [r3, #1]
	if((status>>2)&0x01){param.acinv_system_warning = INV_WARN_OV;}
10003672:	2317      	movs	r3, #23
10003674:	18fb      	adds	r3, r7, r3
10003676:	781b      	ldrb	r3, [r3, #0]
10003678:	089b      	lsrs	r3, r3, #2
1000367a:	b2db      	uxtb	r3, r3
1000367c:	1c1a      	adds	r2, r3, #0
1000367e:	2301      	movs	r3, #1
10003680:	4013      	ands	r3, r2
10003682:	d003      	beq.n	1000368c <PCS_GetACInvStatus+0xd0>
10003684:	230c      	movs	r3, #12
10003686:	18fb      	adds	r3, r7, r3
10003688:	2203      	movs	r2, #3
1000368a:	705a      	strb	r2, [r3, #1]
	if((status>>1)&0x01){param.acinv_system_warning = INV_WARN_UV;}
1000368c:	2317      	movs	r3, #23
1000368e:	18fb      	adds	r3, r7, r3
10003690:	781b      	ldrb	r3, [r3, #0]
10003692:	085b      	lsrs	r3, r3, #1
10003694:	b2db      	uxtb	r3, r3
10003696:	1c1a      	adds	r2, r3, #0
10003698:	2301      	movs	r3, #1
1000369a:	4013      	ands	r3, r2
1000369c:	d003      	beq.n	100036a6 <PCS_GetACInvStatus+0xea>
1000369e:	230c      	movs	r3, #12
100036a0:	18fb      	adds	r3, r7, r3
100036a2:	2204      	movs	r2, #4
100036a4:	705a      	strb	r2, [r3, #1]
	if((status)&0x01){param.acinv_system_warning = INV_WARN_OL;}
100036a6:	2317      	movs	r3, #23
100036a8:	18fb      	adds	r3, r7, r3
100036aa:	781b      	ldrb	r3, [r3, #0]
100036ac:	2201      	movs	r2, #1
100036ae:	4013      	ands	r3, r2
100036b0:	d003      	beq.n	100036ba <PCS_GetACInvStatus+0xfe>
100036b2:	230c      	movs	r3, #12
100036b4:	18fb      	adds	r3, r7, r3
100036b6:	2205      	movs	r2, #5
100036b8:	705a      	strb	r2, [r3, #1]

	return param;
100036ba:	2310      	movs	r3, #16
100036bc:	18fb      	adds	r3, r7, r3
100036be:	220c      	movs	r2, #12
100036c0:	18ba      	adds	r2, r7, r2
100036c2:	6812      	ldr	r2, [r2, #0]
100036c4:	601a      	str	r2, [r3, #0]
100036c6:	2310      	movs	r3, #16
100036c8:	18fa      	adds	r2, r7, r3
100036ca:	2300      	movs	r3, #0
100036cc:	7811      	ldrb	r1, [r2, #0]
100036ce:	20ff      	movs	r0, #255	; 0xff
100036d0:	4001      	ands	r1, r0
100036d2:	20ff      	movs	r0, #255	; 0xff
100036d4:	4383      	bics	r3, r0
100036d6:	430b      	orrs	r3, r1
100036d8:	7851      	ldrb	r1, [r2, #1]
100036da:	20ff      	movs	r0, #255	; 0xff
100036dc:	4001      	ands	r1, r0
100036de:	0209      	lsls	r1, r1, #8
100036e0:	4809      	ldr	r0, [pc, #36]	; (10003708 <PCS_GetACInvStatus+0x14c>)
100036e2:	4003      	ands	r3, r0
100036e4:	430b      	orrs	r3, r1
100036e6:	7891      	ldrb	r1, [r2, #2]
100036e8:	20ff      	movs	r0, #255	; 0xff
100036ea:	4001      	ands	r1, r0
100036ec:	0409      	lsls	r1, r1, #16
100036ee:	4807      	ldr	r0, [pc, #28]	; (1000370c <PCS_GetACInvStatus+0x150>)
100036f0:	4003      	ands	r3, r0
100036f2:	430b      	orrs	r3, r1
100036f4:	78d2      	ldrb	r2, [r2, #3]
100036f6:	0612      	lsls	r2, r2, #24
100036f8:	021b      	lsls	r3, r3, #8
100036fa:	0a1b      	lsrs	r3, r3, #8
100036fc:	4313      	orrs	r3, r2
}
100036fe:	1c18      	adds	r0, r3, #0
10003700:	46bd      	mov	sp, r7
10003702:	b006      	add	sp, #24
10003704:	bd80      	pop	{r7, pc}
10003706:	46c0      	nop			; (mov r8, r8)
10003708:	ffff00ff 	.word	0xffff00ff
1000370c:	ff00ffff 	.word	0xff00ffff

10003710 <PCS_GetPVConvStatus>:

PVCONV_STATUS_t 	PCS_GetPVConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10003710:	b580      	push	{r7, lr}
10003712:	b086      	sub	sp, #24
10003714:	af00      	add	r7, sp, #0
10003716:	6078      	str	r0, [r7, #4]
	PVCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
10003718:	2317      	movs	r3, #23
1000371a:	18fb      	adds	r3, r7, r3
1000371c:	687a      	ldr	r2, [r7, #4]
1000371e:	7c12      	ldrb	r2, [r2, #16]
10003720:	701a      	strb	r2, [r3, #0]
	if 		(status<=3) 				{param.pvconv_system_status = PV_STAT_NOT_RUNNING;}
10003722:	2317      	movs	r3, #23
10003724:	18fb      	adds	r3, r7, r3
10003726:	781b      	ldrb	r3, [r3, #0]
10003728:	2b03      	cmp	r3, #3
1000372a:	d804      	bhi.n	10003736 <PCS_GetPVConvStatus+0x26>
1000372c:	230c      	movs	r3, #12
1000372e:	18fb      	adds	r3, r7, r3
10003730:	2200      	movs	r2, #0
10003732:	701a      	strb	r2, [r3, #0]
10003734:	e00d      	b.n	10003752 <PCS_GetPVConvStatus+0x42>
	else if ((status==4)||(status ==5))	{param.pvconv_system_status = PV_STAT_RUNNING;}
10003736:	2317      	movs	r3, #23
10003738:	18fb      	adds	r3, r7, r3
1000373a:	781b      	ldrb	r3, [r3, #0]
1000373c:	2b04      	cmp	r3, #4
1000373e:	d004      	beq.n	1000374a <PCS_GetPVConvStatus+0x3a>
10003740:	2317      	movs	r3, #23
10003742:	18fb      	adds	r3, r7, r3
10003744:	781b      	ldrb	r3, [r3, #0]
10003746:	2b05      	cmp	r3, #5
10003748:	d103      	bne.n	10003752 <PCS_GetPVConvStatus+0x42>
1000374a:	230c      	movs	r3, #12
1000374c:	18fb      	adds	r3, r7, r3
1000374e:	2204      	movs	r2, #4
10003750:	701a      	strb	r2, [r3, #0]

	param.pvconv_system_warning = PV_WARN_NORMAL;
10003752:	230c      	movs	r3, #12
10003754:	18fb      	adds	r3, r7, r3
10003756:	2200      	movs	r2, #0
10003758:	705a      	strb	r2, [r3, #1]
	param.pvconv_system_pcsIsStandBy = false;
1000375a:	230c      	movs	r3, #12
1000375c:	18fb      	adds	r3, r7, r3
1000375e:	2200      	movs	r2, #0
10003760:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10003762:	2317      	movs	r3, #23
10003764:	18fb      	adds	r3, r7, r3
10003766:	687a      	ldr	r2, [r7, #4]
10003768:	7c92      	ldrb	r2, [r2, #18]
1000376a:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.pvconv_system_warning = PV_WARN_OV;}
1000376c:	2317      	movs	r3, #23
1000376e:	18fb      	adds	r3, r7, r3
10003770:	781b      	ldrb	r3, [r3, #0]
10003772:	09db      	lsrs	r3, r3, #7
10003774:	b2db      	uxtb	r3, r3
10003776:	1c1a      	adds	r2, r3, #0
10003778:	2301      	movs	r3, #1
1000377a:	4013      	ands	r3, r2
1000377c:	d003      	beq.n	10003786 <PCS_GetPVConvStatus+0x76>
1000377e:	230c      	movs	r3, #12
10003780:	18fb      	adds	r3, r7, r3
10003782:	2201      	movs	r2, #1
10003784:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.pvconv_system_warning = PV_WARN_OC;}
10003786:	2317      	movs	r3, #23
10003788:	18fb      	adds	r3, r7, r3
1000378a:	781b      	ldrb	r3, [r3, #0]
1000378c:	099b      	lsrs	r3, r3, #6
1000378e:	b2db      	uxtb	r3, r3
10003790:	1c1a      	adds	r2, r3, #0
10003792:	2301      	movs	r3, #1
10003794:	4013      	ands	r3, r2
10003796:	d003      	beq.n	100037a0 <PCS_GetPVConvStatus+0x90>
10003798:	230c      	movs	r3, #12
1000379a:	18fb      	adds	r3, r7, r3
1000379c:	2202      	movs	r2, #2
1000379e:	705a      	strb	r2, [r3, #1]

	return param;
100037a0:	2310      	movs	r3, #16
100037a2:	18fb      	adds	r3, r7, r3
100037a4:	220c      	movs	r2, #12
100037a6:	18ba      	adds	r2, r7, r2
100037a8:	6812      	ldr	r2, [r2, #0]
100037aa:	601a      	str	r2, [r3, #0]
100037ac:	2310      	movs	r3, #16
100037ae:	18fa      	adds	r2, r7, r3
100037b0:	2300      	movs	r3, #0
100037b2:	7811      	ldrb	r1, [r2, #0]
100037b4:	20ff      	movs	r0, #255	; 0xff
100037b6:	4001      	ands	r1, r0
100037b8:	20ff      	movs	r0, #255	; 0xff
100037ba:	4383      	bics	r3, r0
100037bc:	430b      	orrs	r3, r1
100037be:	7851      	ldrb	r1, [r2, #1]
100037c0:	20ff      	movs	r0, #255	; 0xff
100037c2:	4001      	ands	r1, r0
100037c4:	0209      	lsls	r1, r1, #8
100037c6:	4809      	ldr	r0, [pc, #36]	; (100037ec <PCS_GetPVConvStatus+0xdc>)
100037c8:	4003      	ands	r3, r0
100037ca:	430b      	orrs	r3, r1
100037cc:	7891      	ldrb	r1, [r2, #2]
100037ce:	20ff      	movs	r0, #255	; 0xff
100037d0:	4001      	ands	r1, r0
100037d2:	0409      	lsls	r1, r1, #16
100037d4:	4806      	ldr	r0, [pc, #24]	; (100037f0 <PCS_GetPVConvStatus+0xe0>)
100037d6:	4003      	ands	r3, r0
100037d8:	430b      	orrs	r3, r1
100037da:	78d2      	ldrb	r2, [r2, #3]
100037dc:	0612      	lsls	r2, r2, #24
100037de:	021b      	lsls	r3, r3, #8
100037e0:	0a1b      	lsrs	r3, r3, #8
100037e2:	4313      	orrs	r3, r2
}
100037e4:	1c18      	adds	r0, r3, #0
100037e6:	46bd      	mov	sp, r7
100037e8:	b006      	add	sp, #24
100037ea:	bd80      	pop	{r7, pc}
100037ec:	ffff00ff 	.word	0xffff00ff
100037f0:	ff00ffff 	.word	0xff00ffff

100037f4 <PCS_GetBatConvStatus>:

BATCONV_STATUS_t 	PCS_GetBatConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
100037f4:	b580      	push	{r7, lr}
100037f6:	b086      	sub	sp, #24
100037f8:	af00      	add	r7, sp, #0
100037fa:	6078      	str	r0, [r7, #4]
	BATCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
100037fc:	2317      	movs	r3, #23
100037fe:	18fb      	adds	r3, r7, r3
10003800:	687a      	ldr	r2, [r7, #4]
10003802:	7c12      	ldrb	r2, [r2, #16]
10003804:	701a      	strb	r2, [r3, #0]
	if (status<=3) 						{param.batconv_system_status = BATCONV_STAT_NOT_RUNNING;}
10003806:	2317      	movs	r3, #23
10003808:	18fb      	adds	r3, r7, r3
1000380a:	781b      	ldrb	r3, [r3, #0]
1000380c:	2b03      	cmp	r3, #3
1000380e:	d804      	bhi.n	1000381a <PCS_GetBatConvStatus+0x26>
10003810:	230c      	movs	r3, #12
10003812:	18fb      	adds	r3, r7, r3
10003814:	2200      	movs	r2, #0
10003816:	701a      	strb	r2, [r3, #0]
10003818:	e00d      	b.n	10003836 <PCS_GetBatConvStatus+0x42>
	else if((status==4)||(status ==5))	{param.batconv_system_status = BATCONV_STAT_RUNNING;}
1000381a:	2317      	movs	r3, #23
1000381c:	18fb      	adds	r3, r7, r3
1000381e:	781b      	ldrb	r3, [r3, #0]
10003820:	2b04      	cmp	r3, #4
10003822:	d004      	beq.n	1000382e <PCS_GetBatConvStatus+0x3a>
10003824:	2317      	movs	r3, #23
10003826:	18fb      	adds	r3, r7, r3
10003828:	781b      	ldrb	r3, [r3, #0]
1000382a:	2b05      	cmp	r3, #5
1000382c:	d103      	bne.n	10003836 <PCS_GetBatConvStatus+0x42>
1000382e:	230c      	movs	r3, #12
10003830:	18fb      	adds	r3, r7, r3
10003832:	2204      	movs	r2, #4
10003834:	701a      	strb	r2, [r3, #0]

	param.batconv_system_warning = BATCONV_WARN_NORMAL;
10003836:	230c      	movs	r3, #12
10003838:	18fb      	adds	r3, r7, r3
1000383a:	2200      	movs	r2, #0
1000383c:	705a      	strb	r2, [r3, #1]
	param.batconv_system_pcsIsStandBy = false;
1000383e:	230c      	movs	r3, #12
10003840:	18fb      	adds	r3, r7, r3
10003842:	2200      	movs	r2, #0
10003844:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10003846:	2317      	movs	r3, #23
10003848:	18fb      	adds	r3, r7, r3
1000384a:	687a      	ldr	r2, [r7, #4]
1000384c:	7c92      	ldrb	r2, [r2, #18]
1000384e:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
10003850:	2317      	movs	r3, #23
10003852:	18fb      	adds	r3, r7, r3
10003854:	781b      	ldrb	r3, [r3, #0]
10003856:	09db      	lsrs	r3, r3, #7
10003858:	b2db      	uxtb	r3, r3
1000385a:	1c1a      	adds	r2, r3, #0
1000385c:	2301      	movs	r3, #1
1000385e:	4013      	ands	r3, r2
10003860:	d007      	beq.n	10003872 <PCS_GetBatConvStatus+0x7e>
		{
			param.batconv_system_warning = BATCONV_WARN_OV;
10003862:	230c      	movs	r3, #12
10003864:	18fb      	adds	r3, r7, r3
10003866:	2201      	movs	r2, #1
10003868:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
1000386a:	230c      	movs	r3, #12
1000386c:	18fb      	adds	r3, r7, r3
1000386e:	2201      	movs	r2, #1
10003870:	70da      	strb	r2, [r3, #3]
		}
	if((status>>6)&0x01)
10003872:	2317      	movs	r3, #23
10003874:	18fb      	adds	r3, r7, r3
10003876:	781b      	ldrb	r3, [r3, #0]
10003878:	099b      	lsrs	r3, r3, #6
1000387a:	b2db      	uxtb	r3, r3
1000387c:	1c1a      	adds	r2, r3, #0
1000387e:	2301      	movs	r3, #1
10003880:	4013      	ands	r3, r2
10003882:	d007      	beq.n	10003894 <PCS_GetBatConvStatus+0xa0>
		{
			param.batconv_system_warning = BATCONV_WARN_OC;
10003884:	230c      	movs	r3, #12
10003886:	18fb      	adds	r3, r7, r3
10003888:	2202      	movs	r2, #2
1000388a:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
1000388c:	230c      	movs	r3, #12
1000388e:	18fb      	adds	r3, r7, r3
10003890:	2201      	movs	r2, #1
10003892:	70da      	strb	r2, [r3, #3]
		}
	if((status>>5)&0x01)
10003894:	2317      	movs	r3, #23
10003896:	18fb      	adds	r3, r7, r3
10003898:	781b      	ldrb	r3, [r3, #0]
1000389a:	095b      	lsrs	r3, r3, #5
1000389c:	b2db      	uxtb	r3, r3
1000389e:	1c1a      	adds	r2, r3, #0
100038a0:	2301      	movs	r3, #1
100038a2:	4013      	ands	r3, r2
100038a4:	d007      	beq.n	100038b6 <PCS_GetBatConvStatus+0xc2>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OV;
100038a6:	230c      	movs	r3, #12
100038a8:	18fb      	adds	r3, r7, r3
100038aa:	2203      	movs	r2, #3
100038ac:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
100038ae:	230c      	movs	r3, #12
100038b0:	18fb      	adds	r3, r7, r3
100038b2:	2201      	movs	r2, #1
100038b4:	70da      	strb	r2, [r3, #3]
		}
	if((status>>2)&0x01)
100038b6:	2317      	movs	r3, #23
100038b8:	18fb      	adds	r3, r7, r3
100038ba:	781b      	ldrb	r3, [r3, #0]
100038bc:	089b      	lsrs	r3, r3, #2
100038be:	b2db      	uxtb	r3, r3
100038c0:	1c1a      	adds	r2, r3, #0
100038c2:	2301      	movs	r3, #1
100038c4:	4013      	ands	r3, r2
100038c6:	d007      	beq.n	100038d8 <PCS_GetBatConvStatus+0xe4>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OT;
100038c8:	230c      	movs	r3, #12
100038ca:	18fb      	adds	r3, r7, r3
100038cc:	2204      	movs	r2, #4
100038ce:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
100038d0:	230c      	movs	r3, #12
100038d2:	18fb      	adds	r3, r7, r3
100038d4:	2201      	movs	r2, #1
100038d6:	70da      	strb	r2, [r3, #3]
		}

	return param;
100038d8:	2310      	movs	r3, #16
100038da:	18fb      	adds	r3, r7, r3
100038dc:	220c      	movs	r2, #12
100038de:	18ba      	adds	r2, r7, r2
100038e0:	6812      	ldr	r2, [r2, #0]
100038e2:	601a      	str	r2, [r3, #0]
100038e4:	2310      	movs	r3, #16
100038e6:	18fa      	adds	r2, r7, r3
100038e8:	2300      	movs	r3, #0
100038ea:	7811      	ldrb	r1, [r2, #0]
100038ec:	20ff      	movs	r0, #255	; 0xff
100038ee:	4001      	ands	r1, r0
100038f0:	20ff      	movs	r0, #255	; 0xff
100038f2:	4383      	bics	r3, r0
100038f4:	430b      	orrs	r3, r1
100038f6:	7851      	ldrb	r1, [r2, #1]
100038f8:	20ff      	movs	r0, #255	; 0xff
100038fa:	4001      	ands	r1, r0
100038fc:	0209      	lsls	r1, r1, #8
100038fe:	4809      	ldr	r0, [pc, #36]	; (10003924 <PCS_GetBatConvStatus+0x130>)
10003900:	4003      	ands	r3, r0
10003902:	430b      	orrs	r3, r1
10003904:	7891      	ldrb	r1, [r2, #2]
10003906:	20ff      	movs	r0, #255	; 0xff
10003908:	4001      	ands	r1, r0
1000390a:	0409      	lsls	r1, r1, #16
1000390c:	4806      	ldr	r0, [pc, #24]	; (10003928 <PCS_GetBatConvStatus+0x134>)
1000390e:	4003      	ands	r3, r0
10003910:	430b      	orrs	r3, r1
10003912:	78d2      	ldrb	r2, [r2, #3]
10003914:	0612      	lsls	r2, r2, #24
10003916:	021b      	lsls	r3, r3, #8
10003918:	0a1b      	lsrs	r3, r3, #8
1000391a:	4313      	orrs	r3, r2
}
1000391c:	1c18      	adds	r0, r3, #0
1000391e:	46bd      	mov	sp, r7
10003920:	b006      	add	sp, #24
10003922:	bd80      	pop	{r7, pc}
10003924:	ffff00ff 	.word	0xffff00ff
10003928:	ff00ffff 	.word	0xff00ffff

1000392c <PCS_GetVoltParam>:

PCS_VOLTAGE_PARAM_t	PCS_GetVoltParam(XMC_CAN_MO_t *can_m0_obj)
{
1000392c:	b580      	push	{r7, lr}
1000392e:	b084      	sub	sp, #16
10003930:	af00      	add	r7, sp, #0
10003932:	6078      	str	r0, [r7, #4]
10003934:	6039      	str	r1, [r7, #0]
	PCS_VOLTAGE_PARAM_t param;

	param.vdcGrid 	= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003936:	683b      	ldr	r3, [r7, #0]
10003938:	7c1b      	ldrb	r3, [r3, #16]
1000393a:	021b      	lsls	r3, r3, #8
1000393c:	b29a      	uxth	r2, r3
1000393e:	683b      	ldr	r3, [r7, #0]
10003940:	7c5b      	ldrb	r3, [r3, #17]
10003942:	b29b      	uxth	r3, r3
10003944:	4313      	orrs	r3, r2
10003946:	b29b      	uxth	r3, r3
10003948:	b29a      	uxth	r2, r3
1000394a:	2308      	movs	r3, #8
1000394c:	18fb      	adds	r3, r7, r3
1000394e:	801a      	strh	r2, [r3, #0]
	param.vacOut  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003950:	683b      	ldr	r3, [r7, #0]
10003952:	7c9b      	ldrb	r3, [r3, #18]
10003954:	021b      	lsls	r3, r3, #8
10003956:	b29a      	uxth	r2, r3
10003958:	683b      	ldr	r3, [r7, #0]
1000395a:	7cdb      	ldrb	r3, [r3, #19]
1000395c:	b29b      	uxth	r3, r3
1000395e:	4313      	orrs	r3, r2
10003960:	b29b      	uxth	r3, r3
10003962:	b29a      	uxth	r2, r3
10003964:	2308      	movs	r3, #8
10003966:	18fb      	adds	r3, r7, r3
10003968:	805a      	strh	r2, [r3, #2]
	param.vPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
1000396a:	683b      	ldr	r3, [r7, #0]
1000396c:	7d1b      	ldrb	r3, [r3, #20]
1000396e:	021b      	lsls	r3, r3, #8
10003970:	b29a      	uxth	r2, r3
10003972:	683b      	ldr	r3, [r7, #0]
10003974:	7d5b      	ldrb	r3, [r3, #21]
10003976:	b29b      	uxth	r3, r3
10003978:	4313      	orrs	r3, r2
1000397a:	b29b      	uxth	r3, r3
1000397c:	b29a      	uxth	r2, r3
1000397e:	2308      	movs	r3, #8
10003980:	18fb      	adds	r3, r7, r3
10003982:	809a      	strh	r2, [r3, #4]
	param.vbat  	= ((uint16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003984:	683b      	ldr	r3, [r7, #0]
10003986:	7d9b      	ldrb	r3, [r3, #22]
10003988:	021b      	lsls	r3, r3, #8
1000398a:	b29a      	uxth	r2, r3
1000398c:	683b      	ldr	r3, [r7, #0]
1000398e:	7ddb      	ldrb	r3, [r3, #23]
10003990:	b29b      	uxth	r3, r3
10003992:	4313      	orrs	r3, r2
10003994:	b29b      	uxth	r3, r3
10003996:	b29a      	uxth	r2, r3
10003998:	2308      	movs	r3, #8
1000399a:	18fb      	adds	r3, r7, r3
1000399c:	80da      	strh	r2, [r3, #6]

	return param;
1000399e:	687a      	ldr	r2, [r7, #4]
100039a0:	2308      	movs	r3, #8
100039a2:	18fb      	adds	r3, r7, r3
100039a4:	1c11      	adds	r1, r2, #0
100039a6:	1c1a      	adds	r2, r3, #0
100039a8:	2308      	movs	r3, #8
100039aa:	1c08      	adds	r0, r1, #0
100039ac:	1c11      	adds	r1, r2, #0
100039ae:	1c1a      	adds	r2, r3, #0
100039b0:	f005 f8ee 	bl	10008b90 <memcpy>
}
100039b4:	6878      	ldr	r0, [r7, #4]
100039b6:	46bd      	mov	sp, r7
100039b8:	b004      	add	sp, #16
100039ba:	bd80      	pop	{r7, pc}

100039bc <PCS_GetAmpParam>:

PCS_CURRENT_PARAM_t	PCS_GetAmpParam(XMC_CAN_MO_t *can_m0_obj)
{
100039bc:	b580      	push	{r7, lr}
100039be:	b084      	sub	sp, #16
100039c0:	af00      	add	r7, sp, #0
100039c2:	6078      	str	r0, [r7, #4]
100039c4:	6039      	str	r1, [r7, #0]
	PCS_CURRENT_PARAM_t param;

	param.idcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
100039c6:	683b      	ldr	r3, [r7, #0]
100039c8:	7c1b      	ldrb	r3, [r3, #16]
100039ca:	021b      	lsls	r3, r3, #8
100039cc:	b29a      	uxth	r2, r3
100039ce:	683b      	ldr	r3, [r7, #0]
100039d0:	7c5b      	ldrb	r3, [r3, #17]
100039d2:	b29b      	uxth	r3, r3
100039d4:	4313      	orrs	r3, r2
100039d6:	b29a      	uxth	r2, r3
100039d8:	2308      	movs	r3, #8
100039da:	18fb      	adds	r3, r7, r3
100039dc:	801a      	strh	r2, [r3, #0]
	param.iacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
100039de:	683b      	ldr	r3, [r7, #0]
100039e0:	7c9b      	ldrb	r3, [r3, #18]
100039e2:	021b      	lsls	r3, r3, #8
100039e4:	b29a      	uxth	r2, r3
100039e6:	683b      	ldr	r3, [r7, #0]
100039e8:	7cdb      	ldrb	r3, [r3, #19]
100039ea:	b29b      	uxth	r3, r3
100039ec:	4313      	orrs	r3, r2
100039ee:	b29a      	uxth	r2, r3
100039f0:	2308      	movs	r3, #8
100039f2:	18fb      	adds	r3, r7, r3
100039f4:	805a      	strh	r2, [r3, #2]
	param.iPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
100039f6:	683b      	ldr	r3, [r7, #0]
100039f8:	7d1b      	ldrb	r3, [r3, #20]
100039fa:	021b      	lsls	r3, r3, #8
100039fc:	b29a      	uxth	r2, r3
100039fe:	683b      	ldr	r3, [r7, #0]
10003a00:	7d5b      	ldrb	r3, [r3, #21]
10003a02:	b29b      	uxth	r3, r3
10003a04:	4313      	orrs	r3, r2
10003a06:	b29a      	uxth	r2, r3
10003a08:	2308      	movs	r3, #8
10003a0a:	18fb      	adds	r3, r7, r3
10003a0c:	809a      	strh	r2, [r3, #4]
	param.ibat  	= ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003a0e:	683b      	ldr	r3, [r7, #0]
10003a10:	7d9b      	ldrb	r3, [r3, #22]
10003a12:	021b      	lsls	r3, r3, #8
10003a14:	b29a      	uxth	r2, r3
10003a16:	683b      	ldr	r3, [r7, #0]
10003a18:	7ddb      	ldrb	r3, [r3, #23]
10003a1a:	b29b      	uxth	r3, r3
10003a1c:	4313      	orrs	r3, r2
10003a1e:	b29a      	uxth	r2, r3
10003a20:	2308      	movs	r3, #8
10003a22:	18fb      	adds	r3, r7, r3
10003a24:	80da      	strh	r2, [r3, #6]

	return param;
10003a26:	687a      	ldr	r2, [r7, #4]
10003a28:	2308      	movs	r3, #8
10003a2a:	18fb      	adds	r3, r7, r3
10003a2c:	1c11      	adds	r1, r2, #0
10003a2e:	1c1a      	adds	r2, r3, #0
10003a30:	2308      	movs	r3, #8
10003a32:	1c08      	adds	r0, r1, #0
10003a34:	1c11      	adds	r1, r2, #0
10003a36:	1c1a      	adds	r2, r3, #0
10003a38:	f005 f8aa 	bl	10008b90 <memcpy>
}
10003a3c:	6878      	ldr	r0, [r7, #4]
10003a3e:	46bd      	mov	sp, r7
10003a40:	b004      	add	sp, #16
10003a42:	bd80      	pop	{r7, pc}

10003a44 <PCS_GetPowerParam>:

PCS_POWER_PARAM_t 	PCS_GetPowerParam(XMC_CAN_MO_t *can_m0_obj)
{
10003a44:	b580      	push	{r7, lr}
10003a46:	b084      	sub	sp, #16
10003a48:	af00      	add	r7, sp, #0
10003a4a:	6078      	str	r0, [r7, #4]
10003a4c:	6039      	str	r1, [r7, #0]
	PCS_POWER_PARAM_t param;

	param.pdcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003a4e:	683b      	ldr	r3, [r7, #0]
10003a50:	7c1b      	ldrb	r3, [r3, #16]
10003a52:	021b      	lsls	r3, r3, #8
10003a54:	b29a      	uxth	r2, r3
10003a56:	683b      	ldr	r3, [r7, #0]
10003a58:	7c5b      	ldrb	r3, [r3, #17]
10003a5a:	b29b      	uxth	r3, r3
10003a5c:	4313      	orrs	r3, r2
10003a5e:	b29b      	uxth	r3, r3
10003a60:	b29a      	uxth	r2, r3
10003a62:	2308      	movs	r3, #8
10003a64:	18fb      	adds	r3, r7, r3
10003a66:	801a      	strh	r2, [r3, #0]
	param.pacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003a68:	683b      	ldr	r3, [r7, #0]
10003a6a:	7c9b      	ldrb	r3, [r3, #18]
10003a6c:	021b      	lsls	r3, r3, #8
10003a6e:	b29a      	uxth	r2, r3
10003a70:	683b      	ldr	r3, [r7, #0]
10003a72:	7cdb      	ldrb	r3, [r3, #19]
10003a74:	b29b      	uxth	r3, r3
10003a76:	4313      	orrs	r3, r2
10003a78:	b29b      	uxth	r3, r3
10003a7a:	b29a      	uxth	r2, r3
10003a7c:	2308      	movs	r3, #8
10003a7e:	18fb      	adds	r3, r7, r3
10003a80:	805a      	strh	r2, [r3, #2]
	param.pPV 	   = ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
10003a82:	683b      	ldr	r3, [r7, #0]
10003a84:	7d1b      	ldrb	r3, [r3, #20]
10003a86:	021b      	lsls	r3, r3, #8
10003a88:	b29a      	uxth	r2, r3
10003a8a:	683b      	ldr	r3, [r7, #0]
10003a8c:	7d5b      	ldrb	r3, [r3, #21]
10003a8e:	b29b      	uxth	r3, r3
10003a90:	4313      	orrs	r3, r2
10003a92:	b29b      	uxth	r3, r3
10003a94:	b29a      	uxth	r2, r3
10003a96:	2308      	movs	r3, #8
10003a98:	18fb      	adds	r3, r7, r3
10003a9a:	809a      	strh	r2, [r3, #4]
	param.pbat     = ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003a9c:	683b      	ldr	r3, [r7, #0]
10003a9e:	7d9b      	ldrb	r3, [r3, #22]
10003aa0:	021b      	lsls	r3, r3, #8
10003aa2:	b29a      	uxth	r2, r3
10003aa4:	683b      	ldr	r3, [r7, #0]
10003aa6:	7ddb      	ldrb	r3, [r3, #23]
10003aa8:	b29b      	uxth	r3, r3
10003aaa:	4313      	orrs	r3, r2
10003aac:	b29b      	uxth	r3, r3
10003aae:	b29a      	uxth	r2, r3
10003ab0:	2308      	movs	r3, #8
10003ab2:	18fb      	adds	r3, r7, r3
10003ab4:	80da      	strh	r2, [r3, #6]

	return param;
10003ab6:	687a      	ldr	r2, [r7, #4]
10003ab8:	2308      	movs	r3, #8
10003aba:	18fb      	adds	r3, r7, r3
10003abc:	1c11      	adds	r1, r2, #0
10003abe:	1c1a      	adds	r2, r3, #0
10003ac0:	2308      	movs	r3, #8
10003ac2:	1c08      	adds	r0, r1, #0
10003ac4:	1c11      	adds	r1, r2, #0
10003ac6:	1c1a      	adds	r2, r3, #0
10003ac8:	f005 f862 	bl	10008b90 <memcpy>
}
10003acc:	6878      	ldr	r0, [r7, #4]
10003ace:	46bd      	mov	sp, r7
10003ad0:	b004      	add	sp, #16
10003ad2:	bd80      	pop	{r7, pc}

10003ad4 <PCS_GetMiscParam>:

PCS_MISC_PARAM_t 	PCS_GetMiscParam(XMC_CAN_MO_t *can_m0_obj)
{
10003ad4:	b580      	push	{r7, lr}
10003ad6:	b084      	sub	sp, #16
10003ad8:	af00      	add	r7, sp, #0
10003ada:	6078      	str	r0, [r7, #4]
	PCS_MISC_PARAM_t param;

	param.tempPCS 		= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003adc:	687b      	ldr	r3, [r7, #4]
10003ade:	7c1b      	ldrb	r3, [r3, #16]
10003ae0:	021b      	lsls	r3, r3, #8
10003ae2:	b29a      	uxth	r2, r3
10003ae4:	687b      	ldr	r3, [r7, #4]
10003ae6:	7c5b      	ldrb	r3, [r3, #17]
10003ae8:	b29b      	uxth	r3, r3
10003aea:	4313      	orrs	r3, r2
10003aec:	b29b      	uxth	r3, r3
10003aee:	b29a      	uxth	r2, r3
10003af0:	2308      	movs	r3, #8
10003af2:	18fb      	adds	r3, r7, r3
10003af4:	801a      	strh	r2, [r3, #0]
	param.frequency  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	7c9b      	ldrb	r3, [r3, #18]
10003afa:	021b      	lsls	r3, r3, #8
10003afc:	b29a      	uxth	r2, r3
10003afe:	687b      	ldr	r3, [r7, #4]
10003b00:	7cdb      	ldrb	r3, [r3, #19]
10003b02:	b29b      	uxth	r3, r3
10003b04:	4313      	orrs	r3, r2
10003b06:	b29b      	uxth	r3, r3
10003b08:	b29a      	uxth	r2, r3
10003b0a:	2308      	movs	r3, #8
10003b0c:	18fb      	adds	r3, r7, r3
10003b0e:	805a      	strh	r2, [r3, #2]

	return param;
10003b10:	230c      	movs	r3, #12
10003b12:	18fb      	adds	r3, r7, r3
10003b14:	2208      	movs	r2, #8
10003b16:	18ba      	adds	r2, r7, r2
10003b18:	6812      	ldr	r2, [r2, #0]
10003b1a:	601a      	str	r2, [r3, #0]
10003b1c:	230c      	movs	r3, #12
10003b1e:	18fa      	adds	r2, r7, r3
10003b20:	2300      	movs	r3, #0
10003b22:	8811      	ldrh	r1, [r2, #0]
10003b24:	0409      	lsls	r1, r1, #16
10003b26:	0c09      	lsrs	r1, r1, #16
10003b28:	0c1b      	lsrs	r3, r3, #16
10003b2a:	041b      	lsls	r3, r3, #16
10003b2c:	430b      	orrs	r3, r1
10003b2e:	8852      	ldrh	r2, [r2, #2]
10003b30:	0412      	lsls	r2, r2, #16
10003b32:	041b      	lsls	r3, r3, #16
10003b34:	0c1b      	lsrs	r3, r3, #16
10003b36:	4313      	orrs	r3, r2
}
10003b38:	1c18      	adds	r0, r3, #0
10003b3a:	46bd      	mov	sp, r7
10003b3c:	b004      	add	sp, #16
10003b3e:	bd80      	pop	{r7, pc}

10003b40 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10003b40:	b580      	push	{r7, lr}
10003b42:	b082      	sub	sp, #8
10003b44:	af00      	add	r7, sp, #0
10003b46:	6078      	str	r0, [r7, #4]
10003b48:	1c0a      	adds	r2, r1, #0
10003b4a:	1cfb      	adds	r3, r7, #3
10003b4c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10003b4e:	1cfb      	adds	r3, r7, #3
10003b50:	781b      	ldrb	r3, [r3, #0]
10003b52:	2201      	movs	r2, #1
10003b54:	409a      	lsls	r2, r3
10003b56:	687b      	ldr	r3, [r7, #4]
10003b58:	605a      	str	r2, [r3, #4]
}
10003b5a:	46bd      	mov	sp, r7
10003b5c:	b002      	add	sp, #8
10003b5e:	bd80      	pop	{r7, pc}

10003b60 <GPIO_Init>:
 */

#include "gpio_op.h"

void GPIO_Init(void)
{
10003b60:	b580      	push	{r7, lr}
10003b62:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	XMC_GPIO_Init(P2_11, &led);
10003b64:	4a24      	ldr	r2, [pc, #144]	; (10003bf8 <GPIO_Init+0x98>)
10003b66:	4b25      	ldr	r3, [pc, #148]	; (10003bfc <GPIO_Init+0x9c>)
10003b68:	1c10      	adds	r0, r2, #0
10003b6a:	210b      	movs	r1, #11
10003b6c:	1c1a      	adds	r2, r3, #0
10003b6e:	f001 f873 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_12, &led);
10003b72:	4a21      	ldr	r2, [pc, #132]	; (10003bf8 <GPIO_Init+0x98>)
10003b74:	4b21      	ldr	r3, [pc, #132]	; (10003bfc <GPIO_Init+0x9c>)
10003b76:	1c10      	adds	r0, r2, #0
10003b78:	210c      	movs	r1, #12
10003b7a:	1c1a      	adds	r2, r3, #0
10003b7c:	f001 f86c 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_13, &led);
10003b80:	4a1d      	ldr	r2, [pc, #116]	; (10003bf8 <GPIO_Init+0x98>)
10003b82:	4b1e      	ldr	r3, [pc, #120]	; (10003bfc <GPIO_Init+0x9c>)
10003b84:	1c10      	adds	r0, r2, #0
10003b86:	210d      	movs	r1, #13
10003b88:	1c1a      	adds	r2, r3, #0
10003b8a:	f001 f865 	bl	10004c58 <XMC_GPIO_Init>

	/* Initialize DIP Switches */
	XMC_GPIO_Init(P4_2,&dipswitch_config);
10003b8e:	4a1c      	ldr	r2, [pc, #112]	; (10003c00 <GPIO_Init+0xa0>)
10003b90:	4b1c      	ldr	r3, [pc, #112]	; (10003c04 <GPIO_Init+0xa4>)
10003b92:	1c10      	adds	r0, r2, #0
10003b94:	2102      	movs	r1, #2
10003b96:	1c1a      	adds	r2, r3, #0
10003b98:	f001 f85e 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_3,&dipswitch_config);
10003b9c:	4a18      	ldr	r2, [pc, #96]	; (10003c00 <GPIO_Init+0xa0>)
10003b9e:	4b19      	ldr	r3, [pc, #100]	; (10003c04 <GPIO_Init+0xa4>)
10003ba0:	1c10      	adds	r0, r2, #0
10003ba2:	2103      	movs	r1, #3
10003ba4:	1c1a      	adds	r2, r3, #0
10003ba6:	f001 f857 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_4,&dipswitch_config);
10003baa:	4a15      	ldr	r2, [pc, #84]	; (10003c00 <GPIO_Init+0xa0>)
10003bac:	4b15      	ldr	r3, [pc, #84]	; (10003c04 <GPIO_Init+0xa4>)
10003bae:	1c10      	adds	r0, r2, #0
10003bb0:	2104      	movs	r1, #4
10003bb2:	1c1a      	adds	r2, r3, #0
10003bb4:	f001 f850 	bl	10004c58 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_5,&dipswitch_config);
10003bb8:	4a11      	ldr	r2, [pc, #68]	; (10003c00 <GPIO_Init+0xa0>)
10003bba:	4b12      	ldr	r3, [pc, #72]	; (10003c04 <GPIO_Init+0xa4>)
10003bbc:	1c10      	adds	r0, r2, #0
10003bbe:	2105      	movs	r1, #5
10003bc0:	1c1a      	adds	r2, r3, #0
10003bc2:	f001 f849 	bl	10004c58 <XMC_GPIO_Init>

	/* Initialize Start Button */
	XMC_GPIO_Init(P2_2, &button);
10003bc6:	4a0c      	ldr	r2, [pc, #48]	; (10003bf8 <GPIO_Init+0x98>)
10003bc8:	4b0f      	ldr	r3, [pc, #60]	; (10003c08 <GPIO_Init+0xa8>)
10003bca:	1c10      	adds	r0, r2, #0
10003bcc:	2102      	movs	r1, #2
10003bce:	1c1a      	adds	r2, r3, #0
10003bd0:	f001 f842 	bl	10004c58 <XMC_GPIO_Init>

	/* Set all LED off */
	XMC_GPIO_SetOutputHigh(P2_11);
10003bd4:	4b08      	ldr	r3, [pc, #32]	; (10003bf8 <GPIO_Init+0x98>)
10003bd6:	1c18      	adds	r0, r3, #0
10003bd8:	210b      	movs	r1, #11
10003bda:	f7ff ffb1 	bl	10003b40 <XMC_GPIO_SetOutputHigh>
	XMC_GPIO_SetOutputHigh(P2_12);
10003bde:	4b06      	ldr	r3, [pc, #24]	; (10003bf8 <GPIO_Init+0x98>)
10003be0:	1c18      	adds	r0, r3, #0
10003be2:	210c      	movs	r1, #12
10003be4:	f7ff ffac 	bl	10003b40 <XMC_GPIO_SetOutputHigh>
	XMC_GPIO_SetOutputHigh(P2_13);
10003be8:	4b03      	ldr	r3, [pc, #12]	; (10003bf8 <GPIO_Init+0x98>)
10003bea:	1c18      	adds	r0, r3, #0
10003bec:	210d      	movs	r1, #13
10003bee:	f7ff ffa7 	bl	10003b40 <XMC_GPIO_SetOutputHigh>


}
10003bf2:	46bd      	mov	sp, r7
10003bf4:	bd80      	pop	{r7, pc}
10003bf6:	46c0      	nop			; (mov r8, r8)
10003bf8:	40040200 	.word	0x40040200
10003bfc:	20000678 	.word	0x20000678
10003c00:	40040400 	.word	0x40040400
10003c04:	200007bc 	.word	0x200007bc
10003c08:	200007b4 	.word	0x200007b4

10003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003c0c:	b580      	push	{r7, lr}
10003c0e:	b082      	sub	sp, #8
10003c10:	af00      	add	r7, sp, #0
10003c12:	1c02      	adds	r2, r0, #0
10003c14:	1dfb      	adds	r3, r7, #7
10003c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003c18:	1dfb      	adds	r3, r7, #7
10003c1a:	781b      	ldrb	r3, [r3, #0]
10003c1c:	2b7f      	cmp	r3, #127	; 0x7f
10003c1e:	d809      	bhi.n	10003c34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003c20:	4b06      	ldr	r3, [pc, #24]	; (10003c3c <__NVIC_EnableIRQ+0x30>)
10003c22:	1dfa      	adds	r2, r7, #7
10003c24:	7812      	ldrb	r2, [r2, #0]
10003c26:	1c11      	adds	r1, r2, #0
10003c28:	221f      	movs	r2, #31
10003c2a:	400a      	ands	r2, r1
10003c2c:	2101      	movs	r1, #1
10003c2e:	4091      	lsls	r1, r2
10003c30:	1c0a      	adds	r2, r1, #0
10003c32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10003c34:	46bd      	mov	sp, r7
10003c36:	b002      	add	sp, #8
10003c38:	bd80      	pop	{r7, pc}
10003c3a:	46c0      	nop			; (mov r8, r8)
10003c3c:	e000e100 	.word	0xe000e100

10003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003c40:	b5b0      	push	{r4, r5, r7, lr}
10003c42:	b082      	sub	sp, #8
10003c44:	af00      	add	r7, sp, #0
10003c46:	1c02      	adds	r2, r0, #0
10003c48:	6039      	str	r1, [r7, #0]
10003c4a:	1dfb      	adds	r3, r7, #7
10003c4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003c4e:	1dfb      	adds	r3, r7, #7
10003c50:	781b      	ldrb	r3, [r3, #0]
10003c52:	2b7f      	cmp	r3, #127	; 0x7f
10003c54:	d827      	bhi.n	10003ca6 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003c56:	4c2d      	ldr	r4, [pc, #180]	; (10003d0c <__NVIC_SetPriority+0xcc>)
10003c58:	1dfb      	adds	r3, r7, #7
10003c5a:	781b      	ldrb	r3, [r3, #0]
10003c5c:	b25b      	sxtb	r3, r3
10003c5e:	089b      	lsrs	r3, r3, #2
10003c60:	492a      	ldr	r1, [pc, #168]	; (10003d0c <__NVIC_SetPriority+0xcc>)
10003c62:	1dfa      	adds	r2, r7, #7
10003c64:	7812      	ldrb	r2, [r2, #0]
10003c66:	b252      	sxtb	r2, r2
10003c68:	0892      	lsrs	r2, r2, #2
10003c6a:	32c0      	adds	r2, #192	; 0xc0
10003c6c:	0092      	lsls	r2, r2, #2
10003c6e:	5852      	ldr	r2, [r2, r1]
10003c70:	1df9      	adds	r1, r7, #7
10003c72:	7809      	ldrb	r1, [r1, #0]
10003c74:	1c08      	adds	r0, r1, #0
10003c76:	2103      	movs	r1, #3
10003c78:	4001      	ands	r1, r0
10003c7a:	00c9      	lsls	r1, r1, #3
10003c7c:	1c08      	adds	r0, r1, #0
10003c7e:	21ff      	movs	r1, #255	; 0xff
10003c80:	4081      	lsls	r1, r0
10003c82:	43c9      	mvns	r1, r1
10003c84:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003c86:	683a      	ldr	r2, [r7, #0]
10003c88:	0192      	lsls	r2, r2, #6
10003c8a:	20ff      	movs	r0, #255	; 0xff
10003c8c:	4002      	ands	r2, r0
10003c8e:	1df8      	adds	r0, r7, #7
10003c90:	7800      	ldrb	r0, [r0, #0]
10003c92:	1c05      	adds	r5, r0, #0
10003c94:	2003      	movs	r0, #3
10003c96:	4028      	ands	r0, r5
10003c98:	00c0      	lsls	r0, r0, #3
10003c9a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003c9c:	430a      	orrs	r2, r1
10003c9e:	33c0      	adds	r3, #192	; 0xc0
10003ca0:	009b      	lsls	r3, r3, #2
10003ca2:	511a      	str	r2, [r3, r4]
10003ca4:	e02e      	b.n	10003d04 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003ca6:	4c1a      	ldr	r4, [pc, #104]	; (10003d10 <__NVIC_SetPriority+0xd0>)
10003ca8:	1dfb      	adds	r3, r7, #7
10003caa:	781b      	ldrb	r3, [r3, #0]
10003cac:	1c1a      	adds	r2, r3, #0
10003cae:	230f      	movs	r3, #15
10003cb0:	4013      	ands	r3, r2
10003cb2:	3b08      	subs	r3, #8
10003cb4:	0899      	lsrs	r1, r3, #2
10003cb6:	4a16      	ldr	r2, [pc, #88]	; (10003d10 <__NVIC_SetPriority+0xd0>)
10003cb8:	1dfb      	adds	r3, r7, #7
10003cba:	781b      	ldrb	r3, [r3, #0]
10003cbc:	1c18      	adds	r0, r3, #0
10003cbe:	230f      	movs	r3, #15
10003cc0:	4003      	ands	r3, r0
10003cc2:	3b08      	subs	r3, #8
10003cc4:	089b      	lsrs	r3, r3, #2
10003cc6:	3306      	adds	r3, #6
10003cc8:	009b      	lsls	r3, r3, #2
10003cca:	18d3      	adds	r3, r2, r3
10003ccc:	685b      	ldr	r3, [r3, #4]
10003cce:	1dfa      	adds	r2, r7, #7
10003cd0:	7812      	ldrb	r2, [r2, #0]
10003cd2:	1c10      	adds	r0, r2, #0
10003cd4:	2203      	movs	r2, #3
10003cd6:	4002      	ands	r2, r0
10003cd8:	00d2      	lsls	r2, r2, #3
10003cda:	1c10      	adds	r0, r2, #0
10003cdc:	22ff      	movs	r2, #255	; 0xff
10003cde:	4082      	lsls	r2, r0
10003ce0:	43d2      	mvns	r2, r2
10003ce2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003ce4:	683b      	ldr	r3, [r7, #0]
10003ce6:	019b      	lsls	r3, r3, #6
10003ce8:	20ff      	movs	r0, #255	; 0xff
10003cea:	4003      	ands	r3, r0
10003cec:	1df8      	adds	r0, r7, #7
10003cee:	7800      	ldrb	r0, [r0, #0]
10003cf0:	1c05      	adds	r5, r0, #0
10003cf2:	2003      	movs	r0, #3
10003cf4:	4028      	ands	r0, r5
10003cf6:	00c0      	lsls	r0, r0, #3
10003cf8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003cfa:	431a      	orrs	r2, r3
10003cfc:	1d8b      	adds	r3, r1, #6
10003cfe:	009b      	lsls	r3, r3, #2
10003d00:	18e3      	adds	r3, r4, r3
10003d02:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003d04:	46bd      	mov	sp, r7
10003d06:	b002      	add	sp, #8
10003d08:	bdb0      	pop	{r4, r5, r7, pc}
10003d0a:	46c0      	nop			; (mov r8, r8)
10003d0c:	e000e100 	.word	0xe000e100
10003d10:	e000ed00 	.word	0xe000ed00

10003d14 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10003d14:	b580      	push	{r7, lr}
10003d16:	b082      	sub	sp, #8
10003d18:	af00      	add	r7, sp, #0
10003d1a:	6078      	str	r0, [r7, #4]
10003d1c:	1c08      	adds	r0, r1, #0
10003d1e:	1c11      	adds	r1, r2, #0
10003d20:	1cfb      	adds	r3, r7, #3
10003d22:	1c02      	adds	r2, r0, #0
10003d24:	701a      	strb	r2, [r3, #0]
10003d26:	1cbb      	adds	r3, r7, #2
10003d28:	1c0a      	adds	r2, r1, #0
10003d2a:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003d2c:	1cfb      	adds	r3, r7, #3
10003d2e:	7818      	ldrb	r0, [r3, #0]
10003d30:	1cfb      	adds	r3, r7, #3
10003d32:	781b      	ldrb	r3, [r3, #0]
10003d34:	687a      	ldr	r2, [r7, #4]
10003d36:	3306      	adds	r3, #6
10003d38:	009b      	lsls	r3, r3, #2
10003d3a:	18d3      	adds	r3, r2, r3
10003d3c:	685b      	ldr	r3, [r3, #4]
10003d3e:	2207      	movs	r2, #7
10003d40:	4393      	bics	r3, r2
10003d42:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10003d44:	1cbb      	adds	r3, r7, #2
10003d46:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003d48:	431a      	orrs	r2, r3
10003d4a:	6879      	ldr	r1, [r7, #4]
10003d4c:	1d83      	adds	r3, r0, #6
10003d4e:	009b      	lsls	r3, r3, #2
10003d50:	18cb      	adds	r3, r1, r3
10003d52:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10003d54:	46bd      	mov	sp, r7
10003d56:	b002      	add	sp, #8
10003d58:	bd80      	pop	{r7, pc}
10003d5a:	46c0      	nop			; (mov r8, r8)

10003d5c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10003d5c:	b580      	push	{r7, lr}
10003d5e:	b082      	sub	sp, #8
10003d60:	af00      	add	r7, sp, #0
10003d62:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10003d64:	687b      	ldr	r3, [r7, #4]
10003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003d68:	b2db      	uxtb	r3, r3
10003d6a:	227f      	movs	r2, #127	; 0x7f
10003d6c:	4393      	bics	r3, r2
10003d6e:	b2db      	uxtb	r3, r3
}
10003d70:	1c18      	adds	r0, r3, #0
10003d72:	46bd      	mov	sp, r7
10003d74:	b002      	add	sp, #8
10003d76:	bd80      	pop	{r7, pc}

10003d78 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10003d78:	b580      	push	{r7, lr}
10003d7a:	b082      	sub	sp, #8
10003d7c:	af00      	add	r7, sp, #0
10003d7e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10003d80:	687b      	ldr	r3, [r7, #4]
10003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003d84:	220f      	movs	r2, #15
10003d86:	4393      	bics	r3, r2
10003d88:	2202      	movs	r2, #2
10003d8a:	431a      	orrs	r2, r3
10003d8c:	687b      	ldr	r3, [r7, #4]
10003d8e:	641a      	str	r2, [r3, #64]	; 0x40
}
10003d90:	46bd      	mov	sp, r7
10003d92:	b002      	add	sp, #8
10003d94:	bd80      	pop	{r7, pc}
10003d96:	46c0      	nop			; (mov r8, r8)

10003d98 <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
10003d98:	b580      	push	{r7, lr}
10003d9a:	b084      	sub	sp, #16
10003d9c:	af00      	add	r7, sp, #0
10003d9e:	60f8      	str	r0, [r7, #12]
10003da0:	607a      	str	r2, [r7, #4]
10003da2:	230b      	movs	r3, #11
10003da4:	18fb      	adds	r3, r7, r3
10003da6:	1c0a      	adds	r2, r1, #0
10003da8:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
10003daa:	68f9      	ldr	r1, [r7, #12]
10003dac:	230b      	movs	r3, #11
10003dae:	18fb      	adds	r3, r7, r3
10003db0:	781a      	ldrb	r2, [r3, #0]
10003db2:	687b      	ldr	r3, [r7, #4]
10003db4:	1c08      	adds	r0, r1, #0
10003db6:	1c11      	adds	r1, r2, #0
10003db8:	1c1a      	adds	r2, r3, #0
10003dba:	f002 f801 	bl	10005dc0 <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
10003dbe:	46bd      	mov	sp, r7
10003dc0:	b004      	add	sp, #16
10003dc2:	bd80      	pop	{r7, pc}

10003dc4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10003dc4:	b580      	push	{r7, lr}
10003dc6:	b082      	sub	sp, #8
10003dc8:	af00      	add	r7, sp, #0
10003dca:	6078      	str	r0, [r7, #4]
10003dcc:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10003dce:	687b      	ldr	r3, [r7, #4]
10003dd0:	683a      	ldr	r2, [r7, #0]
10003dd2:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003dd4:	46bd      	mov	sp, r7
10003dd6:	b002      	add	sp, #8
10003dd8:	bd80      	pop	{r7, pc}
10003dda:	46c0      	nop			; (mov r8, r8)

10003ddc <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
10003ddc:	b580      	push	{r7, lr}
10003dde:	b082      	sub	sp, #8
10003de0:	af00      	add	r7, sp, #0
10003de2:	6078      	str	r0, [r7, #4]
10003de4:	1c08      	adds	r0, r1, #0
10003de6:	1c11      	adds	r1, r2, #0
10003de8:	1cfb      	adds	r3, r7, #3
10003dea:	1c02      	adds	r2, r0, #0
10003dec:	701a      	strb	r2, [r3, #0]
10003dee:	1cbb      	adds	r3, r7, #2
10003df0:	1c0a      	adds	r2, r1, #0
10003df2:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
10003df4:	1cfb      	adds	r3, r7, #3
10003df6:	7818      	ldrb	r0, [r3, #0]
10003df8:	1cfb      	adds	r3, r7, #3
10003dfa:	781b      	ldrb	r3, [r3, #0]
10003dfc:	687a      	ldr	r2, [r7, #4]
10003dfe:	3306      	adds	r3, #6
10003e00:	009b      	lsls	r3, r3, #2
10003e02:	18d3      	adds	r3, r2, r3
10003e04:	685b      	ldr	r3, [r3, #4]
10003e06:	2250      	movs	r2, #80	; 0x50
10003e08:	4393      	bics	r3, r2
10003e0a:	1c1a      	adds	r2, r3, #0
10003e0c:	6879      	ldr	r1, [r7, #4]
10003e0e:	1d83      	adds	r3, r0, #6
10003e10:	009b      	lsls	r3, r3, #2
10003e12:	18cb      	adds	r3, r1, r3
10003e14:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10003e16:	6879      	ldr	r1, [r7, #4]
10003e18:	1cfb      	adds	r3, r7, #3
10003e1a:	781a      	ldrb	r2, [r3, #0]
10003e1c:	1cbb      	adds	r3, r7, #2
10003e1e:	781b      	ldrb	r3, [r3, #0]
10003e20:	1c08      	adds	r0, r1, #0
10003e22:	1c11      	adds	r1, r2, #0
10003e24:	1c1a      	adds	r2, r3, #0
10003e26:	f7ff ff75 	bl	10003d14 <XMC_USIC_CH_SetInputSource>
}
10003e2a:	46bd      	mov	sp, r7
10003e2c:	b002      	add	sp, #8
10003e2e:	bd80      	pop	{r7, pc}

10003e30 <GENIX_ConnectionInit>:
 */

#include "genix_op.h"

void GENIX_ConnectionInit(void)
{
10003e30:	b580      	push	{r7, lr}
10003e32:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P0_2, &tx_genix_config);
10003e34:	4a1e      	ldr	r2, [pc, #120]	; (10003eb0 <GENIX_ConnectionInit+0x80>)
10003e36:	4b1f      	ldr	r3, [pc, #124]	; (10003eb4 <GENIX_ConnectionInit+0x84>)
10003e38:	1c10      	adds	r0, r2, #0
10003e3a:	2102      	movs	r1, #2
10003e3c:	1c1a      	adds	r2, r3, #0
10003e3e:	f000 ff0b 	bl	10004c58 <XMC_GPIO_Init>
    XMC_GPIO_Init(P0_3, &rx_genix_config);
10003e42:	4a1b      	ldr	r2, [pc, #108]	; (10003eb0 <GENIX_ConnectionInit+0x80>)
10003e44:	4b1c      	ldr	r3, [pc, #112]	; (10003eb8 <GENIX_ConnectionInit+0x88>)
10003e46:	1c10      	adds	r0, r2, #0
10003e48:	2103      	movs	r1, #3
10003e4a:	1c1a      	adds	r2, r3, #0
10003e4c:	f000 ff04 	bl	10004c58 <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC1_CH0);
10003e50:	4b1a      	ldr	r3, [pc, #104]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003e52:	1c18      	adds	r0, r3, #0
10003e54:	f001 fe7c 	bl	10005b50 <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC1_CH0, &uart_genix_config);
10003e58:	4a18      	ldr	r2, [pc, #96]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003e5a:	4b19      	ldr	r3, [pc, #100]	; (10003ec0 <GENIX_ConnectionInit+0x90>)
10003e5c:	1c10      	adds	r0, r2, #0
10003e5e:	1c19      	adds	r1, r3, #0
10003e60:	f001 fdd4 	bl	10005a0c <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC1_CH0, XMC_UART_CH_INPUT_RXD, USIC1_C0_DX0_P0_3);
10003e64:	4b15      	ldr	r3, [pc, #84]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003e66:	1c18      	adds	r0, r3, #0
10003e68:	2100      	movs	r1, #0
10003e6a:	2201      	movs	r2, #1
10003e6c:	f7ff ffb6 	bl	10003ddc <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC1_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
10003e70:	4a12      	ldr	r2, [pc, #72]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003e72:	2380      	movs	r3, #128	; 0x80
10003e74:	01db      	lsls	r3, r3, #7
10003e76:	1c10      	adds	r0, r2, #0
10003e78:	1c19      	adds	r1, r3, #0
10003e7a:	f001 fe4f 	bl	10005b1c <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC1_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
10003e7e:	4b0f      	ldr	r3, [pc, #60]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003e80:	1c18      	adds	r0, r3, #0
10003e82:	2108      	movs	r1, #8
10003e84:	2203      	movs	r2, #3
10003e86:	f7ff ff87 	bl	10003d98 <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ12_IRQn, XMC_SCU_IRQCTRL_USIC1_SR3_IRQ12);
10003e8a:	4b0e      	ldr	r3, [pc, #56]	; (10003ec4 <GENIX_ConnectionInit+0x94>)
10003e8c:	200c      	movs	r0, #12
10003e8e:	1c19      	adds	r1, r3, #0
10003e90:	f000 fff0 	bl	10004e74 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ12_IRQn, 10U);
10003e94:	200c      	movs	r0, #12
10003e96:	210a      	movs	r1, #10
10003e98:	f7ff fed2 	bl	10003c40 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ12_IRQn);
10003e9c:	200c      	movs	r0, #12
10003e9e:	f7ff feb5 	bl	10003c0c <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC1_CH0); // Sets the USIC channel operation mode to UART mode
10003ea2:	4b06      	ldr	r3, [pc, #24]	; (10003ebc <GENIX_ConnectionInit+0x8c>)
10003ea4:	1c18      	adds	r0, r3, #0
10003ea6:	f7ff ff67 	bl	10003d78 <XMC_UART_CH_Start>
}
10003eaa:	46bd      	mov	sp, r7
10003eac:	bd80      	pop	{r7, pc}
10003eae:	46c0      	nop			; (mov r8, r8)
10003eb0:	40040000 	.word	0x40040000
10003eb4:	20000680 	.word	0x20000680
10003eb8:	200007c4 	.word	0x200007c4
10003ebc:	48004000 	.word	0x48004000
10003ec0:	20000688 	.word	0x20000688
10003ec4:	00000c01 	.word	0x00000c01

10003ec8 <GENIX_SendStream>:

void GENIX_SendStream(char *buffer, uint8_t length)
{
10003ec8:	b580      	push	{r7, lr}
10003eca:	b084      	sub	sp, #16
10003ecc:	af00      	add	r7, sp, #0
10003ece:	6078      	str	r0, [r7, #4]
10003ed0:	1c0a      	adds	r2, r1, #0
10003ed2:	1cfb      	adds	r3, r7, #3
10003ed4:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
10003ed6:	230f      	movs	r3, #15
10003ed8:	18fb      	adds	r3, r7, r3
10003eda:	2200      	movs	r2, #0
10003edc:	701a      	strb	r2, [r3, #0]
	while(count < length)
10003ede:	e01f      	b.n	10003f20 <GENIX_SendStream+0x58>
	{
		while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC1_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003ee0:	46c0      	nop			; (mov r8, r8)
10003ee2:	4b14      	ldr	r3, [pc, #80]	; (10003f34 <GENIX_SendStream+0x6c>)
10003ee4:	1c18      	adds	r0, r3, #0
10003ee6:	f7ff ff39 	bl	10003d5c <XMC_USIC_CH_GetTransmitBufferStatus>
10003eea:	1e03      	subs	r3, r0, #0
10003eec:	2b80      	cmp	r3, #128	; 0x80
10003eee:	d0f8      	beq.n	10003ee2 <GENIX_SendStream+0x1a>
		XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10003ef0:	4a10      	ldr	r2, [pc, #64]	; (10003f34 <GENIX_SendStream+0x6c>)
10003ef2:	2380      	movs	r3, #128	; 0x80
10003ef4:	019b      	lsls	r3, r3, #6
10003ef6:	1c10      	adds	r0, r2, #0
10003ef8:	1c19      	adds	r1, r3, #0
10003efa:	f7ff ff63 	bl	10003dc4 <XMC_UART_CH_ClearStatusFlag>

		XMC_USIC1_CH0->TBUF[0U] = buffer[count];
10003efe:	490d      	ldr	r1, [pc, #52]	; (10003f34 <GENIX_SendStream+0x6c>)
10003f00:	230f      	movs	r3, #15
10003f02:	18fb      	adds	r3, r7, r3
10003f04:	781b      	ldrb	r3, [r3, #0]
10003f06:	687a      	ldr	r2, [r7, #4]
10003f08:	18d3      	adds	r3, r2, r3
10003f0a:	781b      	ldrb	r3, [r3, #0]
10003f0c:	1c1a      	adds	r2, r3, #0
10003f0e:	2380      	movs	r3, #128	; 0x80
10003f10:	50ca      	str	r2, [r1, r3]

		count++;
10003f12:	230f      	movs	r3, #15
10003f14:	18fb      	adds	r3, r7, r3
10003f16:	781a      	ldrb	r2, [r3, #0]
10003f18:	230f      	movs	r3, #15
10003f1a:	18fb      	adds	r3, r7, r3
10003f1c:	3201      	adds	r2, #1
10003f1e:	701a      	strb	r2, [r3, #0]
}

void GENIX_SendStream(char *buffer, uint8_t length)
{
	uint8_t count = 0;
	while(count < length)
10003f20:	230f      	movs	r3, #15
10003f22:	18fa      	adds	r2, r7, r3
10003f24:	1cfb      	adds	r3, r7, #3
10003f26:	7812      	ldrb	r2, [r2, #0]
10003f28:	781b      	ldrb	r3, [r3, #0]
10003f2a:	429a      	cmp	r2, r3
10003f2c:	d3d8      	bcc.n	10003ee0 <GENIX_SendStream+0x18>

		XMC_USIC1_CH0->TBUF[0U] = buffer[count];

		count++;
	 }
}
10003f2e:	46bd      	mov	sp, r7
10003f30:	b004      	add	sp, #16
10003f32:	bd80      	pop	{r7, pc}
10003f34:	48004000 	.word	0x48004000

10003f38 <GENIX_RequestData>:

void GENIX_RequestData(GENIX_COMMAND_TYPE_t command)
{
10003f38:	b580      	push	{r7, lr}
10003f3a:	b086      	sub	sp, #24
10003f3c:	af00      	add	r7, sp, #0
10003f3e:	1c02      	adds	r2, r0, #0
10003f40:	1dfb      	adds	r3, r7, #7
10003f42:	701a      	strb	r2, [r3, #0]
	uint8_t ecc;
	uint8_t buffer[13];

	buffer[0] = 0xCC;
10003f44:	2308      	movs	r3, #8
10003f46:	18fb      	adds	r3, r7, r3
10003f48:	22cc      	movs	r2, #204	; 0xcc
10003f4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0xDD;
10003f4c:	2308      	movs	r3, #8
10003f4e:	18fb      	adds	r3, r7, r3
10003f50:	22dd      	movs	r2, #221	; 0xdd
10003f52:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0x0A;
10003f54:	2308      	movs	r3, #8
10003f56:	18fb      	adds	r3, r7, r3
10003f58:	220a      	movs	r2, #10
10003f5a:	709a      	strb	r2, [r3, #2]
	buffer[3] = command;
10003f5c:	2308      	movs	r3, #8
10003f5e:	18fb      	adds	r3, r7, r3
10003f60:	1dfa      	adds	r2, r7, #7
10003f62:	7812      	ldrb	r2, [r2, #0]
10003f64:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0x00;
10003f66:	2308      	movs	r3, #8
10003f68:	18fb      	adds	r3, r7, r3
10003f6a:	2200      	movs	r2, #0
10003f6c:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0x00;
10003f6e:	2308      	movs	r3, #8
10003f70:	18fb      	adds	r3, r7, r3
10003f72:	2200      	movs	r2, #0
10003f74:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x00;
10003f76:	2308      	movs	r3, #8
10003f78:	18fb      	adds	r3, r7, r3
10003f7a:	2200      	movs	r2, #0
10003f7c:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x00;
10003f7e:	2308      	movs	r3, #8
10003f80:	18fb      	adds	r3, r7, r3
10003f82:	2200      	movs	r2, #0
10003f84:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0x00;
10003f86:	2308      	movs	r3, #8
10003f88:	18fb      	adds	r3, r7, r3
10003f8a:	2200      	movs	r2, #0
10003f8c:	721a      	strb	r2, [r3, #8]
	buffer[9] = 0x00;
10003f8e:	2308      	movs	r3, #8
10003f90:	18fb      	adds	r3, r7, r3
10003f92:	2200      	movs	r2, #0
10003f94:	725a      	strb	r2, [r3, #9]

	ecc = 0x00;
10003f96:	2317      	movs	r3, #23
10003f98:	18fb      	adds	r3, r7, r3
10003f9a:	2200      	movs	r2, #0
10003f9c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
10003f9e:	2316      	movs	r3, #22
10003fa0:	18fb      	adds	r3, r7, r3
10003fa2:	2200      	movs	r2, #0
10003fa4:	701a      	strb	r2, [r3, #0]
10003fa6:	e013      	b.n	10003fd0 <GENIX_RequestData+0x98>
	{
		ecc = ecc+buffer[i];
10003fa8:	2316      	movs	r3, #22
10003faa:	18fb      	adds	r3, r7, r3
10003fac:	781b      	ldrb	r3, [r3, #0]
10003fae:	2208      	movs	r2, #8
10003fb0:	18ba      	adds	r2, r7, r2
10003fb2:	5cd1      	ldrb	r1, [r2, r3]
10003fb4:	2317      	movs	r3, #23
10003fb6:	18fb      	adds	r3, r7, r3
10003fb8:	2217      	movs	r2, #23
10003fba:	18ba      	adds	r2, r7, r2
10003fbc:	7812      	ldrb	r2, [r2, #0]
10003fbe:	188a      	adds	r2, r1, r2
10003fc0:	701a      	strb	r2, [r3, #0]
	buffer[7] = 0x00;
	buffer[8] = 0x00;
	buffer[9] = 0x00;

	ecc = 0x00;
	for(uint8_t i = 0; i<10; i++)
10003fc2:	2316      	movs	r3, #22
10003fc4:	18fb      	adds	r3, r7, r3
10003fc6:	781a      	ldrb	r2, [r3, #0]
10003fc8:	2316      	movs	r3, #22
10003fca:	18fb      	adds	r3, r7, r3
10003fcc:	3201      	adds	r2, #1
10003fce:	701a      	strb	r2, [r3, #0]
10003fd0:	2316      	movs	r3, #22
10003fd2:	18fb      	adds	r3, r7, r3
10003fd4:	781b      	ldrb	r3, [r3, #0]
10003fd6:	2b09      	cmp	r3, #9
10003fd8:	d9e6      	bls.n	10003fa8 <GENIX_RequestData+0x70>
	{
		ecc = ecc+buffer[i];
	}

	ecc = 0x1D;
10003fda:	2317      	movs	r3, #23
10003fdc:	18fb      	adds	r3, r7, r3
10003fde:	221d      	movs	r2, #29
10003fe0:	701a      	strb	r2, [r3, #0]
	buffer[10] = ecc;
10003fe2:	2308      	movs	r3, #8
10003fe4:	18fb      	adds	r3, r7, r3
10003fe6:	2217      	movs	r2, #23
10003fe8:	18ba      	adds	r2, r7, r2
10003fea:	7812      	ldrb	r2, [r2, #0]
10003fec:	729a      	strb	r2, [r3, #10]
	buffer[11] = 0x0D;
10003fee:	2308      	movs	r3, #8
10003ff0:	18fb      	adds	r3, r7, r3
10003ff2:	220d      	movs	r2, #13
10003ff4:	72da      	strb	r2, [r3, #11]
	buffer[12] = 0x0A;
10003ff6:	2308      	movs	r3, #8
10003ff8:	18fb      	adds	r3, r7, r3
10003ffa:	220a      	movs	r2, #10
10003ffc:	731a      	strb	r2, [r3, #12]

	GENIX_SendStream((char*)&buffer, 13);
10003ffe:	2308      	movs	r3, #8
10004000:	18fb      	adds	r3, r7, r3
10004002:	1c18      	adds	r0, r3, #0
10004004:	210d      	movs	r1, #13
10004006:	f7ff ff5f 	bl	10003ec8 <GENIX_SendStream>
}
1000400a:	46bd      	mov	sp, r7
1000400c:	b006      	add	sp, #24
1000400e:	bd80      	pop	{r7, pc}

10004010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004010:	b580      	push	{r7, lr}
10004012:	b082      	sub	sp, #8
10004014:	af00      	add	r7, sp, #0
10004016:	1c02      	adds	r2, r0, #0
10004018:	1dfb      	adds	r3, r7, #7
1000401a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000401c:	1dfb      	adds	r3, r7, #7
1000401e:	781b      	ldrb	r3, [r3, #0]
10004020:	2b7f      	cmp	r3, #127	; 0x7f
10004022:	d809      	bhi.n	10004038 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10004024:	4b06      	ldr	r3, [pc, #24]	; (10004040 <__NVIC_EnableIRQ+0x30>)
10004026:	1dfa      	adds	r2, r7, #7
10004028:	7812      	ldrb	r2, [r2, #0]
1000402a:	1c11      	adds	r1, r2, #0
1000402c:	221f      	movs	r2, #31
1000402e:	400a      	ands	r2, r1
10004030:	2101      	movs	r1, #1
10004032:	4091      	lsls	r1, r2
10004034:	1c0a      	adds	r2, r1, #0
10004036:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10004038:	46bd      	mov	sp, r7
1000403a:	b002      	add	sp, #8
1000403c:	bd80      	pop	{r7, pc}
1000403e:	46c0      	nop			; (mov r8, r8)
10004040:	e000e100 	.word	0xe000e100

10004044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10004044:	b5b0      	push	{r4, r5, r7, lr}
10004046:	b082      	sub	sp, #8
10004048:	af00      	add	r7, sp, #0
1000404a:	1c02      	adds	r2, r0, #0
1000404c:	6039      	str	r1, [r7, #0]
1000404e:	1dfb      	adds	r3, r7, #7
10004050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10004052:	1dfb      	adds	r3, r7, #7
10004054:	781b      	ldrb	r3, [r3, #0]
10004056:	2b7f      	cmp	r3, #127	; 0x7f
10004058:	d827      	bhi.n	100040aa <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000405a:	4c2d      	ldr	r4, [pc, #180]	; (10004110 <__NVIC_SetPriority+0xcc>)
1000405c:	1dfb      	adds	r3, r7, #7
1000405e:	781b      	ldrb	r3, [r3, #0]
10004060:	b25b      	sxtb	r3, r3
10004062:	089b      	lsrs	r3, r3, #2
10004064:	492a      	ldr	r1, [pc, #168]	; (10004110 <__NVIC_SetPriority+0xcc>)
10004066:	1dfa      	adds	r2, r7, #7
10004068:	7812      	ldrb	r2, [r2, #0]
1000406a:	b252      	sxtb	r2, r2
1000406c:	0892      	lsrs	r2, r2, #2
1000406e:	32c0      	adds	r2, #192	; 0xc0
10004070:	0092      	lsls	r2, r2, #2
10004072:	5852      	ldr	r2, [r2, r1]
10004074:	1df9      	adds	r1, r7, #7
10004076:	7809      	ldrb	r1, [r1, #0]
10004078:	1c08      	adds	r0, r1, #0
1000407a:	2103      	movs	r1, #3
1000407c:	4001      	ands	r1, r0
1000407e:	00c9      	lsls	r1, r1, #3
10004080:	1c08      	adds	r0, r1, #0
10004082:	21ff      	movs	r1, #255	; 0xff
10004084:	4081      	lsls	r1, r0
10004086:	43c9      	mvns	r1, r1
10004088:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000408a:	683a      	ldr	r2, [r7, #0]
1000408c:	0192      	lsls	r2, r2, #6
1000408e:	20ff      	movs	r0, #255	; 0xff
10004090:	4002      	ands	r2, r0
10004092:	1df8      	adds	r0, r7, #7
10004094:	7800      	ldrb	r0, [r0, #0]
10004096:	1c05      	adds	r5, r0, #0
10004098:	2003      	movs	r0, #3
1000409a:	4028      	ands	r0, r5
1000409c:	00c0      	lsls	r0, r0, #3
1000409e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100040a0:	430a      	orrs	r2, r1
100040a2:	33c0      	adds	r3, #192	; 0xc0
100040a4:	009b      	lsls	r3, r3, #2
100040a6:	511a      	str	r2, [r3, r4]
100040a8:	e02e      	b.n	10004108 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100040aa:	4c1a      	ldr	r4, [pc, #104]	; (10004114 <__NVIC_SetPriority+0xd0>)
100040ac:	1dfb      	adds	r3, r7, #7
100040ae:	781b      	ldrb	r3, [r3, #0]
100040b0:	1c1a      	adds	r2, r3, #0
100040b2:	230f      	movs	r3, #15
100040b4:	4013      	ands	r3, r2
100040b6:	3b08      	subs	r3, #8
100040b8:	0899      	lsrs	r1, r3, #2
100040ba:	4a16      	ldr	r2, [pc, #88]	; (10004114 <__NVIC_SetPriority+0xd0>)
100040bc:	1dfb      	adds	r3, r7, #7
100040be:	781b      	ldrb	r3, [r3, #0]
100040c0:	1c18      	adds	r0, r3, #0
100040c2:	230f      	movs	r3, #15
100040c4:	4003      	ands	r3, r0
100040c6:	3b08      	subs	r3, #8
100040c8:	089b      	lsrs	r3, r3, #2
100040ca:	3306      	adds	r3, #6
100040cc:	009b      	lsls	r3, r3, #2
100040ce:	18d3      	adds	r3, r2, r3
100040d0:	685b      	ldr	r3, [r3, #4]
100040d2:	1dfa      	adds	r2, r7, #7
100040d4:	7812      	ldrb	r2, [r2, #0]
100040d6:	1c10      	adds	r0, r2, #0
100040d8:	2203      	movs	r2, #3
100040da:	4002      	ands	r2, r0
100040dc:	00d2      	lsls	r2, r2, #3
100040de:	1c10      	adds	r0, r2, #0
100040e0:	22ff      	movs	r2, #255	; 0xff
100040e2:	4082      	lsls	r2, r0
100040e4:	43d2      	mvns	r2, r2
100040e6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100040e8:	683b      	ldr	r3, [r7, #0]
100040ea:	019b      	lsls	r3, r3, #6
100040ec:	20ff      	movs	r0, #255	; 0xff
100040ee:	4003      	ands	r3, r0
100040f0:	1df8      	adds	r0, r7, #7
100040f2:	7800      	ldrb	r0, [r0, #0]
100040f4:	1c05      	adds	r5, r0, #0
100040f6:	2003      	movs	r0, #3
100040f8:	4028      	ands	r0, r5
100040fa:	00c0      	lsls	r0, r0, #3
100040fc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100040fe:	431a      	orrs	r2, r3
10004100:	1d8b      	adds	r3, r1, #6
10004102:	009b      	lsls	r3, r3, #2
10004104:	18e3      	adds	r3, r4, r3
10004106:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10004108:	46bd      	mov	sp, r7
1000410a:	b002      	add	sp, #8
1000410c:	bdb0      	pop	{r4, r5, r7, pc}
1000410e:	46c0      	nop			; (mov r8, r8)
10004110:	e000e100 	.word	0xe000e100
10004114:	e000ed00 	.word	0xe000ed00

10004118 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10004118:	b580      	push	{r7, lr}
1000411a:	b082      	sub	sp, #8
1000411c:	af00      	add	r7, sp, #0
1000411e:	6078      	str	r0, [r7, #4]
10004120:	1c08      	adds	r0, r1, #0
10004122:	1c11      	adds	r1, r2, #0
10004124:	1cfb      	adds	r3, r7, #3
10004126:	1c02      	adds	r2, r0, #0
10004128:	701a      	strb	r2, [r3, #0]
1000412a:	1cbb      	adds	r3, r7, #2
1000412c:	1c0a      	adds	r2, r1, #0
1000412e:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10004130:	1cfb      	adds	r3, r7, #3
10004132:	7818      	ldrb	r0, [r3, #0]
10004134:	1cfb      	adds	r3, r7, #3
10004136:	781b      	ldrb	r3, [r3, #0]
10004138:	687a      	ldr	r2, [r7, #4]
1000413a:	3306      	adds	r3, #6
1000413c:	009b      	lsls	r3, r3, #2
1000413e:	18d3      	adds	r3, r2, r3
10004140:	685b      	ldr	r3, [r3, #4]
10004142:	2207      	movs	r2, #7
10004144:	4393      	bics	r3, r2
10004146:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10004148:	1cbb      	adds	r3, r7, #2
1000414a:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
1000414c:	431a      	orrs	r2, r3
1000414e:	6879      	ldr	r1, [r7, #4]
10004150:	1d83      	adds	r3, r0, #6
10004152:	009b      	lsls	r3, r3, #2
10004154:	18cb      	adds	r3, r1, r3
10004156:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10004158:	46bd      	mov	sp, r7
1000415a:	b002      	add	sp, #8
1000415c:	bd80      	pop	{r7, pc}
1000415e:	46c0      	nop			; (mov r8, r8)

10004160 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10004160:	b580      	push	{r7, lr}
10004162:	b082      	sub	sp, #8
10004164:	af00      	add	r7, sp, #0
10004166:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10004168:	687b      	ldr	r3, [r7, #4]
1000416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000416c:	b2db      	uxtb	r3, r3
1000416e:	227f      	movs	r2, #127	; 0x7f
10004170:	4393      	bics	r3, r2
10004172:	b2db      	uxtb	r3, r3
}
10004174:	1c18      	adds	r0, r3, #0
10004176:	46bd      	mov	sp, r7
10004178:	b002      	add	sp, #8
1000417a:	bd80      	pop	{r7, pc}

1000417c <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
1000417c:	b580      	push	{r7, lr}
1000417e:	b082      	sub	sp, #8
10004180:	af00      	add	r7, sp, #0
10004182:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10004184:	687b      	ldr	r3, [r7, #4]
10004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004188:	220f      	movs	r2, #15
1000418a:	4393      	bics	r3, r2
1000418c:	2202      	movs	r2, #2
1000418e:	431a      	orrs	r2, r3
10004190:	687b      	ldr	r3, [r7, #4]
10004192:	641a      	str	r2, [r3, #64]	; 0x40
}
10004194:	46bd      	mov	sp, r7
10004196:	b002      	add	sp, #8
10004198:	bd80      	pop	{r7, pc}
1000419a:	46c0      	nop			; (mov r8, r8)

1000419c <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
1000419c:	b580      	push	{r7, lr}
1000419e:	b084      	sub	sp, #16
100041a0:	af00      	add	r7, sp, #0
100041a2:	60f8      	str	r0, [r7, #12]
100041a4:	607a      	str	r2, [r7, #4]
100041a6:	230b      	movs	r3, #11
100041a8:	18fb      	adds	r3, r7, r3
100041aa:	1c0a      	adds	r2, r1, #0
100041ac:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
100041ae:	68f9      	ldr	r1, [r7, #12]
100041b0:	230b      	movs	r3, #11
100041b2:	18fb      	adds	r3, r7, r3
100041b4:	781a      	ldrb	r2, [r3, #0]
100041b6:	687b      	ldr	r3, [r7, #4]
100041b8:	1c08      	adds	r0, r1, #0
100041ba:	1c11      	adds	r1, r2, #0
100041bc:	1c1a      	adds	r2, r3, #0
100041be:	f001 fdff 	bl	10005dc0 <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
100041c2:	46bd      	mov	sp, r7
100041c4:	b004      	add	sp, #16
100041c6:	bd80      	pop	{r7, pc}

100041c8 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100041c8:	b580      	push	{r7, lr}
100041ca:	b082      	sub	sp, #8
100041cc:	af00      	add	r7, sp, #0
100041ce:	6078      	str	r0, [r7, #4]
100041d0:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
100041d2:	687b      	ldr	r3, [r7, #4]
100041d4:	683a      	ldr	r2, [r7, #0]
100041d6:	64da      	str	r2, [r3, #76]	; 0x4c
}
100041d8:	46bd      	mov	sp, r7
100041da:	b002      	add	sp, #8
100041dc:	bd80      	pop	{r7, pc}
100041de:	46c0      	nop			; (mov r8, r8)

100041e0 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
100041e0:	b580      	push	{r7, lr}
100041e2:	b082      	sub	sp, #8
100041e4:	af00      	add	r7, sp, #0
100041e6:	6078      	str	r0, [r7, #4]
100041e8:	1c08      	adds	r0, r1, #0
100041ea:	1c11      	adds	r1, r2, #0
100041ec:	1cfb      	adds	r3, r7, #3
100041ee:	1c02      	adds	r2, r0, #0
100041f0:	701a      	strb	r2, [r3, #0]
100041f2:	1cbb      	adds	r3, r7, #2
100041f4:	1c0a      	adds	r2, r1, #0
100041f6:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
100041f8:	1cfb      	adds	r3, r7, #3
100041fa:	7818      	ldrb	r0, [r3, #0]
100041fc:	1cfb      	adds	r3, r7, #3
100041fe:	781b      	ldrb	r3, [r3, #0]
10004200:	687a      	ldr	r2, [r7, #4]
10004202:	3306      	adds	r3, #6
10004204:	009b      	lsls	r3, r3, #2
10004206:	18d3      	adds	r3, r2, r3
10004208:	685b      	ldr	r3, [r3, #4]
1000420a:	2250      	movs	r2, #80	; 0x50
1000420c:	4393      	bics	r3, r2
1000420e:	1c1a      	adds	r2, r3, #0
10004210:	6879      	ldr	r1, [r7, #4]
10004212:	1d83      	adds	r3, r0, #6
10004214:	009b      	lsls	r3, r3, #2
10004216:	18cb      	adds	r3, r1, r3
10004218:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
1000421a:	6879      	ldr	r1, [r7, #4]
1000421c:	1cfb      	adds	r3, r7, #3
1000421e:	781a      	ldrb	r2, [r3, #0]
10004220:	1cbb      	adds	r3, r7, #2
10004222:	781b      	ldrb	r3, [r3, #0]
10004224:	1c08      	adds	r0, r1, #0
10004226:	1c11      	adds	r1, r2, #0
10004228:	1c1a      	adds	r2, r3, #0
1000422a:	f7ff ff75 	bl	10004118 <XMC_USIC_CH_SetInputSource>
}
1000422e:	46bd      	mov	sp, r7
10004230:	b002      	add	sp, #8
10004232:	bd80      	pop	{r7, pc}

10004234 <ESP32_ConnectionInit>:

static bool      crc_tab16_init = false;
static uint16_t  crc_tab16[256];

void ESP32_ConnectionInit(void)
{
10004234:	b580      	push	{r7, lr}
10004236:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P2_0, &tx_config);
10004238:	4a21      	ldr	r2, [pc, #132]	; (100042c0 <ESP32_ConnectionInit+0x8c>)
1000423a:	4b22      	ldr	r3, [pc, #136]	; (100042c4 <ESP32_ConnectionInit+0x90>)
1000423c:	1c10      	adds	r0, r2, #0
1000423e:	2100      	movs	r1, #0
10004240:	1c1a      	adds	r2, r3, #0
10004242:	f000 fd09 	bl	10004c58 <XMC_GPIO_Init>
    XMC_GPIO_Init(P2_1, &rx_config);
10004246:	4a1e      	ldr	r2, [pc, #120]	; (100042c0 <ESP32_ConnectionInit+0x8c>)
10004248:	4b1f      	ldr	r3, [pc, #124]	; (100042c8 <ESP32_ConnectionInit+0x94>)
1000424a:	1c10      	adds	r0, r2, #0
1000424c:	2101      	movs	r1, #1
1000424e:	1c1a      	adds	r2, r3, #0
10004250:	f000 fd02 	bl	10004c58 <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC0_CH0);
10004254:	2390      	movs	r3, #144	; 0x90
10004256:	05db      	lsls	r3, r3, #23
10004258:	1c18      	adds	r0, r3, #0
1000425a:	f001 fc79 	bl	10005b50 <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC0_CH0, &uart_config);
1000425e:	2390      	movs	r3, #144	; 0x90
10004260:	05da      	lsls	r2, r3, #23
10004262:	4b1a      	ldr	r3, [pc, #104]	; (100042cc <ESP32_ConnectionInit+0x98>)
10004264:	1c10      	adds	r0, r2, #0
10004266:	1c19      	adds	r1, r3, #0
10004268:	f001 fbd0 	bl	10005a0c <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC0_CH0, XMC_UART_CH_INPUT_RXD, USIC0_C0_DX0_P2_1);
1000426c:	2390      	movs	r3, #144	; 0x90
1000426e:	05db      	lsls	r3, r3, #23
10004270:	1c18      	adds	r0, r3, #0
10004272:	2100      	movs	r1, #0
10004274:	2205      	movs	r2, #5
10004276:	f7ff ffb3 	bl	100041e0 <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC0_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
1000427a:	2390      	movs	r3, #144	; 0x90
1000427c:	05da      	lsls	r2, r3, #23
1000427e:	2380      	movs	r3, #128	; 0x80
10004280:	01db      	lsls	r3, r3, #7
10004282:	1c10      	adds	r0, r2, #0
10004284:	1c19      	adds	r1, r3, #0
10004286:	f001 fc49 	bl	10005b1c <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC0_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
1000428a:	2390      	movs	r3, #144	; 0x90
1000428c:	05db      	lsls	r3, r3, #23
1000428e:	1c18      	adds	r0, r3, #0
10004290:	2108      	movs	r1, #8
10004292:	2203      	movs	r2, #3
10004294:	f7ff ff82 	bl	1000419c <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ18_IRQn, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ18);
10004298:	4b0d      	ldr	r3, [pc, #52]	; (100042d0 <ESP32_ConnectionInit+0x9c>)
1000429a:	2012      	movs	r0, #18
1000429c:	1c19      	adds	r1, r3, #0
1000429e:	f000 fde9 	bl	10004e74 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ18_IRQn, 10U);
100042a2:	2012      	movs	r0, #18
100042a4:	210a      	movs	r1, #10
100042a6:	f7ff fecd 	bl	10004044 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ18_IRQn);
100042aa:	2012      	movs	r0, #18
100042ac:	f7ff feb0 	bl	10004010 <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC0_CH0);
100042b0:	2390      	movs	r3, #144	; 0x90
100042b2:	05db      	lsls	r3, r3, #23
100042b4:	1c18      	adds	r0, r3, #0
100042b6:	f7ff ff61 	bl	1000417c <XMC_UART_CH_Start>
}
100042ba:	46bd      	mov	sp, r7
100042bc:	bd80      	pop	{r7, pc}
100042be:	46c0      	nop			; (mov r8, r8)
100042c0:	40040200 	.word	0x40040200
100042c4:	20000694 	.word	0x20000694
100042c8:	2000069c 	.word	0x2000069c
100042cc:	200006a4 	.word	0x200006a4
100042d0:	00001201 	.word	0x00001201

100042d4 <ESP32_SendStream>:

void ESP32_SendStream(char *buffer, uint8_t length)
{
100042d4:	b580      	push	{r7, lr}
100042d6:	b084      	sub	sp, #16
100042d8:	af00      	add	r7, sp, #0
100042da:	6078      	str	r0, [r7, #4]
100042dc:	1c0a      	adds	r2, r1, #0
100042de:	1cfb      	adds	r3, r7, #3
100042e0:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
100042e2:	230f      	movs	r3, #15
100042e4:	18fb      	adds	r3, r7, r3
100042e6:	2200      	movs	r2, #0
100042e8:	701a      	strb	r2, [r3, #0]
	while(count < length)
100042ea:	e022      	b.n	10004332 <ESP32_SendStream+0x5e>
	{
		while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
100042ec:	46c0      	nop			; (mov r8, r8)
100042ee:	2390      	movs	r3, #144	; 0x90
100042f0:	05db      	lsls	r3, r3, #23
100042f2:	1c18      	adds	r0, r3, #0
100042f4:	f7ff ff34 	bl	10004160 <XMC_USIC_CH_GetTransmitBufferStatus>
100042f8:	1e03      	subs	r3, r0, #0
100042fa:	2b80      	cmp	r3, #128	; 0x80
100042fc:	d0f7      	beq.n	100042ee <ESP32_SendStream+0x1a>
		XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
100042fe:	2390      	movs	r3, #144	; 0x90
10004300:	05da      	lsls	r2, r3, #23
10004302:	2380      	movs	r3, #128	; 0x80
10004304:	019b      	lsls	r3, r3, #6
10004306:	1c10      	adds	r0, r2, #0
10004308:	1c19      	adds	r1, r3, #0
1000430a:	f7ff ff5d 	bl	100041c8 <XMC_UART_CH_ClearStatusFlag>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];
1000430e:	2390      	movs	r3, #144	; 0x90
10004310:	05db      	lsls	r3, r3, #23
10004312:	220f      	movs	r2, #15
10004314:	18ba      	adds	r2, r7, r2
10004316:	7812      	ldrb	r2, [r2, #0]
10004318:	6879      	ldr	r1, [r7, #4]
1000431a:	188a      	adds	r2, r1, r2
1000431c:	7812      	ldrb	r2, [r2, #0]
1000431e:	1c11      	adds	r1, r2, #0
10004320:	2280      	movs	r2, #128	; 0x80
10004322:	5099      	str	r1, [r3, r2]

		count++;
10004324:	230f      	movs	r3, #15
10004326:	18fb      	adds	r3, r7, r3
10004328:	781a      	ldrb	r2, [r3, #0]
1000432a:	230f      	movs	r3, #15
1000432c:	18fb      	adds	r3, r7, r3
1000432e:	3201      	adds	r2, #1
10004330:	701a      	strb	r2, [r3, #0]
}

void ESP32_SendStream(char *buffer, uint8_t length)
{
	uint8_t count = 0;
	while(count < length)
10004332:	230f      	movs	r3, #15
10004334:	18fa      	adds	r2, r7, r3
10004336:	1cfb      	adds	r3, r7, #3
10004338:	7812      	ldrb	r2, [r2, #0]
1000433a:	781b      	ldrb	r3, [r3, #0]
1000433c:	429a      	cmp	r2, r3
1000433e:	d3d5      	bcc.n	100042ec <ESP32_SendStream+0x18>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];

		count++;
	 }
}
10004340:	46bd      	mov	sp, r7
10004342:	b004      	add	sp, #16
10004344:	bd80      	pop	{r7, pc}
10004346:	46c0      	nop			; (mov r8, r8)

10004348 <ESP32_Map_Data>:

uint8_t *ESP32_Map_Data(ESP_Data_Group_t *dataGroup)
{
10004348:	b590      	push	{r4, r7, lr}
1000434a:	b085      	sub	sp, #20
1000434c:	af00      	add	r7, sp, #0
1000434e:	6078      	str	r0, [r7, #4]
	static uint8_t buffer[80];
	uint8_t offset = 3;
10004350:	230f      	movs	r3, #15
10004352:	18fb      	adds	r3, r7, r3
10004354:	2203      	movs	r2, #3
10004356:	701a      	strb	r2, [r3, #0]
	uint16_t crc;
	buffer[0] = SoF;
10004358:	4bf9      	ldr	r3, [pc, #996]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000435a:	2205      	movs	r2, #5
1000435c:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x02;
1000435e:	4bf8      	ldr	r3, [pc, #992]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004360:	2202      	movs	r2, #2
10004362:	705a      	strb	r2, [r3, #1]
	buffer[2] = 69;
10004364:	4bf6      	ldr	r3, [pc, #984]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004366:	2245      	movs	r2, #69	; 0x45
10004368:	709a      	strb	r2, [r3, #2]
	/* pcs converter system */
	buffer[offset+0] = dataGroup->pcs_system;
1000436a:	230f      	movs	r3, #15
1000436c:	18fb      	adds	r3, r7, r3
1000436e:	781b      	ldrb	r3, [r3, #0]
10004370:	687a      	ldr	r2, [r7, #4]
10004372:	7811      	ldrb	r1, [r2, #0]
10004374:	4af2      	ldr	r2, [pc, #968]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004376:	54d1      	strb	r1, [r2, r3]
	buffer[offset+1] = dataGroup->dcgrid_system;
10004378:	230f      	movs	r3, #15
1000437a:	18fb      	adds	r3, r7, r3
1000437c:	781b      	ldrb	r3, [r3, #0]
1000437e:	3301      	adds	r3, #1
10004380:	687a      	ldr	r2, [r7, #4]
10004382:	7851      	ldrb	r1, [r2, #1]
10004384:	4aee      	ldr	r2, [pc, #952]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004386:	54d1      	strb	r1, [r2, r3]
	buffer[offset+2] = dataGroup->inv_system;
10004388:	230f      	movs	r3, #15
1000438a:	18fb      	adds	r3, r7, r3
1000438c:	781b      	ldrb	r3, [r3, #0]
1000438e:	3302      	adds	r3, #2
10004390:	687a      	ldr	r2, [r7, #4]
10004392:	7891      	ldrb	r1, [r2, #2]
10004394:	4aea      	ldr	r2, [pc, #936]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004396:	54d1      	strb	r1, [r2, r3]
	buffer[offset+3] = dataGroup->pvconv_system;
10004398:	230f      	movs	r3, #15
1000439a:	18fb      	adds	r3, r7, r3
1000439c:	781b      	ldrb	r3, [r3, #0]
1000439e:	3303      	adds	r3, #3
100043a0:	687a      	ldr	r2, [r7, #4]
100043a2:	78d1      	ldrb	r1, [r2, #3]
100043a4:	4ae6      	ldr	r2, [pc, #920]	; (10004740 <ESP32_Map_Data+0x3f8>)
100043a6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+4] = dataGroup->batconv_system;
100043a8:	230f      	movs	r3, #15
100043aa:	18fb      	adds	r3, r7, r3
100043ac:	781b      	ldrb	r3, [r3, #0]
100043ae:	3304      	adds	r3, #4
100043b0:	687a      	ldr	r2, [r7, #4]
100043b2:	7911      	ldrb	r1, [r2, #4]
100043b4:	4ae2      	ldr	r2, [pc, #904]	; (10004740 <ESP32_Map_Data+0x3f8>)
100043b6:	54d1      	strb	r1, [r2, r3]

	/* pcs sensors */
	buffer[offset+5]  = ((unsigned char*)&dataGroup->vDC_grid)[0];
100043b8:	230f      	movs	r3, #15
100043ba:	18fb      	adds	r3, r7, r3
100043bc:	781b      	ldrb	r3, [r3, #0]
100043be:	3305      	adds	r3, #5
100043c0:	687a      	ldr	r2, [r7, #4]
100043c2:	3208      	adds	r2, #8
100043c4:	7811      	ldrb	r1, [r2, #0]
100043c6:	4ade      	ldr	r2, [pc, #888]	; (10004740 <ESP32_Map_Data+0x3f8>)
100043c8:	54d1      	strb	r1, [r2, r3]
	buffer[offset+6]  = ((unsigned char*)&dataGroup->vDC_grid)[1];
100043ca:	230f      	movs	r3, #15
100043cc:	18fb      	adds	r3, r7, r3
100043ce:	781b      	ldrb	r3, [r3, #0]
100043d0:	3306      	adds	r3, #6
100043d2:	687a      	ldr	r2, [r7, #4]
100043d4:	3208      	adds	r2, #8
100043d6:	3201      	adds	r2, #1
100043d8:	7811      	ldrb	r1, [r2, #0]
100043da:	4ad9      	ldr	r2, [pc, #868]	; (10004740 <ESP32_Map_Data+0x3f8>)
100043dc:	54d1      	strb	r1, [r2, r3]
	buffer[offset+7]  = ((unsigned char*)&dataGroup->vDC_grid)[2];
100043de:	230f      	movs	r3, #15
100043e0:	18fb      	adds	r3, r7, r3
100043e2:	781b      	ldrb	r3, [r3, #0]
100043e4:	3307      	adds	r3, #7
100043e6:	687a      	ldr	r2, [r7, #4]
100043e8:	3208      	adds	r2, #8
100043ea:	3202      	adds	r2, #2
100043ec:	7811      	ldrb	r1, [r2, #0]
100043ee:	4ad4      	ldr	r2, [pc, #848]	; (10004740 <ESP32_Map_Data+0x3f8>)
100043f0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+8]  = ((unsigned char*)&dataGroup->vDC_grid)[3];
100043f2:	230f      	movs	r3, #15
100043f4:	18fb      	adds	r3, r7, r3
100043f6:	781b      	ldrb	r3, [r3, #0]
100043f8:	3308      	adds	r3, #8
100043fa:	687a      	ldr	r2, [r7, #4]
100043fc:	3208      	adds	r2, #8
100043fe:	3203      	adds	r2, #3
10004400:	7811      	ldrb	r1, [r2, #0]
10004402:	4acf      	ldr	r2, [pc, #828]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004404:	54d1      	strb	r1, [r2, r3]
	buffer[offset+9]  = ((unsigned char*)&dataGroup->vAC_inv)[0];
10004406:	230f      	movs	r3, #15
10004408:	18fb      	adds	r3, r7, r3
1000440a:	781b      	ldrb	r3, [r3, #0]
1000440c:	3309      	adds	r3, #9
1000440e:	687a      	ldr	r2, [r7, #4]
10004410:	320c      	adds	r2, #12
10004412:	7811      	ldrb	r1, [r2, #0]
10004414:	4aca      	ldr	r2, [pc, #808]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004416:	54d1      	strb	r1, [r2, r3]
	buffer[offset+10] = ((unsigned char*)&dataGroup->vAC_inv)[1];
10004418:	230f      	movs	r3, #15
1000441a:	18fb      	adds	r3, r7, r3
1000441c:	781b      	ldrb	r3, [r3, #0]
1000441e:	330a      	adds	r3, #10
10004420:	687a      	ldr	r2, [r7, #4]
10004422:	320c      	adds	r2, #12
10004424:	3201      	adds	r2, #1
10004426:	7811      	ldrb	r1, [r2, #0]
10004428:	4ac5      	ldr	r2, [pc, #788]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000442a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+11] = ((unsigned char*)&dataGroup->vAC_inv)[2];
1000442c:	230f      	movs	r3, #15
1000442e:	18fb      	adds	r3, r7, r3
10004430:	781b      	ldrb	r3, [r3, #0]
10004432:	330b      	adds	r3, #11
10004434:	687a      	ldr	r2, [r7, #4]
10004436:	320c      	adds	r2, #12
10004438:	3202      	adds	r2, #2
1000443a:	7811      	ldrb	r1, [r2, #0]
1000443c:	4ac0      	ldr	r2, [pc, #768]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000443e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+12] = ((unsigned char*)&dataGroup->vAC_inv)[3];
10004440:	230f      	movs	r3, #15
10004442:	18fb      	adds	r3, r7, r3
10004444:	781b      	ldrb	r3, [r3, #0]
10004446:	330c      	adds	r3, #12
10004448:	687a      	ldr	r2, [r7, #4]
1000444a:	320c      	adds	r2, #12
1000444c:	3203      	adds	r2, #3
1000444e:	7811      	ldrb	r1, [r2, #0]
10004450:	4abb      	ldr	r2, [pc, #748]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004452:	54d1      	strb	r1, [r2, r3]
	buffer[offset+13] = ((unsigned char*)&dataGroup->vPv_conv)[0];
10004454:	230f      	movs	r3, #15
10004456:	18fb      	adds	r3, r7, r3
10004458:	781b      	ldrb	r3, [r3, #0]
1000445a:	330d      	adds	r3, #13
1000445c:	687a      	ldr	r2, [r7, #4]
1000445e:	3210      	adds	r2, #16
10004460:	7811      	ldrb	r1, [r2, #0]
10004462:	4ab7      	ldr	r2, [pc, #732]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004464:	54d1      	strb	r1, [r2, r3]
	buffer[offset+14] = ((unsigned char*)&dataGroup->vPv_conv)[1];
10004466:	230f      	movs	r3, #15
10004468:	18fb      	adds	r3, r7, r3
1000446a:	781b      	ldrb	r3, [r3, #0]
1000446c:	330e      	adds	r3, #14
1000446e:	687a      	ldr	r2, [r7, #4]
10004470:	3210      	adds	r2, #16
10004472:	3201      	adds	r2, #1
10004474:	7811      	ldrb	r1, [r2, #0]
10004476:	4ab2      	ldr	r2, [pc, #712]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004478:	54d1      	strb	r1, [r2, r3]
	buffer[offset+15] = ((unsigned char*)&dataGroup->vPv_conv)[2];
1000447a:	230f      	movs	r3, #15
1000447c:	18fb      	adds	r3, r7, r3
1000447e:	781b      	ldrb	r3, [r3, #0]
10004480:	330f      	adds	r3, #15
10004482:	687a      	ldr	r2, [r7, #4]
10004484:	3210      	adds	r2, #16
10004486:	3202      	adds	r2, #2
10004488:	7811      	ldrb	r1, [r2, #0]
1000448a:	4aad      	ldr	r2, [pc, #692]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000448c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+16] = ((unsigned char*)&dataGroup->vPv_conv)[3];
1000448e:	230f      	movs	r3, #15
10004490:	18fb      	adds	r3, r7, r3
10004492:	781b      	ldrb	r3, [r3, #0]
10004494:	3310      	adds	r3, #16
10004496:	687a      	ldr	r2, [r7, #4]
10004498:	3210      	adds	r2, #16
1000449a:	3203      	adds	r2, #3
1000449c:	7811      	ldrb	r1, [r2, #0]
1000449e:	4aa8      	ldr	r2, [pc, #672]	; (10004740 <ESP32_Map_Data+0x3f8>)
100044a0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+17] = ((unsigned char*)&dataGroup->vBat_conv)[0];
100044a2:	230f      	movs	r3, #15
100044a4:	18fb      	adds	r3, r7, r3
100044a6:	781b      	ldrb	r3, [r3, #0]
100044a8:	3311      	adds	r3, #17
100044aa:	687a      	ldr	r2, [r7, #4]
100044ac:	3214      	adds	r2, #20
100044ae:	7811      	ldrb	r1, [r2, #0]
100044b0:	4aa3      	ldr	r2, [pc, #652]	; (10004740 <ESP32_Map_Data+0x3f8>)
100044b2:	54d1      	strb	r1, [r2, r3]
	buffer[offset+18] = ((unsigned char*)&dataGroup->vBat_conv)[1];
100044b4:	230f      	movs	r3, #15
100044b6:	18fb      	adds	r3, r7, r3
100044b8:	781b      	ldrb	r3, [r3, #0]
100044ba:	3312      	adds	r3, #18
100044bc:	687a      	ldr	r2, [r7, #4]
100044be:	3214      	adds	r2, #20
100044c0:	3201      	adds	r2, #1
100044c2:	7811      	ldrb	r1, [r2, #0]
100044c4:	4a9e      	ldr	r2, [pc, #632]	; (10004740 <ESP32_Map_Data+0x3f8>)
100044c6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+19] = ((unsigned char*)&dataGroup->vBat_conv)[2];
100044c8:	230f      	movs	r3, #15
100044ca:	18fb      	adds	r3, r7, r3
100044cc:	781b      	ldrb	r3, [r3, #0]
100044ce:	3313      	adds	r3, #19
100044d0:	687a      	ldr	r2, [r7, #4]
100044d2:	3214      	adds	r2, #20
100044d4:	3202      	adds	r2, #2
100044d6:	7811      	ldrb	r1, [r2, #0]
100044d8:	4a99      	ldr	r2, [pc, #612]	; (10004740 <ESP32_Map_Data+0x3f8>)
100044da:	54d1      	strb	r1, [r2, r3]
	buffer[offset+20] = ((unsigned char*)&dataGroup->vBat_conv)[3];
100044dc:	230f      	movs	r3, #15
100044de:	18fb      	adds	r3, r7, r3
100044e0:	781b      	ldrb	r3, [r3, #0]
100044e2:	3314      	adds	r3, #20
100044e4:	687a      	ldr	r2, [r7, #4]
100044e6:	3214      	adds	r2, #20
100044e8:	3203      	adds	r2, #3
100044ea:	7811      	ldrb	r1, [r2, #0]
100044ec:	4a94      	ldr	r2, [pc, #592]	; (10004740 <ESP32_Map_Data+0x3f8>)
100044ee:	54d1      	strb	r1, [r2, r3]
	buffer[offset+21] = ((unsigned char*)&dataGroup->iDC_grid)[0];
100044f0:	230f      	movs	r3, #15
100044f2:	18fb      	adds	r3, r7, r3
100044f4:	781b      	ldrb	r3, [r3, #0]
100044f6:	3315      	adds	r3, #21
100044f8:	687a      	ldr	r2, [r7, #4]
100044fa:	3218      	adds	r2, #24
100044fc:	7811      	ldrb	r1, [r2, #0]
100044fe:	4a90      	ldr	r2, [pc, #576]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004500:	54d1      	strb	r1, [r2, r3]
	buffer[offset+22] = ((unsigned char*)&dataGroup->iDC_grid)[1];
10004502:	230f      	movs	r3, #15
10004504:	18fb      	adds	r3, r7, r3
10004506:	781b      	ldrb	r3, [r3, #0]
10004508:	3316      	adds	r3, #22
1000450a:	687a      	ldr	r2, [r7, #4]
1000450c:	3218      	adds	r2, #24
1000450e:	3201      	adds	r2, #1
10004510:	7811      	ldrb	r1, [r2, #0]
10004512:	4a8b      	ldr	r2, [pc, #556]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004514:	54d1      	strb	r1, [r2, r3]
	buffer[offset+23] = ((unsigned char*)&dataGroup->iDC_grid)[2];
10004516:	230f      	movs	r3, #15
10004518:	18fb      	adds	r3, r7, r3
1000451a:	781b      	ldrb	r3, [r3, #0]
1000451c:	3317      	adds	r3, #23
1000451e:	687a      	ldr	r2, [r7, #4]
10004520:	3218      	adds	r2, #24
10004522:	3202      	adds	r2, #2
10004524:	7811      	ldrb	r1, [r2, #0]
10004526:	4a86      	ldr	r2, [pc, #536]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004528:	54d1      	strb	r1, [r2, r3]
	buffer[offset+24] = ((unsigned char*)&dataGroup->iDC_grid)[3];
1000452a:	230f      	movs	r3, #15
1000452c:	18fb      	adds	r3, r7, r3
1000452e:	781b      	ldrb	r3, [r3, #0]
10004530:	3318      	adds	r3, #24
10004532:	687a      	ldr	r2, [r7, #4]
10004534:	3218      	adds	r2, #24
10004536:	3203      	adds	r2, #3
10004538:	7811      	ldrb	r1, [r2, #0]
1000453a:	4a81      	ldr	r2, [pc, #516]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000453c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+25] = ((unsigned char*)&dataGroup->iAC_inv)[0];
1000453e:	230f      	movs	r3, #15
10004540:	18fb      	adds	r3, r7, r3
10004542:	781b      	ldrb	r3, [r3, #0]
10004544:	3319      	adds	r3, #25
10004546:	687a      	ldr	r2, [r7, #4]
10004548:	321c      	adds	r2, #28
1000454a:	7811      	ldrb	r1, [r2, #0]
1000454c:	4a7c      	ldr	r2, [pc, #496]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000454e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+26] = ((unsigned char*)&dataGroup->iAC_inv)[1];
10004550:	230f      	movs	r3, #15
10004552:	18fb      	adds	r3, r7, r3
10004554:	781b      	ldrb	r3, [r3, #0]
10004556:	331a      	adds	r3, #26
10004558:	687a      	ldr	r2, [r7, #4]
1000455a:	321c      	adds	r2, #28
1000455c:	3201      	adds	r2, #1
1000455e:	7811      	ldrb	r1, [r2, #0]
10004560:	4a77      	ldr	r2, [pc, #476]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004562:	54d1      	strb	r1, [r2, r3]
	buffer[offset+27] = ((unsigned char*)&dataGroup->iAC_inv)[2];
10004564:	230f      	movs	r3, #15
10004566:	18fb      	adds	r3, r7, r3
10004568:	781b      	ldrb	r3, [r3, #0]
1000456a:	331b      	adds	r3, #27
1000456c:	687a      	ldr	r2, [r7, #4]
1000456e:	321c      	adds	r2, #28
10004570:	3202      	adds	r2, #2
10004572:	7811      	ldrb	r1, [r2, #0]
10004574:	4a72      	ldr	r2, [pc, #456]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004576:	54d1      	strb	r1, [r2, r3]
	buffer[offset+28] = ((unsigned char*)&dataGroup->iAC_inv)[3];
10004578:	230f      	movs	r3, #15
1000457a:	18fb      	adds	r3, r7, r3
1000457c:	781b      	ldrb	r3, [r3, #0]
1000457e:	331c      	adds	r3, #28
10004580:	687a      	ldr	r2, [r7, #4]
10004582:	321c      	adds	r2, #28
10004584:	3203      	adds	r2, #3
10004586:	7811      	ldrb	r1, [r2, #0]
10004588:	4a6d      	ldr	r2, [pc, #436]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000458a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+29] = ((unsigned char*)&dataGroup->iPv_conv)[0];
1000458c:	230f      	movs	r3, #15
1000458e:	18fb      	adds	r3, r7, r3
10004590:	781b      	ldrb	r3, [r3, #0]
10004592:	331d      	adds	r3, #29
10004594:	687a      	ldr	r2, [r7, #4]
10004596:	3220      	adds	r2, #32
10004598:	7811      	ldrb	r1, [r2, #0]
1000459a:	4a69      	ldr	r2, [pc, #420]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000459c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+30] = ((unsigned char*)&dataGroup->iPv_conv)[1];
1000459e:	230f      	movs	r3, #15
100045a0:	18fb      	adds	r3, r7, r3
100045a2:	781b      	ldrb	r3, [r3, #0]
100045a4:	331e      	adds	r3, #30
100045a6:	687a      	ldr	r2, [r7, #4]
100045a8:	3220      	adds	r2, #32
100045aa:	3201      	adds	r2, #1
100045ac:	7811      	ldrb	r1, [r2, #0]
100045ae:	4a64      	ldr	r2, [pc, #400]	; (10004740 <ESP32_Map_Data+0x3f8>)
100045b0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+31] = ((unsigned char*)&dataGroup->iPv_conv)[2];
100045b2:	230f      	movs	r3, #15
100045b4:	18fb      	adds	r3, r7, r3
100045b6:	781b      	ldrb	r3, [r3, #0]
100045b8:	331f      	adds	r3, #31
100045ba:	687a      	ldr	r2, [r7, #4]
100045bc:	3220      	adds	r2, #32
100045be:	3202      	adds	r2, #2
100045c0:	7811      	ldrb	r1, [r2, #0]
100045c2:	4a5f      	ldr	r2, [pc, #380]	; (10004740 <ESP32_Map_Data+0x3f8>)
100045c4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+32] = ((unsigned char*)&dataGroup->iPv_conv)[3];
100045c6:	230f      	movs	r3, #15
100045c8:	18fb      	adds	r3, r7, r3
100045ca:	781b      	ldrb	r3, [r3, #0]
100045cc:	3320      	adds	r3, #32
100045ce:	687a      	ldr	r2, [r7, #4]
100045d0:	3220      	adds	r2, #32
100045d2:	3203      	adds	r2, #3
100045d4:	7811      	ldrb	r1, [r2, #0]
100045d6:	4a5a      	ldr	r2, [pc, #360]	; (10004740 <ESP32_Map_Data+0x3f8>)
100045d8:	54d1      	strb	r1, [r2, r3]
	buffer[offset+33] = ((unsigned char*)&dataGroup->iBat_conv)[0];
100045da:	230f      	movs	r3, #15
100045dc:	18fb      	adds	r3, r7, r3
100045de:	781b      	ldrb	r3, [r3, #0]
100045e0:	3321      	adds	r3, #33	; 0x21
100045e2:	687a      	ldr	r2, [r7, #4]
100045e4:	3224      	adds	r2, #36	; 0x24
100045e6:	7811      	ldrb	r1, [r2, #0]
100045e8:	4a55      	ldr	r2, [pc, #340]	; (10004740 <ESP32_Map_Data+0x3f8>)
100045ea:	54d1      	strb	r1, [r2, r3]
	buffer[offset+34] = ((unsigned char*)&dataGroup->iBat_conv)[1];
100045ec:	230f      	movs	r3, #15
100045ee:	18fb      	adds	r3, r7, r3
100045f0:	781b      	ldrb	r3, [r3, #0]
100045f2:	3322      	adds	r3, #34	; 0x22
100045f4:	687a      	ldr	r2, [r7, #4]
100045f6:	3224      	adds	r2, #36	; 0x24
100045f8:	3201      	adds	r2, #1
100045fa:	7811      	ldrb	r1, [r2, #0]
100045fc:	4a50      	ldr	r2, [pc, #320]	; (10004740 <ESP32_Map_Data+0x3f8>)
100045fe:	54d1      	strb	r1, [r2, r3]
	buffer[offset+35] = ((unsigned char*)&dataGroup->iBat_conv)[2];
10004600:	230f      	movs	r3, #15
10004602:	18fb      	adds	r3, r7, r3
10004604:	781b      	ldrb	r3, [r3, #0]
10004606:	3323      	adds	r3, #35	; 0x23
10004608:	687a      	ldr	r2, [r7, #4]
1000460a:	3224      	adds	r2, #36	; 0x24
1000460c:	3202      	adds	r2, #2
1000460e:	7811      	ldrb	r1, [r2, #0]
10004610:	4a4b      	ldr	r2, [pc, #300]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004612:	54d1      	strb	r1, [r2, r3]
	buffer[offset+36] = ((unsigned char*)&dataGroup->iBat_conv)[3];
10004614:	230f      	movs	r3, #15
10004616:	18fb      	adds	r3, r7, r3
10004618:	781b      	ldrb	r3, [r3, #0]
1000461a:	3324      	adds	r3, #36	; 0x24
1000461c:	687a      	ldr	r2, [r7, #4]
1000461e:	3224      	adds	r2, #36	; 0x24
10004620:	3203      	adds	r2, #3
10004622:	7811      	ldrb	r1, [r2, #0]
10004624:	4a46      	ldr	r2, [pc, #280]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004626:	54d1      	strb	r1, [r2, r3]
	buffer[offset+37] = (dataGroup->pDC_grid) >> 8;
10004628:	230f      	movs	r3, #15
1000462a:	18fb      	adds	r3, r7, r3
1000462c:	781b      	ldrb	r3, [r3, #0]
1000462e:	3325      	adds	r3, #37	; 0x25
10004630:	687a      	ldr	r2, [r7, #4]
10004632:	8d12      	ldrh	r2, [r2, #40]	; 0x28
10004634:	b212      	sxth	r2, r2
10004636:	1212      	asrs	r2, r2, #8
10004638:	b292      	uxth	r2, r2
1000463a:	b2d1      	uxtb	r1, r2
1000463c:	4a40      	ldr	r2, [pc, #256]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000463e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+38] = (dataGroup->pDC_grid);
10004640:	230f      	movs	r3, #15
10004642:	18fb      	adds	r3, r7, r3
10004644:	781b      	ldrb	r3, [r3, #0]
10004646:	3326      	adds	r3, #38	; 0x26
10004648:	687a      	ldr	r2, [r7, #4]
1000464a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
1000464c:	b2d1      	uxtb	r1, r2
1000464e:	4a3c      	ldr	r2, [pc, #240]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004650:	54d1      	strb	r1, [r2, r3]
	buffer[offset+39] = (dataGroup->pAC_inv) >> 8;
10004652:	230f      	movs	r3, #15
10004654:	18fb      	adds	r3, r7, r3
10004656:	781b      	ldrb	r3, [r3, #0]
10004658:	3327      	adds	r3, #39	; 0x27
1000465a:	687a      	ldr	r2, [r7, #4]
1000465c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
1000465e:	0a12      	lsrs	r2, r2, #8
10004660:	b292      	uxth	r2, r2
10004662:	b2d1      	uxtb	r1, r2
10004664:	4a36      	ldr	r2, [pc, #216]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004666:	54d1      	strb	r1, [r2, r3]
	buffer[offset+40] = (dataGroup->pAC_inv);
10004668:	230f      	movs	r3, #15
1000466a:	18fb      	adds	r3, r7, r3
1000466c:	781b      	ldrb	r3, [r3, #0]
1000466e:	3328      	adds	r3, #40	; 0x28
10004670:	687a      	ldr	r2, [r7, #4]
10004672:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
10004674:	b2d1      	uxtb	r1, r2
10004676:	4a32      	ldr	r2, [pc, #200]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004678:	54d1      	strb	r1, [r2, r3]
	buffer[offset+41] = (dataGroup->pPv_conv) >> 8;
1000467a:	230f      	movs	r3, #15
1000467c:	18fb      	adds	r3, r7, r3
1000467e:	781b      	ldrb	r3, [r3, #0]
10004680:	3329      	adds	r3, #41	; 0x29
10004682:	687a      	ldr	r2, [r7, #4]
10004684:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
10004686:	0a12      	lsrs	r2, r2, #8
10004688:	b292      	uxth	r2, r2
1000468a:	b2d1      	uxtb	r1, r2
1000468c:	4a2c      	ldr	r2, [pc, #176]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000468e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+42] = (dataGroup->pPv_conv);
10004690:	230f      	movs	r3, #15
10004692:	18fb      	adds	r3, r7, r3
10004694:	781b      	ldrb	r3, [r3, #0]
10004696:	332a      	adds	r3, #42	; 0x2a
10004698:	687a      	ldr	r2, [r7, #4]
1000469a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
1000469c:	b2d1      	uxtb	r1, r2
1000469e:	4a28      	ldr	r2, [pc, #160]	; (10004740 <ESP32_Map_Data+0x3f8>)
100046a0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+43] = (dataGroup->pBat_conv) >> 8;
100046a2:	230f      	movs	r3, #15
100046a4:	18fb      	adds	r3, r7, r3
100046a6:	781b      	ldrb	r3, [r3, #0]
100046a8:	332b      	adds	r3, #43	; 0x2b
100046aa:	687a      	ldr	r2, [r7, #4]
100046ac:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
100046ae:	b212      	sxth	r2, r2
100046b0:	1212      	asrs	r2, r2, #8
100046b2:	b292      	uxth	r2, r2
100046b4:	b2d1      	uxtb	r1, r2
100046b6:	4a22      	ldr	r2, [pc, #136]	; (10004740 <ESP32_Map_Data+0x3f8>)
100046b8:	54d1      	strb	r1, [r2, r3]
	buffer[offset+44] = (dataGroup->pBat_conv);
100046ba:	230f      	movs	r3, #15
100046bc:	18fb      	adds	r3, r7, r3
100046be:	781b      	ldrb	r3, [r3, #0]
100046c0:	332c      	adds	r3, #44	; 0x2c
100046c2:	687a      	ldr	r2, [r7, #4]
100046c4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
100046c6:	b2d1      	uxtb	r1, r2
100046c8:	4a1d      	ldr	r2, [pc, #116]	; (10004740 <ESP32_Map_Data+0x3f8>)
100046ca:	54d1      	strb	r1, [r2, r3]
	buffer[offset+45] = ((unsigned char*)&dataGroup->temp_sensor)[0];
100046cc:	230f      	movs	r3, #15
100046ce:	18fb      	adds	r3, r7, r3
100046d0:	781b      	ldrb	r3, [r3, #0]
100046d2:	332d      	adds	r3, #45	; 0x2d
100046d4:	687a      	ldr	r2, [r7, #4]
100046d6:	3230      	adds	r2, #48	; 0x30
100046d8:	7811      	ldrb	r1, [r2, #0]
100046da:	4a19      	ldr	r2, [pc, #100]	; (10004740 <ESP32_Map_Data+0x3f8>)
100046dc:	54d1      	strb	r1, [r2, r3]
	buffer[offset+46] = ((unsigned char*)&dataGroup->temp_sensor)[1];
100046de:	230f      	movs	r3, #15
100046e0:	18fb      	adds	r3, r7, r3
100046e2:	781b      	ldrb	r3, [r3, #0]
100046e4:	332e      	adds	r3, #46	; 0x2e
100046e6:	687a      	ldr	r2, [r7, #4]
100046e8:	3230      	adds	r2, #48	; 0x30
100046ea:	3201      	adds	r2, #1
100046ec:	7811      	ldrb	r1, [r2, #0]
100046ee:	4a14      	ldr	r2, [pc, #80]	; (10004740 <ESP32_Map_Data+0x3f8>)
100046f0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+47] = ((unsigned char*)&dataGroup->temp_sensor)[2];
100046f2:	230f      	movs	r3, #15
100046f4:	18fb      	adds	r3, r7, r3
100046f6:	781b      	ldrb	r3, [r3, #0]
100046f8:	332f      	adds	r3, #47	; 0x2f
100046fa:	687a      	ldr	r2, [r7, #4]
100046fc:	3230      	adds	r2, #48	; 0x30
100046fe:	3202      	adds	r2, #2
10004700:	7811      	ldrb	r1, [r2, #0]
10004702:	4a0f      	ldr	r2, [pc, #60]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004704:	54d1      	strb	r1, [r2, r3]
	buffer[offset+48] = ((unsigned char*)&dataGroup->temp_sensor)[3];
10004706:	230f      	movs	r3, #15
10004708:	18fb      	adds	r3, r7, r3
1000470a:	781b      	ldrb	r3, [r3, #0]
1000470c:	3330      	adds	r3, #48	; 0x30
1000470e:	687a      	ldr	r2, [r7, #4]
10004710:	3230      	adds	r2, #48	; 0x30
10004712:	3203      	adds	r2, #3
10004714:	7811      	ldrb	r1, [r2, #0]
10004716:	4a0a      	ldr	r2, [pc, #40]	; (10004740 <ESP32_Map_Data+0x3f8>)
10004718:	54d1      	strb	r1, [r2, r3]
	buffer[offset+49] = ((unsigned char*)&dataGroup->frequency)[0];
1000471a:	230f      	movs	r3, #15
1000471c:	18fb      	adds	r3, r7, r3
1000471e:	781b      	ldrb	r3, [r3, #0]
10004720:	3331      	adds	r3, #49	; 0x31
10004722:	687a      	ldr	r2, [r7, #4]
10004724:	3234      	adds	r2, #52	; 0x34
10004726:	7811      	ldrb	r1, [r2, #0]
10004728:	4a05      	ldr	r2, [pc, #20]	; (10004740 <ESP32_Map_Data+0x3f8>)
1000472a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+50] = ((unsigned char*)&dataGroup->frequency)[1];
1000472c:	230f      	movs	r3, #15
1000472e:	18fb      	adds	r3, r7, r3
10004730:	781b      	ldrb	r3, [r3, #0]
10004732:	3332      	adds	r3, #50	; 0x32
10004734:	687a      	ldr	r2, [r7, #4]
10004736:	3234      	adds	r2, #52	; 0x34
10004738:	3201      	adds	r2, #1
1000473a:	7811      	ldrb	r1, [r2, #0]
1000473c:	e002      	b.n	10004744 <ESP32_Map_Data+0x3fc>
1000473e:	46c0      	nop			; (mov r8, r8)
10004740:	200009d0 	.word	0x200009d0
10004744:	4a6f      	ldr	r2, [pc, #444]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004746:	54d1      	strb	r1, [r2, r3]
	buffer[offset+51] = ((unsigned char*)&dataGroup->frequency)[2];
10004748:	230f      	movs	r3, #15
1000474a:	18fb      	adds	r3, r7, r3
1000474c:	781b      	ldrb	r3, [r3, #0]
1000474e:	3333      	adds	r3, #51	; 0x33
10004750:	687a      	ldr	r2, [r7, #4]
10004752:	3234      	adds	r2, #52	; 0x34
10004754:	3202      	adds	r2, #2
10004756:	7811      	ldrb	r1, [r2, #0]
10004758:	4a6a      	ldr	r2, [pc, #424]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000475a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+52] = ((unsigned char*)&dataGroup->frequency)[3];
1000475c:	230f      	movs	r3, #15
1000475e:	18fb      	adds	r3, r7, r3
10004760:	781b      	ldrb	r3, [r3, #0]
10004762:	3334      	adds	r3, #52	; 0x34
10004764:	687a      	ldr	r2, [r7, #4]
10004766:	3234      	adds	r2, #52	; 0x34
10004768:	3203      	adds	r2, #3
1000476a:	7811      	ldrb	r1, [r2, #0]
1000476c:	4a65      	ldr	r2, [pc, #404]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000476e:	54d1      	strb	r1, [r2, r3]
	/* bmc status */
	buffer[offset+53] = dataGroup->bmc_system;
10004770:	230f      	movs	r3, #15
10004772:	18fb      	adds	r3, r7, r3
10004774:	781b      	ldrb	r3, [r3, #0]
10004776:	3335      	adds	r3, #53	; 0x35
10004778:	687a      	ldr	r2, [r7, #4]
1000477a:	2138      	movs	r1, #56	; 0x38
1000477c:	5c51      	ldrb	r1, [r2, r1]
1000477e:	4a61      	ldr	r2, [pc, #388]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004780:	54d1      	strb	r1, [r2, r3]

	/* battery information */
	buffer[offset+54] = dataGroup->soC;
10004782:	230f      	movs	r3, #15
10004784:	18fb      	adds	r3, r7, r3
10004786:	781b      	ldrb	r3, [r3, #0]
10004788:	3336      	adds	r3, #54	; 0x36
1000478a:	687a      	ldr	r2, [r7, #4]
1000478c:	2139      	movs	r1, #57	; 0x39
1000478e:	5c51      	ldrb	r1, [r2, r1]
10004790:	4a5c      	ldr	r2, [pc, #368]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004792:	54d1      	strb	r1, [r2, r3]
	buffer[offset+55] = (dataGroup->vBat_genix) >> 8;
10004794:	230f      	movs	r3, #15
10004796:	18fb      	adds	r3, r7, r3
10004798:	781b      	ldrb	r3, [r3, #0]
1000479a:	3337      	adds	r3, #55	; 0x37
1000479c:	687a      	ldr	r2, [r7, #4]
1000479e:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
100047a0:	0a12      	lsrs	r2, r2, #8
100047a2:	b292      	uxth	r2, r2
100047a4:	b2d1      	uxtb	r1, r2
100047a6:	4a57      	ldr	r2, [pc, #348]	; (10004904 <ESP32_Map_Data+0x5bc>)
100047a8:	54d1      	strb	r1, [r2, r3]
	buffer[offset+56] = (dataGroup->vBat_genix);
100047aa:	230f      	movs	r3, #15
100047ac:	18fb      	adds	r3, r7, r3
100047ae:	781b      	ldrb	r3, [r3, #0]
100047b0:	3338      	adds	r3, #56	; 0x38
100047b2:	687a      	ldr	r2, [r7, #4]
100047b4:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
100047b6:	b2d1      	uxtb	r1, r2
100047b8:	4a52      	ldr	r2, [pc, #328]	; (10004904 <ESP32_Map_Data+0x5bc>)
100047ba:	54d1      	strb	r1, [r2, r3]
	buffer[offset+57] = ((unsigned char*)&dataGroup->iBat_genix)[0];
100047bc:	230f      	movs	r3, #15
100047be:	18fb      	adds	r3, r7, r3
100047c0:	781b      	ldrb	r3, [r3, #0]
100047c2:	3339      	adds	r3, #57	; 0x39
100047c4:	687a      	ldr	r2, [r7, #4]
100047c6:	323c      	adds	r2, #60	; 0x3c
100047c8:	7811      	ldrb	r1, [r2, #0]
100047ca:	4a4e      	ldr	r2, [pc, #312]	; (10004904 <ESP32_Map_Data+0x5bc>)
100047cc:	54d1      	strb	r1, [r2, r3]
	buffer[offset+58] = ((unsigned char*)&dataGroup->iBat_genix)[1];
100047ce:	230f      	movs	r3, #15
100047d0:	18fb      	adds	r3, r7, r3
100047d2:	781b      	ldrb	r3, [r3, #0]
100047d4:	333a      	adds	r3, #58	; 0x3a
100047d6:	687a      	ldr	r2, [r7, #4]
100047d8:	323c      	adds	r2, #60	; 0x3c
100047da:	3201      	adds	r2, #1
100047dc:	7811      	ldrb	r1, [r2, #0]
100047de:	4a49      	ldr	r2, [pc, #292]	; (10004904 <ESP32_Map_Data+0x5bc>)
100047e0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+59] = ((unsigned char*)&dataGroup->iBat_genix)[2];
100047e2:	230f      	movs	r3, #15
100047e4:	18fb      	adds	r3, r7, r3
100047e6:	781b      	ldrb	r3, [r3, #0]
100047e8:	333b      	adds	r3, #59	; 0x3b
100047ea:	687a      	ldr	r2, [r7, #4]
100047ec:	323c      	adds	r2, #60	; 0x3c
100047ee:	3202      	adds	r2, #2
100047f0:	7811      	ldrb	r1, [r2, #0]
100047f2:	4a44      	ldr	r2, [pc, #272]	; (10004904 <ESP32_Map_Data+0x5bc>)
100047f4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+60] = ((unsigned char*)&dataGroup->iBat_genix)[3];
100047f6:	230f      	movs	r3, #15
100047f8:	18fb      	adds	r3, r7, r3
100047fa:	781b      	ldrb	r3, [r3, #0]
100047fc:	333c      	adds	r3, #60	; 0x3c
100047fe:	687a      	ldr	r2, [r7, #4]
10004800:	323c      	adds	r2, #60	; 0x3c
10004802:	3203      	adds	r2, #3
10004804:	7811      	ldrb	r1, [r2, #0]
10004806:	4a3f      	ldr	r2, [pc, #252]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004808:	54d1      	strb	r1, [r2, r3]
	buffer[offset+61] = dataGroup->temp_genix;
1000480a:	230f      	movs	r3, #15
1000480c:	18fb      	adds	r3, r7, r3
1000480e:	781b      	ldrb	r3, [r3, #0]
10004810:	333d      	adds	r3, #61	; 0x3d
10004812:	687a      	ldr	r2, [r7, #4]
10004814:	2140      	movs	r1, #64	; 0x40
10004816:	5c51      	ldrb	r1, [r2, r1]
10004818:	4a3a      	ldr	r2, [pc, #232]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000481a:	54d1      	strb	r1, [r2, r3]

	/* rtc information */
	buffer[offset+62] = dataGroup->year >> 8;
1000481c:	230f      	movs	r3, #15
1000481e:	18fb      	adds	r3, r7, r3
10004820:	781b      	ldrb	r3, [r3, #0]
10004822:	333e      	adds	r3, #62	; 0x3e
10004824:	687a      	ldr	r2, [r7, #4]
10004826:	2142      	movs	r1, #66	; 0x42
10004828:	5a52      	ldrh	r2, [r2, r1]
1000482a:	0a12      	lsrs	r2, r2, #8
1000482c:	b292      	uxth	r2, r2
1000482e:	b2d1      	uxtb	r1, r2
10004830:	4a34      	ldr	r2, [pc, #208]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004832:	54d1      	strb	r1, [r2, r3]
	buffer[offset+63] = dataGroup->year;
10004834:	230f      	movs	r3, #15
10004836:	18fb      	adds	r3, r7, r3
10004838:	781b      	ldrb	r3, [r3, #0]
1000483a:	333f      	adds	r3, #63	; 0x3f
1000483c:	687a      	ldr	r2, [r7, #4]
1000483e:	2142      	movs	r1, #66	; 0x42
10004840:	5a52      	ldrh	r2, [r2, r1]
10004842:	b2d1      	uxtb	r1, r2
10004844:	4a2f      	ldr	r2, [pc, #188]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004846:	54d1      	strb	r1, [r2, r3]
	buffer[offset+64] = dataGroup->month;
10004848:	230f      	movs	r3, #15
1000484a:	18fb      	adds	r3, r7, r3
1000484c:	781b      	ldrb	r3, [r3, #0]
1000484e:	3340      	adds	r3, #64	; 0x40
10004850:	687a      	ldr	r2, [r7, #4]
10004852:	2144      	movs	r1, #68	; 0x44
10004854:	5c51      	ldrb	r1, [r2, r1]
10004856:	4a2b      	ldr	r2, [pc, #172]	; (10004904 <ESP32_Map_Data+0x5bc>)
10004858:	54d1      	strb	r1, [r2, r3]
	buffer[offset+65] = dataGroup->date;
1000485a:	230f      	movs	r3, #15
1000485c:	18fb      	adds	r3, r7, r3
1000485e:	781b      	ldrb	r3, [r3, #0]
10004860:	3341      	adds	r3, #65	; 0x41
10004862:	687a      	ldr	r2, [r7, #4]
10004864:	2145      	movs	r1, #69	; 0x45
10004866:	5c51      	ldrb	r1, [r2, r1]
10004868:	4a26      	ldr	r2, [pc, #152]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000486a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+66] = dataGroup->hour;
1000486c:	230f      	movs	r3, #15
1000486e:	18fb      	adds	r3, r7, r3
10004870:	781b      	ldrb	r3, [r3, #0]
10004872:	3342      	adds	r3, #66	; 0x42
10004874:	687a      	ldr	r2, [r7, #4]
10004876:	2146      	movs	r1, #70	; 0x46
10004878:	5c51      	ldrb	r1, [r2, r1]
1000487a:	4a22      	ldr	r2, [pc, #136]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000487c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+67] = dataGroup->minute;
1000487e:	230f      	movs	r3, #15
10004880:	18fb      	adds	r3, r7, r3
10004882:	781b      	ldrb	r3, [r3, #0]
10004884:	3343      	adds	r3, #67	; 0x43
10004886:	687a      	ldr	r2, [r7, #4]
10004888:	2147      	movs	r1, #71	; 0x47
1000488a:	5c51      	ldrb	r1, [r2, r1]
1000488c:	4a1d      	ldr	r2, [pc, #116]	; (10004904 <ESP32_Map_Data+0x5bc>)
1000488e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+68] = dataGroup->second;
10004890:	230f      	movs	r3, #15
10004892:	18fb      	adds	r3, r7, r3
10004894:	781b      	ldrb	r3, [r3, #0]
10004896:	3344      	adds	r3, #68	; 0x44
10004898:	687a      	ldr	r2, [r7, #4]
1000489a:	2148      	movs	r1, #72	; 0x48
1000489c:	5c51      	ldrb	r1, [r2, r1]
1000489e:	4a19      	ldr	r2, [pc, #100]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048a0:	54d1      	strb	r1, [r2, r3]

	crc	= ESP32_CRC16_Operation((unsigned char *) &buffer[offset], buffer[2]);
100048a2:	230f      	movs	r3, #15
100048a4:	18fb      	adds	r3, r7, r3
100048a6:	781a      	ldrb	r2, [r3, #0]
100048a8:	4b16      	ldr	r3, [pc, #88]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048aa:	18d2      	adds	r2, r2, r3
100048ac:	4b15      	ldr	r3, [pc, #84]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048ae:	789b      	ldrb	r3, [r3, #2]
100048b0:	210c      	movs	r1, #12
100048b2:	187c      	adds	r4, r7, r1
100048b4:	1c10      	adds	r0, r2, #0
100048b6:	1c19      	adds	r1, r3, #0
100048b8:	f000 f87a 	bl	100049b0 <ESP32_CRC16_Operation>
100048bc:	1c03      	adds	r3, r0, #0
100048be:	8023      	strh	r3, [r4, #0]
	buffer[offset+69] = crc >> 8;
100048c0:	230f      	movs	r3, #15
100048c2:	18fb      	adds	r3, r7, r3
100048c4:	781b      	ldrb	r3, [r3, #0]
100048c6:	3345      	adds	r3, #69	; 0x45
100048c8:	220c      	movs	r2, #12
100048ca:	18ba      	adds	r2, r7, r2
100048cc:	8812      	ldrh	r2, [r2, #0]
100048ce:	0a12      	lsrs	r2, r2, #8
100048d0:	b292      	uxth	r2, r2
100048d2:	b2d1      	uxtb	r1, r2
100048d4:	4a0b      	ldr	r2, [pc, #44]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048d6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+70] = crc;
100048d8:	230f      	movs	r3, #15
100048da:	18fb      	adds	r3, r7, r3
100048dc:	781b      	ldrb	r3, [r3, #0]
100048de:	3346      	adds	r3, #70	; 0x46
100048e0:	220c      	movs	r2, #12
100048e2:	18ba      	adds	r2, r7, r2
100048e4:	8812      	ldrh	r2, [r2, #0]
100048e6:	b2d1      	uxtb	r1, r2
100048e8:	4a06      	ldr	r2, [pc, #24]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048ea:	54d1      	strb	r1, [r2, r3]
	buffer[offset+71] = EoF;
100048ec:	230f      	movs	r3, #15
100048ee:	18fb      	adds	r3, r7, r3
100048f0:	781b      	ldrb	r3, [r3, #0]
100048f2:	3347      	adds	r3, #71	; 0x47
100048f4:	4a03      	ldr	r2, [pc, #12]	; (10004904 <ESP32_Map_Data+0x5bc>)
100048f6:	210a      	movs	r1, #10
100048f8:	54d1      	strb	r1, [r2, r3]

	return buffer;
100048fa:	4b02      	ldr	r3, [pc, #8]	; (10004904 <ESP32_Map_Data+0x5bc>)
}
100048fc:	1c18      	adds	r0, r3, #0
100048fe:	46bd      	mov	sp, r7
10004900:	b005      	add	sp, #20
10004902:	bd90      	pop	{r4, r7, pc}
10004904:	200009d0 	.word	0x200009d0

10004908 <ESP32_CRC16_table_init>:

void ESP32_CRC16_table_init(void)
{
10004908:	b580      	push	{r7, lr}
1000490a:	b082      	sub	sp, #8
1000490c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
1000490e:	1dbb      	adds	r3, r7, #6
10004910:	2200      	movs	r2, #0
10004912:	801a      	strh	r2, [r3, #0]
10004914:	e03c      	b.n	10004990 <ESP32_CRC16_table_init+0x88>

		crc = 0;
10004916:	1cbb      	adds	r3, r7, #2
10004918:	2200      	movs	r2, #0
1000491a:	801a      	strh	r2, [r3, #0]
		c   = i;
1000491c:	1c3b      	adds	r3, r7, #0
1000491e:	1dba      	adds	r2, r7, #6
10004920:	8812      	ldrh	r2, [r2, #0]
10004922:	801a      	strh	r2, [r3, #0]

		for (j=0; j<8; j++) {
10004924:	1d3b      	adds	r3, r7, #4
10004926:	2200      	movs	r2, #0
10004928:	801a      	strh	r2, [r3, #0]
1000492a:	e021      	b.n	10004970 <ESP32_CRC16_table_init+0x68>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
1000492c:	1cba      	adds	r2, r7, #2
1000492e:	1c3b      	adds	r3, r7, #0
10004930:	8812      	ldrh	r2, [r2, #0]
10004932:	881b      	ldrh	r3, [r3, #0]
10004934:	4053      	eors	r3, r2
10004936:	b29b      	uxth	r3, r3
10004938:	1c1a      	adds	r2, r3, #0
1000493a:	2301      	movs	r3, #1
1000493c:	4013      	ands	r3, r2
1000493e:	d008      	beq.n	10004952 <ESP32_CRC16_table_init+0x4a>
10004940:	1cbb      	adds	r3, r7, #2
10004942:	881b      	ldrh	r3, [r3, #0]
10004944:	085b      	lsrs	r3, r3, #1
10004946:	b29a      	uxth	r2, r3
10004948:	1cbb      	adds	r3, r7, #2
1000494a:	4916      	ldr	r1, [pc, #88]	; (100049a4 <ESP32_CRC16_table_init+0x9c>)
1000494c:	404a      	eors	r2, r1
1000494e:	801a      	strh	r2, [r3, #0]
10004950:	e004      	b.n	1000495c <ESP32_CRC16_table_init+0x54>
			else                      crc =   crc >> 1;
10004952:	1cbb      	adds	r3, r7, #2
10004954:	1cba      	adds	r2, r7, #2
10004956:	8812      	ldrh	r2, [r2, #0]
10004958:	0852      	lsrs	r2, r2, #1
1000495a:	801a      	strh	r2, [r3, #0]

			c = c >> 1;
1000495c:	1c3b      	adds	r3, r7, #0
1000495e:	1c3a      	adds	r2, r7, #0
10004960:	8812      	ldrh	r2, [r2, #0]
10004962:	0852      	lsrs	r2, r2, #1
10004964:	801a      	strh	r2, [r3, #0]
	for (i=0; i<256; i++) {

		crc = 0;
		c   = i;

		for (j=0; j<8; j++) {
10004966:	1d3b      	adds	r3, r7, #4
10004968:	881a      	ldrh	r2, [r3, #0]
1000496a:	1d3b      	adds	r3, r7, #4
1000496c:	3201      	adds	r2, #1
1000496e:	801a      	strh	r2, [r3, #0]
10004970:	1d3b      	adds	r3, r7, #4
10004972:	881b      	ldrh	r3, [r3, #0]
10004974:	2b07      	cmp	r3, #7
10004976:	d9d9      	bls.n	1000492c <ESP32_CRC16_table_init+0x24>
			else                      crc =   crc >> 1;

			c = c >> 1;
		}

		crc_tab16[i] = crc;
10004978:	1dbb      	adds	r3, r7, #6
1000497a:	881a      	ldrh	r2, [r3, #0]
1000497c:	4b0a      	ldr	r3, [pc, #40]	; (100049a8 <ESP32_CRC16_table_init+0xa0>)
1000497e:	0052      	lsls	r2, r2, #1
10004980:	1cb9      	adds	r1, r7, #2
10004982:	8809      	ldrh	r1, [r1, #0]
10004984:	52d1      	strh	r1, [r2, r3]
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
10004986:	1dbb      	adds	r3, r7, #6
10004988:	881a      	ldrh	r2, [r3, #0]
1000498a:	1dbb      	adds	r3, r7, #6
1000498c:	3201      	adds	r2, #1
1000498e:	801a      	strh	r2, [r3, #0]
10004990:	1dbb      	adds	r3, r7, #6
10004992:	881b      	ldrh	r3, [r3, #0]
10004994:	2bff      	cmp	r3, #255	; 0xff
10004996:	d9be      	bls.n	10004916 <ESP32_CRC16_table_init+0xe>
		}

		crc_tab16[i] = crc;
	}

	crc_tab16_init = true;
10004998:	4b04      	ldr	r3, [pc, #16]	; (100049ac <ESP32_CRC16_table_init+0xa4>)
1000499a:	2201      	movs	r2, #1
1000499c:	701a      	strb	r2, [r3, #0]
}
1000499e:	46bd      	mov	sp, r7
100049a0:	b002      	add	sp, #8
100049a2:	bd80      	pop	{r7, pc}
100049a4:	ffffa001 	.word	0xffffa001
100049a8:	200007d0 	.word	0x200007d0
100049ac:	200007cc 	.word	0x200007cc

100049b0 <ESP32_CRC16_Operation>:

uint16_t ESP32_CRC16_Operation(const unsigned char *input_str, unsigned char num_bytes)
{
100049b0:	b580      	push	{r7, lr}
100049b2:	b086      	sub	sp, #24
100049b4:	af00      	add	r7, sp, #0
100049b6:	6078      	str	r0, [r7, #4]
100049b8:	1c0a      	adds	r2, r1, #0
100049ba:	1cfb      	adds	r3, r7, #3
100049bc:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint16_t short_c;
	const unsigned char *ptr;
	unsigned char a;

	if (!crc_tab16_init) ESP32_CRC16_table_init();
100049be:	4b27      	ldr	r3, [pc, #156]	; (10004a5c <ESP32_CRC16_Operation+0xac>)
100049c0:	781b      	ldrb	r3, [r3, #0]
100049c2:	2201      	movs	r2, #1
100049c4:	4053      	eors	r3, r2
100049c6:	b2db      	uxtb	r3, r3
100049c8:	2b00      	cmp	r3, #0
100049ca:	d001      	beq.n	100049d0 <ESP32_CRC16_Operation+0x20>
100049cc:	f7ff ff9c 	bl	10004908 <ESP32_CRC16_table_init>

	crc = CRC_START_16;
100049d0:	2316      	movs	r3, #22
100049d2:	18fb      	adds	r3, r7, r3
100049d4:	2200      	movs	r2, #0
100049d6:	801a      	strh	r2, [r3, #0]
	ptr = input_str;
100049d8:	687b      	ldr	r3, [r7, #4]
100049da:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
100049dc:	693b      	ldr	r3, [r7, #16]
100049de:	2b00      	cmp	r3, #0
100049e0:	d035      	beq.n	10004a4e <ESP32_CRC16_Operation+0x9e>
100049e2:	230f      	movs	r3, #15
100049e4:	18fb      	adds	r3, r7, r3
100049e6:	2200      	movs	r2, #0
100049e8:	701a      	strb	r2, [r3, #0]
100049ea:	e029      	b.n	10004a40 <ESP32_CRC16_Operation+0x90>

		short_c = 0x00ff & (uint16_t) *ptr;
100049ec:	693b      	ldr	r3, [r7, #16]
100049ee:	781a      	ldrb	r2, [r3, #0]
100049f0:	230c      	movs	r3, #12
100049f2:	18fb      	adds	r3, r7, r3
100049f4:	801a      	strh	r2, [r3, #0]
		tmp     =  crc       ^ short_c;
100049f6:	230a      	movs	r3, #10
100049f8:	18fb      	adds	r3, r7, r3
100049fa:	2216      	movs	r2, #22
100049fc:	18b9      	adds	r1, r7, r2
100049fe:	220c      	movs	r2, #12
10004a00:	18ba      	adds	r2, r7, r2
10004a02:	8809      	ldrh	r1, [r1, #0]
10004a04:	8812      	ldrh	r2, [r2, #0]
10004a06:	404a      	eors	r2, r1
10004a08:	801a      	strh	r2, [r3, #0]
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
10004a0a:	2316      	movs	r3, #22
10004a0c:	18fb      	adds	r3, r7, r3
10004a0e:	881b      	ldrh	r3, [r3, #0]
10004a10:	0a1b      	lsrs	r3, r3, #8
10004a12:	b299      	uxth	r1, r3
10004a14:	230a      	movs	r3, #10
10004a16:	18fb      	adds	r3, r7, r3
10004a18:	881b      	ldrh	r3, [r3, #0]
10004a1a:	22ff      	movs	r2, #255	; 0xff
10004a1c:	401a      	ands	r2, r3
10004a1e:	4b10      	ldr	r3, [pc, #64]	; (10004a60 <ESP32_CRC16_Operation+0xb0>)
10004a20:	0052      	lsls	r2, r2, #1
10004a22:	5ad2      	ldrh	r2, [r2, r3]
10004a24:	2316      	movs	r3, #22
10004a26:	18fb      	adds	r3, r7, r3
10004a28:	404a      	eors	r2, r1
10004a2a:	801a      	strh	r2, [r3, #0]

		ptr++;
10004a2c:	693b      	ldr	r3, [r7, #16]
10004a2e:	3301      	adds	r3, #1
10004a30:	613b      	str	r3, [r7, #16]
	if (!crc_tab16_init) ESP32_CRC16_table_init();

	crc = CRC_START_16;
	ptr = input_str;

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
10004a32:	230f      	movs	r3, #15
10004a34:	18fb      	adds	r3, r7, r3
10004a36:	781a      	ldrb	r2, [r3, #0]
10004a38:	230f      	movs	r3, #15
10004a3a:	18fb      	adds	r3, r7, r3
10004a3c:	3201      	adds	r2, #1
10004a3e:	701a      	strb	r2, [r3, #0]
10004a40:	230f      	movs	r3, #15
10004a42:	18fa      	adds	r2, r7, r3
10004a44:	1cfb      	adds	r3, r7, #3
10004a46:	7812      	ldrb	r2, [r2, #0]
10004a48:	781b      	ldrb	r3, [r3, #0]
10004a4a:	429a      	cmp	r2, r3
10004a4c:	d3ce      	bcc.n	100049ec <ESP32_CRC16_Operation+0x3c>
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];

		ptr++;
	}

	return crc;
10004a4e:	2316      	movs	r3, #22
10004a50:	18fb      	adds	r3, r7, r3
10004a52:	881b      	ldrh	r3, [r3, #0]
}
10004a54:	1c18      	adds	r0, r3, #0
10004a56:	46bd      	mov	sp, r7
10004a58:	b006      	add	sp, #24
10004a5a:	bd80      	pop	{r7, pc}
10004a5c:	200007cc 	.word	0x200007cc
10004a60:	200007d0 	.word	0x200007d0

10004a64 <ESP32_CRC8_maxim>:

uint8_t ESP32_CRC8_maxim(uint8_t *data, int length)
{
10004a64:	b580      	push	{r7, lr}
10004a66:	b086      	sub	sp, #24
10004a68:	af00      	add	r7, sp, #0
10004a6a:	6078      	str	r0, [r7, #4]
10004a6c:	6039      	str	r1, [r7, #0]
   uint8_t crc = 0x00;
10004a6e:	2317      	movs	r3, #23
10004a70:	18fb      	adds	r3, r7, r3
10004a72:	2200      	movs	r2, #0
10004a74:	701a      	strb	r2, [r3, #0]
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
10004a76:	2300      	movs	r3, #0
10004a78:	613b      	str	r3, [r7, #16]
10004a7a:	e044      	b.n	10004b06 <ESP32_CRC8_maxim+0xa2>
   {
      extract = *data;
10004a7c:	2316      	movs	r3, #22
10004a7e:	18fb      	adds	r3, r7, r3
10004a80:	687a      	ldr	r2, [r7, #4]
10004a82:	7812      	ldrb	r2, [r2, #0]
10004a84:	701a      	strb	r2, [r3, #0]
      for (uint8_t tempI = 8; tempI; tempI--)
10004a86:	230f      	movs	r3, #15
10004a88:	18fb      	adds	r3, r7, r3
10004a8a:	2208      	movs	r2, #8
10004a8c:	701a      	strb	r2, [r3, #0]
10004a8e:	e02f      	b.n	10004af0 <ESP32_CRC8_maxim+0x8c>
      {
         sum = (crc ^ extract) & 0x01;
10004a90:	2317      	movs	r3, #23
10004a92:	18fa      	adds	r2, r7, r3
10004a94:	2316      	movs	r3, #22
10004a96:	18fb      	adds	r3, r7, r3
10004a98:	7812      	ldrb	r2, [r2, #0]
10004a9a:	781b      	ldrb	r3, [r3, #0]
10004a9c:	4053      	eors	r3, r2
10004a9e:	b2da      	uxtb	r2, r3
10004aa0:	230e      	movs	r3, #14
10004aa2:	18fb      	adds	r3, r7, r3
10004aa4:	2101      	movs	r1, #1
10004aa6:	400a      	ands	r2, r1
10004aa8:	701a      	strb	r2, [r3, #0]
         crc >>= 1;
10004aaa:	2317      	movs	r3, #23
10004aac:	18fb      	adds	r3, r7, r3
10004aae:	2217      	movs	r2, #23
10004ab0:	18ba      	adds	r2, r7, r2
10004ab2:	7812      	ldrb	r2, [r2, #0]
10004ab4:	0852      	lsrs	r2, r2, #1
10004ab6:	701a      	strb	r2, [r3, #0]
         if (sum)
10004ab8:	230e      	movs	r3, #14
10004aba:	18fb      	adds	r3, r7, r3
10004abc:	781b      	ldrb	r3, [r3, #0]
10004abe:	2b00      	cmp	r3, #0
10004ac0:	d008      	beq.n	10004ad4 <ESP32_CRC8_maxim+0x70>
            crc ^= 0x8C;
10004ac2:	2317      	movs	r3, #23
10004ac4:	18fb      	adds	r3, r7, r3
10004ac6:	2217      	movs	r2, #23
10004ac8:	18ba      	adds	r2, r7, r2
10004aca:	7812      	ldrb	r2, [r2, #0]
10004acc:	2174      	movs	r1, #116	; 0x74
10004ace:	4249      	negs	r1, r1
10004ad0:	404a      	eors	r2, r1
10004ad2:	701a      	strb	r2, [r3, #0]
         extract >>= 1;
10004ad4:	2316      	movs	r3, #22
10004ad6:	18fb      	adds	r3, r7, r3
10004ad8:	2216      	movs	r2, #22
10004ada:	18ba      	adds	r2, r7, r2
10004adc:	7812      	ldrb	r2, [r2, #0]
10004ade:	0852      	lsrs	r2, r2, #1
10004ae0:	701a      	strb	r2, [r3, #0]
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
   {
      extract = *data;
      for (uint8_t tempI = 8; tempI; tempI--)
10004ae2:	230f      	movs	r3, #15
10004ae4:	18fb      	adds	r3, r7, r3
10004ae6:	781a      	ldrb	r2, [r3, #0]
10004ae8:	230f      	movs	r3, #15
10004aea:	18fb      	adds	r3, r7, r3
10004aec:	3a01      	subs	r2, #1
10004aee:	701a      	strb	r2, [r3, #0]
10004af0:	230f      	movs	r3, #15
10004af2:	18fb      	adds	r3, r7, r3
10004af4:	781b      	ldrb	r3, [r3, #0]
10004af6:	2b00      	cmp	r3, #0
10004af8:	d1ca      	bne.n	10004a90 <ESP32_CRC8_maxim+0x2c>
         crc >>= 1;
         if (sum)
            crc ^= 0x8C;
         extract >>= 1;
      }
      data++;
10004afa:	687b      	ldr	r3, [r7, #4]
10004afc:	3301      	adds	r3, #1
10004afe:	607b      	str	r3, [r7, #4]
uint8_t ESP32_CRC8_maxim(uint8_t *data, int length)
{
   uint8_t crc = 0x00;
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
10004b00:	693b      	ldr	r3, [r7, #16]
10004b02:	3301      	adds	r3, #1
10004b04:	613b      	str	r3, [r7, #16]
10004b06:	693a      	ldr	r2, [r7, #16]
10004b08:	683b      	ldr	r3, [r7, #0]
10004b0a:	429a      	cmp	r2, r3
10004b0c:	dbb6      	blt.n	10004a7c <ESP32_CRC8_maxim+0x18>
            crc ^= 0x8C;
         extract >>= 1;
      }
      data++;
   }
   return crc;
10004b0e:	2317      	movs	r3, #23
10004b10:	18fb      	adds	r3, r7, r3
10004b12:	781b      	ldrb	r3, [r3, #0]
}
10004b14:	1c18      	adds	r0, r3, #0
10004b16:	46bd      	mov	sp, r7
10004b18:	b006      	add	sp, #24
10004b1a:	bd80      	pop	{r7, pc}

10004b1c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
10004b1c:	b580      	push	{r7, lr}
10004b1e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
10004b20:	f000 f804 	bl	10004b2c <SystemCoreSetup>
  SystemCoreClockSetup();
10004b24:	f000 f80e 	bl	10004b44 <SystemCoreClockSetup>
}
10004b28:	46bd      	mov	sp, r7
10004b2a:	bd80      	pop	{r7, pc}

10004b2c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
10004b2c:	b580      	push	{r7, lr}
10004b2e:	af00      	add	r7, sp, #0
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10004b30:	4b03      	ldr	r3, [pc, #12]	; (10004b40 <SystemCoreSetup+0x14>)
10004b32:	4a03      	ldr	r2, [pc, #12]	; (10004b40 <SystemCoreSetup+0x14>)
10004b34:	6e92      	ldr	r2, [r2, #104]	; 0x68
10004b36:	2101      	movs	r1, #1
10004b38:	438a      	bics	r2, r1
10004b3a:	669a      	str	r2, [r3, #104]	; 0x68
}
10004b3c:	46bd      	mov	sp, r7
10004b3e:	bd80      	pop	{r7, pc}
10004b40:	40010000 	.word	0x40010000

10004b44 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
10004b44:	b580      	push	{r7, lr}
10004b46:	af00      	add	r7, sp, #0
  /* Clock setup done during SSW using the CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */

  /* disable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C0UL;
10004b48:	4b09      	ldr	r3, [pc, #36]	; (10004b70 <SystemCoreClockSetup+0x2c>)
10004b4a:	22c0      	movs	r2, #192	; 0xc0
10004b4c:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR1 |= SCU_CLK_CLKCR1_DCLKSEL_Msk;
  
#else
    
  /* DCLK source using DCO1 */
  SCU_CLK->CLKCR1 &= ~SCU_CLK_CLKCR1_DCLKSEL_Msk;
10004b4e:	4b09      	ldr	r3, [pc, #36]	; (10004b74 <SystemCoreClockSetup+0x30>)
10004b50:	4a08      	ldr	r2, [pc, #32]	; (10004b74 <SystemCoreClockSetup+0x30>)
10004b52:	69d2      	ldr	r2, [r2, #28]
10004b54:	4908      	ldr	r1, [pc, #32]	; (10004b78 <SystemCoreClockSetup+0x34>)
10004b56:	400a      	ands	r2, r1
10004b58:	61da      	str	r2, [r3, #28]
#endif  
#endif  

  /* Update PCLK selection mux. */
  /* Fractional divider enabled, MCLK frequency equal DCO1 frequency or external crystal frequency */
  SCU_CLK->CLKCR = (1023UL <<SCU_CLK_CLKCR_CNTADJ_Pos) |
10004b5a:	4b06      	ldr	r3, [pc, #24]	; (10004b74 <SystemCoreClockSetup+0x30>)
10004b5c:	4a07      	ldr	r2, [pc, #28]	; (10004b7c <SystemCoreClockSetup+0x38>)
10004b5e:	601a      	str	r2, [r3, #0]
                    (RTC_CLOCK_SRC << SCU_CLK_CLKCR_RTCCLKSEL_Pos) |
                    (PCLK_CLOCK_SRC << SCU_CLK_CLKCR_PCLKSEL_Pos) |
                    0x100U; /* IDIV = 1 */

  /* enable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C3UL;
10004b60:	4b03      	ldr	r3, [pc, #12]	; (10004b70 <SystemCoreClockSetup+0x2c>)
10004b62:	22c3      	movs	r2, #195	; 0xc3
10004b64:	625a      	str	r2, [r3, #36]	; 0x24

  SystemCoreClockUpdate();
10004b66:	f000 f80b 	bl	10004b80 <SystemCoreClockUpdate>
}
10004b6a:	46bd      	mov	sp, r7
10004b6c:	bd80      	pop	{r7, pc}
10004b6e:	46c0      	nop			; (mov r8, r8)
10004b70:	40010000 	.word	0x40010000
10004b74:	40010300 	.word	0x40010300
10004b78:	fffffdff 	.word	0xfffffdff
10004b7c:	3ff10100 	.word	0x3ff10100

10004b80 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10004b80:	b580      	push	{r7, lr}
10004b82:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10004b84:	4b2a      	ldr	r3, [pc, #168]	; (10004c30 <SystemCoreClockUpdate+0xb0>)
10004b86:	681a      	ldr	r2, [r3, #0]
10004b88:	23ff      	movs	r3, #255	; 0xff
10004b8a:	021b      	lsls	r3, r3, #8
10004b8c:	4013      	ands	r3, r2
10004b8e:	0a1a      	lsrs	r2, r3, #8
10004b90:	4b28      	ldr	r3, [pc, #160]	; (10004c34 <SystemCoreClockUpdate+0xb4>)
10004b92:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
10004b94:	4b27      	ldr	r3, [pc, #156]	; (10004c34 <SystemCoreClockUpdate+0xb4>)
10004b96:	681b      	ldr	r3, [r3, #0]
10004b98:	2b00      	cmp	r3, #0
10004b9a:	d037      	beq.n	10004c0c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10004b9c:	4b24      	ldr	r3, [pc, #144]	; (10004c30 <SystemCoreClockUpdate+0xb0>)
10004b9e:	681b      	ldr	r3, [r3, #0]
10004ba0:	22ff      	movs	r2, #255	; 0xff
10004ba2:	401a      	ands	r2, r3
10004ba4:	4b24      	ldr	r3, [pc, #144]	; (10004c38 <SystemCoreClockUpdate+0xb8>)
10004ba6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
10004ba8:	4b21      	ldr	r3, [pc, #132]	; (10004c30 <SystemCoreClockUpdate+0xb0>)
10004baa:	69db      	ldr	r3, [r3, #28]
10004bac:	2203      	movs	r2, #3
10004bae:	4013      	ands	r3, r2
10004bb0:	021a      	lsls	r2, r3, #8
10004bb2:	4b21      	ldr	r3, [pc, #132]	; (10004c38 <SystemCoreClockUpdate+0xb8>)
10004bb4:	681b      	ldr	r3, [r3, #0]
10004bb6:	431a      	orrs	r2, r3
10004bb8:	4b1f      	ldr	r3, [pc, #124]	; (10004c38 <SystemCoreClockUpdate+0xb8>)
10004bba:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10004bbc:	4b1c      	ldr	r3, [pc, #112]	; (10004c30 <SystemCoreClockUpdate+0xb0>)
10004bbe:	69da      	ldr	r2, [r3, #28]
10004bc0:	2380      	movs	r3, #128	; 0x80
10004bc2:	009b      	lsls	r3, r3, #2
10004bc4:	4013      	ands	r3, r2
10004bc6:	d10e      	bne.n	10004be6 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10004bc8:	4b1a      	ldr	r3, [pc, #104]	; (10004c34 <SystemCoreClockUpdate+0xb4>)
10004bca:	681b      	ldr	r3, [r3, #0]
10004bcc:	029a      	lsls	r2, r3, #10
10004bce:	4b1a      	ldr	r3, [pc, #104]	; (10004c38 <SystemCoreClockUpdate+0xb8>)
10004bd0:	681b      	ldr	r3, [r3, #0]
10004bd2:	18d3      	adds	r3, r2, r3
10004bd4:	4819      	ldr	r0, [pc, #100]	; (10004c3c <SystemCoreClockUpdate+0xbc>)
10004bd6:	1c19      	adds	r1, r3, #0
10004bd8:	f001 fe04 	bl	100067e4 <__aeabi_uidiv>
10004bdc:	1c03      	adds	r3, r0, #0
10004bde:	011a      	lsls	r2, r3, #4
10004be0:	4b17      	ldr	r3, [pc, #92]	; (10004c40 <SystemCoreClockUpdate+0xc0>)
10004be2:	601a      	str	r2, [r3, #0]
10004be4:	e021      	b.n	10004c2a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10004be6:	f000 f82f 	bl	10004c48 <OSCHP_GetFrequency>
10004bea:	1c03      	adds	r3, r0, #0
10004bec:	0199      	lsls	r1, r3, #6
10004bee:	4b11      	ldr	r3, [pc, #68]	; (10004c34 <SystemCoreClockUpdate+0xb4>)
10004bf0:	681b      	ldr	r3, [r3, #0]
10004bf2:	029a      	lsls	r2, r3, #10
10004bf4:	4b10      	ldr	r3, [pc, #64]	; (10004c38 <SystemCoreClockUpdate+0xb8>)
10004bf6:	681b      	ldr	r3, [r3, #0]
10004bf8:	18d3      	adds	r3, r2, r3
10004bfa:	1c08      	adds	r0, r1, #0
10004bfc:	1c19      	adds	r1, r3, #0
10004bfe:	f001 fdf1 	bl	100067e4 <__aeabi_uidiv>
10004c02:	1c03      	adds	r3, r0, #0
10004c04:	011a      	lsls	r2, r3, #4
10004c06:	4b0e      	ldr	r3, [pc, #56]	; (10004c40 <SystemCoreClockUpdate+0xc0>)
10004c08:	601a      	str	r2, [r3, #0]
10004c0a:	e00e      	b.n	10004c2a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10004c0c:	4b08      	ldr	r3, [pc, #32]	; (10004c30 <SystemCoreClockUpdate+0xb0>)
10004c0e:	69da      	ldr	r2, [r3, #28]
10004c10:	2380      	movs	r3, #128	; 0x80
10004c12:	009b      	lsls	r3, r3, #2
10004c14:	4013      	ands	r3, r2
10004c16:	d103      	bne.n	10004c20 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10004c18:	4b09      	ldr	r3, [pc, #36]	; (10004c40 <SystemCoreClockUpdate+0xc0>)
10004c1a:	4a0a      	ldr	r2, [pc, #40]	; (10004c44 <SystemCoreClockUpdate+0xc4>)
10004c1c:	601a      	str	r2, [r3, #0]
10004c1e:	e004      	b.n	10004c2a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10004c20:	f000 f812 	bl	10004c48 <OSCHP_GetFrequency>
10004c24:	1c02      	adds	r2, r0, #0
10004c26:	4b06      	ldr	r3, [pc, #24]	; (10004c40 <SystemCoreClockUpdate+0xc0>)
10004c28:	601a      	str	r2, [r3, #0]
    }
  }
}
10004c2a:	46bd      	mov	sp, r7
10004c2c:	bd80      	pop	{r7, pc}
10004c2e:	46c0      	nop			; (mov r8, r8)
10004c30:	40010300 	.word	0x40010300
10004c34:	20000a20 	.word	0x20000a20
10004c38:	20000a24 	.word	0x20000a24
10004c3c:	b71b0000 	.word	0xb71b0000
10004c40:	20003ffc 	.word	0x20003ffc
10004c44:	02dc6c00 	.word	0x02dc6c00

10004c48 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10004c48:	b580      	push	{r7, lr}
10004c4a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
10004c4c:	4b01      	ldr	r3, [pc, #4]	; (10004c54 <OSCHP_GetFrequency+0xc>)
}
10004c4e:	1c18      	adds	r0, r3, #0
10004c50:	46bd      	mov	sp, r7
10004c52:	bd80      	pop	{r7, pc}
10004c54:	01312d00 	.word	0x01312d00

10004c58 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10004c58:	b590      	push	{r4, r7, lr}
10004c5a:	b085      	sub	sp, #20
10004c5c:	af00      	add	r7, sp, #0
10004c5e:	60f8      	str	r0, [r7, #12]
10004c60:	607a      	str	r2, [r7, #4]
10004c62:	230b      	movs	r3, #11
10004c64:	18fb      	adds	r3, r7, r3
10004c66:	1c0a      	adds	r2, r1, #0
10004c68:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10004c6a:	230b      	movs	r3, #11
10004c6c:	18fb      	adds	r3, r7, r3
10004c6e:	781b      	ldrb	r3, [r3, #0]
10004c70:	089b      	lsrs	r3, r3, #2
10004c72:	b2db      	uxtb	r3, r3
10004c74:	1c18      	adds	r0, r3, #0
10004c76:	230b      	movs	r3, #11
10004c78:	18fb      	adds	r3, r7, r3
10004c7a:	781b      	ldrb	r3, [r3, #0]
10004c7c:	089b      	lsrs	r3, r3, #2
10004c7e:	b2db      	uxtb	r3, r3
10004c80:	1c1a      	adds	r2, r3, #0
10004c82:	68fb      	ldr	r3, [r7, #12]
10004c84:	3204      	adds	r2, #4
10004c86:	0092      	lsls	r2, r2, #2
10004c88:	58d3      	ldr	r3, [r2, r3]
10004c8a:	220b      	movs	r2, #11
10004c8c:	18ba      	adds	r2, r7, r2
10004c8e:	7812      	ldrb	r2, [r2, #0]
10004c90:	2103      	movs	r1, #3
10004c92:	400a      	ands	r2, r1
10004c94:	00d2      	lsls	r2, r2, #3
10004c96:	1c11      	adds	r1, r2, #0
10004c98:	22fc      	movs	r2, #252	; 0xfc
10004c9a:	408a      	lsls	r2, r1
10004c9c:	43d2      	mvns	r2, r2
10004c9e:	401a      	ands	r2, r3
10004ca0:	1c11      	adds	r1, r2, #0
10004ca2:	68fb      	ldr	r3, [r7, #12]
10004ca4:	1d02      	adds	r2, r0, #4
10004ca6:	0092      	lsls	r2, r2, #2
10004ca8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10004caa:	68fb      	ldr	r3, [r7, #12]
10004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10004cae:	220b      	movs	r2, #11
10004cb0:	18ba      	adds	r2, r7, r2
10004cb2:	7812      	ldrb	r2, [r2, #0]
10004cb4:	0052      	lsls	r2, r2, #1
10004cb6:	1c11      	adds	r1, r2, #0
10004cb8:	2203      	movs	r2, #3
10004cba:	408a      	lsls	r2, r1
10004cbc:	43d2      	mvns	r2, r2
10004cbe:	401a      	ands	r2, r3
10004cc0:	68fb      	ldr	r3, [r7, #12]
10004cc2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10004cc4:	230b      	movs	r3, #11
10004cc6:	18fb      	adds	r3, r7, r3
10004cc8:	781b      	ldrb	r3, [r3, #0]
10004cca:	08db      	lsrs	r3, r3, #3
10004ccc:	b2db      	uxtb	r3, r3
10004cce:	1c18      	adds	r0, r3, #0
10004cd0:	230b      	movs	r3, #11
10004cd2:	18fb      	adds	r3, r7, r3
10004cd4:	781b      	ldrb	r3, [r3, #0]
10004cd6:	08db      	lsrs	r3, r3, #3
10004cd8:	b2db      	uxtb	r3, r3
10004cda:	1c1a      	adds	r2, r3, #0
10004cdc:	68fb      	ldr	r3, [r7, #12]
10004cde:	3210      	adds	r2, #16
10004ce0:	0092      	lsls	r2, r2, #2
10004ce2:	58d3      	ldr	r3, [r2, r3]
10004ce4:	220b      	movs	r2, #11
10004ce6:	18ba      	adds	r2, r7, r2
10004ce8:	7812      	ldrb	r2, [r2, #0]
10004cea:	2107      	movs	r1, #7
10004cec:	400a      	ands	r2, r1
10004cee:	0092      	lsls	r2, r2, #2
10004cf0:	1c11      	adds	r1, r2, #0
10004cf2:	2204      	movs	r2, #4
10004cf4:	408a      	lsls	r2, r1
10004cf6:	43d2      	mvns	r2, r2
10004cf8:	401a      	ands	r2, r3
10004cfa:	1c11      	adds	r1, r2, #0
10004cfc:	68fb      	ldr	r3, [r7, #12]
10004cfe:	1c02      	adds	r2, r0, #0
10004d00:	3210      	adds	r2, #16
10004d02:	0092      	lsls	r2, r2, #2
10004d04:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10004d06:	230b      	movs	r3, #11
10004d08:	18fb      	adds	r3, r7, r3
10004d0a:	781b      	ldrb	r3, [r3, #0]
10004d0c:	08db      	lsrs	r3, r3, #3
10004d0e:	b2db      	uxtb	r3, r3
10004d10:	1c18      	adds	r0, r3, #0
10004d12:	230b      	movs	r3, #11
10004d14:	18fb      	adds	r3, r7, r3
10004d16:	781b      	ldrb	r3, [r3, #0]
10004d18:	08db      	lsrs	r3, r3, #3
10004d1a:	b2db      	uxtb	r3, r3
10004d1c:	1c1a      	adds	r2, r3, #0
10004d1e:	68fb      	ldr	r3, [r7, #12]
10004d20:	3210      	adds	r2, #16
10004d22:	0092      	lsls	r2, r2, #2
10004d24:	58d2      	ldr	r2, [r2, r3]
10004d26:	687b      	ldr	r3, [r7, #4]
10004d28:	785b      	ldrb	r3, [r3, #1]
10004d2a:	1c1c      	adds	r4, r3, #0
10004d2c:	230b      	movs	r3, #11
10004d2e:	18fb      	adds	r3, r7, r3
10004d30:	781b      	ldrb	r3, [r3, #0]
10004d32:	2107      	movs	r1, #7
10004d34:	400b      	ands	r3, r1
10004d36:	009b      	lsls	r3, r3, #2
10004d38:	409c      	lsls	r4, r3
10004d3a:	1c23      	adds	r3, r4, #0
10004d3c:	431a      	orrs	r2, r3
10004d3e:	1c11      	adds	r1, r2, #0
10004d40:	68fb      	ldr	r3, [r7, #12]
10004d42:	1c02      	adds	r2, r0, #0
10004d44:	3210      	adds	r2, #16
10004d46:	0092      	lsls	r2, r2, #2
10004d48:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10004d4a:	68fb      	ldr	r3, [r7, #12]
10004d4c:	4a20      	ldr	r2, [pc, #128]	; (10004dd0 <XMC_GPIO_Init+0x178>)
10004d4e:	4293      	cmp	r3, r2
10004d50:	d10b      	bne.n	10004d6a <XMC_GPIO_Init+0x112>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10004d52:	68fb      	ldr	r3, [r7, #12]
10004d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10004d56:	220b      	movs	r2, #11
10004d58:	18ba      	adds	r2, r7, r2
10004d5a:	7812      	ldrb	r2, [r2, #0]
10004d5c:	2101      	movs	r1, #1
10004d5e:	4091      	lsls	r1, r2
10004d60:	1c0a      	adds	r2, r1, #0
10004d62:	43d2      	mvns	r2, r2
10004d64:	401a      	ands	r2, r3
10004d66:	68fb      	ldr	r3, [r7, #12]
10004d68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10004d6a:	687b      	ldr	r3, [r7, #4]
10004d6c:	781b      	ldrb	r3, [r3, #0]
10004d6e:	b2db      	uxtb	r3, r3
10004d70:	b25b      	sxtb	r3, r3
10004d72:	2b00      	cmp	r3, #0
10004d74:	da07      	bge.n	10004d86 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10004d76:	687b      	ldr	r3, [r7, #4]
10004d78:	685a      	ldr	r2, [r3, #4]
10004d7a:	230b      	movs	r3, #11
10004d7c:	18fb      	adds	r3, r7, r3
10004d7e:	781b      	ldrb	r3, [r3, #0]
10004d80:	409a      	lsls	r2, r3
10004d82:	68fb      	ldr	r3, [r7, #12]
10004d84:	605a      	str	r2, [r3, #4]
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10004d86:	230b      	movs	r3, #11
10004d88:	18fb      	adds	r3, r7, r3
10004d8a:	781b      	ldrb	r3, [r3, #0]
10004d8c:	089b      	lsrs	r3, r3, #2
10004d8e:	b2db      	uxtb	r3, r3
10004d90:	1c18      	adds	r0, r3, #0
10004d92:	230b      	movs	r3, #11
10004d94:	18fb      	adds	r3, r7, r3
10004d96:	781b      	ldrb	r3, [r3, #0]
10004d98:	089b      	lsrs	r3, r3, #2
10004d9a:	b2db      	uxtb	r3, r3
10004d9c:	1c1a      	adds	r2, r3, #0
10004d9e:	68fb      	ldr	r3, [r7, #12]
10004da0:	3204      	adds	r2, #4
10004da2:	0092      	lsls	r2, r2, #2
10004da4:	58d2      	ldr	r2, [r2, r3]
10004da6:	687b      	ldr	r3, [r7, #4]
10004da8:	781b      	ldrb	r3, [r3, #0]
10004daa:	1c1c      	adds	r4, r3, #0
10004dac:	230b      	movs	r3, #11
10004dae:	18fb      	adds	r3, r7, r3
10004db0:	781b      	ldrb	r3, [r3, #0]
10004db2:	2103      	movs	r1, #3
10004db4:	400b      	ands	r3, r1
10004db6:	00db      	lsls	r3, r3, #3
10004db8:	409c      	lsls	r4, r3
10004dba:	1c23      	adds	r3, r4, #0
10004dbc:	431a      	orrs	r2, r3
10004dbe:	1c11      	adds	r1, r2, #0
10004dc0:	68fb      	ldr	r3, [r7, #12]
10004dc2:	1d02      	adds	r2, r0, #4
10004dc4:	0092      	lsls	r2, r2, #2
10004dc6:	50d1      	str	r1, [r2, r3]
}
10004dc8:	46bd      	mov	sp, r7
10004dca:	b005      	add	sp, #20
10004dcc:	bd90      	pop	{r4, r7, pc}
10004dce:	46c0      	nop			; (mov r8, r8)
10004dd0:	40040200 	.word	0x40040200

10004dd4 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10004dd4:	b580      	push	{r7, lr}
10004dd6:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10004dd8:	4b02      	ldr	r3, [pc, #8]	; (10004de4 <XMC_SCU_LockProtectedBits+0x10>)
10004dda:	22c3      	movs	r2, #195	; 0xc3
10004ddc:	625a      	str	r2, [r3, #36]	; 0x24
}
10004dde:	46bd      	mov	sp, r7
10004de0:	bd80      	pop	{r7, pc}
10004de2:	46c0      	nop			; (mov r8, r8)
10004de4:	40010000 	.word	0x40010000

10004de8 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10004de8:	b580      	push	{r7, lr}
10004dea:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10004dec:	4b05      	ldr	r3, [pc, #20]	; (10004e04 <XMC_SCU_UnlockProtectedBits+0x1c>)
10004dee:	22c0      	movs	r2, #192	; 0xc0
10004df0:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10004df2:	46c0      	nop			; (mov r8, r8)
10004df4:	4b03      	ldr	r3, [pc, #12]	; (10004e04 <XMC_SCU_UnlockProtectedBits+0x1c>)
10004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004df8:	2204      	movs	r2, #4
10004dfa:	4013      	ands	r3, r2
10004dfc:	d1fa      	bne.n	10004df4 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
10004dfe:	46bd      	mov	sp, r7
10004e00:	bd80      	pop	{r7, pc}
10004e02:	46c0      	nop			; (mov r8, r8)
10004e04:	40010000 	.word	0x40010000

10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10004e08:	b580      	push	{r7, lr}
10004e0a:	b082      	sub	sp, #8
10004e0c:	af00      	add	r7, sp, #0
10004e0e:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10004e10:	f7ff ffea 	bl	10004de8 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10004e14:	4b08      	ldr	r3, [pc, #32]	; (10004e38 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004e16:	4a08      	ldr	r2, [pc, #32]	; (10004e38 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004e18:	6911      	ldr	r1, [r2, #16]
10004e1a:	687a      	ldr	r2, [r7, #4]
10004e1c:	430a      	orrs	r2, r1
10004e1e:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10004e20:	46c0      	nop			; (mov r8, r8)
10004e22:	4b05      	ldr	r3, [pc, #20]	; (10004e38 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004e24:	681a      	ldr	r2, [r3, #0]
10004e26:	2380      	movs	r3, #128	; 0x80
10004e28:	05db      	lsls	r3, r3, #23
10004e2a:	4013      	ands	r3, r2
10004e2c:	d1f9      	bne.n	10004e22 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10004e2e:	f7ff ffd1 	bl	10004dd4 <XMC_SCU_LockProtectedBits>
}
10004e32:	46bd      	mov	sp, r7
10004e34:	b002      	add	sp, #8
10004e36:	bd80      	pop	{r7, pc}
10004e38:	40010300 	.word	0x40010300

10004e3c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10004e3c:	b580      	push	{r7, lr}
10004e3e:	b082      	sub	sp, #8
10004e40:	af00      	add	r7, sp, #0
10004e42:	6078      	str	r0, [r7, #4]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10004e44:	4b05      	ldr	r3, [pc, #20]	; (10004e5c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x20>)
10004e46:	689b      	ldr	r3, [r3, #8]
10004e48:	687a      	ldr	r2, [r7, #4]
10004e4a:	4013      	ands	r3, r2
10004e4c:	1e5a      	subs	r2, r3, #1
10004e4e:	4193      	sbcs	r3, r2
10004e50:	b2db      	uxtb	r3, r3
}
10004e52:	1c18      	adds	r0, r3, #0
10004e54:	46bd      	mov	sp, r7
10004e56:	b002      	add	sp, #8
10004e58:	bd80      	pop	{r7, pc}
10004e5a:	46c0      	nop			; (mov r8, r8)
10004e5c:	40010300 	.word	0x40010300

10004e60 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10004e60:	b580      	push	{r7, lr}
10004e62:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10004e64:	4b02      	ldr	r3, [pc, #8]	; (10004e70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10004e66:	681b      	ldr	r3, [r3, #0]
}
10004e68:	1c18      	adds	r0, r3, #0
10004e6a:	46bd      	mov	sp, r7
10004e6c:	bd80      	pop	{r7, pc}
10004e6e:	46c0      	nop			; (mov r8, r8)
10004e70:	20003ffc 	.word	0x20003ffc

10004e74 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10004e74:	b580      	push	{r7, lr}
10004e76:	b082      	sub	sp, #8
10004e78:	af00      	add	r7, sp, #0
10004e7a:	1c02      	adds	r2, r0, #0
10004e7c:	1dfb      	adds	r3, r7, #7
10004e7e:	701a      	strb	r2, [r3, #0]
10004e80:	1d3b      	adds	r3, r7, #4
10004e82:	1c0a      	adds	r2, r1, #0
10004e84:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10004e86:	1d3b      	adds	r3, r7, #4
10004e88:	1d3a      	adds	r2, r7, #4
10004e8a:	8812      	ldrh	r2, [r2, #0]
10004e8c:	2103      	movs	r1, #3
10004e8e:	400a      	ands	r2, r1
10004e90:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10004e92:	1dfb      	adds	r3, r7, #7
10004e94:	781b      	ldrb	r3, [r3, #0]
10004e96:	2b0f      	cmp	r3, #15
10004e98:	d813      	bhi.n	10004ec2 <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004e9a:	4b18      	ldr	r3, [pc, #96]	; (10004efc <XMC_SCU_SetInterruptControl+0x88>)
10004e9c:	4a17      	ldr	r2, [pc, #92]	; (10004efc <XMC_SCU_SetInterruptControl+0x88>)
10004e9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10004ea0:	1df9      	adds	r1, r7, #7
10004ea2:	7809      	ldrb	r1, [r1, #0]
10004ea4:	0049      	lsls	r1, r1, #1
10004ea6:	1c08      	adds	r0, r1, #0
10004ea8:	2103      	movs	r1, #3
10004eaa:	4081      	lsls	r1, r0
10004eac:	43c9      	mvns	r1, r1
10004eae:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10004eb0:	1d39      	adds	r1, r7, #4
10004eb2:	8809      	ldrh	r1, [r1, #0]
10004eb4:	1df8      	adds	r0, r7, #7
10004eb6:	7800      	ldrb	r0, [r0, #0]
10004eb8:	0040      	lsls	r0, r0, #1
10004eba:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004ebc:	430a      	orrs	r2, r1
10004ebe:	66da      	str	r2, [r3, #108]	; 0x6c
10004ec0:	e018      	b.n	10004ef4 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
10004ec2:	1dfb      	adds	r3, r7, #7
10004ec4:	1dfa      	adds	r2, r7, #7
10004ec6:	7812      	ldrb	r2, [r2, #0]
10004ec8:	210f      	movs	r1, #15
10004eca:	400a      	ands	r2, r1
10004ecc:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004ece:	4b0b      	ldr	r3, [pc, #44]	; (10004efc <XMC_SCU_SetInterruptControl+0x88>)
10004ed0:	4a0a      	ldr	r2, [pc, #40]	; (10004efc <XMC_SCU_SetInterruptControl+0x88>)
10004ed2:	6f12      	ldr	r2, [r2, #112]	; 0x70
10004ed4:	1df9      	adds	r1, r7, #7
10004ed6:	7809      	ldrb	r1, [r1, #0]
10004ed8:	0049      	lsls	r1, r1, #1
10004eda:	1c08      	adds	r0, r1, #0
10004edc:	2103      	movs	r1, #3
10004ede:	4081      	lsls	r1, r0
10004ee0:	43c9      	mvns	r1, r1
10004ee2:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
10004ee4:	1d39      	adds	r1, r7, #4
10004ee6:	8809      	ldrh	r1, [r1, #0]
10004ee8:	1df8      	adds	r0, r7, #7
10004eea:	7800      	ldrb	r0, [r0, #0]
10004eec:	0040      	lsls	r0, r0, #1
10004eee:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004ef0:	430a      	orrs	r2, r1
10004ef2:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
10004ef4:	46bd      	mov	sp, r7
10004ef6:	b002      	add	sp, #8
10004ef8:	bd80      	pop	{r7, pc}
10004efa:	46c0      	nop			; (mov r8, r8)
10004efc:	40010000 	.word	0x40010000

10004f00 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
10004f00:	b580      	push	{r7, lr}
10004f02:	b082      	sub	sp, #8
10004f04:	af00      	add	r7, sp, #0
10004f06:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
10004f08:	687a      	ldr	r2, [r7, #4]
10004f0a:	23e2      	movs	r3, #226	; 0xe2
10004f0c:	005b      	lsls	r3, r3, #1
10004f0e:	58d2      	ldr	r2, [r2, r3]
10004f10:	23c0      	movs	r3, #192	; 0xc0
10004f12:	009b      	lsls	r3, r3, #2
10004f14:	4013      	ands	r3, r2
10004f16:	425a      	negs	r2, r3
10004f18:	4153      	adcs	r3, r2
10004f1a:	b2db      	uxtb	r3, r3
}
10004f1c:	1c18      	adds	r0, r3, #0
10004f1e:	46bd      	mov	sp, r7
10004f20:	b002      	add	sp, #8
10004f22:	bd80      	pop	{r7, pc}

10004f24 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
10004f24:	b590      	push	{r4, r7, lr}
10004f26:	b083      	sub	sp, #12
10004f28:	af00      	add	r7, sp, #0
10004f2a:	6078      	str	r0, [r7, #4]
10004f2c:	1c0c      	adds	r4, r1, #0
10004f2e:	1c10      	adds	r0, r2, #0
10004f30:	1c19      	adds	r1, r3, #0
10004f32:	1cfb      	adds	r3, r7, #3
10004f34:	1c22      	adds	r2, r4, #0
10004f36:	701a      	strb	r2, [r3, #0]
10004f38:	1cbb      	adds	r3, r7, #2
10004f3a:	1c02      	adds	r2, r0, #0
10004f3c:	701a      	strb	r2, [r3, #0]
10004f3e:	1c7b      	adds	r3, r7, #1
10004f40:	1c0a      	adds	r2, r1, #0
10004f42:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004f44:	1cfb      	adds	r3, r7, #3
10004f46:	781a      	ldrb	r2, [r3, #0]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10004f48:	1cbb      	adds	r3, r7, #2
10004f4a:	781b      	ldrb	r3, [r3, #0]
10004f4c:	0419      	lsls	r1, r3, #16
10004f4e:	23ff      	movs	r3, #255	; 0xff
10004f50:	041b      	lsls	r3, r3, #16
10004f52:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004f54:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
10004f56:	1c7b      	adds	r3, r7, #1
10004f58:	781b      	ldrb	r3, [r3, #0]
10004f5a:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10004f5c:	431a      	orrs	r2, r3
10004f5e:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004f60:	687a      	ldr	r2, [r7, #4]
10004f62:	23e2      	movs	r3, #226	; 0xe2
10004f64:	005b      	lsls	r3, r3, #1
10004f66:	50d1      	str	r1, [r2, r3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10004f68:	46bd      	mov	sp, r7
10004f6a:	b003      	add	sp, #12
10004f6c:	bd90      	pop	{r4, r7, pc}
10004f6e:	46c0      	nop			; (mov r8, r8)

10004f70 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10004f70:	b580      	push	{r7, lr}
10004f72:	b082      	sub	sp, #8
10004f74:	af00      	add	r7, sp, #0
10004f76:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10004f78:	687b      	ldr	r3, [r7, #4]
10004f7a:	681b      	ldr	r3, [r3, #0]
10004f7c:	2240      	movs	r2, #64	; 0x40
10004f7e:	431a      	orrs	r2, r3
10004f80:	687b      	ldr	r3, [r7, #4]
10004f82:	601a      	str	r2, [r3, #0]
}
10004f84:	46bd      	mov	sp, r7
10004f86:	b002      	add	sp, #8
10004f88:	bd80      	pop	{r7, pc}
10004f8a:	46c0      	nop			; (mov r8, r8)

10004f8c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10004f8c:	b580      	push	{r7, lr}
10004f8e:	b082      	sub	sp, #8
10004f90:	af00      	add	r7, sp, #0
10004f92:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10004f94:	687b      	ldr	r3, [r7, #4]
10004f96:	681b      	ldr	r3, [r3, #0]
10004f98:	2240      	movs	r2, #64	; 0x40
10004f9a:	4393      	bics	r3, r2
10004f9c:	1c1a      	adds	r2, r3, #0
10004f9e:	687b      	ldr	r3, [r7, #4]
10004fa0:	601a      	str	r2, [r3, #0]
}
10004fa2:	46bd      	mov	sp, r7
10004fa4:	b002      	add	sp, #8
10004fa6:	bd80      	pop	{r7, pc}

10004fa8 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10004fa8:	b580      	push	{r7, lr}
10004faa:	b082      	sub	sp, #8
10004fac:	af00      	add	r7, sp, #0
10004fae:	6078      	str	r0, [r7, #4]
10004fb0:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
10004fb2:	687a      	ldr	r2, [r7, #4]
10004fb4:	683b      	ldr	r3, [r7, #0]
10004fb6:	4293      	cmp	r3, r2
10004fb8:	d200      	bcs.n	10004fbc <max+0x14>
10004fba:	1c13      	adds	r3, r2, #0
}
10004fbc:	1c18      	adds	r0, r3, #0
10004fbe:	46bd      	mov	sp, r7
10004fc0:	b002      	add	sp, #8
10004fc2:	bd80      	pop	{r7, pc}

10004fc4 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
10004fc4:	b580      	push	{r7, lr}
10004fc6:	b082      	sub	sp, #8
10004fc8:	af00      	add	r7, sp, #0
10004fca:	6078      	str	r0, [r7, #4]
10004fcc:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
10004fce:	687a      	ldr	r2, [r7, #4]
10004fd0:	683b      	ldr	r3, [r7, #0]
10004fd2:	4293      	cmp	r3, r2
10004fd4:	d900      	bls.n	10004fd8 <min+0x14>
10004fd6:	1c13      	adds	r3, r2, #0
}
10004fd8:	1c18      	adds	r0, r3, #0
10004fda:	46bd      	mov	sp, r7
10004fdc:	b002      	add	sp, #8
10004fde:	bd80      	pop	{r7, pc}

10004fe0 <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
10004fe0:	b580      	push	{r7, lr}
10004fe2:	b090      	sub	sp, #64	; 0x40
10004fe4:	af00      	add	r7, sp, #0
10004fe6:	6078      	str	r0, [r7, #4]
10004fe8:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
10004fea:	230c      	movs	r3, #12
10004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
10004fee:	230c      	movs	r3, #12
10004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
10004ff2:	2300      	movs	r3, #0
10004ff4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
10004ff6:	2301      	movs	r3, #1
10004ff8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
10004ffa:	2300      	movs	r3, #0
10004ffc:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
10004ffe:	2300      	movs	r3, #0
10005000:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
10005002:	4b6a      	ldr	r3, [pc, #424]	; (100051ac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
10005004:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
10005006:	2301      	movs	r3, #1
10005008:	63fb      	str	r3, [r7, #60]	; 0x3c
1000500a:	e06a      	b.n	100050e2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x102>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
1000500c:	683b      	ldr	r3, [r7, #0]
1000500e:	681a      	ldr	r2, [r3, #0]
10005010:	1c13      	adds	r3, r2, #0
10005012:	009b      	lsls	r3, r3, #2
10005014:	189b      	adds	r3, r3, r2
10005016:	005b      	lsls	r3, r3, #1
10005018:	1c18      	adds	r0, r3, #0
1000501a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
1000501c:	f001 fbe2 	bl	100067e4 <__aeabi_uidiv>
10005020:	1c03      	adds	r3, r0, #0
10005022:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
10005024:	683b      	ldr	r3, [r7, #0]
10005026:	685b      	ldr	r3, [r3, #4]
10005028:	6938      	ldr	r0, [r7, #16]
1000502a:	1c19      	adds	r1, r3, #0
1000502c:	f001 fbda 	bl	100067e4 <__aeabi_uidiv>
10005030:	1c03      	adds	r3, r0, #0
10005032:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
10005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005036:	1c18      	adds	r0, r3, #0
10005038:	210a      	movs	r1, #10
1000503a:	f001 fc59 	bl	100068f0 <__aeabi_uidivmod>
1000503e:	1e0b      	subs	r3, r1, #0
10005040:	2b05      	cmp	r3, #5
10005042:	d90a      	bls.n	1000505a <XMC_CAN_NODE_NominalBitTimeConfigure+0x7a>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
10005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005046:	1c18      	adds	r0, r3, #0
10005048:	210a      	movs	r1, #10
1000504a:	f001 fbcb 	bl	100067e4 <__aeabi_uidiv>
1000504e:	1c03      	adds	r3, r0, #0
10005050:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
10005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005054:	3301      	adds	r3, #1
10005056:	627b      	str	r3, [r7, #36]	; 0x24
10005058:	e006      	b.n	10005068 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
1000505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000505c:	1c18      	adds	r0, r3, #0
1000505e:	210a      	movs	r1, #10
10005060:	f001 fbc0 	bl	100067e4 <__aeabi_uidiv>
10005064:	1c03      	adds	r3, r0, #0
10005066:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
10005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000506a:	2b00      	cmp	r3, #0
1000506c:	d00b      	beq.n	10005086 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa6>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
1000506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005070:	1c13      	adds	r3, r2, #0
10005072:	009b      	lsls	r3, r3, #2
10005074:	189b      	adds	r3, r3, r2
10005076:	005b      	lsls	r3, r3, #1
10005078:	6938      	ldr	r0, [r7, #16]
1000507a:	1c19      	adds	r1, r3, #0
1000507c:	f001 fbb2 	bl	100067e4 <__aeabi_uidiv>
10005080:	1c03      	adds	r3, r0, #0
10005082:	623b      	str	r3, [r7, #32]
10005084:	e008      	b.n	10005098 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb8>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
10005086:	693b      	ldr	r3, [r7, #16]
10005088:	1c18      	adds	r0, r3, #0
1000508a:	210a      	movs	r1, #10
1000508c:	f001 fbaa 	bl	100067e4 <__aeabi_uidiv>
10005090:	1c03      	adds	r3, r0, #0
10005092:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
10005094:	2301      	movs	r3, #1
10005096:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
10005098:	683b      	ldr	r3, [r7, #0]
1000509a:	685a      	ldr	r2, [r3, #4]
1000509c:	6a3b      	ldr	r3, [r7, #32]
1000509e:	429a      	cmp	r2, r3
100050a0:	d805      	bhi.n	100050ae <XMC_CAN_NODE_NominalBitTimeConfigure+0xce>
  {
  error = temp_baudrate - can_bit_time->baudrate;
100050a2:	683b      	ldr	r3, [r7, #0]
100050a4:	685b      	ldr	r3, [r3, #4]
100050a6:	6a3a      	ldr	r2, [r7, #32]
100050a8:	1ad3      	subs	r3, r2, r3
100050aa:	61fb      	str	r3, [r7, #28]
100050ac:	e004      	b.n	100050b8 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd8>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
100050ae:	683b      	ldr	r3, [r7, #0]
100050b0:	685a      	ldr	r2, [r3, #4]
100050b2:	6a3b      	ldr	r3, [r7, #32]
100050b4:	1ad3      	subs	r3, r2, r3
100050b6:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
100050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050ba:	2b14      	cmp	r3, #20
100050bc:	d80e      	bhi.n	100050dc <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
100050be:	6aba      	ldr	r2, [r7, #40]	; 0x28
100050c0:	69fb      	ldr	r3, [r7, #28]
100050c2:	429a      	cmp	r2, r3
100050c4:	d90a      	bls.n	100050dc <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
  {
    best_brp = temp_brp;
100050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100050c8:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
100050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
100050ce:	69fb      	ldr	r3, [r7, #28]
100050d0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
100050d2:	69fb      	ldr	r3, [r7, #28]
100050d4:	4a36      	ldr	r2, [pc, #216]	; (100051b0 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1d0>)
100050d6:	4293      	cmp	r3, r2
100050d8:	d800      	bhi.n	100050dc <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
    {
      break;
100050da:	e005      	b.n	100050e8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x108>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
100050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100050de:	3301      	adds	r3, #1
100050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
100050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
100050e4:	2b40      	cmp	r3, #64	; 0x40
100050e6:	d991      	bls.n	1000500c <XMC_CAN_NODE_NominalBitTimeConfigure+0x2c>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
100050e8:	4b30      	ldr	r3, [pc, #192]	; (100051ac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
100050ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
100050ec:	2340      	movs	r3, #64	; 0x40
100050ee:	63bb      	str	r3, [r7, #56]	; 0x38
100050f0:	e02e      	b.n	10005150 <XMC_CAN_NODE_NominalBitTimeConfigure+0x170>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
100050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100050f4:	3301      	adds	r3, #1
100050f6:	4a2d      	ldr	r2, [pc, #180]	; (100051ac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
100050f8:	4353      	muls	r3, r2
100050fa:	1c18      	adds	r0, r3, #0
100050fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100050fe:	f001 fb71 	bl	100067e4 <__aeabi_uidiv>
10005102:	1c03      	adds	r3, r0, #0
10005104:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
10005106:	683b      	ldr	r3, [r7, #0]
10005108:	891b      	ldrh	r3, [r3, #8]
1000510a:	1e1a      	subs	r2, r3, #0
1000510c:	68fb      	ldr	r3, [r7, #12]
1000510e:	429a      	cmp	r2, r3
10005110:	d806      	bhi.n	10005120 <XMC_CAN_NODE_NominalBitTimeConfigure+0x140>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
10005112:	683b      	ldr	r3, [r7, #0]
10005114:	891b      	ldrh	r3, [r3, #8]
10005116:	1c1a      	adds	r2, r3, #0
10005118:	68fb      	ldr	r3, [r7, #12]
1000511a:	1a9b      	subs	r3, r3, r2
1000511c:	61bb      	str	r3, [r7, #24]
1000511e:	e005      	b.n	1000512c <XMC_CAN_NODE_NominalBitTimeConfigure+0x14c>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
10005120:	683b      	ldr	r3, [r7, #0]
10005122:	891b      	ldrh	r3, [r3, #8]
10005124:	1c1a      	adds	r2, r3, #0
10005126:	68fb      	ldr	r3, [r7, #12]
10005128:	1ad3      	subs	r3, r2, r3
1000512a:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
1000512c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000512e:	69bb      	ldr	r3, [r7, #24]
10005130:	429a      	cmp	r2, r3
10005132:	d903      	bls.n	1000513c <XMC_CAN_NODE_NominalBitTimeConfigure+0x15c>
    {
      best_tseg1 = temp_tseg1;
10005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005136:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
10005138:	69bb      	ldr	r3, [r7, #24]
1000513a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
1000513c:	683b      	ldr	r3, [r7, #0]
1000513e:	891b      	ldrh	r3, [r3, #8]
10005140:	1e1a      	subs	r2, r3, #0
10005142:	68fb      	ldr	r3, [r7, #12]
10005144:	429a      	cmp	r2, r3
10005146:	d900      	bls.n	1000514a <XMC_CAN_NODE_NominalBitTimeConfigure+0x16a>
    {
      break;
10005148:	e005      	b.n	10005156 <XMC_CAN_NODE_NominalBitTimeConfigure+0x176>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
1000514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000514c:	3b01      	subs	r3, #1
1000514e:	63bb      	str	r3, [r7, #56]	; 0x38
10005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005152:	2b02      	cmp	r3, #2
10005154:	d8cd      	bhi.n	100050f2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x112>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
10005156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000515a:	1ad3      	subs	r3, r2, r3
1000515c:	3b01      	subs	r3, #1
1000515e:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
10005160:	687b      	ldr	r3, [r7, #4]
10005162:	1c18      	adds	r0, r3, #0
10005164:	f7ff ff04 	bl	10004f70 <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10005168:	697b      	ldr	r3, [r7, #20]
1000516a:	3b01      	subs	r3, #1
1000516c:	031a      	lsls	r2, r3, #12
1000516e:	23e0      	movs	r3, #224	; 0xe0
10005170:	01db      	lsls	r3, r3, #7
10005172:	401a      	ands	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
10005174:	683b      	ldr	r3, [r7, #0]
10005176:	895b      	ldrh	r3, [r3, #10]
10005178:	3b01      	subs	r3, #1
1000517a:	019b      	lsls	r3, r3, #6
1000517c:	21ff      	movs	r1, #255	; 0xff
1000517e:	400b      	ands	r3, r1

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10005180:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
10005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005184:	3b01      	subs	r3, #1
10005186:	0219      	lsls	r1, r3, #8
10005188:	23f0      	movs	r3, #240	; 0xf0
1000518a:	011b      	lsls	r3, r3, #4
1000518c:	400b      	ands	r3, r1
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
1000518e:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
10005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005192:	3b01      	subs	r3, #1
10005194:	213f      	movs	r1, #63	; 0x3f
10005196:	400b      	ands	r3, r1
10005198:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
1000519a:	687b      	ldr	r3, [r7, #4]
1000519c:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
1000519e:	687b      	ldr	r3, [r7, #4]
100051a0:	1c18      	adds	r0, r3, #0
100051a2:	f7ff fef3 	bl	10004f8c <XMC_CAN_NODE_DisableConfigurationChange>
}
100051a6:	46bd      	mov	sp, r7
100051a8:	b010      	add	sp, #64	; 0x40
100051aa:	bd80      	pop	{r7, pc}
100051ac:	00002710 	.word	0x00002710
100051b0:	000003e7 	.word	0x000003e7

100051b4 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
100051b4:	b590      	push	{r4, r7, lr}
100051b6:	b083      	sub	sp, #12
100051b8:	af00      	add	r7, sp, #0
100051ba:	6078      	str	r0, [r7, #4]
100051bc:	1c08      	adds	r0, r1, #0
100051be:	1c11      	adds	r1, r2, #0
100051c0:	1cfb      	adds	r3, r7, #3
100051c2:	1c02      	adds	r2, r0, #0
100051c4:	701a      	strb	r2, [r3, #0]
100051c6:	1cbb      	adds	r3, r7, #2
100051c8:	1c0a      	adds	r2, r1, #0
100051ca:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
100051cc:	46c0      	nop			; (mov r8, r8)
100051ce:	687b      	ldr	r3, [r7, #4]
100051d0:	1c18      	adds	r0, r3, #0
100051d2:	f7ff fe95 	bl	10004f00 <XMC_CAN_IsPanelControlReady>
100051d6:	1c03      	adds	r3, r0, #0
100051d8:	1c1a      	adds	r2, r3, #0
100051da:	2301      	movs	r3, #1
100051dc:	4053      	eors	r3, r2
100051de:	b2db      	uxtb	r3, r3
100051e0:	2b00      	cmp	r3, #0
100051e2:	d1f4      	bne.n	100051ce <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
100051e4:	1cfb      	adds	r3, r7, #3
100051e6:	781b      	ldrb	r3, [r3, #0]
100051e8:	3301      	adds	r3, #1
100051ea:	b2dc      	uxtb	r4, r3
100051ec:	687a      	ldr	r2, [r7, #4]
100051ee:	1cbb      	adds	r3, r7, #2
100051f0:	781b      	ldrb	r3, [r3, #0]
100051f2:	1c10      	adds	r0, r2, #0
100051f4:	2102      	movs	r1, #2
100051f6:	1c1a      	adds	r2, r3, #0
100051f8:	1c23      	adds	r3, r4, #0
100051fa:	f7ff fe93 	bl	10004f24 <XMC_CAN_PanelControl>
}
100051fe:	46bd      	mov	sp, r7
10005200:	b003      	add	sp, #12
10005202:	bd90      	pop	{r4, r7, pc}

10005204 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
10005204:	b580      	push	{r7, lr}
10005206:	b082      	sub	sp, #8
10005208:	af00      	add	r7, sp, #0
1000520a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
1000520c:	2380      	movs	r3, #128	; 0x80
1000520e:	039b      	lsls	r3, r3, #14
10005210:	1c18      	adds	r0, r3, #0
10005212:	f7ff fdf9 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
10005216:	687b      	ldr	r3, [r7, #4]
10005218:	681b      	ldr	r3, [r3, #0]
1000521a:	2201      	movs	r2, #1
1000521c:	4393      	bics	r3, r2
1000521e:	1c1a      	adds	r2, r3, #0
10005220:	687b      	ldr	r3, [r7, #4]
10005222:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
10005224:	46c0      	nop			; (mov r8, r8)
10005226:	687b      	ldr	r3, [r7, #4]
10005228:	681b      	ldr	r3, [r3, #0]
1000522a:	2202      	movs	r2, #2
1000522c:	4013      	ands	r3, r2
1000522e:	d1fa      	bne.n	10005226 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
10005230:	46bd      	mov	sp, r7
10005232:	b002      	add	sp, #8
10005234:	bd80      	pop	{r7, pc}
10005236:	46c0      	nop			; (mov r8, r8)

10005238 <XMC_CAN_Init>:

#if defined(MULTICAN_PLUS)
void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
10005238:	b580      	push	{r7, lr}
1000523a:	b08e      	sub	sp, #56	; 0x38
1000523c:	af00      	add	r7, sp, #0
1000523e:	60f8      	str	r0, [r7, #12]
10005240:	607a      	str	r2, [r7, #4]
10005242:	230b      	movs	r3, #11
10005244:	18fb      	adds	r3, r7, r3
10005246:	1c0a      	adds	r2, r1, #0
10005248:	701a      	strb	r2, [r3, #0]
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency;
  /*Enabling the module*/
  XMC_CAN_Enable(obj);
1000524a:	68fb      	ldr	r3, [r7, #12]
1000524c:	1c18      	adds	r0, r3, #0
1000524e:	f7ff ffd9 	bl	10005204 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
10005252:	68fa      	ldr	r2, [r7, #12]
10005254:	230b      	movs	r3, #11
10005256:	18fb      	adds	r3, r7, r3
10005258:	781b      	ldrb	r3, [r3, #0]
1000525a:	1c10      	adds	r0, r2, #0
1000525c:	1c19      	adds	r1, r3, #0
1000525e:	f000 f87b 	bl	10005358 <XMC_CAN_SetBaudrateClockSource>

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
10005262:	68fb      	ldr	r3, [r7, #12]
10005264:	1c18      	adds	r0, r3, #0
10005266:	f000 f8a1 	bl	100053ac <XMC_CAN_GetBaudrateClockFrequency>
1000526a:	1c03      	adds	r3, r0, #0
1000526c:	637b      	str	r3, [r7, #52]	; 0x34

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
1000526e:	6b78      	ldr	r0, [r7, #52]	; 0x34
10005270:	6879      	ldr	r1, [r7, #4]
10005272:	f001 fab7 	bl	100067e4 <__aeabi_uidiv>
10005276:	1c03      	adds	r3, r0, #0
10005278:	1c1a      	adds	r2, r3, #0
1000527a:	2380      	movs	r3, #128	; 0x80
1000527c:	00db      	lsls	r3, r3, #3
1000527e:	1a9b      	subs	r3, r3, r2
10005280:	2000      	movs	r0, #0
10005282:	1c19      	adds	r1, r3, #0
10005284:	f7ff fe90 	bl	10004fa8 <max>
10005288:	1c02      	adds	r2, r0, #0
1000528a:	4b31      	ldr	r3, [pc, #196]	; (10005350 <XMC_CAN_Init+0x118>)
1000528c:	1c10      	adds	r0, r2, #0
1000528e:	1c19      	adds	r1, r3, #0
10005290:	f7ff fe98 	bl	10004fc4 <min>
10005294:	1c03      	adds	r3, r0, #0
10005296:	633b      	str	r3, [r7, #48]	; 0x30
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
10005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000529a:	2280      	movs	r2, #128	; 0x80
1000529c:	00d2      	lsls	r2, r2, #3
1000529e:	1ad3      	subs	r3, r2, r3
100052a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
100052a2:	1c19      	adds	r1, r3, #0
100052a4:	f001 fa9e 	bl	100067e4 <__aeabi_uidiv>
100052a8:	1c03      	adds	r3, r0, #0
100052aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
100052ac:	687b      	ldr	r3, [r7, #4]
100052ae:	099b      	lsrs	r3, r3, #6
100052b0:	62bb      	str	r3, [r7, #40]	; 0x28
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
100052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100052b4:	099b      	lsrs	r3, r3, #6
100052b6:	627b      	str	r3, [r7, #36]	; 0x24

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
100052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
100052ba:	029b      	lsls	r3, r3, #10
100052bc:	1c18      	adds	r0, r3, #0
100052be:	6a79      	ldr	r1, [r7, #36]	; 0x24
100052c0:	f001 fa90 	bl	100067e4 <__aeabi_uidiv>
100052c4:	1c03      	adds	r3, r0, #0
100052c6:	1c1a      	adds	r2, r3, #0
100052c8:	4b21      	ldr	r3, [pc, #132]	; (10005350 <XMC_CAN_Init+0x118>)
100052ca:	1c10      	adds	r0, r2, #0
100052cc:	1c19      	adds	r1, r3, #0
100052ce:	f7ff fe79 	bl	10004fc4 <min>
100052d2:	1c03      	adds	r3, r0, #0
100052d4:	623b      	str	r3, [r7, #32]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
100052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100052d8:	6a3a      	ldr	r2, [r7, #32]
100052da:	4353      	muls	r3, r2
100052dc:	0a9b      	lsrs	r3, r3, #10
100052de:	61fb      	str	r3, [r7, #28]
  freq_f = freq_f << 6;
100052e0:	69fb      	ldr	r3, [r7, #28]
100052e2:	019b      	lsls	r3, r3, #6
100052e4:	61fb      	str	r3, [r7, #28]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
100052e6:	687a      	ldr	r2, [r7, #4]
100052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100052ea:	1ad1      	subs	r1, r2, r3
100052ec:	687a      	ldr	r2, [r7, #4]
100052ee:	69fb      	ldr	r3, [r7, #28]
100052f0:	1ad0      	subs	r0, r2, r3
100052f2:	231b      	movs	r3, #27
100052f4:	18fa      	adds	r2, r7, r3
100052f6:	2300      	movs	r3, #0
100052f8:	4288      	cmp	r0, r1
100052fa:	415b      	adcs	r3, r3
100052fc:	7013      	strb	r3, [r2, #0]

  step   = (normal_divider != 0U) ? step_n : step_f;
100052fe:	231b      	movs	r3, #27
10005300:	18fb      	adds	r3, r7, r3
10005302:	781b      	ldrb	r3, [r3, #0]
10005304:	2b00      	cmp	r3, #0
10005306:	d001      	beq.n	1000530c <XMC_CAN_Init+0xd4>
10005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000530a:	e000      	b.n	1000530e <XMC_CAN_Init+0xd6>
1000530c:	6a3b      	ldr	r3, [r7, #32]
1000530e:	617b      	str	r3, [r7, #20]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
10005310:	231b      	movs	r3, #27
10005312:	18fb      	adds	r3, r7, r3
10005314:	781b      	ldrb	r3, [r3, #0]
10005316:	2b00      	cmp	r3, #0
10005318:	d001      	beq.n	1000531e <XMC_CAN_Init+0xe6>
1000531a:	2201      	movs	r2, #1
1000531c:	e000      	b.n	10005320 <XMC_CAN_Init+0xe8>
1000531e:	2202      	movs	r2, #2
10005320:	2313      	movs	r3, #19
10005322:	18fb      	adds	r3, r7, r3
10005324:	701a      	strb	r2, [r3, #0]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
10005326:	68fb      	ldr	r3, [r7, #12]
10005328:	68db      	ldr	r3, [r3, #12]
1000532a:	4a0a      	ldr	r2, [pc, #40]	; (10005354 <XMC_CAN_Init+0x11c>)
1000532c:	401a      	ands	r2, r3
1000532e:	68fb      	ldr	r3, [r7, #12]
10005330:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
10005332:	68fb      	ldr	r3, [r7, #12]
10005334:	68da      	ldr	r2, [r3, #12]
10005336:	2313      	movs	r3, #19
10005338:	18fb      	adds	r3, r7, r3
1000533a:	781b      	ldrb	r3, [r3, #0]
1000533c:	0399      	lsls	r1, r3, #14
1000533e:	697b      	ldr	r3, [r7, #20]
10005340:	430b      	orrs	r3, r1
10005342:	431a      	orrs	r2, r3
10005344:	68fb      	ldr	r3, [r7, #12]
10005346:	60da      	str	r2, [r3, #12]

}
10005348:	46bd      	mov	sp, r7
1000534a:	b00e      	add	sp, #56	; 0x38
1000534c:	bd80      	pop	{r7, pc}
1000534e:	46c0      	nop			; (mov r8, r8)
10005350:	000003ff 	.word	0x000003ff
10005354:	ffff3c00 	.word	0xffff3c00

10005358 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
10005358:	b580      	push	{r7, lr}
1000535a:	b082      	sub	sp, #8
1000535c:	af00      	add	r7, sp, #0
1000535e:	6078      	str	r0, [r7, #4]
10005360:	1c0a      	adds	r2, r1, #0
10005362:	1cfb      	adds	r3, r7, #3
10005364:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
10005366:	687a      	ldr	r2, [r7, #4]
10005368:	23e4      	movs	r3, #228	; 0xe4
1000536a:	005b      	lsls	r3, r3, #1
1000536c:	58d3      	ldr	r3, [r2, r3]
1000536e:	220f      	movs	r2, #15
10005370:	4393      	bics	r3, r2
10005372:	1c1a      	adds	r2, r3, #0
10005374:	1cfb      	adds	r3, r7, #3
10005376:	781b      	ldrb	r3, [r3, #0]
10005378:	431a      	orrs	r2, r3
1000537a:	1c11      	adds	r1, r2, #0
1000537c:	687a      	ldr	r2, [r7, #4]
1000537e:	23e4      	movs	r3, #228	; 0xe4
10005380:	005b      	lsls	r3, r3, #1
10005382:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
10005384:	46bd      	mov	sp, r7
10005386:	b002      	add	sp, #8
10005388:	bd80      	pop	{r7, pc}
1000538a:	46c0      	nop			; (mov r8, r8)

1000538c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
1000538c:	b580      	push	{r7, lr}
1000538e:	b082      	sub	sp, #8
10005390:	af00      	add	r7, sp, #0
10005392:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
10005394:	687a      	ldr	r2, [r7, #4]
10005396:	23e4      	movs	r3, #228	; 0xe4
10005398:	005b      	lsls	r3, r3, #1
1000539a:	58d3      	ldr	r3, [r2, r3]
1000539c:	b2db      	uxtb	r3, r3
1000539e:	220f      	movs	r2, #15
100053a0:	4013      	ands	r3, r2
100053a2:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4) 
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}
100053a4:	1c18      	adds	r0, r3, #0
100053a6:	46bd      	mov	sp, r7
100053a8:	b002      	add	sp, #8
100053aa:	bd80      	pop	{r7, pc}

100053ac <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
100053ac:	b580      	push	{r7, lr}
100053ae:	b084      	sub	sp, #16
100053b0:	af00      	add	r7, sp, #0
100053b2:	6078      	str	r0, [r7, #4]
  uint32_t frequency;

#if defined(MULTICAN_PLUS)
  switch(XMC_CAN_GetBaudrateClockSource(obj))
100053b4:	687b      	ldr	r3, [r7, #4]
100053b6:	1c18      	adds	r0, r3, #0
100053b8:	f7ff ffe8 	bl	1000538c <XMC_CAN_GetBaudrateClockSource>
100053bc:	1e03      	subs	r3, r0, #0
100053be:	2b01      	cmp	r3, #1
100053c0:	d002      	beq.n	100053c8 <XMC_CAN_GetBaudrateClockFrequency+0x1c>
100053c2:	2b02      	cmp	r3, #2
100053c4:	d005      	beq.n	100053d2 <XMC_CAN_GetBaudrateClockFrequency+0x26>
100053c6:	e009      	b.n	100053dc <XMC_CAN_GetBaudrateClockFrequency+0x30>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
100053c8:	f7ff fd4a 	bl	10004e60 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
100053cc:	1c03      	adds	r3, r0, #0
100053ce:	60fb      	str	r3, [r7, #12]
      break;
100053d0:	e007      	b.n	100053e2 <XMC_CAN_GetBaudrateClockFrequency+0x36>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
100053d2:	f7ff fc39 	bl	10004c48 <OSCHP_GetFrequency>
100053d6:	1c03      	adds	r3, r0, #0
100053d8:	60fb      	str	r3, [r7, #12]
      break;
100053da:	e002      	b.n	100053e2 <XMC_CAN_GetBaudrateClockFrequency+0x36>

    default:
      frequency = 0;
100053dc:	2300      	movs	r3, #0
100053de:	60fb      	str	r3, [r7, #12]
      break;
100053e0:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif  

  return frequency;
100053e2:	68fb      	ldr	r3, [r7, #12]
}
100053e4:	1c18      	adds	r0, r3, #0
100053e6:	46bd      	mov	sp, r7
100053e8:	b004      	add	sp, #16
100053ea:	bd80      	pop	{r7, pc}

100053ec <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
100053ec:	b580      	push	{r7, lr}
100053ee:	b086      	sub	sp, #24
100053f0:	af00      	add	r7, sp, #0
100053f2:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
100053f4:	687b      	ldr	r3, [r7, #4]
100053f6:	681b      	ldr	r3, [r3, #0]
100053f8:	4a48      	ldr	r2, [pc, #288]	; (1000551c <XMC_CAN_MO_Config+0x130>)
100053fa:	4694      	mov	ip, r2
100053fc:	4463      	add	r3, ip
100053fe:	095b      	lsrs	r3, r3, #5
10005400:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
10005402:	697b      	ldr	r3, [r7, #20]
10005404:	095b      	lsrs	r3, r3, #5
10005406:	035a      	lsls	r2, r3, #13
10005408:	697b      	ldr	r3, [r7, #20]
1000540a:	211f      	movs	r1, #31
1000540c:	400b      	ands	r3, r1
1000540e:	021b      	lsls	r3, r3, #8
10005410:	4313      	orrs	r3, r2
10005412:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
10005414:	687b      	ldr	r3, [r7, #4]
10005416:	681b      	ldr	r3, [r3, #0]
10005418:	687a      	ldr	r2, [r7, #4]
1000541a:	6812      	ldr	r2, [r2, #0]
1000541c:	6892      	ldr	r2, [r2, #8]
1000541e:	4940      	ldr	r1, [pc, #256]	; (10005520 <XMC_CAN_MO_Config+0x134>)
10005420:	400a      	ands	r2, r1
10005422:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
10005424:	687b      	ldr	r3, [r7, #4]
10005426:	681b      	ldr	r3, [r3, #0]
10005428:	687a      	ldr	r2, [r7, #4]
1000542a:	6812      	ldr	r2, [r2, #0]
1000542c:	6891      	ldr	r1, [r2, #8]
1000542e:	693a      	ldr	r2, [r7, #16]
10005430:	430a      	orrs	r2, r1
10005432:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
10005434:	687b      	ldr	r3, [r7, #4]
10005436:	79db      	ldrb	r3, [r3, #7]
10005438:	2220      	movs	r2, #32
1000543a:	4013      	ands	r3, r2
1000543c:	b2db      	uxtb	r3, r3
1000543e:	2b00      	cmp	r3, #0
10005440:	d007      	beq.n	10005452 <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10005442:	687b      	ldr	r3, [r7, #4]
10005444:	79db      	ldrb	r3, [r3, #7]
10005446:	2220      	movs	r2, #32
10005448:	4013      	ands	r3, r2
1000544a:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
1000544c:	2b00      	cmp	r3, #0
1000544e:	d100      	bne.n	10005452 <XMC_CAN_MO_Config+0x66>
10005450:	e061      	b.n	10005516 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
10005452:	687b      	ldr	r3, [r7, #4]
10005454:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
10005456:	2b00      	cmp	r3, #0
10005458:	d004      	beq.n	10005464 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
1000545a:	687b      	ldr	r3, [r7, #4]
1000545c:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
1000545e:	2b01      	cmp	r3, #1
10005460:	d000      	beq.n	10005464 <XMC_CAN_MO_Config+0x78>
10005462:	e058      	b.n	10005516 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10005464:	687b      	ldr	r3, [r7, #4]
10005466:	681b      	ldr	r3, [r3, #0]
10005468:	2220      	movs	r2, #32
1000546a:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
1000546c:	687b      	ldr	r3, [r7, #4]
1000546e:	79db      	ldrb	r3, [r3, #7]
10005470:	2220      	movs	r2, #32
10005472:	4013      	ands	r3, r2
10005474:	b2db      	uxtb	r3, r3
10005476:	2b00      	cmp	r3, #0
10005478:	d128      	bne.n	100054cc <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
1000547a:	687b      	ldr	r3, [r7, #4]
1000547c:	685b      	ldr	r3, [r3, #4]
1000547e:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
10005480:	68fb      	ldr	r3, [r7, #12]
10005482:	0f5b      	lsrs	r3, r3, #29
10005484:	075b      	lsls	r3, r3, #29
10005486:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10005488:	687b      	ldr	r3, [r7, #4]
1000548a:	685b      	ldr	r3, [r3, #4]
1000548c:	00db      	lsls	r3, r3, #3
1000548e:	08db      	lsrs	r3, r3, #3
10005490:	049b      	lsls	r3, r3, #18
10005492:	1c1a      	adds	r2, r3, #0
10005494:	68fb      	ldr	r3, [r7, #12]
10005496:	4313      	orrs	r3, r2
10005498:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
1000549a:	687b      	ldr	r3, [r7, #4]
1000549c:	681b      	ldr	r3, [r3, #0]
1000549e:	68fa      	ldr	r2, [r7, #12]
100054a0:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
100054a2:	687b      	ldr	r3, [r7, #4]
100054a4:	689b      	ldr	r3, [r3, #8]
100054a6:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
100054a8:	68fb      	ldr	r3, [r7, #12]
100054aa:	0f5b      	lsrs	r3, r3, #29
100054ac:	075b      	lsls	r3, r3, #29
100054ae:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
100054b0:	687b      	ldr	r3, [r7, #4]
100054b2:	689b      	ldr	r3, [r3, #8]
100054b4:	00db      	lsls	r3, r3, #3
100054b6:	08db      	lsrs	r3, r3, #3
100054b8:	049b      	lsls	r3, r3, #18
100054ba:	1c1a      	adds	r2, r3, #0
100054bc:	68fb      	ldr	r3, [r7, #12]
100054be:	4313      	orrs	r3, r2
100054c0:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
100054c2:	687b      	ldr	r3, [r7, #4]
100054c4:	681b      	ldr	r3, [r3, #0]
100054c6:	68fa      	ldr	r2, [r7, #12]
100054c8:	60da      	str	r2, [r3, #12]
100054ca:	e009      	b.n	100054e0 <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
100054cc:	687b      	ldr	r3, [r7, #4]
100054ce:	681b      	ldr	r3, [r3, #0]
100054d0:	687a      	ldr	r2, [r7, #4]
100054d2:	6852      	ldr	r2, [r2, #4]
100054d4:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
100054d6:	687b      	ldr	r3, [r7, #4]
100054d8:	681b      	ldr	r3, [r3, #0]
100054da:	687a      	ldr	r2, [r7, #4]
100054dc:	6892      	ldr	r2, [r2, #8]
100054de:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
100054e0:	687b      	ldr	r3, [r7, #4]
100054e2:	7e1b      	ldrb	r3, [r3, #24]
100054e4:	2b01      	cmp	r3, #1
100054e6:	d10d      	bne.n	10005504 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
100054e8:	687b      	ldr	r3, [r7, #4]
100054ea:	1c18      	adds	r0, r3, #0
100054ec:	f000 f81e 	bl	1000552c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
100054f0:	687b      	ldr	r3, [r7, #4]
100054f2:	681b      	ldr	r3, [r3, #0]
100054f4:	2280      	movs	r2, #128	; 0x80
100054f6:	0512      	lsls	r2, r2, #20
100054f8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
100054fa:	687b      	ldr	r3, [r7, #4]
100054fc:	681b      	ldr	r3, [r3, #0]
100054fe:	4a09      	ldr	r2, [pc, #36]	; (10005524 <XMC_CAN_MO_Config+0x138>)
10005500:	61da      	str	r2, [r3, #28]
10005502:	e008      	b.n	10005516 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
10005504:	687b      	ldr	r3, [r7, #4]
10005506:	681b      	ldr	r3, [r3, #0]
10005508:	2280      	movs	r2, #128	; 0x80
1000550a:	0112      	lsls	r2, r2, #4
1000550c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
1000550e:	687b      	ldr	r3, [r7, #4]
10005510:	681b      	ldr	r3, [r3, #0]
10005512:	4a05      	ldr	r2, [pc, #20]	; (10005528 <XMC_CAN_MO_Config+0x13c>)
10005514:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
10005516:	46bd      	mov	sp, r7
10005518:	b006      	add	sp, #24
1000551a:	bd80      	pop	{r7, pc}
1000551c:	affbf000 	.word	0xaffbf000
10005520:	ffff00ff 	.word	0xffff00ff
10005524:	062000c0 	.word	0x062000c0
10005528:	00a00640 	.word	0x00a00640

1000552c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
1000552c:	b580      	push	{r7, lr}
1000552e:	b084      	sub	sp, #16
10005530:	af00      	add	r7, sp, #0
10005532:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10005534:	230f      	movs	r3, #15
10005536:	18fb      	adds	r3, r7, r3
10005538:	2203      	movs	r2, #3
1000553a:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
1000553c:	687b      	ldr	r3, [r7, #4]
1000553e:	7e1b      	ldrb	r3, [r3, #24]
10005540:	2b01      	cmp	r3, #1
10005542:	d125      	bne.n	10005590 <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10005544:	687b      	ldr	r3, [r7, #4]
10005546:	681b      	ldr	r3, [r3, #0]
10005548:	2220      	movs	r2, #32
1000554a:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
1000554c:	687b      	ldr	r3, [r7, #4]
1000554e:	681b      	ldr	r3, [r3, #0]
10005550:	687a      	ldr	r2, [r7, #4]
10005552:	6812      	ldr	r2, [r2, #0]
10005554:	6812      	ldr	r2, [r2, #0]
10005556:	4914      	ldr	r1, [pc, #80]	; (100055a8 <XMC_CAN_MO_UpdateData+0x7c>)
10005558:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
1000555a:	687a      	ldr	r2, [r7, #4]
1000555c:	7b12      	ldrb	r2, [r2, #12]
1000555e:	0610      	lsls	r0, r2, #24
10005560:	22f0      	movs	r2, #240	; 0xf0
10005562:	0512      	lsls	r2, r2, #20
10005564:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10005566:	430a      	orrs	r2, r1
10005568:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
1000556a:	687b      	ldr	r3, [r7, #4]
1000556c:	681b      	ldr	r3, [r3, #0]
1000556e:	687a      	ldr	r2, [r7, #4]
10005570:	6912      	ldr	r2, [r2, #16]
10005572:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10005574:	687b      	ldr	r3, [r7, #4]
10005576:	681b      	ldr	r3, [r3, #0]
10005578:	687a      	ldr	r2, [r7, #4]
1000557a:	6952      	ldr	r2, [r2, #20]
1000557c:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
1000557e:	687b      	ldr	r3, [r7, #4]
10005580:	681b      	ldr	r3, [r3, #0]
10005582:	4a0a      	ldr	r2, [pc, #40]	; (100055ac <XMC_CAN_MO_UpdateData+0x80>)
10005584:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10005586:	230f      	movs	r3, #15
10005588:	18fb      	adds	r3, r7, r3
1000558a:	2200      	movs	r2, #0
1000558c:	701a      	strb	r2, [r3, #0]
1000558e:	e003      	b.n	10005598 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10005590:	230f      	movs	r3, #15
10005592:	18fb      	adds	r3, r7, r3
10005594:	2203      	movs	r2, #3
10005596:	701a      	strb	r2, [r3, #0]
  }
  return error;
10005598:	230f      	movs	r3, #15
1000559a:	18fb      	adds	r3, r7, r3
1000559c:	781b      	ldrb	r3, [r3, #0]
}
1000559e:	1c18      	adds	r0, r3, #0
100055a0:	46bd      	mov	sp, r7
100055a2:	b004      	add	sp, #16
100055a4:	bd80      	pop	{r7, pc}
100055a6:	46c0      	nop			; (mov r8, r8)
100055a8:	f0ffffff 	.word	0xf0ffffff
100055ac:	00280040 	.word	0x00280040

100055b0 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
100055b0:	b580      	push	{r7, lr}
100055b2:	b086      	sub	sp, #24
100055b4:	af00      	add	r7, sp, #0
100055b6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
100055b8:	2317      	movs	r3, #23
100055ba:	18fb      	adds	r3, r7, r3
100055bc:	2201      	movs	r2, #1
100055be:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
100055c0:	687b      	ldr	r3, [r7, #4]
100055c2:	681b      	ldr	r3, [r3, #0]
100055c4:	69db      	ldr	r3, [r3, #28]
100055c6:	2220      	movs	r2, #32
100055c8:	4013      	ands	r3, r2
100055ca:	095b      	lsrs	r3, r3, #5
100055cc:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
100055ce:	687b      	ldr	r3, [r7, #4]
100055d0:	681b      	ldr	r3, [r3, #0]
100055d2:	69da      	ldr	r2, [r3, #28]
100055d4:	2380      	movs	r3, #128	; 0x80
100055d6:	005b      	lsls	r3, r3, #1
100055d8:	4013      	ands	r3, r2
100055da:	0a1b      	lsrs	r3, r3, #8
100055dc:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
100055de:	693b      	ldr	r3, [r7, #16]
100055e0:	2b00      	cmp	r3, #0
100055e2:	d104      	bne.n	100055ee <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
100055e4:	2317      	movs	r3, #23
100055e6:	18fb      	adds	r3, r7, r3
100055e8:	2204      	movs	r2, #4
100055ea:	701a      	strb	r2, [r3, #0]
100055ec:	e010      	b.n	10005610 <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
100055ee:	68fb      	ldr	r3, [r7, #12]
100055f0:	2b01      	cmp	r3, #1
100055f2:	d104      	bne.n	100055fe <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
100055f4:	2317      	movs	r3, #23
100055f6:	18fb      	adds	r3, r7, r3
100055f8:	2202      	movs	r2, #2
100055fa:	701a      	strb	r2, [r3, #0]
100055fc:	e008      	b.n	10005610 <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
100055fe:	687b      	ldr	r3, [r7, #4]
10005600:	681b      	ldr	r3, [r3, #0]
10005602:	22e0      	movs	r2, #224	; 0xe0
10005604:	04d2      	lsls	r2, r2, #19
10005606:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10005608:	2317      	movs	r3, #23
1000560a:	18fb      	adds	r3, r7, r3
1000560c:	2200      	movs	r2, #0
1000560e:	701a      	strb	r2, [r3, #0]
  }
  return error;
10005610:	2317      	movs	r3, #23
10005612:	18fb      	adds	r3, r7, r3
10005614:	781b      	ldrb	r3, [r3, #0]
}
10005616:	1c18      	adds	r0, r3, #0
10005618:	46bd      	mov	sp, r7
1000561a:	b006      	add	sp, #24
1000561c:	bd80      	pop	{r7, pc}
1000561e:	46c0      	nop			; (mov r8, r8)

10005620 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
10005620:	b580      	push	{r7, lr}
10005622:	b086      	sub	sp, #24
10005624:	af00      	add	r7, sp, #0
10005626:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10005628:	2317      	movs	r3, #23
1000562a:	18fb      	adds	r3, r7, r3
1000562c:	2201      	movs	r2, #1
1000562e:	701a      	strb	r2, [r3, #0]
  uint8_t rx_pnd = 0U;
10005630:	2316      	movs	r3, #22
10005632:	18fb      	adds	r3, r7, r3
10005634:	2200      	movs	r2, #0
10005636:	701a      	strb	r2, [r3, #0]
  uint8_t new_data = 0U;
10005638:	2315      	movs	r3, #21
1000563a:	18fb      	adds	r3, r7, r3
1000563c:	2200      	movs	r2, #0
1000563e:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
10005640:	687b      	ldr	r3, [r7, #4]
10005642:	681b      	ldr	r3, [r3, #0]
10005644:	69da      	ldr	r2, [r3, #28]
10005646:	2380      	movs	r3, #128	; 0x80
10005648:	011b      	lsls	r3, r3, #4
1000564a:	4013      	ands	r3, r2
1000564c:	0adb      	lsrs	r3, r3, #11
1000564e:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
10005650:	687b      	ldr	r3, [r7, #4]
10005652:	681b      	ldr	r3, [r3, #0]
10005654:	69db      	ldr	r3, [r3, #28]
10005656:	2204      	movs	r2, #4
10005658:	4013      	ands	r3, r2
1000565a:	089b      	lsrs	r3, r3, #2
1000565c:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
1000565e:	693b      	ldr	r3, [r7, #16]
10005660:	2b00      	cmp	r3, #0
10005662:	d004      	beq.n	1000566e <XMC_CAN_MO_Receive+0x4e>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10005664:	2317      	movs	r3, #23
10005666:	18fb      	adds	r3, r7, r3
10005668:	2203      	movs	r2, #3
1000566a:	701a      	strb	r2, [r3, #0]
1000566c:	e0d3      	b.n	10005816 <XMC_CAN_MO_Receive+0x1f6>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
1000566e:	68fb      	ldr	r3, [r7, #12]
10005670:	2b01      	cmp	r3, #1
10005672:	d104      	bne.n	1000567e <XMC_CAN_MO_Receive+0x5e>
  {
    error = XMC_CAN_STATUS_BUSY;
10005674:	2317      	movs	r3, #23
10005676:	18fb      	adds	r3, r7, r3
10005678:	2202      	movs	r2, #2
1000567a:	701a      	strb	r2, [r3, #0]
1000567c:	e0cb      	b.n	10005816 <XMC_CAN_MO_Receive+0x1f6>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
1000567e:	687b      	ldr	r3, [r7, #4]
10005680:	681b      	ldr	r3, [r3, #0]
10005682:	2208      	movs	r2, #8
10005684:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
10005686:	687b      	ldr	r3, [r7, #4]
10005688:	681b      	ldr	r3, [r3, #0]
1000568a:	699a      	ldr	r2, [r3, #24]
1000568c:	2380      	movs	r3, #128	; 0x80
1000568e:	059b      	lsls	r3, r3, #22
10005690:	4013      	ands	r3, r2
10005692:	0f5b      	lsrs	r3, r3, #29
10005694:	d151      	bne.n	1000573a <XMC_CAN_MO_Receive+0x11a>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
10005696:	687b      	ldr	r3, [r7, #4]
10005698:	79da      	ldrb	r2, [r3, #7]
1000569a:	2120      	movs	r1, #32
1000569c:	438a      	bics	r2, r1
1000569e:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
100056a0:	687b      	ldr	r3, [r7, #4]
100056a2:	681b      	ldr	r3, [r3, #0]
100056a4:	699b      	ldr	r3, [r3, #24]
100056a6:	4a5f      	ldr	r2, [pc, #380]	; (10005824 <XMC_CAN_MO_Receive+0x204>)
100056a8:	4013      	ands	r3, r2
100056aa:	0c9b      	lsrs	r3, r3, #18
100056ac:	00db      	lsls	r3, r3, #3
100056ae:	08da      	lsrs	r2, r3, #3
100056b0:	687b      	ldr	r3, [r7, #4]
100056b2:	00d2      	lsls	r2, r2, #3
100056b4:	08d2      	lsrs	r2, r2, #3
100056b6:	6859      	ldr	r1, [r3, #4]
100056b8:	0f49      	lsrs	r1, r1, #29
100056ba:	0749      	lsls	r1, r1, #29
100056bc:	430a      	orrs	r2, r1
100056be:	605a      	str	r2, [r3, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
100056c0:	687b      	ldr	r3, [r7, #4]
100056c2:	681b      	ldr	r3, [r3, #0]
100056c4:	68da      	ldr	r2, [r3, #12]
100056c6:	2380      	movs	r3, #128	; 0x80
100056c8:	059b      	lsls	r3, r3, #22
100056ca:	4013      	ands	r3, r2
100056cc:	0f5b      	lsrs	r3, r3, #29
100056ce:	b2db      	uxtb	r3, r3
100056d0:	1c1a      	adds	r2, r3, #0
100056d2:	2301      	movs	r3, #1
100056d4:	4013      	ands	r3, r2
100056d6:	b2da      	uxtb	r2, r3
100056d8:	687b      	ldr	r3, [r7, #4]
100056da:	2101      	movs	r1, #1
100056dc:	400a      	ands	r2, r1
100056de:	0150      	lsls	r0, r2, #5
100056e0:	7ada      	ldrb	r2, [r3, #11]
100056e2:	2120      	movs	r1, #32
100056e4:	438a      	bics	r2, r1
100056e6:	1c11      	adds	r1, r2, #0
100056e8:	1c02      	adds	r2, r0, #0
100056ea:	430a      	orrs	r2, r1
100056ec:	72da      	strb	r2, [r3, #11]
        if(can_mo->can_ide_mask == 1U)
100056ee:	687b      	ldr	r3, [r7, #4]
100056f0:	7adb      	ldrb	r3, [r3, #11]
100056f2:	2220      	movs	r2, #32
100056f4:	4013      	ands	r3, r2
100056f6:	b2db      	uxtb	r3, r3
100056f8:	2b00      	cmp	r3, #0
100056fa:	d010      	beq.n	1000571e <XMC_CAN_MO_Receive+0xfe>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
100056fc:	687b      	ldr	r3, [r7, #4]
100056fe:	681b      	ldr	r3, [r3, #0]
10005700:	68db      	ldr	r3, [r3, #12]
10005702:	4a48      	ldr	r2, [pc, #288]	; (10005824 <XMC_CAN_MO_Receive+0x204>)
10005704:	4013      	ands	r3, r2
10005706:	0c9b      	lsrs	r3, r3, #18
10005708:	00db      	lsls	r3, r3, #3
1000570a:	08da      	lsrs	r2, r3, #3
1000570c:	687b      	ldr	r3, [r7, #4]
1000570e:	00d2      	lsls	r2, r2, #3
10005710:	08d2      	lsrs	r2, r2, #3
10005712:	6899      	ldr	r1, [r3, #8]
10005714:	0f49      	lsrs	r1, r1, #29
10005716:	0749      	lsls	r1, r1, #29
10005718:	430a      	orrs	r2, r1
1000571a:	609a      	str	r2, [r3, #8]
1000571c:	e043      	b.n	100057a6 <XMC_CAN_MO_Receive+0x186>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
1000571e:	687b      	ldr	r3, [r7, #4]
10005720:	681b      	ldr	r3, [r3, #0]
10005722:	68db      	ldr	r3, [r3, #12]
10005724:	00db      	lsls	r3, r3, #3
10005726:	08da      	lsrs	r2, r3, #3
10005728:	687b      	ldr	r3, [r7, #4]
1000572a:	00d2      	lsls	r2, r2, #3
1000572c:	08d2      	lsrs	r2, r2, #3
1000572e:	6899      	ldr	r1, [r3, #8]
10005730:	0f49      	lsrs	r1, r1, #29
10005732:	0749      	lsls	r1, r1, #29
10005734:	430a      	orrs	r2, r1
10005736:	609a      	str	r2, [r3, #8]
10005738:	e035      	b.n	100057a6 <XMC_CAN_MO_Receive+0x186>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
1000573a:	687b      	ldr	r3, [r7, #4]
1000573c:	79da      	ldrb	r2, [r3, #7]
1000573e:	2120      	movs	r1, #32
10005740:	430a      	orrs	r2, r1
10005742:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
10005744:	687b      	ldr	r3, [r7, #4]
10005746:	681b      	ldr	r3, [r3, #0]
10005748:	699b      	ldr	r3, [r3, #24]
1000574a:	00db      	lsls	r3, r3, #3
1000574c:	08da      	lsrs	r2, r3, #3
1000574e:	687b      	ldr	r3, [r7, #4]
10005750:	00d2      	lsls	r2, r2, #3
10005752:	08d2      	lsrs	r2, r2, #3
10005754:	6859      	ldr	r1, [r3, #4]
10005756:	0f49      	lsrs	r1, r1, #29
10005758:	0749      	lsls	r1, r1, #29
1000575a:	430a      	orrs	r2, r1
1000575c:	605a      	str	r2, [r3, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
1000575e:	687b      	ldr	r3, [r7, #4]
10005760:	681b      	ldr	r3, [r3, #0]
10005762:	68db      	ldr	r3, [r3, #12]
10005764:	00db      	lsls	r3, r3, #3
10005766:	08da      	lsrs	r2, r3, #3
10005768:	687b      	ldr	r3, [r7, #4]
1000576a:	00d2      	lsls	r2, r2, #3
1000576c:	08d2      	lsrs	r2, r2, #3
1000576e:	6899      	ldr	r1, [r3, #8]
10005770:	0f49      	lsrs	r1, r1, #29
10005772:	0749      	lsls	r1, r1, #29
10005774:	430a      	orrs	r2, r1
10005776:	609a      	str	r2, [r3, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10005778:	687b      	ldr	r3, [r7, #4]
1000577a:	681b      	ldr	r3, [r3, #0]
1000577c:	68da      	ldr	r2, [r3, #12]
1000577e:	2380      	movs	r3, #128	; 0x80
10005780:	059b      	lsls	r3, r3, #22
10005782:	4013      	ands	r3, r2
10005784:	0f5b      	lsrs	r3, r3, #29
10005786:	b2db      	uxtb	r3, r3
10005788:	1c1a      	adds	r2, r3, #0
1000578a:	2301      	movs	r3, #1
1000578c:	4013      	ands	r3, r2
1000578e:	b2da      	uxtb	r2, r3
10005790:	687b      	ldr	r3, [r7, #4]
10005792:	2101      	movs	r1, #1
10005794:	400a      	ands	r2, r1
10005796:	0150      	lsls	r0, r2, #5
10005798:	7ada      	ldrb	r2, [r3, #11]
1000579a:	2120      	movs	r1, #32
1000579c:	438a      	bics	r2, r1
1000579e:	1c11      	adds	r1, r2, #0
100057a0:	1c02      	adds	r2, r0, #0
100057a2:	430a      	orrs	r2, r1
100057a4:	72da      	strb	r2, [r3, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
100057a6:	687b      	ldr	r3, [r7, #4]
100057a8:	681b      	ldr	r3, [r3, #0]
100057aa:	681a      	ldr	r2, [r3, #0]
100057ac:	23f0      	movs	r3, #240	; 0xf0
100057ae:	051b      	lsls	r3, r3, #20
100057b0:	4013      	ands	r3, r2
100057b2:	0e1b      	lsrs	r3, r3, #24
100057b4:	b2da      	uxtb	r2, r3
100057b6:	687b      	ldr	r3, [r7, #4]
100057b8:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
100057ba:	687b      	ldr	r3, [r7, #4]
100057bc:	681b      	ldr	r3, [r3, #0]
100057be:	691a      	ldr	r2, [r3, #16]
100057c0:	687b      	ldr	r3, [r7, #4]
100057c2:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
100057c4:	687b      	ldr	r3, [r7, #4]
100057c6:	681b      	ldr	r3, [r3, #0]
100057c8:	695a      	ldr	r2, [r3, #20]
100057ca:	687b      	ldr	r3, [r7, #4]
100057cc:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
100057ce:	687b      	ldr	r3, [r7, #4]
100057d0:	681b      	ldr	r3, [r3, #0]
100057d2:	69db      	ldr	r3, [r3, #28]
100057d4:	2204      	movs	r2, #4
100057d6:	4013      	ands	r3, r2
100057d8:	089a      	lsrs	r2, r3, #2
100057da:	2316      	movs	r3, #22
100057dc:	18fb      	adds	r3, r7, r3
100057de:	701a      	strb	r2, [r3, #0]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
100057e0:	687b      	ldr	r3, [r7, #4]
100057e2:	681b      	ldr	r3, [r3, #0]
100057e4:	69db      	ldr	r3, [r3, #28]
100057e6:	2208      	movs	r2, #8
100057e8:	4013      	ands	r3, r2
100057ea:	08da      	lsrs	r2, r3, #3
100057ec:	2315      	movs	r3, #21
100057ee:	18fb      	adds	r3, r7, r3
100057f0:	701a      	strb	r2, [r3, #0]
    } while ((rx_pnd != 0U) && (new_data != 0U));
100057f2:	2316      	movs	r3, #22
100057f4:	18fb      	adds	r3, r7, r3
100057f6:	781b      	ldrb	r3, [r3, #0]
100057f8:	2b00      	cmp	r3, #0
100057fa:	d005      	beq.n	10005808 <XMC_CAN_MO_Receive+0x1e8>
100057fc:	2315      	movs	r3, #21
100057fe:	18fb      	adds	r3, r7, r3
10005800:	781b      	ldrb	r3, [r3, #0]
10005802:	2b00      	cmp	r3, #0
10005804:	d000      	beq.n	10005808 <XMC_CAN_MO_Receive+0x1e8>
10005806:	e73a      	b.n	1000567e <XMC_CAN_MO_Receive+0x5e>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
10005808:	687b      	ldr	r3, [r7, #4]
1000580a:	2200      	movs	r2, #0
1000580c:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
1000580e:	2317      	movs	r3, #23
10005810:	18fb      	adds	r3, r7, r3
10005812:	2200      	movs	r2, #0
10005814:	701a      	strb	r2, [r3, #0]
  }
  return error;
10005816:	2317      	movs	r3, #23
10005818:	18fb      	adds	r3, r7, r3
1000581a:	781b      	ldrb	r3, [r3, #0]
}
1000581c:	1c18      	adds	r0, r3, #0
1000581e:	46bd      	mov	sp, r7
10005820:	b006      	add	sp, #24
10005822:	bd80      	pop	{r7, pc}
10005824:	1ffc0000 	.word	0x1ffc0000

10005828 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
10005828:	b580      	push	{r7, lr}
1000582a:	b082      	sub	sp, #8
1000582c:	af00      	add	r7, sp, #0
1000582e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10005830:	687b      	ldr	r3, [r7, #4]
10005832:	2280      	movs	r2, #128	; 0x80
10005834:	0052      	lsls	r2, r2, #1
10005836:	60da      	str	r2, [r3, #12]
}
10005838:	46bd      	mov	sp, r7
1000583a:	b002      	add	sp, #8
1000583c:	bd80      	pop	{r7, pc}
1000583e:	46c0      	nop			; (mov r8, r8)

10005840 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
10005840:	b580      	push	{r7, lr}
10005842:	b082      	sub	sp, #8
10005844:	af00      	add	r7, sp, #0
10005846:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
10005848:	687b      	ldr	r3, [r7, #4]
1000584a:	4a09      	ldr	r2, [pc, #36]	; (10005870 <XMC_CCU4_lUngateClock+0x30>)
1000584c:	4293      	cmp	r3, r2
1000584e:	d103      	bne.n	10005858 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
10005850:	2004      	movs	r0, #4
10005852:	f7ff fad9 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>
10005856:	e008      	b.n	1000586a <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
10005858:	687b      	ldr	r3, [r7, #4]
1000585a:	4a06      	ldr	r2, [pc, #24]	; (10005874 <XMC_CCU4_lUngateClock+0x34>)
1000585c:	4293      	cmp	r3, r2
1000585e:	d104      	bne.n	1000586a <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
10005860:	2380      	movs	r3, #128	; 0x80
10005862:	029b      	lsls	r3, r3, #10
10005864:	1c18      	adds	r0, r3, #0
10005866:	f7ff facf 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
1000586a:	46bd      	mov	sp, r7
1000586c:	b002      	add	sp, #8
1000586e:	bd80      	pop	{r7, pc}
10005870:	48040000 	.word	0x48040000
10005874:	48044000 	.word	0x48044000

10005878 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10005878:	b580      	push	{r7, lr}
1000587a:	b082      	sub	sp, #8
1000587c:	af00      	add	r7, sp, #0
1000587e:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10005880:	687b      	ldr	r3, [r7, #4]
10005882:	1c18      	adds	r0, r3, #0
10005884:	f7ff ffdc 	bl	10005840 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10005888:	46bd      	mov	sp, r7
1000588a:	b002      	add	sp, #8
1000588c:	bd80      	pop	{r7, pc}
1000588e:	46c0      	nop			; (mov r8, r8)

10005890 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10005890:	b580      	push	{r7, lr}
10005892:	b084      	sub	sp, #16
10005894:	af00      	add	r7, sp, #0
10005896:	6078      	str	r0, [r7, #4]
10005898:	1c0a      	adds	r2, r1, #0
1000589a:	1cfb      	adds	r3, r7, #3
1000589c:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
1000589e:	687b      	ldr	r3, [r7, #4]
100058a0:	1c18      	adds	r0, r3, #0
100058a2:	f7ff ffe9 	bl	10005878 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
100058a6:	687b      	ldr	r3, [r7, #4]
100058a8:	1c18      	adds	r0, r3, #0
100058aa:	f7ff ffbd 	bl	10005828 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
100058ae:	687b      	ldr	r3, [r7, #4]
100058b0:	681b      	ldr	r3, [r3, #0]
100058b2:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
100058b4:	68fb      	ldr	r3, [r7, #12]
100058b6:	4a07      	ldr	r2, [pc, #28]	; (100058d4 <XMC_CCU4_Init+0x44>)
100058b8:	4013      	ands	r3, r2
100058ba:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
100058bc:	1cfb      	adds	r3, r7, #3
100058be:	781b      	ldrb	r3, [r3, #0]
100058c0:	039b      	lsls	r3, r3, #14
100058c2:	68fa      	ldr	r2, [r7, #12]
100058c4:	4313      	orrs	r3, r2
100058c6:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
100058c8:	687b      	ldr	r3, [r7, #4]
100058ca:	68fa      	ldr	r2, [r7, #12]
100058cc:	601a      	str	r2, [r3, #0]
}
100058ce:	46bd      	mov	sp, r7
100058d0:	b004      	add	sp, #16
100058d2:	bd80      	pop	{r7, pc}
100058d4:	ffff3fff 	.word	0xffff3fff

100058d8 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
100058d8:	b580      	push	{r7, lr}
100058da:	b084      	sub	sp, #16
100058dc:	af00      	add	r7, sp, #0
100058de:	6078      	str	r0, [r7, #4]
100058e0:	1c0a      	adds	r2, r1, #0
100058e2:	1cfb      	adds	r3, r7, #3
100058e4:	701a      	strb	r2, [r3, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
100058e6:	687b      	ldr	r3, [r7, #4]
100058e8:	681b      	ldr	r3, [r3, #0]
100058ea:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
100058ec:	68fb      	ldr	r3, [r7, #12]
100058ee:	2230      	movs	r2, #48	; 0x30
100058f0:	4393      	bics	r3, r2
100058f2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
100058f4:	1cfb      	adds	r3, r7, #3
100058f6:	781b      	ldrb	r3, [r3, #0]
100058f8:	011b      	lsls	r3, r3, #4
100058fa:	68fa      	ldr	r2, [r7, #12]
100058fc:	4313      	orrs	r3, r2
100058fe:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10005900:	687b      	ldr	r3, [r7, #4]
10005902:	68fa      	ldr	r2, [r7, #12]
10005904:	601a      	str	r2, [r3, #0]
}
10005906:	46bd      	mov	sp, r7
10005908:	b004      	add	sp, #16
1000590a:	bd80      	pop	{r7, pc}

1000590c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
1000590c:	b580      	push	{r7, lr}
1000590e:	b082      	sub	sp, #8
10005910:	af00      	add	r7, sp, #0
10005912:	6078      	str	r0, [r7, #4]
10005914:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10005916:	683b      	ldr	r3, [r7, #0]
10005918:	681a      	ldr	r2, [r3, #0]
1000591a:	687b      	ldr	r3, [r7, #4]
1000591c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000591e:	683b      	ldr	r3, [r7, #0]
10005920:	795b      	ldrb	r3, [r3, #5]
10005922:	069b      	lsls	r3, r3, #26
10005924:	0fdb      	lsrs	r3, r3, #31
10005926:	b2db      	uxtb	r3, r3
10005928:	051a      	lsls	r2, r3, #20
1000592a:	687b      	ldr	r3, [r7, #4]
1000592c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000592e:	683b      	ldr	r3, [r7, #0]
10005930:	791b      	ldrb	r3, [r3, #4]
10005932:	071b      	lsls	r3, r3, #28
10005934:	0f1b      	lsrs	r3, r3, #28
10005936:	b2db      	uxtb	r3, r3
10005938:	1c1a      	adds	r2, r3, #0
1000593a:	687b      	ldr	r3, [r7, #4]
1000593c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000593e:	683b      	ldr	r3, [r7, #0]
10005940:	795b      	ldrb	r3, [r3, #5]
10005942:	071b      	lsls	r3, r3, #28
10005944:	0f1b      	lsrs	r3, r3, #28
10005946:	b2db      	uxtb	r3, r3
10005948:	1c1a      	adds	r2, r3, #0
1000594a:	687b      	ldr	r3, [r7, #4]
1000594c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
1000594e:	683b      	ldr	r3, [r7, #0]
10005950:	795b      	ldrb	r3, [r3, #5]
10005952:	06db      	lsls	r3, r3, #27
10005954:	0fdb      	lsrs	r3, r3, #31
10005956:	b2db      	uxtb	r3, r3
10005958:	1c1a      	adds	r2, r3, #0
1000595a:	687b      	ldr	r3, [r7, #4]
1000595c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
1000595e:	683b      	ldr	r3, [r7, #0]
10005960:	791b      	ldrb	r3, [r3, #4]
10005962:	061b      	lsls	r3, r3, #24
10005964:	0f1b      	lsrs	r3, r3, #28
10005966:	b2db      	uxtb	r3, r3
10005968:	1c1a      	adds	r2, r3, #0
1000596a:	687b      	ldr	r3, [r7, #4]
1000596c:	62da      	str	r2, [r3, #44]	; 0x2c
}
1000596e:	46bd      	mov	sp, r7
10005970:	b002      	add	sp, #8
10005972:	bd80      	pop	{r7, pc}

10005974 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10005974:	b580      	push	{r7, lr}
10005976:	b086      	sub	sp, #24
10005978:	af00      	add	r7, sp, #0
1000597a:	6078      	str	r0, [r7, #4]
1000597c:	1c08      	adds	r0, r1, #0
1000597e:	1c11      	adds	r1, r2, #0
10005980:	1cfb      	adds	r3, r7, #3
10005982:	1c02      	adds	r2, r0, #0
10005984:	701a      	strb	r2, [r3, #0]
10005986:	1cbb      	adds	r3, r7, #2
10005988:	1c0a      	adds	r2, r1, #0
1000598a:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	22a8      	movs	r2, #168	; 0xa8
10005990:	589b      	ldr	r3, [r3, r2]
10005992:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10005994:	1cfb      	adds	r3, r7, #3
10005996:	781b      	ldrb	r3, [r3, #0]
10005998:	2b09      	cmp	r3, #9
1000599a:	d81a      	bhi.n	100059d2 <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
1000599c:	009a      	lsls	r2, r3, #2
1000599e:	4b1a      	ldr	r3, [pc, #104]	; (10005a08 <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
100059a0:	18d3      	adds	r3, r2, r3
100059a2:	681b      	ldr	r3, [r3, #0]
100059a4:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
100059a6:	2303      	movs	r3, #3
100059a8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
100059aa:	2300      	movs	r3, #0
100059ac:	617b      	str	r3, [r7, #20]
      break;
100059ae:	e016      	b.n	100059de <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
100059b0:	230c      	movs	r3, #12
100059b2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
100059b4:	2302      	movs	r3, #2
100059b6:	617b      	str	r3, [r7, #20]
      break;
100059b8:	e011      	b.n	100059de <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
100059ba:	23c0      	movs	r3, #192	; 0xc0
100059bc:	009b      	lsls	r3, r3, #2
100059be:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
100059c0:	2308      	movs	r3, #8
100059c2:	617b      	str	r3, [r7, #20]
      break;
100059c4:	e00b      	b.n	100059de <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
100059c6:	23c0      	movs	r3, #192	; 0xc0
100059c8:	011b      	lsls	r3, r3, #4
100059ca:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
100059cc:	230a      	movs	r3, #10
100059ce:	617b      	str	r3, [r7, #20]
      break;
100059d0:	e005      	b.n	100059de <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
100059d2:	23c0      	movs	r3, #192	; 0xc0
100059d4:	019b      	lsls	r3, r3, #6
100059d6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
100059d8:	230c      	movs	r3, #12
100059da:	617b      	str	r3, [r7, #20]
      break;
100059dc:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
100059de:	693b      	ldr	r3, [r7, #16]
100059e0:	43da      	mvns	r2, r3
100059e2:	68fb      	ldr	r3, [r7, #12]
100059e4:	4013      	ands	r3, r2
100059e6:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
100059e8:	1cbb      	adds	r3, r7, #2
100059ea:	781a      	ldrb	r2, [r3, #0]
100059ec:	697b      	ldr	r3, [r7, #20]
100059ee:	409a      	lsls	r2, r3
100059f0:	1c13      	adds	r3, r2, #0
100059f2:	68fa      	ldr	r2, [r7, #12]
100059f4:	4313      	orrs	r3, r2
100059f6:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
100059f8:	687b      	ldr	r3, [r7, #4]
100059fa:	21a8      	movs	r1, #168	; 0xa8
100059fc:	68fa      	ldr	r2, [r7, #12]
100059fe:	505a      	str	r2, [r3, r1]
}
10005a00:	46bd      	mov	sp, r7
10005a02:	b006      	add	sp, #24
10005a04:	bd80      	pop	{r7, pc}
10005a06:	46c0      	nop			; (mov r8, r8)
10005a08:	1000ce28 	.word	0x1000ce28

10005a0c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
10005a0c:	b580      	push	{r7, lr}
10005a0e:	b084      	sub	sp, #16
10005a10:	af00      	add	r7, sp, #0
10005a12:	6078      	str	r0, [r7, #4]
10005a14:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
10005a16:	2310      	movs	r3, #16
10005a18:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
10005a1a:	687b      	ldr	r3, [r7, #4]
10005a1c:	1c18      	adds	r0, r3, #0
10005a1e:	f000 f897 	bl	10005b50 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
10005a22:	683b      	ldr	r3, [r7, #0]
10005a24:	7a1b      	ldrb	r3, [r3, #8]
10005a26:	2b00      	cmp	r3, #0
10005a28:	d002      	beq.n	10005a30 <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
10005a2a:	683b      	ldr	r3, [r7, #0]
10005a2c:	7a1b      	ldrb	r3, [r3, #8]
10005a2e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
10005a30:	683b      	ldr	r3, [r7, #0]
10005a32:	791b      	ldrb	r3, [r3, #4]
10005a34:	2b00      	cmp	r3, #0
10005a36:	d009      	beq.n	10005a4c <XMC_UART_CH_Init+0x40>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
10005a38:	683b      	ldr	r3, [r7, #0]
10005a3a:	681b      	ldr	r3, [r3, #0]
10005a3c:	1c19      	adds	r1, r3, #0
10005a3e:	68fb      	ldr	r3, [r7, #12]
10005a40:	687a      	ldr	r2, [r7, #4]
10005a42:	1c10      	adds	r0, r2, #0
10005a44:	1c1a      	adds	r2, r3, #0
10005a46:	f000 f935 	bl	10005cb4 <XMC_USIC_CH_SetBaudrateEx>
10005a4a:	e008      	b.n	10005a5e <XMC_UART_CH_Init+0x52>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10005a4c:	683b      	ldr	r3, [r7, #0]
10005a4e:	681a      	ldr	r2, [r3, #0]
10005a50:	6879      	ldr	r1, [r7, #4]
10005a52:	68fb      	ldr	r3, [r7, #12]
10005a54:	1c08      	adds	r0, r1, #0
10005a56:	1c11      	adds	r1, r2, #0
10005a58:	1c1a      	adds	r2, r3, #0
10005a5a:	f000 f8b5 	bl	10005bc8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10005a5e:	683b      	ldr	r3, [r7, #0]
10005a60:	79db      	ldrb	r3, [r3, #7]
10005a62:	3b01      	subs	r3, #1
10005a64:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10005a66:	68fb      	ldr	r3, [r7, #12]
10005a68:	085b      	lsrs	r3, r3, #1
10005a6a:	3301      	adds	r3, #1
10005a6c:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10005a6e:	4313      	orrs	r3, r2
10005a70:	4a19      	ldr	r2, [pc, #100]	; (10005ad8 <XMC_UART_CH_Init+0xcc>)
10005a72:	431a      	orrs	r2, r3
10005a74:	687b      	ldr	r3, [r7, #4]
10005a76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10005a78:	683b      	ldr	r3, [r7, #0]
10005a7a:	795b      	ldrb	r3, [r3, #5]
10005a7c:	3b01      	subs	r3, #1
10005a7e:	061b      	lsls	r3, r3, #24
10005a80:	2281      	movs	r2, #129	; 0x81
10005a82:	0052      	lsls	r2, r2, #1
10005a84:	431a      	orrs	r2, r3
10005a86:	687b      	ldr	r3, [r7, #4]
10005a88:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10005a8a:	683b      	ldr	r3, [r7, #0]
10005a8c:	799b      	ldrb	r3, [r3, #6]
10005a8e:	2b00      	cmp	r3, #0
10005a90:	d009      	beq.n	10005aa6 <XMC_UART_CH_Init+0x9a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
10005a92:	687b      	ldr	r3, [r7, #4]
10005a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005a96:	683b      	ldr	r3, [r7, #0]
10005a98:	799b      	ldrb	r3, [r3, #6]
10005a9a:	3b01      	subs	r3, #1
10005a9c:	041b      	lsls	r3, r3, #16
10005a9e:	431a      	orrs	r2, r3
10005aa0:	687b      	ldr	r3, [r7, #4]
10005aa2:	635a      	str	r2, [r3, #52]	; 0x34
10005aa4:	e008      	b.n	10005ab8 <XMC_UART_CH_Init+0xac>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10005aa6:	687b      	ldr	r3, [r7, #4]
10005aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005aaa:	683b      	ldr	r3, [r7, #0]
10005aac:	795b      	ldrb	r3, [r3, #5]
10005aae:	3b01      	subs	r3, #1
10005ab0:	041b      	lsls	r3, r3, #16
10005ab2:	431a      	orrs	r2, r3
10005ab4:	687b      	ldr	r3, [r7, #4]
10005ab6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10005ab8:	687b      	ldr	r3, [r7, #4]
10005aba:	22a0      	movs	r2, #160	; 0xa0
10005abc:	00d2      	lsls	r2, r2, #3
10005abe:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10005ac0:	687b      	ldr	r3, [r7, #4]
10005ac2:	2201      	movs	r2, #1
10005ac4:	4252      	negs	r2, r2
10005ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10005ac8:	683b      	ldr	r3, [r7, #0]
10005aca:	895b      	ldrh	r3, [r3, #10]
10005acc:	1c1a      	adds	r2, r3, #0
10005ace:	687b      	ldr	r3, [r7, #4]
10005ad0:	641a      	str	r2, [r3, #64]	; 0x40
}
10005ad2:	46bd      	mov	sp, r7
10005ad4:	b004      	add	sp, #16
10005ad6:	bd80      	pop	{r7, pc}
10005ad8:	00030001 	.word	0x00030001

10005adc <XMC_UART_CH_GetReceivedData>:
    channel->IN[0U] = data;
  }
}

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
10005adc:	b580      	push	{r7, lr}
10005ade:	b084      	sub	sp, #16
10005ae0:	af00      	add	r7, sp, #0
10005ae2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10005ae4:	687a      	ldr	r2, [r7, #4]
10005ae6:	2386      	movs	r3, #134	; 0x86
10005ae8:	005b      	lsls	r3, r3, #1
10005aea:	58d2      	ldr	r2, [r2, r3]
10005aec:	23e0      	movs	r3, #224	; 0xe0
10005aee:	04db      	lsls	r3, r3, #19
10005af0:	4013      	ands	r3, r2
10005af2:	d105      	bne.n	10005b00 <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
10005af4:	687b      	ldr	r3, [r7, #4]
10005af6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005af8:	230e      	movs	r3, #14
10005afa:	18fb      	adds	r3, r7, r3
10005afc:	801a      	strh	r2, [r3, #0]
10005afe:	e006      	b.n	10005b0e <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10005b00:	687a      	ldr	r2, [r7, #4]
10005b02:	238e      	movs	r3, #142	; 0x8e
10005b04:	005b      	lsls	r3, r3, #1
10005b06:	58d2      	ldr	r2, [r2, r3]
10005b08:	230e      	movs	r3, #14
10005b0a:	18fb      	adds	r3, r7, r3
10005b0c:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10005b0e:	230e      	movs	r3, #14
10005b10:	18fb      	adds	r3, r7, r3
10005b12:	881b      	ldrh	r3, [r3, #0]
}
10005b14:	1c18      	adds	r0, r3, #0
10005b16:	46bd      	mov	sp, r7
10005b18:	b004      	add	sp, #16
10005b1a:	bd80      	pop	{r7, pc}

10005b1c <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10005b1c:	b580      	push	{r7, lr}
10005b1e:	b082      	sub	sp, #8
10005b20:	af00      	add	r7, sp, #0
10005b22:	6078      	str	r0, [r7, #4]
10005b24:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
10005b26:	687b      	ldr	r3, [r7, #4]
10005b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005b2a:	6839      	ldr	r1, [r7, #0]
10005b2c:	23fe      	movs	r3, #254	; 0xfe
10005b2e:	025b      	lsls	r3, r3, #9
10005b30:	400b      	ands	r3, r1
10005b32:	431a      	orrs	r2, r3
10005b34:	687b      	ldr	r3, [r7, #4]
10005b36:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
10005b38:	687b      	ldr	r3, [r7, #4]
10005b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005b3c:	683b      	ldr	r3, [r7, #0]
10005b3e:	21f8      	movs	r1, #248	; 0xf8
10005b40:	400b      	ands	r3, r1
10005b42:	431a      	orrs	r2, r3
10005b44:	687b      	ldr	r3, [r7, #4]
10005b46:	63da      	str	r2, [r3, #60]	; 0x3c
}
10005b48:	46bd      	mov	sp, r7
10005b4a:	b002      	add	sp, #8
10005b4c:	bd80      	pop	{r7, pc}
10005b4e:	46c0      	nop			; (mov r8, r8)

10005b50 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10005b50:	b580      	push	{r7, lr}
10005b52:	b082      	sub	sp, #8
10005b54:	af00      	add	r7, sp, #0
10005b56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10005b58:	687a      	ldr	r2, [r7, #4]
10005b5a:	2390      	movs	r3, #144	; 0x90
10005b5c:	05db      	lsls	r3, r3, #23
10005b5e:	429a      	cmp	r2, r3
10005b60:	d003      	beq.n	10005b6a <XMC_USIC_CH_Enable+0x1a>
10005b62:	687b      	ldr	r3, [r7, #4]
10005b64:	4a13      	ldr	r2, [pc, #76]	; (10005bb4 <XMC_USIC_CH_Enable+0x64>)
10005b66:	4293      	cmp	r3, r2
10005b68:	d104      	bne.n	10005b74 <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
10005b6a:	4b13      	ldr	r3, [pc, #76]	; (10005bb8 <XMC_USIC_CH_Enable+0x68>)
10005b6c:	1c18      	adds	r0, r3, #0
10005b6e:	f000 f947 	bl	10005e00 <XMC_USIC_Enable>
10005b72:	e00b      	b.n	10005b8c <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10005b74:	687b      	ldr	r3, [r7, #4]
10005b76:	4a11      	ldr	r2, [pc, #68]	; (10005bbc <XMC_USIC_CH_Enable+0x6c>)
10005b78:	4293      	cmp	r3, r2
10005b7a:	d003      	beq.n	10005b84 <XMC_USIC_CH_Enable+0x34>
10005b7c:	687b      	ldr	r3, [r7, #4]
10005b7e:	4a10      	ldr	r2, [pc, #64]	; (10005bc0 <XMC_USIC_CH_Enable+0x70>)
10005b80:	4293      	cmp	r3, r2
10005b82:	d103      	bne.n	10005b8c <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10005b84:	4b0f      	ldr	r3, [pc, #60]	; (10005bc4 <XMC_USIC_CH_Enable+0x74>)
10005b86:	1c18      	adds	r0, r3, #0
10005b88:	f000 f93a 	bl	10005e00 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10005b8c:	687b      	ldr	r3, [r7, #4]
10005b8e:	2203      	movs	r2, #3
10005b90:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10005b92:	46c0      	nop			; (mov r8, r8)
10005b94:	687b      	ldr	r3, [r7, #4]
10005b96:	68db      	ldr	r3, [r3, #12]
10005b98:	2201      	movs	r2, #1
10005b9a:	4013      	ands	r3, r2
10005b9c:	d0fa      	beq.n	10005b94 <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10005b9e:	687b      	ldr	r3, [r7, #4]
10005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005ba2:	220f      	movs	r2, #15
10005ba4:	4393      	bics	r3, r2
10005ba6:	1c1a      	adds	r2, r3, #0
10005ba8:	687b      	ldr	r3, [r7, #4]
10005baa:	641a      	str	r2, [r3, #64]	; 0x40
}
10005bac:	46bd      	mov	sp, r7
10005bae:	b002      	add	sp, #8
10005bb0:	bd80      	pop	{r7, pc}
10005bb2:	46c0      	nop			; (mov r8, r8)
10005bb4:	48000200 	.word	0x48000200
10005bb8:	48000008 	.word	0x48000008
10005bbc:	48004000 	.word	0x48004000
10005bc0:	48004200 	.word	0x48004200
10005bc4:	48004008 	.word	0x48004008

10005bc8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10005bc8:	b580      	push	{r7, lr}
10005bca:	b08e      	sub	sp, #56	; 0x38
10005bcc:	af00      	add	r7, sp, #0
10005bce:	60f8      	str	r0, [r7, #12]
10005bd0:	60b9      	str	r1, [r7, #8]
10005bd2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10005bd4:	68bb      	ldr	r3, [r7, #8]
10005bd6:	2b63      	cmp	r3, #99	; 0x63
10005bd8:	d95c      	bls.n	10005c94 <XMC_USIC_CH_SetBaudrate+0xcc>
10005bda:	687b      	ldr	r3, [r7, #4]
10005bdc:	2b00      	cmp	r3, #0
10005bde:	d059      	beq.n	10005c94 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10005be0:	f7ff f93e 	bl	10004e60 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10005be4:	1c03      	adds	r3, r0, #0
10005be6:	1c18      	adds	r0, r3, #0
10005be8:	2164      	movs	r1, #100	; 0x64
10005bea:	f000 fdfb 	bl	100067e4 <__aeabi_uidiv>
10005bee:	1c03      	adds	r3, r0, #0
10005bf0:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
10005bf2:	68bb      	ldr	r3, [r7, #8]
10005bf4:	1c18      	adds	r0, r3, #0
10005bf6:	2164      	movs	r1, #100	; 0x64
10005bf8:	f000 fdf4 	bl	100067e4 <__aeabi_uidiv>
10005bfc:	1c03      	adds	r3, r0, #0
10005bfe:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
10005c00:	2301      	movs	r3, #1
10005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10005c04:	2301      	movs	r3, #1
10005c06:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10005c08:	4b28      	ldr	r3, [pc, #160]	; (10005cac <XMC_USIC_CH_SetBaudrate+0xe4>)
10005c0a:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10005c0c:	4b27      	ldr	r3, [pc, #156]	; (10005cac <XMC_USIC_CH_SetBaudrate+0xe4>)
10005c0e:	633b      	str	r3, [r7, #48]	; 0x30
10005c10:	e024      	b.n	10005c5c <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10005c12:	6a3b      	ldr	r3, [r7, #32]
10005c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10005c16:	435a      	muls	r2, r3
10005c18:	1c11      	adds	r1, r2, #0
10005c1a:	68bb      	ldr	r3, [r7, #8]
10005c1c:	687a      	ldr	r2, [r7, #4]
10005c1e:	4353      	muls	r3, r2
10005c20:	1c08      	adds	r0, r1, #0
10005c22:	1c19      	adds	r1, r3, #0
10005c24:	f000 fdde 	bl	100067e4 <__aeabi_uidiv>
10005c28:	1c03      	adds	r3, r0, #0
10005c2a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10005c2c:	69fb      	ldr	r3, [r7, #28]
10005c2e:	0a9b      	lsrs	r3, r3, #10
10005c30:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10005c32:	69fb      	ldr	r3, [r7, #28]
10005c34:	059b      	lsls	r3, r3, #22
10005c36:	0d9b      	lsrs	r3, r3, #22
10005c38:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10005c3a:	69bb      	ldr	r3, [r7, #24]
10005c3c:	4a1b      	ldr	r2, [pc, #108]	; (10005cac <XMC_USIC_CH_SetBaudrate+0xe4>)
10005c3e:	4293      	cmp	r3, r2
10005c40:	d809      	bhi.n	10005c56 <XMC_USIC_CH_SetBaudrate+0x8e>
10005c42:	697a      	ldr	r2, [r7, #20]
10005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005c46:	429a      	cmp	r2, r3
10005c48:	d205      	bcs.n	10005c56 <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
10005c4a:	697b      	ldr	r3, [r7, #20]
10005c4c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10005c4e:	69bb      	ldr	r3, [r7, #24]
10005c50:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005c54:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005c58:	3b01      	subs	r3, #1
10005c5a:	633b      	str	r3, [r7, #48]	; 0x30
10005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005c5e:	2b00      	cmp	r3, #0
10005c60:	d1d7      	bne.n	10005c12 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005c64:	2280      	movs	r2, #128	; 0x80
10005c66:	0212      	lsls	r2, r2, #8
10005c68:	431a      	orrs	r2, r3
10005c6a:	68fb      	ldr	r3, [r7, #12]
10005c6c:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005c6e:	68fb      	ldr	r3, [r7, #12]
10005c70:	695b      	ldr	r3, [r3, #20]
10005c72:	4a0f      	ldr	r2, [pc, #60]	; (10005cb0 <XMC_USIC_CH_SetBaudrate+0xe8>)
10005c74:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	3b01      	subs	r3, #1
10005c7a:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10005c7c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005c80:	3b01      	subs	r3, #1
10005c82:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005c84:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005c86:	68fb      	ldr	r3, [r7, #12]
10005c88:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
10005c8a:	2337      	movs	r3, #55	; 0x37
10005c8c:	18fb      	adds	r3, r7, r3
10005c8e:	2200      	movs	r2, #0
10005c90:	701a      	strb	r2, [r3, #0]
10005c92:	e003      	b.n	10005c9c <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10005c94:	2337      	movs	r3, #55	; 0x37
10005c96:	18fb      	adds	r3, r7, r3
10005c98:	2201      	movs	r2, #1
10005c9a:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10005c9c:	2337      	movs	r3, #55	; 0x37
10005c9e:	18fb      	adds	r3, r7, r3
10005ca0:	781b      	ldrb	r3, [r3, #0]
}
10005ca2:	1c18      	adds	r0, r3, #0
10005ca4:	46bd      	mov	sp, r7
10005ca6:	b00e      	add	sp, #56	; 0x38
10005ca8:	bd80      	pop	{r7, pc}
10005caa:	46c0      	nop			; (mov r8, r8)
10005cac:	000003ff 	.word	0x000003ff
10005cb0:	fc0080ef 	.word	0xfc0080ef

10005cb4 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
10005cb4:	b580      	push	{r7, lr}
10005cb6:	b08c      	sub	sp, #48	; 0x30
10005cb8:	af00      	add	r7, sp, #0
10005cba:	60f8      	str	r0, [r7, #12]
10005cbc:	60b9      	str	r1, [r7, #8]
10005cbe:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10005cc0:	f7ff f8ce 	bl	10004e60 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10005cc4:	1c03      	adds	r3, r0, #0
10005cc6:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
10005cc8:	68bb      	ldr	r3, [r7, #8]
10005cca:	687a      	ldr	r2, [r7, #4]
10005ccc:	4353      	muls	r3, r2
10005cce:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
10005cd0:	2301      	movs	r3, #1
10005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
10005cd4:	6a3a      	ldr	r2, [r7, #32]
10005cd6:	69fb      	ldr	r3, [r7, #28]
10005cd8:	429a      	cmp	r2, r3
10005cda:	dd62      	ble.n	10005da2 <XMC_USIC_CH_SetBaudrateEx+0xee>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10005cdc:	6a38      	ldr	r0, [r7, #32]
10005cde:	69f9      	ldr	r1, [r7, #28]
10005ce0:	f000 fe10 	bl	10006904 <__aeabi_idiv>
10005ce4:	1c03      	adds	r3, r0, #0
10005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
10005ce8:	e00f      	b.n	10005d0a <XMC_USIC_CH_SetBaudrateEx+0x56>
    {
      pdiv++;
10005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005cec:	3301      	adds	r3, #1
10005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
10005cf0:	68bb      	ldr	r3, [r7, #8]
10005cf2:	687a      	ldr	r2, [r7, #4]
10005cf4:	4353      	muls	r3, r2
10005cf6:	1c1a      	adds	r2, r3, #0
10005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005cfa:	4353      	muls	r3, r2
10005cfc:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10005cfe:	6a38      	ldr	r0, [r7, #32]
10005d00:	69f9      	ldr	r1, [r7, #28]
10005d02:	f000 fdff 	bl	10006904 <__aeabi_idiv>
10005d06:	1c03      	adds	r3, r0, #0
10005d08:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
10005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d0c:	4a2a      	ldr	r2, [pc, #168]	; (10005db8 <XMC_USIC_CH_SetBaudrateEx+0x104>)
10005d0e:	4293      	cmp	r3, r2
10005d10:	d8eb      	bhi.n	10005cea <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
10005d12:	6a39      	ldr	r1, [r7, #32]
10005d14:	687b      	ldr	r3, [r7, #4]
10005d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
10005d18:	4353      	muls	r3, r2
10005d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005d1c:	4353      	muls	r3, r2
10005d1e:	1c08      	adds	r0, r1, #0
10005d20:	1c19      	adds	r1, r3, #0
10005d22:	f000 fd5f 	bl	100067e4 <__aeabi_uidiv>
10005d26:	1c03      	adds	r3, r0, #0
10005d28:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
10005d2a:	6a39      	ldr	r1, [r7, #32]
10005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d2e:	3301      	adds	r3, #1
10005d30:	687a      	ldr	r2, [r7, #4]
10005d32:	4353      	muls	r3, r2
10005d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005d36:	4353      	muls	r3, r2
10005d38:	1c08      	adds	r0, r1, #0
10005d3a:	1c19      	adds	r1, r3, #0
10005d3c:	f000 fd52 	bl	100067e4 <__aeabi_uidiv>
10005d40:	1c03      	adds	r3, r0, #0
10005d42:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10005d44:	68ba      	ldr	r2, [r7, #8]
10005d46:	697b      	ldr	r3, [r7, #20]
10005d48:	1ad3      	subs	r3, r2, r3
10005d4a:	17d9      	asrs	r1, r3, #31
10005d4c:	185a      	adds	r2, r3, r1
10005d4e:	404a      	eors	r2, r1
10005d50:	68b9      	ldr	r1, [r7, #8]
10005d52:	69bb      	ldr	r3, [r7, #24]
10005d54:	1acb      	subs	r3, r1, r3
10005d56:	17d9      	asrs	r1, r3, #31
10005d58:	185b      	adds	r3, r3, r1
10005d5a:	404b      	eors	r3, r1
10005d5c:	429a      	cmp	r2, r3
10005d5e:	da02      	bge.n	10005d66 <XMC_USIC_CH_SetBaudrateEx+0xb2>
    {
      divider_step += 1;
10005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d62:	3301      	adds	r3, #1
10005d64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
10005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d68:	2280      	movs	r2, #128	; 0x80
10005d6a:	00d2      	lsls	r2, r2, #3
10005d6c:	1ad3      	subs	r3, r2, r3
10005d6e:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d72:	2280      	movs	r2, #128	; 0x80
10005d74:	01d2      	lsls	r2, r2, #7
10005d76:	431a      	orrs	r2, r3
10005d78:	68fb      	ldr	r3, [r7, #12]
10005d7a:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005d7c:	68fb      	ldr	r3, [r7, #12]
10005d7e:	695b      	ldr	r3, [r3, #20]
10005d80:	4a0e      	ldr	r2, [pc, #56]	; (10005dbc <XMC_USIC_CH_SetBaudrateEx+0x108>)
10005d82:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005d84:	687b      	ldr	r3, [r7, #4]
10005d86:	3b01      	subs	r3, #1
10005d88:	029b      	lsls	r3, r3, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10005d8a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
10005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005d8e:	3b01      	subs	r3, #1
10005d90:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005d92:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005d94:	68fb      	ldr	r3, [r7, #12]
10005d96:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10005d98:	2327      	movs	r3, #39	; 0x27
10005d9a:	18fb      	adds	r3, r7, r3
10005d9c:	2200      	movs	r2, #0
10005d9e:	701a      	strb	r2, [r3, #0]
10005da0:	e003      	b.n	10005daa <XMC_USIC_CH_SetBaudrateEx+0xf6>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10005da2:	2327      	movs	r3, #39	; 0x27
10005da4:	18fb      	adds	r3, r7, r3
10005da6:	2201      	movs	r2, #1
10005da8:	701a      	strb	r2, [r3, #0]
  }

  return status;
10005daa:	2327      	movs	r3, #39	; 0x27
10005dac:	18fb      	adds	r3, r7, r3
10005dae:	781b      	ldrb	r3, [r3, #0]
}
10005db0:	1c18      	adds	r0, r3, #0
10005db2:	46bd      	mov	sp, r7
10005db4:	b00c      	add	sp, #48	; 0x30
10005db6:	bd80      	pop	{r7, pc}
10005db8:	000003fe 	.word	0x000003fe
10005dbc:	fc0080ef 	.word	0xfc0080ef

10005dc0 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10005dc0:	b580      	push	{r7, lr}
10005dc2:	b084      	sub	sp, #16
10005dc4:	af00      	add	r7, sp, #0
10005dc6:	60f8      	str	r0, [r7, #12]
10005dc8:	607a      	str	r2, [r7, #4]
10005dca:	230b      	movs	r3, #11
10005dcc:	18fb      	adds	r3, r7, r3
10005dce:	1c0a      	adds	r2, r1, #0
10005dd0:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10005dd2:	68fb      	ldr	r3, [r7, #12]
10005dd4:	699b      	ldr	r3, [r3, #24]
10005dd6:	220b      	movs	r2, #11
10005dd8:	18ba      	adds	r2, r7, r2
10005dda:	7812      	ldrb	r2, [r2, #0]
10005ddc:	2107      	movs	r1, #7
10005dde:	4091      	lsls	r1, r2
10005de0:	1c0a      	adds	r2, r1, #0
10005de2:	43d2      	mvns	r2, r2
10005de4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
10005de6:	230b      	movs	r3, #11
10005de8:	18fb      	adds	r3, r7, r3
10005dea:	781b      	ldrb	r3, [r3, #0]
10005dec:	6879      	ldr	r1, [r7, #4]
10005dee:	4099      	lsls	r1, r3
10005df0:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10005df2:	431a      	orrs	r2, r3
10005df4:	68fb      	ldr	r3, [r7, #12]
10005df6:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
10005df8:	46bd      	mov	sp, r7
10005dfa:	b004      	add	sp, #16
10005dfc:	bd80      	pop	{r7, pc}
10005dfe:	46c0      	nop			; (mov r8, r8)

10005e00 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10005e00:	b580      	push	{r7, lr}
10005e02:	b082      	sub	sp, #8
10005e04:	af00      	add	r7, sp, #0
10005e06:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10005e08:	687b      	ldr	r3, [r7, #4]
10005e0a:	4a10      	ldr	r2, [pc, #64]	; (10005e4c <XMC_USIC_Enable+0x4c>)
10005e0c:	4293      	cmp	r3, r2
10005e0e:	d109      	bne.n	10005e24 <XMC_USIC_Enable+0x24>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10005e10:	2008      	movs	r0, #8
10005e12:	f7fe fff9 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
10005e16:	46c0      	nop			; (mov r8, r8)
10005e18:	2008      	movs	r0, #8
10005e1a:	f7ff f80f 	bl	10004e3c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10005e1e:	1e03      	subs	r3, r0, #0
10005e20:	d1fa      	bne.n	10005e18 <XMC_USIC_Enable+0x18>
10005e22:	e010      	b.n	10005e46 <XMC_USIC_Enable+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
10005e24:	687b      	ldr	r3, [r7, #4]
10005e26:	4a0a      	ldr	r2, [pc, #40]	; (10005e50 <XMC_USIC_Enable+0x50>)
10005e28:	4293      	cmp	r3, r2
10005e2a:	d10c      	bne.n	10005e46 <XMC_USIC_Enable+0x46>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10005e2c:	2380      	movs	r3, #128	; 0x80
10005e2e:	02db      	lsls	r3, r3, #11
10005e30:	1c18      	adds	r0, r3, #0
10005e32:	f7fe ffe9 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
10005e36:	46c0      	nop			; (mov r8, r8)
10005e38:	2380      	movs	r3, #128	; 0x80
10005e3a:	02db      	lsls	r3, r3, #11
10005e3c:	1c18      	adds	r0, r3, #0
10005e3e:	f7fe fffd 	bl	10004e3c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10005e42:	1e03      	subs	r3, r0, #0
10005e44:	d1f8      	bne.n	10005e38 <XMC_USIC_Enable+0x38>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10005e46:	46bd      	mov	sp, r7
10005e48:	b002      	add	sp, #8
10005e4a:	bd80      	pop	{r7, pc}
10005e4c:	48000008 	.word	0x48000008
10005e50:	48004008 	.word	0x48004008

10005e54 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
10005e54:	b580      	push	{r7, lr}
10005e56:	b084      	sub	sp, #16
10005e58:	af00      	add	r7, sp, #0
10005e5a:	6078      	str	r0, [r7, #4]
10005e5c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10005e5e:	1c3b      	adds	r3, r7, #0
10005e60:	781b      	ldrb	r3, [r3, #0]
10005e62:	075b      	lsls	r3, r3, #29
10005e64:	0f5b      	lsrs	r3, r3, #29
10005e66:	b2db      	uxtb	r3, r3
10005e68:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
10005e6a:	1cbb      	adds	r3, r7, #2
10005e6c:	881b      	ldrh	r3, [r3, #0]
10005e6e:	059b      	lsls	r3, r3, #22
10005e70:	0d9b      	lsrs	r3, r3, #22
10005e72:	b29b      	uxth	r3, r3
10005e74:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10005e76:	4313      	orrs	r3, r2
10005e78:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
10005e7a:	687a      	ldr	r2, [r7, #4]
10005e7c:	23f8      	movs	r3, #248	; 0xf8
10005e7e:	005b      	lsls	r3, r3, #1
10005e80:	68f9      	ldr	r1, [r7, #12]
10005e82:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005e84:	1cfb      	adds	r3, r7, #3
10005e86:	781b      	ldrb	r3, [r3, #0]
10005e88:	06db      	lsls	r3, r3, #27
10005e8a:	0fdb      	lsrs	r3, r3, #31
10005e8c:	b2db      	uxtb	r3, r3
10005e8e:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
10005e90:	1cfb      	adds	r3, r7, #3
10005e92:	781b      	ldrb	r3, [r3, #0]
10005e94:	071b      	lsls	r3, r3, #28
10005e96:	0f9b      	lsrs	r3, r3, #30
10005e98:	b2db      	uxtb	r3, r3
10005e9a:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005e9c:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
10005e9e:	1cfb      	adds	r3, r7, #3
10005ea0:	781b      	ldrb	r3, [r3, #0]
10005ea2:	069b      	lsls	r3, r3, #26
10005ea4:	0fdb      	lsrs	r3, r3, #31
10005ea6:	b2db      	uxtb	r3, r3
10005ea8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005eaa:	4313      	orrs	r3, r2
10005eac:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
10005eae:	1cfb      	adds	r3, r7, #3
10005eb0:	781b      	ldrb	r3, [r3, #0]
10005eb2:	065b      	lsls	r3, r3, #25
10005eb4:	0fdb      	lsrs	r3, r3, #31
10005eb6:	b2db      	uxtb	r3, r3
10005eb8:	079b      	lsls	r3, r3, #30
10005eba:	68fa      	ldr	r2, [r7, #12]
10005ebc:	4313      	orrs	r3, r2
10005ebe:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10005ec0:	687a      	ldr	r2, [r7, #4]
10005ec2:	23f8      	movs	r3, #248	; 0xf8
10005ec4:	005b      	lsls	r3, r3, #1
10005ec6:	58d2      	ldr	r2, [r2, r3]
10005ec8:	68fb      	ldr	r3, [r7, #12]
10005eca:	4313      	orrs	r3, r2
10005ecc:	2280      	movs	r2, #128	; 0x80
10005ece:	0612      	lsls	r2, r2, #24
10005ed0:	431a      	orrs	r2, r3
10005ed2:	1c11      	adds	r1, r2, #0
10005ed4:	687a      	ldr	r2, [r7, #4]
10005ed6:	23f8      	movs	r3, #248	; 0xf8
10005ed8:	005b      	lsls	r3, r3, #1
10005eda:	50d1      	str	r1, [r2, r3]
}
10005edc:	46bd      	mov	sp, r7
10005ede:	b004      	add	sp, #16
10005ee0:	bd80      	pop	{r7, pc}
10005ee2:	46c0      	nop			; (mov r8, r8)

10005ee4 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10005ee4:	b580      	push	{r7, lr}
10005ee6:	b082      	sub	sp, #8
10005ee8:	af00      	add	r7, sp, #0
10005eea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10005eec:	687b      	ldr	r3, [r7, #4]
10005eee:	2284      	movs	r2, #132	; 0x84
10005ef0:	589b      	ldr	r3, [r3, r2]
10005ef2:	2280      	movs	r2, #128	; 0x80
10005ef4:	0452      	lsls	r2, r2, #17
10005ef6:	431a      	orrs	r2, r3
10005ef8:	687b      	ldr	r3, [r7, #4]
10005efa:	2184      	movs	r1, #132	; 0x84
10005efc:	505a      	str	r2, [r3, r1]
}
10005efe:	46bd      	mov	sp, r7
10005f00:	b002      	add	sp, #8
10005f02:	bd80      	pop	{r7, pc}

10005f04 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10005f04:	b580      	push	{r7, lr}
10005f06:	b082      	sub	sp, #8
10005f08:	af00      	add	r7, sp, #0
10005f0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
10005f0c:	687b      	ldr	r3, [r7, #4]
10005f0e:	2284      	movs	r2, #132	; 0x84
10005f10:	589b      	ldr	r3, [r3, r2]
10005f12:	4a04      	ldr	r2, [pc, #16]	; (10005f24 <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10005f14:	401a      	ands	r2, r3
10005f16:	687b      	ldr	r3, [r7, #4]
10005f18:	2184      	movs	r1, #132	; 0x84
10005f1a:	505a      	str	r2, [r3, r1]
}
10005f1c:	46bd      	mov	sp, r7
10005f1e:	b002      	add	sp, #8
10005f20:	bd80      	pop	{r7, pc}
10005f22:	46c0      	nop			; (mov r8, r8)
10005f24:	feffffff 	.word	0xfeffffff

10005f28 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10005f28:	b580      	push	{r7, lr}
10005f2a:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10005f2c:	2001      	movs	r0, #1
10005f2e:	f7fe ff6b 	bl	10004e08 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10005f32:	46bd      	mov	sp, r7
10005f34:	bd80      	pop	{r7, pc}
10005f36:	46c0      	nop			; (mov r8, r8)

10005f38 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10005f38:	b580      	push	{r7, lr}
10005f3a:	b082      	sub	sp, #8
10005f3c:	af00      	add	r7, sp, #0
10005f3e:	6078      	str	r0, [r7, #4]
10005f40:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10005f42:	f7ff fff1 	bl	10005f28 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10005f46:	683b      	ldr	r3, [r7, #0]
10005f48:	695a      	ldr	r2, [r3, #20]
10005f4a:	687b      	ldr	r3, [r7, #4]
10005f4c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10005f4e:	683b      	ldr	r3, [r7, #0]
10005f50:	685b      	ldr	r3, [r3, #4]
10005f52:	2280      	movs	r2, #128	; 0x80
10005f54:	0212      	lsls	r2, r2, #8
10005f56:	431a      	orrs	r2, r3
10005f58:	687b      	ldr	r3, [r7, #4]
10005f5a:	2180      	movs	r1, #128	; 0x80
10005f5c:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10005f5e:	683b      	ldr	r3, [r7, #0]
10005f60:	689a      	ldr	r2, [r3, #8]
10005f62:	687b      	ldr	r3, [r7, #4]
10005f64:	21a0      	movs	r1, #160	; 0xa0
10005f66:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10005f68:	683b      	ldr	r3, [r7, #0]
10005f6a:	68da      	ldr	r2, [r3, #12]
10005f6c:	687b      	ldr	r3, [r7, #4]
10005f6e:	21a4      	movs	r1, #164	; 0xa4
10005f70:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10005f72:	683b      	ldr	r3, [r7, #0]
10005f74:	6919      	ldr	r1, [r3, #16]
10005f76:	687a      	ldr	r2, [r7, #4]
10005f78:	23a0      	movs	r3, #160	; 0xa0
10005f7a:	009b      	lsls	r3, r3, #2
10005f7c:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
10005f7e:	683b      	ldr	r3, [r7, #0]
10005f80:	681a      	ldr	r2, [r3, #0]
10005f82:	687b      	ldr	r3, [r7, #4]
10005f84:	21b8      	movs	r1, #184	; 0xb8
10005f86:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10005f88:	46bd      	mov	sp, r7
10005f8a:	b002      	add	sp, #8
10005f8c:	bd80      	pop	{r7, pc}
10005f8e:	46c0      	nop			; (mov r8, r8)

10005f90 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10005f90:	b580      	push	{r7, lr}
10005f92:	b084      	sub	sp, #16
10005f94:	af00      	add	r7, sp, #0
10005f96:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10005f98:	687b      	ldr	r3, [r7, #4]
10005f9a:	2280      	movs	r2, #128	; 0x80
10005f9c:	589b      	ldr	r3, [r3, r2]
10005f9e:	2280      	movs	r2, #128	; 0x80
10005fa0:	0612      	lsls	r2, r2, #24
10005fa2:	431a      	orrs	r2, r3
10005fa4:	687b      	ldr	r3, [r7, #4]
10005fa6:	2180      	movs	r1, #128	; 0x80
10005fa8:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10005faa:	230f      	movs	r3, #15
10005fac:	18fb      	adds	r3, r7, r3
10005fae:	2200      	movs	r2, #0
10005fb0:	701a      	strb	r2, [r3, #0]
10005fb2:	e01d      	b.n	10005ff0 <XMC_VADC_GLOBAL_StartupCalibration+0x60>
  {
    group_ptr = g_xmc_vadc_group_array[i];
10005fb4:	230f      	movs	r3, #15
10005fb6:	18fb      	adds	r3, r7, r3
10005fb8:	781a      	ldrb	r2, [r3, #0]
10005fba:	4b11      	ldr	r3, [pc, #68]	; (10006000 <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
10005fbc:	0092      	lsls	r2, r2, #2
10005fbe:	58d3      	ldr	r3, [r2, r3]
10005fc0:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10005fc2:	68bb      	ldr	r3, [r7, #8]
10005fc4:	2280      	movs	r2, #128	; 0x80
10005fc6:	589a      	ldr	r2, [r3, r2]
10005fc8:	23c0      	movs	r3, #192	; 0xc0
10005fca:	029b      	lsls	r3, r3, #10
10005fcc:	4013      	ands	r3, r2
10005fce:	d008      	beq.n	10005fe2 <XMC_VADC_GLOBAL_StartupCalibration+0x52>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10005fd0:	e000      	b.n	10005fd4 <XMC_VADC_GLOBAL_StartupCalibration+0x44>
      {
        __NOP();
10005fd2:	46c0      	nop			; (mov r8, r8)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10005fd4:	68bb      	ldr	r3, [r7, #8]
10005fd6:	2280      	movs	r2, #128	; 0x80
10005fd8:	589a      	ldr	r2, [r3, r2]
10005fda:	2380      	movs	r3, #128	; 0x80
10005fdc:	055b      	lsls	r3, r3, #21
10005fde:	4013      	ands	r3, r2
10005fe0:	d1f7      	bne.n	10005fd2 <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10005fe2:	230f      	movs	r3, #15
10005fe4:	18fb      	adds	r3, r7, r3
10005fe6:	781a      	ldrb	r2, [r3, #0]
10005fe8:	230f      	movs	r3, #15
10005fea:	18fb      	adds	r3, r7, r3
10005fec:	3201      	adds	r2, #1
10005fee:	701a      	strb	r2, [r3, #0]
10005ff0:	230f      	movs	r3, #15
10005ff2:	18fb      	adds	r3, r7, r3
10005ff4:	781b      	ldrb	r3, [r3, #0]
10005ff6:	2b01      	cmp	r3, #1
10005ff8:	d9dc      	bls.n	10005fb4 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10005ffa:	46bd      	mov	sp, r7
10005ffc:	b004      	add	sp, #16
10005ffe:	bd80      	pop	{r7, pc}
10006000:	1000ce50 	.word	0x1000ce50

10006004 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10006004:	b580      	push	{r7, lr}
10006006:	b082      	sub	sp, #8
10006008:	af00      	add	r7, sp, #0
1000600a:	6078      	str	r0, [r7, #4]
1000600c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
1000600e:	687a      	ldr	r2, [r7, #4]
10006010:	683b      	ldr	r3, [r7, #0]
10006012:	685b      	ldr	r3, [r3, #4]
10006014:	1c10      	adds	r0, r2, #0
10006016:	1c19      	adds	r1, r3, #0
10006018:	2200      	movs	r2, #0
1000601a:	2300      	movs	r3, #0
1000601c:	f000 f830 	bl	10006080 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10006020:	687a      	ldr	r2, [r7, #4]
10006022:	683b      	ldr	r3, [r7, #0]
10006024:	685b      	ldr	r3, [r3, #4]
10006026:	1c10      	adds	r0, r2, #0
10006028:	1c19      	adds	r1, r3, #0
1000602a:	2201      	movs	r2, #1
1000602c:	2300      	movs	r3, #0
1000602e:	f000 f827 	bl	10006080 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
10006032:	687a      	ldr	r2, [r7, #4]
10006034:	683b      	ldr	r3, [r7, #0]
10006036:	689b      	ldr	r3, [r3, #8]
10006038:	1c10      	adds	r0, r2, #0
1000603a:	1c19      	adds	r1, r3, #0
1000603c:	2200      	movs	r2, #0
1000603e:	2301      	movs	r3, #1
10006040:	f000 f81e 	bl	10006080 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
10006044:	687a      	ldr	r2, [r7, #4]
10006046:	683b      	ldr	r3, [r7, #0]
10006048:	689b      	ldr	r3, [r3, #8]
1000604a:	1c10      	adds	r0, r2, #0
1000604c:	1c19      	adds	r1, r3, #0
1000604e:	2201      	movs	r2, #1
10006050:	2301      	movs	r3, #1
10006052:	f000 f815 	bl	10006080 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
10006056:	683b      	ldr	r3, [r7, #0]
10006058:	691a      	ldr	r2, [r3, #16]
1000605a:	687b      	ldr	r3, [r7, #4]
1000605c:	2180      	movs	r1, #128	; 0x80
1000605e:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
10006060:	683b      	ldr	r3, [r7, #0]
10006062:	68da      	ldr	r2, [r3, #12]
10006064:	687b      	ldr	r3, [r7, #4]
10006066:	21b8      	movs	r1, #184	; 0xb8
10006068:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
1000606a:	687a      	ldr	r2, [r7, #4]
1000606c:	683b      	ldr	r3, [r7, #0]
1000606e:	681b      	ldr	r3, [r3, #0]
10006070:	1c10      	adds	r0, r2, #0
10006072:	1c19      	adds	r1, r3, #0
10006074:	f7ff feee 	bl	10005e54 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10006078:	46bd      	mov	sp, r7
1000607a:	b002      	add	sp, #8
1000607c:	bd80      	pop	{r7, pc}
1000607e:	46c0      	nop			; (mov r8, r8)

10006080 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10006080:	b580      	push	{r7, lr}
10006082:	b08c      	sub	sp, #48	; 0x30
10006084:	af00      	add	r7, sp, #0
10006086:	60f8      	str	r0, [r7, #12]
10006088:	60b9      	str	r1, [r7, #8]
1000608a:	603b      	str	r3, [r7, #0]
1000608c:	1dfb      	adds	r3, r7, #7
1000608e:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10006090:	1dfb      	adds	r3, r7, #7
10006092:	781b      	ldrb	r3, [r3, #0]
10006094:	2b00      	cmp	r3, #0
10006096:	d119      	bne.n	100060cc <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10006098:	2308      	movs	r3, #8
1000609a:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
1000609c:	23e0      	movs	r3, #224	; 0xe0
1000609e:	00db      	lsls	r3, r3, #3
100060a0:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
100060a2:	2300      	movs	r3, #0
100060a4:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
100060a6:	231f      	movs	r3, #31
100060a8:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
100060aa:	2308      	movs	r3, #8
100060ac:	18fb      	adds	r3, r7, r3
100060ae:	781b      	ldrb	r3, [r3, #0]
100060b0:	06db      	lsls	r3, r3, #27
100060b2:	0edb      	lsrs	r3, r3, #27
100060b4:	b2db      	uxtb	r3, r3
100060b6:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
100060b8:	2309      	movs	r3, #9
100060ba:	18fb      	adds	r3, r7, r3
100060bc:	781b      	ldrb	r3, [r3, #0]
100060be:	075b      	lsls	r3, r3, #29
100060c0:	0f5b      	lsrs	r3, r3, #29
100060c2:	b2da      	uxtb	r2, r3
100060c4:	231b      	movs	r3, #27
100060c6:	18fb      	adds	r3, r7, r3
100060c8:	701a      	strb	r2, [r3, #0]
100060ca:	e019      	b.n	10006100 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
100060cc:	2318      	movs	r3, #24
100060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
100060d0:	23e0      	movs	r3, #224	; 0xe0
100060d2:	04db      	lsls	r3, r3, #19
100060d4:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
100060d6:	2310      	movs	r3, #16
100060d8:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
100060da:	23f8      	movs	r3, #248	; 0xf8
100060dc:	035b      	lsls	r3, r3, #13
100060de:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
100060e0:	230a      	movs	r3, #10
100060e2:	18fb      	adds	r3, r7, r3
100060e4:	781b      	ldrb	r3, [r3, #0]
100060e6:	06db      	lsls	r3, r3, #27
100060e8:	0edb      	lsrs	r3, r3, #27
100060ea:	b2db      	uxtb	r3, r3
100060ec:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
100060ee:	230b      	movs	r3, #11
100060f0:	18fb      	adds	r3, r7, r3
100060f2:	781b      	ldrb	r3, [r3, #0]
100060f4:	075b      	lsls	r3, r3, #29
100060f6:	0f5b      	lsrs	r3, r3, #29
100060f8:	b2da      	uxtb	r2, r3
100060fa:	231b      	movs	r3, #27
100060fc:	18fb      	adds	r3, r7, r3
100060fe:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10006100:	68fb      	ldr	r3, [r7, #12]
10006102:	683a      	ldr	r2, [r7, #0]
10006104:	3228      	adds	r2, #40	; 0x28
10006106:	0092      	lsls	r2, r2, #2
10006108:	58d3      	ldr	r3, [r2, r3]
1000610a:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000610e:	43da      	mvns	r2, r3
10006110:	697b      	ldr	r3, [r7, #20]
10006112:	4013      	ands	r3, r2
10006114:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10006116:	231b      	movs	r3, #27
10006118:	18fb      	adds	r3, r7, r3
1000611a:	781a      	ldrb	r2, [r3, #0]
1000611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000611e:	409a      	lsls	r2, r3
10006120:	1c13      	adds	r3, r2, #0
10006122:	697a      	ldr	r2, [r7, #20]
10006124:	4313      	orrs	r3, r2
10006126:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
10006128:	6a3b      	ldr	r3, [r7, #32]
1000612a:	43da      	mvns	r2, r3
1000612c:	697b      	ldr	r3, [r7, #20]
1000612e:	4013      	ands	r3, r2
10006130:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
10006134:	69fa      	ldr	r2, [r7, #28]
10006136:	409a      	lsls	r2, r3
10006138:	1c13      	adds	r3, r2, #0
1000613a:	697a      	ldr	r2, [r7, #20]
1000613c:	4313      	orrs	r3, r2
1000613e:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
10006140:	68fb      	ldr	r3, [r7, #12]
10006142:	683a      	ldr	r2, [r7, #0]
10006144:	3228      	adds	r2, #40	; 0x28
10006146:	0092      	lsls	r2, r2, #2
10006148:	6979      	ldr	r1, [r7, #20]
1000614a:	50d1      	str	r1, [r2, r3]
}
1000614c:	46bd      	mov	sp, r7
1000614e:	b00c      	add	sp, #48	; 0x30
10006150:	bd80      	pop	{r7, pc}
10006152:	46c0      	nop			; (mov r8, r8)

10006154 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10006154:	b580      	push	{r7, lr}
10006156:	b084      	sub	sp, #16
10006158:	af00      	add	r7, sp, #0
1000615a:	6078      	str	r0, [r7, #4]
1000615c:	1c0a      	adds	r2, r1, #0
1000615e:	1cfb      	adds	r3, r7, #3
10006160:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10006162:	687b      	ldr	r3, [r7, #4]
10006164:	2280      	movs	r2, #128	; 0x80
10006166:	589b      	ldr	r3, [r3, r2]
10006168:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
1000616a:	68fb      	ldr	r3, [r7, #12]
1000616c:	2203      	movs	r2, #3
1000616e:	4393      	bics	r3, r2
10006170:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
10006172:	1cfb      	adds	r3, r7, #3
10006174:	781b      	ldrb	r3, [r3, #0]
10006176:	68fa      	ldr	r2, [r7, #12]
10006178:	4313      	orrs	r3, r2
1000617a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
1000617c:	687b      	ldr	r3, [r7, #4]
1000617e:	2180      	movs	r1, #128	; 0x80
10006180:	68fa      	ldr	r2, [r7, #12]
10006182:	505a      	str	r2, [r3, r1]
}
10006184:	46bd      	mov	sp, r7
10006186:	b004      	add	sp, #16
10006188:	bd80      	pop	{r7, pc}
1000618a:	46c0      	nop			; (mov r8, r8)

1000618c <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
1000618c:	b580      	push	{r7, lr}
1000618e:	b084      	sub	sp, #16
10006190:	af00      	add	r7, sp, #0
10006192:	6078      	str	r0, [r7, #4]
10006194:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
10006196:	687b      	ldr	r3, [r7, #4]
10006198:	1c18      	adds	r0, r3, #0
1000619a:	f7ff feb3 	bl	10005f04 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
1000619e:	687b      	ldr	r3, [r7, #4]
100061a0:	2284      	movs	r2, #132	; 0x84
100061a2:	589b      	ldr	r3, [r3, r2]
100061a4:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
100061a6:	68fb      	ldr	r3, [r7, #12]
100061a8:	2203      	movs	r2, #3
100061aa:	4393      	bics	r3, r2
100061ac:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
100061ae:	683b      	ldr	r3, [r7, #0]
100061b0:	781b      	ldrb	r3, [r3, #0]
100061b2:	071b      	lsls	r3, r3, #28
100061b4:	0f9b      	lsrs	r3, r3, #30
100061b6:	b2db      	uxtb	r3, r3
100061b8:	1c1a      	adds	r2, r3, #0
100061ba:	68fb      	ldr	r3, [r7, #12]
100061bc:	4313      	orrs	r3, r2
100061be:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
100061c0:	683b      	ldr	r3, [r7, #0]
100061c2:	781b      	ldrb	r3, [r3, #0]
100061c4:	2203      	movs	r2, #3
100061c6:	4013      	ands	r3, r2
100061c8:	b2db      	uxtb	r3, r3
100061ca:	2b00      	cmp	r3, #0
100061cc:	d003      	beq.n	100061d6 <XMC_VADC_GROUP_QueueInit+0x4a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
100061ce:	68fb      	ldr	r3, [r7, #12]
100061d0:	2208      	movs	r2, #8
100061d2:	4313      	orrs	r3, r2
100061d4:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
100061d6:	687b      	ldr	r3, [r7, #4]
100061d8:	2184      	movs	r1, #132	; 0x84
100061da:	68fa      	ldr	r2, [r7, #12]
100061dc:	505a      	str	r2, [r3, r1]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
100061de:	683b      	ldr	r3, [r7, #0]
100061e0:	685b      	ldr	r3, [r3, #4]
100061e2:	4a15      	ldr	r2, [pc, #84]	; (10006238 <XMC_VADC_GROUP_QueueInit+0xac>)
100061e4:	431a      	orrs	r2, r3
100061e6:	1c11      	adds	r1, r2, #0
100061e8:	687a      	ldr	r2, [r7, #4]
100061ea:	2380      	movs	r3, #128	; 0x80
100061ec:	005b      	lsls	r3, r3, #1
100061ee:	50d1      	str	r1, [r2, r3]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
100061f0:	683b      	ldr	r3, [r7, #0]
100061f2:	689b      	ldr	r3, [r3, #8]
100061f4:	2201      	movs	r2, #1
100061f6:	431a      	orrs	r2, r3
100061f8:	1c11      	adds	r1, r2, #0
100061fa:	687a      	ldr	r2, [r7, #4]
100061fc:	2382      	movs	r3, #130	; 0x82
100061fe:	005b      	lsls	r3, r3, #1
10006200:	50d1      	str	r1, [r2, r3]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
10006202:	683b      	ldr	r3, [r7, #0]
10006204:	781b      	ldrb	r3, [r3, #0]
10006206:	2203      	movs	r2, #3
10006208:	4013      	ands	r3, r2
1000620a:	b2db      	uxtb	r3, r3
1000620c:	2b02      	cmp	r3, #2
1000620e:	d10b      	bne.n	10006228 <XMC_VADC_GROUP_QueueInit+0x9c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
10006210:	687a      	ldr	r2, [r7, #4]
10006212:	2382      	movs	r3, #130	; 0x82
10006214:	005b      	lsls	r3, r3, #1
10006216:	58d3      	ldr	r3, [r2, r3]
10006218:	2280      	movs	r2, #128	; 0x80
1000621a:	0252      	lsls	r2, r2, #9
1000621c:	431a      	orrs	r2, r3
1000621e:	1c11      	adds	r1, r2, #0
10006220:	687a      	ldr	r2, [r7, #4]
10006222:	2382      	movs	r3, #130	; 0x82
10006224:	005b      	lsls	r3, r3, #1
10006226:	50d1      	str	r1, [r2, r3]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
10006228:	687b      	ldr	r3, [r7, #4]
1000622a:	1c18      	adds	r0, r3, #0
1000622c:	f7ff fe5a 	bl	10005ee4 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
10006230:	46bd      	mov	sp, r7
10006232:	b004      	add	sp, #16
10006234:	bd80      	pop	{r7, pc}
10006236:	46c0      	nop			; (mov r8, r8)
10006238:	80808000 	.word	0x80808000

1000623c <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
1000623c:	b580      	push	{r7, lr}
1000623e:	b088      	sub	sp, #32
10006240:	af00      	add	r7, sp, #0
10006242:	60f8      	str	r0, [r7, #12]
10006244:	60b9      	str	r1, [r7, #8]
10006246:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10006248:	687b      	ldr	r3, [r7, #4]
1000624a:	7b1b      	ldrb	r3, [r3, #12]
1000624c:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
1000624e:	68fb      	ldr	r3, [r7, #12]
10006250:	2288      	movs	r2, #136	; 0x88
10006252:	589b      	ldr	r3, [r3, r2]
10006254:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10006256:	68bb      	ldr	r3, [r7, #8]
10006258:	2201      	movs	r2, #1
1000625a:	409a      	lsls	r2, r3
1000625c:	1c13      	adds	r3, r2, #0
1000625e:	43da      	mvns	r2, r3
10006260:	697b      	ldr	r3, [r7, #20]
10006262:	4013      	ands	r3, r2
10006264:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10006266:	68bb      	ldr	r3, [r7, #8]
10006268:	69ba      	ldr	r2, [r7, #24]
1000626a:	409a      	lsls	r2, r3
1000626c:	1c13      	adds	r3, r2, #0
1000626e:	697a      	ldr	r2, [r7, #20]
10006270:	4313      	orrs	r3, r2
10006272:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10006274:	68fb      	ldr	r3, [r7, #12]
10006276:	2188      	movs	r1, #136	; 0x88
10006278:	697a      	ldr	r2, [r7, #20]
1000627a:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
1000627c:	687b      	ldr	r3, [r7, #4]
1000627e:	7b5b      	ldrb	r3, [r3, #13]
10006280:	b25b      	sxtb	r3, r3
10006282:	2b00      	cmp	r3, #0
10006284:	db2a      	blt.n	100062dc <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10006286:	2300      	movs	r3, #0
10006288:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
1000628a:	68bb      	ldr	r3, [r7, #8]
1000628c:	2b01      	cmp	r3, #1
1000628e:	d10a      	bne.n	100062a6 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10006290:	2308      	movs	r3, #8
10006292:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10006294:	68fb      	ldr	r3, [r7, #12]
10006296:	22b0      	movs	r2, #176	; 0xb0
10006298:	589b      	ldr	r3, [r3, r2]
1000629a:	4a1e      	ldr	r2, [pc, #120]	; (10006314 <XMC_VADC_GROUP_ChannelInit+0xd8>)
1000629c:	401a      	ands	r2, r3
1000629e:	68fb      	ldr	r3, [r7, #12]
100062a0:	21b0      	movs	r1, #176	; 0xb0
100062a2:	505a      	str	r2, [r3, r1]
100062a4:	e00d      	b.n	100062c2 <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
100062a6:	68bb      	ldr	r3, [r7, #8]
100062a8:	2b00      	cmp	r3, #0
100062aa:	d10a      	bne.n	100062c2 <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
100062ac:	2300      	movs	r3, #0
100062ae:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
100062b0:	68fb      	ldr	r3, [r7, #12]
100062b2:	22b0      	movs	r2, #176	; 0xb0
100062b4:	589b      	ldr	r3, [r3, r2]
100062b6:	221f      	movs	r2, #31
100062b8:	4393      	bics	r3, r2
100062ba:	1c1a      	adds	r2, r3, #0
100062bc:	68fb      	ldr	r3, [r7, #12]
100062be:	21b0      	movs	r1, #176	; 0xb0
100062c0:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
100062c2:	68fb      	ldr	r3, [r7, #12]
100062c4:	22b0      	movs	r2, #176	; 0xb0
100062c6:	589b      	ldr	r3, [r3, r2]
100062c8:	687a      	ldr	r2, [r7, #4]
100062ca:	7b52      	ldrb	r2, [r2, #13]
100062cc:	b251      	sxtb	r1, r2
100062ce:	69fa      	ldr	r2, [r7, #28]
100062d0:	4091      	lsls	r1, r2
100062d2:	1c0a      	adds	r2, r1, #0
100062d4:	431a      	orrs	r2, r3
100062d6:	68fb      	ldr	r3, [r7, #12]
100062d8:	21b0      	movs	r1, #176	; 0xb0
100062da:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
100062dc:	68fb      	ldr	r3, [r7, #12]
100062de:	22c8      	movs	r2, #200	; 0xc8
100062e0:	589a      	ldr	r2, [r3, r2]
100062e2:	687b      	ldr	r3, [r7, #4]
100062e4:	685b      	ldr	r3, [r3, #4]
100062e6:	431a      	orrs	r2, r3
100062e8:	68fb      	ldr	r3, [r7, #12]
100062ea:	21c8      	movs	r1, #200	; 0xc8
100062ec:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
100062ee:	68fb      	ldr	r3, [r7, #12]
100062f0:	22d0      	movs	r2, #208	; 0xd0
100062f2:	589a      	ldr	r2, [r3, r2]
100062f4:	687b      	ldr	r3, [r7, #4]
100062f6:	689b      	ldr	r3, [r3, #8]
100062f8:	431a      	orrs	r2, r3
100062fa:	68fb      	ldr	r3, [r7, #12]
100062fc:	21d0      	movs	r1, #208	; 0xd0
100062fe:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10006300:	687b      	ldr	r3, [r7, #4]
10006302:	6819      	ldr	r1, [r3, #0]
10006304:	68fb      	ldr	r3, [r7, #12]
10006306:	68ba      	ldr	r2, [r7, #8]
10006308:	3280      	adds	r2, #128	; 0x80
1000630a:	0092      	lsls	r2, r2, #2
1000630c:	50d1      	str	r1, [r2, r3]

}
1000630e:	46bd      	mov	sp, r7
10006310:	b008      	add	sp, #32
10006312:	bd80      	pop	{r7, pc}
10006314:	ffffe0ff 	.word	0xffffe0ff

10006318 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
10006318:	b580      	push	{r7, lr}
1000631a:	b086      	sub	sp, #24
1000631c:	af00      	add	r7, sp, #0
1000631e:	60f8      	str	r0, [r7, #12]
10006320:	60b9      	str	r1, [r7, #8]
10006322:	1dfb      	adds	r3, r7, #7
10006324:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
10006326:	68bb      	ldr	r3, [r7, #8]
10006328:	2b07      	cmp	r3, #7
1000632a:	d81b      	bhi.n	10006364 <XMC_VADC_GROUP_SetResultInterruptNode+0x4c>
  {
    route_mask  = group_ptr->REVNP0;
1000632c:	68fa      	ldr	r2, [r7, #12]
1000632e:	23d8      	movs	r3, #216	; 0xd8
10006330:	005b      	lsls	r3, r3, #1
10006332:	58d3      	ldr	r3, [r2, r3]
10006334:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
10006336:	68bb      	ldr	r3, [r7, #8]
10006338:	009b      	lsls	r3, r3, #2
1000633a:	1c1a      	adds	r2, r3, #0
1000633c:	230f      	movs	r3, #15
1000633e:	4093      	lsls	r3, r2
10006340:	43da      	mvns	r2, r3
10006342:	697b      	ldr	r3, [r7, #20]
10006344:	4013      	ands	r3, r2
10006346:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
10006348:	1dfb      	adds	r3, r7, #7
1000634a:	781b      	ldrb	r3, [r3, #0]
1000634c:	68ba      	ldr	r2, [r7, #8]
1000634e:	0092      	lsls	r2, r2, #2
10006350:	4093      	lsls	r3, r2
10006352:	697a      	ldr	r2, [r7, #20]
10006354:	4313      	orrs	r3, r2
10006356:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
10006358:	68fa      	ldr	r2, [r7, #12]
1000635a:	23d8      	movs	r3, #216	; 0xd8
1000635c:	005b      	lsls	r3, r3, #1
1000635e:	6979      	ldr	r1, [r7, #20]
10006360:	50d1      	str	r1, [r2, r3]
10006362:	e020      	b.n	100063a6 <XMC_VADC_GROUP_SetResultInterruptNode+0x8e>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10006364:	68fa      	ldr	r2, [r7, #12]
10006366:	23da      	movs	r3, #218	; 0xda
10006368:	005b      	lsls	r3, r3, #1
1000636a:	58d3      	ldr	r3, [r2, r3]
1000636c:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
1000636e:	68bb      	ldr	r3, [r7, #8]
10006370:	4a0e      	ldr	r2, [pc, #56]	; (100063ac <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
10006372:	4694      	mov	ip, r2
10006374:	4463      	add	r3, ip
10006376:	009b      	lsls	r3, r3, #2
10006378:	1c1a      	adds	r2, r3, #0
1000637a:	230f      	movs	r3, #15
1000637c:	4093      	lsls	r3, r2
1000637e:	43da      	mvns	r2, r3
10006380:	697b      	ldr	r3, [r7, #20]
10006382:	4013      	ands	r3, r2
10006384:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10006386:	1dfb      	adds	r3, r7, #7
10006388:	781b      	ldrb	r3, [r3, #0]
1000638a:	68ba      	ldr	r2, [r7, #8]
1000638c:	4907      	ldr	r1, [pc, #28]	; (100063ac <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
1000638e:	468c      	mov	ip, r1
10006390:	4462      	add	r2, ip
10006392:	0092      	lsls	r2, r2, #2
10006394:	4093      	lsls	r3, r2
10006396:	697a      	ldr	r2, [r7, #20]
10006398:	4313      	orrs	r3, r2
1000639a:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
1000639c:	68fa      	ldr	r2, [r7, #12]
1000639e:	23da      	movs	r3, #218	; 0xda
100063a0:	005b      	lsls	r3, r3, #1
100063a2:	6979      	ldr	r1, [r7, #20]
100063a4:	50d1      	str	r1, [r2, r3]
  }
}
100063a6:	46bd      	mov	sp, r7
100063a8:	b006      	add	sp, #24
100063aa:	bd80      	pop	{r7, pc}
100063ac:	3ffffff8 	.word	0x3ffffff8

100063b0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
100063b0:	b580      	push	{r7, lr}
100063b2:	b084      	sub	sp, #16
100063b4:	af00      	add	r7, sp, #0
100063b6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
100063b8:	4b14      	ldr	r3, [pc, #80]	; (1000640c <_sbrk+0x5c>)
100063ba:	681b      	ldr	r3, [r3, #0]
100063bc:	2b00      	cmp	r3, #0
100063be:	d102      	bne.n	100063c6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
100063c0:	4b12      	ldr	r3, [pc, #72]	; (1000640c <_sbrk+0x5c>)
100063c2:	4a13      	ldr	r2, [pc, #76]	; (10006410 <_sbrk+0x60>)
100063c4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
100063c6:	4b11      	ldr	r3, [pc, #68]	; (1000640c <_sbrk+0x5c>)
100063c8:	681b      	ldr	r3, [r3, #0]
100063ca:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
100063cc:	687b      	ldr	r3, [r7, #4]
100063ce:	3303      	adds	r3, #3
100063d0:	2203      	movs	r2, #3
100063d2:	4393      	bics	r3, r2
100063d4:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
100063d6:	4b0d      	ldr	r3, [pc, #52]	; (1000640c <_sbrk+0x5c>)
100063d8:	681a      	ldr	r2, [r3, #0]
100063da:	687b      	ldr	r3, [r7, #4]
100063dc:	18d2      	adds	r2, r2, r3
100063de:	4b0d      	ldr	r3, [pc, #52]	; (10006414 <_sbrk+0x64>)
100063e0:	429a      	cmp	r2, r3
100063e2:	d207      	bcs.n	100063f4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
100063e4:	4b09      	ldr	r3, [pc, #36]	; (1000640c <_sbrk+0x5c>)
100063e6:	681a      	ldr	r2, [r3, #0]
100063e8:	687b      	ldr	r3, [r7, #4]
100063ea:	18d2      	adds	r2, r2, r3
100063ec:	4b07      	ldr	r3, [pc, #28]	; (1000640c <_sbrk+0x5c>)
100063ee:	601a      	str	r2, [r3, #0]
    return (base);
100063f0:	68fb      	ldr	r3, [r7, #12]
100063f2:	e006      	b.n	10006402 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
100063f4:	f002 fba0 	bl	10008b38 <__errno>
100063f8:	1c03      	adds	r3, r0, #0
100063fa:	220c      	movs	r2, #12
100063fc:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
100063fe:	2301      	movs	r3, #1
10006400:	425b      	negs	r3, r3
  }
}
10006402:	1c18      	adds	r0, r3, #0
10006404:	46bd      	mov	sp, r7
10006406:	b004      	add	sp, #16
10006408:	bd80      	pop	{r7, pc}
1000640a:	46c0      	nop			; (mov r8, r8)
1000640c:	20000a28 	.word	0x20000a28
10006410:	20000b60 	.word	0x20000b60
10006414:	20003ffc 	.word	0x20003ffc

10006418 <_init>:

/* Init */
void _init(void)
{}
10006418:	b580      	push	{r7, lr}
1000641a:	af00      	add	r7, sp, #0
1000641c:	46bd      	mov	sp, r7
1000641e:	bd80      	pop	{r7, pc}

10006420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10006420:	b5b0      	push	{r4, r5, r7, lr}
10006422:	b082      	sub	sp, #8
10006424:	af00      	add	r7, sp, #0
10006426:	1c02      	adds	r2, r0, #0
10006428:	6039      	str	r1, [r7, #0]
1000642a:	1dfb      	adds	r3, r7, #7
1000642c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1000642e:	1dfb      	adds	r3, r7, #7
10006430:	781b      	ldrb	r3, [r3, #0]
10006432:	2b7f      	cmp	r3, #127	; 0x7f
10006434:	d827      	bhi.n	10006486 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006436:	4c2d      	ldr	r4, [pc, #180]	; (100064ec <__NVIC_SetPriority+0xcc>)
10006438:	1dfb      	adds	r3, r7, #7
1000643a:	781b      	ldrb	r3, [r3, #0]
1000643c:	b25b      	sxtb	r3, r3
1000643e:	089b      	lsrs	r3, r3, #2
10006440:	492a      	ldr	r1, [pc, #168]	; (100064ec <__NVIC_SetPriority+0xcc>)
10006442:	1dfa      	adds	r2, r7, #7
10006444:	7812      	ldrb	r2, [r2, #0]
10006446:	b252      	sxtb	r2, r2
10006448:	0892      	lsrs	r2, r2, #2
1000644a:	32c0      	adds	r2, #192	; 0xc0
1000644c:	0092      	lsls	r2, r2, #2
1000644e:	5852      	ldr	r2, [r2, r1]
10006450:	1df9      	adds	r1, r7, #7
10006452:	7809      	ldrb	r1, [r1, #0]
10006454:	1c08      	adds	r0, r1, #0
10006456:	2103      	movs	r1, #3
10006458:	4001      	ands	r1, r0
1000645a:	00c9      	lsls	r1, r1, #3
1000645c:	1c08      	adds	r0, r1, #0
1000645e:	21ff      	movs	r1, #255	; 0xff
10006460:	4081      	lsls	r1, r0
10006462:	43c9      	mvns	r1, r1
10006464:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10006466:	683a      	ldr	r2, [r7, #0]
10006468:	0192      	lsls	r2, r2, #6
1000646a:	20ff      	movs	r0, #255	; 0xff
1000646c:	4002      	ands	r2, r0
1000646e:	1df8      	adds	r0, r7, #7
10006470:	7800      	ldrb	r0, [r0, #0]
10006472:	1c05      	adds	r5, r0, #0
10006474:	2003      	movs	r0, #3
10006476:	4028      	ands	r0, r5
10006478:	00c0      	lsls	r0, r0, #3
1000647a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000647c:	430a      	orrs	r2, r1
1000647e:	33c0      	adds	r3, #192	; 0xc0
10006480:	009b      	lsls	r3, r3, #2
10006482:	511a      	str	r2, [r3, r4]
10006484:	e02e      	b.n	100064e4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10006486:	4c1a      	ldr	r4, [pc, #104]	; (100064f0 <__NVIC_SetPriority+0xd0>)
10006488:	1dfb      	adds	r3, r7, #7
1000648a:	781b      	ldrb	r3, [r3, #0]
1000648c:	1c1a      	adds	r2, r3, #0
1000648e:	230f      	movs	r3, #15
10006490:	4013      	ands	r3, r2
10006492:	3b08      	subs	r3, #8
10006494:	0899      	lsrs	r1, r3, #2
10006496:	4a16      	ldr	r2, [pc, #88]	; (100064f0 <__NVIC_SetPriority+0xd0>)
10006498:	1dfb      	adds	r3, r7, #7
1000649a:	781b      	ldrb	r3, [r3, #0]
1000649c:	1c18      	adds	r0, r3, #0
1000649e:	230f      	movs	r3, #15
100064a0:	4003      	ands	r3, r0
100064a2:	3b08      	subs	r3, #8
100064a4:	089b      	lsrs	r3, r3, #2
100064a6:	3306      	adds	r3, #6
100064a8:	009b      	lsls	r3, r3, #2
100064aa:	18d3      	adds	r3, r2, r3
100064ac:	685b      	ldr	r3, [r3, #4]
100064ae:	1dfa      	adds	r2, r7, #7
100064b0:	7812      	ldrb	r2, [r2, #0]
100064b2:	1c10      	adds	r0, r2, #0
100064b4:	2203      	movs	r2, #3
100064b6:	4002      	ands	r2, r0
100064b8:	00d2      	lsls	r2, r2, #3
100064ba:	1c10      	adds	r0, r2, #0
100064bc:	22ff      	movs	r2, #255	; 0xff
100064be:	4082      	lsls	r2, r0
100064c0:	43d2      	mvns	r2, r2
100064c2:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100064c4:	683b      	ldr	r3, [r7, #0]
100064c6:	019b      	lsls	r3, r3, #6
100064c8:	20ff      	movs	r0, #255	; 0xff
100064ca:	4003      	ands	r3, r0
100064cc:	1df8      	adds	r0, r7, #7
100064ce:	7800      	ldrb	r0, [r0, #0]
100064d0:	1c05      	adds	r5, r0, #0
100064d2:	2003      	movs	r0, #3
100064d4:	4028      	ands	r0, r5
100064d6:	00c0      	lsls	r0, r0, #3
100064d8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100064da:	431a      	orrs	r2, r3
100064dc:	1d8b      	adds	r3, r1, #6
100064de:	009b      	lsls	r3, r3, #2
100064e0:	18e3      	adds	r3, r4, r3
100064e2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100064e4:	46bd      	mov	sp, r7
100064e6:	b002      	add	sp, #8
100064e8:	bdb0      	pop	{r4, r5, r7, pc}
100064ea:	46c0      	nop			; (mov r8, r8)
100064ec:	e000e100 	.word	0xe000e100
100064f0:	e000ed00 	.word	0xe000ed00

100064f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100064f4:	b580      	push	{r7, lr}
100064f6:	b082      	sub	sp, #8
100064f8:	af00      	add	r7, sp, #0
100064fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100064fc:	687b      	ldr	r3, [r7, #4]
100064fe:	3b01      	subs	r3, #1
10006500:	4a0c      	ldr	r2, [pc, #48]	; (10006534 <SysTick_Config+0x40>)
10006502:	4293      	cmp	r3, r2
10006504:	d901      	bls.n	1000650a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10006506:	2301      	movs	r3, #1
10006508:	e010      	b.n	1000652c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000650a:	4b0b      	ldr	r3, [pc, #44]	; (10006538 <SysTick_Config+0x44>)
1000650c:	687a      	ldr	r2, [r7, #4]
1000650e:	3a01      	subs	r2, #1
10006510:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10006512:	2301      	movs	r3, #1
10006514:	425b      	negs	r3, r3
10006516:	1c18      	adds	r0, r3, #0
10006518:	2103      	movs	r1, #3
1000651a:	f7ff ff81 	bl	10006420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1000651e:	4b06      	ldr	r3, [pc, #24]	; (10006538 <SysTick_Config+0x44>)
10006520:	2200      	movs	r2, #0
10006522:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10006524:	4b04      	ldr	r3, [pc, #16]	; (10006538 <SysTick_Config+0x44>)
10006526:	2207      	movs	r2, #7
10006528:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000652a:	2300      	movs	r3, #0
}
1000652c:	1c18      	adds	r0, r3, #0
1000652e:	46bd      	mov	sp, r7
10006530:	b002      	add	sp, #8
10006532:	bd80      	pop	{r7, pc}
10006534:	00ffffff 	.word	0x00ffffff
10006538:	e000e010 	.word	0xe000e010

1000653c <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
1000653c:	b580      	push	{r7, lr}
1000653e:	b084      	sub	sp, #16
10006540:	af00      	add	r7, sp, #0
10006542:	60f8      	str	r0, [r7, #12]
10006544:	607a      	str	r2, [r7, #4]
10006546:	230b      	movs	r3, #11
10006548:	18fb      	adds	r3, r7, r3
1000654a:	1c0a      	adds	r2, r1, #0
1000654c:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
1000654e:	230b      	movs	r3, #11
10006550:	18fb      	adds	r3, r7, r3
10006552:	781b      	ldrb	r3, [r3, #0]
10006554:	687a      	ldr	r2, [r7, #4]
10006556:	409a      	lsls	r2, r3
10006558:	68fb      	ldr	r3, [r7, #12]
1000655a:	605a      	str	r2, [r3, #4]
}
1000655c:	46bd      	mov	sp, r7
1000655e:	b004      	add	sp, #16
10006560:	bd80      	pop	{r7, pc}
10006562:	46c0      	nop			; (mov r8, r8)

10006564 <SysTick_Handler>:
 * <b>Details of function</b><br>
 * This routine is the application entry point. It is invoked by the device startup code. 
 */

void SysTick_Handler(void)
{
10006564:	b580      	push	{r7, lr}
10006566:	af00      	add	r7, sp, #0

}
10006568:	46bd      	mov	sp, r7
1000656a:	bd80      	pop	{r7, pc}

1000656c <main>:

int main(void)
{
1000656c:	b590      	push	{r4, r7, lr}
1000656e:	b083      	sub	sp, #12
10006570:	af02      	add	r7, sp, #8
  /* Create 1 kHz tick and Initialize systick handler variable */
  sysTickParamHandle.enable 	= false;
10006572:	4b8e      	ldr	r3, [pc, #568]	; (100067ac <main+0x240>)
10006574:	2200      	movs	r2, #0
10006576:	701a      	strb	r2, [r3, #0]
  sysTickParamHandle.isTimeOut 	= false;
10006578:	4b8c      	ldr	r3, [pc, #560]	; (100067ac <main+0x240>)
1000657a:	2200      	movs	r2, #0
1000657c:	711a      	strb	r2, [r3, #4]
  sysTickParamHandle.count		= 0;
1000657e:	4b8b      	ldr	r3, [pc, #556]	; (100067ac <main+0x240>)
10006580:	2200      	movs	r2, #0
10006582:	805a      	strh	r2, [r3, #2]
  SysTick_Config(SystemCoreClock / 1000);
10006584:	4b8a      	ldr	r3, [pc, #552]	; (100067b0 <main+0x244>)
10006586:	681b      	ldr	r3, [r3, #0]
10006588:	1c18      	adds	r0, r3, #0
1000658a:	23fa      	movs	r3, #250	; 0xfa
1000658c:	0099      	lsls	r1, r3, #2
1000658e:	f000 f929 	bl	100067e4 <__aeabi_uidiv>
10006592:	1c03      	adds	r3, r0, #0
10006594:	1c18      	adds	r0, r3, #0
10006596:	f7ff ffad 	bl	100064f4 <SysTick_Config>

  /* Initialize Button, LED, and Dipswitches */
  GPIO_Init();
1000659a:	f7fd fae1 	bl	10003b60 <GPIO_Init>

  /* Initialize ESP32 */
  ESP32_ConnectionInit();
1000659e:	f7fd fe49 	bl	10004234 <ESP32_ConnectionInit>

  /* Initialization for PCS Communication */
  PCS_ConnectionInit();
100065a2:	f7fc fdbb 	bl	1000311c <PCS_ConnectionInit>

  /* Initialization for Battery Communication */
  GENIX_ConnectionInit();
100065a6:	f7fd fc43 	bl	10003e30 <GENIX_ConnectionInit>

  /* Initialization for Power Distribution Control Peripheral */
  PDU_Relay_Init();
100065aa:	f7fc fc21 	bl	10002df0 <PDU_Relay_Init>
  PDU_SensorADC_Init();
100065ae:	f7fc fb63 	bl	10002c78 <PDU_SensorADC_Init>

  /* Setup Timer */
  TIMING_TimerInit();
100065b2:	f7fc f9d3 	bl	1000295c <TIMING_TimerInit>

  /* PCS Command Initialization */
  mcu_state = OP_SETUP;
100065b6:	4b7f      	ldr	r3, [pc, #508]	; (100067b4 <main+0x248>)
100065b8:	2200      	movs	r2, #0
100065ba:	701a      	strb	r2, [r3, #0]

  controlFlag.isAuto_mode 			 = false;
100065bc:	4b7e      	ldr	r3, [pc, #504]	; (100067b8 <main+0x24c>)
100065be:	2200      	movs	r2, #0
100065c0:	709a      	strb	r2, [r3, #2]
  controlFlag.isBypass_power_mode 	 = false;
100065c2:	4b7d      	ldr	r3, [pc, #500]	; (100067b8 <main+0x24c>)
100065c4:	2200      	movs	r2, #0
100065c6:	70da      	strb	r2, [r3, #3]
  controlFlag.isChecking_peripheral  = false;
100065c8:	4b7b      	ldr	r3, [pc, #492]	; (100067b8 <main+0x24c>)
100065ca:	2200      	movs	r2, #0
100065cc:	715a      	strb	r2, [r3, #5]
  controlFlag.isForced_shutting_down = false;
100065ce:	4b7a      	ldr	r3, [pc, #488]	; (100067b8 <main+0x24c>)
100065d0:	2200      	movs	r2, #0
100065d2:	711a      	strb	r2, [r3, #4]
  controlFlag.isPerforming_Precharge = false;
100065d4:	4b78      	ldr	r3, [pc, #480]	; (100067b8 <main+0x24c>)
100065d6:	2200      	movs	r2, #0
100065d8:	701a      	strb	r2, [r3, #0]
  controlFlag.isStandby 			 = false;
100065da:	4b77      	ldr	r3, [pc, #476]	; (100067b8 <main+0x24c>)
100065dc:	2200      	movs	r2, #0
100065de:	705a      	strb	r2, [r3, #1]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  /* Continuously Checking Mode and Error */
  	  OP_CheckingError(&controlFlag, &pcsSystemStatus, &pcsDCgridStatus,
100065e0:	4875      	ldr	r0, [pc, #468]	; (100067b8 <main+0x24c>)
100065e2:	4976      	ldr	r1, [pc, #472]	; (100067bc <main+0x250>)
100065e4:	4a76      	ldr	r2, [pc, #472]	; (100067c0 <main+0x254>)
100065e6:	4c77      	ldr	r4, [pc, #476]	; (100067c4 <main+0x258>)
100065e8:	4b77      	ldr	r3, [pc, #476]	; (100067c8 <main+0x25c>)
100065ea:	9300      	str	r3, [sp, #0]
100065ec:	4b77      	ldr	r3, [pc, #476]	; (100067cc <main+0x260>)
100065ee:	9301      	str	r3, [sp, #4]
100065f0:	1c23      	adds	r3, r4, #0
100065f2:	f7fa ffcd 	bl	10001590 <OP_CheckingError>
  			  	  	   &pcsACinvStatus, &pcsPVconvStatus, &pcsBatconvStatus);
  	  OP_CheckingMode(&controlFlag);
100065f6:	4b70      	ldr	r3, [pc, #448]	; (100067b8 <main+0x24c>)
100065f8:	1c18      	adds	r0, r3, #0
100065fa:	f7fa ff83 	bl	10001504 <OP_CheckingMode>

  	  /* Run operational state */
  	  switch (mcu_state)
100065fe:	4b6d      	ldr	r3, [pc, #436]	; (100067b4 <main+0x248>)
10006600:	781b      	ldrb	r3, [r3, #0]
10006602:	2b05      	cmp	r3, #5
10006604:	d900      	bls.n	10006608 <main+0x9c>
10006606:	e0ce      	b.n	100067a6 <main+0x23a>
10006608:	009a      	lsls	r2, r3, #2
1000660a:	4b71      	ldr	r3, [pc, #452]	; (100067d0 <main+0x264>)
1000660c:	18d3      	adds	r3, r2, r3
1000660e:	681b      	ldr	r3, [r3, #0]
10006610:	469f      	mov	pc, r3
  	  {
  	  	  case OP_SETUP 	:
  	  		  mcu_state	= OP_SETUP;
10006612:	4b68      	ldr	r3, [pc, #416]	; (100067b4 <main+0x248>)
10006614:	2200      	movs	r2, #0
10006616:	701a      	strb	r2, [r3, #0]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
10006618:	4a6e      	ldr	r2, [pc, #440]	; (100067d4 <main+0x268>)
1000661a:	2380      	movs	r3, #128	; 0x80
1000661c:	025b      	lsls	r3, r3, #9
1000661e:	1c10      	adds	r0, r2, #0
10006620:	210b      	movs	r1, #11
10006622:	1c1a      	adds	r2, r3, #0
10006624:	f7ff ff8a 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006628:	4b6a      	ldr	r3, [pc, #424]	; (100067d4 <main+0x268>)
1000662a:	1c18      	adds	r0, r3, #0
1000662c:	210c      	movs	r1, #12
1000662e:	2201      	movs	r2, #1
10006630:	f7ff ff84 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006634:	4b67      	ldr	r3, [pc, #412]	; (100067d4 <main+0x268>)
10006636:	1c18      	adds	r0, r3, #0
10006638:	210d      	movs	r1, #13
1000663a:	2201      	movs	r2, #1
1000663c:	f7ff ff7e 	bl	1000653c <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_SetupConnection(&mcu_state, &sysTickParamHandle, &controlFlag,
10006640:	4b65      	ldr	r3, [pc, #404]	; (100067d8 <main+0x26c>)
10006642:	681c      	ldr	r4, [r3, #0]
10006644:	485b      	ldr	r0, [pc, #364]	; (100067b4 <main+0x248>)
10006646:	4959      	ldr	r1, [pc, #356]	; (100067ac <main+0x240>)
10006648:	4a5b      	ldr	r2, [pc, #364]	; (100067b8 <main+0x24c>)
1000664a:	4b64      	ldr	r3, [pc, #400]	; (100067dc <main+0x270>)
1000664c:	9300      	str	r3, [sp, #0]
1000664e:	4b5b      	ldr	r3, [pc, #364]	; (100067bc <main+0x250>)
10006650:	9301      	str	r3, [sp, #4]
10006652:	1c23      	adds	r3, r4, #0
10006654:	f7fa fd38 	bl	100010c8 <OP_SetupConnection>
					  	  	  	  pduSensor.mPVPT, &pcsBmsStatus, &pcsSystemStatus);
			  break;
10006658:	e0a6      	b.n	100067a8 <main+0x23c>
  	  	  case OP_TURN_ON 	:
  	  		  mcu_state	= OP_TURN_ON;
1000665a:	4b56      	ldr	r3, [pc, #344]	; (100067b4 <main+0x248>)
1000665c:	2201      	movs	r2, #1
1000665e:	701a      	strb	r2, [r3, #0]

  	  		  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006660:	4b5c      	ldr	r3, [pc, #368]	; (100067d4 <main+0x268>)
10006662:	1c18      	adds	r0, r3, #0
10006664:	210b      	movs	r1, #11
10006666:	2201      	movs	r2, #1
10006668:	f7ff ff68 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000666c:	4a59      	ldr	r2, [pc, #356]	; (100067d4 <main+0x268>)
1000666e:	2380      	movs	r3, #128	; 0x80
10006670:	025b      	lsls	r3, r3, #9
10006672:	1c10      	adds	r0, r2, #0
10006674:	210c      	movs	r1, #12
10006676:	1c1a      	adds	r2, r3, #0
10006678:	f7ff ff60 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
1000667c:	4b55      	ldr	r3, [pc, #340]	; (100067d4 <main+0x268>)
1000667e:	1c18      	adds	r0, r3, #0
10006680:	210d      	movs	r1, #13
10006682:	2201      	movs	r2, #1
10006684:	f7ff ff5a 	bl	1000653c <XMC_GPIO_SetOutputLevel>

	  		  /* Perform actions for this state */
	  		  OP_TurnOnPCS(&mcu_state, &sysTickParamHandle, &controlFlag, &pcsBmsStatus,
10006688:	484a      	ldr	r0, [pc, #296]	; (100067b4 <main+0x248>)
1000668a:	4948      	ldr	r1, [pc, #288]	; (100067ac <main+0x240>)
1000668c:	4a4a      	ldr	r2, [pc, #296]	; (100067b8 <main+0x24c>)
1000668e:	4c53      	ldr	r4, [pc, #332]	; (100067dc <main+0x270>)
10006690:	4b4a      	ldr	r3, [pc, #296]	; (100067bc <main+0x250>)
10006692:	9300      	str	r3, [sp, #0]
10006694:	1c23      	adds	r3, r4, #0
10006696:	f7fa fd83 	bl	100011a0 <OP_TurnOnPCS>
	  				  	   &pcsSystemStatus);
	  		  break;
1000669a:	e085      	b.n	100067a8 <main+0x23c>
  	  	  case OP_RUNNING 	:
  	  		  mcu_state	= OP_RUNNING;
1000669c:	4b45      	ldr	r3, [pc, #276]	; (100067b4 <main+0x248>)
1000669e:	2202      	movs	r2, #2
100066a0:	701a      	strb	r2, [r3, #0]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066a2:	4a4c      	ldr	r2, [pc, #304]	; (100067d4 <main+0x268>)
100066a4:	2380      	movs	r3, #128	; 0x80
100066a6:	025b      	lsls	r3, r3, #9
100066a8:	1c10      	adds	r0, r2, #0
100066aa:	210b      	movs	r1, #11
100066ac:	1c1a      	adds	r2, r3, #0
100066ae:	f7ff ff45 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066b2:	4a48      	ldr	r2, [pc, #288]	; (100067d4 <main+0x268>)
100066b4:	2380      	movs	r3, #128	; 0x80
100066b6:	025b      	lsls	r3, r3, #9
100066b8:	1c10      	adds	r0, r2, #0
100066ba:	210c      	movs	r1, #12
100066bc:	1c1a      	adds	r2, r3, #0
100066be:	f7ff ff3d 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100066c2:	4b44      	ldr	r3, [pc, #272]	; (100067d4 <main+0x268>)
100066c4:	1c18      	adds	r0, r3, #0
100066c6:	210d      	movs	r1, #13
100066c8:	2201      	movs	r2, #1
100066ca:	f7ff ff37 	bl	1000653c <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_CheckingPCSStatus(&mcu_state, &pcsSystemStatus, &sysTickParamHandle,
100066ce:	4839      	ldr	r0, [pc, #228]	; (100067b4 <main+0x248>)
100066d0:	493a      	ldr	r1, [pc, #232]	; (100067bc <main+0x250>)
100066d2:	4a36      	ldr	r2, [pc, #216]	; (100067ac <main+0x240>)
100066d4:	4b38      	ldr	r3, [pc, #224]	; (100067b8 <main+0x24c>)
100066d6:	f7fa fe13 	bl	10001300 <OP_CheckingPCSStatus>
								   &controlFlag);
			  break;
100066da:	e065      	b.n	100067a8 <main+0x23c>
		  case OP_STANDBY	:
			  mcu_state	= OP_STANDBY;
100066dc:	4b35      	ldr	r3, [pc, #212]	; (100067b4 <main+0x248>)
100066de:	2203      	movs	r2, #3
100066e0:	701a      	strb	r2, [r3, #0]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100066e2:	4b3c      	ldr	r3, [pc, #240]	; (100067d4 <main+0x268>)
100066e4:	1c18      	adds	r0, r3, #0
100066e6:	210b      	movs	r1, #11
100066e8:	2201      	movs	r2, #1
100066ea:	f7ff ff27 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100066ee:	4b39      	ldr	r3, [pc, #228]	; (100067d4 <main+0x268>)
100066f0:	1c18      	adds	r0, r3, #0
100066f2:	210c      	movs	r1, #12
100066f4:	2201      	movs	r2, #1
100066f6:	f7ff ff21 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066fa:	4a36      	ldr	r2, [pc, #216]	; (100067d4 <main+0x268>)
100066fc:	2380      	movs	r3, #128	; 0x80
100066fe:	025b      	lsls	r3, r3, #9
10006700:	1c10      	adds	r0, r2, #0
10006702:	210d      	movs	r1, #13
10006704:	1c1a      	adds	r2, r3, #0
10006706:	f7ff ff19 	bl	1000653c <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_PutSystemStandby(&mcu_state, &pcsSystemStatus, &controlFlag,
1000670a:	482a      	ldr	r0, [pc, #168]	; (100067b4 <main+0x248>)
1000670c:	492b      	ldr	r1, [pc, #172]	; (100067bc <main+0x250>)
1000670e:	4a2a      	ldr	r2, [pc, #168]	; (100067b8 <main+0x24c>)
10006710:	4b32      	ldr	r3, [pc, #200]	; (100067dc <main+0x270>)
10006712:	f7fa fe7f 	bl	10001414 <OP_PutSystemStandby>
					  	  	  	  &pcsBmsStatus);
			  break;
10006716:	e047      	b.n	100067a8 <main+0x23c>
		  case OP_ERROR		:
			  mcu_state	= OP_ERROR;
10006718:	4b26      	ldr	r3, [pc, #152]	; (100067b4 <main+0x248>)
1000671a:	2204      	movs	r2, #4
1000671c:	701a      	strb	r2, [r3, #0]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000671e:	4a2d      	ldr	r2, [pc, #180]	; (100067d4 <main+0x268>)
10006720:	2380      	movs	r3, #128	; 0x80
10006722:	025b      	lsls	r3, r3, #9
10006724:	1c10      	adds	r0, r2, #0
10006726:	210b      	movs	r1, #11
10006728:	1c1a      	adds	r2, r3, #0
1000672a:	f7ff ff07 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
1000672e:	4b29      	ldr	r3, [pc, #164]	; (100067d4 <main+0x268>)
10006730:	1c18      	adds	r0, r3, #0
10006732:	210c      	movs	r1, #12
10006734:	2201      	movs	r2, #1
10006736:	f7ff ff01 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000673a:	4a26      	ldr	r2, [pc, #152]	; (100067d4 <main+0x268>)
1000673c:	2380      	movs	r3, #128	; 0x80
1000673e:	025b      	lsls	r3, r3, #9
10006740:	1c10      	adds	r0, r2, #0
10006742:	210d      	movs	r1, #13
10006744:	1c1a      	adds	r2, r3, #0
10006746:	f7ff fef9 	bl	1000653c <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_HandlingPCSWarning(&mcu_state, &pcsSystemStatus, &sysTickParamHandle,
1000674a:	481a      	ldr	r0, [pc, #104]	; (100067b4 <main+0x248>)
1000674c:	491b      	ldr	r1, [pc, #108]	; (100067bc <main+0x250>)
1000674e:	4a17      	ldr	r2, [pc, #92]	; (100067ac <main+0x240>)
10006750:	4c19      	ldr	r4, [pc, #100]	; (100067b8 <main+0x24c>)
10006752:	4b23      	ldr	r3, [pc, #140]	; (100067e0 <main+0x274>)
10006754:	9300      	str	r3, [sp, #0]
10006756:	4b21      	ldr	r3, [pc, #132]	; (100067dc <main+0x270>)
10006758:	9301      	str	r3, [sp, #4]
1000675a:	1c23      	adds	r3, r4, #0
1000675c:	f7fa fe92 	bl	10001484 <OP_HandlingPCSWarning>
									&controlFlag, &bmsSensor, &pcsBmsStatus);
			  break;
10006760:	e022      	b.n	100067a8 <main+0x23c>
		  case OP_SHUTDOWN	:
			  mcu_state 	= OP_SHUTDOWN;
10006762:	4b14      	ldr	r3, [pc, #80]	; (100067b4 <main+0x248>)
10006764:	2205      	movs	r2, #5
10006766:	701a      	strb	r2, [r3, #0]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
10006768:	4a1a      	ldr	r2, [pc, #104]	; (100067d4 <main+0x268>)
1000676a:	2380      	movs	r3, #128	; 0x80
1000676c:	025b      	lsls	r3, r3, #9
1000676e:	1c10      	adds	r0, r2, #0
10006770:	210b      	movs	r1, #11
10006772:	1c1a      	adds	r2, r3, #0
10006774:	f7ff fee2 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
10006778:	4a16      	ldr	r2, [pc, #88]	; (100067d4 <main+0x268>)
1000677a:	2380      	movs	r3, #128	; 0x80
1000677c:	025b      	lsls	r3, r3, #9
1000677e:	1c10      	adds	r0, r2, #0
10006780:	210c      	movs	r1, #12
10006782:	1c1a      	adds	r2, r3, #0
10006784:	f7ff feda 	bl	1000653c <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
10006788:	4a12      	ldr	r2, [pc, #72]	; (100067d4 <main+0x268>)
1000678a:	2380      	movs	r3, #128	; 0x80
1000678c:	025b      	lsls	r3, r3, #9
1000678e:	1c10      	adds	r0, r2, #0
10006790:	210d      	movs	r1, #13
10006792:	1c1a      	adds	r2, r3, #0
10006794:	f7ff fed2 	bl	1000653c <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_PutSystemShutDown(&mcu_state, &sysTickParamHandle);
10006798:	4a06      	ldr	r2, [pc, #24]	; (100067b4 <main+0x248>)
1000679a:	4b04      	ldr	r3, [pc, #16]	; (100067ac <main+0x240>)
1000679c:	1c10      	adds	r0, r2, #0
1000679e:	1c19      	adds	r1, r3, #0
100067a0:	f7fa fe8c 	bl	100014bc <OP_PutSystemShutDown>
			  break;
100067a4:	e000      	b.n	100067a8 <main+0x23c>
		  default			: break;
100067a6:	46c0      	nop			; (mov r8, r8)
	  }
  }
100067a8:	e71a      	b.n	100065e0 <main+0x74>
100067aa:	46c0      	nop			; (mov r8, r8)
100067ac:	20000a94 	.word	0x20000a94
100067b0:	20003ffc 	.word	0x20003ffc
100067b4:	20000b56 	.word	0x20000b56
100067b8:	20000b50 	.word	0x20000b50
100067bc:	20000b44 	.word	0x20000b44
100067c0:	20000ad8 	.word	0x20000ad8
100067c4:	20000a9c 	.word	0x20000a9c
100067c8:	20000a44 	.word	0x20000a44
100067cc:	20000ab4 	.word	0x20000ab4
100067d0:	1000ce58 	.word	0x1000ce58
100067d4:	40040200 	.word	0x40040200
100067d8:	20000b34 	.word	0x20000b34
100067dc:	20000b4c 	.word	0x20000b4c
100067e0:	20000a3c 	.word	0x20000a3c

100067e4 <__aeabi_uidiv>:
100067e4:	2200      	movs	r2, #0
100067e6:	0843      	lsrs	r3, r0, #1
100067e8:	428b      	cmp	r3, r1
100067ea:	d374      	bcc.n	100068d6 <__aeabi_uidiv+0xf2>
100067ec:	0903      	lsrs	r3, r0, #4
100067ee:	428b      	cmp	r3, r1
100067f0:	d35f      	bcc.n	100068b2 <__aeabi_uidiv+0xce>
100067f2:	0a03      	lsrs	r3, r0, #8
100067f4:	428b      	cmp	r3, r1
100067f6:	d344      	bcc.n	10006882 <__aeabi_uidiv+0x9e>
100067f8:	0b03      	lsrs	r3, r0, #12
100067fa:	428b      	cmp	r3, r1
100067fc:	d328      	bcc.n	10006850 <__aeabi_uidiv+0x6c>
100067fe:	0c03      	lsrs	r3, r0, #16
10006800:	428b      	cmp	r3, r1
10006802:	d30d      	bcc.n	10006820 <__aeabi_uidiv+0x3c>
10006804:	22ff      	movs	r2, #255	; 0xff
10006806:	0209      	lsls	r1, r1, #8
10006808:	ba12      	rev	r2, r2
1000680a:	0c03      	lsrs	r3, r0, #16
1000680c:	428b      	cmp	r3, r1
1000680e:	d302      	bcc.n	10006816 <__aeabi_uidiv+0x32>
10006810:	1212      	asrs	r2, r2, #8
10006812:	0209      	lsls	r1, r1, #8
10006814:	d065      	beq.n	100068e2 <__aeabi_uidiv+0xfe>
10006816:	0b03      	lsrs	r3, r0, #12
10006818:	428b      	cmp	r3, r1
1000681a:	d319      	bcc.n	10006850 <__aeabi_uidiv+0x6c>
1000681c:	e000      	b.n	10006820 <__aeabi_uidiv+0x3c>
1000681e:	0a09      	lsrs	r1, r1, #8
10006820:	0bc3      	lsrs	r3, r0, #15
10006822:	428b      	cmp	r3, r1
10006824:	d301      	bcc.n	1000682a <__aeabi_uidiv+0x46>
10006826:	03cb      	lsls	r3, r1, #15
10006828:	1ac0      	subs	r0, r0, r3
1000682a:	4152      	adcs	r2, r2
1000682c:	0b83      	lsrs	r3, r0, #14
1000682e:	428b      	cmp	r3, r1
10006830:	d301      	bcc.n	10006836 <__aeabi_uidiv+0x52>
10006832:	038b      	lsls	r3, r1, #14
10006834:	1ac0      	subs	r0, r0, r3
10006836:	4152      	adcs	r2, r2
10006838:	0b43      	lsrs	r3, r0, #13
1000683a:	428b      	cmp	r3, r1
1000683c:	d301      	bcc.n	10006842 <__aeabi_uidiv+0x5e>
1000683e:	034b      	lsls	r3, r1, #13
10006840:	1ac0      	subs	r0, r0, r3
10006842:	4152      	adcs	r2, r2
10006844:	0b03      	lsrs	r3, r0, #12
10006846:	428b      	cmp	r3, r1
10006848:	d301      	bcc.n	1000684e <__aeabi_uidiv+0x6a>
1000684a:	030b      	lsls	r3, r1, #12
1000684c:	1ac0      	subs	r0, r0, r3
1000684e:	4152      	adcs	r2, r2
10006850:	0ac3      	lsrs	r3, r0, #11
10006852:	428b      	cmp	r3, r1
10006854:	d301      	bcc.n	1000685a <__aeabi_uidiv+0x76>
10006856:	02cb      	lsls	r3, r1, #11
10006858:	1ac0      	subs	r0, r0, r3
1000685a:	4152      	adcs	r2, r2
1000685c:	0a83      	lsrs	r3, r0, #10
1000685e:	428b      	cmp	r3, r1
10006860:	d301      	bcc.n	10006866 <__aeabi_uidiv+0x82>
10006862:	028b      	lsls	r3, r1, #10
10006864:	1ac0      	subs	r0, r0, r3
10006866:	4152      	adcs	r2, r2
10006868:	0a43      	lsrs	r3, r0, #9
1000686a:	428b      	cmp	r3, r1
1000686c:	d301      	bcc.n	10006872 <__aeabi_uidiv+0x8e>
1000686e:	024b      	lsls	r3, r1, #9
10006870:	1ac0      	subs	r0, r0, r3
10006872:	4152      	adcs	r2, r2
10006874:	0a03      	lsrs	r3, r0, #8
10006876:	428b      	cmp	r3, r1
10006878:	d301      	bcc.n	1000687e <__aeabi_uidiv+0x9a>
1000687a:	020b      	lsls	r3, r1, #8
1000687c:	1ac0      	subs	r0, r0, r3
1000687e:	4152      	adcs	r2, r2
10006880:	d2cd      	bcs.n	1000681e <__aeabi_uidiv+0x3a>
10006882:	09c3      	lsrs	r3, r0, #7
10006884:	428b      	cmp	r3, r1
10006886:	d301      	bcc.n	1000688c <__aeabi_uidiv+0xa8>
10006888:	01cb      	lsls	r3, r1, #7
1000688a:	1ac0      	subs	r0, r0, r3
1000688c:	4152      	adcs	r2, r2
1000688e:	0983      	lsrs	r3, r0, #6
10006890:	428b      	cmp	r3, r1
10006892:	d301      	bcc.n	10006898 <__aeabi_uidiv+0xb4>
10006894:	018b      	lsls	r3, r1, #6
10006896:	1ac0      	subs	r0, r0, r3
10006898:	4152      	adcs	r2, r2
1000689a:	0943      	lsrs	r3, r0, #5
1000689c:	428b      	cmp	r3, r1
1000689e:	d301      	bcc.n	100068a4 <__aeabi_uidiv+0xc0>
100068a0:	014b      	lsls	r3, r1, #5
100068a2:	1ac0      	subs	r0, r0, r3
100068a4:	4152      	adcs	r2, r2
100068a6:	0903      	lsrs	r3, r0, #4
100068a8:	428b      	cmp	r3, r1
100068aa:	d301      	bcc.n	100068b0 <__aeabi_uidiv+0xcc>
100068ac:	010b      	lsls	r3, r1, #4
100068ae:	1ac0      	subs	r0, r0, r3
100068b0:	4152      	adcs	r2, r2
100068b2:	08c3      	lsrs	r3, r0, #3
100068b4:	428b      	cmp	r3, r1
100068b6:	d301      	bcc.n	100068bc <__aeabi_uidiv+0xd8>
100068b8:	00cb      	lsls	r3, r1, #3
100068ba:	1ac0      	subs	r0, r0, r3
100068bc:	4152      	adcs	r2, r2
100068be:	0883      	lsrs	r3, r0, #2
100068c0:	428b      	cmp	r3, r1
100068c2:	d301      	bcc.n	100068c8 <__aeabi_uidiv+0xe4>
100068c4:	008b      	lsls	r3, r1, #2
100068c6:	1ac0      	subs	r0, r0, r3
100068c8:	4152      	adcs	r2, r2
100068ca:	0843      	lsrs	r3, r0, #1
100068cc:	428b      	cmp	r3, r1
100068ce:	d301      	bcc.n	100068d4 <__aeabi_uidiv+0xf0>
100068d0:	004b      	lsls	r3, r1, #1
100068d2:	1ac0      	subs	r0, r0, r3
100068d4:	4152      	adcs	r2, r2
100068d6:	1a41      	subs	r1, r0, r1
100068d8:	d200      	bcs.n	100068dc <__aeabi_uidiv+0xf8>
100068da:	4601      	mov	r1, r0
100068dc:	4152      	adcs	r2, r2
100068de:	4610      	mov	r0, r2
100068e0:	4770      	bx	lr
100068e2:	e7ff      	b.n	100068e4 <__aeabi_uidiv+0x100>
100068e4:	b501      	push	{r0, lr}
100068e6:	2000      	movs	r0, #0
100068e8:	f000 f8fc 	bl	10006ae4 <__aeabi_idiv0>
100068ec:	bd02      	pop	{r1, pc}
100068ee:	46c0      	nop			; (mov r8, r8)

100068f0 <__aeabi_uidivmod>:
100068f0:	2900      	cmp	r1, #0
100068f2:	d0f7      	beq.n	100068e4 <__aeabi_uidiv+0x100>
100068f4:	b503      	push	{r0, r1, lr}
100068f6:	f7ff ff75 	bl	100067e4 <__aeabi_uidiv>
100068fa:	bc0e      	pop	{r1, r2, r3}
100068fc:	4342      	muls	r2, r0
100068fe:	1a89      	subs	r1, r1, r2
10006900:	4718      	bx	r3
10006902:	46c0      	nop			; (mov r8, r8)

10006904 <__aeabi_idiv>:
10006904:	4603      	mov	r3, r0
10006906:	430b      	orrs	r3, r1
10006908:	d47f      	bmi.n	10006a0a <__aeabi_idiv+0x106>
1000690a:	2200      	movs	r2, #0
1000690c:	0843      	lsrs	r3, r0, #1
1000690e:	428b      	cmp	r3, r1
10006910:	d374      	bcc.n	100069fc <__aeabi_idiv+0xf8>
10006912:	0903      	lsrs	r3, r0, #4
10006914:	428b      	cmp	r3, r1
10006916:	d35f      	bcc.n	100069d8 <__aeabi_idiv+0xd4>
10006918:	0a03      	lsrs	r3, r0, #8
1000691a:	428b      	cmp	r3, r1
1000691c:	d344      	bcc.n	100069a8 <__aeabi_idiv+0xa4>
1000691e:	0b03      	lsrs	r3, r0, #12
10006920:	428b      	cmp	r3, r1
10006922:	d328      	bcc.n	10006976 <__aeabi_idiv+0x72>
10006924:	0c03      	lsrs	r3, r0, #16
10006926:	428b      	cmp	r3, r1
10006928:	d30d      	bcc.n	10006946 <__aeabi_idiv+0x42>
1000692a:	22ff      	movs	r2, #255	; 0xff
1000692c:	0209      	lsls	r1, r1, #8
1000692e:	ba12      	rev	r2, r2
10006930:	0c03      	lsrs	r3, r0, #16
10006932:	428b      	cmp	r3, r1
10006934:	d302      	bcc.n	1000693c <__aeabi_idiv+0x38>
10006936:	1212      	asrs	r2, r2, #8
10006938:	0209      	lsls	r1, r1, #8
1000693a:	d065      	beq.n	10006a08 <__aeabi_idiv+0x104>
1000693c:	0b03      	lsrs	r3, r0, #12
1000693e:	428b      	cmp	r3, r1
10006940:	d319      	bcc.n	10006976 <__aeabi_idiv+0x72>
10006942:	e000      	b.n	10006946 <__aeabi_idiv+0x42>
10006944:	0a09      	lsrs	r1, r1, #8
10006946:	0bc3      	lsrs	r3, r0, #15
10006948:	428b      	cmp	r3, r1
1000694a:	d301      	bcc.n	10006950 <__aeabi_idiv+0x4c>
1000694c:	03cb      	lsls	r3, r1, #15
1000694e:	1ac0      	subs	r0, r0, r3
10006950:	4152      	adcs	r2, r2
10006952:	0b83      	lsrs	r3, r0, #14
10006954:	428b      	cmp	r3, r1
10006956:	d301      	bcc.n	1000695c <__aeabi_idiv+0x58>
10006958:	038b      	lsls	r3, r1, #14
1000695a:	1ac0      	subs	r0, r0, r3
1000695c:	4152      	adcs	r2, r2
1000695e:	0b43      	lsrs	r3, r0, #13
10006960:	428b      	cmp	r3, r1
10006962:	d301      	bcc.n	10006968 <__aeabi_idiv+0x64>
10006964:	034b      	lsls	r3, r1, #13
10006966:	1ac0      	subs	r0, r0, r3
10006968:	4152      	adcs	r2, r2
1000696a:	0b03      	lsrs	r3, r0, #12
1000696c:	428b      	cmp	r3, r1
1000696e:	d301      	bcc.n	10006974 <__aeabi_idiv+0x70>
10006970:	030b      	lsls	r3, r1, #12
10006972:	1ac0      	subs	r0, r0, r3
10006974:	4152      	adcs	r2, r2
10006976:	0ac3      	lsrs	r3, r0, #11
10006978:	428b      	cmp	r3, r1
1000697a:	d301      	bcc.n	10006980 <__aeabi_idiv+0x7c>
1000697c:	02cb      	lsls	r3, r1, #11
1000697e:	1ac0      	subs	r0, r0, r3
10006980:	4152      	adcs	r2, r2
10006982:	0a83      	lsrs	r3, r0, #10
10006984:	428b      	cmp	r3, r1
10006986:	d301      	bcc.n	1000698c <__aeabi_idiv+0x88>
10006988:	028b      	lsls	r3, r1, #10
1000698a:	1ac0      	subs	r0, r0, r3
1000698c:	4152      	adcs	r2, r2
1000698e:	0a43      	lsrs	r3, r0, #9
10006990:	428b      	cmp	r3, r1
10006992:	d301      	bcc.n	10006998 <__aeabi_idiv+0x94>
10006994:	024b      	lsls	r3, r1, #9
10006996:	1ac0      	subs	r0, r0, r3
10006998:	4152      	adcs	r2, r2
1000699a:	0a03      	lsrs	r3, r0, #8
1000699c:	428b      	cmp	r3, r1
1000699e:	d301      	bcc.n	100069a4 <__aeabi_idiv+0xa0>
100069a0:	020b      	lsls	r3, r1, #8
100069a2:	1ac0      	subs	r0, r0, r3
100069a4:	4152      	adcs	r2, r2
100069a6:	d2cd      	bcs.n	10006944 <__aeabi_idiv+0x40>
100069a8:	09c3      	lsrs	r3, r0, #7
100069aa:	428b      	cmp	r3, r1
100069ac:	d301      	bcc.n	100069b2 <__aeabi_idiv+0xae>
100069ae:	01cb      	lsls	r3, r1, #7
100069b0:	1ac0      	subs	r0, r0, r3
100069b2:	4152      	adcs	r2, r2
100069b4:	0983      	lsrs	r3, r0, #6
100069b6:	428b      	cmp	r3, r1
100069b8:	d301      	bcc.n	100069be <__aeabi_idiv+0xba>
100069ba:	018b      	lsls	r3, r1, #6
100069bc:	1ac0      	subs	r0, r0, r3
100069be:	4152      	adcs	r2, r2
100069c0:	0943      	lsrs	r3, r0, #5
100069c2:	428b      	cmp	r3, r1
100069c4:	d301      	bcc.n	100069ca <__aeabi_idiv+0xc6>
100069c6:	014b      	lsls	r3, r1, #5
100069c8:	1ac0      	subs	r0, r0, r3
100069ca:	4152      	adcs	r2, r2
100069cc:	0903      	lsrs	r3, r0, #4
100069ce:	428b      	cmp	r3, r1
100069d0:	d301      	bcc.n	100069d6 <__aeabi_idiv+0xd2>
100069d2:	010b      	lsls	r3, r1, #4
100069d4:	1ac0      	subs	r0, r0, r3
100069d6:	4152      	adcs	r2, r2
100069d8:	08c3      	lsrs	r3, r0, #3
100069da:	428b      	cmp	r3, r1
100069dc:	d301      	bcc.n	100069e2 <__aeabi_idiv+0xde>
100069de:	00cb      	lsls	r3, r1, #3
100069e0:	1ac0      	subs	r0, r0, r3
100069e2:	4152      	adcs	r2, r2
100069e4:	0883      	lsrs	r3, r0, #2
100069e6:	428b      	cmp	r3, r1
100069e8:	d301      	bcc.n	100069ee <__aeabi_idiv+0xea>
100069ea:	008b      	lsls	r3, r1, #2
100069ec:	1ac0      	subs	r0, r0, r3
100069ee:	4152      	adcs	r2, r2
100069f0:	0843      	lsrs	r3, r0, #1
100069f2:	428b      	cmp	r3, r1
100069f4:	d301      	bcc.n	100069fa <__aeabi_idiv+0xf6>
100069f6:	004b      	lsls	r3, r1, #1
100069f8:	1ac0      	subs	r0, r0, r3
100069fa:	4152      	adcs	r2, r2
100069fc:	1a41      	subs	r1, r0, r1
100069fe:	d200      	bcs.n	10006a02 <__aeabi_idiv+0xfe>
10006a00:	4601      	mov	r1, r0
10006a02:	4152      	adcs	r2, r2
10006a04:	4610      	mov	r0, r2
10006a06:	4770      	bx	lr
10006a08:	e05d      	b.n	10006ac6 <__aeabi_idiv+0x1c2>
10006a0a:	0fca      	lsrs	r2, r1, #31
10006a0c:	d000      	beq.n	10006a10 <__aeabi_idiv+0x10c>
10006a0e:	4249      	negs	r1, r1
10006a10:	1003      	asrs	r3, r0, #32
10006a12:	d300      	bcc.n	10006a16 <__aeabi_idiv+0x112>
10006a14:	4240      	negs	r0, r0
10006a16:	4053      	eors	r3, r2
10006a18:	2200      	movs	r2, #0
10006a1a:	469c      	mov	ip, r3
10006a1c:	0903      	lsrs	r3, r0, #4
10006a1e:	428b      	cmp	r3, r1
10006a20:	d32d      	bcc.n	10006a7e <__aeabi_idiv+0x17a>
10006a22:	0a03      	lsrs	r3, r0, #8
10006a24:	428b      	cmp	r3, r1
10006a26:	d312      	bcc.n	10006a4e <__aeabi_idiv+0x14a>
10006a28:	22fc      	movs	r2, #252	; 0xfc
10006a2a:	0189      	lsls	r1, r1, #6
10006a2c:	ba12      	rev	r2, r2
10006a2e:	0a03      	lsrs	r3, r0, #8
10006a30:	428b      	cmp	r3, r1
10006a32:	d30c      	bcc.n	10006a4e <__aeabi_idiv+0x14a>
10006a34:	0189      	lsls	r1, r1, #6
10006a36:	1192      	asrs	r2, r2, #6
10006a38:	428b      	cmp	r3, r1
10006a3a:	d308      	bcc.n	10006a4e <__aeabi_idiv+0x14a>
10006a3c:	0189      	lsls	r1, r1, #6
10006a3e:	1192      	asrs	r2, r2, #6
10006a40:	428b      	cmp	r3, r1
10006a42:	d304      	bcc.n	10006a4e <__aeabi_idiv+0x14a>
10006a44:	0189      	lsls	r1, r1, #6
10006a46:	d03a      	beq.n	10006abe <__aeabi_idiv+0x1ba>
10006a48:	1192      	asrs	r2, r2, #6
10006a4a:	e000      	b.n	10006a4e <__aeabi_idiv+0x14a>
10006a4c:	0989      	lsrs	r1, r1, #6
10006a4e:	09c3      	lsrs	r3, r0, #7
10006a50:	428b      	cmp	r3, r1
10006a52:	d301      	bcc.n	10006a58 <__aeabi_idiv+0x154>
10006a54:	01cb      	lsls	r3, r1, #7
10006a56:	1ac0      	subs	r0, r0, r3
10006a58:	4152      	adcs	r2, r2
10006a5a:	0983      	lsrs	r3, r0, #6
10006a5c:	428b      	cmp	r3, r1
10006a5e:	d301      	bcc.n	10006a64 <__aeabi_idiv+0x160>
10006a60:	018b      	lsls	r3, r1, #6
10006a62:	1ac0      	subs	r0, r0, r3
10006a64:	4152      	adcs	r2, r2
10006a66:	0943      	lsrs	r3, r0, #5
10006a68:	428b      	cmp	r3, r1
10006a6a:	d301      	bcc.n	10006a70 <__aeabi_idiv+0x16c>
10006a6c:	014b      	lsls	r3, r1, #5
10006a6e:	1ac0      	subs	r0, r0, r3
10006a70:	4152      	adcs	r2, r2
10006a72:	0903      	lsrs	r3, r0, #4
10006a74:	428b      	cmp	r3, r1
10006a76:	d301      	bcc.n	10006a7c <__aeabi_idiv+0x178>
10006a78:	010b      	lsls	r3, r1, #4
10006a7a:	1ac0      	subs	r0, r0, r3
10006a7c:	4152      	adcs	r2, r2
10006a7e:	08c3      	lsrs	r3, r0, #3
10006a80:	428b      	cmp	r3, r1
10006a82:	d301      	bcc.n	10006a88 <__aeabi_idiv+0x184>
10006a84:	00cb      	lsls	r3, r1, #3
10006a86:	1ac0      	subs	r0, r0, r3
10006a88:	4152      	adcs	r2, r2
10006a8a:	0883      	lsrs	r3, r0, #2
10006a8c:	428b      	cmp	r3, r1
10006a8e:	d301      	bcc.n	10006a94 <__aeabi_idiv+0x190>
10006a90:	008b      	lsls	r3, r1, #2
10006a92:	1ac0      	subs	r0, r0, r3
10006a94:	4152      	adcs	r2, r2
10006a96:	d2d9      	bcs.n	10006a4c <__aeabi_idiv+0x148>
10006a98:	0843      	lsrs	r3, r0, #1
10006a9a:	428b      	cmp	r3, r1
10006a9c:	d301      	bcc.n	10006aa2 <__aeabi_idiv+0x19e>
10006a9e:	004b      	lsls	r3, r1, #1
10006aa0:	1ac0      	subs	r0, r0, r3
10006aa2:	4152      	adcs	r2, r2
10006aa4:	1a41      	subs	r1, r0, r1
10006aa6:	d200      	bcs.n	10006aaa <__aeabi_idiv+0x1a6>
10006aa8:	4601      	mov	r1, r0
10006aaa:	4663      	mov	r3, ip
10006aac:	4152      	adcs	r2, r2
10006aae:	105b      	asrs	r3, r3, #1
10006ab0:	4610      	mov	r0, r2
10006ab2:	d301      	bcc.n	10006ab8 <__aeabi_idiv+0x1b4>
10006ab4:	4240      	negs	r0, r0
10006ab6:	2b00      	cmp	r3, #0
10006ab8:	d500      	bpl.n	10006abc <__aeabi_idiv+0x1b8>
10006aba:	4249      	negs	r1, r1
10006abc:	4770      	bx	lr
10006abe:	4663      	mov	r3, ip
10006ac0:	105b      	asrs	r3, r3, #1
10006ac2:	d300      	bcc.n	10006ac6 <__aeabi_idiv+0x1c2>
10006ac4:	4240      	negs	r0, r0
10006ac6:	b501      	push	{r0, lr}
10006ac8:	2000      	movs	r0, #0
10006aca:	f000 f80b 	bl	10006ae4 <__aeabi_idiv0>
10006ace:	bd02      	pop	{r1, pc}

10006ad0 <__aeabi_idivmod>:
10006ad0:	2900      	cmp	r1, #0
10006ad2:	d0f8      	beq.n	10006ac6 <__aeabi_idiv+0x1c2>
10006ad4:	b503      	push	{r0, r1, lr}
10006ad6:	f7ff ff15 	bl	10006904 <__aeabi_idiv>
10006ada:	bc0e      	pop	{r1, r2, r3}
10006adc:	4342      	muls	r2, r0
10006ade:	1a89      	subs	r1, r1, r2
10006ae0:	4718      	bx	r3
10006ae2:	46c0      	nop			; (mov r8, r8)

10006ae4 <__aeabi_idiv0>:
10006ae4:	4770      	bx	lr
10006ae6:	46c0      	nop			; (mov r8, r8)

10006ae8 <__aeabi_cdrcmple>:
10006ae8:	4684      	mov	ip, r0
10006aea:	1c10      	adds	r0, r2, #0
10006aec:	4662      	mov	r2, ip
10006aee:	468c      	mov	ip, r1
10006af0:	1c19      	adds	r1, r3, #0
10006af2:	4663      	mov	r3, ip
10006af4:	e000      	b.n	10006af8 <__aeabi_cdcmpeq>
10006af6:	46c0      	nop			; (mov r8, r8)

10006af8 <__aeabi_cdcmpeq>:
10006af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006afa:	f001 f833 	bl	10007b64 <__ledf2>
10006afe:	2800      	cmp	r0, #0
10006b00:	d401      	bmi.n	10006b06 <__aeabi_cdcmpeq+0xe>
10006b02:	2100      	movs	r1, #0
10006b04:	42c8      	cmn	r0, r1
10006b06:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10006b08 <__aeabi_dcmpeq>:
10006b08:	b510      	push	{r4, lr}
10006b0a:	f000 ff77 	bl	100079fc <__eqdf2>
10006b0e:	4240      	negs	r0, r0
10006b10:	3001      	adds	r0, #1
10006b12:	bd10      	pop	{r4, pc}

10006b14 <__aeabi_dcmplt>:
10006b14:	b510      	push	{r4, lr}
10006b16:	f001 f825 	bl	10007b64 <__ledf2>
10006b1a:	2800      	cmp	r0, #0
10006b1c:	db01      	blt.n	10006b22 <__aeabi_dcmplt+0xe>
10006b1e:	2000      	movs	r0, #0
10006b20:	bd10      	pop	{r4, pc}
10006b22:	2001      	movs	r0, #1
10006b24:	bd10      	pop	{r4, pc}
10006b26:	46c0      	nop			; (mov r8, r8)

10006b28 <__aeabi_dcmple>:
10006b28:	b510      	push	{r4, lr}
10006b2a:	f001 f81b 	bl	10007b64 <__ledf2>
10006b2e:	2800      	cmp	r0, #0
10006b30:	dd01      	ble.n	10006b36 <__aeabi_dcmple+0xe>
10006b32:	2000      	movs	r0, #0
10006b34:	bd10      	pop	{r4, pc}
10006b36:	2001      	movs	r0, #1
10006b38:	bd10      	pop	{r4, pc}
10006b3a:	46c0      	nop			; (mov r8, r8)

10006b3c <__aeabi_dcmpgt>:
10006b3c:	b510      	push	{r4, lr}
10006b3e:	f000 ffa1 	bl	10007a84 <__gedf2>
10006b42:	2800      	cmp	r0, #0
10006b44:	dc01      	bgt.n	10006b4a <__aeabi_dcmpgt+0xe>
10006b46:	2000      	movs	r0, #0
10006b48:	bd10      	pop	{r4, pc}
10006b4a:	2001      	movs	r0, #1
10006b4c:	bd10      	pop	{r4, pc}
10006b4e:	46c0      	nop			; (mov r8, r8)

10006b50 <__aeabi_dcmpge>:
10006b50:	b510      	push	{r4, lr}
10006b52:	f000 ff97 	bl	10007a84 <__gedf2>
10006b56:	2800      	cmp	r0, #0
10006b58:	da01      	bge.n	10006b5e <__aeabi_dcmpge+0xe>
10006b5a:	2000      	movs	r0, #0
10006b5c:	bd10      	pop	{r4, pc}
10006b5e:	2001      	movs	r0, #1
10006b60:	bd10      	pop	{r4, pc}
10006b62:	46c0      	nop			; (mov r8, r8)

10006b64 <__aeabi_cfrcmple>:
10006b64:	4684      	mov	ip, r0
10006b66:	1c08      	adds	r0, r1, #0
10006b68:	4661      	mov	r1, ip
10006b6a:	e7ff      	b.n	10006b6c <__aeabi_cfcmpeq>

10006b6c <__aeabi_cfcmpeq>:
10006b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006b6e:	f000 f8bf 	bl	10006cf0 <__lesf2>
10006b72:	2800      	cmp	r0, #0
10006b74:	d401      	bmi.n	10006b7a <__aeabi_cfcmpeq+0xe>
10006b76:	2100      	movs	r1, #0
10006b78:	42c8      	cmn	r0, r1
10006b7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10006b7c <__aeabi_fcmpeq>:
10006b7c:	b510      	push	{r4, lr}
10006b7e:	f000 f843 	bl	10006c08 <__eqsf2>
10006b82:	4240      	negs	r0, r0
10006b84:	3001      	adds	r0, #1
10006b86:	bd10      	pop	{r4, pc}

10006b88 <__aeabi_fcmplt>:
10006b88:	b510      	push	{r4, lr}
10006b8a:	f000 f8b1 	bl	10006cf0 <__lesf2>
10006b8e:	2800      	cmp	r0, #0
10006b90:	db01      	blt.n	10006b96 <__aeabi_fcmplt+0xe>
10006b92:	2000      	movs	r0, #0
10006b94:	bd10      	pop	{r4, pc}
10006b96:	2001      	movs	r0, #1
10006b98:	bd10      	pop	{r4, pc}
10006b9a:	46c0      	nop			; (mov r8, r8)

10006b9c <__aeabi_fcmple>:
10006b9c:	b510      	push	{r4, lr}
10006b9e:	f000 f8a7 	bl	10006cf0 <__lesf2>
10006ba2:	2800      	cmp	r0, #0
10006ba4:	dd01      	ble.n	10006baa <__aeabi_fcmple+0xe>
10006ba6:	2000      	movs	r0, #0
10006ba8:	bd10      	pop	{r4, pc}
10006baa:	2001      	movs	r0, #1
10006bac:	bd10      	pop	{r4, pc}
10006bae:	46c0      	nop			; (mov r8, r8)

10006bb0 <__aeabi_fcmpgt>:
10006bb0:	b510      	push	{r4, lr}
10006bb2:	f000 f853 	bl	10006c5c <__gesf2>
10006bb6:	2800      	cmp	r0, #0
10006bb8:	dc01      	bgt.n	10006bbe <__aeabi_fcmpgt+0xe>
10006bba:	2000      	movs	r0, #0
10006bbc:	bd10      	pop	{r4, pc}
10006bbe:	2001      	movs	r0, #1
10006bc0:	bd10      	pop	{r4, pc}
10006bc2:	46c0      	nop			; (mov r8, r8)

10006bc4 <__aeabi_fcmpge>:
10006bc4:	b510      	push	{r4, lr}
10006bc6:	f000 f849 	bl	10006c5c <__gesf2>
10006bca:	2800      	cmp	r0, #0
10006bcc:	da01      	bge.n	10006bd2 <__aeabi_fcmpge+0xe>
10006bce:	2000      	movs	r0, #0
10006bd0:	bd10      	pop	{r4, pc}
10006bd2:	2001      	movs	r0, #1
10006bd4:	bd10      	pop	{r4, pc}
10006bd6:	46c0      	nop			; (mov r8, r8)

10006bd8 <__aeabi_f2uiz>:
10006bd8:	219e      	movs	r1, #158	; 0x9e
10006bda:	b510      	push	{r4, lr}
10006bdc:	05c9      	lsls	r1, r1, #23
10006bde:	1c04      	adds	r4, r0, #0
10006be0:	f7ff fff0 	bl	10006bc4 <__aeabi_fcmpge>
10006be4:	2800      	cmp	r0, #0
10006be6:	d103      	bne.n	10006bf0 <__aeabi_f2uiz+0x18>
10006be8:	1c20      	adds	r0, r4, #0
10006bea:	f000 fb77 	bl	100072dc <__aeabi_f2iz>
10006bee:	bd10      	pop	{r4, pc}
10006bf0:	219e      	movs	r1, #158	; 0x9e
10006bf2:	1c20      	adds	r0, r4, #0
10006bf4:	05c9      	lsls	r1, r1, #23
10006bf6:	f000 f9f3 	bl	10006fe0 <__aeabi_fsub>
10006bfa:	f000 fb6f 	bl	100072dc <__aeabi_f2iz>
10006bfe:	2380      	movs	r3, #128	; 0x80
10006c00:	061b      	lsls	r3, r3, #24
10006c02:	469c      	mov	ip, r3
10006c04:	4460      	add	r0, ip
10006c06:	e7f2      	b.n	10006bee <__aeabi_f2uiz+0x16>

10006c08 <__eqsf2>:
10006c08:	0243      	lsls	r3, r0, #9
10006c0a:	b570      	push	{r4, r5, r6, lr}
10006c0c:	0042      	lsls	r2, r0, #1
10006c0e:	004c      	lsls	r4, r1, #1
10006c10:	0a5d      	lsrs	r5, r3, #9
10006c12:	0fc3      	lsrs	r3, r0, #31
10006c14:	0248      	lsls	r0, r1, #9
10006c16:	0e12      	lsrs	r2, r2, #24
10006c18:	0a46      	lsrs	r6, r0, #9
10006c1a:	0e24      	lsrs	r4, r4, #24
10006c1c:	0fc9      	lsrs	r1, r1, #31
10006c1e:	2aff      	cmp	r2, #255	; 0xff
10006c20:	d005      	beq.n	10006c2e <__eqsf2+0x26>
10006c22:	2cff      	cmp	r4, #255	; 0xff
10006c24:	d008      	beq.n	10006c38 <__eqsf2+0x30>
10006c26:	2001      	movs	r0, #1
10006c28:	42a2      	cmp	r2, r4
10006c2a:	d00b      	beq.n	10006c44 <__eqsf2+0x3c>
10006c2c:	bd70      	pop	{r4, r5, r6, pc}
10006c2e:	2001      	movs	r0, #1
10006c30:	2d00      	cmp	r5, #0
10006c32:	d1fb      	bne.n	10006c2c <__eqsf2+0x24>
10006c34:	2cff      	cmp	r4, #255	; 0xff
10006c36:	d1f6      	bne.n	10006c26 <__eqsf2+0x1e>
10006c38:	2001      	movs	r0, #1
10006c3a:	2e00      	cmp	r6, #0
10006c3c:	d1f6      	bne.n	10006c2c <__eqsf2+0x24>
10006c3e:	2001      	movs	r0, #1
10006c40:	42a2      	cmp	r2, r4
10006c42:	d1f3      	bne.n	10006c2c <__eqsf2+0x24>
10006c44:	42b5      	cmp	r5, r6
10006c46:	d1f1      	bne.n	10006c2c <__eqsf2+0x24>
10006c48:	428b      	cmp	r3, r1
10006c4a:	d005      	beq.n	10006c58 <__eqsf2+0x50>
10006c4c:	2a00      	cmp	r2, #0
10006c4e:	d1ed      	bne.n	10006c2c <__eqsf2+0x24>
10006c50:	1c28      	adds	r0, r5, #0
10006c52:	1e43      	subs	r3, r0, #1
10006c54:	4198      	sbcs	r0, r3
10006c56:	e7e9      	b.n	10006c2c <__eqsf2+0x24>
10006c58:	2000      	movs	r0, #0
10006c5a:	e7e7      	b.n	10006c2c <__eqsf2+0x24>

10006c5c <__gesf2>:
10006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10006c5e:	0243      	lsls	r3, r0, #9
10006c60:	024d      	lsls	r5, r1, #9
10006c62:	004a      	lsls	r2, r1, #1
10006c64:	0044      	lsls	r4, r0, #1
10006c66:	0a5e      	lsrs	r6, r3, #9
10006c68:	0e24      	lsrs	r4, r4, #24
10006c6a:	0fc3      	lsrs	r3, r0, #31
10006c6c:	0a6d      	lsrs	r5, r5, #9
10006c6e:	0e12      	lsrs	r2, r2, #24
10006c70:	0fc9      	lsrs	r1, r1, #31
10006c72:	2cff      	cmp	r4, #255	; 0xff
10006c74:	d00d      	beq.n	10006c92 <__gesf2+0x36>
10006c76:	2aff      	cmp	r2, #255	; 0xff
10006c78:	d031      	beq.n	10006cde <__gesf2+0x82>
10006c7a:	2c00      	cmp	r4, #0
10006c7c:	d10d      	bne.n	10006c9a <__gesf2+0x3e>
10006c7e:	4277      	negs	r7, r6
10006c80:	4177      	adcs	r7, r6
10006c82:	2a00      	cmp	r2, #0
10006c84:	d123      	bne.n	10006cce <__gesf2+0x72>
10006c86:	2d00      	cmp	r5, #0
10006c88:	d121      	bne.n	10006cce <__gesf2+0x72>
10006c8a:	2000      	movs	r0, #0
10006c8c:	2f00      	cmp	r7, #0
10006c8e:	d10b      	bne.n	10006ca8 <__gesf2+0x4c>
10006c90:	e007      	b.n	10006ca2 <__gesf2+0x46>
10006c92:	2e00      	cmp	r6, #0
10006c94:	d128      	bne.n	10006ce8 <__gesf2+0x8c>
10006c96:	2aff      	cmp	r2, #255	; 0xff
10006c98:	d021      	beq.n	10006cde <__gesf2+0x82>
10006c9a:	2a00      	cmp	r2, #0
10006c9c:	d005      	beq.n	10006caa <__gesf2+0x4e>
10006c9e:	428b      	cmp	r3, r1
10006ca0:	d007      	beq.n	10006cb2 <__gesf2+0x56>
10006ca2:	4258      	negs	r0, r3
10006ca4:	2301      	movs	r3, #1
10006ca6:	4318      	orrs	r0, r3
10006ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006caa:	2d00      	cmp	r5, #0
10006cac:	d0f9      	beq.n	10006ca2 <__gesf2+0x46>
10006cae:	428b      	cmp	r3, r1
10006cb0:	d1f7      	bne.n	10006ca2 <__gesf2+0x46>
10006cb2:	4294      	cmp	r4, r2
10006cb4:	dcf5      	bgt.n	10006ca2 <__gesf2+0x46>
10006cb6:	db04      	blt.n	10006cc2 <__gesf2+0x66>
10006cb8:	42ae      	cmp	r6, r5
10006cba:	d8f2      	bhi.n	10006ca2 <__gesf2+0x46>
10006cbc:	2000      	movs	r0, #0
10006cbe:	42ae      	cmp	r6, r5
10006cc0:	d2f2      	bcs.n	10006ca8 <__gesf2+0x4c>
10006cc2:	4258      	negs	r0, r3
10006cc4:	4143      	adcs	r3, r0
10006cc6:	2001      	movs	r0, #1
10006cc8:	425b      	negs	r3, r3
10006cca:	4318      	orrs	r0, r3
10006ccc:	e7ec      	b.n	10006ca8 <__gesf2+0x4c>
10006cce:	2f00      	cmp	r7, #0
10006cd0:	d0e5      	beq.n	10006c9e <__gesf2+0x42>
10006cd2:	4248      	negs	r0, r1
10006cd4:	4141      	adcs	r1, r0
10006cd6:	2001      	movs	r0, #1
10006cd8:	4249      	negs	r1, r1
10006cda:	4308      	orrs	r0, r1
10006cdc:	e7e4      	b.n	10006ca8 <__gesf2+0x4c>
10006cde:	2d00      	cmp	r5, #0
10006ce0:	d102      	bne.n	10006ce8 <__gesf2+0x8c>
10006ce2:	2c00      	cmp	r4, #0
10006ce4:	d0cb      	beq.n	10006c7e <__gesf2+0x22>
10006ce6:	e7da      	b.n	10006c9e <__gesf2+0x42>
10006ce8:	2002      	movs	r0, #2
10006cea:	4240      	negs	r0, r0
10006cec:	e7dc      	b.n	10006ca8 <__gesf2+0x4c>
10006cee:	46c0      	nop			; (mov r8, r8)

10006cf0 <__lesf2>:
10006cf0:	0243      	lsls	r3, r0, #9
10006cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
10006cf4:	0042      	lsls	r2, r0, #1
10006cf6:	004c      	lsls	r4, r1, #1
10006cf8:	0a5e      	lsrs	r6, r3, #9
10006cfa:	0fc3      	lsrs	r3, r0, #31
10006cfc:	0248      	lsls	r0, r1, #9
10006cfe:	0e12      	lsrs	r2, r2, #24
10006d00:	0a45      	lsrs	r5, r0, #9
10006d02:	0e24      	lsrs	r4, r4, #24
10006d04:	0fc9      	lsrs	r1, r1, #31
10006d06:	2aff      	cmp	r2, #255	; 0xff
10006d08:	d00f      	beq.n	10006d2a <__lesf2+0x3a>
10006d0a:	2cff      	cmp	r4, #255	; 0xff
10006d0c:	d01a      	beq.n	10006d44 <__lesf2+0x54>
10006d0e:	2a00      	cmp	r2, #0
10006d10:	d110      	bne.n	10006d34 <__lesf2+0x44>
10006d12:	4277      	negs	r7, r6
10006d14:	4177      	adcs	r7, r6
10006d16:	2c00      	cmp	r4, #0
10006d18:	d029      	beq.n	10006d6e <__lesf2+0x7e>
10006d1a:	2f00      	cmp	r7, #0
10006d1c:	d017      	beq.n	10006d4e <__lesf2+0x5e>
10006d1e:	4248      	negs	r0, r1
10006d20:	4141      	adcs	r1, r0
10006d22:	2001      	movs	r0, #1
10006d24:	4249      	negs	r1, r1
10006d26:	4308      	orrs	r0, r1
10006d28:	e00b      	b.n	10006d42 <__lesf2+0x52>
10006d2a:	2002      	movs	r0, #2
10006d2c:	2e00      	cmp	r6, #0
10006d2e:	d108      	bne.n	10006d42 <__lesf2+0x52>
10006d30:	2cff      	cmp	r4, #255	; 0xff
10006d32:	d007      	beq.n	10006d44 <__lesf2+0x54>
10006d34:	2c00      	cmp	r4, #0
10006d36:	d10a      	bne.n	10006d4e <__lesf2+0x5e>
10006d38:	2d00      	cmp	r5, #0
10006d3a:	d108      	bne.n	10006d4e <__lesf2+0x5e>
10006d3c:	4258      	negs	r0, r3
10006d3e:	2301      	movs	r3, #1
10006d40:	4318      	orrs	r0, r3
10006d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006d44:	2002      	movs	r0, #2
10006d46:	2d00      	cmp	r5, #0
10006d48:	d1fb      	bne.n	10006d42 <__lesf2+0x52>
10006d4a:	2a00      	cmp	r2, #0
10006d4c:	d0e1      	beq.n	10006d12 <__lesf2+0x22>
10006d4e:	428b      	cmp	r3, r1
10006d50:	d1f4      	bne.n	10006d3c <__lesf2+0x4c>
10006d52:	42a2      	cmp	r2, r4
10006d54:	dcf2      	bgt.n	10006d3c <__lesf2+0x4c>
10006d56:	db04      	blt.n	10006d62 <__lesf2+0x72>
10006d58:	42ae      	cmp	r6, r5
10006d5a:	d8ef      	bhi.n	10006d3c <__lesf2+0x4c>
10006d5c:	2000      	movs	r0, #0
10006d5e:	42ae      	cmp	r6, r5
10006d60:	d2ef      	bcs.n	10006d42 <__lesf2+0x52>
10006d62:	4258      	negs	r0, r3
10006d64:	4143      	adcs	r3, r0
10006d66:	2001      	movs	r0, #1
10006d68:	425b      	negs	r3, r3
10006d6a:	4318      	orrs	r0, r3
10006d6c:	e7e9      	b.n	10006d42 <__lesf2+0x52>
10006d6e:	2d00      	cmp	r5, #0
10006d70:	d1d3      	bne.n	10006d1a <__lesf2+0x2a>
10006d72:	2000      	movs	r0, #0
10006d74:	2f00      	cmp	r7, #0
10006d76:	d1e4      	bne.n	10006d42 <__lesf2+0x52>
10006d78:	e7e0      	b.n	10006d3c <__lesf2+0x4c>
10006d7a:	46c0      	nop			; (mov r8, r8)

10006d7c <__aeabi_fmul>:
10006d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10006d7e:	465f      	mov	r7, fp
10006d80:	4656      	mov	r6, sl
10006d82:	464d      	mov	r5, r9
10006d84:	4644      	mov	r4, r8
10006d86:	b4f0      	push	{r4, r5, r6, r7}
10006d88:	0245      	lsls	r5, r0, #9
10006d8a:	0046      	lsls	r6, r0, #1
10006d8c:	0fc4      	lsrs	r4, r0, #31
10006d8e:	b083      	sub	sp, #12
10006d90:	1c0f      	adds	r7, r1, #0
10006d92:	0a6d      	lsrs	r5, r5, #9
10006d94:	0e36      	lsrs	r6, r6, #24
10006d96:	46a3      	mov	fp, r4
10006d98:	d045      	beq.n	10006e26 <__aeabi_fmul+0xaa>
10006d9a:	2eff      	cmp	r6, #255	; 0xff
10006d9c:	d025      	beq.n	10006dea <__aeabi_fmul+0x6e>
10006d9e:	2380      	movs	r3, #128	; 0x80
10006da0:	041b      	lsls	r3, r3, #16
10006da2:	431d      	orrs	r5, r3
10006da4:	2300      	movs	r3, #0
10006da6:	469a      	mov	sl, r3
10006da8:	00ed      	lsls	r5, r5, #3
10006daa:	3e7f      	subs	r6, #127	; 0x7f
10006dac:	9301      	str	r3, [sp, #4]
10006dae:	027b      	lsls	r3, r7, #9
10006db0:	0a5b      	lsrs	r3, r3, #9
10006db2:	4698      	mov	r8, r3
10006db4:	0078      	lsls	r0, r7, #1
10006db6:	0ffb      	lsrs	r3, r7, #31
10006db8:	0e00      	lsrs	r0, r0, #24
10006dba:	4699      	mov	r9, r3
10006dbc:	d040      	beq.n	10006e40 <__aeabi_fmul+0xc4>
10006dbe:	28ff      	cmp	r0, #255	; 0xff
10006dc0:	d038      	beq.n	10006e34 <__aeabi_fmul+0xb8>
10006dc2:	2380      	movs	r3, #128	; 0x80
10006dc4:	4642      	mov	r2, r8
10006dc6:	041b      	lsls	r3, r3, #16
10006dc8:	4313      	orrs	r3, r2
10006dca:	00db      	lsls	r3, r3, #3
10006dcc:	4698      	mov	r8, r3
10006dce:	2300      	movs	r3, #0
10006dd0:	387f      	subs	r0, #127	; 0x7f
10006dd2:	464a      	mov	r2, r9
10006dd4:	9f01      	ldr	r7, [sp, #4]
10006dd6:	1830      	adds	r0, r6, r0
10006dd8:	4062      	eors	r2, r4
10006dda:	1c41      	adds	r1, r0, #1
10006ddc:	431f      	orrs	r7, r3
10006dde:	2f0f      	cmp	r7, #15
10006de0:	d869      	bhi.n	10006eb6 <__aeabi_fmul+0x13a>
10006de2:	4e7d      	ldr	r6, [pc, #500]	; (10006fd8 <__aeabi_fmul+0x25c>)
10006de4:	00bf      	lsls	r7, r7, #2
10006de6:	59f6      	ldr	r6, [r6, r7]
10006de8:	46b7      	mov	pc, r6
10006dea:	2d00      	cmp	r5, #0
10006dec:	d145      	bne.n	10006e7a <__aeabi_fmul+0xfe>
10006dee:	2308      	movs	r3, #8
10006df0:	9301      	str	r3, [sp, #4]
10006df2:	3b06      	subs	r3, #6
10006df4:	469a      	mov	sl, r3
10006df6:	e7da      	b.n	10006dae <__aeabi_fmul+0x32>
10006df8:	4693      	mov	fp, r2
10006dfa:	4653      	mov	r3, sl
10006dfc:	2b02      	cmp	r3, #2
10006dfe:	d12f      	bne.n	10006e60 <__aeabi_fmul+0xe4>
10006e00:	465b      	mov	r3, fp
10006e02:	2401      	movs	r4, #1
10006e04:	2500      	movs	r5, #0
10006e06:	401c      	ands	r4, r3
10006e08:	23ff      	movs	r3, #255	; 0xff
10006e0a:	026d      	lsls	r5, r5, #9
10006e0c:	05db      	lsls	r3, r3, #23
10006e0e:	0a6d      	lsrs	r5, r5, #9
10006e10:	07e4      	lsls	r4, r4, #31
10006e12:	431d      	orrs	r5, r3
10006e14:	4325      	orrs	r5, r4
10006e16:	1c28      	adds	r0, r5, #0
10006e18:	b003      	add	sp, #12
10006e1a:	bc3c      	pop	{r2, r3, r4, r5}
10006e1c:	4690      	mov	r8, r2
10006e1e:	4699      	mov	r9, r3
10006e20:	46a2      	mov	sl, r4
10006e22:	46ab      	mov	fp, r5
10006e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006e26:	2d00      	cmp	r5, #0
10006e28:	d12c      	bne.n	10006e84 <__aeabi_fmul+0x108>
10006e2a:	2304      	movs	r3, #4
10006e2c:	9301      	str	r3, [sp, #4]
10006e2e:	3b03      	subs	r3, #3
10006e30:	469a      	mov	sl, r3
10006e32:	e7bc      	b.n	10006dae <__aeabi_fmul+0x32>
10006e34:	4643      	mov	r3, r8
10006e36:	425a      	negs	r2, r3
10006e38:	4153      	adcs	r3, r2
10006e3a:	2203      	movs	r2, #3
10006e3c:	1ad3      	subs	r3, r2, r3
10006e3e:	e7c8      	b.n	10006dd2 <__aeabi_fmul+0x56>
10006e40:	4642      	mov	r2, r8
10006e42:	2301      	movs	r3, #1
10006e44:	2a00      	cmp	r2, #0
10006e46:	d0c4      	beq.n	10006dd2 <__aeabi_fmul+0x56>
10006e48:	4640      	mov	r0, r8
10006e4a:	f001 fe57 	bl	10008afc <__clzsi2>
10006e4e:	4642      	mov	r2, r8
10006e50:	1f43      	subs	r3, r0, #5
10006e52:	409a      	lsls	r2, r3
10006e54:	2376      	movs	r3, #118	; 0x76
10006e56:	425b      	negs	r3, r3
10006e58:	1a18      	subs	r0, r3, r0
10006e5a:	4690      	mov	r8, r2
10006e5c:	2300      	movs	r3, #0
10006e5e:	e7b8      	b.n	10006dd2 <__aeabi_fmul+0x56>
10006e60:	2b03      	cmp	r3, #3
10006e62:	d100      	bne.n	10006e66 <__aeabi_fmul+0xea>
10006e64:	e0ad      	b.n	10006fc2 <__aeabi_fmul+0x246>
10006e66:	2b01      	cmp	r3, #1
10006e68:	d000      	beq.n	10006e6c <__aeabi_fmul+0xf0>
10006e6a:	e08c      	b.n	10006f86 <__aeabi_fmul+0x20a>
10006e6c:	465b      	mov	r3, fp
10006e6e:	4654      	mov	r4, sl
10006e70:	401c      	ands	r4, r3
10006e72:	b2e4      	uxtb	r4, r4
10006e74:	2300      	movs	r3, #0
10006e76:	2500      	movs	r5, #0
10006e78:	e7c7      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006e7a:	230c      	movs	r3, #12
10006e7c:	9301      	str	r3, [sp, #4]
10006e7e:	3b09      	subs	r3, #9
10006e80:	469a      	mov	sl, r3
10006e82:	e794      	b.n	10006dae <__aeabi_fmul+0x32>
10006e84:	1c28      	adds	r0, r5, #0
10006e86:	f001 fe39 	bl	10008afc <__clzsi2>
10006e8a:	2676      	movs	r6, #118	; 0x76
10006e8c:	1f43      	subs	r3, r0, #5
10006e8e:	409d      	lsls	r5, r3
10006e90:	2300      	movs	r3, #0
10006e92:	4276      	negs	r6, r6
10006e94:	1a36      	subs	r6, r6, r0
10006e96:	9301      	str	r3, [sp, #4]
10006e98:	469a      	mov	sl, r3
10006e9a:	e788      	b.n	10006dae <__aeabi_fmul+0x32>
10006e9c:	2580      	movs	r5, #128	; 0x80
10006e9e:	2400      	movs	r4, #0
10006ea0:	03ed      	lsls	r5, r5, #15
10006ea2:	23ff      	movs	r3, #255	; 0xff
10006ea4:	e7b1      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006ea6:	4645      	mov	r5, r8
10006ea8:	46cb      	mov	fp, r9
10006eaa:	469a      	mov	sl, r3
10006eac:	e7a5      	b.n	10006dfa <__aeabi_fmul+0x7e>
10006eae:	4645      	mov	r5, r8
10006eb0:	4693      	mov	fp, r2
10006eb2:	469a      	mov	sl, r3
10006eb4:	e7a1      	b.n	10006dfa <__aeabi_fmul+0x7e>
10006eb6:	4643      	mov	r3, r8
10006eb8:	042c      	lsls	r4, r5, #16
10006eba:	0c1b      	lsrs	r3, r3, #16
10006ebc:	469c      	mov	ip, r3
10006ebe:	0c23      	lsrs	r3, r4, #16
10006ec0:	4644      	mov	r4, r8
10006ec2:	0426      	lsls	r6, r4, #16
10006ec4:	1c1c      	adds	r4, r3, #0
10006ec6:	0c36      	lsrs	r6, r6, #16
10006ec8:	0c2f      	lsrs	r7, r5, #16
10006eca:	4374      	muls	r4, r6
10006ecc:	1c35      	adds	r5, r6, #0
10006ece:	4666      	mov	r6, ip
10006ed0:	437d      	muls	r5, r7
10006ed2:	4373      	muls	r3, r6
10006ed4:	4377      	muls	r7, r6
10006ed6:	18eb      	adds	r3, r5, r3
10006ed8:	0c26      	lsrs	r6, r4, #16
10006eda:	199e      	adds	r6, r3, r6
10006edc:	42b5      	cmp	r5, r6
10006ede:	d903      	bls.n	10006ee8 <__aeabi_fmul+0x16c>
10006ee0:	2380      	movs	r3, #128	; 0x80
10006ee2:	025b      	lsls	r3, r3, #9
10006ee4:	469c      	mov	ip, r3
10006ee6:	4467      	add	r7, ip
10006ee8:	0424      	lsls	r4, r4, #16
10006eea:	0433      	lsls	r3, r6, #16
10006eec:	0c24      	lsrs	r4, r4, #16
10006eee:	191b      	adds	r3, r3, r4
10006ef0:	019d      	lsls	r5, r3, #6
10006ef2:	1e6c      	subs	r4, r5, #1
10006ef4:	41a5      	sbcs	r5, r4
10006ef6:	0e9b      	lsrs	r3, r3, #26
10006ef8:	0c36      	lsrs	r6, r6, #16
10006efa:	432b      	orrs	r3, r5
10006efc:	19bd      	adds	r5, r7, r6
10006efe:	01ad      	lsls	r5, r5, #6
10006f00:	431d      	orrs	r5, r3
10006f02:	012b      	lsls	r3, r5, #4
10006f04:	d504      	bpl.n	10006f10 <__aeabi_fmul+0x194>
10006f06:	2301      	movs	r3, #1
10006f08:	0868      	lsrs	r0, r5, #1
10006f0a:	401d      	ands	r5, r3
10006f0c:	4305      	orrs	r5, r0
10006f0e:	1c08      	adds	r0, r1, #0
10006f10:	1c03      	adds	r3, r0, #0
10006f12:	337f      	adds	r3, #127	; 0x7f
10006f14:	2b00      	cmp	r3, #0
10006f16:	dd2c      	ble.n	10006f72 <__aeabi_fmul+0x1f6>
10006f18:	0769      	lsls	r1, r5, #29
10006f1a:	d004      	beq.n	10006f26 <__aeabi_fmul+0x1aa>
10006f1c:	210f      	movs	r1, #15
10006f1e:	4029      	ands	r1, r5
10006f20:	2904      	cmp	r1, #4
10006f22:	d000      	beq.n	10006f26 <__aeabi_fmul+0x1aa>
10006f24:	3504      	adds	r5, #4
10006f26:	0129      	lsls	r1, r5, #4
10006f28:	d503      	bpl.n	10006f32 <__aeabi_fmul+0x1b6>
10006f2a:	4b2c      	ldr	r3, [pc, #176]	; (10006fdc <__aeabi_fmul+0x260>)
10006f2c:	401d      	ands	r5, r3
10006f2e:	1c03      	adds	r3, r0, #0
10006f30:	3380      	adds	r3, #128	; 0x80
10006f32:	2bfe      	cmp	r3, #254	; 0xfe
10006f34:	dd17      	ble.n	10006f66 <__aeabi_fmul+0x1ea>
10006f36:	2401      	movs	r4, #1
10006f38:	23ff      	movs	r3, #255	; 0xff
10006f3a:	4014      	ands	r4, r2
10006f3c:	2500      	movs	r5, #0
10006f3e:	e764      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006f40:	2080      	movs	r0, #128	; 0x80
10006f42:	03c0      	lsls	r0, r0, #15
10006f44:	4205      	tst	r5, r0
10006f46:	d009      	beq.n	10006f5c <__aeabi_fmul+0x1e0>
10006f48:	4643      	mov	r3, r8
10006f4a:	4203      	tst	r3, r0
10006f4c:	d106      	bne.n	10006f5c <__aeabi_fmul+0x1e0>
10006f4e:	4645      	mov	r5, r8
10006f50:	4305      	orrs	r5, r0
10006f52:	026d      	lsls	r5, r5, #9
10006f54:	0a6d      	lsrs	r5, r5, #9
10006f56:	464c      	mov	r4, r9
10006f58:	23ff      	movs	r3, #255	; 0xff
10006f5a:	e756      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006f5c:	4305      	orrs	r5, r0
10006f5e:	026d      	lsls	r5, r5, #9
10006f60:	0a6d      	lsrs	r5, r5, #9
10006f62:	23ff      	movs	r3, #255	; 0xff
10006f64:	e751      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006f66:	2401      	movs	r4, #1
10006f68:	01ad      	lsls	r5, r5, #6
10006f6a:	0a6d      	lsrs	r5, r5, #9
10006f6c:	b2db      	uxtb	r3, r3
10006f6e:	4014      	ands	r4, r2
10006f70:	e74b      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006f72:	237e      	movs	r3, #126	; 0x7e
10006f74:	425b      	negs	r3, r3
10006f76:	1a1b      	subs	r3, r3, r0
10006f78:	2b1b      	cmp	r3, #27
10006f7a:	dd07      	ble.n	10006f8c <__aeabi_fmul+0x210>
10006f7c:	2401      	movs	r4, #1
10006f7e:	2300      	movs	r3, #0
10006f80:	4014      	ands	r4, r2
10006f82:	2500      	movs	r5, #0
10006f84:	e741      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006f86:	1c08      	adds	r0, r1, #0
10006f88:	465a      	mov	r2, fp
10006f8a:	e7c1      	b.n	10006f10 <__aeabi_fmul+0x194>
10006f8c:	309e      	adds	r0, #158	; 0x9e
10006f8e:	1c29      	adds	r1, r5, #0
10006f90:	4085      	lsls	r5, r0
10006f92:	40d9      	lsrs	r1, r3
10006f94:	1e68      	subs	r0, r5, #1
10006f96:	4185      	sbcs	r5, r0
10006f98:	430d      	orrs	r5, r1
10006f9a:	076b      	lsls	r3, r5, #29
10006f9c:	d004      	beq.n	10006fa8 <__aeabi_fmul+0x22c>
10006f9e:	230f      	movs	r3, #15
10006fa0:	402b      	ands	r3, r5
10006fa2:	2b04      	cmp	r3, #4
10006fa4:	d000      	beq.n	10006fa8 <__aeabi_fmul+0x22c>
10006fa6:	3504      	adds	r5, #4
10006fa8:	016b      	lsls	r3, r5, #5
10006faa:	d504      	bpl.n	10006fb6 <__aeabi_fmul+0x23a>
10006fac:	2401      	movs	r4, #1
10006fae:	2301      	movs	r3, #1
10006fb0:	4014      	ands	r4, r2
10006fb2:	2500      	movs	r5, #0
10006fb4:	e729      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006fb6:	2401      	movs	r4, #1
10006fb8:	01ad      	lsls	r5, r5, #6
10006fba:	0a6d      	lsrs	r5, r5, #9
10006fbc:	4014      	ands	r4, r2
10006fbe:	2300      	movs	r3, #0
10006fc0:	e723      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006fc2:	2380      	movs	r3, #128	; 0x80
10006fc4:	03db      	lsls	r3, r3, #15
10006fc6:	431d      	orrs	r5, r3
10006fc8:	2401      	movs	r4, #1
10006fca:	465b      	mov	r3, fp
10006fcc:	026d      	lsls	r5, r5, #9
10006fce:	4023      	ands	r3, r4
10006fd0:	1c1c      	adds	r4, r3, #0
10006fd2:	0a6d      	lsrs	r5, r5, #9
10006fd4:	23ff      	movs	r3, #255	; 0xff
10006fd6:	e718      	b.n	10006e0a <__aeabi_fmul+0x8e>
10006fd8:	1000ce70 	.word	0x1000ce70
10006fdc:	f7ffffff 	.word	0xf7ffffff

10006fe0 <__aeabi_fsub>:
10006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006fe2:	004a      	lsls	r2, r1, #1
10006fe4:	0243      	lsls	r3, r0, #9
10006fe6:	0044      	lsls	r4, r0, #1
10006fe8:	024d      	lsls	r5, r1, #9
10006fea:	0fc0      	lsrs	r0, r0, #31
10006fec:	0e24      	lsrs	r4, r4, #24
10006fee:	1c06      	adds	r6, r0, #0
10006ff0:	099b      	lsrs	r3, r3, #6
10006ff2:	0e12      	lsrs	r2, r2, #24
10006ff4:	0fc9      	lsrs	r1, r1, #31
10006ff6:	09ad      	lsrs	r5, r5, #6
10006ff8:	2aff      	cmp	r2, #255	; 0xff
10006ffa:	d100      	bne.n	10006ffe <__aeabi_fsub+0x1e>
10006ffc:	e075      	b.n	100070ea <__aeabi_fsub+0x10a>
10006ffe:	2701      	movs	r7, #1
10007000:	4079      	eors	r1, r7
10007002:	4288      	cmp	r0, r1
10007004:	d050      	beq.n	100070a8 <__aeabi_fsub+0xc8>
10007006:	1aa0      	subs	r0, r4, r2
10007008:	2800      	cmp	r0, #0
1000700a:	dc00      	bgt.n	1000700e <__aeabi_fsub+0x2e>
1000700c:	e08f      	b.n	1000712e <__aeabi_fsub+0x14e>
1000700e:	2a00      	cmp	r2, #0
10007010:	d11e      	bne.n	10007050 <__aeabi_fsub+0x70>
10007012:	2d00      	cmp	r5, #0
10007014:	d000      	beq.n	10007018 <__aeabi_fsub+0x38>
10007016:	e075      	b.n	10007104 <__aeabi_fsub+0x124>
10007018:	075a      	lsls	r2, r3, #29
1000701a:	d004      	beq.n	10007026 <__aeabi_fsub+0x46>
1000701c:	220f      	movs	r2, #15
1000701e:	401a      	ands	r2, r3
10007020:	2a04      	cmp	r2, #4
10007022:	d000      	beq.n	10007026 <__aeabi_fsub+0x46>
10007024:	3304      	adds	r3, #4
10007026:	2280      	movs	r2, #128	; 0x80
10007028:	2001      	movs	r0, #1
1000702a:	04d2      	lsls	r2, r2, #19
1000702c:	401a      	ands	r2, r3
1000702e:	4030      	ands	r0, r6
10007030:	2a00      	cmp	r2, #0
10007032:	d032      	beq.n	1000709a <__aeabi_fsub+0xba>
10007034:	3401      	adds	r4, #1
10007036:	2cff      	cmp	r4, #255	; 0xff
10007038:	d100      	bne.n	1000703c <__aeabi_fsub+0x5c>
1000703a:	e084      	b.n	10007146 <__aeabi_fsub+0x166>
1000703c:	019b      	lsls	r3, r3, #6
1000703e:	0a5b      	lsrs	r3, r3, #9
10007040:	b2e4      	uxtb	r4, r4
10007042:	025b      	lsls	r3, r3, #9
10007044:	05e4      	lsls	r4, r4, #23
10007046:	0a5b      	lsrs	r3, r3, #9
10007048:	4323      	orrs	r3, r4
1000704a:	07c0      	lsls	r0, r0, #31
1000704c:	4318      	orrs	r0, r3
1000704e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007050:	2cff      	cmp	r4, #255	; 0xff
10007052:	d0e1      	beq.n	10007018 <__aeabi_fsub+0x38>
10007054:	2280      	movs	r2, #128	; 0x80
10007056:	04d2      	lsls	r2, r2, #19
10007058:	4315      	orrs	r5, r2
1000705a:	281b      	cmp	r0, #27
1000705c:	dd7a      	ble.n	10007154 <__aeabi_fsub+0x174>
1000705e:	2501      	movs	r5, #1
10007060:	1b5b      	subs	r3, r3, r5
10007062:	015a      	lsls	r2, r3, #5
10007064:	d55d      	bpl.n	10007122 <__aeabi_fsub+0x142>
10007066:	019b      	lsls	r3, r3, #6
10007068:	099f      	lsrs	r7, r3, #6
1000706a:	1c38      	adds	r0, r7, #0
1000706c:	f001 fd46 	bl	10008afc <__clzsi2>
10007070:	3805      	subs	r0, #5
10007072:	4087      	lsls	r7, r0
10007074:	4284      	cmp	r4, r0
10007076:	dc69      	bgt.n	1000714c <__aeabi_fsub+0x16c>
10007078:	1b00      	subs	r0, r0, r4
1000707a:	241f      	movs	r4, #31
1000707c:	1c3a      	adds	r2, r7, #0
1000707e:	1c43      	adds	r3, r0, #1
10007080:	1a20      	subs	r0, r4, r0
10007082:	40da      	lsrs	r2, r3
10007084:	4087      	lsls	r7, r0
10007086:	1c13      	adds	r3, r2, #0
10007088:	1e7c      	subs	r4, r7, #1
1000708a:	41a7      	sbcs	r7, r4
1000708c:	2400      	movs	r4, #0
1000708e:	433b      	orrs	r3, r7
10007090:	e7c2      	b.n	10007018 <__aeabi_fsub+0x38>
10007092:	1e13      	subs	r3, r2, #0
10007094:	d145      	bne.n	10007122 <__aeabi_fsub+0x142>
10007096:	2300      	movs	r3, #0
10007098:	2000      	movs	r0, #0
1000709a:	08db      	lsrs	r3, r3, #3
1000709c:	2cff      	cmp	r4, #255	; 0xff
1000709e:	d028      	beq.n	100070f2 <__aeabi_fsub+0x112>
100070a0:	025b      	lsls	r3, r3, #9
100070a2:	0a5b      	lsrs	r3, r3, #9
100070a4:	b2e4      	uxtb	r4, r4
100070a6:	e7cc      	b.n	10007042 <__aeabi_fsub+0x62>
100070a8:	1aa1      	subs	r1, r4, r2
100070aa:	2900      	cmp	r1, #0
100070ac:	dd5b      	ble.n	10007166 <__aeabi_fsub+0x186>
100070ae:	2a00      	cmp	r2, #0
100070b0:	d02e      	beq.n	10007110 <__aeabi_fsub+0x130>
100070b2:	2cff      	cmp	r4, #255	; 0xff
100070b4:	d0b0      	beq.n	10007018 <__aeabi_fsub+0x38>
100070b6:	2280      	movs	r2, #128	; 0x80
100070b8:	04d2      	lsls	r2, r2, #19
100070ba:	4315      	orrs	r5, r2
100070bc:	291b      	cmp	r1, #27
100070be:	dc74      	bgt.n	100071aa <__aeabi_fsub+0x1ca>
100070c0:	1c2f      	adds	r7, r5, #0
100070c2:	2220      	movs	r2, #32
100070c4:	40cf      	lsrs	r7, r1
100070c6:	1a51      	subs	r1, r2, r1
100070c8:	408d      	lsls	r5, r1
100070ca:	1e69      	subs	r1, r5, #1
100070cc:	418d      	sbcs	r5, r1
100070ce:	433d      	orrs	r5, r7
100070d0:	195b      	adds	r3, r3, r5
100070d2:	015a      	lsls	r2, r3, #5
100070d4:	d525      	bpl.n	10007122 <__aeabi_fsub+0x142>
100070d6:	3401      	adds	r4, #1
100070d8:	2cff      	cmp	r4, #255	; 0xff
100070da:	d074      	beq.n	100071c6 <__aeabi_fsub+0x1e6>
100070dc:	2101      	movs	r1, #1
100070de:	4a7e      	ldr	r2, [pc, #504]	; (100072d8 <__aeabi_fsub+0x2f8>)
100070e0:	4019      	ands	r1, r3
100070e2:	4013      	ands	r3, r2
100070e4:	085b      	lsrs	r3, r3, #1
100070e6:	430b      	orrs	r3, r1
100070e8:	e796      	b.n	10007018 <__aeabi_fsub+0x38>
100070ea:	2d00      	cmp	r5, #0
100070ec:	d000      	beq.n	100070f0 <__aeabi_fsub+0x110>
100070ee:	e788      	b.n	10007002 <__aeabi_fsub+0x22>
100070f0:	e785      	b.n	10006ffe <__aeabi_fsub+0x1e>
100070f2:	2b00      	cmp	r3, #0
100070f4:	d027      	beq.n	10007146 <__aeabi_fsub+0x166>
100070f6:	2280      	movs	r2, #128	; 0x80
100070f8:	03d2      	lsls	r2, r2, #15
100070fa:	4313      	orrs	r3, r2
100070fc:	025b      	lsls	r3, r3, #9
100070fe:	0a5b      	lsrs	r3, r3, #9
10007100:	24ff      	movs	r4, #255	; 0xff
10007102:	e79e      	b.n	10007042 <__aeabi_fsub+0x62>
10007104:	3801      	subs	r0, #1
10007106:	2800      	cmp	r0, #0
10007108:	d0aa      	beq.n	10007060 <__aeabi_fsub+0x80>
1000710a:	2cff      	cmp	r4, #255	; 0xff
1000710c:	d1a5      	bne.n	1000705a <__aeabi_fsub+0x7a>
1000710e:	e783      	b.n	10007018 <__aeabi_fsub+0x38>
10007110:	2d00      	cmp	r5, #0
10007112:	d100      	bne.n	10007116 <__aeabi_fsub+0x136>
10007114:	e780      	b.n	10007018 <__aeabi_fsub+0x38>
10007116:	3901      	subs	r1, #1
10007118:	2900      	cmp	r1, #0
1000711a:	d0d9      	beq.n	100070d0 <__aeabi_fsub+0xf0>
1000711c:	2cff      	cmp	r4, #255	; 0xff
1000711e:	d1cd      	bne.n	100070bc <__aeabi_fsub+0xdc>
10007120:	e77a      	b.n	10007018 <__aeabi_fsub+0x38>
10007122:	075a      	lsls	r2, r3, #29
10007124:	d000      	beq.n	10007128 <__aeabi_fsub+0x148>
10007126:	e779      	b.n	1000701c <__aeabi_fsub+0x3c>
10007128:	2001      	movs	r0, #1
1000712a:	4030      	ands	r0, r6
1000712c:	e7b5      	b.n	1000709a <__aeabi_fsub+0xba>
1000712e:	2800      	cmp	r0, #0
10007130:	d125      	bne.n	1000717e <__aeabi_fsub+0x19e>
10007132:	1c62      	adds	r2, r4, #1
10007134:	b2d2      	uxtb	r2, r2
10007136:	2a01      	cmp	r2, #1
10007138:	dd55      	ble.n	100071e6 <__aeabi_fsub+0x206>
1000713a:	1b5f      	subs	r7, r3, r5
1000713c:	017a      	lsls	r2, r7, #5
1000713e:	d52d      	bpl.n	1000719c <__aeabi_fsub+0x1bc>
10007140:	1aef      	subs	r7, r5, r3
10007142:	1c0e      	adds	r6, r1, #0
10007144:	e791      	b.n	1000706a <__aeabi_fsub+0x8a>
10007146:	24ff      	movs	r4, #255	; 0xff
10007148:	2300      	movs	r3, #0
1000714a:	e77a      	b.n	10007042 <__aeabi_fsub+0x62>
1000714c:	4b62      	ldr	r3, [pc, #392]	; (100072d8 <__aeabi_fsub+0x2f8>)
1000714e:	1a24      	subs	r4, r4, r0
10007150:	403b      	ands	r3, r7
10007152:	e761      	b.n	10007018 <__aeabi_fsub+0x38>
10007154:	1c29      	adds	r1, r5, #0
10007156:	2220      	movs	r2, #32
10007158:	40c1      	lsrs	r1, r0
1000715a:	1a10      	subs	r0, r2, r0
1000715c:	4085      	lsls	r5, r0
1000715e:	1e68      	subs	r0, r5, #1
10007160:	4185      	sbcs	r5, r0
10007162:	430d      	orrs	r5, r1
10007164:	e77c      	b.n	10007060 <__aeabi_fsub+0x80>
10007166:	2900      	cmp	r1, #0
10007168:	d146      	bne.n	100071f8 <__aeabi_fsub+0x218>
1000716a:	1c62      	adds	r2, r4, #1
1000716c:	b2d1      	uxtb	r1, r2
1000716e:	2901      	cmp	r1, #1
10007170:	dd2b      	ble.n	100071ca <__aeabi_fsub+0x1ea>
10007172:	2aff      	cmp	r2, #255	; 0xff
10007174:	d026      	beq.n	100071c4 <__aeabi_fsub+0x1e4>
10007176:	18eb      	adds	r3, r5, r3
10007178:	085b      	lsrs	r3, r3, #1
1000717a:	1c14      	adds	r4, r2, #0
1000717c:	e74c      	b.n	10007018 <__aeabi_fsub+0x38>
1000717e:	2c00      	cmp	r4, #0
10007180:	d015      	beq.n	100071ae <__aeabi_fsub+0x1ce>
10007182:	2aff      	cmp	r2, #255	; 0xff
10007184:	d01a      	beq.n	100071bc <__aeabi_fsub+0x1dc>
10007186:	2480      	movs	r4, #128	; 0x80
10007188:	04e4      	lsls	r4, r4, #19
1000718a:	4240      	negs	r0, r0
1000718c:	4323      	orrs	r3, r4
1000718e:	281b      	cmp	r0, #27
10007190:	dd4d      	ble.n	1000722e <__aeabi_fsub+0x24e>
10007192:	2301      	movs	r3, #1
10007194:	1aeb      	subs	r3, r5, r3
10007196:	1c14      	adds	r4, r2, #0
10007198:	1c0e      	adds	r6, r1, #0
1000719a:	e762      	b.n	10007062 <__aeabi_fsub+0x82>
1000719c:	2f00      	cmp	r7, #0
1000719e:	d000      	beq.n	100071a2 <__aeabi_fsub+0x1c2>
100071a0:	e763      	b.n	1000706a <__aeabi_fsub+0x8a>
100071a2:	2300      	movs	r3, #0
100071a4:	2000      	movs	r0, #0
100071a6:	2400      	movs	r4, #0
100071a8:	e777      	b.n	1000709a <__aeabi_fsub+0xba>
100071aa:	2501      	movs	r5, #1
100071ac:	e790      	b.n	100070d0 <__aeabi_fsub+0xf0>
100071ae:	2b00      	cmp	r3, #0
100071b0:	d039      	beq.n	10007226 <__aeabi_fsub+0x246>
100071b2:	43c0      	mvns	r0, r0
100071b4:	2800      	cmp	r0, #0
100071b6:	d0ed      	beq.n	10007194 <__aeabi_fsub+0x1b4>
100071b8:	2aff      	cmp	r2, #255	; 0xff
100071ba:	d1e8      	bne.n	1000718e <__aeabi_fsub+0x1ae>
100071bc:	1c2b      	adds	r3, r5, #0
100071be:	24ff      	movs	r4, #255	; 0xff
100071c0:	1c0e      	adds	r6, r1, #0
100071c2:	e729      	b.n	10007018 <__aeabi_fsub+0x38>
100071c4:	24ff      	movs	r4, #255	; 0xff
100071c6:	2300      	movs	r3, #0
100071c8:	e767      	b.n	1000709a <__aeabi_fsub+0xba>
100071ca:	2c00      	cmp	r4, #0
100071cc:	d15a      	bne.n	10007284 <__aeabi_fsub+0x2a4>
100071ce:	2b00      	cmp	r3, #0
100071d0:	d07f      	beq.n	100072d2 <__aeabi_fsub+0x2f2>
100071d2:	2d00      	cmp	r5, #0
100071d4:	d100      	bne.n	100071d8 <__aeabi_fsub+0x1f8>
100071d6:	e71f      	b.n	10007018 <__aeabi_fsub+0x38>
100071d8:	195b      	adds	r3, r3, r5
100071da:	015a      	lsls	r2, r3, #5
100071dc:	d5a1      	bpl.n	10007122 <__aeabi_fsub+0x142>
100071de:	4a3e      	ldr	r2, [pc, #248]	; (100072d8 <__aeabi_fsub+0x2f8>)
100071e0:	3401      	adds	r4, #1
100071e2:	4013      	ands	r3, r2
100071e4:	e718      	b.n	10007018 <__aeabi_fsub+0x38>
100071e6:	2c00      	cmp	r4, #0
100071e8:	d115      	bne.n	10007216 <__aeabi_fsub+0x236>
100071ea:	2b00      	cmp	r3, #0
100071ec:	d12f      	bne.n	1000724e <__aeabi_fsub+0x26e>
100071ee:	2d00      	cmp	r5, #0
100071f0:	d05e      	beq.n	100072b0 <__aeabi_fsub+0x2d0>
100071f2:	1c2b      	adds	r3, r5, #0
100071f4:	1c0e      	adds	r6, r1, #0
100071f6:	e70f      	b.n	10007018 <__aeabi_fsub+0x38>
100071f8:	2c00      	cmp	r4, #0
100071fa:	d121      	bne.n	10007240 <__aeabi_fsub+0x260>
100071fc:	2b00      	cmp	r3, #0
100071fe:	d054      	beq.n	100072aa <__aeabi_fsub+0x2ca>
10007200:	43c9      	mvns	r1, r1
10007202:	2900      	cmp	r1, #0
10007204:	d004      	beq.n	10007210 <__aeabi_fsub+0x230>
10007206:	2aff      	cmp	r2, #255	; 0xff
10007208:	d04c      	beq.n	100072a4 <__aeabi_fsub+0x2c4>
1000720a:	291b      	cmp	r1, #27
1000720c:	dd58      	ble.n	100072c0 <__aeabi_fsub+0x2e0>
1000720e:	2301      	movs	r3, #1
10007210:	195b      	adds	r3, r3, r5
10007212:	1c14      	adds	r4, r2, #0
10007214:	e75d      	b.n	100070d2 <__aeabi_fsub+0xf2>
10007216:	2b00      	cmp	r3, #0
10007218:	d123      	bne.n	10007262 <__aeabi_fsub+0x282>
1000721a:	2d00      	cmp	r5, #0
1000721c:	d04b      	beq.n	100072b6 <__aeabi_fsub+0x2d6>
1000721e:	1c2b      	adds	r3, r5, #0
10007220:	1c0e      	adds	r6, r1, #0
10007222:	24ff      	movs	r4, #255	; 0xff
10007224:	e6f8      	b.n	10007018 <__aeabi_fsub+0x38>
10007226:	1c2b      	adds	r3, r5, #0
10007228:	1c14      	adds	r4, r2, #0
1000722a:	1c0e      	adds	r6, r1, #0
1000722c:	e6f4      	b.n	10007018 <__aeabi_fsub+0x38>
1000722e:	1c1e      	adds	r6, r3, #0
10007230:	2420      	movs	r4, #32
10007232:	40c6      	lsrs	r6, r0
10007234:	1a20      	subs	r0, r4, r0
10007236:	4083      	lsls	r3, r0
10007238:	1e58      	subs	r0, r3, #1
1000723a:	4183      	sbcs	r3, r0
1000723c:	4333      	orrs	r3, r6
1000723e:	e7a9      	b.n	10007194 <__aeabi_fsub+0x1b4>
10007240:	2aff      	cmp	r2, #255	; 0xff
10007242:	d02f      	beq.n	100072a4 <__aeabi_fsub+0x2c4>
10007244:	2480      	movs	r4, #128	; 0x80
10007246:	04e4      	lsls	r4, r4, #19
10007248:	4249      	negs	r1, r1
1000724a:	4323      	orrs	r3, r4
1000724c:	e7dd      	b.n	1000720a <__aeabi_fsub+0x22a>
1000724e:	2d00      	cmp	r5, #0
10007250:	d100      	bne.n	10007254 <__aeabi_fsub+0x274>
10007252:	e6e1      	b.n	10007018 <__aeabi_fsub+0x38>
10007254:	1b5a      	subs	r2, r3, r5
10007256:	0150      	lsls	r0, r2, #5
10007258:	d400      	bmi.n	1000725c <__aeabi_fsub+0x27c>
1000725a:	e71a      	b.n	10007092 <__aeabi_fsub+0xb2>
1000725c:	1aeb      	subs	r3, r5, r3
1000725e:	1c0e      	adds	r6, r1, #0
10007260:	e6da      	b.n	10007018 <__aeabi_fsub+0x38>
10007262:	24ff      	movs	r4, #255	; 0xff
10007264:	2d00      	cmp	r5, #0
10007266:	d100      	bne.n	1000726a <__aeabi_fsub+0x28a>
10007268:	e6d6      	b.n	10007018 <__aeabi_fsub+0x38>
1000726a:	2280      	movs	r2, #128	; 0x80
1000726c:	08db      	lsrs	r3, r3, #3
1000726e:	03d2      	lsls	r2, r2, #15
10007270:	4213      	tst	r3, r2
10007272:	d004      	beq.n	1000727e <__aeabi_fsub+0x29e>
10007274:	08ed      	lsrs	r5, r5, #3
10007276:	4215      	tst	r5, r2
10007278:	d101      	bne.n	1000727e <__aeabi_fsub+0x29e>
1000727a:	1c2b      	adds	r3, r5, #0
1000727c:	1c0e      	adds	r6, r1, #0
1000727e:	00db      	lsls	r3, r3, #3
10007280:	24ff      	movs	r4, #255	; 0xff
10007282:	e6c9      	b.n	10007018 <__aeabi_fsub+0x38>
10007284:	2b00      	cmp	r3, #0
10007286:	d00d      	beq.n	100072a4 <__aeabi_fsub+0x2c4>
10007288:	24ff      	movs	r4, #255	; 0xff
1000728a:	2d00      	cmp	r5, #0
1000728c:	d100      	bne.n	10007290 <__aeabi_fsub+0x2b0>
1000728e:	e6c3      	b.n	10007018 <__aeabi_fsub+0x38>
10007290:	2280      	movs	r2, #128	; 0x80
10007292:	08db      	lsrs	r3, r3, #3
10007294:	03d2      	lsls	r2, r2, #15
10007296:	4213      	tst	r3, r2
10007298:	d0f1      	beq.n	1000727e <__aeabi_fsub+0x29e>
1000729a:	08ed      	lsrs	r5, r5, #3
1000729c:	4215      	tst	r5, r2
1000729e:	d1ee      	bne.n	1000727e <__aeabi_fsub+0x29e>
100072a0:	1c2b      	adds	r3, r5, #0
100072a2:	e7ec      	b.n	1000727e <__aeabi_fsub+0x29e>
100072a4:	1c2b      	adds	r3, r5, #0
100072a6:	24ff      	movs	r4, #255	; 0xff
100072a8:	e6b6      	b.n	10007018 <__aeabi_fsub+0x38>
100072aa:	1c2b      	adds	r3, r5, #0
100072ac:	1c14      	adds	r4, r2, #0
100072ae:	e6b3      	b.n	10007018 <__aeabi_fsub+0x38>
100072b0:	1c23      	adds	r3, r4, #0
100072b2:	2000      	movs	r0, #0
100072b4:	e6f1      	b.n	1000709a <__aeabi_fsub+0xba>
100072b6:	2380      	movs	r3, #128	; 0x80
100072b8:	2000      	movs	r0, #0
100072ba:	049b      	lsls	r3, r3, #18
100072bc:	24ff      	movs	r4, #255	; 0xff
100072be:	e6ec      	b.n	1000709a <__aeabi_fsub+0xba>
100072c0:	1c1f      	adds	r7, r3, #0
100072c2:	2420      	movs	r4, #32
100072c4:	40cf      	lsrs	r7, r1
100072c6:	1a61      	subs	r1, r4, r1
100072c8:	408b      	lsls	r3, r1
100072ca:	1e59      	subs	r1, r3, #1
100072cc:	418b      	sbcs	r3, r1
100072ce:	433b      	orrs	r3, r7
100072d0:	e79e      	b.n	10007210 <__aeabi_fsub+0x230>
100072d2:	1c2b      	adds	r3, r5, #0
100072d4:	e6a0      	b.n	10007018 <__aeabi_fsub+0x38>
100072d6:	46c0      	nop			; (mov r8, r8)
100072d8:	fbffffff 	.word	0xfbffffff

100072dc <__aeabi_f2iz>:
100072dc:	0242      	lsls	r2, r0, #9
100072de:	0a51      	lsrs	r1, r2, #9
100072e0:	0042      	lsls	r2, r0, #1
100072e2:	0fc3      	lsrs	r3, r0, #31
100072e4:	0e12      	lsrs	r2, r2, #24
100072e6:	2000      	movs	r0, #0
100072e8:	2a7e      	cmp	r2, #126	; 0x7e
100072ea:	dd0d      	ble.n	10007308 <__aeabi_f2iz+0x2c>
100072ec:	2a9d      	cmp	r2, #157	; 0x9d
100072ee:	dc0c      	bgt.n	1000730a <__aeabi_f2iz+0x2e>
100072f0:	2080      	movs	r0, #128	; 0x80
100072f2:	0400      	lsls	r0, r0, #16
100072f4:	4301      	orrs	r1, r0
100072f6:	2a95      	cmp	r2, #149	; 0x95
100072f8:	dc0a      	bgt.n	10007310 <__aeabi_f2iz+0x34>
100072fa:	2096      	movs	r0, #150	; 0x96
100072fc:	1a82      	subs	r2, r0, r2
100072fe:	40d1      	lsrs	r1, r2
10007300:	1c0a      	adds	r2, r1, #0
10007302:	4258      	negs	r0, r3
10007304:	4042      	eors	r2, r0
10007306:	18d0      	adds	r0, r2, r3
10007308:	4770      	bx	lr
1000730a:	4a03      	ldr	r2, [pc, #12]	; (10007318 <__aeabi_f2iz+0x3c>)
1000730c:	1898      	adds	r0, r3, r2
1000730e:	e7fb      	b.n	10007308 <__aeabi_f2iz+0x2c>
10007310:	3a96      	subs	r2, #150	; 0x96
10007312:	4091      	lsls	r1, r2
10007314:	1c0a      	adds	r2, r1, #0
10007316:	e7f4      	b.n	10007302 <__aeabi_f2iz+0x26>
10007318:	7fffffff 	.word	0x7fffffff

1000731c <__aeabi_i2f>:
1000731c:	b570      	push	{r4, r5, r6, lr}
1000731e:	1e04      	subs	r4, r0, #0
10007320:	d039      	beq.n	10007396 <__aeabi_i2f+0x7a>
10007322:	0fc5      	lsrs	r5, r0, #31
10007324:	d000      	beq.n	10007328 <__aeabi_i2f+0xc>
10007326:	4244      	negs	r4, r0
10007328:	1c20      	adds	r0, r4, #0
1000732a:	f001 fbe7 	bl	10008afc <__clzsi2>
1000732e:	239e      	movs	r3, #158	; 0x9e
10007330:	1c26      	adds	r6, r4, #0
10007332:	1a1b      	subs	r3, r3, r0
10007334:	2b96      	cmp	r3, #150	; 0x96
10007336:	dc07      	bgt.n	10007348 <__aeabi_i2f+0x2c>
10007338:	2808      	cmp	r0, #8
1000733a:	dd01      	ble.n	10007340 <__aeabi_i2f+0x24>
1000733c:	3808      	subs	r0, #8
1000733e:	4084      	lsls	r4, r0
10007340:	0264      	lsls	r4, r4, #9
10007342:	0a64      	lsrs	r4, r4, #9
10007344:	b2d8      	uxtb	r0, r3
10007346:	e01e      	b.n	10007386 <__aeabi_i2f+0x6a>
10007348:	2b99      	cmp	r3, #153	; 0x99
1000734a:	dd0a      	ble.n	10007362 <__aeabi_i2f+0x46>
1000734c:	2205      	movs	r2, #5
1000734e:	1c21      	adds	r1, r4, #0
10007350:	1a12      	subs	r2, r2, r0
10007352:	40d1      	lsrs	r1, r2
10007354:	1c0a      	adds	r2, r1, #0
10007356:	1c01      	adds	r1, r0, #0
10007358:	311b      	adds	r1, #27
1000735a:	408e      	lsls	r6, r1
1000735c:	1e71      	subs	r1, r6, #1
1000735e:	418e      	sbcs	r6, r1
10007360:	4316      	orrs	r6, r2
10007362:	2805      	cmp	r0, #5
10007364:	dd01      	ble.n	1000736a <__aeabi_i2f+0x4e>
10007366:	1f42      	subs	r2, r0, #5
10007368:	4096      	lsls	r6, r2
1000736a:	4c0f      	ldr	r4, [pc, #60]	; (100073a8 <__aeabi_i2f+0x8c>)
1000736c:	4034      	ands	r4, r6
1000736e:	0772      	lsls	r2, r6, #29
10007370:	d004      	beq.n	1000737c <__aeabi_i2f+0x60>
10007372:	220f      	movs	r2, #15
10007374:	4016      	ands	r6, r2
10007376:	2e04      	cmp	r6, #4
10007378:	d000      	beq.n	1000737c <__aeabi_i2f+0x60>
1000737a:	3404      	adds	r4, #4
1000737c:	0162      	lsls	r2, r4, #5
1000737e:	d40e      	bmi.n	1000739e <__aeabi_i2f+0x82>
10007380:	01a4      	lsls	r4, r4, #6
10007382:	0a64      	lsrs	r4, r4, #9
10007384:	b2d8      	uxtb	r0, r3
10007386:	0264      	lsls	r4, r4, #9
10007388:	05c0      	lsls	r0, r0, #23
1000738a:	0a64      	lsrs	r4, r4, #9
1000738c:	07ed      	lsls	r5, r5, #31
1000738e:	4304      	orrs	r4, r0
10007390:	432c      	orrs	r4, r5
10007392:	1c20      	adds	r0, r4, #0
10007394:	bd70      	pop	{r4, r5, r6, pc}
10007396:	2500      	movs	r5, #0
10007398:	2000      	movs	r0, #0
1000739a:	2400      	movs	r4, #0
1000739c:	e7f3      	b.n	10007386 <__aeabi_i2f+0x6a>
1000739e:	4b02      	ldr	r3, [pc, #8]	; (100073a8 <__aeabi_i2f+0x8c>)
100073a0:	401c      	ands	r4, r3
100073a2:	239f      	movs	r3, #159	; 0x9f
100073a4:	1a1b      	subs	r3, r3, r0
100073a6:	e7eb      	b.n	10007380 <__aeabi_i2f+0x64>
100073a8:	fbffffff 	.word	0xfbffffff

100073ac <__aeabi_dadd>:
100073ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100073ae:	4645      	mov	r5, r8
100073b0:	4657      	mov	r7, sl
100073b2:	464e      	mov	r6, r9
100073b4:	4694      	mov	ip, r2
100073b6:	004c      	lsls	r4, r1, #1
100073b8:	030a      	lsls	r2, r1, #12
100073ba:	0fc9      	lsrs	r1, r1, #31
100073bc:	b4e0      	push	{r5, r6, r7}
100073be:	4688      	mov	r8, r1
100073c0:	1c0e      	adds	r6, r1, #0
100073c2:	0319      	lsls	r1, r3, #12
100073c4:	0f47      	lsrs	r7, r0, #29
100073c6:	00c5      	lsls	r5, r0, #3
100073c8:	0a48      	lsrs	r0, r1, #9
100073ca:	4661      	mov	r1, ip
100073cc:	0f49      	lsrs	r1, r1, #29
100073ce:	4301      	orrs	r1, r0
100073d0:	4660      	mov	r0, ip
100073d2:	0a52      	lsrs	r2, r2, #9
100073d4:	4317      	orrs	r7, r2
100073d6:	00c0      	lsls	r0, r0, #3
100073d8:	005a      	lsls	r2, r3, #1
100073da:	0d64      	lsrs	r4, r4, #21
100073dc:	0d52      	lsrs	r2, r2, #21
100073de:	0fdb      	lsrs	r3, r3, #31
100073e0:	4684      	mov	ip, r0
100073e2:	4598      	cmp	r8, r3
100073e4:	d100      	bne.n	100073e8 <__aeabi_dadd+0x3c>
100073e6:	e0a7      	b.n	10007538 <__aeabi_dadd+0x18c>
100073e8:	1aa0      	subs	r0, r4, r2
100073ea:	2800      	cmp	r0, #0
100073ec:	dc00      	bgt.n	100073f0 <__aeabi_dadd+0x44>
100073ee:	e101      	b.n	100075f4 <__aeabi_dadd+0x248>
100073f0:	2a00      	cmp	r2, #0
100073f2:	d13d      	bne.n	10007470 <__aeabi_dadd+0xc4>
100073f4:	4663      	mov	r3, ip
100073f6:	430b      	orrs	r3, r1
100073f8:	d000      	beq.n	100073fc <__aeabi_dadd+0x50>
100073fa:	e0d4      	b.n	100075a6 <__aeabi_dadd+0x1fa>
100073fc:	076b      	lsls	r3, r5, #29
100073fe:	d100      	bne.n	10007402 <__aeabi_dadd+0x56>
10007400:	e088      	b.n	10007514 <__aeabi_dadd+0x168>
10007402:	230f      	movs	r3, #15
10007404:	402b      	ands	r3, r5
10007406:	2b04      	cmp	r3, #4
10007408:	d100      	bne.n	1000740c <__aeabi_dadd+0x60>
1000740a:	e083      	b.n	10007514 <__aeabi_dadd+0x168>
1000740c:	1d2a      	adds	r2, r5, #4
1000740e:	42aa      	cmp	r2, r5
10007410:	41ad      	sbcs	r5, r5
10007412:	2380      	movs	r3, #128	; 0x80
10007414:	426d      	negs	r5, r5
10007416:	197f      	adds	r7, r7, r5
10007418:	041b      	lsls	r3, r3, #16
1000741a:	403b      	ands	r3, r7
1000741c:	4646      	mov	r6, r8
1000741e:	1c15      	adds	r5, r2, #0
10007420:	2b00      	cmp	r3, #0
10007422:	d100      	bne.n	10007426 <__aeabi_dadd+0x7a>
10007424:	e07c      	b.n	10007520 <__aeabi_dadd+0x174>
10007426:	4bcc      	ldr	r3, [pc, #816]	; (10007758 <__aeabi_dadd+0x3ac>)
10007428:	3401      	adds	r4, #1
1000742a:	429c      	cmp	r4, r3
1000742c:	d100      	bne.n	10007430 <__aeabi_dadd+0x84>
1000742e:	e0fd      	b.n	1000762c <__aeabi_dadd+0x280>
10007430:	1c3a      	adds	r2, r7, #0
10007432:	4bca      	ldr	r3, [pc, #808]	; (1000775c <__aeabi_dadd+0x3b0>)
10007434:	08ed      	lsrs	r5, r5, #3
10007436:	401a      	ands	r2, r3
10007438:	0750      	lsls	r0, r2, #29
1000743a:	0564      	lsls	r4, r4, #21
1000743c:	0252      	lsls	r2, r2, #9
1000743e:	4305      	orrs	r5, r0
10007440:	0b12      	lsrs	r2, r2, #12
10007442:	0d64      	lsrs	r4, r4, #21
10007444:	2100      	movs	r1, #0
10007446:	0312      	lsls	r2, r2, #12
10007448:	0d0b      	lsrs	r3, r1, #20
1000744a:	051b      	lsls	r3, r3, #20
1000744c:	0564      	lsls	r4, r4, #21
1000744e:	0b12      	lsrs	r2, r2, #12
10007450:	431a      	orrs	r2, r3
10007452:	0863      	lsrs	r3, r4, #1
10007454:	4cc2      	ldr	r4, [pc, #776]	; (10007760 <__aeabi_dadd+0x3b4>)
10007456:	07f6      	lsls	r6, r6, #31
10007458:	4014      	ands	r4, r2
1000745a:	431c      	orrs	r4, r3
1000745c:	0064      	lsls	r4, r4, #1
1000745e:	0864      	lsrs	r4, r4, #1
10007460:	4334      	orrs	r4, r6
10007462:	1c28      	adds	r0, r5, #0
10007464:	1c21      	adds	r1, r4, #0
10007466:	bc1c      	pop	{r2, r3, r4}
10007468:	4690      	mov	r8, r2
1000746a:	4699      	mov	r9, r3
1000746c:	46a2      	mov	sl, r4
1000746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007470:	4bb9      	ldr	r3, [pc, #740]	; (10007758 <__aeabi_dadd+0x3ac>)
10007472:	429c      	cmp	r4, r3
10007474:	d0c2      	beq.n	100073fc <__aeabi_dadd+0x50>
10007476:	2380      	movs	r3, #128	; 0x80
10007478:	041b      	lsls	r3, r3, #16
1000747a:	4319      	orrs	r1, r3
1000747c:	2838      	cmp	r0, #56	; 0x38
1000747e:	dd00      	ble.n	10007482 <__aeabi_dadd+0xd6>
10007480:	e0ec      	b.n	1000765c <__aeabi_dadd+0x2b0>
10007482:	281f      	cmp	r0, #31
10007484:	dd00      	ble.n	10007488 <__aeabi_dadd+0xdc>
10007486:	e121      	b.n	100076cc <__aeabi_dadd+0x320>
10007488:	2220      	movs	r2, #32
1000748a:	1c0e      	adds	r6, r1, #0
1000748c:	4663      	mov	r3, ip
1000748e:	1a12      	subs	r2, r2, r0
10007490:	4096      	lsls	r6, r2
10007492:	40c3      	lsrs	r3, r0
10007494:	4333      	orrs	r3, r6
10007496:	4666      	mov	r6, ip
10007498:	4096      	lsls	r6, r2
1000749a:	1c32      	adds	r2, r6, #0
1000749c:	1e56      	subs	r6, r2, #1
1000749e:	41b2      	sbcs	r2, r6
100074a0:	4313      	orrs	r3, r2
100074a2:	1c0a      	adds	r2, r1, #0
100074a4:	40c2      	lsrs	r2, r0
100074a6:	1aeb      	subs	r3, r5, r3
100074a8:	429d      	cmp	r5, r3
100074aa:	41b6      	sbcs	r6, r6
100074ac:	1c1d      	adds	r5, r3, #0
100074ae:	1aba      	subs	r2, r7, r2
100074b0:	4276      	negs	r6, r6
100074b2:	1b97      	subs	r7, r2, r6
100074b4:	023b      	lsls	r3, r7, #8
100074b6:	d400      	bmi.n	100074ba <__aeabi_dadd+0x10e>
100074b8:	e097      	b.n	100075ea <__aeabi_dadd+0x23e>
100074ba:	027a      	lsls	r2, r7, #9
100074bc:	0a56      	lsrs	r6, r2, #9
100074be:	2e00      	cmp	r6, #0
100074c0:	d100      	bne.n	100074c4 <__aeabi_dadd+0x118>
100074c2:	e0b6      	b.n	10007632 <__aeabi_dadd+0x286>
100074c4:	1c30      	adds	r0, r6, #0
100074c6:	f001 fb19 	bl	10008afc <__clzsi2>
100074ca:	1c03      	adds	r3, r0, #0
100074cc:	3b08      	subs	r3, #8
100074ce:	2b1f      	cmp	r3, #31
100074d0:	dd00      	ble.n	100074d4 <__aeabi_dadd+0x128>
100074d2:	e0b7      	b.n	10007644 <__aeabi_dadd+0x298>
100074d4:	409e      	lsls	r6, r3
100074d6:	1c37      	adds	r7, r6, #0
100074d8:	2628      	movs	r6, #40	; 0x28
100074da:	1c2a      	adds	r2, r5, #0
100074dc:	1a36      	subs	r6, r6, r0
100074de:	40f2      	lsrs	r2, r6
100074e0:	1c16      	adds	r6, r2, #0
100074e2:	409d      	lsls	r5, r3
100074e4:	433e      	orrs	r6, r7
100074e6:	429c      	cmp	r4, r3
100074e8:	dd00      	ble.n	100074ec <__aeabi_dadd+0x140>
100074ea:	e0b2      	b.n	10007652 <__aeabi_dadd+0x2a6>
100074ec:	1b1c      	subs	r4, r3, r4
100074ee:	1c62      	adds	r2, r4, #1
100074f0:	2a1f      	cmp	r2, #31
100074f2:	dd00      	ble.n	100074f6 <__aeabi_dadd+0x14a>
100074f4:	e0d8      	b.n	100076a8 <__aeabi_dadd+0x2fc>
100074f6:	231f      	movs	r3, #31
100074f8:	1c29      	adds	r1, r5, #0
100074fa:	1b1c      	subs	r4, r3, r4
100074fc:	1c33      	adds	r3, r6, #0
100074fe:	40a5      	lsls	r5, r4
10007500:	40a3      	lsls	r3, r4
10007502:	40d1      	lsrs	r1, r2
10007504:	1e6c      	subs	r4, r5, #1
10007506:	41a5      	sbcs	r5, r4
10007508:	40d6      	lsrs	r6, r2
1000750a:	4319      	orrs	r1, r3
1000750c:	430d      	orrs	r5, r1
1000750e:	1c37      	adds	r7, r6, #0
10007510:	2400      	movs	r4, #0
10007512:	e773      	b.n	100073fc <__aeabi_dadd+0x50>
10007514:	2380      	movs	r3, #128	; 0x80
10007516:	041b      	lsls	r3, r3, #16
10007518:	403b      	ands	r3, r7
1000751a:	4646      	mov	r6, r8
1000751c:	d000      	beq.n	10007520 <__aeabi_dadd+0x174>
1000751e:	e782      	b.n	10007426 <__aeabi_dadd+0x7a>
10007520:	4b8d      	ldr	r3, [pc, #564]	; (10007758 <__aeabi_dadd+0x3ac>)
10007522:	08ed      	lsrs	r5, r5, #3
10007524:	0778      	lsls	r0, r7, #29
10007526:	4305      	orrs	r5, r0
10007528:	08fa      	lsrs	r2, r7, #3
1000752a:	429c      	cmp	r4, r3
1000752c:	d032      	beq.n	10007594 <__aeabi_dadd+0x1e8>
1000752e:	0312      	lsls	r2, r2, #12
10007530:	0564      	lsls	r4, r4, #21
10007532:	0b12      	lsrs	r2, r2, #12
10007534:	0d64      	lsrs	r4, r4, #21
10007536:	e785      	b.n	10007444 <__aeabi_dadd+0x98>
10007538:	1aa3      	subs	r3, r4, r2
1000753a:	2b00      	cmp	r3, #0
1000753c:	dc00      	bgt.n	10007540 <__aeabi_dadd+0x194>
1000753e:	e094      	b.n	1000766a <__aeabi_dadd+0x2be>
10007540:	2a00      	cmp	r2, #0
10007542:	d03c      	beq.n	100075be <__aeabi_dadd+0x212>
10007544:	4a84      	ldr	r2, [pc, #528]	; (10007758 <__aeabi_dadd+0x3ac>)
10007546:	4294      	cmp	r4, r2
10007548:	d100      	bne.n	1000754c <__aeabi_dadd+0x1a0>
1000754a:	e757      	b.n	100073fc <__aeabi_dadd+0x50>
1000754c:	2280      	movs	r2, #128	; 0x80
1000754e:	0412      	lsls	r2, r2, #16
10007550:	4311      	orrs	r1, r2
10007552:	2b38      	cmp	r3, #56	; 0x38
10007554:	dc00      	bgt.n	10007558 <__aeabi_dadd+0x1ac>
10007556:	e105      	b.n	10007764 <__aeabi_dadd+0x3b8>
10007558:	4663      	mov	r3, ip
1000755a:	4319      	orrs	r1, r3
1000755c:	1e48      	subs	r0, r1, #1
1000755e:	4181      	sbcs	r1, r0
10007560:	2200      	movs	r2, #0
10007562:	b2c8      	uxtb	r0, r1
10007564:	1940      	adds	r0, r0, r5
10007566:	42a8      	cmp	r0, r5
10007568:	419b      	sbcs	r3, r3
1000756a:	1c05      	adds	r5, r0, #0
1000756c:	19d2      	adds	r2, r2, r7
1000756e:	425b      	negs	r3, r3
10007570:	18d7      	adds	r7, r2, r3
10007572:	023b      	lsls	r3, r7, #8
10007574:	d539      	bpl.n	100075ea <__aeabi_dadd+0x23e>
10007576:	4b78      	ldr	r3, [pc, #480]	; (10007758 <__aeabi_dadd+0x3ac>)
10007578:	3401      	adds	r4, #1
1000757a:	429c      	cmp	r4, r3
1000757c:	d100      	bne.n	10007580 <__aeabi_dadd+0x1d4>
1000757e:	e14c      	b.n	1000781a <__aeabi_dadd+0x46e>
10007580:	2001      	movs	r0, #1
10007582:	4a76      	ldr	r2, [pc, #472]	; (1000775c <__aeabi_dadd+0x3b0>)
10007584:	086b      	lsrs	r3, r5, #1
10007586:	403a      	ands	r2, r7
10007588:	4028      	ands	r0, r5
1000758a:	4318      	orrs	r0, r3
1000758c:	07d5      	lsls	r5, r2, #31
1000758e:	4305      	orrs	r5, r0
10007590:	0857      	lsrs	r7, r2, #1
10007592:	e733      	b.n	100073fc <__aeabi_dadd+0x50>
10007594:	1c2b      	adds	r3, r5, #0
10007596:	4313      	orrs	r3, r2
10007598:	d048      	beq.n	1000762c <__aeabi_dadd+0x280>
1000759a:	2380      	movs	r3, #128	; 0x80
1000759c:	031b      	lsls	r3, r3, #12
1000759e:	431a      	orrs	r2, r3
100075a0:	0312      	lsls	r2, r2, #12
100075a2:	0b12      	lsrs	r2, r2, #12
100075a4:	e74e      	b.n	10007444 <__aeabi_dadd+0x98>
100075a6:	3801      	subs	r0, #1
100075a8:	2800      	cmp	r0, #0
100075aa:	d178      	bne.n	1000769e <__aeabi_dadd+0x2f2>
100075ac:	4663      	mov	r3, ip
100075ae:	1aee      	subs	r6, r5, r3
100075b0:	42b5      	cmp	r5, r6
100075b2:	419b      	sbcs	r3, r3
100075b4:	1a7a      	subs	r2, r7, r1
100075b6:	425b      	negs	r3, r3
100075b8:	1ad7      	subs	r7, r2, r3
100075ba:	1c35      	adds	r5, r6, #0
100075bc:	e77a      	b.n	100074b4 <__aeabi_dadd+0x108>
100075be:	1c02      	adds	r2, r0, #0
100075c0:	430a      	orrs	r2, r1
100075c2:	d100      	bne.n	100075c6 <__aeabi_dadd+0x21a>
100075c4:	e71a      	b.n	100073fc <__aeabi_dadd+0x50>
100075c6:	3b01      	subs	r3, #1
100075c8:	2b00      	cmp	r3, #0
100075ca:	d000      	beq.n	100075ce <__aeabi_dadd+0x222>
100075cc:	e0f2      	b.n	100077b4 <__aeabi_dadd+0x408>
100075ce:	1940      	adds	r0, r0, r5
100075d0:	42a8      	cmp	r0, r5
100075d2:	419b      	sbcs	r3, r3
100075d4:	19ca      	adds	r2, r1, r7
100075d6:	425b      	negs	r3, r3
100075d8:	18d7      	adds	r7, r2, r3
100075da:	1c05      	adds	r5, r0, #0
100075dc:	e7c9      	b.n	10007572 <__aeabi_dadd+0x1c6>
100075de:	1c13      	adds	r3, r2, #0
100075e0:	4333      	orrs	r3, r6
100075e2:	d100      	bne.n	100075e6 <__aeabi_dadd+0x23a>
100075e4:	e118      	b.n	10007818 <__aeabi_dadd+0x46c>
100075e6:	1c17      	adds	r7, r2, #0
100075e8:	1c35      	adds	r5, r6, #0
100075ea:	4646      	mov	r6, r8
100075ec:	076b      	lsls	r3, r5, #29
100075ee:	d000      	beq.n	100075f2 <__aeabi_dadd+0x246>
100075f0:	e707      	b.n	10007402 <__aeabi_dadd+0x56>
100075f2:	e795      	b.n	10007520 <__aeabi_dadd+0x174>
100075f4:	2800      	cmp	r0, #0
100075f6:	d17a      	bne.n	100076ee <__aeabi_dadd+0x342>
100075f8:	1c62      	adds	r2, r4, #1
100075fa:	0552      	lsls	r2, r2, #21
100075fc:	0d52      	lsrs	r2, r2, #21
100075fe:	2a01      	cmp	r2, #1
10007600:	dc00      	bgt.n	10007604 <__aeabi_dadd+0x258>
10007602:	e0fb      	b.n	100077fc <__aeabi_dadd+0x450>
10007604:	4662      	mov	r2, ip
10007606:	1aaa      	subs	r2, r5, r2
10007608:	4295      	cmp	r5, r2
1000760a:	41b6      	sbcs	r6, r6
1000760c:	4691      	mov	r9, r2
1000760e:	1a78      	subs	r0, r7, r1
10007610:	4272      	negs	r2, r6
10007612:	1a86      	subs	r6, r0, r2
10007614:	0232      	lsls	r2, r6, #8
10007616:	d400      	bmi.n	1000761a <__aeabi_dadd+0x26e>
10007618:	e093      	b.n	10007742 <__aeabi_dadd+0x396>
1000761a:	4662      	mov	r2, ip
1000761c:	1b55      	subs	r5, r2, r5
1000761e:	45ac      	cmp	ip, r5
10007620:	4180      	sbcs	r0, r0
10007622:	1bcf      	subs	r7, r1, r7
10007624:	4240      	negs	r0, r0
10007626:	1a3e      	subs	r6, r7, r0
10007628:	4698      	mov	r8, r3
1000762a:	e748      	b.n	100074be <__aeabi_dadd+0x112>
1000762c:	2200      	movs	r2, #0
1000762e:	2500      	movs	r5, #0
10007630:	e708      	b.n	10007444 <__aeabi_dadd+0x98>
10007632:	1c28      	adds	r0, r5, #0
10007634:	f001 fa62 	bl	10008afc <__clzsi2>
10007638:	3020      	adds	r0, #32
1000763a:	1c03      	adds	r3, r0, #0
1000763c:	3b08      	subs	r3, #8
1000763e:	2b1f      	cmp	r3, #31
10007640:	dc00      	bgt.n	10007644 <__aeabi_dadd+0x298>
10007642:	e747      	b.n	100074d4 <__aeabi_dadd+0x128>
10007644:	3828      	subs	r0, #40	; 0x28
10007646:	4085      	lsls	r5, r0
10007648:	1c2e      	adds	r6, r5, #0
1000764a:	2500      	movs	r5, #0
1000764c:	429c      	cmp	r4, r3
1000764e:	dc00      	bgt.n	10007652 <__aeabi_dadd+0x2a6>
10007650:	e74c      	b.n	100074ec <__aeabi_dadd+0x140>
10007652:	4a42      	ldr	r2, [pc, #264]	; (1000775c <__aeabi_dadd+0x3b0>)
10007654:	1ae4      	subs	r4, r4, r3
10007656:	4016      	ands	r6, r2
10007658:	1c37      	adds	r7, r6, #0
1000765a:	e6cf      	b.n	100073fc <__aeabi_dadd+0x50>
1000765c:	4663      	mov	r3, ip
1000765e:	4319      	orrs	r1, r3
10007660:	1e4b      	subs	r3, r1, #1
10007662:	4199      	sbcs	r1, r3
10007664:	2200      	movs	r2, #0
10007666:	b2cb      	uxtb	r3, r1
10007668:	e71d      	b.n	100074a6 <__aeabi_dadd+0xfa>
1000766a:	2b00      	cmp	r3, #0
1000766c:	d000      	beq.n	10007670 <__aeabi_dadd+0x2c4>
1000766e:	e0f2      	b.n	10007856 <__aeabi_dadd+0x4aa>
10007670:	1c60      	adds	r0, r4, #1
10007672:	0543      	lsls	r3, r0, #21
10007674:	0d5b      	lsrs	r3, r3, #21
10007676:	2b01      	cmp	r3, #1
10007678:	dc00      	bgt.n	1000767c <__aeabi_dadd+0x2d0>
1000767a:	e0a4      	b.n	100077c6 <__aeabi_dadd+0x41a>
1000767c:	4b36      	ldr	r3, [pc, #216]	; (10007758 <__aeabi_dadd+0x3ac>)
1000767e:	4298      	cmp	r0, r3
10007680:	d100      	bne.n	10007684 <__aeabi_dadd+0x2d8>
10007682:	e121      	b.n	100078c8 <__aeabi_dadd+0x51c>
10007684:	4663      	mov	r3, ip
10007686:	195c      	adds	r4, r3, r5
10007688:	42ac      	cmp	r4, r5
1000768a:	419b      	sbcs	r3, r3
1000768c:	19cf      	adds	r7, r1, r7
1000768e:	425b      	negs	r3, r3
10007690:	18fa      	adds	r2, r7, r3
10007692:	0864      	lsrs	r4, r4, #1
10007694:	07d5      	lsls	r5, r2, #31
10007696:	4325      	orrs	r5, r4
10007698:	0857      	lsrs	r7, r2, #1
1000769a:	1c04      	adds	r4, r0, #0
1000769c:	e6ae      	b.n	100073fc <__aeabi_dadd+0x50>
1000769e:	4b2e      	ldr	r3, [pc, #184]	; (10007758 <__aeabi_dadd+0x3ac>)
100076a0:	429c      	cmp	r4, r3
100076a2:	d000      	beq.n	100076a6 <__aeabi_dadd+0x2fa>
100076a4:	e6ea      	b.n	1000747c <__aeabi_dadd+0xd0>
100076a6:	e6a9      	b.n	100073fc <__aeabi_dadd+0x50>
100076a8:	1c21      	adds	r1, r4, #0
100076aa:	1c33      	adds	r3, r6, #0
100076ac:	391f      	subs	r1, #31
100076ae:	40cb      	lsrs	r3, r1
100076b0:	1c19      	adds	r1, r3, #0
100076b2:	2a20      	cmp	r2, #32
100076b4:	d100      	bne.n	100076b8 <__aeabi_dadd+0x30c>
100076b6:	e082      	b.n	100077be <__aeabi_dadd+0x412>
100076b8:	233f      	movs	r3, #63	; 0x3f
100076ba:	1b1c      	subs	r4, r3, r4
100076bc:	40a6      	lsls	r6, r4
100076be:	4335      	orrs	r5, r6
100076c0:	1e6e      	subs	r6, r5, #1
100076c2:	41b5      	sbcs	r5, r6
100076c4:	2700      	movs	r7, #0
100076c6:	430d      	orrs	r5, r1
100076c8:	2400      	movs	r4, #0
100076ca:	e78e      	b.n	100075ea <__aeabi_dadd+0x23e>
100076cc:	1c03      	adds	r3, r0, #0
100076ce:	1c0e      	adds	r6, r1, #0
100076d0:	3b20      	subs	r3, #32
100076d2:	40de      	lsrs	r6, r3
100076d4:	2820      	cmp	r0, #32
100076d6:	d074      	beq.n	100077c2 <__aeabi_dadd+0x416>
100076d8:	2340      	movs	r3, #64	; 0x40
100076da:	1a1b      	subs	r3, r3, r0
100076dc:	4099      	lsls	r1, r3
100076de:	1c0b      	adds	r3, r1, #0
100076e0:	4662      	mov	r2, ip
100076e2:	4313      	orrs	r3, r2
100076e4:	1e59      	subs	r1, r3, #1
100076e6:	418b      	sbcs	r3, r1
100076e8:	2200      	movs	r2, #0
100076ea:	4333      	orrs	r3, r6
100076ec:	e6db      	b.n	100074a6 <__aeabi_dadd+0xfa>
100076ee:	2c00      	cmp	r4, #0
100076f0:	d050      	beq.n	10007794 <__aeabi_dadd+0x3e8>
100076f2:	4c19      	ldr	r4, [pc, #100]	; (10007758 <__aeabi_dadd+0x3ac>)
100076f4:	42a2      	cmp	r2, r4
100076f6:	d100      	bne.n	100076fa <__aeabi_dadd+0x34e>
100076f8:	e0a8      	b.n	1000784c <__aeabi_dadd+0x4a0>
100076fa:	2480      	movs	r4, #128	; 0x80
100076fc:	0424      	lsls	r4, r4, #16
100076fe:	4240      	negs	r0, r0
10007700:	4327      	orrs	r7, r4
10007702:	2838      	cmp	r0, #56	; 0x38
10007704:	dd00      	ble.n	10007708 <__aeabi_dadd+0x35c>
10007706:	e0d9      	b.n	100078bc <__aeabi_dadd+0x510>
10007708:	281f      	cmp	r0, #31
1000770a:	dd00      	ble.n	1000770e <__aeabi_dadd+0x362>
1000770c:	e139      	b.n	10007982 <__aeabi_dadd+0x5d6>
1000770e:	2420      	movs	r4, #32
10007710:	1c3e      	adds	r6, r7, #0
10007712:	1a24      	subs	r4, r4, r0
10007714:	40a6      	lsls	r6, r4
10007716:	46b0      	mov	r8, r6
10007718:	1c2e      	adds	r6, r5, #0
1000771a:	46a1      	mov	r9, r4
1000771c:	40c6      	lsrs	r6, r0
1000771e:	4644      	mov	r4, r8
10007720:	4326      	orrs	r6, r4
10007722:	464c      	mov	r4, r9
10007724:	40a5      	lsls	r5, r4
10007726:	1e6c      	subs	r4, r5, #1
10007728:	41a5      	sbcs	r5, r4
1000772a:	40c7      	lsrs	r7, r0
1000772c:	4335      	orrs	r5, r6
1000772e:	4660      	mov	r0, ip
10007730:	1b45      	subs	r5, r0, r5
10007732:	1bcf      	subs	r7, r1, r7
10007734:	45ac      	cmp	ip, r5
10007736:	4189      	sbcs	r1, r1
10007738:	4249      	negs	r1, r1
1000773a:	1a7f      	subs	r7, r7, r1
1000773c:	1c14      	adds	r4, r2, #0
1000773e:	4698      	mov	r8, r3
10007740:	e6b8      	b.n	100074b4 <__aeabi_dadd+0x108>
10007742:	464b      	mov	r3, r9
10007744:	464d      	mov	r5, r9
10007746:	4333      	orrs	r3, r6
10007748:	d000      	beq.n	1000774c <__aeabi_dadd+0x3a0>
1000774a:	e6b8      	b.n	100074be <__aeabi_dadd+0x112>
1000774c:	2600      	movs	r6, #0
1000774e:	2700      	movs	r7, #0
10007750:	2400      	movs	r4, #0
10007752:	2500      	movs	r5, #0
10007754:	e6e4      	b.n	10007520 <__aeabi_dadd+0x174>
10007756:	46c0      	nop			; (mov r8, r8)
10007758:	000007ff 	.word	0x000007ff
1000775c:	ff7fffff 	.word	0xff7fffff
10007760:	800fffff 	.word	0x800fffff
10007764:	2b1f      	cmp	r3, #31
10007766:	dc5b      	bgt.n	10007820 <__aeabi_dadd+0x474>
10007768:	2220      	movs	r2, #32
1000776a:	1c08      	adds	r0, r1, #0
1000776c:	1ad2      	subs	r2, r2, r3
1000776e:	4090      	lsls	r0, r2
10007770:	4681      	mov	r9, r0
10007772:	4660      	mov	r0, ip
10007774:	4692      	mov	sl, r2
10007776:	40d8      	lsrs	r0, r3
10007778:	464a      	mov	r2, r9
1000777a:	4310      	orrs	r0, r2
1000777c:	4681      	mov	r9, r0
1000777e:	4652      	mov	r2, sl
10007780:	4660      	mov	r0, ip
10007782:	4090      	lsls	r0, r2
10007784:	1c02      	adds	r2, r0, #0
10007786:	1e50      	subs	r0, r2, #1
10007788:	4182      	sbcs	r2, r0
1000778a:	4648      	mov	r0, r9
1000778c:	4310      	orrs	r0, r2
1000778e:	1c0a      	adds	r2, r1, #0
10007790:	40da      	lsrs	r2, r3
10007792:	e6e7      	b.n	10007564 <__aeabi_dadd+0x1b8>
10007794:	1c3c      	adds	r4, r7, #0
10007796:	432c      	orrs	r4, r5
10007798:	d058      	beq.n	1000784c <__aeabi_dadd+0x4a0>
1000779a:	43c0      	mvns	r0, r0
1000779c:	2800      	cmp	r0, #0
1000779e:	d151      	bne.n	10007844 <__aeabi_dadd+0x498>
100077a0:	4660      	mov	r0, ip
100077a2:	1b45      	subs	r5, r0, r5
100077a4:	45ac      	cmp	ip, r5
100077a6:	4180      	sbcs	r0, r0
100077a8:	1bcf      	subs	r7, r1, r7
100077aa:	4240      	negs	r0, r0
100077ac:	1a3f      	subs	r7, r7, r0
100077ae:	1c14      	adds	r4, r2, #0
100077b0:	4698      	mov	r8, r3
100077b2:	e67f      	b.n	100074b4 <__aeabi_dadd+0x108>
100077b4:	4a8f      	ldr	r2, [pc, #572]	; (100079f4 <__aeabi_dadd+0x648>)
100077b6:	4294      	cmp	r4, r2
100077b8:	d000      	beq.n	100077bc <__aeabi_dadd+0x410>
100077ba:	e6ca      	b.n	10007552 <__aeabi_dadd+0x1a6>
100077bc:	e61e      	b.n	100073fc <__aeabi_dadd+0x50>
100077be:	2600      	movs	r6, #0
100077c0:	e77d      	b.n	100076be <__aeabi_dadd+0x312>
100077c2:	2300      	movs	r3, #0
100077c4:	e78c      	b.n	100076e0 <__aeabi_dadd+0x334>
100077c6:	1c3b      	adds	r3, r7, #0
100077c8:	432b      	orrs	r3, r5
100077ca:	2c00      	cmp	r4, #0
100077cc:	d000      	beq.n	100077d0 <__aeabi_dadd+0x424>
100077ce:	e0bd      	b.n	1000794c <__aeabi_dadd+0x5a0>
100077d0:	2b00      	cmp	r3, #0
100077d2:	d100      	bne.n	100077d6 <__aeabi_dadd+0x42a>
100077d4:	e0f5      	b.n	100079c2 <__aeabi_dadd+0x616>
100077d6:	4663      	mov	r3, ip
100077d8:	430b      	orrs	r3, r1
100077da:	d100      	bne.n	100077de <__aeabi_dadd+0x432>
100077dc:	e60e      	b.n	100073fc <__aeabi_dadd+0x50>
100077de:	4663      	mov	r3, ip
100077e0:	195b      	adds	r3, r3, r5
100077e2:	42ab      	cmp	r3, r5
100077e4:	4180      	sbcs	r0, r0
100077e6:	19ca      	adds	r2, r1, r7
100077e8:	4240      	negs	r0, r0
100077ea:	1817      	adds	r7, r2, r0
100077ec:	023a      	lsls	r2, r7, #8
100077ee:	d400      	bmi.n	100077f2 <__aeabi_dadd+0x446>
100077f0:	e0fc      	b.n	100079ec <__aeabi_dadd+0x640>
100077f2:	4a81      	ldr	r2, [pc, #516]	; (100079f8 <__aeabi_dadd+0x64c>)
100077f4:	1c1d      	adds	r5, r3, #0
100077f6:	4017      	ands	r7, r2
100077f8:	3401      	adds	r4, #1
100077fa:	e5ff      	b.n	100073fc <__aeabi_dadd+0x50>
100077fc:	1c3a      	adds	r2, r7, #0
100077fe:	432a      	orrs	r2, r5
10007800:	2c00      	cmp	r4, #0
10007802:	d151      	bne.n	100078a8 <__aeabi_dadd+0x4fc>
10007804:	2a00      	cmp	r2, #0
10007806:	d000      	beq.n	1000780a <__aeabi_dadd+0x45e>
10007808:	e085      	b.n	10007916 <__aeabi_dadd+0x56a>
1000780a:	4662      	mov	r2, ip
1000780c:	430a      	orrs	r2, r1
1000780e:	d003      	beq.n	10007818 <__aeabi_dadd+0x46c>
10007810:	1c0f      	adds	r7, r1, #0
10007812:	4665      	mov	r5, ip
10007814:	4698      	mov	r8, r3
10007816:	e5f1      	b.n	100073fc <__aeabi_dadd+0x50>
10007818:	2600      	movs	r6, #0
1000781a:	2700      	movs	r7, #0
1000781c:	2500      	movs	r5, #0
1000781e:	e67f      	b.n	10007520 <__aeabi_dadd+0x174>
10007820:	1c18      	adds	r0, r3, #0
10007822:	1c0a      	adds	r2, r1, #0
10007824:	3820      	subs	r0, #32
10007826:	40c2      	lsrs	r2, r0
10007828:	2b20      	cmp	r3, #32
1000782a:	d100      	bne.n	1000782e <__aeabi_dadd+0x482>
1000782c:	e0a7      	b.n	1000797e <__aeabi_dadd+0x5d2>
1000782e:	2040      	movs	r0, #64	; 0x40
10007830:	1ac0      	subs	r0, r0, r3
10007832:	4081      	lsls	r1, r0
10007834:	1c08      	adds	r0, r1, #0
10007836:	4663      	mov	r3, ip
10007838:	4318      	orrs	r0, r3
1000783a:	1e41      	subs	r1, r0, #1
1000783c:	4188      	sbcs	r0, r1
1000783e:	4310      	orrs	r0, r2
10007840:	2200      	movs	r2, #0
10007842:	e68f      	b.n	10007564 <__aeabi_dadd+0x1b8>
10007844:	4c6b      	ldr	r4, [pc, #428]	; (100079f4 <__aeabi_dadd+0x648>)
10007846:	42a2      	cmp	r2, r4
10007848:	d000      	beq.n	1000784c <__aeabi_dadd+0x4a0>
1000784a:	e75a      	b.n	10007702 <__aeabi_dadd+0x356>
1000784c:	1c0f      	adds	r7, r1, #0
1000784e:	4665      	mov	r5, ip
10007850:	1c14      	adds	r4, r2, #0
10007852:	4698      	mov	r8, r3
10007854:	e5d2      	b.n	100073fc <__aeabi_dadd+0x50>
10007856:	2c00      	cmp	r4, #0
10007858:	d13a      	bne.n	100078d0 <__aeabi_dadd+0x524>
1000785a:	1c38      	adds	r0, r7, #0
1000785c:	4328      	orrs	r0, r5
1000785e:	d071      	beq.n	10007944 <__aeabi_dadd+0x598>
10007860:	43db      	mvns	r3, r3
10007862:	2b00      	cmp	r3, #0
10007864:	d018      	beq.n	10007898 <__aeabi_dadd+0x4ec>
10007866:	4863      	ldr	r0, [pc, #396]	; (100079f4 <__aeabi_dadd+0x648>)
10007868:	4282      	cmp	r2, r0
1000786a:	d06b      	beq.n	10007944 <__aeabi_dadd+0x598>
1000786c:	2b38      	cmp	r3, #56	; 0x38
1000786e:	dd00      	ble.n	10007872 <__aeabi_dadd+0x4c6>
10007870:	e09d      	b.n	100079ae <__aeabi_dadd+0x602>
10007872:	2b1f      	cmp	r3, #31
10007874:	dd00      	ble.n	10007878 <__aeabi_dadd+0x4cc>
10007876:	e0a7      	b.n	100079c8 <__aeabi_dadd+0x61c>
10007878:	2020      	movs	r0, #32
1000787a:	1c3c      	adds	r4, r7, #0
1000787c:	1ac0      	subs	r0, r0, r3
1000787e:	4084      	lsls	r4, r0
10007880:	46a1      	mov	r9, r4
10007882:	1c2c      	adds	r4, r5, #0
10007884:	4682      	mov	sl, r0
10007886:	40dc      	lsrs	r4, r3
10007888:	4648      	mov	r0, r9
1000788a:	4304      	orrs	r4, r0
1000788c:	4650      	mov	r0, sl
1000788e:	4085      	lsls	r5, r0
10007890:	1e68      	subs	r0, r5, #1
10007892:	4185      	sbcs	r5, r0
10007894:	40df      	lsrs	r7, r3
10007896:	4325      	orrs	r5, r4
10007898:	4465      	add	r5, ip
1000789a:	4565      	cmp	r5, ip
1000789c:	419b      	sbcs	r3, r3
1000789e:	187f      	adds	r7, r7, r1
100078a0:	425b      	negs	r3, r3
100078a2:	18ff      	adds	r7, r7, r3
100078a4:	1c14      	adds	r4, r2, #0
100078a6:	e664      	b.n	10007572 <__aeabi_dadd+0x1c6>
100078a8:	2a00      	cmp	r2, #0
100078aa:	d119      	bne.n	100078e0 <__aeabi_dadd+0x534>
100078ac:	4662      	mov	r2, ip
100078ae:	430a      	orrs	r2, r1
100078b0:	d077      	beq.n	100079a2 <__aeabi_dadd+0x5f6>
100078b2:	1c0f      	adds	r7, r1, #0
100078b4:	4665      	mov	r5, ip
100078b6:	4698      	mov	r8, r3
100078b8:	4c4e      	ldr	r4, [pc, #312]	; (100079f4 <__aeabi_dadd+0x648>)
100078ba:	e59f      	b.n	100073fc <__aeabi_dadd+0x50>
100078bc:	433d      	orrs	r5, r7
100078be:	1e6f      	subs	r7, r5, #1
100078c0:	41bd      	sbcs	r5, r7
100078c2:	2700      	movs	r7, #0
100078c4:	b2ed      	uxtb	r5, r5
100078c6:	e732      	b.n	1000772e <__aeabi_dadd+0x382>
100078c8:	1c04      	adds	r4, r0, #0
100078ca:	2700      	movs	r7, #0
100078cc:	2500      	movs	r5, #0
100078ce:	e627      	b.n	10007520 <__aeabi_dadd+0x174>
100078d0:	4848      	ldr	r0, [pc, #288]	; (100079f4 <__aeabi_dadd+0x648>)
100078d2:	4282      	cmp	r2, r0
100078d4:	d036      	beq.n	10007944 <__aeabi_dadd+0x598>
100078d6:	2080      	movs	r0, #128	; 0x80
100078d8:	0400      	lsls	r0, r0, #16
100078da:	425b      	negs	r3, r3
100078dc:	4307      	orrs	r7, r0
100078de:	e7c5      	b.n	1000786c <__aeabi_dadd+0x4c0>
100078e0:	4662      	mov	r2, ip
100078e2:	430a      	orrs	r2, r1
100078e4:	d049      	beq.n	1000797a <__aeabi_dadd+0x5ce>
100078e6:	2480      	movs	r4, #128	; 0x80
100078e8:	08ed      	lsrs	r5, r5, #3
100078ea:	0778      	lsls	r0, r7, #29
100078ec:	08fa      	lsrs	r2, r7, #3
100078ee:	0324      	lsls	r4, r4, #12
100078f0:	4328      	orrs	r0, r5
100078f2:	4222      	tst	r2, r4
100078f4:	d009      	beq.n	1000790a <__aeabi_dadd+0x55e>
100078f6:	08ce      	lsrs	r6, r1, #3
100078f8:	4226      	tst	r6, r4
100078fa:	d106      	bne.n	1000790a <__aeabi_dadd+0x55e>
100078fc:	4662      	mov	r2, ip
100078fe:	074f      	lsls	r7, r1, #29
10007900:	1c38      	adds	r0, r7, #0
10007902:	08d2      	lsrs	r2, r2, #3
10007904:	4310      	orrs	r0, r2
10007906:	4698      	mov	r8, r3
10007908:	1c32      	adds	r2, r6, #0
1000790a:	00d2      	lsls	r2, r2, #3
1000790c:	0f47      	lsrs	r7, r0, #29
1000790e:	4317      	orrs	r7, r2
10007910:	00c5      	lsls	r5, r0, #3
10007912:	4c38      	ldr	r4, [pc, #224]	; (100079f4 <__aeabi_dadd+0x648>)
10007914:	e572      	b.n	100073fc <__aeabi_dadd+0x50>
10007916:	4662      	mov	r2, ip
10007918:	430a      	orrs	r2, r1
1000791a:	d100      	bne.n	1000791e <__aeabi_dadd+0x572>
1000791c:	e56e      	b.n	100073fc <__aeabi_dadd+0x50>
1000791e:	4662      	mov	r2, ip
10007920:	1aae      	subs	r6, r5, r2
10007922:	42b5      	cmp	r5, r6
10007924:	4192      	sbcs	r2, r2
10007926:	1a78      	subs	r0, r7, r1
10007928:	4252      	negs	r2, r2
1000792a:	1a82      	subs	r2, r0, r2
1000792c:	0210      	lsls	r0, r2, #8
1000792e:	d400      	bmi.n	10007932 <__aeabi_dadd+0x586>
10007930:	e655      	b.n	100075de <__aeabi_dadd+0x232>
10007932:	4662      	mov	r2, ip
10007934:	1b55      	subs	r5, r2, r5
10007936:	45ac      	cmp	ip, r5
10007938:	4180      	sbcs	r0, r0
1000793a:	1bca      	subs	r2, r1, r7
1000793c:	4240      	negs	r0, r0
1000793e:	1a17      	subs	r7, r2, r0
10007940:	4698      	mov	r8, r3
10007942:	e55b      	b.n	100073fc <__aeabi_dadd+0x50>
10007944:	1c0f      	adds	r7, r1, #0
10007946:	4665      	mov	r5, ip
10007948:	1c14      	adds	r4, r2, #0
1000794a:	e557      	b.n	100073fc <__aeabi_dadd+0x50>
1000794c:	2b00      	cmp	r3, #0
1000794e:	d034      	beq.n	100079ba <__aeabi_dadd+0x60e>
10007950:	4663      	mov	r3, ip
10007952:	430b      	orrs	r3, r1
10007954:	d011      	beq.n	1000797a <__aeabi_dadd+0x5ce>
10007956:	2480      	movs	r4, #128	; 0x80
10007958:	08ed      	lsrs	r5, r5, #3
1000795a:	0778      	lsls	r0, r7, #29
1000795c:	08fa      	lsrs	r2, r7, #3
1000795e:	0324      	lsls	r4, r4, #12
10007960:	4328      	orrs	r0, r5
10007962:	4222      	tst	r2, r4
10007964:	d0d1      	beq.n	1000790a <__aeabi_dadd+0x55e>
10007966:	08cb      	lsrs	r3, r1, #3
10007968:	4223      	tst	r3, r4
1000796a:	d1ce      	bne.n	1000790a <__aeabi_dadd+0x55e>
1000796c:	4662      	mov	r2, ip
1000796e:	074f      	lsls	r7, r1, #29
10007970:	1c38      	adds	r0, r7, #0
10007972:	08d2      	lsrs	r2, r2, #3
10007974:	4310      	orrs	r0, r2
10007976:	1c1a      	adds	r2, r3, #0
10007978:	e7c7      	b.n	1000790a <__aeabi_dadd+0x55e>
1000797a:	4c1e      	ldr	r4, [pc, #120]	; (100079f4 <__aeabi_dadd+0x648>)
1000797c:	e53e      	b.n	100073fc <__aeabi_dadd+0x50>
1000797e:	2000      	movs	r0, #0
10007980:	e759      	b.n	10007836 <__aeabi_dadd+0x48a>
10007982:	1c04      	adds	r4, r0, #0
10007984:	1c3e      	adds	r6, r7, #0
10007986:	3c20      	subs	r4, #32
10007988:	40e6      	lsrs	r6, r4
1000798a:	1c34      	adds	r4, r6, #0
1000798c:	2820      	cmp	r0, #32
1000798e:	d02b      	beq.n	100079e8 <__aeabi_dadd+0x63c>
10007990:	2640      	movs	r6, #64	; 0x40
10007992:	1a30      	subs	r0, r6, r0
10007994:	4087      	lsls	r7, r0
10007996:	433d      	orrs	r5, r7
10007998:	1e6f      	subs	r7, r5, #1
1000799a:	41bd      	sbcs	r5, r7
1000799c:	2700      	movs	r7, #0
1000799e:	4325      	orrs	r5, r4
100079a0:	e6c5      	b.n	1000772e <__aeabi_dadd+0x382>
100079a2:	2780      	movs	r7, #128	; 0x80
100079a4:	2600      	movs	r6, #0
100079a6:	03ff      	lsls	r7, r7, #15
100079a8:	4c12      	ldr	r4, [pc, #72]	; (100079f4 <__aeabi_dadd+0x648>)
100079aa:	2500      	movs	r5, #0
100079ac:	e5b8      	b.n	10007520 <__aeabi_dadd+0x174>
100079ae:	433d      	orrs	r5, r7
100079b0:	1e6f      	subs	r7, r5, #1
100079b2:	41bd      	sbcs	r5, r7
100079b4:	2700      	movs	r7, #0
100079b6:	b2ed      	uxtb	r5, r5
100079b8:	e76e      	b.n	10007898 <__aeabi_dadd+0x4ec>
100079ba:	1c0f      	adds	r7, r1, #0
100079bc:	4665      	mov	r5, ip
100079be:	4c0d      	ldr	r4, [pc, #52]	; (100079f4 <__aeabi_dadd+0x648>)
100079c0:	e51c      	b.n	100073fc <__aeabi_dadd+0x50>
100079c2:	1c0f      	adds	r7, r1, #0
100079c4:	4665      	mov	r5, ip
100079c6:	e519      	b.n	100073fc <__aeabi_dadd+0x50>
100079c8:	1c1c      	adds	r4, r3, #0
100079ca:	1c38      	adds	r0, r7, #0
100079cc:	3c20      	subs	r4, #32
100079ce:	40e0      	lsrs	r0, r4
100079d0:	1c04      	adds	r4, r0, #0
100079d2:	2b20      	cmp	r3, #32
100079d4:	d00c      	beq.n	100079f0 <__aeabi_dadd+0x644>
100079d6:	2040      	movs	r0, #64	; 0x40
100079d8:	1ac3      	subs	r3, r0, r3
100079da:	409f      	lsls	r7, r3
100079dc:	433d      	orrs	r5, r7
100079de:	1e6f      	subs	r7, r5, #1
100079e0:	41bd      	sbcs	r5, r7
100079e2:	2700      	movs	r7, #0
100079e4:	4325      	orrs	r5, r4
100079e6:	e757      	b.n	10007898 <__aeabi_dadd+0x4ec>
100079e8:	2700      	movs	r7, #0
100079ea:	e7d4      	b.n	10007996 <__aeabi_dadd+0x5ea>
100079ec:	1c1d      	adds	r5, r3, #0
100079ee:	e5fc      	b.n	100075ea <__aeabi_dadd+0x23e>
100079f0:	2700      	movs	r7, #0
100079f2:	e7f3      	b.n	100079dc <__aeabi_dadd+0x630>
100079f4:	000007ff 	.word	0x000007ff
100079f8:	ff7fffff 	.word	0xff7fffff

100079fc <__eqdf2>:
100079fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100079fe:	465f      	mov	r7, fp
10007a00:	464d      	mov	r5, r9
10007a02:	4644      	mov	r4, r8
10007a04:	4656      	mov	r6, sl
10007a06:	b4f0      	push	{r4, r5, r6, r7}
10007a08:	031f      	lsls	r7, r3, #12
10007a0a:	005c      	lsls	r4, r3, #1
10007a0c:	0fdb      	lsrs	r3, r3, #31
10007a0e:	4699      	mov	r9, r3
10007a10:	4b1b      	ldr	r3, [pc, #108]	; (10007a80 <__eqdf2+0x84>)
10007a12:	030e      	lsls	r6, r1, #12
10007a14:	004d      	lsls	r5, r1, #1
10007a16:	0fc9      	lsrs	r1, r1, #31
10007a18:	4684      	mov	ip, r0
10007a1a:	0b36      	lsrs	r6, r6, #12
10007a1c:	0d6d      	lsrs	r5, r5, #21
10007a1e:	468b      	mov	fp, r1
10007a20:	4690      	mov	r8, r2
10007a22:	0b3f      	lsrs	r7, r7, #12
10007a24:	0d64      	lsrs	r4, r4, #21
10007a26:	429d      	cmp	r5, r3
10007a28:	d00c      	beq.n	10007a44 <__eqdf2+0x48>
10007a2a:	4b15      	ldr	r3, [pc, #84]	; (10007a80 <__eqdf2+0x84>)
10007a2c:	429c      	cmp	r4, r3
10007a2e:	d010      	beq.n	10007a52 <__eqdf2+0x56>
10007a30:	2301      	movs	r3, #1
10007a32:	42a5      	cmp	r5, r4
10007a34:	d014      	beq.n	10007a60 <__eqdf2+0x64>
10007a36:	1c18      	adds	r0, r3, #0
10007a38:	bc3c      	pop	{r2, r3, r4, r5}
10007a3a:	4690      	mov	r8, r2
10007a3c:	4699      	mov	r9, r3
10007a3e:	46a2      	mov	sl, r4
10007a40:	46ab      	mov	fp, r5
10007a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007a44:	1c31      	adds	r1, r6, #0
10007a46:	2301      	movs	r3, #1
10007a48:	4301      	orrs	r1, r0
10007a4a:	d1f4      	bne.n	10007a36 <__eqdf2+0x3a>
10007a4c:	4b0c      	ldr	r3, [pc, #48]	; (10007a80 <__eqdf2+0x84>)
10007a4e:	429c      	cmp	r4, r3
10007a50:	d1ee      	bne.n	10007a30 <__eqdf2+0x34>
10007a52:	433a      	orrs	r2, r7
10007a54:	2301      	movs	r3, #1
10007a56:	2a00      	cmp	r2, #0
10007a58:	d1ed      	bne.n	10007a36 <__eqdf2+0x3a>
10007a5a:	2301      	movs	r3, #1
10007a5c:	42a5      	cmp	r5, r4
10007a5e:	d1ea      	bne.n	10007a36 <__eqdf2+0x3a>
10007a60:	42be      	cmp	r6, r7
10007a62:	d1e8      	bne.n	10007a36 <__eqdf2+0x3a>
10007a64:	45c4      	cmp	ip, r8
10007a66:	d1e6      	bne.n	10007a36 <__eqdf2+0x3a>
10007a68:	45cb      	cmp	fp, r9
10007a6a:	d006      	beq.n	10007a7a <__eqdf2+0x7e>
10007a6c:	2d00      	cmp	r5, #0
10007a6e:	d1e2      	bne.n	10007a36 <__eqdf2+0x3a>
10007a70:	4330      	orrs	r0, r6
10007a72:	1c03      	adds	r3, r0, #0
10007a74:	1e58      	subs	r0, r3, #1
10007a76:	4183      	sbcs	r3, r0
10007a78:	e7dd      	b.n	10007a36 <__eqdf2+0x3a>
10007a7a:	2300      	movs	r3, #0
10007a7c:	e7db      	b.n	10007a36 <__eqdf2+0x3a>
10007a7e:	46c0      	nop			; (mov r8, r8)
10007a80:	000007ff 	.word	0x000007ff

10007a84 <__gedf2>:
10007a84:	b5f0      	push	{r4, r5, r6, r7, lr}
10007a86:	4657      	mov	r7, sl
10007a88:	4645      	mov	r5, r8
10007a8a:	464e      	mov	r6, r9
10007a8c:	b4e0      	push	{r5, r6, r7}
10007a8e:	030f      	lsls	r7, r1, #12
10007a90:	004e      	lsls	r6, r1, #1
10007a92:	0fc9      	lsrs	r1, r1, #31
10007a94:	468a      	mov	sl, r1
10007a96:	4932      	ldr	r1, [pc, #200]	; (10007b60 <__gedf2+0xdc>)
10007a98:	031d      	lsls	r5, r3, #12
10007a9a:	005c      	lsls	r4, r3, #1
10007a9c:	4684      	mov	ip, r0
10007a9e:	0b3f      	lsrs	r7, r7, #12
10007aa0:	0d76      	lsrs	r6, r6, #21
10007aa2:	4690      	mov	r8, r2
10007aa4:	0b2d      	lsrs	r5, r5, #12
10007aa6:	0d64      	lsrs	r4, r4, #21
10007aa8:	0fdb      	lsrs	r3, r3, #31
10007aaa:	428e      	cmp	r6, r1
10007aac:	d00f      	beq.n	10007ace <__gedf2+0x4a>
10007aae:	428c      	cmp	r4, r1
10007ab0:	d039      	beq.n	10007b26 <__gedf2+0xa2>
10007ab2:	2e00      	cmp	r6, #0
10007ab4:	d110      	bne.n	10007ad8 <__gedf2+0x54>
10007ab6:	4338      	orrs	r0, r7
10007ab8:	4241      	negs	r1, r0
10007aba:	4141      	adcs	r1, r0
10007abc:	4689      	mov	r9, r1
10007abe:	2c00      	cmp	r4, #0
10007ac0:	d127      	bne.n	10007b12 <__gedf2+0x8e>
10007ac2:	432a      	orrs	r2, r5
10007ac4:	d125      	bne.n	10007b12 <__gedf2+0x8e>
10007ac6:	2000      	movs	r0, #0
10007ac8:	2900      	cmp	r1, #0
10007aca:	d10e      	bne.n	10007aea <__gedf2+0x66>
10007acc:	e008      	b.n	10007ae0 <__gedf2+0x5c>
10007ace:	1c39      	adds	r1, r7, #0
10007ad0:	4301      	orrs	r1, r0
10007ad2:	d12e      	bne.n	10007b32 <__gedf2+0xae>
10007ad4:	42b4      	cmp	r4, r6
10007ad6:	d026      	beq.n	10007b26 <__gedf2+0xa2>
10007ad8:	2c00      	cmp	r4, #0
10007ada:	d00b      	beq.n	10007af4 <__gedf2+0x70>
10007adc:	459a      	cmp	sl, r3
10007ade:	d00d      	beq.n	10007afc <__gedf2+0x78>
10007ae0:	4653      	mov	r3, sl
10007ae2:	4259      	negs	r1, r3
10007ae4:	2301      	movs	r3, #1
10007ae6:	4319      	orrs	r1, r3
10007ae8:	1c08      	adds	r0, r1, #0
10007aea:	bc1c      	pop	{r2, r3, r4}
10007aec:	4690      	mov	r8, r2
10007aee:	4699      	mov	r9, r3
10007af0:	46a2      	mov	sl, r4
10007af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007af4:	432a      	orrs	r2, r5
10007af6:	d0f3      	beq.n	10007ae0 <__gedf2+0x5c>
10007af8:	459a      	cmp	sl, r3
10007afa:	d1f1      	bne.n	10007ae0 <__gedf2+0x5c>
10007afc:	42a6      	cmp	r6, r4
10007afe:	dcef      	bgt.n	10007ae0 <__gedf2+0x5c>
10007b00:	da1a      	bge.n	10007b38 <__gedf2+0xb4>
10007b02:	4650      	mov	r0, sl
10007b04:	4241      	negs	r1, r0
10007b06:	4148      	adcs	r0, r1
10007b08:	2301      	movs	r3, #1
10007b0a:	4241      	negs	r1, r0
10007b0c:	4319      	orrs	r1, r3
10007b0e:	1c08      	adds	r0, r1, #0
10007b10:	e7eb      	b.n	10007aea <__gedf2+0x66>
10007b12:	464a      	mov	r2, r9
10007b14:	2a00      	cmp	r2, #0
10007b16:	d0e1      	beq.n	10007adc <__gedf2+0x58>
10007b18:	4258      	negs	r0, r3
10007b1a:	4158      	adcs	r0, r3
10007b1c:	2201      	movs	r2, #1
10007b1e:	4241      	negs	r1, r0
10007b20:	4311      	orrs	r1, r2
10007b22:	1c08      	adds	r0, r1, #0
10007b24:	e7e1      	b.n	10007aea <__gedf2+0x66>
10007b26:	1c29      	adds	r1, r5, #0
10007b28:	4311      	orrs	r1, r2
10007b2a:	d102      	bne.n	10007b32 <__gedf2+0xae>
10007b2c:	2e00      	cmp	r6, #0
10007b2e:	d0c2      	beq.n	10007ab6 <__gedf2+0x32>
10007b30:	e7d4      	b.n	10007adc <__gedf2+0x58>
10007b32:	2002      	movs	r0, #2
10007b34:	4240      	negs	r0, r0
10007b36:	e7d8      	b.n	10007aea <__gedf2+0x66>
10007b38:	42af      	cmp	r7, r5
10007b3a:	d8d1      	bhi.n	10007ae0 <__gedf2+0x5c>
10007b3c:	d009      	beq.n	10007b52 <__gedf2+0xce>
10007b3e:	2000      	movs	r0, #0
10007b40:	42af      	cmp	r7, r5
10007b42:	d2d2      	bcs.n	10007aea <__gedf2+0x66>
10007b44:	4650      	mov	r0, sl
10007b46:	4241      	negs	r1, r0
10007b48:	4148      	adcs	r0, r1
10007b4a:	2301      	movs	r3, #1
10007b4c:	4240      	negs	r0, r0
10007b4e:	4318      	orrs	r0, r3
10007b50:	e7cb      	b.n	10007aea <__gedf2+0x66>
10007b52:	45c4      	cmp	ip, r8
10007b54:	d8c4      	bhi.n	10007ae0 <__gedf2+0x5c>
10007b56:	2000      	movs	r0, #0
10007b58:	45c4      	cmp	ip, r8
10007b5a:	d3f3      	bcc.n	10007b44 <__gedf2+0xc0>
10007b5c:	e7c5      	b.n	10007aea <__gedf2+0x66>
10007b5e:	46c0      	nop			; (mov r8, r8)
10007b60:	000007ff 	.word	0x000007ff

10007b64 <__ledf2>:
10007b64:	b5f0      	push	{r4, r5, r6, r7, lr}
10007b66:	465f      	mov	r7, fp
10007b68:	464d      	mov	r5, r9
10007b6a:	4644      	mov	r4, r8
10007b6c:	4656      	mov	r6, sl
10007b6e:	4680      	mov	r8, r0
10007b70:	b4f0      	push	{r4, r5, r6, r7}
10007b72:	1c06      	adds	r6, r0, #0
10007b74:	0308      	lsls	r0, r1, #12
10007b76:	0b00      	lsrs	r0, r0, #12
10007b78:	4684      	mov	ip, r0
10007b7a:	482c      	ldr	r0, [pc, #176]	; (10007c2c <__ledf2+0xc8>)
10007b7c:	004c      	lsls	r4, r1, #1
10007b7e:	031f      	lsls	r7, r3, #12
10007b80:	005d      	lsls	r5, r3, #1
10007b82:	0fc9      	lsrs	r1, r1, #31
10007b84:	0d64      	lsrs	r4, r4, #21
10007b86:	468b      	mov	fp, r1
10007b88:	4691      	mov	r9, r2
10007b8a:	0b3f      	lsrs	r7, r7, #12
10007b8c:	0d6d      	lsrs	r5, r5, #21
10007b8e:	0fdb      	lsrs	r3, r3, #31
10007b90:	4284      	cmp	r4, r0
10007b92:	d012      	beq.n	10007bba <__ledf2+0x56>
10007b94:	4285      	cmp	r5, r0
10007b96:	d025      	beq.n	10007be4 <__ledf2+0x80>
10007b98:	2c00      	cmp	r4, #0
10007b9a:	d114      	bne.n	10007bc6 <__ledf2+0x62>
10007b9c:	4661      	mov	r1, ip
10007b9e:	430e      	orrs	r6, r1
10007ba0:	4270      	negs	r0, r6
10007ba2:	4146      	adcs	r6, r0
10007ba4:	2d00      	cmp	r5, #0
10007ba6:	d035      	beq.n	10007c14 <__ledf2+0xb0>
10007ba8:	2e00      	cmp	r6, #0
10007baa:	d021      	beq.n	10007bf0 <__ledf2+0x8c>
10007bac:	4258      	negs	r0, r3
10007bae:	4158      	adcs	r0, r3
10007bb0:	2101      	movs	r1, #1
10007bb2:	4243      	negs	r3, r0
10007bb4:	430b      	orrs	r3, r1
10007bb6:	1c18      	adds	r0, r3, #0
10007bb8:	e00e      	b.n	10007bd8 <__ledf2+0x74>
10007bba:	4661      	mov	r1, ip
10007bbc:	2002      	movs	r0, #2
10007bbe:	4331      	orrs	r1, r6
10007bc0:	d10a      	bne.n	10007bd8 <__ledf2+0x74>
10007bc2:	42a5      	cmp	r5, r4
10007bc4:	d00e      	beq.n	10007be4 <__ledf2+0x80>
10007bc6:	2d00      	cmp	r5, #0
10007bc8:	d112      	bne.n	10007bf0 <__ledf2+0x8c>
10007bca:	433a      	orrs	r2, r7
10007bcc:	d110      	bne.n	10007bf0 <__ledf2+0x8c>
10007bce:	465b      	mov	r3, fp
10007bd0:	4259      	negs	r1, r3
10007bd2:	2301      	movs	r3, #1
10007bd4:	4319      	orrs	r1, r3
10007bd6:	1c08      	adds	r0, r1, #0
10007bd8:	bc3c      	pop	{r2, r3, r4, r5}
10007bda:	4690      	mov	r8, r2
10007bdc:	4699      	mov	r9, r3
10007bde:	46a2      	mov	sl, r4
10007be0:	46ab      	mov	fp, r5
10007be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007be4:	1c39      	adds	r1, r7, #0
10007be6:	2002      	movs	r0, #2
10007be8:	4311      	orrs	r1, r2
10007bea:	d1f5      	bne.n	10007bd8 <__ledf2+0x74>
10007bec:	2c00      	cmp	r4, #0
10007bee:	d0d5      	beq.n	10007b9c <__ledf2+0x38>
10007bf0:	459b      	cmp	fp, r3
10007bf2:	d1ec      	bne.n	10007bce <__ledf2+0x6a>
10007bf4:	42ac      	cmp	r4, r5
10007bf6:	dcea      	bgt.n	10007bce <__ledf2+0x6a>
10007bf8:	db05      	blt.n	10007c06 <__ledf2+0xa2>
10007bfa:	45bc      	cmp	ip, r7
10007bfc:	d8e7      	bhi.n	10007bce <__ledf2+0x6a>
10007bfe:	d00f      	beq.n	10007c20 <__ledf2+0xbc>
10007c00:	2000      	movs	r0, #0
10007c02:	45bc      	cmp	ip, r7
10007c04:	d2e8      	bcs.n	10007bd8 <__ledf2+0x74>
10007c06:	4658      	mov	r0, fp
10007c08:	4241      	negs	r1, r0
10007c0a:	4148      	adcs	r0, r1
10007c0c:	4241      	negs	r1, r0
10007c0e:	2001      	movs	r0, #1
10007c10:	4308      	orrs	r0, r1
10007c12:	e7e1      	b.n	10007bd8 <__ledf2+0x74>
10007c14:	433a      	orrs	r2, r7
10007c16:	d1c7      	bne.n	10007ba8 <__ledf2+0x44>
10007c18:	2000      	movs	r0, #0
10007c1a:	2e00      	cmp	r6, #0
10007c1c:	d1dc      	bne.n	10007bd8 <__ledf2+0x74>
10007c1e:	e7d6      	b.n	10007bce <__ledf2+0x6a>
10007c20:	45c8      	cmp	r8, r9
10007c22:	d8d4      	bhi.n	10007bce <__ledf2+0x6a>
10007c24:	2000      	movs	r0, #0
10007c26:	45c8      	cmp	r8, r9
10007c28:	d3ed      	bcc.n	10007c06 <__ledf2+0xa2>
10007c2a:	e7d5      	b.n	10007bd8 <__ledf2+0x74>
10007c2c:	000007ff 	.word	0x000007ff

10007c30 <__aeabi_dmul>:
10007c30:	b5f0      	push	{r4, r5, r6, r7, lr}
10007c32:	465f      	mov	r7, fp
10007c34:	4656      	mov	r6, sl
10007c36:	464d      	mov	r5, r9
10007c38:	4644      	mov	r4, r8
10007c3a:	b4f0      	push	{r4, r5, r6, r7}
10007c3c:	1c05      	adds	r5, r0, #0
10007c3e:	1c06      	adds	r6, r0, #0
10007c40:	0308      	lsls	r0, r1, #12
10007c42:	b087      	sub	sp, #28
10007c44:	4699      	mov	r9, r3
10007c46:	004f      	lsls	r7, r1, #1
10007c48:	0b03      	lsrs	r3, r0, #12
10007c4a:	0fcc      	lsrs	r4, r1, #31
10007c4c:	4692      	mov	sl, r2
10007c4e:	469b      	mov	fp, r3
10007c50:	0d7f      	lsrs	r7, r7, #21
10007c52:	9401      	str	r4, [sp, #4]
10007c54:	d067      	beq.n	10007d26 <__aeabi_dmul+0xf6>
10007c56:	4b6c      	ldr	r3, [pc, #432]	; (10007e08 <__aeabi_dmul+0x1d8>)
10007c58:	429f      	cmp	r7, r3
10007c5a:	d036      	beq.n	10007cca <__aeabi_dmul+0x9a>
10007c5c:	2080      	movs	r0, #128	; 0x80
10007c5e:	465b      	mov	r3, fp
10007c60:	0340      	lsls	r0, r0, #13
10007c62:	4318      	orrs	r0, r3
10007c64:	00c0      	lsls	r0, r0, #3
10007c66:	0f6b      	lsrs	r3, r5, #29
10007c68:	4318      	orrs	r0, r3
10007c6a:	4b68      	ldr	r3, [pc, #416]	; (10007e0c <__aeabi_dmul+0x1dc>)
10007c6c:	4683      	mov	fp, r0
10007c6e:	469c      	mov	ip, r3
10007c70:	2300      	movs	r3, #0
10007c72:	4698      	mov	r8, r3
10007c74:	00ee      	lsls	r6, r5, #3
10007c76:	4467      	add	r7, ip
10007c78:	9300      	str	r3, [sp, #0]
10007c7a:	464b      	mov	r3, r9
10007c7c:	4649      	mov	r1, r9
10007c7e:	031d      	lsls	r5, r3, #12
10007c80:	0fc9      	lsrs	r1, r1, #31
10007c82:	005b      	lsls	r3, r3, #1
10007c84:	4652      	mov	r2, sl
10007c86:	0b2d      	lsrs	r5, r5, #12
10007c88:	0d5b      	lsrs	r3, r3, #21
10007c8a:	4689      	mov	r9, r1
10007c8c:	d100      	bne.n	10007c90 <__aeabi_dmul+0x60>
10007c8e:	e06e      	b.n	10007d6e <__aeabi_dmul+0x13e>
10007c90:	495d      	ldr	r1, [pc, #372]	; (10007e08 <__aeabi_dmul+0x1d8>)
10007c92:	428b      	cmp	r3, r1
10007c94:	d064      	beq.n	10007d60 <__aeabi_dmul+0x130>
10007c96:	2080      	movs	r0, #128	; 0x80
10007c98:	495c      	ldr	r1, [pc, #368]	; (10007e0c <__aeabi_dmul+0x1dc>)
10007c9a:	0340      	lsls	r0, r0, #13
10007c9c:	468c      	mov	ip, r1
10007c9e:	2100      	movs	r1, #0
10007ca0:	4305      	orrs	r5, r0
10007ca2:	00ed      	lsls	r5, r5, #3
10007ca4:	0f50      	lsrs	r0, r2, #29
10007ca6:	4305      	orrs	r5, r0
10007ca8:	00d2      	lsls	r2, r2, #3
10007caa:	4463      	add	r3, ip
10007cac:	4648      	mov	r0, r9
10007cae:	18ff      	adds	r7, r7, r3
10007cb0:	1c7b      	adds	r3, r7, #1
10007cb2:	469a      	mov	sl, r3
10007cb4:	9b00      	ldr	r3, [sp, #0]
10007cb6:	4060      	eors	r0, r4
10007cb8:	9002      	str	r0, [sp, #8]
10007cba:	430b      	orrs	r3, r1
10007cbc:	2b0f      	cmp	r3, #15
10007cbe:	d900      	bls.n	10007cc2 <__aeabi_dmul+0x92>
10007cc0:	e0ac      	b.n	10007e1c <__aeabi_dmul+0x1ec>
10007cc2:	4853      	ldr	r0, [pc, #332]	; (10007e10 <__aeabi_dmul+0x1e0>)
10007cc4:	009b      	lsls	r3, r3, #2
10007cc6:	58c3      	ldr	r3, [r0, r3]
10007cc8:	469f      	mov	pc, r3
10007cca:	465b      	mov	r3, fp
10007ccc:	431d      	orrs	r5, r3
10007cce:	d000      	beq.n	10007cd2 <__aeabi_dmul+0xa2>
10007cd0:	e082      	b.n	10007dd8 <__aeabi_dmul+0x1a8>
10007cd2:	2308      	movs	r3, #8
10007cd4:	9300      	str	r3, [sp, #0]
10007cd6:	2300      	movs	r3, #0
10007cd8:	469b      	mov	fp, r3
10007cda:	3302      	adds	r3, #2
10007cdc:	2600      	movs	r6, #0
10007cde:	4698      	mov	r8, r3
10007ce0:	e7cb      	b.n	10007c7a <__aeabi_dmul+0x4a>
10007ce2:	9b02      	ldr	r3, [sp, #8]
10007ce4:	9301      	str	r3, [sp, #4]
10007ce6:	4643      	mov	r3, r8
10007ce8:	2b02      	cmp	r3, #2
10007cea:	d159      	bne.n	10007da0 <__aeabi_dmul+0x170>
10007cec:	2401      	movs	r4, #1
10007cee:	2500      	movs	r5, #0
10007cf0:	2600      	movs	r6, #0
10007cf2:	9b01      	ldr	r3, [sp, #4]
10007cf4:	401c      	ands	r4, r3
10007cf6:	4b44      	ldr	r3, [pc, #272]	; (10007e08 <__aeabi_dmul+0x1d8>)
10007cf8:	2100      	movs	r1, #0
10007cfa:	032d      	lsls	r5, r5, #12
10007cfc:	0d0a      	lsrs	r2, r1, #20
10007cfe:	0512      	lsls	r2, r2, #20
10007d00:	0b2d      	lsrs	r5, r5, #12
10007d02:	4315      	orrs	r5, r2
10007d04:	4a43      	ldr	r2, [pc, #268]	; (10007e14 <__aeabi_dmul+0x1e4>)
10007d06:	051b      	lsls	r3, r3, #20
10007d08:	4015      	ands	r5, r2
10007d0a:	431d      	orrs	r5, r3
10007d0c:	006d      	lsls	r5, r5, #1
10007d0e:	07e4      	lsls	r4, r4, #31
10007d10:	086d      	lsrs	r5, r5, #1
10007d12:	4325      	orrs	r5, r4
10007d14:	1c30      	adds	r0, r6, #0
10007d16:	1c29      	adds	r1, r5, #0
10007d18:	b007      	add	sp, #28
10007d1a:	bc3c      	pop	{r2, r3, r4, r5}
10007d1c:	4690      	mov	r8, r2
10007d1e:	4699      	mov	r9, r3
10007d20:	46a2      	mov	sl, r4
10007d22:	46ab      	mov	fp, r5
10007d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007d26:	432b      	orrs	r3, r5
10007d28:	d04e      	beq.n	10007dc8 <__aeabi_dmul+0x198>
10007d2a:	465b      	mov	r3, fp
10007d2c:	2b00      	cmp	r3, #0
10007d2e:	d100      	bne.n	10007d32 <__aeabi_dmul+0x102>
10007d30:	e185      	b.n	1000803e <__aeabi_dmul+0x40e>
10007d32:	4658      	mov	r0, fp
10007d34:	f000 fee2 	bl	10008afc <__clzsi2>
10007d38:	1c02      	adds	r2, r0, #0
10007d3a:	2328      	movs	r3, #40	; 0x28
10007d3c:	1c29      	adds	r1, r5, #0
10007d3e:	1a9b      	subs	r3, r3, r2
10007d40:	1c16      	adds	r6, r2, #0
10007d42:	4658      	mov	r0, fp
10007d44:	40d9      	lsrs	r1, r3
10007d46:	3e08      	subs	r6, #8
10007d48:	40b0      	lsls	r0, r6
10007d4a:	1c0b      	adds	r3, r1, #0
10007d4c:	40b5      	lsls	r5, r6
10007d4e:	4303      	orrs	r3, r0
10007d50:	469b      	mov	fp, r3
10007d52:	1c2e      	adds	r6, r5, #0
10007d54:	2300      	movs	r3, #0
10007d56:	4f30      	ldr	r7, [pc, #192]	; (10007e18 <__aeabi_dmul+0x1e8>)
10007d58:	9300      	str	r3, [sp, #0]
10007d5a:	1abf      	subs	r7, r7, r2
10007d5c:	4698      	mov	r8, r3
10007d5e:	e78c      	b.n	10007c7a <__aeabi_dmul+0x4a>
10007d60:	4651      	mov	r1, sl
10007d62:	4329      	orrs	r1, r5
10007d64:	d12e      	bne.n	10007dc4 <__aeabi_dmul+0x194>
10007d66:	2500      	movs	r5, #0
10007d68:	2200      	movs	r2, #0
10007d6a:	2102      	movs	r1, #2
10007d6c:	e79e      	b.n	10007cac <__aeabi_dmul+0x7c>
10007d6e:	4651      	mov	r1, sl
10007d70:	4329      	orrs	r1, r5
10007d72:	d023      	beq.n	10007dbc <__aeabi_dmul+0x18c>
10007d74:	2d00      	cmp	r5, #0
10007d76:	d100      	bne.n	10007d7a <__aeabi_dmul+0x14a>
10007d78:	e154      	b.n	10008024 <__aeabi_dmul+0x3f4>
10007d7a:	1c28      	adds	r0, r5, #0
10007d7c:	f000 febe 	bl	10008afc <__clzsi2>
10007d80:	1c03      	adds	r3, r0, #0
10007d82:	2128      	movs	r1, #40	; 0x28
10007d84:	4650      	mov	r0, sl
10007d86:	1ac9      	subs	r1, r1, r3
10007d88:	1c1a      	adds	r2, r3, #0
10007d8a:	40c8      	lsrs	r0, r1
10007d8c:	4651      	mov	r1, sl
10007d8e:	3a08      	subs	r2, #8
10007d90:	4091      	lsls	r1, r2
10007d92:	4095      	lsls	r5, r2
10007d94:	1c0a      	adds	r2, r1, #0
10007d96:	4305      	orrs	r5, r0
10007d98:	481f      	ldr	r0, [pc, #124]	; (10007e18 <__aeabi_dmul+0x1e8>)
10007d9a:	2100      	movs	r1, #0
10007d9c:	1ac3      	subs	r3, r0, r3
10007d9e:	e785      	b.n	10007cac <__aeabi_dmul+0x7c>
10007da0:	2b03      	cmp	r3, #3
10007da2:	d100      	bne.n	10007da6 <__aeabi_dmul+0x176>
10007da4:	e1c2      	b.n	1000812c <__aeabi_dmul+0x4fc>
10007da6:	2b01      	cmp	r3, #1
10007da8:	d000      	beq.n	10007dac <__aeabi_dmul+0x17c>
10007daa:	e16d      	b.n	10008088 <__aeabi_dmul+0x458>
10007dac:	4644      	mov	r4, r8
10007dae:	9b01      	ldr	r3, [sp, #4]
10007db0:	2500      	movs	r5, #0
10007db2:	401c      	ands	r4, r3
10007db4:	b2e4      	uxtb	r4, r4
10007db6:	2300      	movs	r3, #0
10007db8:	2600      	movs	r6, #0
10007dba:	e79d      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10007dbc:	2500      	movs	r5, #0
10007dbe:	2200      	movs	r2, #0
10007dc0:	2101      	movs	r1, #1
10007dc2:	e773      	b.n	10007cac <__aeabi_dmul+0x7c>
10007dc4:	2103      	movs	r1, #3
10007dc6:	e771      	b.n	10007cac <__aeabi_dmul+0x7c>
10007dc8:	2304      	movs	r3, #4
10007dca:	9300      	str	r3, [sp, #0]
10007dcc:	2300      	movs	r3, #0
10007dce:	469b      	mov	fp, r3
10007dd0:	3301      	adds	r3, #1
10007dd2:	2600      	movs	r6, #0
10007dd4:	4698      	mov	r8, r3
10007dd6:	e750      	b.n	10007c7a <__aeabi_dmul+0x4a>
10007dd8:	230c      	movs	r3, #12
10007dda:	9300      	str	r3, [sp, #0]
10007ddc:	3b09      	subs	r3, #9
10007dde:	4698      	mov	r8, r3
10007de0:	e74b      	b.n	10007c7a <__aeabi_dmul+0x4a>
10007de2:	2580      	movs	r5, #128	; 0x80
10007de4:	2400      	movs	r4, #0
10007de6:	032d      	lsls	r5, r5, #12
10007de8:	2600      	movs	r6, #0
10007dea:	4b07      	ldr	r3, [pc, #28]	; (10007e08 <__aeabi_dmul+0x1d8>)
10007dec:	e784      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10007dee:	464b      	mov	r3, r9
10007df0:	46ab      	mov	fp, r5
10007df2:	1c16      	adds	r6, r2, #0
10007df4:	9301      	str	r3, [sp, #4]
10007df6:	4688      	mov	r8, r1
10007df8:	e775      	b.n	10007ce6 <__aeabi_dmul+0xb6>
10007dfa:	9b02      	ldr	r3, [sp, #8]
10007dfc:	46ab      	mov	fp, r5
10007dfe:	1c16      	adds	r6, r2, #0
10007e00:	9301      	str	r3, [sp, #4]
10007e02:	4688      	mov	r8, r1
10007e04:	e76f      	b.n	10007ce6 <__aeabi_dmul+0xb6>
10007e06:	46c0      	nop			; (mov r8, r8)
10007e08:	000007ff 	.word	0x000007ff
10007e0c:	fffffc01 	.word	0xfffffc01
10007e10:	1000ceb0 	.word	0x1000ceb0
10007e14:	800fffff 	.word	0x800fffff
10007e18:	fffffc0d 	.word	0xfffffc0d
10007e1c:	0c33      	lsrs	r3, r6, #16
10007e1e:	0436      	lsls	r6, r6, #16
10007e20:	0c36      	lsrs	r6, r6, #16
10007e22:	469c      	mov	ip, r3
10007e24:	1c33      	adds	r3, r6, #0
10007e26:	0c14      	lsrs	r4, r2, #16
10007e28:	0412      	lsls	r2, r2, #16
10007e2a:	0c12      	lsrs	r2, r2, #16
10007e2c:	4353      	muls	r3, r2
10007e2e:	4698      	mov	r8, r3
10007e30:	4663      	mov	r3, ip
10007e32:	4353      	muls	r3, r2
10007e34:	4699      	mov	r9, r3
10007e36:	4663      	mov	r3, ip
10007e38:	4363      	muls	r3, r4
10007e3a:	9301      	str	r3, [sp, #4]
10007e3c:	1c33      	adds	r3, r6, #0
10007e3e:	4641      	mov	r1, r8
10007e40:	4363      	muls	r3, r4
10007e42:	0c09      	lsrs	r1, r1, #16
10007e44:	444b      	add	r3, r9
10007e46:	185b      	adds	r3, r3, r1
10007e48:	4599      	cmp	r9, r3
10007e4a:	d905      	bls.n	10007e58 <__aeabi_dmul+0x228>
10007e4c:	2080      	movs	r0, #128	; 0x80
10007e4e:	0240      	lsls	r0, r0, #9
10007e50:	4681      	mov	r9, r0
10007e52:	9901      	ldr	r1, [sp, #4]
10007e54:	4449      	add	r1, r9
10007e56:	9101      	str	r1, [sp, #4]
10007e58:	0c19      	lsrs	r1, r3, #16
10007e5a:	9103      	str	r1, [sp, #12]
10007e5c:	4641      	mov	r1, r8
10007e5e:	0409      	lsls	r1, r1, #16
10007e60:	0c09      	lsrs	r1, r1, #16
10007e62:	041b      	lsls	r3, r3, #16
10007e64:	185b      	adds	r3, r3, r1
10007e66:	9304      	str	r3, [sp, #16]
10007e68:	0c2b      	lsrs	r3, r5, #16
10007e6a:	4698      	mov	r8, r3
10007e6c:	1c33      	adds	r3, r6, #0
10007e6e:	042d      	lsls	r5, r5, #16
10007e70:	0c29      	lsrs	r1, r5, #16
10007e72:	434b      	muls	r3, r1
10007e74:	4660      	mov	r0, ip
10007e76:	9300      	str	r3, [sp, #0]
10007e78:	4643      	mov	r3, r8
10007e7a:	4665      	mov	r5, ip
10007e7c:	4358      	muls	r0, r3
10007e7e:	435e      	muls	r6, r3
10007e80:	9b00      	ldr	r3, [sp, #0]
10007e82:	434d      	muls	r5, r1
10007e84:	0c1b      	lsrs	r3, r3, #16
10007e86:	4699      	mov	r9, r3
10007e88:	19ae      	adds	r6, r5, r6
10007e8a:	444e      	add	r6, r9
10007e8c:	4684      	mov	ip, r0
10007e8e:	42b5      	cmp	r5, r6
10007e90:	d903      	bls.n	10007e9a <__aeabi_dmul+0x26a>
10007e92:	2380      	movs	r3, #128	; 0x80
10007e94:	025b      	lsls	r3, r3, #9
10007e96:	4699      	mov	r9, r3
10007e98:	44cc      	add	ip, r9
10007e9a:	0c35      	lsrs	r5, r6, #16
10007e9c:	1c2b      	adds	r3, r5, #0
10007e9e:	9803      	ldr	r0, [sp, #12]
10007ea0:	4463      	add	r3, ip
10007ea2:	4684      	mov	ip, r0
10007ea4:	9305      	str	r3, [sp, #20]
10007ea6:	9b00      	ldr	r3, [sp, #0]
10007ea8:	0436      	lsls	r6, r6, #16
10007eaa:	041b      	lsls	r3, r3, #16
10007eac:	0c1b      	lsrs	r3, r3, #16
10007eae:	18f3      	adds	r3, r6, r3
10007eb0:	449c      	add	ip, r3
10007eb2:	4660      	mov	r0, ip
10007eb4:	9003      	str	r0, [sp, #12]
10007eb6:	4658      	mov	r0, fp
10007eb8:	0405      	lsls	r5, r0, #16
10007eba:	0c06      	lsrs	r6, r0, #16
10007ebc:	0c28      	lsrs	r0, r5, #16
10007ebe:	4684      	mov	ip, r0
10007ec0:	4350      	muls	r0, r2
10007ec2:	1c35      	adds	r5, r6, #0
10007ec4:	4681      	mov	r9, r0
10007ec6:	4660      	mov	r0, ip
10007ec8:	4365      	muls	r5, r4
10007eca:	4344      	muls	r4, r0
10007ecc:	4648      	mov	r0, r9
10007ece:	0c00      	lsrs	r0, r0, #16
10007ed0:	4683      	mov	fp, r0
10007ed2:	4372      	muls	r2, r6
10007ed4:	1914      	adds	r4, r2, r4
10007ed6:	445c      	add	r4, fp
10007ed8:	42a2      	cmp	r2, r4
10007eda:	d903      	bls.n	10007ee4 <__aeabi_dmul+0x2b4>
10007edc:	2280      	movs	r2, #128	; 0x80
10007ede:	0252      	lsls	r2, r2, #9
10007ee0:	4693      	mov	fp, r2
10007ee2:	445d      	add	r5, fp
10007ee4:	0c22      	lsrs	r2, r4, #16
10007ee6:	18ad      	adds	r5, r5, r2
10007ee8:	464a      	mov	r2, r9
10007eea:	0412      	lsls	r2, r2, #16
10007eec:	0c12      	lsrs	r2, r2, #16
10007eee:	0424      	lsls	r4, r4, #16
10007ef0:	4640      	mov	r0, r8
10007ef2:	18a4      	adds	r4, r4, r2
10007ef4:	4662      	mov	r2, ip
10007ef6:	434a      	muls	r2, r1
10007ef8:	4371      	muls	r1, r6
10007efa:	4346      	muls	r6, r0
10007efc:	4660      	mov	r0, ip
10007efe:	9600      	str	r6, [sp, #0]
10007f00:	4646      	mov	r6, r8
10007f02:	4370      	muls	r0, r6
10007f04:	4680      	mov	r8, r0
10007f06:	0c10      	lsrs	r0, r2, #16
10007f08:	4684      	mov	ip, r0
10007f0a:	4488      	add	r8, r1
10007f0c:	44e0      	add	r8, ip
10007f0e:	4541      	cmp	r1, r8
10007f10:	d905      	bls.n	10007f1e <__aeabi_dmul+0x2ee>
10007f12:	2180      	movs	r1, #128	; 0x80
10007f14:	0249      	lsls	r1, r1, #9
10007f16:	468c      	mov	ip, r1
10007f18:	9900      	ldr	r1, [sp, #0]
10007f1a:	4461      	add	r1, ip
10007f1c:	9100      	str	r1, [sp, #0]
10007f1e:	9801      	ldr	r0, [sp, #4]
10007f20:	9903      	ldr	r1, [sp, #12]
10007f22:	4684      	mov	ip, r0
10007f24:	4461      	add	r1, ip
10007f26:	4299      	cmp	r1, r3
10007f28:	419b      	sbcs	r3, r3
10007f2a:	425b      	negs	r3, r3
10007f2c:	4699      	mov	r9, r3
10007f2e:	9805      	ldr	r0, [sp, #20]
10007f30:	4643      	mov	r3, r8
10007f32:	4684      	mov	ip, r0
10007f34:	0412      	lsls	r2, r2, #16
10007f36:	0c12      	lsrs	r2, r2, #16
10007f38:	041b      	lsls	r3, r3, #16
10007f3a:	189b      	adds	r3, r3, r2
10007f3c:	4463      	add	r3, ip
10007f3e:	469c      	mov	ip, r3
10007f40:	46ab      	mov	fp, r5
10007f42:	4283      	cmp	r3, r0
10007f44:	419b      	sbcs	r3, r3
10007f46:	4640      	mov	r0, r8
10007f48:	190a      	adds	r2, r1, r4
10007f4a:	44cc      	add	ip, r9
10007f4c:	42a2      	cmp	r2, r4
10007f4e:	4189      	sbcs	r1, r1
10007f50:	44e3      	add	fp, ip
10007f52:	45cc      	cmp	ip, r9
10007f54:	41b6      	sbcs	r6, r6
10007f56:	465c      	mov	r4, fp
10007f58:	0c00      	lsrs	r0, r0, #16
10007f5a:	4680      	mov	r8, r0
10007f5c:	4249      	negs	r1, r1
10007f5e:	4276      	negs	r6, r6
10007f60:	425b      	negs	r3, r3
10007f62:	1864      	adds	r4, r4, r1
10007f64:	4333      	orrs	r3, r6
10007f66:	4498      	add	r8, r3
10007f68:	428c      	cmp	r4, r1
10007f6a:	4189      	sbcs	r1, r1
10007f6c:	45ab      	cmp	fp, r5
10007f6e:	419b      	sbcs	r3, r3
10007f70:	4249      	negs	r1, r1
10007f72:	425b      	negs	r3, r3
10007f74:	4319      	orrs	r1, r3
10007f76:	1c0d      	adds	r5, r1, #0
10007f78:	9b00      	ldr	r3, [sp, #0]
10007f7a:	4445      	add	r5, r8
10007f7c:	18ee      	adds	r6, r5, r3
10007f7e:	0276      	lsls	r6, r6, #9
10007f80:	0de5      	lsrs	r5, r4, #23
10007f82:	432e      	orrs	r6, r5
10007f84:	46b3      	mov	fp, r6
10007f86:	9b04      	ldr	r3, [sp, #16]
10007f88:	0256      	lsls	r6, r2, #9
10007f8a:	431e      	orrs	r6, r3
10007f8c:	1e73      	subs	r3, r6, #1
10007f8e:	419e      	sbcs	r6, r3
10007f90:	465b      	mov	r3, fp
10007f92:	0dd2      	lsrs	r2, r2, #23
10007f94:	4332      	orrs	r2, r6
10007f96:	0266      	lsls	r6, r4, #9
10007f98:	4316      	orrs	r6, r2
10007f9a:	01db      	lsls	r3, r3, #7
10007f9c:	d50a      	bpl.n	10007fb4 <__aeabi_dmul+0x384>
10007f9e:	2301      	movs	r3, #1
10007fa0:	4033      	ands	r3, r6
10007fa2:	0876      	lsrs	r6, r6, #1
10007fa4:	431e      	orrs	r6, r3
10007fa6:	465b      	mov	r3, fp
10007fa8:	07db      	lsls	r3, r3, #31
10007faa:	431e      	orrs	r6, r3
10007fac:	465b      	mov	r3, fp
10007fae:	085b      	lsrs	r3, r3, #1
10007fb0:	469b      	mov	fp, r3
10007fb2:	4657      	mov	r7, sl
10007fb4:	4b63      	ldr	r3, [pc, #396]	; (10008144 <__aeabi_dmul+0x514>)
10007fb6:	18fb      	adds	r3, r7, r3
10007fb8:	2b00      	cmp	r3, #0
10007fba:	dd5a      	ble.n	10008072 <__aeabi_dmul+0x442>
10007fbc:	0772      	lsls	r2, r6, #29
10007fbe:	d009      	beq.n	10007fd4 <__aeabi_dmul+0x3a4>
10007fc0:	220f      	movs	r2, #15
10007fc2:	4032      	ands	r2, r6
10007fc4:	2a04      	cmp	r2, #4
10007fc6:	d005      	beq.n	10007fd4 <__aeabi_dmul+0x3a4>
10007fc8:	1d32      	adds	r2, r6, #4
10007fca:	42b2      	cmp	r2, r6
10007fcc:	41b6      	sbcs	r6, r6
10007fce:	4276      	negs	r6, r6
10007fd0:	44b3      	add	fp, r6
10007fd2:	1c16      	adds	r6, r2, #0
10007fd4:	465a      	mov	r2, fp
10007fd6:	01d2      	lsls	r2, r2, #7
10007fd8:	d506      	bpl.n	10007fe8 <__aeabi_dmul+0x3b8>
10007fda:	465a      	mov	r2, fp
10007fdc:	4b5a      	ldr	r3, [pc, #360]	; (10008148 <__aeabi_dmul+0x518>)
10007fde:	401a      	ands	r2, r3
10007fe0:	2380      	movs	r3, #128	; 0x80
10007fe2:	4693      	mov	fp, r2
10007fe4:	00db      	lsls	r3, r3, #3
10007fe6:	18fb      	adds	r3, r7, r3
10007fe8:	4a58      	ldr	r2, [pc, #352]	; (1000814c <__aeabi_dmul+0x51c>)
10007fea:	4293      	cmp	r3, r2
10007fec:	dd34      	ble.n	10008058 <__aeabi_dmul+0x428>
10007fee:	2401      	movs	r4, #1
10007ff0:	9b02      	ldr	r3, [sp, #8]
10007ff2:	2500      	movs	r5, #0
10007ff4:	401c      	ands	r4, r3
10007ff6:	2600      	movs	r6, #0
10007ff8:	4b55      	ldr	r3, [pc, #340]	; (10008150 <__aeabi_dmul+0x520>)
10007ffa:	e67d      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10007ffc:	2080      	movs	r0, #128	; 0x80
10007ffe:	465b      	mov	r3, fp
10008000:	0300      	lsls	r0, r0, #12
10008002:	4203      	tst	r3, r0
10008004:	d008      	beq.n	10008018 <__aeabi_dmul+0x3e8>
10008006:	4205      	tst	r5, r0
10008008:	d106      	bne.n	10008018 <__aeabi_dmul+0x3e8>
1000800a:	4305      	orrs	r5, r0
1000800c:	032d      	lsls	r5, r5, #12
1000800e:	0b2d      	lsrs	r5, r5, #12
10008010:	464c      	mov	r4, r9
10008012:	1c16      	adds	r6, r2, #0
10008014:	4b4e      	ldr	r3, [pc, #312]	; (10008150 <__aeabi_dmul+0x520>)
10008016:	e66f      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008018:	465d      	mov	r5, fp
1000801a:	4305      	orrs	r5, r0
1000801c:	032d      	lsls	r5, r5, #12
1000801e:	0b2d      	lsrs	r5, r5, #12
10008020:	4b4b      	ldr	r3, [pc, #300]	; (10008150 <__aeabi_dmul+0x520>)
10008022:	e669      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008024:	4650      	mov	r0, sl
10008026:	f000 fd69 	bl	10008afc <__clzsi2>
1000802a:	1c03      	adds	r3, r0, #0
1000802c:	3320      	adds	r3, #32
1000802e:	2b27      	cmp	r3, #39	; 0x27
10008030:	dc00      	bgt.n	10008034 <__aeabi_dmul+0x404>
10008032:	e6a6      	b.n	10007d82 <__aeabi_dmul+0x152>
10008034:	4655      	mov	r5, sl
10008036:	3808      	subs	r0, #8
10008038:	4085      	lsls	r5, r0
1000803a:	2200      	movs	r2, #0
1000803c:	e6ac      	b.n	10007d98 <__aeabi_dmul+0x168>
1000803e:	1c28      	adds	r0, r5, #0
10008040:	f000 fd5c 	bl	10008afc <__clzsi2>
10008044:	1c02      	adds	r2, r0, #0
10008046:	3220      	adds	r2, #32
10008048:	2a27      	cmp	r2, #39	; 0x27
1000804a:	dc00      	bgt.n	1000804e <__aeabi_dmul+0x41e>
1000804c:	e675      	b.n	10007d3a <__aeabi_dmul+0x10a>
1000804e:	3808      	subs	r0, #8
10008050:	4085      	lsls	r5, r0
10008052:	2600      	movs	r6, #0
10008054:	46ab      	mov	fp, r5
10008056:	e67d      	b.n	10007d54 <__aeabi_dmul+0x124>
10008058:	465a      	mov	r2, fp
1000805a:	08f6      	lsrs	r6, r6, #3
1000805c:	0752      	lsls	r2, r2, #29
1000805e:	4316      	orrs	r6, r2
10008060:	465a      	mov	r2, fp
10008062:	2401      	movs	r4, #1
10008064:	0255      	lsls	r5, r2, #9
10008066:	9a02      	ldr	r2, [sp, #8]
10008068:	055b      	lsls	r3, r3, #21
1000806a:	0b2d      	lsrs	r5, r5, #12
1000806c:	0d5b      	lsrs	r3, r3, #21
1000806e:	4014      	ands	r4, r2
10008070:	e642      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008072:	4d38      	ldr	r5, [pc, #224]	; (10008154 <__aeabi_dmul+0x524>)
10008074:	1bed      	subs	r5, r5, r7
10008076:	2d38      	cmp	r5, #56	; 0x38
10008078:	dd0a      	ble.n	10008090 <__aeabi_dmul+0x460>
1000807a:	2401      	movs	r4, #1
1000807c:	9b02      	ldr	r3, [sp, #8]
1000807e:	2500      	movs	r5, #0
10008080:	401c      	ands	r4, r3
10008082:	2600      	movs	r6, #0
10008084:	2300      	movs	r3, #0
10008086:	e637      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008088:	9b01      	ldr	r3, [sp, #4]
1000808a:	4657      	mov	r7, sl
1000808c:	9302      	str	r3, [sp, #8]
1000808e:	e791      	b.n	10007fb4 <__aeabi_dmul+0x384>
10008090:	2d1f      	cmp	r5, #31
10008092:	dc25      	bgt.n	100080e0 <__aeabi_dmul+0x4b0>
10008094:	4b30      	ldr	r3, [pc, #192]	; (10008158 <__aeabi_dmul+0x528>)
10008096:	1c32      	adds	r2, r6, #0
10008098:	469c      	mov	ip, r3
1000809a:	4467      	add	r7, ip
1000809c:	40be      	lsls	r6, r7
1000809e:	465b      	mov	r3, fp
100080a0:	40bb      	lsls	r3, r7
100080a2:	1c37      	adds	r7, r6, #0
100080a4:	40ea      	lsrs	r2, r5
100080a6:	1e7e      	subs	r6, r7, #1
100080a8:	41b7      	sbcs	r7, r6
100080aa:	4313      	orrs	r3, r2
100080ac:	433b      	orrs	r3, r7
100080ae:	1c1e      	adds	r6, r3, #0
100080b0:	465b      	mov	r3, fp
100080b2:	40eb      	lsrs	r3, r5
100080b4:	1c1d      	adds	r5, r3, #0
100080b6:	0773      	lsls	r3, r6, #29
100080b8:	d009      	beq.n	100080ce <__aeabi_dmul+0x49e>
100080ba:	230f      	movs	r3, #15
100080bc:	4033      	ands	r3, r6
100080be:	2b04      	cmp	r3, #4
100080c0:	d005      	beq.n	100080ce <__aeabi_dmul+0x49e>
100080c2:	1d33      	adds	r3, r6, #4
100080c4:	42b3      	cmp	r3, r6
100080c6:	41b6      	sbcs	r6, r6
100080c8:	4276      	negs	r6, r6
100080ca:	19ad      	adds	r5, r5, r6
100080cc:	1c1e      	adds	r6, r3, #0
100080ce:	022b      	lsls	r3, r5, #8
100080d0:	d520      	bpl.n	10008114 <__aeabi_dmul+0x4e4>
100080d2:	2401      	movs	r4, #1
100080d4:	9b02      	ldr	r3, [sp, #8]
100080d6:	2500      	movs	r5, #0
100080d8:	401c      	ands	r4, r3
100080da:	2600      	movs	r6, #0
100080dc:	2301      	movs	r3, #1
100080de:	e60b      	b.n	10007cf8 <__aeabi_dmul+0xc8>
100080e0:	465a      	mov	r2, fp
100080e2:	4b1e      	ldr	r3, [pc, #120]	; (1000815c <__aeabi_dmul+0x52c>)
100080e4:	1bdb      	subs	r3, r3, r7
100080e6:	40da      	lsrs	r2, r3
100080e8:	1c13      	adds	r3, r2, #0
100080ea:	2d20      	cmp	r5, #32
100080ec:	d01c      	beq.n	10008128 <__aeabi_dmul+0x4f8>
100080ee:	4a1c      	ldr	r2, [pc, #112]	; (10008160 <__aeabi_dmul+0x530>)
100080f0:	4694      	mov	ip, r2
100080f2:	465a      	mov	r2, fp
100080f4:	4467      	add	r7, ip
100080f6:	40ba      	lsls	r2, r7
100080f8:	1c17      	adds	r7, r2, #0
100080fa:	433e      	orrs	r6, r7
100080fc:	1e72      	subs	r2, r6, #1
100080fe:	4196      	sbcs	r6, r2
10008100:	431e      	orrs	r6, r3
10008102:	2307      	movs	r3, #7
10008104:	2500      	movs	r5, #0
10008106:	4033      	ands	r3, r6
10008108:	d007      	beq.n	1000811a <__aeabi_dmul+0x4ea>
1000810a:	230f      	movs	r3, #15
1000810c:	2500      	movs	r5, #0
1000810e:	4033      	ands	r3, r6
10008110:	2b04      	cmp	r3, #4
10008112:	d1d6      	bne.n	100080c2 <__aeabi_dmul+0x492>
10008114:	076b      	lsls	r3, r5, #29
10008116:	026d      	lsls	r5, r5, #9
10008118:	0b2d      	lsrs	r5, r5, #12
1000811a:	2401      	movs	r4, #1
1000811c:	08f6      	lsrs	r6, r6, #3
1000811e:	431e      	orrs	r6, r3
10008120:	9b02      	ldr	r3, [sp, #8]
10008122:	401c      	ands	r4, r3
10008124:	2300      	movs	r3, #0
10008126:	e5e7      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008128:	2700      	movs	r7, #0
1000812a:	e7e6      	b.n	100080fa <__aeabi_dmul+0x4ca>
1000812c:	2580      	movs	r5, #128	; 0x80
1000812e:	465b      	mov	r3, fp
10008130:	2401      	movs	r4, #1
10008132:	032d      	lsls	r5, r5, #12
10008134:	431d      	orrs	r5, r3
10008136:	9b01      	ldr	r3, [sp, #4]
10008138:	032d      	lsls	r5, r5, #12
1000813a:	4023      	ands	r3, r4
1000813c:	1c1c      	adds	r4, r3, #0
1000813e:	0b2d      	lsrs	r5, r5, #12
10008140:	4b03      	ldr	r3, [pc, #12]	; (10008150 <__aeabi_dmul+0x520>)
10008142:	e5d9      	b.n	10007cf8 <__aeabi_dmul+0xc8>
10008144:	000003ff 	.word	0x000003ff
10008148:	feffffff 	.word	0xfeffffff
1000814c:	000007fe 	.word	0x000007fe
10008150:	000007ff 	.word	0x000007ff
10008154:	fffffc02 	.word	0xfffffc02
10008158:	0000041e 	.word	0x0000041e
1000815c:	fffffbe2 	.word	0xfffffbe2
10008160:	0000043e 	.word	0x0000043e

10008164 <__aeabi_dsub>:
10008164:	b5f0      	push	{r4, r5, r6, r7, lr}
10008166:	464d      	mov	r5, r9
10008168:	4644      	mov	r4, r8
1000816a:	465f      	mov	r7, fp
1000816c:	4656      	mov	r6, sl
1000816e:	b4f0      	push	{r4, r5, r6, r7}
10008170:	1c0e      	adds	r6, r1, #0
10008172:	1c11      	adds	r1, r2, #0
10008174:	0332      	lsls	r2, r6, #12
10008176:	0a52      	lsrs	r2, r2, #9
10008178:	0f47      	lsrs	r7, r0, #29
1000817a:	4317      	orrs	r7, r2
1000817c:	00c5      	lsls	r5, r0, #3
1000817e:	031a      	lsls	r2, r3, #12
10008180:	0058      	lsls	r0, r3, #1
10008182:	0fdb      	lsrs	r3, r3, #31
10008184:	4699      	mov	r9, r3
10008186:	0a52      	lsrs	r2, r2, #9
10008188:	0f4b      	lsrs	r3, r1, #29
1000818a:	b083      	sub	sp, #12
1000818c:	431a      	orrs	r2, r3
1000818e:	00cb      	lsls	r3, r1, #3
10008190:	9301      	str	r3, [sp, #4]
10008192:	4bcf      	ldr	r3, [pc, #828]	; (100084d0 <__aeabi_dsub+0x36c>)
10008194:	0074      	lsls	r4, r6, #1
10008196:	0ff6      	lsrs	r6, r6, #31
10008198:	0d64      	lsrs	r4, r4, #21
1000819a:	46b0      	mov	r8, r6
1000819c:	0d40      	lsrs	r0, r0, #21
1000819e:	4298      	cmp	r0, r3
100081a0:	d100      	bne.n	100081a4 <__aeabi_dsub+0x40>
100081a2:	e0e8      	b.n	10008376 <__aeabi_dsub+0x212>
100081a4:	2301      	movs	r3, #1
100081a6:	4649      	mov	r1, r9
100081a8:	4059      	eors	r1, r3
100081aa:	1c0b      	adds	r3, r1, #0
100081ac:	429e      	cmp	r6, r3
100081ae:	d100      	bne.n	100081b2 <__aeabi_dsub+0x4e>
100081b0:	e0b1      	b.n	10008316 <__aeabi_dsub+0x1b2>
100081b2:	1a26      	subs	r6, r4, r0
100081b4:	2e00      	cmp	r6, #0
100081b6:	dc00      	bgt.n	100081ba <__aeabi_dsub+0x56>
100081b8:	e11c      	b.n	100083f4 <__aeabi_dsub+0x290>
100081ba:	2800      	cmp	r0, #0
100081bc:	d142      	bne.n	10008244 <__aeabi_dsub+0xe0>
100081be:	1c13      	adds	r3, r2, #0
100081c0:	9901      	ldr	r1, [sp, #4]
100081c2:	430b      	orrs	r3, r1
100081c4:	d000      	beq.n	100081c8 <__aeabi_dsub+0x64>
100081c6:	e0e6      	b.n	10008396 <__aeabi_dsub+0x232>
100081c8:	076b      	lsls	r3, r5, #29
100081ca:	d100      	bne.n	100081ce <__aeabi_dsub+0x6a>
100081cc:	e08e      	b.n	100082ec <__aeabi_dsub+0x188>
100081ce:	230f      	movs	r3, #15
100081d0:	402b      	ands	r3, r5
100081d2:	2b04      	cmp	r3, #4
100081d4:	d100      	bne.n	100081d8 <__aeabi_dsub+0x74>
100081d6:	e089      	b.n	100082ec <__aeabi_dsub+0x188>
100081d8:	1d2a      	adds	r2, r5, #4
100081da:	42aa      	cmp	r2, r5
100081dc:	41ad      	sbcs	r5, r5
100081de:	2380      	movs	r3, #128	; 0x80
100081e0:	2601      	movs	r6, #1
100081e2:	4641      	mov	r1, r8
100081e4:	426d      	negs	r5, r5
100081e6:	197f      	adds	r7, r7, r5
100081e8:	041b      	lsls	r3, r3, #16
100081ea:	403b      	ands	r3, r7
100081ec:	400e      	ands	r6, r1
100081ee:	1c15      	adds	r5, r2, #0
100081f0:	2b00      	cmp	r3, #0
100081f2:	d100      	bne.n	100081f6 <__aeabi_dsub+0x92>
100081f4:	e083      	b.n	100082fe <__aeabi_dsub+0x19a>
100081f6:	4bb6      	ldr	r3, [pc, #728]	; (100084d0 <__aeabi_dsub+0x36c>)
100081f8:	3401      	adds	r4, #1
100081fa:	429c      	cmp	r4, r3
100081fc:	d100      	bne.n	10008200 <__aeabi_dsub+0x9c>
100081fe:	e116      	b.n	1000842e <__aeabi_dsub+0x2ca>
10008200:	1c3a      	adds	r2, r7, #0
10008202:	4bb4      	ldr	r3, [pc, #720]	; (100084d4 <__aeabi_dsub+0x370>)
10008204:	08ed      	lsrs	r5, r5, #3
10008206:	401a      	ands	r2, r3
10008208:	0750      	lsls	r0, r2, #29
1000820a:	0564      	lsls	r4, r4, #21
1000820c:	0252      	lsls	r2, r2, #9
1000820e:	4305      	orrs	r5, r0
10008210:	0b12      	lsrs	r2, r2, #12
10008212:	0d64      	lsrs	r4, r4, #21
10008214:	2100      	movs	r1, #0
10008216:	0312      	lsls	r2, r2, #12
10008218:	0d0b      	lsrs	r3, r1, #20
1000821a:	051b      	lsls	r3, r3, #20
1000821c:	0564      	lsls	r4, r4, #21
1000821e:	0b12      	lsrs	r2, r2, #12
10008220:	431a      	orrs	r2, r3
10008222:	0863      	lsrs	r3, r4, #1
10008224:	4cac      	ldr	r4, [pc, #688]	; (100084d8 <__aeabi_dsub+0x374>)
10008226:	07f6      	lsls	r6, r6, #31
10008228:	4014      	ands	r4, r2
1000822a:	431c      	orrs	r4, r3
1000822c:	0064      	lsls	r4, r4, #1
1000822e:	0864      	lsrs	r4, r4, #1
10008230:	4334      	orrs	r4, r6
10008232:	1c28      	adds	r0, r5, #0
10008234:	1c21      	adds	r1, r4, #0
10008236:	b003      	add	sp, #12
10008238:	bc3c      	pop	{r2, r3, r4, r5}
1000823a:	4690      	mov	r8, r2
1000823c:	4699      	mov	r9, r3
1000823e:	46a2      	mov	sl, r4
10008240:	46ab      	mov	fp, r5
10008242:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008244:	4ba2      	ldr	r3, [pc, #648]	; (100084d0 <__aeabi_dsub+0x36c>)
10008246:	429c      	cmp	r4, r3
10008248:	d0be      	beq.n	100081c8 <__aeabi_dsub+0x64>
1000824a:	2380      	movs	r3, #128	; 0x80
1000824c:	041b      	lsls	r3, r3, #16
1000824e:	431a      	orrs	r2, r3
10008250:	2e38      	cmp	r6, #56	; 0x38
10008252:	dd00      	ble.n	10008256 <__aeabi_dsub+0xf2>
10008254:	e103      	b.n	1000845e <__aeabi_dsub+0x2fa>
10008256:	2e1f      	cmp	r6, #31
10008258:	dd00      	ble.n	1000825c <__aeabi_dsub+0xf8>
1000825a:	e13f      	b.n	100084dc <__aeabi_dsub+0x378>
1000825c:	2020      	movs	r0, #32
1000825e:	1b83      	subs	r3, r0, r6
10008260:	4699      	mov	r9, r3
10008262:	1c13      	adds	r3, r2, #0
10008264:	4649      	mov	r1, r9
10008266:	408b      	lsls	r3, r1
10008268:	469c      	mov	ip, r3
1000826a:	9b01      	ldr	r3, [sp, #4]
1000826c:	4660      	mov	r0, ip
1000826e:	40f3      	lsrs	r3, r6
10008270:	4303      	orrs	r3, r0
10008272:	9801      	ldr	r0, [sp, #4]
10008274:	40f2      	lsrs	r2, r6
10008276:	4088      	lsls	r0, r1
10008278:	1c01      	adds	r1, r0, #0
1000827a:	1e48      	subs	r0, r1, #1
1000827c:	4181      	sbcs	r1, r0
1000827e:	430b      	orrs	r3, r1
10008280:	1aeb      	subs	r3, r5, r3
10008282:	429d      	cmp	r5, r3
10008284:	4180      	sbcs	r0, r0
10008286:	1c1d      	adds	r5, r3, #0
10008288:	1aba      	subs	r2, r7, r2
1000828a:	4240      	negs	r0, r0
1000828c:	1a17      	subs	r7, r2, r0
1000828e:	023b      	lsls	r3, r7, #8
10008290:	d400      	bmi.n	10008294 <__aeabi_dsub+0x130>
10008292:	e0a8      	b.n	100083e6 <__aeabi_dsub+0x282>
10008294:	027a      	lsls	r2, r7, #9
10008296:	0a56      	lsrs	r6, r2, #9
10008298:	2e00      	cmp	r6, #0
1000829a:	d100      	bne.n	1000829e <__aeabi_dsub+0x13a>
1000829c:	e0ca      	b.n	10008434 <__aeabi_dsub+0x2d0>
1000829e:	1c30      	adds	r0, r6, #0
100082a0:	f000 fc2c 	bl	10008afc <__clzsi2>
100082a4:	1c03      	adds	r3, r0, #0
100082a6:	3b08      	subs	r3, #8
100082a8:	2b1f      	cmp	r3, #31
100082aa:	dd00      	ble.n	100082ae <__aeabi_dsub+0x14a>
100082ac:	e0cb      	b.n	10008446 <__aeabi_dsub+0x2e2>
100082ae:	2228      	movs	r2, #40	; 0x28
100082b0:	1c29      	adds	r1, r5, #0
100082b2:	1a12      	subs	r2, r2, r0
100082b4:	40d1      	lsrs	r1, r2
100082b6:	409e      	lsls	r6, r3
100082b8:	1c0a      	adds	r2, r1, #0
100082ba:	409d      	lsls	r5, r3
100082bc:	4332      	orrs	r2, r6
100082be:	429c      	cmp	r4, r3
100082c0:	dd00      	ble.n	100082c4 <__aeabi_dsub+0x160>
100082c2:	e0c8      	b.n	10008456 <__aeabi_dsub+0x2f2>
100082c4:	1b1c      	subs	r4, r3, r4
100082c6:	1c67      	adds	r7, r4, #1
100082c8:	2f1f      	cmp	r7, #31
100082ca:	dd00      	ble.n	100082ce <__aeabi_dsub+0x16a>
100082cc:	e0ed      	b.n	100084aa <__aeabi_dsub+0x346>
100082ce:	231f      	movs	r3, #31
100082d0:	1c29      	adds	r1, r5, #0
100082d2:	1b1c      	subs	r4, r3, r4
100082d4:	1c13      	adds	r3, r2, #0
100082d6:	40a5      	lsls	r5, r4
100082d8:	40a3      	lsls	r3, r4
100082da:	40f9      	lsrs	r1, r7
100082dc:	1e6c      	subs	r4, r5, #1
100082de:	41a5      	sbcs	r5, r4
100082e0:	40fa      	lsrs	r2, r7
100082e2:	4319      	orrs	r1, r3
100082e4:	430d      	orrs	r5, r1
100082e6:	1c17      	adds	r7, r2, #0
100082e8:	2400      	movs	r4, #0
100082ea:	e76d      	b.n	100081c8 <__aeabi_dsub+0x64>
100082ec:	2380      	movs	r3, #128	; 0x80
100082ee:	2601      	movs	r6, #1
100082f0:	4642      	mov	r2, r8
100082f2:	041b      	lsls	r3, r3, #16
100082f4:	403b      	ands	r3, r7
100082f6:	4016      	ands	r6, r2
100082f8:	2b00      	cmp	r3, #0
100082fa:	d000      	beq.n	100082fe <__aeabi_dsub+0x19a>
100082fc:	e77b      	b.n	100081f6 <__aeabi_dsub+0x92>
100082fe:	4b74      	ldr	r3, [pc, #464]	; (100084d0 <__aeabi_dsub+0x36c>)
10008300:	08ed      	lsrs	r5, r5, #3
10008302:	0778      	lsls	r0, r7, #29
10008304:	4305      	orrs	r5, r0
10008306:	08fa      	lsrs	r2, r7, #3
10008308:	429c      	cmp	r4, r3
1000830a:	d03b      	beq.n	10008384 <__aeabi_dsub+0x220>
1000830c:	0312      	lsls	r2, r2, #12
1000830e:	0564      	lsls	r4, r4, #21
10008310:	0b12      	lsrs	r2, r2, #12
10008312:	0d64      	lsrs	r4, r4, #21
10008314:	e77e      	b.n	10008214 <__aeabi_dsub+0xb0>
10008316:	1a23      	subs	r3, r4, r0
10008318:	469a      	mov	sl, r3
1000831a:	2b00      	cmp	r3, #0
1000831c:	dc00      	bgt.n	10008320 <__aeabi_dsub+0x1bc>
1000831e:	e0a5      	b.n	1000846c <__aeabi_dsub+0x308>
10008320:	2800      	cmp	r0, #0
10008322:	d044      	beq.n	100083ae <__aeabi_dsub+0x24a>
10008324:	486a      	ldr	r0, [pc, #424]	; (100084d0 <__aeabi_dsub+0x36c>)
10008326:	4284      	cmp	r4, r0
10008328:	d100      	bne.n	1000832c <__aeabi_dsub+0x1c8>
1000832a:	e74d      	b.n	100081c8 <__aeabi_dsub+0x64>
1000832c:	2080      	movs	r0, #128	; 0x80
1000832e:	0400      	lsls	r0, r0, #16
10008330:	4302      	orrs	r2, r0
10008332:	4653      	mov	r3, sl
10008334:	2b38      	cmp	r3, #56	; 0x38
10008336:	dc00      	bgt.n	1000833a <__aeabi_dsub+0x1d6>
10008338:	e11c      	b.n	10008574 <__aeabi_dsub+0x410>
1000833a:	9b01      	ldr	r3, [sp, #4]
1000833c:	431a      	orrs	r2, r3
1000833e:	1e51      	subs	r1, r2, #1
10008340:	418a      	sbcs	r2, r1
10008342:	b2d1      	uxtb	r1, r2
10008344:	2200      	movs	r2, #0
10008346:	1949      	adds	r1, r1, r5
10008348:	42a9      	cmp	r1, r5
1000834a:	4180      	sbcs	r0, r0
1000834c:	1c0d      	adds	r5, r1, #0
1000834e:	19d2      	adds	r2, r2, r7
10008350:	4240      	negs	r0, r0
10008352:	1817      	adds	r7, r2, r0
10008354:	023b      	lsls	r3, r7, #8
10008356:	d546      	bpl.n	100083e6 <__aeabi_dsub+0x282>
10008358:	4b5d      	ldr	r3, [pc, #372]	; (100084d0 <__aeabi_dsub+0x36c>)
1000835a:	3401      	adds	r4, #1
1000835c:	429c      	cmp	r4, r3
1000835e:	d100      	bne.n	10008362 <__aeabi_dsub+0x1fe>
10008360:	e169      	b.n	10008636 <__aeabi_dsub+0x4d2>
10008362:	2001      	movs	r0, #1
10008364:	4a5b      	ldr	r2, [pc, #364]	; (100084d4 <__aeabi_dsub+0x370>)
10008366:	086b      	lsrs	r3, r5, #1
10008368:	403a      	ands	r2, r7
1000836a:	4028      	ands	r0, r5
1000836c:	4318      	orrs	r0, r3
1000836e:	07d5      	lsls	r5, r2, #31
10008370:	4305      	orrs	r5, r0
10008372:	0857      	lsrs	r7, r2, #1
10008374:	e728      	b.n	100081c8 <__aeabi_dsub+0x64>
10008376:	1c13      	adds	r3, r2, #0
10008378:	9901      	ldr	r1, [sp, #4]
1000837a:	430b      	orrs	r3, r1
1000837c:	d100      	bne.n	10008380 <__aeabi_dsub+0x21c>
1000837e:	e711      	b.n	100081a4 <__aeabi_dsub+0x40>
10008380:	464b      	mov	r3, r9
10008382:	e713      	b.n	100081ac <__aeabi_dsub+0x48>
10008384:	1c2b      	adds	r3, r5, #0
10008386:	4313      	orrs	r3, r2
10008388:	d051      	beq.n	1000842e <__aeabi_dsub+0x2ca>
1000838a:	2380      	movs	r3, #128	; 0x80
1000838c:	031b      	lsls	r3, r3, #12
1000838e:	431a      	orrs	r2, r3
10008390:	0312      	lsls	r2, r2, #12
10008392:	0b12      	lsrs	r2, r2, #12
10008394:	e73e      	b.n	10008214 <__aeabi_dsub+0xb0>
10008396:	3e01      	subs	r6, #1
10008398:	2e00      	cmp	r6, #0
1000839a:	d000      	beq.n	1000839e <__aeabi_dsub+0x23a>
1000839c:	e080      	b.n	100084a0 <__aeabi_dsub+0x33c>
1000839e:	1a69      	subs	r1, r5, r1
100083a0:	428d      	cmp	r5, r1
100083a2:	419b      	sbcs	r3, r3
100083a4:	1aba      	subs	r2, r7, r2
100083a6:	425b      	negs	r3, r3
100083a8:	1ad7      	subs	r7, r2, r3
100083aa:	1c0d      	adds	r5, r1, #0
100083ac:	e76f      	b.n	1000828e <__aeabi_dsub+0x12a>
100083ae:	1c10      	adds	r0, r2, #0
100083b0:	9b01      	ldr	r3, [sp, #4]
100083b2:	4318      	orrs	r0, r3
100083b4:	d100      	bne.n	100083b8 <__aeabi_dsub+0x254>
100083b6:	e707      	b.n	100081c8 <__aeabi_dsub+0x64>
100083b8:	2301      	movs	r3, #1
100083ba:	425b      	negs	r3, r3
100083bc:	469c      	mov	ip, r3
100083be:	44e2      	add	sl, ip
100083c0:	4653      	mov	r3, sl
100083c2:	2b00      	cmp	r3, #0
100083c4:	d000      	beq.n	100083c8 <__aeabi_dsub+0x264>
100083c6:	e102      	b.n	100085ce <__aeabi_dsub+0x46a>
100083c8:	9b01      	ldr	r3, [sp, #4]
100083ca:	19d2      	adds	r2, r2, r7
100083cc:	1959      	adds	r1, r3, r5
100083ce:	42a9      	cmp	r1, r5
100083d0:	419b      	sbcs	r3, r3
100083d2:	425b      	negs	r3, r3
100083d4:	18d7      	adds	r7, r2, r3
100083d6:	1c0d      	adds	r5, r1, #0
100083d8:	e7bc      	b.n	10008354 <__aeabi_dsub+0x1f0>
100083da:	4663      	mov	r3, ip
100083dc:	4303      	orrs	r3, r0
100083de:	d100      	bne.n	100083e2 <__aeabi_dsub+0x27e>
100083e0:	e128      	b.n	10008634 <__aeabi_dsub+0x4d0>
100083e2:	1c07      	adds	r7, r0, #0
100083e4:	4665      	mov	r5, ip
100083e6:	076b      	lsls	r3, r5, #29
100083e8:	d000      	beq.n	100083ec <__aeabi_dsub+0x288>
100083ea:	e6f0      	b.n	100081ce <__aeabi_dsub+0x6a>
100083ec:	2601      	movs	r6, #1
100083ee:	4643      	mov	r3, r8
100083f0:	401e      	ands	r6, r3
100083f2:	e784      	b.n	100082fe <__aeabi_dsub+0x19a>
100083f4:	2e00      	cmp	r6, #0
100083f6:	d000      	beq.n	100083fa <__aeabi_dsub+0x296>
100083f8:	e081      	b.n	100084fe <__aeabi_dsub+0x39a>
100083fa:	1c60      	adds	r0, r4, #1
100083fc:	0540      	lsls	r0, r0, #21
100083fe:	0d40      	lsrs	r0, r0, #21
10008400:	2801      	cmp	r0, #1
10008402:	dc00      	bgt.n	10008406 <__aeabi_dsub+0x2a2>
10008404:	e107      	b.n	10008616 <__aeabi_dsub+0x4b2>
10008406:	9901      	ldr	r1, [sp, #4]
10008408:	1a68      	subs	r0, r5, r1
1000840a:	4684      	mov	ip, r0
1000840c:	4565      	cmp	r5, ip
1000840e:	41b6      	sbcs	r6, r6
10008410:	1ab8      	subs	r0, r7, r2
10008412:	4276      	negs	r6, r6
10008414:	1b86      	subs	r6, r0, r6
10008416:	0230      	lsls	r0, r6, #8
10008418:	d400      	bmi.n	1000841c <__aeabi_dsub+0x2b8>
1000841a:	e0a1      	b.n	10008560 <__aeabi_dsub+0x3fc>
1000841c:	468c      	mov	ip, r1
1000841e:	1b4d      	subs	r5, r1, r5
10008420:	45ac      	cmp	ip, r5
10008422:	4189      	sbcs	r1, r1
10008424:	1bd2      	subs	r2, r2, r7
10008426:	4249      	negs	r1, r1
10008428:	1a56      	subs	r6, r2, r1
1000842a:	4698      	mov	r8, r3
1000842c:	e734      	b.n	10008298 <__aeabi_dsub+0x134>
1000842e:	2200      	movs	r2, #0
10008430:	2500      	movs	r5, #0
10008432:	e6ef      	b.n	10008214 <__aeabi_dsub+0xb0>
10008434:	1c28      	adds	r0, r5, #0
10008436:	f000 fb61 	bl	10008afc <__clzsi2>
1000843a:	3020      	adds	r0, #32
1000843c:	1c03      	adds	r3, r0, #0
1000843e:	3b08      	subs	r3, #8
10008440:	2b1f      	cmp	r3, #31
10008442:	dc00      	bgt.n	10008446 <__aeabi_dsub+0x2e2>
10008444:	e733      	b.n	100082ae <__aeabi_dsub+0x14a>
10008446:	1c02      	adds	r2, r0, #0
10008448:	3a28      	subs	r2, #40	; 0x28
1000844a:	4095      	lsls	r5, r2
1000844c:	1c2a      	adds	r2, r5, #0
1000844e:	2500      	movs	r5, #0
10008450:	429c      	cmp	r4, r3
10008452:	dc00      	bgt.n	10008456 <__aeabi_dsub+0x2f2>
10008454:	e736      	b.n	100082c4 <__aeabi_dsub+0x160>
10008456:	4f1f      	ldr	r7, [pc, #124]	; (100084d4 <__aeabi_dsub+0x370>)
10008458:	1ae4      	subs	r4, r4, r3
1000845a:	4017      	ands	r7, r2
1000845c:	e6b4      	b.n	100081c8 <__aeabi_dsub+0x64>
1000845e:	9b01      	ldr	r3, [sp, #4]
10008460:	431a      	orrs	r2, r3
10008462:	1e51      	subs	r1, r2, #1
10008464:	418a      	sbcs	r2, r1
10008466:	b2d3      	uxtb	r3, r2
10008468:	2200      	movs	r2, #0
1000846a:	e709      	b.n	10008280 <__aeabi_dsub+0x11c>
1000846c:	2b00      	cmp	r3, #0
1000846e:	d000      	beq.n	10008472 <__aeabi_dsub+0x30e>
10008470:	e101      	b.n	10008676 <__aeabi_dsub+0x512>
10008472:	1c60      	adds	r0, r4, #1
10008474:	0543      	lsls	r3, r0, #21
10008476:	0d5b      	lsrs	r3, r3, #21
10008478:	2b01      	cmp	r3, #1
1000847a:	dc00      	bgt.n	1000847e <__aeabi_dsub+0x31a>
1000847c:	e0b0      	b.n	100085e0 <__aeabi_dsub+0x47c>
1000847e:	4b14      	ldr	r3, [pc, #80]	; (100084d0 <__aeabi_dsub+0x36c>)
10008480:	4298      	cmp	r0, r3
10008482:	d100      	bne.n	10008486 <__aeabi_dsub+0x322>
10008484:	e11e      	b.n	100086c4 <__aeabi_dsub+0x560>
10008486:	9b01      	ldr	r3, [sp, #4]
10008488:	19d2      	adds	r2, r2, r7
1000848a:	1959      	adds	r1, r3, r5
1000848c:	42a9      	cmp	r1, r5
1000848e:	419b      	sbcs	r3, r3
10008490:	425b      	negs	r3, r3
10008492:	18d2      	adds	r2, r2, r3
10008494:	0849      	lsrs	r1, r1, #1
10008496:	07d5      	lsls	r5, r2, #31
10008498:	430d      	orrs	r5, r1
1000849a:	0857      	lsrs	r7, r2, #1
1000849c:	1c04      	adds	r4, r0, #0
1000849e:	e693      	b.n	100081c8 <__aeabi_dsub+0x64>
100084a0:	4b0b      	ldr	r3, [pc, #44]	; (100084d0 <__aeabi_dsub+0x36c>)
100084a2:	429c      	cmp	r4, r3
100084a4:	d000      	beq.n	100084a8 <__aeabi_dsub+0x344>
100084a6:	e6d3      	b.n	10008250 <__aeabi_dsub+0xec>
100084a8:	e68e      	b.n	100081c8 <__aeabi_dsub+0x64>
100084aa:	1c21      	adds	r1, r4, #0
100084ac:	1c13      	adds	r3, r2, #0
100084ae:	391f      	subs	r1, #31
100084b0:	40cb      	lsrs	r3, r1
100084b2:	1c19      	adds	r1, r3, #0
100084b4:	2f20      	cmp	r7, #32
100084b6:	d100      	bne.n	100084ba <__aeabi_dsub+0x356>
100084b8:	e08e      	b.n	100085d8 <__aeabi_dsub+0x474>
100084ba:	233f      	movs	r3, #63	; 0x3f
100084bc:	1b1c      	subs	r4, r3, r4
100084be:	40a2      	lsls	r2, r4
100084c0:	4315      	orrs	r5, r2
100084c2:	1e6a      	subs	r2, r5, #1
100084c4:	4195      	sbcs	r5, r2
100084c6:	2700      	movs	r7, #0
100084c8:	430d      	orrs	r5, r1
100084ca:	2400      	movs	r4, #0
100084cc:	e78b      	b.n	100083e6 <__aeabi_dsub+0x282>
100084ce:	46c0      	nop			; (mov r8, r8)
100084d0:	000007ff 	.word	0x000007ff
100084d4:	ff7fffff 	.word	0xff7fffff
100084d8:	800fffff 	.word	0x800fffff
100084dc:	1c33      	adds	r3, r6, #0
100084de:	1c10      	adds	r0, r2, #0
100084e0:	3b20      	subs	r3, #32
100084e2:	40d8      	lsrs	r0, r3
100084e4:	2e20      	cmp	r6, #32
100084e6:	d079      	beq.n	100085dc <__aeabi_dsub+0x478>
100084e8:	2340      	movs	r3, #64	; 0x40
100084ea:	1b9b      	subs	r3, r3, r6
100084ec:	409a      	lsls	r2, r3
100084ee:	1c13      	adds	r3, r2, #0
100084f0:	9a01      	ldr	r2, [sp, #4]
100084f2:	4313      	orrs	r3, r2
100084f4:	1e59      	subs	r1, r3, #1
100084f6:	418b      	sbcs	r3, r1
100084f8:	2200      	movs	r2, #0
100084fa:	4303      	orrs	r3, r0
100084fc:	e6c0      	b.n	10008280 <__aeabi_dsub+0x11c>
100084fe:	2c00      	cmp	r4, #0
10008500:	d053      	beq.n	100085aa <__aeabi_dsub+0x446>
10008502:	4cc7      	ldr	r4, [pc, #796]	; (10008820 <__aeabi_dsub+0x6bc>)
10008504:	42a0      	cmp	r0, r4
10008506:	d100      	bne.n	1000850a <__aeabi_dsub+0x3a6>
10008508:	e0b0      	b.n	1000866c <__aeabi_dsub+0x508>
1000850a:	2480      	movs	r4, #128	; 0x80
1000850c:	4271      	negs	r1, r6
1000850e:	4689      	mov	r9, r1
10008510:	0424      	lsls	r4, r4, #16
10008512:	4327      	orrs	r7, r4
10008514:	4649      	mov	r1, r9
10008516:	2938      	cmp	r1, #56	; 0x38
10008518:	dd00      	ble.n	1000851c <__aeabi_dsub+0x3b8>
1000851a:	e0cd      	b.n	100086b8 <__aeabi_dsub+0x554>
1000851c:	291f      	cmp	r1, #31
1000851e:	dd00      	ble.n	10008522 <__aeabi_dsub+0x3be>
10008520:	e159      	b.n	100087d6 <__aeabi_dsub+0x672>
10008522:	2420      	movs	r4, #32
10008524:	1c3e      	adds	r6, r7, #0
10008526:	1a61      	subs	r1, r4, r1
10008528:	408e      	lsls	r6, r1
1000852a:	468a      	mov	sl, r1
1000852c:	46b0      	mov	r8, r6
1000852e:	4649      	mov	r1, r9
10008530:	1c2e      	adds	r6, r5, #0
10008532:	40ce      	lsrs	r6, r1
10008534:	4651      	mov	r1, sl
10008536:	46b4      	mov	ip, r6
10008538:	408d      	lsls	r5, r1
1000853a:	4664      	mov	r4, ip
1000853c:	4646      	mov	r6, r8
1000853e:	4649      	mov	r1, r9
10008540:	4326      	orrs	r6, r4
10008542:	1e6c      	subs	r4, r5, #1
10008544:	41a5      	sbcs	r5, r4
10008546:	40cf      	lsrs	r7, r1
10008548:	4335      	orrs	r5, r6
1000854a:	9901      	ldr	r1, [sp, #4]
1000854c:	1bd7      	subs	r7, r2, r7
1000854e:	468c      	mov	ip, r1
10008550:	1b4d      	subs	r5, r1, r5
10008552:	45ac      	cmp	ip, r5
10008554:	4192      	sbcs	r2, r2
10008556:	4252      	negs	r2, r2
10008558:	1abf      	subs	r7, r7, r2
1000855a:	1c04      	adds	r4, r0, #0
1000855c:	4698      	mov	r8, r3
1000855e:	e696      	b.n	1000828e <__aeabi_dsub+0x12a>
10008560:	4663      	mov	r3, ip
10008562:	4665      	mov	r5, ip
10008564:	4333      	orrs	r3, r6
10008566:	d000      	beq.n	1000856a <__aeabi_dsub+0x406>
10008568:	e696      	b.n	10008298 <__aeabi_dsub+0x134>
1000856a:	2600      	movs	r6, #0
1000856c:	2700      	movs	r7, #0
1000856e:	2400      	movs	r4, #0
10008570:	2500      	movs	r5, #0
10008572:	e6c4      	b.n	100082fe <__aeabi_dsub+0x19a>
10008574:	2b1f      	cmp	r3, #31
10008576:	dc61      	bgt.n	1000863c <__aeabi_dsub+0x4d8>
10008578:	2020      	movs	r0, #32
1000857a:	1ac3      	subs	r3, r0, r3
1000857c:	469b      	mov	fp, r3
1000857e:	1c13      	adds	r3, r2, #0
10008580:	4659      	mov	r1, fp
10008582:	408b      	lsls	r3, r1
10008584:	4651      	mov	r1, sl
10008586:	4699      	mov	r9, r3
10008588:	9b01      	ldr	r3, [sp, #4]
1000858a:	40cb      	lsrs	r3, r1
1000858c:	469c      	mov	ip, r3
1000858e:	464b      	mov	r3, r9
10008590:	4660      	mov	r0, ip
10008592:	4303      	orrs	r3, r0
10008594:	469c      	mov	ip, r3
10008596:	465b      	mov	r3, fp
10008598:	9901      	ldr	r1, [sp, #4]
1000859a:	4099      	lsls	r1, r3
1000859c:	4663      	mov	r3, ip
1000859e:	1e48      	subs	r0, r1, #1
100085a0:	4181      	sbcs	r1, r0
100085a2:	4319      	orrs	r1, r3
100085a4:	4653      	mov	r3, sl
100085a6:	40da      	lsrs	r2, r3
100085a8:	e6cd      	b.n	10008346 <__aeabi_dsub+0x1e2>
100085aa:	1c3c      	adds	r4, r7, #0
100085ac:	432c      	orrs	r4, r5
100085ae:	d05d      	beq.n	1000866c <__aeabi_dsub+0x508>
100085b0:	43f1      	mvns	r1, r6
100085b2:	4689      	mov	r9, r1
100085b4:	2900      	cmp	r1, #0
100085b6:	d155      	bne.n	10008664 <__aeabi_dsub+0x500>
100085b8:	9901      	ldr	r1, [sp, #4]
100085ba:	1bd2      	subs	r2, r2, r7
100085bc:	468c      	mov	ip, r1
100085be:	1b4d      	subs	r5, r1, r5
100085c0:	45ac      	cmp	ip, r5
100085c2:	4189      	sbcs	r1, r1
100085c4:	4249      	negs	r1, r1
100085c6:	1a57      	subs	r7, r2, r1
100085c8:	1c04      	adds	r4, r0, #0
100085ca:	4698      	mov	r8, r3
100085cc:	e65f      	b.n	1000828e <__aeabi_dsub+0x12a>
100085ce:	4894      	ldr	r0, [pc, #592]	; (10008820 <__aeabi_dsub+0x6bc>)
100085d0:	4284      	cmp	r4, r0
100085d2:	d000      	beq.n	100085d6 <__aeabi_dsub+0x472>
100085d4:	e6ad      	b.n	10008332 <__aeabi_dsub+0x1ce>
100085d6:	e5f7      	b.n	100081c8 <__aeabi_dsub+0x64>
100085d8:	2200      	movs	r2, #0
100085da:	e771      	b.n	100084c0 <__aeabi_dsub+0x35c>
100085dc:	2300      	movs	r3, #0
100085de:	e787      	b.n	100084f0 <__aeabi_dsub+0x38c>
100085e0:	1c3b      	adds	r3, r7, #0
100085e2:	432b      	orrs	r3, r5
100085e4:	2c00      	cmp	r4, #0
100085e6:	d000      	beq.n	100085ea <__aeabi_dsub+0x486>
100085e8:	e0da      	b.n	100087a0 <__aeabi_dsub+0x63c>
100085ea:	2b00      	cmp	r3, #0
100085ec:	d100      	bne.n	100085f0 <__aeabi_dsub+0x48c>
100085ee:	e113      	b.n	10008818 <__aeabi_dsub+0x6b4>
100085f0:	1c13      	adds	r3, r2, #0
100085f2:	9901      	ldr	r1, [sp, #4]
100085f4:	430b      	orrs	r3, r1
100085f6:	d100      	bne.n	100085fa <__aeabi_dsub+0x496>
100085f8:	e5e6      	b.n	100081c8 <__aeabi_dsub+0x64>
100085fa:	1949      	adds	r1, r1, r5
100085fc:	42a9      	cmp	r1, r5
100085fe:	419b      	sbcs	r3, r3
10008600:	19d2      	adds	r2, r2, r7
10008602:	425b      	negs	r3, r3
10008604:	18d7      	adds	r7, r2, r3
10008606:	023b      	lsls	r3, r7, #8
10008608:	d400      	bmi.n	1000860c <__aeabi_dsub+0x4a8>
1000860a:	e121      	b.n	10008850 <__aeabi_dsub+0x6ec>
1000860c:	4b85      	ldr	r3, [pc, #532]	; (10008824 <__aeabi_dsub+0x6c0>)
1000860e:	1c0d      	adds	r5, r1, #0
10008610:	401f      	ands	r7, r3
10008612:	1c04      	adds	r4, r0, #0
10008614:	e5d8      	b.n	100081c8 <__aeabi_dsub+0x64>
10008616:	1c38      	adds	r0, r7, #0
10008618:	4328      	orrs	r0, r5
1000861a:	2c00      	cmp	r4, #0
1000861c:	d140      	bne.n	100086a0 <__aeabi_dsub+0x53c>
1000861e:	2800      	cmp	r0, #0
10008620:	d000      	beq.n	10008624 <__aeabi_dsub+0x4c0>
10008622:	e083      	b.n	1000872c <__aeabi_dsub+0x5c8>
10008624:	1c10      	adds	r0, r2, #0
10008626:	9901      	ldr	r1, [sp, #4]
10008628:	4308      	orrs	r0, r1
1000862a:	d003      	beq.n	10008634 <__aeabi_dsub+0x4d0>
1000862c:	1c17      	adds	r7, r2, #0
1000862e:	1c0d      	adds	r5, r1, #0
10008630:	4698      	mov	r8, r3
10008632:	e5c9      	b.n	100081c8 <__aeabi_dsub+0x64>
10008634:	2600      	movs	r6, #0
10008636:	2700      	movs	r7, #0
10008638:	2500      	movs	r5, #0
1000863a:	e660      	b.n	100082fe <__aeabi_dsub+0x19a>
1000863c:	4650      	mov	r0, sl
1000863e:	1c13      	adds	r3, r2, #0
10008640:	3820      	subs	r0, #32
10008642:	40c3      	lsrs	r3, r0
10008644:	1c18      	adds	r0, r3, #0
10008646:	4653      	mov	r3, sl
10008648:	2b20      	cmp	r3, #32
1000864a:	d100      	bne.n	1000864e <__aeabi_dsub+0x4ea>
1000864c:	e0c1      	b.n	100087d2 <__aeabi_dsub+0x66e>
1000864e:	2340      	movs	r3, #64	; 0x40
10008650:	4651      	mov	r1, sl
10008652:	1a5b      	subs	r3, r3, r1
10008654:	409a      	lsls	r2, r3
10008656:	9901      	ldr	r1, [sp, #4]
10008658:	4311      	orrs	r1, r2
1000865a:	1e4a      	subs	r2, r1, #1
1000865c:	4191      	sbcs	r1, r2
1000865e:	2200      	movs	r2, #0
10008660:	4301      	orrs	r1, r0
10008662:	e670      	b.n	10008346 <__aeabi_dsub+0x1e2>
10008664:	4c6e      	ldr	r4, [pc, #440]	; (10008820 <__aeabi_dsub+0x6bc>)
10008666:	42a0      	cmp	r0, r4
10008668:	d000      	beq.n	1000866c <__aeabi_dsub+0x508>
1000866a:	e753      	b.n	10008514 <__aeabi_dsub+0x3b0>
1000866c:	1c17      	adds	r7, r2, #0
1000866e:	9d01      	ldr	r5, [sp, #4]
10008670:	1c04      	adds	r4, r0, #0
10008672:	4698      	mov	r8, r3
10008674:	e5a8      	b.n	100081c8 <__aeabi_dsub+0x64>
10008676:	2c00      	cmp	r4, #0
10008678:	d128      	bne.n	100086cc <__aeabi_dsub+0x568>
1000867a:	1c3c      	adds	r4, r7, #0
1000867c:	432c      	orrs	r4, r5
1000867e:	d100      	bne.n	10008682 <__aeabi_dsub+0x51e>
10008680:	e08a      	b.n	10008798 <__aeabi_dsub+0x634>
10008682:	43db      	mvns	r3, r3
10008684:	469a      	mov	sl, r3
10008686:	2b00      	cmp	r3, #0
10008688:	d000      	beq.n	1000868c <__aeabi_dsub+0x528>
1000868a:	e082      	b.n	10008792 <__aeabi_dsub+0x62e>
1000868c:	9b01      	ldr	r3, [sp, #4]
1000868e:	19d2      	adds	r2, r2, r7
10008690:	469c      	mov	ip, r3
10008692:	4465      	add	r5, ip
10008694:	429d      	cmp	r5, r3
10008696:	4189      	sbcs	r1, r1
10008698:	4249      	negs	r1, r1
1000869a:	1857      	adds	r7, r2, r1
1000869c:	1c04      	adds	r4, r0, #0
1000869e:	e659      	b.n	10008354 <__aeabi_dsub+0x1f0>
100086a0:	2800      	cmp	r0, #0
100086a2:	d15b      	bne.n	1000875c <__aeabi_dsub+0x5f8>
100086a4:	1c10      	adds	r0, r2, #0
100086a6:	9901      	ldr	r1, [sp, #4]
100086a8:	4308      	orrs	r0, r1
100086aa:	d100      	bne.n	100086ae <__aeabi_dsub+0x54a>
100086ac:	e0a4      	b.n	100087f8 <__aeabi_dsub+0x694>
100086ae:	1c17      	adds	r7, r2, #0
100086b0:	1c0d      	adds	r5, r1, #0
100086b2:	4698      	mov	r8, r3
100086b4:	4c5a      	ldr	r4, [pc, #360]	; (10008820 <__aeabi_dsub+0x6bc>)
100086b6:	e587      	b.n	100081c8 <__aeabi_dsub+0x64>
100086b8:	433d      	orrs	r5, r7
100086ba:	1e6f      	subs	r7, r5, #1
100086bc:	41bd      	sbcs	r5, r7
100086be:	2700      	movs	r7, #0
100086c0:	b2ed      	uxtb	r5, r5
100086c2:	e742      	b.n	1000854a <__aeabi_dsub+0x3e6>
100086c4:	1c04      	adds	r4, r0, #0
100086c6:	2700      	movs	r7, #0
100086c8:	2500      	movs	r5, #0
100086ca:	e618      	b.n	100082fe <__aeabi_dsub+0x19a>
100086cc:	4c54      	ldr	r4, [pc, #336]	; (10008820 <__aeabi_dsub+0x6bc>)
100086ce:	42a0      	cmp	r0, r4
100086d0:	d062      	beq.n	10008798 <__aeabi_dsub+0x634>
100086d2:	4653      	mov	r3, sl
100086d4:	2480      	movs	r4, #128	; 0x80
100086d6:	425b      	negs	r3, r3
100086d8:	469a      	mov	sl, r3
100086da:	0424      	lsls	r4, r4, #16
100086dc:	4327      	orrs	r7, r4
100086de:	4653      	mov	r3, sl
100086e0:	2b38      	cmp	r3, #56	; 0x38
100086e2:	dd00      	ble.n	100086e6 <__aeabi_dsub+0x582>
100086e4:	e08e      	b.n	10008804 <__aeabi_dsub+0x6a0>
100086e6:	2b1f      	cmp	r3, #31
100086e8:	dd00      	ble.n	100086ec <__aeabi_dsub+0x588>
100086ea:	e09d      	b.n	10008828 <__aeabi_dsub+0x6c4>
100086ec:	2420      	movs	r4, #32
100086ee:	1ae3      	subs	r3, r4, r3
100086f0:	469b      	mov	fp, r3
100086f2:	1c3b      	adds	r3, r7, #0
100086f4:	4659      	mov	r1, fp
100086f6:	408b      	lsls	r3, r1
100086f8:	4651      	mov	r1, sl
100086fa:	4699      	mov	r9, r3
100086fc:	1c2b      	adds	r3, r5, #0
100086fe:	40cb      	lsrs	r3, r1
10008700:	469c      	mov	ip, r3
10008702:	464b      	mov	r3, r9
10008704:	4664      	mov	r4, ip
10008706:	4323      	orrs	r3, r4
10008708:	469c      	mov	ip, r3
1000870a:	465b      	mov	r3, fp
1000870c:	409d      	lsls	r5, r3
1000870e:	4663      	mov	r3, ip
10008710:	1e6c      	subs	r4, r5, #1
10008712:	41a5      	sbcs	r5, r4
10008714:	40cf      	lsrs	r7, r1
10008716:	431d      	orrs	r5, r3
10008718:	9b01      	ldr	r3, [sp, #4]
1000871a:	18bf      	adds	r7, r7, r2
1000871c:	469c      	mov	ip, r3
1000871e:	4465      	add	r5, ip
10008720:	429d      	cmp	r5, r3
10008722:	4192      	sbcs	r2, r2
10008724:	4252      	negs	r2, r2
10008726:	18bf      	adds	r7, r7, r2
10008728:	1c04      	adds	r4, r0, #0
1000872a:	e613      	b.n	10008354 <__aeabi_dsub+0x1f0>
1000872c:	1c10      	adds	r0, r2, #0
1000872e:	9901      	ldr	r1, [sp, #4]
10008730:	4308      	orrs	r0, r1
10008732:	d100      	bne.n	10008736 <__aeabi_dsub+0x5d2>
10008734:	e548      	b.n	100081c8 <__aeabi_dsub+0x64>
10008736:	1a68      	subs	r0, r5, r1
10008738:	4684      	mov	ip, r0
1000873a:	4285      	cmp	r5, r0
1000873c:	4180      	sbcs	r0, r0
1000873e:	1abe      	subs	r6, r7, r2
10008740:	4240      	negs	r0, r0
10008742:	1a30      	subs	r0, r6, r0
10008744:	0206      	lsls	r6, r0, #8
10008746:	d400      	bmi.n	1000874a <__aeabi_dsub+0x5e6>
10008748:	e647      	b.n	100083da <__aeabi_dsub+0x276>
1000874a:	468c      	mov	ip, r1
1000874c:	1b4d      	subs	r5, r1, r5
1000874e:	45ac      	cmp	ip, r5
10008750:	4189      	sbcs	r1, r1
10008752:	1bd2      	subs	r2, r2, r7
10008754:	4249      	negs	r1, r1
10008756:	1a57      	subs	r7, r2, r1
10008758:	4698      	mov	r8, r3
1000875a:	e535      	b.n	100081c8 <__aeabi_dsub+0x64>
1000875c:	1c10      	adds	r0, r2, #0
1000875e:	9901      	ldr	r1, [sp, #4]
10008760:	4308      	orrs	r0, r1
10008762:	d034      	beq.n	100087ce <__aeabi_dsub+0x66a>
10008764:	2480      	movs	r4, #128	; 0x80
10008766:	0778      	lsls	r0, r7, #29
10008768:	08ed      	lsrs	r5, r5, #3
1000876a:	08ff      	lsrs	r7, r7, #3
1000876c:	0324      	lsls	r4, r4, #12
1000876e:	4328      	orrs	r0, r5
10008770:	4227      	tst	r7, r4
10008772:	d008      	beq.n	10008786 <__aeabi_dsub+0x622>
10008774:	08d6      	lsrs	r6, r2, #3
10008776:	4226      	tst	r6, r4
10008778:	d105      	bne.n	10008786 <__aeabi_dsub+0x622>
1000877a:	08c9      	lsrs	r1, r1, #3
1000877c:	0752      	lsls	r2, r2, #29
1000877e:	430a      	orrs	r2, r1
10008780:	1c10      	adds	r0, r2, #0
10008782:	1c37      	adds	r7, r6, #0
10008784:	4698      	mov	r8, r3
10008786:	00ff      	lsls	r7, r7, #3
10008788:	0f42      	lsrs	r2, r0, #29
1000878a:	4317      	orrs	r7, r2
1000878c:	00c5      	lsls	r5, r0, #3
1000878e:	4c24      	ldr	r4, [pc, #144]	; (10008820 <__aeabi_dsub+0x6bc>)
10008790:	e51a      	b.n	100081c8 <__aeabi_dsub+0x64>
10008792:	4c23      	ldr	r4, [pc, #140]	; (10008820 <__aeabi_dsub+0x6bc>)
10008794:	42a0      	cmp	r0, r4
10008796:	d1a2      	bne.n	100086de <__aeabi_dsub+0x57a>
10008798:	1c17      	adds	r7, r2, #0
1000879a:	9d01      	ldr	r5, [sp, #4]
1000879c:	1c04      	adds	r4, r0, #0
1000879e:	e513      	b.n	100081c8 <__aeabi_dsub+0x64>
100087a0:	2b00      	cmp	r3, #0
100087a2:	d035      	beq.n	10008810 <__aeabi_dsub+0x6ac>
100087a4:	1c13      	adds	r3, r2, #0
100087a6:	9901      	ldr	r1, [sp, #4]
100087a8:	430b      	orrs	r3, r1
100087aa:	d010      	beq.n	100087ce <__aeabi_dsub+0x66a>
100087ac:	2480      	movs	r4, #128	; 0x80
100087ae:	0778      	lsls	r0, r7, #29
100087b0:	08ed      	lsrs	r5, r5, #3
100087b2:	08ff      	lsrs	r7, r7, #3
100087b4:	0324      	lsls	r4, r4, #12
100087b6:	4328      	orrs	r0, r5
100087b8:	4227      	tst	r7, r4
100087ba:	d0e4      	beq.n	10008786 <__aeabi_dsub+0x622>
100087bc:	08d3      	lsrs	r3, r2, #3
100087be:	4223      	tst	r3, r4
100087c0:	d1e1      	bne.n	10008786 <__aeabi_dsub+0x622>
100087c2:	08c9      	lsrs	r1, r1, #3
100087c4:	0752      	lsls	r2, r2, #29
100087c6:	430a      	orrs	r2, r1
100087c8:	1c10      	adds	r0, r2, #0
100087ca:	1c1f      	adds	r7, r3, #0
100087cc:	e7db      	b.n	10008786 <__aeabi_dsub+0x622>
100087ce:	4c14      	ldr	r4, [pc, #80]	; (10008820 <__aeabi_dsub+0x6bc>)
100087d0:	e4fa      	b.n	100081c8 <__aeabi_dsub+0x64>
100087d2:	2200      	movs	r2, #0
100087d4:	e73f      	b.n	10008656 <__aeabi_dsub+0x4f2>
100087d6:	464c      	mov	r4, r9
100087d8:	1c3e      	adds	r6, r7, #0
100087da:	3c20      	subs	r4, #32
100087dc:	40e6      	lsrs	r6, r4
100087de:	4649      	mov	r1, r9
100087e0:	1c34      	adds	r4, r6, #0
100087e2:	2920      	cmp	r1, #32
100087e4:	d032      	beq.n	1000884c <__aeabi_dsub+0x6e8>
100087e6:	2640      	movs	r6, #64	; 0x40
100087e8:	1a76      	subs	r6, r6, r1
100087ea:	40b7      	lsls	r7, r6
100087ec:	433d      	orrs	r5, r7
100087ee:	1e6f      	subs	r7, r5, #1
100087f0:	41bd      	sbcs	r5, r7
100087f2:	2700      	movs	r7, #0
100087f4:	4325      	orrs	r5, r4
100087f6:	e6a8      	b.n	1000854a <__aeabi_dsub+0x3e6>
100087f8:	2780      	movs	r7, #128	; 0x80
100087fa:	2600      	movs	r6, #0
100087fc:	03ff      	lsls	r7, r7, #15
100087fe:	4c08      	ldr	r4, [pc, #32]	; (10008820 <__aeabi_dsub+0x6bc>)
10008800:	2500      	movs	r5, #0
10008802:	e57c      	b.n	100082fe <__aeabi_dsub+0x19a>
10008804:	433d      	orrs	r5, r7
10008806:	1e6f      	subs	r7, r5, #1
10008808:	41bd      	sbcs	r5, r7
1000880a:	2700      	movs	r7, #0
1000880c:	b2ed      	uxtb	r5, r5
1000880e:	e783      	b.n	10008718 <__aeabi_dsub+0x5b4>
10008810:	1c17      	adds	r7, r2, #0
10008812:	9d01      	ldr	r5, [sp, #4]
10008814:	4c02      	ldr	r4, [pc, #8]	; (10008820 <__aeabi_dsub+0x6bc>)
10008816:	e4d7      	b.n	100081c8 <__aeabi_dsub+0x64>
10008818:	1c17      	adds	r7, r2, #0
1000881a:	9d01      	ldr	r5, [sp, #4]
1000881c:	e4d4      	b.n	100081c8 <__aeabi_dsub+0x64>
1000881e:	46c0      	nop			; (mov r8, r8)
10008820:	000007ff 	.word	0x000007ff
10008824:	ff7fffff 	.word	0xff7fffff
10008828:	4654      	mov	r4, sl
1000882a:	1c3b      	adds	r3, r7, #0
1000882c:	3c20      	subs	r4, #32
1000882e:	40e3      	lsrs	r3, r4
10008830:	1c1c      	adds	r4, r3, #0
10008832:	4653      	mov	r3, sl
10008834:	2b20      	cmp	r3, #32
10008836:	d00d      	beq.n	10008854 <__aeabi_dsub+0x6f0>
10008838:	2340      	movs	r3, #64	; 0x40
1000883a:	4651      	mov	r1, sl
1000883c:	1a5b      	subs	r3, r3, r1
1000883e:	409f      	lsls	r7, r3
10008840:	433d      	orrs	r5, r7
10008842:	1e6f      	subs	r7, r5, #1
10008844:	41bd      	sbcs	r5, r7
10008846:	2700      	movs	r7, #0
10008848:	4325      	orrs	r5, r4
1000884a:	e765      	b.n	10008718 <__aeabi_dsub+0x5b4>
1000884c:	2700      	movs	r7, #0
1000884e:	e7cd      	b.n	100087ec <__aeabi_dsub+0x688>
10008850:	1c0d      	adds	r5, r1, #0
10008852:	e5c8      	b.n	100083e6 <__aeabi_dsub+0x282>
10008854:	2700      	movs	r7, #0
10008856:	e7f3      	b.n	10008840 <__aeabi_dsub+0x6dc>

10008858 <__aeabi_i2d>:
10008858:	b538      	push	{r3, r4, r5, lr}
1000885a:	1e04      	subs	r4, r0, #0
1000885c:	d016      	beq.n	1000888c <__aeabi_i2d+0x34>
1000885e:	0fc5      	lsrs	r5, r0, #31
10008860:	d000      	beq.n	10008864 <__aeabi_i2d+0xc>
10008862:	4244      	negs	r4, r0
10008864:	1c20      	adds	r0, r4, #0
10008866:	f000 f949 	bl	10008afc <__clzsi2>
1000886a:	4b17      	ldr	r3, [pc, #92]	; (100088c8 <__aeabi_i2d+0x70>)
1000886c:	1a1b      	subs	r3, r3, r0
1000886e:	280a      	cmp	r0, #10
10008870:	dc21      	bgt.n	100088b6 <__aeabi_i2d+0x5e>
10008872:	1c02      	adds	r2, r0, #0
10008874:	1c21      	adds	r1, r4, #0
10008876:	3215      	adds	r2, #21
10008878:	4091      	lsls	r1, r2
1000887a:	1c0a      	adds	r2, r1, #0
1000887c:	210b      	movs	r1, #11
1000887e:	1a08      	subs	r0, r1, r0
10008880:	40c4      	lsrs	r4, r0
10008882:	055b      	lsls	r3, r3, #21
10008884:	0324      	lsls	r4, r4, #12
10008886:	0b24      	lsrs	r4, r4, #12
10008888:	0d5b      	lsrs	r3, r3, #21
1000888a:	e003      	b.n	10008894 <__aeabi_i2d+0x3c>
1000888c:	2500      	movs	r5, #0
1000888e:	2300      	movs	r3, #0
10008890:	2400      	movs	r4, #0
10008892:	2200      	movs	r2, #0
10008894:	2100      	movs	r1, #0
10008896:	1c10      	adds	r0, r2, #0
10008898:	0324      	lsls	r4, r4, #12
1000889a:	0d0a      	lsrs	r2, r1, #20
1000889c:	0512      	lsls	r2, r2, #20
1000889e:	0b24      	lsrs	r4, r4, #12
100088a0:	4314      	orrs	r4, r2
100088a2:	4a0a      	ldr	r2, [pc, #40]	; (100088cc <__aeabi_i2d+0x74>)
100088a4:	051b      	lsls	r3, r3, #20
100088a6:	4014      	ands	r4, r2
100088a8:	431c      	orrs	r4, r3
100088aa:	0064      	lsls	r4, r4, #1
100088ac:	07ed      	lsls	r5, r5, #31
100088ae:	0864      	lsrs	r4, r4, #1
100088b0:	432c      	orrs	r4, r5
100088b2:	1c21      	adds	r1, r4, #0
100088b4:	bd38      	pop	{r3, r4, r5, pc}
100088b6:	380b      	subs	r0, #11
100088b8:	4084      	lsls	r4, r0
100088ba:	055b      	lsls	r3, r3, #21
100088bc:	0324      	lsls	r4, r4, #12
100088be:	0b24      	lsrs	r4, r4, #12
100088c0:	0d5b      	lsrs	r3, r3, #21
100088c2:	2200      	movs	r2, #0
100088c4:	e7e6      	b.n	10008894 <__aeabi_i2d+0x3c>
100088c6:	46c0      	nop			; (mov r8, r8)
100088c8:	0000041e 	.word	0x0000041e
100088cc:	800fffff 	.word	0x800fffff

100088d0 <__aeabi_ui2d>:
100088d0:	b510      	push	{r4, lr}
100088d2:	1e04      	subs	r4, r0, #0
100088d4:	d010      	beq.n	100088f8 <__aeabi_ui2d+0x28>
100088d6:	f000 f911 	bl	10008afc <__clzsi2>
100088da:	4a14      	ldr	r2, [pc, #80]	; (1000892c <__aeabi_ui2d+0x5c>)
100088dc:	1a12      	subs	r2, r2, r0
100088de:	280a      	cmp	r0, #10
100088e0:	dc1a      	bgt.n	10008918 <__aeabi_ui2d+0x48>
100088e2:	230b      	movs	r3, #11
100088e4:	1c21      	adds	r1, r4, #0
100088e6:	1a1b      	subs	r3, r3, r0
100088e8:	40d9      	lsrs	r1, r3
100088ea:	3015      	adds	r0, #21
100088ec:	030b      	lsls	r3, r1, #12
100088ee:	0552      	lsls	r2, r2, #21
100088f0:	4084      	lsls	r4, r0
100088f2:	0b1b      	lsrs	r3, r3, #12
100088f4:	0d52      	lsrs	r2, r2, #21
100088f6:	e001      	b.n	100088fc <__aeabi_ui2d+0x2c>
100088f8:	2200      	movs	r2, #0
100088fa:	2300      	movs	r3, #0
100088fc:	2100      	movs	r1, #0
100088fe:	031b      	lsls	r3, r3, #12
10008900:	1c20      	adds	r0, r4, #0
10008902:	0b1c      	lsrs	r4, r3, #12
10008904:	0d0b      	lsrs	r3, r1, #20
10008906:	051b      	lsls	r3, r3, #20
10008908:	4323      	orrs	r3, r4
1000890a:	4c09      	ldr	r4, [pc, #36]	; (10008930 <__aeabi_ui2d+0x60>)
1000890c:	0512      	lsls	r2, r2, #20
1000890e:	4023      	ands	r3, r4
10008910:	4313      	orrs	r3, r2
10008912:	005b      	lsls	r3, r3, #1
10008914:	0859      	lsrs	r1, r3, #1
10008916:	bd10      	pop	{r4, pc}
10008918:	1c03      	adds	r3, r0, #0
1000891a:	3b0b      	subs	r3, #11
1000891c:	409c      	lsls	r4, r3
1000891e:	0552      	lsls	r2, r2, #21
10008920:	0323      	lsls	r3, r4, #12
10008922:	0b1b      	lsrs	r3, r3, #12
10008924:	0d52      	lsrs	r2, r2, #21
10008926:	2400      	movs	r4, #0
10008928:	e7e8      	b.n	100088fc <__aeabi_ui2d+0x2c>
1000892a:	46c0      	nop			; (mov r8, r8)
1000892c:	0000041e 	.word	0x0000041e
10008930:	800fffff 	.word	0x800fffff

10008934 <__aeabi_f2d>:
10008934:	0042      	lsls	r2, r0, #1
10008936:	0e12      	lsrs	r2, r2, #24
10008938:	1c51      	adds	r1, r2, #1
1000893a:	b538      	push	{r3, r4, r5, lr}
1000893c:	b2c9      	uxtb	r1, r1
1000893e:	0243      	lsls	r3, r0, #9
10008940:	0a5d      	lsrs	r5, r3, #9
10008942:	0fc4      	lsrs	r4, r0, #31
10008944:	2901      	cmp	r1, #1
10008946:	dd15      	ble.n	10008974 <__aeabi_f2d+0x40>
10008948:	21e0      	movs	r1, #224	; 0xe0
1000894a:	0089      	lsls	r1, r1, #2
1000894c:	468c      	mov	ip, r1
1000894e:	076d      	lsls	r5, r5, #29
10008950:	0b1b      	lsrs	r3, r3, #12
10008952:	4462      	add	r2, ip
10008954:	2100      	movs	r1, #0
10008956:	1c28      	adds	r0, r5, #0
10008958:	0d0d      	lsrs	r5, r1, #20
1000895a:	052d      	lsls	r5, r5, #20
1000895c:	432b      	orrs	r3, r5
1000895e:	4d1c      	ldr	r5, [pc, #112]	; (100089d0 <__aeabi_f2d+0x9c>)
10008960:	0552      	lsls	r2, r2, #21
10008962:	402b      	ands	r3, r5
10008964:	0852      	lsrs	r2, r2, #1
10008966:	4313      	orrs	r3, r2
10008968:	005b      	lsls	r3, r3, #1
1000896a:	07e4      	lsls	r4, r4, #31
1000896c:	085b      	lsrs	r3, r3, #1
1000896e:	4323      	orrs	r3, r4
10008970:	1c19      	adds	r1, r3, #0
10008972:	bd38      	pop	{r3, r4, r5, pc}
10008974:	2a00      	cmp	r2, #0
10008976:	d115      	bne.n	100089a4 <__aeabi_f2d+0x70>
10008978:	2d00      	cmp	r5, #0
1000897a:	d01f      	beq.n	100089bc <__aeabi_f2d+0x88>
1000897c:	1c28      	adds	r0, r5, #0
1000897e:	f000 f8bd 	bl	10008afc <__clzsi2>
10008982:	280a      	cmp	r0, #10
10008984:	dc1d      	bgt.n	100089c2 <__aeabi_f2d+0x8e>
10008986:	230b      	movs	r3, #11
10008988:	1c2a      	adds	r2, r5, #0
1000898a:	1a1b      	subs	r3, r3, r0
1000898c:	40da      	lsrs	r2, r3
1000898e:	1c13      	adds	r3, r2, #0
10008990:	1c02      	adds	r2, r0, #0
10008992:	3215      	adds	r2, #21
10008994:	4095      	lsls	r5, r2
10008996:	4a0f      	ldr	r2, [pc, #60]	; (100089d4 <__aeabi_f2d+0xa0>)
10008998:	031b      	lsls	r3, r3, #12
1000899a:	1a12      	subs	r2, r2, r0
1000899c:	0552      	lsls	r2, r2, #21
1000899e:	0b1b      	lsrs	r3, r3, #12
100089a0:	0d52      	lsrs	r2, r2, #21
100089a2:	e7d7      	b.n	10008954 <__aeabi_f2d+0x20>
100089a4:	2d00      	cmp	r5, #0
100089a6:	d006      	beq.n	100089b6 <__aeabi_f2d+0x82>
100089a8:	2280      	movs	r2, #128	; 0x80
100089aa:	0b1b      	lsrs	r3, r3, #12
100089ac:	0312      	lsls	r2, r2, #12
100089ae:	4313      	orrs	r3, r2
100089b0:	076d      	lsls	r5, r5, #29
100089b2:	4a09      	ldr	r2, [pc, #36]	; (100089d8 <__aeabi_f2d+0xa4>)
100089b4:	e7ce      	b.n	10008954 <__aeabi_f2d+0x20>
100089b6:	4a08      	ldr	r2, [pc, #32]	; (100089d8 <__aeabi_f2d+0xa4>)
100089b8:	2300      	movs	r3, #0
100089ba:	e7cb      	b.n	10008954 <__aeabi_f2d+0x20>
100089bc:	2200      	movs	r2, #0
100089be:	2300      	movs	r3, #0
100089c0:	e7c8      	b.n	10008954 <__aeabi_f2d+0x20>
100089c2:	1c03      	adds	r3, r0, #0
100089c4:	3b0b      	subs	r3, #11
100089c6:	409d      	lsls	r5, r3
100089c8:	1c2b      	adds	r3, r5, #0
100089ca:	2500      	movs	r5, #0
100089cc:	e7e3      	b.n	10008996 <__aeabi_f2d+0x62>
100089ce:	46c0      	nop			; (mov r8, r8)
100089d0:	800fffff 	.word	0x800fffff
100089d4:	00000389 	.word	0x00000389
100089d8:	000007ff 	.word	0x000007ff

100089dc <__aeabi_d2f>:
100089dc:	b570      	push	{r4, r5, r6, lr}
100089de:	030b      	lsls	r3, r1, #12
100089e0:	004d      	lsls	r5, r1, #1
100089e2:	0f44      	lsrs	r4, r0, #29
100089e4:	0d6d      	lsrs	r5, r5, #21
100089e6:	0a5b      	lsrs	r3, r3, #9
100089e8:	4323      	orrs	r3, r4
100089ea:	1c6c      	adds	r4, r5, #1
100089ec:	0564      	lsls	r4, r4, #21
100089ee:	0fc9      	lsrs	r1, r1, #31
100089f0:	00c2      	lsls	r2, r0, #3
100089f2:	0d64      	lsrs	r4, r4, #21
100089f4:	2c01      	cmp	r4, #1
100089f6:	dd2a      	ble.n	10008a4e <__aeabi_d2f+0x72>
100089f8:	4c3b      	ldr	r4, [pc, #236]	; (10008ae8 <__aeabi_d2f+0x10c>)
100089fa:	192c      	adds	r4, r5, r4
100089fc:	2cfe      	cmp	r4, #254	; 0xfe
100089fe:	dc1a      	bgt.n	10008a36 <__aeabi_d2f+0x5a>
10008a00:	2c00      	cmp	r4, #0
10008a02:	dd35      	ble.n	10008a70 <__aeabi_d2f+0x94>
10008a04:	0180      	lsls	r0, r0, #6
10008a06:	1e45      	subs	r5, r0, #1
10008a08:	41a8      	sbcs	r0, r5
10008a0a:	00db      	lsls	r3, r3, #3
10008a0c:	4303      	orrs	r3, r0
10008a0e:	0f52      	lsrs	r2, r2, #29
10008a10:	4313      	orrs	r3, r2
10008a12:	075a      	lsls	r2, r3, #29
10008a14:	d004      	beq.n	10008a20 <__aeabi_d2f+0x44>
10008a16:	220f      	movs	r2, #15
10008a18:	401a      	ands	r2, r3
10008a1a:	2a04      	cmp	r2, #4
10008a1c:	d000      	beq.n	10008a20 <__aeabi_d2f+0x44>
10008a1e:	3304      	adds	r3, #4
10008a20:	2280      	movs	r2, #128	; 0x80
10008a22:	04d2      	lsls	r2, r2, #19
10008a24:	401a      	ands	r2, r3
10008a26:	d027      	beq.n	10008a78 <__aeabi_d2f+0x9c>
10008a28:	3401      	adds	r4, #1
10008a2a:	2cff      	cmp	r4, #255	; 0xff
10008a2c:	d003      	beq.n	10008a36 <__aeabi_d2f+0x5a>
10008a2e:	019b      	lsls	r3, r3, #6
10008a30:	0a5b      	lsrs	r3, r3, #9
10008a32:	b2e4      	uxtb	r4, r4
10008a34:	e001      	b.n	10008a3a <__aeabi_d2f+0x5e>
10008a36:	24ff      	movs	r4, #255	; 0xff
10008a38:	2300      	movs	r3, #0
10008a3a:	025b      	lsls	r3, r3, #9
10008a3c:	05e4      	lsls	r4, r4, #23
10008a3e:	0a5b      	lsrs	r3, r3, #9
10008a40:	4323      	orrs	r3, r4
10008a42:	005b      	lsls	r3, r3, #1
10008a44:	07c9      	lsls	r1, r1, #31
10008a46:	085b      	lsrs	r3, r3, #1
10008a48:	430b      	orrs	r3, r1
10008a4a:	1c18      	adds	r0, r3, #0
10008a4c:	bd70      	pop	{r4, r5, r6, pc}
10008a4e:	2d00      	cmp	r5, #0
10008a50:	d106      	bne.n	10008a60 <__aeabi_d2f+0x84>
10008a52:	4313      	orrs	r3, r2
10008a54:	d10e      	bne.n	10008a74 <__aeabi_d2f+0x98>
10008a56:	2400      	movs	r4, #0
10008a58:	025b      	lsls	r3, r3, #9
10008a5a:	0a5b      	lsrs	r3, r3, #9
10008a5c:	b2e4      	uxtb	r4, r4
10008a5e:	e7ec      	b.n	10008a3a <__aeabi_d2f+0x5e>
10008a60:	431a      	orrs	r2, r3
10008a62:	d0e8      	beq.n	10008a36 <__aeabi_d2f+0x5a>
10008a64:	2080      	movs	r0, #128	; 0x80
10008a66:	00db      	lsls	r3, r3, #3
10008a68:	0480      	lsls	r0, r0, #18
10008a6a:	4303      	orrs	r3, r0
10008a6c:	24ff      	movs	r4, #255	; 0xff
10008a6e:	e7d0      	b.n	10008a12 <__aeabi_d2f+0x36>
10008a70:	3417      	adds	r4, #23
10008a72:	da0c      	bge.n	10008a8e <__aeabi_d2f+0xb2>
10008a74:	2305      	movs	r3, #5
10008a76:	2400      	movs	r4, #0
10008a78:	08db      	lsrs	r3, r3, #3
10008a7a:	2cff      	cmp	r4, #255	; 0xff
10008a7c:	d1ec      	bne.n	10008a58 <__aeabi_d2f+0x7c>
10008a7e:	2b00      	cmp	r3, #0
10008a80:	d02d      	beq.n	10008ade <__aeabi_d2f+0x102>
10008a82:	2280      	movs	r2, #128	; 0x80
10008a84:	03d2      	lsls	r2, r2, #15
10008a86:	4313      	orrs	r3, r2
10008a88:	025b      	lsls	r3, r3, #9
10008a8a:	0a5b      	lsrs	r3, r3, #9
10008a8c:	e7d5      	b.n	10008a3a <__aeabi_d2f+0x5e>
10008a8e:	2480      	movs	r4, #128	; 0x80
10008a90:	4816      	ldr	r0, [pc, #88]	; (10008aec <__aeabi_d2f+0x110>)
10008a92:	0424      	lsls	r4, r4, #16
10008a94:	4323      	orrs	r3, r4
10008a96:	1b40      	subs	r0, r0, r5
10008a98:	281f      	cmp	r0, #31
10008a9a:	dc0d      	bgt.n	10008ab8 <__aeabi_d2f+0xdc>
10008a9c:	4c14      	ldr	r4, [pc, #80]	; (10008af0 <__aeabi_d2f+0x114>)
10008a9e:	46a4      	mov	ip, r4
10008aa0:	4465      	add	r5, ip
10008aa2:	40ab      	lsls	r3, r5
10008aa4:	1c1c      	adds	r4, r3, #0
10008aa6:	1c13      	adds	r3, r2, #0
10008aa8:	40ab      	lsls	r3, r5
10008aaa:	1e5d      	subs	r5, r3, #1
10008aac:	41ab      	sbcs	r3, r5
10008aae:	40c2      	lsrs	r2, r0
10008ab0:	4323      	orrs	r3, r4
10008ab2:	4313      	orrs	r3, r2
10008ab4:	2400      	movs	r4, #0
10008ab6:	e7ac      	b.n	10008a12 <__aeabi_d2f+0x36>
10008ab8:	1c1e      	adds	r6, r3, #0
10008aba:	4c0e      	ldr	r4, [pc, #56]	; (10008af4 <__aeabi_d2f+0x118>)
10008abc:	1b64      	subs	r4, r4, r5
10008abe:	40e6      	lsrs	r6, r4
10008ac0:	1c34      	adds	r4, r6, #0
10008ac2:	2820      	cmp	r0, #32
10008ac4:	d00d      	beq.n	10008ae2 <__aeabi_d2f+0x106>
10008ac6:	480c      	ldr	r0, [pc, #48]	; (10008af8 <__aeabi_d2f+0x11c>)
10008ac8:	4684      	mov	ip, r0
10008aca:	4465      	add	r5, ip
10008acc:	40ab      	lsls	r3, r5
10008ace:	1c1d      	adds	r5, r3, #0
10008ad0:	432a      	orrs	r2, r5
10008ad2:	1e53      	subs	r3, r2, #1
10008ad4:	419a      	sbcs	r2, r3
10008ad6:	1c13      	adds	r3, r2, #0
10008ad8:	4323      	orrs	r3, r4
10008ada:	2400      	movs	r4, #0
10008adc:	e799      	b.n	10008a12 <__aeabi_d2f+0x36>
10008ade:	2300      	movs	r3, #0
10008ae0:	e7ab      	b.n	10008a3a <__aeabi_d2f+0x5e>
10008ae2:	2500      	movs	r5, #0
10008ae4:	e7f4      	b.n	10008ad0 <__aeabi_d2f+0xf4>
10008ae6:	46c0      	nop			; (mov r8, r8)
10008ae8:	fffffc80 	.word	0xfffffc80
10008aec:	0000039e 	.word	0x0000039e
10008af0:	fffffc82 	.word	0xfffffc82
10008af4:	0000037e 	.word	0x0000037e
10008af8:	fffffca2 	.word	0xfffffca2

10008afc <__clzsi2>:
10008afc:	211c      	movs	r1, #28
10008afe:	2301      	movs	r3, #1
10008b00:	041b      	lsls	r3, r3, #16
10008b02:	4298      	cmp	r0, r3
10008b04:	d301      	bcc.n	10008b0a <__clzsi2+0xe>
10008b06:	0c00      	lsrs	r0, r0, #16
10008b08:	3910      	subs	r1, #16
10008b0a:	0a1b      	lsrs	r3, r3, #8
10008b0c:	4298      	cmp	r0, r3
10008b0e:	d301      	bcc.n	10008b14 <__clzsi2+0x18>
10008b10:	0a00      	lsrs	r0, r0, #8
10008b12:	3908      	subs	r1, #8
10008b14:	091b      	lsrs	r3, r3, #4
10008b16:	4298      	cmp	r0, r3
10008b18:	d301      	bcc.n	10008b1e <__clzsi2+0x22>
10008b1a:	0900      	lsrs	r0, r0, #4
10008b1c:	3904      	subs	r1, #4
10008b1e:	a202      	add	r2, pc, #8	; (adr r2, 10008b28 <__clzsi2+0x2c>)
10008b20:	5c10      	ldrb	r0, [r2, r0]
10008b22:	1840      	adds	r0, r0, r1
10008b24:	4770      	bx	lr
10008b26:	46c0      	nop			; (mov r8, r8)
10008b28:	02020304 	.word	0x02020304
10008b2c:	01010101 	.word	0x01010101
	...

10008b38 <__errno>:
10008b38:	4b01      	ldr	r3, [pc, #4]	; (10008b40 <__errno+0x8>)
10008b3a:	6818      	ldr	r0, [r3, #0]
10008b3c:	4770      	bx	lr
10008b3e:	46c0      	nop			; (mov r8, r8)
10008b40:	20000710 	.word	0x20000710

10008b44 <__libc_init_array>:
10008b44:	4b0e      	ldr	r3, [pc, #56]	; (10008b80 <__libc_init_array+0x3c>)
10008b46:	b570      	push	{r4, r5, r6, lr}
10008b48:	2500      	movs	r5, #0
10008b4a:	1c1e      	adds	r6, r3, #0
10008b4c:	4c0d      	ldr	r4, [pc, #52]	; (10008b84 <__libc_init_array+0x40>)
10008b4e:	1ae4      	subs	r4, r4, r3
10008b50:	10a4      	asrs	r4, r4, #2
10008b52:	42a5      	cmp	r5, r4
10008b54:	d004      	beq.n	10008b60 <__libc_init_array+0x1c>
10008b56:	00ab      	lsls	r3, r5, #2
10008b58:	58f3      	ldr	r3, [r6, r3]
10008b5a:	4798      	blx	r3
10008b5c:	3501      	adds	r5, #1
10008b5e:	e7f8      	b.n	10008b52 <__libc_init_array+0xe>
10008b60:	f7fd fc5a 	bl	10006418 <_init>
10008b64:	4b08      	ldr	r3, [pc, #32]	; (10008b88 <__libc_init_array+0x44>)
10008b66:	2500      	movs	r5, #0
10008b68:	1c1e      	adds	r6, r3, #0
10008b6a:	4c08      	ldr	r4, [pc, #32]	; (10008b8c <__libc_init_array+0x48>)
10008b6c:	1ae4      	subs	r4, r4, r3
10008b6e:	10a4      	asrs	r4, r4, #2
10008b70:	42a5      	cmp	r5, r4
10008b72:	d004      	beq.n	10008b7e <__libc_init_array+0x3a>
10008b74:	00ab      	lsls	r3, r5, #2
10008b76:	58f3      	ldr	r3, [r6, r3]
10008b78:	4798      	blx	r3
10008b7a:	3501      	adds	r5, #1
10008b7c:	e7f8      	b.n	10008b70 <__libc_init_array+0x2c>
10008b7e:	bd70      	pop	{r4, r5, r6, pc}
10008b80:	20000750 	.word	0x20000750
10008b84:	20000750 	.word	0x20000750
10008b88:	20000750 	.word	0x20000750
10008b8c:	20000750 	.word	0x20000750

10008b90 <memcpy>:
10008b90:	2300      	movs	r3, #0
10008b92:	b510      	push	{r4, lr}
10008b94:	4293      	cmp	r3, r2
10008b96:	d003      	beq.n	10008ba0 <memcpy+0x10>
10008b98:	5ccc      	ldrb	r4, [r1, r3]
10008b9a:	54c4      	strb	r4, [r0, r3]
10008b9c:	3301      	adds	r3, #1
10008b9e:	e7f9      	b.n	10008b94 <memcpy+0x4>
10008ba0:	bd10      	pop	{r4, pc}

10008ba2 <__cvt>:
10008ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
10008ba4:	b08b      	sub	sp, #44	; 0x2c
10008ba6:	1c14      	adds	r4, r2, #0
10008ba8:	1e1d      	subs	r5, r3, #0
10008baa:	9912      	ldr	r1, [sp, #72]	; 0x48
10008bac:	da06      	bge.n	10008bbc <__cvt+0x1a>
10008bae:	2480      	movs	r4, #128	; 0x80
10008bb0:	0624      	lsls	r4, r4, #24
10008bb2:	192b      	adds	r3, r5, r4
10008bb4:	1c1d      	adds	r5, r3, #0
10008bb6:	1c14      	adds	r4, r2, #0
10008bb8:	232d      	movs	r3, #45	; 0x2d
10008bba:	e000      	b.n	10008bbe <__cvt+0x1c>
10008bbc:	2300      	movs	r3, #0
10008bbe:	700b      	strb	r3, [r1, #0]
10008bc0:	2320      	movs	r3, #32
10008bc2:	9e14      	ldr	r6, [sp, #80]	; 0x50
10008bc4:	2203      	movs	r2, #3
10008bc6:	439e      	bics	r6, r3
10008bc8:	2e46      	cmp	r6, #70	; 0x46
10008bca:	d007      	beq.n	10008bdc <__cvt+0x3a>
10008bcc:	1c33      	adds	r3, r6, #0
10008bce:	3b45      	subs	r3, #69	; 0x45
10008bd0:	4259      	negs	r1, r3
10008bd2:	414b      	adcs	r3, r1
10008bd4:	9910      	ldr	r1, [sp, #64]	; 0x40
10008bd6:	3a01      	subs	r2, #1
10008bd8:	18cb      	adds	r3, r1, r3
10008bda:	9310      	str	r3, [sp, #64]	; 0x40
10008bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008bde:	9200      	str	r2, [sp, #0]
10008be0:	9301      	str	r3, [sp, #4]
10008be2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008be4:	1c22      	adds	r2, r4, #0
10008be6:	9302      	str	r3, [sp, #8]
10008be8:	ab08      	add	r3, sp, #32
10008bea:	9303      	str	r3, [sp, #12]
10008bec:	ab09      	add	r3, sp, #36	; 0x24
10008bee:	9304      	str	r3, [sp, #16]
10008bf0:	1c2b      	adds	r3, r5, #0
10008bf2:	f001 fdc5 	bl	1000a780 <_dtoa_r>
10008bf6:	1c07      	adds	r7, r0, #0
10008bf8:	2e47      	cmp	r6, #71	; 0x47
10008bfa:	d102      	bne.n	10008c02 <__cvt+0x60>
10008bfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008bfe:	07db      	lsls	r3, r3, #31
10008c00:	d52c      	bpl.n	10008c5c <__cvt+0xba>
10008c02:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008c04:	18fb      	adds	r3, r7, r3
10008c06:	9307      	str	r3, [sp, #28]
10008c08:	2e46      	cmp	r6, #70	; 0x46
10008c0a:	d114      	bne.n	10008c36 <__cvt+0x94>
10008c0c:	783b      	ldrb	r3, [r7, #0]
10008c0e:	2b30      	cmp	r3, #48	; 0x30
10008c10:	d10c      	bne.n	10008c2c <__cvt+0x8a>
10008c12:	1c20      	adds	r0, r4, #0
10008c14:	1c29      	adds	r1, r5, #0
10008c16:	2200      	movs	r2, #0
10008c18:	2300      	movs	r3, #0
10008c1a:	f7fd ff75 	bl	10006b08 <__aeabi_dcmpeq>
10008c1e:	2800      	cmp	r0, #0
10008c20:	d104      	bne.n	10008c2c <__cvt+0x8a>
10008c22:	2301      	movs	r3, #1
10008c24:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008c26:	1a9b      	subs	r3, r3, r2
10008c28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10008c2a:	6013      	str	r3, [r2, #0]
10008c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008c2e:	9a07      	ldr	r2, [sp, #28]
10008c30:	681b      	ldr	r3, [r3, #0]
10008c32:	18d3      	adds	r3, r2, r3
10008c34:	9307      	str	r3, [sp, #28]
10008c36:	1c20      	adds	r0, r4, #0
10008c38:	1c29      	adds	r1, r5, #0
10008c3a:	2200      	movs	r2, #0
10008c3c:	2300      	movs	r3, #0
10008c3e:	f7fd ff63 	bl	10006b08 <__aeabi_dcmpeq>
10008c42:	2800      	cmp	r0, #0
10008c44:	d001      	beq.n	10008c4a <__cvt+0xa8>
10008c46:	9b07      	ldr	r3, [sp, #28]
10008c48:	9309      	str	r3, [sp, #36]	; 0x24
10008c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008c4c:	9a07      	ldr	r2, [sp, #28]
10008c4e:	4293      	cmp	r3, r2
10008c50:	d204      	bcs.n	10008c5c <__cvt+0xba>
10008c52:	1c5a      	adds	r2, r3, #1
10008c54:	9209      	str	r2, [sp, #36]	; 0x24
10008c56:	2230      	movs	r2, #48	; 0x30
10008c58:	701a      	strb	r2, [r3, #0]
10008c5a:	e7f6      	b.n	10008c4a <__cvt+0xa8>
10008c5c:	1c38      	adds	r0, r7, #0
10008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008c60:	9a15      	ldr	r2, [sp, #84]	; 0x54
10008c62:	1bdb      	subs	r3, r3, r7
10008c64:	6013      	str	r3, [r2, #0]
10008c66:	b00b      	add	sp, #44	; 0x2c
10008c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008c6a <__exponent>:
10008c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10008c6c:	232b      	movs	r3, #43	; 0x2b
10008c6e:	1c07      	adds	r7, r0, #0
10008c70:	1c0c      	adds	r4, r1, #0
10008c72:	7002      	strb	r2, [r0, #0]
10008c74:	1c86      	adds	r6, r0, #2
10008c76:	2900      	cmp	r1, #0
10008c78:	da01      	bge.n	10008c7e <__exponent+0x14>
10008c7a:	232d      	movs	r3, #45	; 0x2d
10008c7c:	424c      	negs	r4, r1
10008c7e:	707b      	strb	r3, [r7, #1]
10008c80:	2c09      	cmp	r4, #9
10008c82:	dd1c      	ble.n	10008cbe <__exponent+0x54>
10008c84:	466b      	mov	r3, sp
10008c86:	1ddd      	adds	r5, r3, #7
10008c88:	1c20      	adds	r0, r4, #0
10008c8a:	210a      	movs	r1, #10
10008c8c:	f7fd ff20 	bl	10006ad0 <__aeabi_idivmod>
10008c90:	3d01      	subs	r5, #1
10008c92:	3130      	adds	r1, #48	; 0x30
10008c94:	7029      	strb	r1, [r5, #0]
10008c96:	1c20      	adds	r0, r4, #0
10008c98:	210a      	movs	r1, #10
10008c9a:	f7fd fe33 	bl	10006904 <__aeabi_idiv>
10008c9e:	1e04      	subs	r4, r0, #0
10008ca0:	2c09      	cmp	r4, #9
10008ca2:	dcf1      	bgt.n	10008c88 <__exponent+0x1e>
10008ca4:	3d01      	subs	r5, #1
10008ca6:	3430      	adds	r4, #48	; 0x30
10008ca8:	702c      	strb	r4, [r5, #0]
10008caa:	466b      	mov	r3, sp
10008cac:	3307      	adds	r3, #7
10008cae:	1c30      	adds	r0, r6, #0
10008cb0:	42ab      	cmp	r3, r5
10008cb2:	d909      	bls.n	10008cc8 <__exponent+0x5e>
10008cb4:	782b      	ldrb	r3, [r5, #0]
10008cb6:	3501      	adds	r5, #1
10008cb8:	7033      	strb	r3, [r6, #0]
10008cba:	3601      	adds	r6, #1
10008cbc:	e7f5      	b.n	10008caa <__exponent+0x40>
10008cbe:	2330      	movs	r3, #48	; 0x30
10008cc0:	18e4      	adds	r4, r4, r3
10008cc2:	7033      	strb	r3, [r6, #0]
10008cc4:	1cb0      	adds	r0, r6, #2
10008cc6:	7074      	strb	r4, [r6, #1]
10008cc8:	1bc0      	subs	r0, r0, r7
10008cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10008ccc <_printf_float>:
10008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
10008cce:	b093      	sub	sp, #76	; 0x4c
10008cd0:	1c0c      	adds	r4, r1, #0
10008cd2:	9208      	str	r2, [sp, #32]
10008cd4:	9e18      	ldr	r6, [sp, #96]	; 0x60
10008cd6:	9309      	str	r3, [sp, #36]	; 0x24
10008cd8:	1c05      	adds	r5, r0, #0
10008cda:	f002 fe69 	bl	1000b9b0 <_localeconv_r>
10008cde:	6803      	ldr	r3, [r0, #0]
10008ce0:	1c18      	adds	r0, r3, #0
10008ce2:	930b      	str	r3, [sp, #44]	; 0x2c
10008ce4:	f000 fde8 	bl	100098b8 <strlen>
10008ce8:	2300      	movs	r3, #0
10008cea:	2207      	movs	r2, #7
10008cec:	9310      	str	r3, [sp, #64]	; 0x40
10008cee:	6833      	ldr	r3, [r6, #0]
10008cf0:	900c      	str	r0, [sp, #48]	; 0x30
10008cf2:	3307      	adds	r3, #7
10008cf4:	4393      	bics	r3, r2
10008cf6:	1c1a      	adds	r2, r3, #0
10008cf8:	6818      	ldr	r0, [r3, #0]
10008cfa:	6859      	ldr	r1, [r3, #4]
10008cfc:	3208      	adds	r2, #8
10008cfe:	7e27      	ldrb	r7, [r4, #24]
10008d00:	6032      	str	r2, [r6, #0]
10008d02:	64a0      	str	r0, [r4, #72]	; 0x48
10008d04:	64e1      	str	r1, [r4, #76]	; 0x4c
10008d06:	f000 fd89 	bl	1000981c <__fpclassifyd>
10008d0a:	2801      	cmp	r0, #1
10008d0c:	d118      	bne.n	10008d40 <_printf_float+0x74>
10008d0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008d10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008d12:	2200      	movs	r2, #0
10008d14:	2300      	movs	r3, #0
10008d16:	f7fd fefd 	bl	10006b14 <__aeabi_dcmplt>
10008d1a:	2800      	cmp	r0, #0
10008d1c:	d003      	beq.n	10008d26 <_printf_float+0x5a>
10008d1e:	1c23      	adds	r3, r4, #0
10008d20:	222d      	movs	r2, #45	; 0x2d
10008d22:	3343      	adds	r3, #67	; 0x43
10008d24:	701a      	strb	r2, [r3, #0]
10008d26:	4bb7      	ldr	r3, [pc, #732]	; (10009004 <_printf_float+0x338>)
10008d28:	930a      	str	r3, [sp, #40]	; 0x28
10008d2a:	2f47      	cmp	r7, #71	; 0x47
10008d2c:	d901      	bls.n	10008d32 <_printf_float+0x66>
10008d2e:	4bb6      	ldr	r3, [pc, #728]	; (10009008 <_printf_float+0x33c>)
10008d30:	930a      	str	r3, [sp, #40]	; 0x28
10008d32:	2303      	movs	r3, #3
10008d34:	6822      	ldr	r2, [r4, #0]
10008d36:	6123      	str	r3, [r4, #16]
10008d38:	3301      	adds	r3, #1
10008d3a:	439a      	bics	r2, r3
10008d3c:	6022      	str	r2, [r4, #0]
10008d3e:	e012      	b.n	10008d66 <_printf_float+0x9a>
10008d40:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008d42:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008d44:	f000 fd6a 	bl	1000981c <__fpclassifyd>
10008d48:	6826      	ldr	r6, [r4, #0]
10008d4a:	2800      	cmp	r0, #0
10008d4c:	d10d      	bne.n	10008d6a <_printf_float+0x9e>
10008d4e:	4baf      	ldr	r3, [pc, #700]	; (1000900c <_printf_float+0x340>)
10008d50:	930a      	str	r3, [sp, #40]	; 0x28
10008d52:	2f47      	cmp	r7, #71	; 0x47
10008d54:	d901      	bls.n	10008d5a <_printf_float+0x8e>
10008d56:	4bae      	ldr	r3, [pc, #696]	; (10009010 <_printf_float+0x344>)
10008d58:	930a      	str	r3, [sp, #40]	; 0x28
10008d5a:	2303      	movs	r3, #3
10008d5c:	1c31      	adds	r1, r6, #0
10008d5e:	6123      	str	r3, [r4, #16]
10008d60:	3301      	adds	r3, #1
10008d62:	4399      	bics	r1, r3
10008d64:	6021      	str	r1, [r4, #0]
10008d66:	2600      	movs	r6, #0
10008d68:	e080      	b.n	10008e6c <_printf_float+0x1a0>
10008d6a:	2180      	movs	r1, #128	; 0x80
10008d6c:	6860      	ldr	r0, [r4, #4]
10008d6e:	00c9      	lsls	r1, r1, #3
10008d70:	1c43      	adds	r3, r0, #1
10008d72:	d101      	bne.n	10008d78 <_printf_float+0xac>
10008d74:	2306      	movs	r3, #6
10008d76:	e009      	b.n	10008d8c <_printf_float+0xc0>
10008d78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
10008d7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10008d7c:	2f67      	cmp	r7, #103	; 0x67
10008d7e:	d001      	beq.n	10008d84 <_printf_float+0xb8>
10008d80:	2f47      	cmp	r7, #71	; 0x47
10008d82:	d104      	bne.n	10008d8e <_printf_float+0xc2>
10008d84:	2800      	cmp	r0, #0
10008d86:	d000      	beq.n	10008d8a <_printf_float+0xbe>
10008d88:	e1c1      	b.n	1000910e <_printf_float+0x442>
10008d8a:	2301      	movs	r3, #1
10008d8c:	6063      	str	r3, [r4, #4]
10008d8e:	6863      	ldr	r3, [r4, #4]
10008d90:	4331      	orrs	r1, r6
10008d92:	9300      	str	r3, [sp, #0]
10008d94:	2323      	movs	r3, #35	; 0x23
10008d96:	6021      	str	r1, [r4, #0]
10008d98:	9101      	str	r1, [sp, #4]
10008d9a:	2100      	movs	r1, #0
10008d9c:	aa06      	add	r2, sp, #24
10008d9e:	189b      	adds	r3, r3, r2
10008da0:	9302      	str	r3, [sp, #8]
10008da2:	ab0f      	add	r3, sp, #60	; 0x3c
10008da4:	9303      	str	r3, [sp, #12]
10008da6:	ab10      	add	r3, sp, #64	; 0x40
10008da8:	9305      	str	r3, [sp, #20]
10008daa:	9704      	str	r7, [sp, #16]
10008dac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
10008dae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10008db0:	9106      	str	r1, [sp, #24]
10008db2:	1c28      	adds	r0, r5, #0
10008db4:	f7ff fef5 	bl	10008ba2 <__cvt>
10008db8:	2320      	movs	r3, #32
10008dba:	1c3a      	adds	r2, r7, #0
10008dbc:	900a      	str	r0, [sp, #40]	; 0x28
10008dbe:	439a      	bics	r2, r3
10008dc0:	2a47      	cmp	r2, #71	; 0x47
10008dc2:	d107      	bne.n	10008dd4 <_printf_float+0x108>
10008dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008dc6:	1cda      	adds	r2, r3, #3
10008dc8:	db02      	blt.n	10008dd0 <_printf_float+0x104>
10008dca:	6862      	ldr	r2, [r4, #4]
10008dcc:	4293      	cmp	r3, r2
10008dce:	dd2d      	ble.n	10008e2c <_printf_float+0x160>
10008dd0:	3f02      	subs	r7, #2
10008dd2:	b2ff      	uxtb	r7, r7
10008dd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008dd6:	2f65      	cmp	r7, #101	; 0x65
10008dd8:	d812      	bhi.n	10008e00 <_printf_float+0x134>
10008dda:	1c20      	adds	r0, r4, #0
10008ddc:	3901      	subs	r1, #1
10008dde:	1c3a      	adds	r2, r7, #0
10008de0:	3050      	adds	r0, #80	; 0x50
10008de2:	910f      	str	r1, [sp, #60]	; 0x3c
10008de4:	f7ff ff41 	bl	10008c6a <__exponent>
10008de8:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008dea:	1c06      	adds	r6, r0, #0
10008dec:	1883      	adds	r3, r0, r2
10008dee:	6123      	str	r3, [r4, #16]
10008df0:	2a01      	cmp	r2, #1
10008df2:	dc02      	bgt.n	10008dfa <_printf_float+0x12e>
10008df4:	6822      	ldr	r2, [r4, #0]
10008df6:	07d2      	lsls	r2, r2, #31
10008df8:	d52e      	bpl.n	10008e58 <_printf_float+0x18c>
10008dfa:	3301      	adds	r3, #1
10008dfc:	6123      	str	r3, [r4, #16]
10008dfe:	e02b      	b.n	10008e58 <_printf_float+0x18c>
10008e00:	2f66      	cmp	r7, #102	; 0x66
10008e02:	d114      	bne.n	10008e2e <_printf_float+0x162>
10008e04:	6863      	ldr	r3, [r4, #4]
10008e06:	2900      	cmp	r1, #0
10008e08:	dd08      	ble.n	10008e1c <_printf_float+0x150>
10008e0a:	6121      	str	r1, [r4, #16]
10008e0c:	2b00      	cmp	r3, #0
10008e0e:	d102      	bne.n	10008e16 <_printf_float+0x14a>
10008e10:	6822      	ldr	r2, [r4, #0]
10008e12:	07d2      	lsls	r2, r2, #31
10008e14:	d51d      	bpl.n	10008e52 <_printf_float+0x186>
10008e16:	3301      	adds	r3, #1
10008e18:	18cb      	adds	r3, r1, r3
10008e1a:	e011      	b.n	10008e40 <_printf_float+0x174>
10008e1c:	2b00      	cmp	r3, #0
10008e1e:	d103      	bne.n	10008e28 <_printf_float+0x15c>
10008e20:	2201      	movs	r2, #1
10008e22:	6821      	ldr	r1, [r4, #0]
10008e24:	4211      	tst	r1, r2
10008e26:	d013      	beq.n	10008e50 <_printf_float+0x184>
10008e28:	1c9a      	adds	r2, r3, #2
10008e2a:	e011      	b.n	10008e50 <_printf_float+0x184>
10008e2c:	2767      	movs	r7, #103	; 0x67
10008e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008e30:	9810      	ldr	r0, [sp, #64]	; 0x40
10008e32:	4283      	cmp	r3, r0
10008e34:	db06      	blt.n	10008e44 <_printf_float+0x178>
10008e36:	6822      	ldr	r2, [r4, #0]
10008e38:	6123      	str	r3, [r4, #16]
10008e3a:	07d2      	lsls	r2, r2, #31
10008e3c:	d509      	bpl.n	10008e52 <_printf_float+0x186>
10008e3e:	3301      	adds	r3, #1
10008e40:	6123      	str	r3, [r4, #16]
10008e42:	e006      	b.n	10008e52 <_printf_float+0x186>
10008e44:	2201      	movs	r2, #1
10008e46:	2b00      	cmp	r3, #0
10008e48:	dc01      	bgt.n	10008e4e <_printf_float+0x182>
10008e4a:	2102      	movs	r1, #2
10008e4c:	1aca      	subs	r2, r1, r3
10008e4e:	1882      	adds	r2, r0, r2
10008e50:	6122      	str	r2, [r4, #16]
10008e52:	2600      	movs	r6, #0
10008e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008e56:	65a3      	str	r3, [r4, #88]	; 0x58
10008e58:	2323      	movs	r3, #35	; 0x23
10008e5a:	aa06      	add	r2, sp, #24
10008e5c:	189b      	adds	r3, r3, r2
10008e5e:	781b      	ldrb	r3, [r3, #0]
10008e60:	2b00      	cmp	r3, #0
10008e62:	d003      	beq.n	10008e6c <_printf_float+0x1a0>
10008e64:	1c23      	adds	r3, r4, #0
10008e66:	222d      	movs	r2, #45	; 0x2d
10008e68:	3343      	adds	r3, #67	; 0x43
10008e6a:	701a      	strb	r2, [r3, #0]
10008e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008e6e:	1c28      	adds	r0, r5, #0
10008e70:	9300      	str	r3, [sp, #0]
10008e72:	1c21      	adds	r1, r4, #0
10008e74:	9b08      	ldr	r3, [sp, #32]
10008e76:	aa11      	add	r2, sp, #68	; 0x44
10008e78:	f000 f960 	bl	1000913c <_printf_common>
10008e7c:	1c43      	adds	r3, r0, #1
10008e7e:	d102      	bne.n	10008e86 <_printf_float+0x1ba>
10008e80:	2001      	movs	r0, #1
10008e82:	4240      	negs	r0, r0
10008e84:	e157      	b.n	10009136 <_printf_float+0x46a>
10008e86:	6822      	ldr	r2, [r4, #0]
10008e88:	0553      	lsls	r3, r2, #21
10008e8a:	d404      	bmi.n	10008e96 <_printf_float+0x1ca>
10008e8c:	1c28      	adds	r0, r5, #0
10008e8e:	9908      	ldr	r1, [sp, #32]
10008e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008e92:	6923      	ldr	r3, [r4, #16]
10008e94:	e117      	b.n	100090c6 <_printf_float+0x3fa>
10008e96:	2f65      	cmp	r7, #101	; 0x65
10008e98:	d800      	bhi.n	10008e9c <_printf_float+0x1d0>
10008e9a:	e0d5      	b.n	10009048 <_printf_float+0x37c>
10008e9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008e9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008ea0:	2200      	movs	r2, #0
10008ea2:	2300      	movs	r3, #0
10008ea4:	f7fd fe30 	bl	10006b08 <__aeabi_dcmpeq>
10008ea8:	2800      	cmp	r0, #0
10008eaa:	d02b      	beq.n	10008f04 <_printf_float+0x238>
10008eac:	2301      	movs	r3, #1
10008eae:	1c28      	adds	r0, r5, #0
10008eb0:	9908      	ldr	r1, [sp, #32]
10008eb2:	4a58      	ldr	r2, [pc, #352]	; (10009014 <_printf_float+0x348>)
10008eb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008eb6:	47b0      	blx	r6
10008eb8:	1c43      	adds	r3, r0, #1
10008eba:	d0e1      	beq.n	10008e80 <_printf_float+0x1b4>
10008ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008ec0:	4293      	cmp	r3, r2
10008ec2:	db07      	blt.n	10008ed4 <_printf_float+0x208>
10008ec4:	6823      	ldr	r3, [r4, #0]
10008ec6:	07db      	lsls	r3, r3, #31
10008ec8:	d404      	bmi.n	10008ed4 <_printf_float+0x208>
10008eca:	6823      	ldr	r3, [r4, #0]
10008ecc:	079b      	lsls	r3, r3, #30
10008ece:	d500      	bpl.n	10008ed2 <_printf_float+0x206>
10008ed0:	e11b      	b.n	1000910a <_printf_float+0x43e>
10008ed2:	e114      	b.n	100090fe <_printf_float+0x432>
10008ed4:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008ed6:	1c28      	adds	r0, r5, #0
10008ed8:	9908      	ldr	r1, [sp, #32]
10008eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008ede:	47b0      	blx	r6
10008ee0:	2600      	movs	r6, #0
10008ee2:	1c43      	adds	r3, r0, #1
10008ee4:	d0cc      	beq.n	10008e80 <_printf_float+0x1b4>
10008ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008ee8:	3b01      	subs	r3, #1
10008eea:	429e      	cmp	r6, r3
10008eec:	daed      	bge.n	10008eca <_printf_float+0x1fe>
10008eee:	1c22      	adds	r2, r4, #0
10008ef0:	2301      	movs	r3, #1
10008ef2:	1c28      	adds	r0, r5, #0
10008ef4:	9908      	ldr	r1, [sp, #32]
10008ef6:	321a      	adds	r2, #26
10008ef8:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008efa:	47b8      	blx	r7
10008efc:	1c43      	adds	r3, r0, #1
10008efe:	d0bf      	beq.n	10008e80 <_printf_float+0x1b4>
10008f00:	3601      	adds	r6, #1
10008f02:	e7f0      	b.n	10008ee6 <_printf_float+0x21a>
10008f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008f06:	2b00      	cmp	r3, #0
10008f08:	dc2b      	bgt.n	10008f62 <_printf_float+0x296>
10008f0a:	2301      	movs	r3, #1
10008f0c:	1c28      	adds	r0, r5, #0
10008f0e:	9908      	ldr	r1, [sp, #32]
10008f10:	4a40      	ldr	r2, [pc, #256]	; (10009014 <_printf_float+0x348>)
10008f12:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008f14:	47b0      	blx	r6
10008f16:	1c43      	adds	r3, r0, #1
10008f18:	d0b2      	beq.n	10008e80 <_printf_float+0x1b4>
10008f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008f1c:	2b00      	cmp	r3, #0
10008f1e:	d105      	bne.n	10008f2c <_printf_float+0x260>
10008f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008f22:	2b00      	cmp	r3, #0
10008f24:	d102      	bne.n	10008f2c <_printf_float+0x260>
10008f26:	6823      	ldr	r3, [r4, #0]
10008f28:	07db      	lsls	r3, r3, #31
10008f2a:	d5ce      	bpl.n	10008eca <_printf_float+0x1fe>
10008f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008f2e:	1c28      	adds	r0, r5, #0
10008f30:	9908      	ldr	r1, [sp, #32]
10008f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008f36:	47b0      	blx	r6
10008f38:	2600      	movs	r6, #0
10008f3a:	1c43      	adds	r3, r0, #1
10008f3c:	d0a0      	beq.n	10008e80 <_printf_float+0x1b4>
10008f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008f40:	1c28      	adds	r0, r5, #0
10008f42:	425b      	negs	r3, r3
10008f44:	9908      	ldr	r1, [sp, #32]
10008f46:	429e      	cmp	r6, r3
10008f48:	da08      	bge.n	10008f5c <_printf_float+0x290>
10008f4a:	1c22      	adds	r2, r4, #0
10008f4c:	2301      	movs	r3, #1
10008f4e:	321a      	adds	r2, #26
10008f50:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f52:	47b8      	blx	r7
10008f54:	1c43      	adds	r3, r0, #1
10008f56:	d093      	beq.n	10008e80 <_printf_float+0x1b4>
10008f58:	3601      	adds	r6, #1
10008f5a:	e7f0      	b.n	10008f3e <_printf_float+0x272>
10008f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008f60:	e0b1      	b.n	100090c6 <_printf_float+0x3fa>
10008f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008f64:	6da6      	ldr	r6, [r4, #88]	; 0x58
10008f66:	429e      	cmp	r6, r3
10008f68:	dd00      	ble.n	10008f6c <_printf_float+0x2a0>
10008f6a:	1c1e      	adds	r6, r3, #0
10008f6c:	2e00      	cmp	r6, #0
10008f6e:	dc01      	bgt.n	10008f74 <_printf_float+0x2a8>
10008f70:	2300      	movs	r3, #0
10008f72:	e014      	b.n	10008f9e <_printf_float+0x2d2>
10008f74:	1c33      	adds	r3, r6, #0
10008f76:	1c28      	adds	r0, r5, #0
10008f78:	9908      	ldr	r1, [sp, #32]
10008f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008f7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f7e:	47b8      	blx	r7
10008f80:	1c43      	adds	r3, r0, #1
10008f82:	d1f5      	bne.n	10008f70 <_printf_float+0x2a4>
10008f84:	e77c      	b.n	10008e80 <_printf_float+0x1b4>
10008f86:	1c22      	adds	r2, r4, #0
10008f88:	2301      	movs	r3, #1
10008f8a:	1c28      	adds	r0, r5, #0
10008f8c:	9908      	ldr	r1, [sp, #32]
10008f8e:	321a      	adds	r2, #26
10008f90:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f92:	47b8      	blx	r7
10008f94:	1c43      	adds	r3, r0, #1
10008f96:	d100      	bne.n	10008f9a <_printf_float+0x2ce>
10008f98:	e772      	b.n	10008e80 <_printf_float+0x1b4>
10008f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008f9c:	3301      	adds	r3, #1
10008f9e:	930d      	str	r3, [sp, #52]	; 0x34
10008fa0:	43f3      	mvns	r3, r6
10008fa2:	6da2      	ldr	r2, [r4, #88]	; 0x58
10008fa4:	17db      	asrs	r3, r3, #31
10008fa6:	990d      	ldr	r1, [sp, #52]	; 0x34
10008fa8:	4033      	ands	r3, r6
10008faa:	1ad3      	subs	r3, r2, r3
10008fac:	4299      	cmp	r1, r3
10008fae:	dbea      	blt.n	10008f86 <_printf_float+0x2ba>
10008fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008fb2:	189e      	adds	r6, r3, r2
10008fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008fb8:	4293      	cmp	r3, r2
10008fba:	db0e      	blt.n	10008fda <_printf_float+0x30e>
10008fbc:	6823      	ldr	r3, [r4, #0]
10008fbe:	07db      	lsls	r3, r3, #31
10008fc0:	d40b      	bmi.n	10008fda <_printf_float+0x30e>
10008fc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008fc6:	18d7      	adds	r7, r2, r3
10008fc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008fca:	1bbf      	subs	r7, r7, r6
10008fcc:	1a9b      	subs	r3, r3, r2
10008fce:	429f      	cmp	r7, r3
10008fd0:	dd00      	ble.n	10008fd4 <_printf_float+0x308>
10008fd2:	1c1f      	adds	r7, r3, #0
10008fd4:	2f00      	cmp	r7, #0
10008fd6:	dc09      	bgt.n	10008fec <_printf_float+0x320>
10008fd8:	e011      	b.n	10008ffe <_printf_float+0x332>
10008fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008fdc:	1c28      	adds	r0, r5, #0
10008fde:	9908      	ldr	r1, [sp, #32]
10008fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008fe2:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008fe4:	47b8      	blx	r7
10008fe6:	1c43      	adds	r3, r0, #1
10008fe8:	d1eb      	bne.n	10008fc2 <_printf_float+0x2f6>
10008fea:	e749      	b.n	10008e80 <_printf_float+0x1b4>
10008fec:	1c32      	adds	r2, r6, #0
10008fee:	1c3b      	adds	r3, r7, #0
10008ff0:	1c28      	adds	r0, r5, #0
10008ff2:	9908      	ldr	r1, [sp, #32]
10008ff4:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008ff6:	47b0      	blx	r6
10008ff8:	1c43      	adds	r3, r0, #1
10008ffa:	d100      	bne.n	10008ffe <_printf_float+0x332>
10008ffc:	e740      	b.n	10008e80 <_printf_float+0x1b4>
10008ffe:	2300      	movs	r3, #0
10009000:	e016      	b.n	10009030 <_printf_float+0x364>
10009002:	46c0      	nop			; (mov r8, r8)
10009004:	1000cef2 	.word	0x1000cef2
10009008:	1000cef6 	.word	0x1000cef6
1000900c:	1000cefa 	.word	0x1000cefa
10009010:	1000cefe 	.word	0x1000cefe
10009014:	1000cf02 	.word	0x1000cf02
10009018:	1c22      	adds	r2, r4, #0
1000901a:	2301      	movs	r3, #1
1000901c:	1c28      	adds	r0, r5, #0
1000901e:	9908      	ldr	r1, [sp, #32]
10009020:	321a      	adds	r2, #26
10009022:	9e09      	ldr	r6, [sp, #36]	; 0x24
10009024:	47b0      	blx	r6
10009026:	1c43      	adds	r3, r0, #1
10009028:	d100      	bne.n	1000902c <_printf_float+0x360>
1000902a:	e729      	b.n	10008e80 <_printf_float+0x1b4>
1000902c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000902e:	3301      	adds	r3, #1
10009030:	930a      	str	r3, [sp, #40]	; 0x28
10009032:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009034:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009036:	1a9a      	subs	r2, r3, r2
10009038:	43fb      	mvns	r3, r7
1000903a:	17db      	asrs	r3, r3, #31
1000903c:	403b      	ands	r3, r7
1000903e:	1ad3      	subs	r3, r2, r3
10009040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009042:	429a      	cmp	r2, r3
10009044:	dbe8      	blt.n	10009018 <_printf_float+0x34c>
10009046:	e740      	b.n	10008eca <_printf_float+0x1fe>
10009048:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000904a:	1c28      	adds	r0, r5, #0
1000904c:	9908      	ldr	r1, [sp, #32]
1000904e:	2b01      	cmp	r3, #1
10009050:	dc02      	bgt.n	10009058 <_printf_float+0x38c>
10009052:	2301      	movs	r3, #1
10009054:	421a      	tst	r2, r3
10009056:	d03c      	beq.n	100090d2 <_printf_float+0x406>
10009058:	2301      	movs	r3, #1
1000905a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000905c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000905e:	47b8      	blx	r7
10009060:	1c43      	adds	r3, r0, #1
10009062:	d100      	bne.n	10009066 <_printf_float+0x39a>
10009064:	e70c      	b.n	10008e80 <_printf_float+0x1b4>
10009066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009068:	1c28      	adds	r0, r5, #0
1000906a:	9908      	ldr	r1, [sp, #32]
1000906c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000906e:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009070:	47b8      	blx	r7
10009072:	1c43      	adds	r3, r0, #1
10009074:	d100      	bne.n	10009078 <_printf_float+0x3ac>
10009076:	e703      	b.n	10008e80 <_printf_float+0x1b4>
10009078:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000907a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1000907c:	2300      	movs	r3, #0
1000907e:	2200      	movs	r2, #0
10009080:	f7fd fd42 	bl	10006b08 <__aeabi_dcmpeq>
10009084:	2300      	movs	r3, #0
10009086:	2800      	cmp	r0, #0
10009088:	d112      	bne.n	100090b0 <_printf_float+0x3e4>
1000908a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000908c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000908e:	3201      	adds	r2, #1
10009090:	3b01      	subs	r3, #1
10009092:	1c28      	adds	r0, r5, #0
10009094:	9908      	ldr	r1, [sp, #32]
10009096:	e01d      	b.n	100090d4 <_printf_float+0x408>
10009098:	1c22      	adds	r2, r4, #0
1000909a:	2301      	movs	r3, #1
1000909c:	1c28      	adds	r0, r5, #0
1000909e:	9908      	ldr	r1, [sp, #32]
100090a0:	321a      	adds	r2, #26
100090a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
100090a4:	47b8      	blx	r7
100090a6:	1c43      	adds	r3, r0, #1
100090a8:	d100      	bne.n	100090ac <_printf_float+0x3e0>
100090aa:	e6e9      	b.n	10008e80 <_printf_float+0x1b4>
100090ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100090ae:	3301      	adds	r3, #1
100090b0:	930a      	str	r3, [sp, #40]	; 0x28
100090b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
100090b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100090b6:	3b01      	subs	r3, #1
100090b8:	429a      	cmp	r2, r3
100090ba:	dbed      	blt.n	10009098 <_printf_float+0x3cc>
100090bc:	1c22      	adds	r2, r4, #0
100090be:	1c28      	adds	r0, r5, #0
100090c0:	1c33      	adds	r3, r6, #0
100090c2:	9908      	ldr	r1, [sp, #32]
100090c4:	3250      	adds	r2, #80	; 0x50
100090c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
100090c8:	47b0      	blx	r6
100090ca:	1c43      	adds	r3, r0, #1
100090cc:	d000      	beq.n	100090d0 <_printf_float+0x404>
100090ce:	e6fc      	b.n	10008eca <_printf_float+0x1fe>
100090d0:	e6d6      	b.n	10008e80 <_printf_float+0x1b4>
100090d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100090d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
100090d6:	47b8      	blx	r7
100090d8:	1c43      	adds	r3, r0, #1
100090da:	d1ef      	bne.n	100090bc <_printf_float+0x3f0>
100090dc:	e6d0      	b.n	10008e80 <_printf_float+0x1b4>
100090de:	1c22      	adds	r2, r4, #0
100090e0:	2301      	movs	r3, #1
100090e2:	1c28      	adds	r0, r5, #0
100090e4:	9908      	ldr	r1, [sp, #32]
100090e6:	3219      	adds	r2, #25
100090e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
100090ea:	47b8      	blx	r7
100090ec:	1c43      	adds	r3, r0, #1
100090ee:	d100      	bne.n	100090f2 <_printf_float+0x426>
100090f0:	e6c6      	b.n	10008e80 <_printf_float+0x1b4>
100090f2:	3601      	adds	r6, #1
100090f4:	68e3      	ldr	r3, [r4, #12]
100090f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
100090f8:	1a9b      	subs	r3, r3, r2
100090fa:	429e      	cmp	r6, r3
100090fc:	dbef      	blt.n	100090de <_printf_float+0x412>
100090fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009100:	68e0      	ldr	r0, [r4, #12]
10009102:	4298      	cmp	r0, r3
10009104:	da17      	bge.n	10009136 <_printf_float+0x46a>
10009106:	1c18      	adds	r0, r3, #0
10009108:	e015      	b.n	10009136 <_printf_float+0x46a>
1000910a:	2600      	movs	r6, #0
1000910c:	e7f2      	b.n	100090f4 <_printf_float+0x428>
1000910e:	4331      	orrs	r1, r6
10009110:	6021      	str	r1, [r4, #0]
10009112:	9101      	str	r1, [sp, #4]
10009114:	2123      	movs	r1, #35	; 0x23
10009116:	9000      	str	r0, [sp, #0]
10009118:	a806      	add	r0, sp, #24
1000911a:	1809      	adds	r1, r1, r0
1000911c:	9102      	str	r1, [sp, #8]
1000911e:	a90f      	add	r1, sp, #60	; 0x3c
10009120:	9103      	str	r1, [sp, #12]
10009122:	a910      	add	r1, sp, #64	; 0x40
10009124:	9105      	str	r1, [sp, #20]
10009126:	2100      	movs	r1, #0
10009128:	9704      	str	r7, [sp, #16]
1000912a:	9106      	str	r1, [sp, #24]
1000912c:	1c28      	adds	r0, r5, #0
1000912e:	f7ff fd38 	bl	10008ba2 <__cvt>
10009132:	900a      	str	r0, [sp, #40]	; 0x28
10009134:	e646      	b.n	10008dc4 <_printf_float+0xf8>
10009136:	b013      	add	sp, #76	; 0x4c
10009138:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000913a:	46c0      	nop			; (mov r8, r8)

1000913c <_printf_common>:
1000913c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000913e:	1c17      	adds	r7, r2, #0
10009140:	9301      	str	r3, [sp, #4]
10009142:	690a      	ldr	r2, [r1, #16]
10009144:	688b      	ldr	r3, [r1, #8]
10009146:	9000      	str	r0, [sp, #0]
10009148:	1c0c      	adds	r4, r1, #0
1000914a:	4293      	cmp	r3, r2
1000914c:	da00      	bge.n	10009150 <_printf_common+0x14>
1000914e:	1c13      	adds	r3, r2, #0
10009150:	1c22      	adds	r2, r4, #0
10009152:	603b      	str	r3, [r7, #0]
10009154:	3243      	adds	r2, #67	; 0x43
10009156:	7812      	ldrb	r2, [r2, #0]
10009158:	2a00      	cmp	r2, #0
1000915a:	d001      	beq.n	10009160 <_printf_common+0x24>
1000915c:	3301      	adds	r3, #1
1000915e:	603b      	str	r3, [r7, #0]
10009160:	6823      	ldr	r3, [r4, #0]
10009162:	069b      	lsls	r3, r3, #26
10009164:	d502      	bpl.n	1000916c <_printf_common+0x30>
10009166:	683b      	ldr	r3, [r7, #0]
10009168:	3302      	adds	r3, #2
1000916a:	603b      	str	r3, [r7, #0]
1000916c:	2506      	movs	r5, #6
1000916e:	6823      	ldr	r3, [r4, #0]
10009170:	401d      	ands	r5, r3
10009172:	d01e      	beq.n	100091b2 <_printf_common+0x76>
10009174:	1c23      	adds	r3, r4, #0
10009176:	3343      	adds	r3, #67	; 0x43
10009178:	781b      	ldrb	r3, [r3, #0]
1000917a:	1e5a      	subs	r2, r3, #1
1000917c:	4193      	sbcs	r3, r2
1000917e:	6822      	ldr	r2, [r4, #0]
10009180:	0692      	lsls	r2, r2, #26
10009182:	d51c      	bpl.n	100091be <_printf_common+0x82>
10009184:	2030      	movs	r0, #48	; 0x30
10009186:	18e1      	adds	r1, r4, r3
10009188:	3140      	adds	r1, #64	; 0x40
1000918a:	70c8      	strb	r0, [r1, #3]
1000918c:	1c21      	adds	r1, r4, #0
1000918e:	1c5a      	adds	r2, r3, #1
10009190:	3145      	adds	r1, #69	; 0x45
10009192:	7809      	ldrb	r1, [r1, #0]
10009194:	18a2      	adds	r2, r4, r2
10009196:	3240      	adds	r2, #64	; 0x40
10009198:	3302      	adds	r3, #2
1000919a:	70d1      	strb	r1, [r2, #3]
1000919c:	e00f      	b.n	100091be <_printf_common+0x82>
1000919e:	1c22      	adds	r2, r4, #0
100091a0:	2301      	movs	r3, #1
100091a2:	9800      	ldr	r0, [sp, #0]
100091a4:	9901      	ldr	r1, [sp, #4]
100091a6:	3219      	adds	r2, #25
100091a8:	9e08      	ldr	r6, [sp, #32]
100091aa:	47b0      	blx	r6
100091ac:	1c43      	adds	r3, r0, #1
100091ae:	d00e      	beq.n	100091ce <_printf_common+0x92>
100091b0:	3501      	adds	r5, #1
100091b2:	68e3      	ldr	r3, [r4, #12]
100091b4:	683a      	ldr	r2, [r7, #0]
100091b6:	1a9b      	subs	r3, r3, r2
100091b8:	429d      	cmp	r5, r3
100091ba:	dbf0      	blt.n	1000919e <_printf_common+0x62>
100091bc:	e7da      	b.n	10009174 <_printf_common+0x38>
100091be:	1c22      	adds	r2, r4, #0
100091c0:	9800      	ldr	r0, [sp, #0]
100091c2:	9901      	ldr	r1, [sp, #4]
100091c4:	3243      	adds	r2, #67	; 0x43
100091c6:	9d08      	ldr	r5, [sp, #32]
100091c8:	47a8      	blx	r5
100091ca:	1c43      	adds	r3, r0, #1
100091cc:	d102      	bne.n	100091d4 <_printf_common+0x98>
100091ce:	2001      	movs	r0, #1
100091d0:	4240      	negs	r0, r0
100091d2:	e020      	b.n	10009216 <_printf_common+0xda>
100091d4:	2306      	movs	r3, #6
100091d6:	6820      	ldr	r0, [r4, #0]
100091d8:	68e1      	ldr	r1, [r4, #12]
100091da:	683a      	ldr	r2, [r7, #0]
100091dc:	4003      	ands	r3, r0
100091de:	2500      	movs	r5, #0
100091e0:	2b04      	cmp	r3, #4
100091e2:	d103      	bne.n	100091ec <_printf_common+0xb0>
100091e4:	1a8d      	subs	r5, r1, r2
100091e6:	43eb      	mvns	r3, r5
100091e8:	17db      	asrs	r3, r3, #31
100091ea:	401d      	ands	r5, r3
100091ec:	68a3      	ldr	r3, [r4, #8]
100091ee:	6922      	ldr	r2, [r4, #16]
100091f0:	4293      	cmp	r3, r2
100091f2:	dd01      	ble.n	100091f8 <_printf_common+0xbc>
100091f4:	1a9b      	subs	r3, r3, r2
100091f6:	18ed      	adds	r5, r5, r3
100091f8:	2700      	movs	r7, #0
100091fa:	42af      	cmp	r7, r5
100091fc:	da0a      	bge.n	10009214 <_printf_common+0xd8>
100091fe:	1c22      	adds	r2, r4, #0
10009200:	2301      	movs	r3, #1
10009202:	9800      	ldr	r0, [sp, #0]
10009204:	9901      	ldr	r1, [sp, #4]
10009206:	321a      	adds	r2, #26
10009208:	9e08      	ldr	r6, [sp, #32]
1000920a:	47b0      	blx	r6
1000920c:	1c43      	adds	r3, r0, #1
1000920e:	d0de      	beq.n	100091ce <_printf_common+0x92>
10009210:	3701      	adds	r7, #1
10009212:	e7f2      	b.n	100091fa <_printf_common+0xbe>
10009214:	2000      	movs	r0, #0
10009216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10009218 <_printf_i>:
10009218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000921a:	b08b      	sub	sp, #44	; 0x2c
1000921c:	9206      	str	r2, [sp, #24]
1000921e:	1c0a      	adds	r2, r1, #0
10009220:	3243      	adds	r2, #67	; 0x43
10009222:	9307      	str	r3, [sp, #28]
10009224:	9005      	str	r0, [sp, #20]
10009226:	9204      	str	r2, [sp, #16]
10009228:	7e0a      	ldrb	r2, [r1, #24]
1000922a:	1c0c      	adds	r4, r1, #0
1000922c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000922e:	2a6e      	cmp	r2, #110	; 0x6e
10009230:	d100      	bne.n	10009234 <_printf_i+0x1c>
10009232:	e0a8      	b.n	10009386 <_printf_i+0x16e>
10009234:	d811      	bhi.n	1000925a <_printf_i+0x42>
10009236:	2a63      	cmp	r2, #99	; 0x63
10009238:	d022      	beq.n	10009280 <_printf_i+0x68>
1000923a:	d809      	bhi.n	10009250 <_printf_i+0x38>
1000923c:	2a00      	cmp	r2, #0
1000923e:	d100      	bne.n	10009242 <_printf_i+0x2a>
10009240:	e0b2      	b.n	100093a8 <_printf_i+0x190>
10009242:	2a58      	cmp	r2, #88	; 0x58
10009244:	d000      	beq.n	10009248 <_printf_i+0x30>
10009246:	e0c2      	b.n	100093ce <_printf_i+0x1b6>
10009248:	3145      	adds	r1, #69	; 0x45
1000924a:	700a      	strb	r2, [r1, #0]
1000924c:	4a7c      	ldr	r2, [pc, #496]	; (10009440 <_printf_i+0x228>)
1000924e:	e04f      	b.n	100092f0 <_printf_i+0xd8>
10009250:	2a64      	cmp	r2, #100	; 0x64
10009252:	d01d      	beq.n	10009290 <_printf_i+0x78>
10009254:	2a69      	cmp	r2, #105	; 0x69
10009256:	d01b      	beq.n	10009290 <_printf_i+0x78>
10009258:	e0b9      	b.n	100093ce <_printf_i+0x1b6>
1000925a:	2a73      	cmp	r2, #115	; 0x73
1000925c:	d100      	bne.n	10009260 <_printf_i+0x48>
1000925e:	e0a7      	b.n	100093b0 <_printf_i+0x198>
10009260:	d809      	bhi.n	10009276 <_printf_i+0x5e>
10009262:	2a6f      	cmp	r2, #111	; 0x6f
10009264:	d029      	beq.n	100092ba <_printf_i+0xa2>
10009266:	2a70      	cmp	r2, #112	; 0x70
10009268:	d000      	beq.n	1000926c <_printf_i+0x54>
1000926a:	e0b0      	b.n	100093ce <_printf_i+0x1b6>
1000926c:	2220      	movs	r2, #32
1000926e:	6809      	ldr	r1, [r1, #0]
10009270:	430a      	orrs	r2, r1
10009272:	6022      	str	r2, [r4, #0]
10009274:	e037      	b.n	100092e6 <_printf_i+0xce>
10009276:	2a75      	cmp	r2, #117	; 0x75
10009278:	d01f      	beq.n	100092ba <_printf_i+0xa2>
1000927a:	2a78      	cmp	r2, #120	; 0x78
1000927c:	d033      	beq.n	100092e6 <_printf_i+0xce>
1000927e:	e0a6      	b.n	100093ce <_printf_i+0x1b6>
10009280:	1c0d      	adds	r5, r1, #0
10009282:	681a      	ldr	r2, [r3, #0]
10009284:	3542      	adds	r5, #66	; 0x42
10009286:	1d11      	adds	r1, r2, #4
10009288:	6019      	str	r1, [r3, #0]
1000928a:	6813      	ldr	r3, [r2, #0]
1000928c:	702b      	strb	r3, [r5, #0]
1000928e:	e0a1      	b.n	100093d4 <_printf_i+0x1bc>
10009290:	6821      	ldr	r1, [r4, #0]
10009292:	681a      	ldr	r2, [r3, #0]
10009294:	0608      	lsls	r0, r1, #24
10009296:	d503      	bpl.n	100092a0 <_printf_i+0x88>
10009298:	1d11      	adds	r1, r2, #4
1000929a:	6019      	str	r1, [r3, #0]
1000929c:	6816      	ldr	r6, [r2, #0]
1000929e:	e005      	b.n	100092ac <_printf_i+0x94>
100092a0:	0649      	lsls	r1, r1, #25
100092a2:	d5f9      	bpl.n	10009298 <_printf_i+0x80>
100092a4:	1d11      	adds	r1, r2, #4
100092a6:	6019      	str	r1, [r3, #0]
100092a8:	2300      	movs	r3, #0
100092aa:	5ed6      	ldrsh	r6, [r2, r3]
100092ac:	2e00      	cmp	r6, #0
100092ae:	da3b      	bge.n	10009328 <_printf_i+0x110>
100092b0:	232d      	movs	r3, #45	; 0x2d
100092b2:	9a04      	ldr	r2, [sp, #16]
100092b4:	4276      	negs	r6, r6
100092b6:	7013      	strb	r3, [r2, #0]
100092b8:	e036      	b.n	10009328 <_printf_i+0x110>
100092ba:	6821      	ldr	r1, [r4, #0]
100092bc:	681a      	ldr	r2, [r3, #0]
100092be:	0608      	lsls	r0, r1, #24
100092c0:	d503      	bpl.n	100092ca <_printf_i+0xb2>
100092c2:	1d11      	adds	r1, r2, #4
100092c4:	6019      	str	r1, [r3, #0]
100092c6:	6816      	ldr	r6, [r2, #0]
100092c8:	e005      	b.n	100092d6 <_printf_i+0xbe>
100092ca:	0649      	lsls	r1, r1, #25
100092cc:	d5f9      	bpl.n	100092c2 <_printf_i+0xaa>
100092ce:	1d11      	adds	r1, r2, #4
100092d0:	6019      	str	r1, [r3, #0]
100092d2:	6816      	ldr	r6, [r2, #0]
100092d4:	b2b6      	uxth	r6, r6
100092d6:	4b5a      	ldr	r3, [pc, #360]	; (10009440 <_printf_i+0x228>)
100092d8:	7e22      	ldrb	r2, [r4, #24]
100092da:	9303      	str	r3, [sp, #12]
100092dc:	270a      	movs	r7, #10
100092de:	2a6f      	cmp	r2, #111	; 0x6f
100092e0:	d11d      	bne.n	1000931e <_printf_i+0x106>
100092e2:	2708      	movs	r7, #8
100092e4:	e01b      	b.n	1000931e <_printf_i+0x106>
100092e6:	1c22      	adds	r2, r4, #0
100092e8:	2178      	movs	r1, #120	; 0x78
100092ea:	3245      	adds	r2, #69	; 0x45
100092ec:	7011      	strb	r1, [r2, #0]
100092ee:	4a55      	ldr	r2, [pc, #340]	; (10009444 <_printf_i+0x22c>)
100092f0:	6819      	ldr	r1, [r3, #0]
100092f2:	9203      	str	r2, [sp, #12]
100092f4:	1d08      	adds	r0, r1, #4
100092f6:	6822      	ldr	r2, [r4, #0]
100092f8:	6018      	str	r0, [r3, #0]
100092fa:	680e      	ldr	r6, [r1, #0]
100092fc:	0610      	lsls	r0, r2, #24
100092fe:	d402      	bmi.n	10009306 <_printf_i+0xee>
10009300:	0650      	lsls	r0, r2, #25
10009302:	d500      	bpl.n	10009306 <_printf_i+0xee>
10009304:	b2b6      	uxth	r6, r6
10009306:	07d3      	lsls	r3, r2, #31
10009308:	d502      	bpl.n	10009310 <_printf_i+0xf8>
1000930a:	2320      	movs	r3, #32
1000930c:	431a      	orrs	r2, r3
1000930e:	6022      	str	r2, [r4, #0]
10009310:	2710      	movs	r7, #16
10009312:	2e00      	cmp	r6, #0
10009314:	d103      	bne.n	1000931e <_printf_i+0x106>
10009316:	2320      	movs	r3, #32
10009318:	6822      	ldr	r2, [r4, #0]
1000931a:	439a      	bics	r2, r3
1000931c:	6022      	str	r2, [r4, #0]
1000931e:	1c23      	adds	r3, r4, #0
10009320:	2200      	movs	r2, #0
10009322:	3343      	adds	r3, #67	; 0x43
10009324:	701a      	strb	r2, [r3, #0]
10009326:	e002      	b.n	1000932e <_printf_i+0x116>
10009328:	270a      	movs	r7, #10
1000932a:	4b45      	ldr	r3, [pc, #276]	; (10009440 <_printf_i+0x228>)
1000932c:	9303      	str	r3, [sp, #12]
1000932e:	6863      	ldr	r3, [r4, #4]
10009330:	60a3      	str	r3, [r4, #8]
10009332:	2b00      	cmp	r3, #0
10009334:	db03      	blt.n	1000933e <_printf_i+0x126>
10009336:	2204      	movs	r2, #4
10009338:	6821      	ldr	r1, [r4, #0]
1000933a:	4391      	bics	r1, r2
1000933c:	6021      	str	r1, [r4, #0]
1000933e:	2e00      	cmp	r6, #0
10009340:	d102      	bne.n	10009348 <_printf_i+0x130>
10009342:	9d04      	ldr	r5, [sp, #16]
10009344:	2b00      	cmp	r3, #0
10009346:	d00e      	beq.n	10009366 <_printf_i+0x14e>
10009348:	9d04      	ldr	r5, [sp, #16]
1000934a:	1c30      	adds	r0, r6, #0
1000934c:	1c39      	adds	r1, r7, #0
1000934e:	f7fd facf 	bl	100068f0 <__aeabi_uidivmod>
10009352:	9b03      	ldr	r3, [sp, #12]
10009354:	3d01      	subs	r5, #1
10009356:	5c5b      	ldrb	r3, [r3, r1]
10009358:	1c30      	adds	r0, r6, #0
1000935a:	702b      	strb	r3, [r5, #0]
1000935c:	1c39      	adds	r1, r7, #0
1000935e:	f7fd fa41 	bl	100067e4 <__aeabi_uidiv>
10009362:	1e06      	subs	r6, r0, #0
10009364:	d1f1      	bne.n	1000934a <_printf_i+0x132>
10009366:	2f08      	cmp	r7, #8
10009368:	d109      	bne.n	1000937e <_printf_i+0x166>
1000936a:	6823      	ldr	r3, [r4, #0]
1000936c:	07db      	lsls	r3, r3, #31
1000936e:	d506      	bpl.n	1000937e <_printf_i+0x166>
10009370:	6863      	ldr	r3, [r4, #4]
10009372:	6922      	ldr	r2, [r4, #16]
10009374:	4293      	cmp	r3, r2
10009376:	dc02      	bgt.n	1000937e <_printf_i+0x166>
10009378:	2330      	movs	r3, #48	; 0x30
1000937a:	3d01      	subs	r5, #1
1000937c:	702b      	strb	r3, [r5, #0]
1000937e:	9b04      	ldr	r3, [sp, #16]
10009380:	1b5b      	subs	r3, r3, r5
10009382:	6123      	str	r3, [r4, #16]
10009384:	e02b      	b.n	100093de <_printf_i+0x1c6>
10009386:	6809      	ldr	r1, [r1, #0]
10009388:	681a      	ldr	r2, [r3, #0]
1000938a:	0608      	lsls	r0, r1, #24
1000938c:	d407      	bmi.n	1000939e <_printf_i+0x186>
1000938e:	0649      	lsls	r1, r1, #25
10009390:	d505      	bpl.n	1000939e <_printf_i+0x186>
10009392:	1d11      	adds	r1, r2, #4
10009394:	6019      	str	r1, [r3, #0]
10009396:	6813      	ldr	r3, [r2, #0]
10009398:	8aa2      	ldrh	r2, [r4, #20]
1000939a:	801a      	strh	r2, [r3, #0]
1000939c:	e004      	b.n	100093a8 <_printf_i+0x190>
1000939e:	1d11      	adds	r1, r2, #4
100093a0:	6019      	str	r1, [r3, #0]
100093a2:	6813      	ldr	r3, [r2, #0]
100093a4:	6962      	ldr	r2, [r4, #20]
100093a6:	601a      	str	r2, [r3, #0]
100093a8:	2300      	movs	r3, #0
100093aa:	9d04      	ldr	r5, [sp, #16]
100093ac:	6123      	str	r3, [r4, #16]
100093ae:	e016      	b.n	100093de <_printf_i+0x1c6>
100093b0:	681a      	ldr	r2, [r3, #0]
100093b2:	1d11      	adds	r1, r2, #4
100093b4:	6019      	str	r1, [r3, #0]
100093b6:	6815      	ldr	r5, [r2, #0]
100093b8:	2100      	movs	r1, #0
100093ba:	1c28      	adds	r0, r5, #0
100093bc:	6862      	ldr	r2, [r4, #4]
100093be:	f002 fb05 	bl	1000b9cc <memchr>
100093c2:	2800      	cmp	r0, #0
100093c4:	d001      	beq.n	100093ca <_printf_i+0x1b2>
100093c6:	1b40      	subs	r0, r0, r5
100093c8:	6060      	str	r0, [r4, #4]
100093ca:	6863      	ldr	r3, [r4, #4]
100093cc:	e003      	b.n	100093d6 <_printf_i+0x1be>
100093ce:	1c25      	adds	r5, r4, #0
100093d0:	3542      	adds	r5, #66	; 0x42
100093d2:	702a      	strb	r2, [r5, #0]
100093d4:	2301      	movs	r3, #1
100093d6:	6123      	str	r3, [r4, #16]
100093d8:	2300      	movs	r3, #0
100093da:	9a04      	ldr	r2, [sp, #16]
100093dc:	7013      	strb	r3, [r2, #0]
100093de:	9b07      	ldr	r3, [sp, #28]
100093e0:	9805      	ldr	r0, [sp, #20]
100093e2:	9300      	str	r3, [sp, #0]
100093e4:	1c21      	adds	r1, r4, #0
100093e6:	9b06      	ldr	r3, [sp, #24]
100093e8:	aa09      	add	r2, sp, #36	; 0x24
100093ea:	f7ff fea7 	bl	1000913c <_printf_common>
100093ee:	1c43      	adds	r3, r0, #1
100093f0:	d102      	bne.n	100093f8 <_printf_i+0x1e0>
100093f2:	2001      	movs	r0, #1
100093f4:	4240      	negs	r0, r0
100093f6:	e021      	b.n	1000943c <_printf_i+0x224>
100093f8:	1c2a      	adds	r2, r5, #0
100093fa:	6923      	ldr	r3, [r4, #16]
100093fc:	9805      	ldr	r0, [sp, #20]
100093fe:	9906      	ldr	r1, [sp, #24]
10009400:	9d07      	ldr	r5, [sp, #28]
10009402:	47a8      	blx	r5
10009404:	1c43      	adds	r3, r0, #1
10009406:	d0f4      	beq.n	100093f2 <_printf_i+0x1da>
10009408:	6823      	ldr	r3, [r4, #0]
1000940a:	079b      	lsls	r3, r3, #30
1000940c:	d405      	bmi.n	1000941a <_printf_i+0x202>
1000940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009410:	68e0      	ldr	r0, [r4, #12]
10009412:	4298      	cmp	r0, r3
10009414:	da12      	bge.n	1000943c <_printf_i+0x224>
10009416:	1c18      	adds	r0, r3, #0
10009418:	e010      	b.n	1000943c <_printf_i+0x224>
1000941a:	2500      	movs	r5, #0
1000941c:	68e3      	ldr	r3, [r4, #12]
1000941e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009420:	1a9b      	subs	r3, r3, r2
10009422:	429d      	cmp	r5, r3
10009424:	daf3      	bge.n	1000940e <_printf_i+0x1f6>
10009426:	1c22      	adds	r2, r4, #0
10009428:	2301      	movs	r3, #1
1000942a:	9805      	ldr	r0, [sp, #20]
1000942c:	9906      	ldr	r1, [sp, #24]
1000942e:	3219      	adds	r2, #25
10009430:	9e07      	ldr	r6, [sp, #28]
10009432:	47b0      	blx	r6
10009434:	1c43      	adds	r3, r0, #1
10009436:	d0dc      	beq.n	100093f2 <_printf_i+0x1da>
10009438:	3501      	adds	r5, #1
1000943a:	e7ef      	b.n	1000941c <_printf_i+0x204>
1000943c:	b00b      	add	sp, #44	; 0x2c
1000943e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009440:	1000cf04 	.word	0x1000cf04
10009444:	1000cf15 	.word	0x1000cf15

10009448 <_scanf_float>:
10009448:	b5f0      	push	{r4, r5, r6, r7, lr}
1000944a:	1c15      	adds	r5, r2, #0
1000944c:	2200      	movs	r2, #0
1000944e:	b08b      	sub	sp, #44	; 0x2c
10009450:	9306      	str	r3, [sp, #24]
10009452:	688b      	ldr	r3, [r1, #8]
10009454:	9205      	str	r2, [sp, #20]
10009456:	325d      	adds	r2, #93	; 0x5d
10009458:	1c0e      	adds	r6, r1, #0
1000945a:	32ff      	adds	r2, #255	; 0xff
1000945c:	1e59      	subs	r1, r3, #1
1000945e:	9002      	str	r0, [sp, #8]
10009460:	4291      	cmp	r1, r2
10009462:	d905      	bls.n	10009470 <_scanf_float+0x28>
10009464:	3b5e      	subs	r3, #94	; 0x5e
10009466:	3bff      	subs	r3, #255	; 0xff
10009468:	9305      	str	r3, [sp, #20]
1000946a:	235e      	movs	r3, #94	; 0x5e
1000946c:	33ff      	adds	r3, #255	; 0xff
1000946e:	60b3      	str	r3, [r6, #8]
10009470:	23f0      	movs	r3, #240	; 0xf0
10009472:	6832      	ldr	r2, [r6, #0]
10009474:	00db      	lsls	r3, r3, #3
10009476:	4313      	orrs	r3, r2
10009478:	6033      	str	r3, [r6, #0]
1000947a:	1c33      	adds	r3, r6, #0
1000947c:	2400      	movs	r4, #0
1000947e:	331c      	adds	r3, #28
10009480:	1c1f      	adds	r7, r3, #0
10009482:	9304      	str	r3, [sp, #16]
10009484:	9403      	str	r4, [sp, #12]
10009486:	9409      	str	r4, [sp, #36]	; 0x24
10009488:	9408      	str	r4, [sp, #32]
1000948a:	9400      	str	r4, [sp, #0]
1000948c:	9407      	str	r4, [sp, #28]
1000948e:	68b2      	ldr	r2, [r6, #8]
10009490:	2a00      	cmp	r2, #0
10009492:	d100      	bne.n	10009496 <_scanf_float+0x4e>
10009494:	e0e1      	b.n	1000965a <_scanf_float+0x212>
10009496:	682b      	ldr	r3, [r5, #0]
10009498:	781b      	ldrb	r3, [r3, #0]
1000949a:	2b49      	cmp	r3, #73	; 0x49
1000949c:	d077      	beq.n	1000958e <_scanf_float+0x146>
1000949e:	d818      	bhi.n	100094d2 <_scanf_float+0x8a>
100094a0:	2b39      	cmp	r3, #57	; 0x39
100094a2:	d80d      	bhi.n	100094c0 <_scanf_float+0x78>
100094a4:	2b31      	cmp	r3, #49	; 0x31
100094a6:	d242      	bcs.n	1000952e <_scanf_float+0xe6>
100094a8:	2b2d      	cmp	r3, #45	; 0x2d
100094aa:	d049      	beq.n	10009540 <_scanf_float+0xf8>
100094ac:	d802      	bhi.n	100094b4 <_scanf_float+0x6c>
100094ae:	2b2b      	cmp	r3, #43	; 0x2b
100094b0:	d046      	beq.n	10009540 <_scanf_float+0xf8>
100094b2:	e0d2      	b.n	1000965a <_scanf_float+0x212>
100094b4:	2b2e      	cmp	r3, #46	; 0x2e
100094b6:	d100      	bne.n	100094ba <_scanf_float+0x72>
100094b8:	e08d      	b.n	100095d6 <_scanf_float+0x18e>
100094ba:	2b30      	cmp	r3, #48	; 0x30
100094bc:	d025      	beq.n	1000950a <_scanf_float+0xc2>
100094be:	e0cc      	b.n	1000965a <_scanf_float+0x212>
100094c0:	2b45      	cmp	r3, #69	; 0x45
100094c2:	d100      	bne.n	100094c6 <_scanf_float+0x7e>
100094c4:	e090      	b.n	100095e8 <_scanf_float+0x1a0>
100094c6:	2b46      	cmp	r3, #70	; 0x46
100094c8:	d079      	beq.n	100095be <_scanf_float+0x176>
100094ca:	2b41      	cmp	r3, #65	; 0x41
100094cc:	d000      	beq.n	100094d0 <_scanf_float+0x88>
100094ce:	e0c4      	b.n	1000965a <_scanf_float+0x212>
100094d0:	e058      	b.n	10009584 <_scanf_float+0x13c>
100094d2:	2b65      	cmp	r3, #101	; 0x65
100094d4:	d100      	bne.n	100094d8 <_scanf_float+0x90>
100094d6:	e087      	b.n	100095e8 <_scanf_float+0x1a0>
100094d8:	d80a      	bhi.n	100094f0 <_scanf_float+0xa8>
100094da:	2b54      	cmp	r3, #84	; 0x54
100094dc:	d073      	beq.n	100095c6 <_scanf_float+0x17e>
100094de:	d802      	bhi.n	100094e6 <_scanf_float+0x9e>
100094e0:	2b4e      	cmp	r3, #78	; 0x4e
100094e2:	d035      	beq.n	10009550 <_scanf_float+0x108>
100094e4:	e0b9      	b.n	1000965a <_scanf_float+0x212>
100094e6:	2b59      	cmp	r3, #89	; 0x59
100094e8:	d071      	beq.n	100095ce <_scanf_float+0x186>
100094ea:	2b61      	cmp	r3, #97	; 0x61
100094ec:	d04a      	beq.n	10009584 <_scanf_float+0x13c>
100094ee:	e0b4      	b.n	1000965a <_scanf_float+0x212>
100094f0:	2b6e      	cmp	r3, #110	; 0x6e
100094f2:	d02d      	beq.n	10009550 <_scanf_float+0x108>
100094f4:	d804      	bhi.n	10009500 <_scanf_float+0xb8>
100094f6:	2b66      	cmp	r3, #102	; 0x66
100094f8:	d061      	beq.n	100095be <_scanf_float+0x176>
100094fa:	2b69      	cmp	r3, #105	; 0x69
100094fc:	d047      	beq.n	1000958e <_scanf_float+0x146>
100094fe:	e0ac      	b.n	1000965a <_scanf_float+0x212>
10009500:	2b74      	cmp	r3, #116	; 0x74
10009502:	d060      	beq.n	100095c6 <_scanf_float+0x17e>
10009504:	2b79      	cmp	r3, #121	; 0x79
10009506:	d062      	beq.n	100095ce <_scanf_float+0x186>
10009508:	e0a7      	b.n	1000965a <_scanf_float+0x212>
1000950a:	6831      	ldr	r1, [r6, #0]
1000950c:	05c8      	lsls	r0, r1, #23
1000950e:	d50e      	bpl.n	1000952e <_scanf_float+0xe6>
10009510:	2380      	movs	r3, #128	; 0x80
10009512:	4399      	bics	r1, r3
10009514:	9b00      	ldr	r3, [sp, #0]
10009516:	6031      	str	r1, [r6, #0]
10009518:	3301      	adds	r3, #1
1000951a:	9300      	str	r3, [sp, #0]
1000951c:	9b05      	ldr	r3, [sp, #20]
1000951e:	2b00      	cmp	r3, #0
10009520:	d100      	bne.n	10009524 <_scanf_float+0xdc>
10009522:	e082      	b.n	1000962a <_scanf_float+0x1e2>
10009524:	3b01      	subs	r3, #1
10009526:	3201      	adds	r2, #1
10009528:	9305      	str	r3, [sp, #20]
1000952a:	60b2      	str	r2, [r6, #8]
1000952c:	e07d      	b.n	1000962a <_scanf_float+0x1e2>
1000952e:	9a03      	ldr	r2, [sp, #12]
10009530:	1912      	adds	r2, r2, r4
10009532:	2a00      	cmp	r2, #0
10009534:	d000      	beq.n	10009538 <_scanf_float+0xf0>
10009536:	e090      	b.n	1000965a <_scanf_float+0x212>
10009538:	4ab3      	ldr	r2, [pc, #716]	; (10009808 <_scanf_float+0x3c0>)
1000953a:	6831      	ldr	r1, [r6, #0]
1000953c:	400a      	ands	r2, r1
1000953e:	e005      	b.n	1000954c <_scanf_float+0x104>
10009540:	2180      	movs	r1, #128	; 0x80
10009542:	6832      	ldr	r2, [r6, #0]
10009544:	420a      	tst	r2, r1
10009546:	d100      	bne.n	1000954a <_scanf_float+0x102>
10009548:	e087      	b.n	1000965a <_scanf_float+0x212>
1000954a:	438a      	bics	r2, r1
1000954c:	6032      	str	r2, [r6, #0]
1000954e:	e06a      	b.n	10009626 <_scanf_float+0x1de>
10009550:	9a03      	ldr	r2, [sp, #12]
10009552:	2a00      	cmp	r2, #0
10009554:	d10e      	bne.n	10009574 <_scanf_float+0x12c>
10009556:	9a00      	ldr	r2, [sp, #0]
10009558:	2a00      	cmp	r2, #0
1000955a:	d10e      	bne.n	1000957a <_scanf_float+0x132>
1000955c:	6831      	ldr	r1, [r6, #0]
1000955e:	22e0      	movs	r2, #224	; 0xe0
10009560:	1c08      	adds	r0, r1, #0
10009562:	00d2      	lsls	r2, r2, #3
10009564:	4010      	ands	r0, r2
10009566:	4290      	cmp	r0, r2
10009568:	d107      	bne.n	1000957a <_scanf_float+0x132>
1000956a:	4aa8      	ldr	r2, [pc, #672]	; (1000980c <_scanf_float+0x3c4>)
1000956c:	400a      	ands	r2, r1
1000956e:	6032      	str	r2, [r6, #0]
10009570:	2201      	movs	r2, #1
10009572:	e057      	b.n	10009624 <_scanf_float+0x1dc>
10009574:	9a03      	ldr	r2, [sp, #12]
10009576:	2a02      	cmp	r2, #2
10009578:	d053      	beq.n	10009622 <_scanf_float+0x1da>
1000957a:	2c01      	cmp	r4, #1
1000957c:	d01c      	beq.n	100095b8 <_scanf_float+0x170>
1000957e:	2c04      	cmp	r4, #4
10009580:	d01a      	beq.n	100095b8 <_scanf_float+0x170>
10009582:	e06a      	b.n	1000965a <_scanf_float+0x212>
10009584:	9a03      	ldr	r2, [sp, #12]
10009586:	2a01      	cmp	r2, #1
10009588:	d167      	bne.n	1000965a <_scanf_float+0x212>
1000958a:	2202      	movs	r2, #2
1000958c:	e04a      	b.n	10009624 <_scanf_float+0x1dc>
1000958e:	2c00      	cmp	r4, #0
10009590:	d10e      	bne.n	100095b0 <_scanf_float+0x168>
10009592:	9a00      	ldr	r2, [sp, #0]
10009594:	2a00      	cmp	r2, #0
10009596:	d163      	bne.n	10009660 <_scanf_float+0x218>
10009598:	6831      	ldr	r1, [r6, #0]
1000959a:	22e0      	movs	r2, #224	; 0xe0
1000959c:	1c08      	adds	r0, r1, #0
1000959e:	00d2      	lsls	r2, r2, #3
100095a0:	4010      	ands	r0, r2
100095a2:	4290      	cmp	r0, r2
100095a4:	d160      	bne.n	10009668 <_scanf_float+0x220>
100095a6:	4a99      	ldr	r2, [pc, #612]	; (1000980c <_scanf_float+0x3c4>)
100095a8:	3401      	adds	r4, #1
100095aa:	400a      	ands	r2, r1
100095ac:	6032      	str	r2, [r6, #0]
100095ae:	e03a      	b.n	10009626 <_scanf_float+0x1de>
100095b0:	21fd      	movs	r1, #253	; 0xfd
100095b2:	1ee2      	subs	r2, r4, #3
100095b4:	420a      	tst	r2, r1
100095b6:	d150      	bne.n	1000965a <_scanf_float+0x212>
100095b8:	3401      	adds	r4, #1
100095ba:	b2e4      	uxtb	r4, r4
100095bc:	e033      	b.n	10009626 <_scanf_float+0x1de>
100095be:	2c02      	cmp	r4, #2
100095c0:	d14b      	bne.n	1000965a <_scanf_float+0x212>
100095c2:	2403      	movs	r4, #3
100095c4:	e02f      	b.n	10009626 <_scanf_float+0x1de>
100095c6:	2c06      	cmp	r4, #6
100095c8:	d147      	bne.n	1000965a <_scanf_float+0x212>
100095ca:	2407      	movs	r4, #7
100095cc:	e02b      	b.n	10009626 <_scanf_float+0x1de>
100095ce:	2c07      	cmp	r4, #7
100095d0:	d143      	bne.n	1000965a <_scanf_float+0x212>
100095d2:	2408      	movs	r4, #8
100095d4:	e027      	b.n	10009626 <_scanf_float+0x1de>
100095d6:	6831      	ldr	r1, [r6, #0]
100095d8:	058a      	lsls	r2, r1, #22
100095da:	d53e      	bpl.n	1000965a <_scanf_float+0x212>
100095dc:	4a8c      	ldr	r2, [pc, #560]	; (10009810 <_scanf_float+0x3c8>)
100095de:	400a      	ands	r2, r1
100095e0:	6032      	str	r2, [r6, #0]
100095e2:	9a00      	ldr	r2, [sp, #0]
100095e4:	9207      	str	r2, [sp, #28]
100095e6:	e01e      	b.n	10009626 <_scanf_float+0x1de>
100095e8:	22a0      	movs	r2, #160	; 0xa0
100095ea:	2080      	movs	r0, #128	; 0x80
100095ec:	6831      	ldr	r1, [r6, #0]
100095ee:	00d2      	lsls	r2, r2, #3
100095f0:	400a      	ands	r2, r1
100095f2:	00c0      	lsls	r0, r0, #3
100095f4:	4282      	cmp	r2, r0
100095f6:	d004      	beq.n	10009602 <_scanf_float+0x1ba>
100095f8:	4201      	tst	r1, r0
100095fa:	d02e      	beq.n	1000965a <_scanf_float+0x212>
100095fc:	9a00      	ldr	r2, [sp, #0]
100095fe:	2a00      	cmp	r2, #0
10009600:	d032      	beq.n	10009668 <_scanf_float+0x220>
10009602:	058a      	lsls	r2, r1, #22
10009604:	d404      	bmi.n	10009610 <_scanf_float+0x1c8>
10009606:	9a00      	ldr	r2, [sp, #0]
10009608:	9807      	ldr	r0, [sp, #28]
1000960a:	9709      	str	r7, [sp, #36]	; 0x24
1000960c:	1a12      	subs	r2, r2, r0
1000960e:	9208      	str	r2, [sp, #32]
10009610:	4a7e      	ldr	r2, [pc, #504]	; (1000980c <_scanf_float+0x3c4>)
10009612:	400a      	ands	r2, r1
10009614:	21c0      	movs	r1, #192	; 0xc0
10009616:	0049      	lsls	r1, r1, #1
10009618:	430a      	orrs	r2, r1
1000961a:	6032      	str	r2, [r6, #0]
1000961c:	2200      	movs	r2, #0
1000961e:	9200      	str	r2, [sp, #0]
10009620:	e001      	b.n	10009626 <_scanf_float+0x1de>
10009622:	2203      	movs	r2, #3
10009624:	9203      	str	r2, [sp, #12]
10009626:	703b      	strb	r3, [r7, #0]
10009628:	3701      	adds	r7, #1
1000962a:	68b3      	ldr	r3, [r6, #8]
1000962c:	3b01      	subs	r3, #1
1000962e:	60b3      	str	r3, [r6, #8]
10009630:	6933      	ldr	r3, [r6, #16]
10009632:	3301      	adds	r3, #1
10009634:	6133      	str	r3, [r6, #16]
10009636:	686b      	ldr	r3, [r5, #4]
10009638:	3b01      	subs	r3, #1
1000963a:	606b      	str	r3, [r5, #4]
1000963c:	2b00      	cmp	r3, #0
1000963e:	dd03      	ble.n	10009648 <_scanf_float+0x200>
10009640:	682b      	ldr	r3, [r5, #0]
10009642:	3301      	adds	r3, #1
10009644:	602b      	str	r3, [r5, #0]
10009646:	e722      	b.n	1000948e <_scanf_float+0x46>
10009648:	23c0      	movs	r3, #192	; 0xc0
1000964a:	005b      	lsls	r3, r3, #1
1000964c:	58f3      	ldr	r3, [r6, r3]
1000964e:	9802      	ldr	r0, [sp, #8]
10009650:	1c29      	adds	r1, r5, #0
10009652:	4798      	blx	r3
10009654:	2800      	cmp	r0, #0
10009656:	d100      	bne.n	1000965a <_scanf_float+0x212>
10009658:	e719      	b.n	1000948e <_scanf_float+0x46>
1000965a:	9b00      	ldr	r3, [sp, #0]
1000965c:	2b00      	cmp	r3, #0
1000965e:	d003      	beq.n	10009668 <_scanf_float+0x220>
10009660:	6832      	ldr	r2, [r6, #0]
10009662:	4b6c      	ldr	r3, [pc, #432]	; (10009814 <_scanf_float+0x3cc>)
10009664:	4013      	ands	r3, r2
10009666:	6033      	str	r3, [r6, #0]
10009668:	9b03      	ldr	r3, [sp, #12]
1000966a:	3b01      	subs	r3, #1
1000966c:	2b01      	cmp	r3, #1
1000966e:	d810      	bhi.n	10009692 <_scanf_float+0x24a>
10009670:	9b04      	ldr	r3, [sp, #16]
10009672:	429f      	cmp	r7, r3
10009674:	d90b      	bls.n	1000968e <_scanf_float+0x246>
10009676:	23be      	movs	r3, #190	; 0xbe
10009678:	3f01      	subs	r7, #1
1000967a:	005b      	lsls	r3, r3, #1
1000967c:	58f3      	ldr	r3, [r6, r3]
1000967e:	7839      	ldrb	r1, [r7, #0]
10009680:	9802      	ldr	r0, [sp, #8]
10009682:	1c2a      	adds	r2, r5, #0
10009684:	4798      	blx	r3
10009686:	6933      	ldr	r3, [r6, #16]
10009688:	3b01      	subs	r3, #1
1000968a:	6133      	str	r3, [r6, #16]
1000968c:	e7f0      	b.n	10009670 <_scanf_float+0x228>
1000968e:	2401      	movs	r4, #1
10009690:	e0b7      	b.n	10009802 <_scanf_float+0x3ba>
10009692:	1e63      	subs	r3, r4, #1
10009694:	2b06      	cmp	r3, #6
10009696:	d82a      	bhi.n	100096ee <_scanf_float+0x2a6>
10009698:	2c02      	cmp	r4, #2
1000969a:	d919      	bls.n	100096d0 <_scanf_float+0x288>
1000969c:	9405      	str	r4, [sp, #20]
1000969e:	9703      	str	r7, [sp, #12]
100096a0:	9b05      	ldr	r3, [sp, #20]
100096a2:	3b01      	subs	r3, #1
100096a4:	b2db      	uxtb	r3, r3
100096a6:	9305      	str	r3, [sp, #20]
100096a8:	2b02      	cmp	r3, #2
100096aa:	d00d      	beq.n	100096c8 <_scanf_float+0x280>
100096ac:	9b03      	ldr	r3, [sp, #12]
100096ae:	9802      	ldr	r0, [sp, #8]
100096b0:	3b01      	subs	r3, #1
100096b2:	9303      	str	r3, [sp, #12]
100096b4:	7819      	ldrb	r1, [r3, #0]
100096b6:	23be      	movs	r3, #190	; 0xbe
100096b8:	005b      	lsls	r3, r3, #1
100096ba:	58f3      	ldr	r3, [r6, r3]
100096bc:	1c2a      	adds	r2, r5, #0
100096be:	4798      	blx	r3
100096c0:	6933      	ldr	r3, [r6, #16]
100096c2:	3b01      	subs	r3, #1
100096c4:	6133      	str	r3, [r6, #16]
100096c6:	e7eb      	b.n	100096a0 <_scanf_float+0x258>
100096c8:	3c03      	subs	r4, #3
100096ca:	b2e4      	uxtb	r4, r4
100096cc:	1b3f      	subs	r7, r7, r4
100096ce:	e00e      	b.n	100096ee <_scanf_float+0x2a6>
100096d0:	9b04      	ldr	r3, [sp, #16]
100096d2:	429f      	cmp	r7, r3
100096d4:	d9db      	bls.n	1000968e <_scanf_float+0x246>
100096d6:	23be      	movs	r3, #190	; 0xbe
100096d8:	3f01      	subs	r7, #1
100096da:	005b      	lsls	r3, r3, #1
100096dc:	58f3      	ldr	r3, [r6, r3]
100096de:	7839      	ldrb	r1, [r7, #0]
100096e0:	9802      	ldr	r0, [sp, #8]
100096e2:	1c2a      	adds	r2, r5, #0
100096e4:	4798      	blx	r3
100096e6:	6933      	ldr	r3, [r6, #16]
100096e8:	3b01      	subs	r3, #1
100096ea:	6133      	str	r3, [r6, #16]
100096ec:	e7f0      	b.n	100096d0 <_scanf_float+0x288>
100096ee:	6833      	ldr	r3, [r6, #0]
100096f0:	05da      	lsls	r2, r3, #23
100096f2:	d52b      	bpl.n	1000974c <_scanf_float+0x304>
100096f4:	055b      	lsls	r3, r3, #21
100096f6:	d50e      	bpl.n	10009716 <_scanf_float+0x2ce>
100096f8:	9b04      	ldr	r3, [sp, #16]
100096fa:	429f      	cmp	r7, r3
100096fc:	d9c7      	bls.n	1000968e <_scanf_float+0x246>
100096fe:	23be      	movs	r3, #190	; 0xbe
10009700:	3f01      	subs	r7, #1
10009702:	005b      	lsls	r3, r3, #1
10009704:	58f3      	ldr	r3, [r6, r3]
10009706:	7839      	ldrb	r1, [r7, #0]
10009708:	9802      	ldr	r0, [sp, #8]
1000970a:	1c2a      	adds	r2, r5, #0
1000970c:	4798      	blx	r3
1000970e:	6933      	ldr	r3, [r6, #16]
10009710:	3b01      	subs	r3, #1
10009712:	6133      	str	r3, [r6, #16]
10009714:	e7f0      	b.n	100096f8 <_scanf_float+0x2b0>
10009716:	6933      	ldr	r3, [r6, #16]
10009718:	1e7c      	subs	r4, r7, #1
1000971a:	7821      	ldrb	r1, [r4, #0]
1000971c:	3b01      	subs	r3, #1
1000971e:	6133      	str	r3, [r6, #16]
10009720:	2965      	cmp	r1, #101	; 0x65
10009722:	d00c      	beq.n	1000973e <_scanf_float+0x2f6>
10009724:	2945      	cmp	r1, #69	; 0x45
10009726:	d00a      	beq.n	1000973e <_scanf_float+0x2f6>
10009728:	23be      	movs	r3, #190	; 0xbe
1000972a:	005b      	lsls	r3, r3, #1
1000972c:	58f3      	ldr	r3, [r6, r3]
1000972e:	9802      	ldr	r0, [sp, #8]
10009730:	1c2a      	adds	r2, r5, #0
10009732:	4798      	blx	r3
10009734:	6933      	ldr	r3, [r6, #16]
10009736:	1ebc      	subs	r4, r7, #2
10009738:	3b01      	subs	r3, #1
1000973a:	7821      	ldrb	r1, [r4, #0]
1000973c:	6133      	str	r3, [r6, #16]
1000973e:	23be      	movs	r3, #190	; 0xbe
10009740:	005b      	lsls	r3, r3, #1
10009742:	58f3      	ldr	r3, [r6, r3]
10009744:	9802      	ldr	r0, [sp, #8]
10009746:	1c2a      	adds	r2, r5, #0
10009748:	4798      	blx	r3
1000974a:	1c27      	adds	r7, r4, #0
1000974c:	2410      	movs	r4, #16
1000974e:	6833      	ldr	r3, [r6, #0]
10009750:	401c      	ands	r4, r3
10009752:	d155      	bne.n	10009800 <_scanf_float+0x3b8>
10009754:	23c0      	movs	r3, #192	; 0xc0
10009756:	703c      	strb	r4, [r7, #0]
10009758:	6832      	ldr	r2, [r6, #0]
1000975a:	00db      	lsls	r3, r3, #3
1000975c:	4013      	ands	r3, r2
1000975e:	2280      	movs	r2, #128	; 0x80
10009760:	00d2      	lsls	r2, r2, #3
10009762:	4293      	cmp	r3, r2
10009764:	d106      	bne.n	10009774 <_scanf_float+0x32c>
10009766:	9a07      	ldr	r2, [sp, #28]
10009768:	9b00      	ldr	r3, [sp, #0]
1000976a:	1a9b      	subs	r3, r3, r2
1000976c:	425a      	negs	r2, r3
1000976e:	2b00      	cmp	r3, #0
10009770:	d10d      	bne.n	1000978e <_scanf_float+0x346>
10009772:	e018      	b.n	100097a6 <_scanf_float+0x35e>
10009774:	9b08      	ldr	r3, [sp, #32]
10009776:	2b00      	cmp	r3, #0
10009778:	d015      	beq.n	100097a6 <_scanf_float+0x35e>
1000977a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000977c:	1c22      	adds	r2, r4, #0
1000977e:	1c59      	adds	r1, r3, #1
10009780:	9802      	ldr	r0, [sp, #8]
10009782:	230a      	movs	r3, #10
10009784:	f000 fee4 	bl	1000a550 <_strtol_r>
10009788:	9b08      	ldr	r3, [sp, #32]
1000978a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000978c:	1ac2      	subs	r2, r0, r3
1000978e:	1c33      	adds	r3, r6, #0
10009790:	3370      	adds	r3, #112	; 0x70
10009792:	33ff      	adds	r3, #255	; 0xff
10009794:	429f      	cmp	r7, r3
10009796:	d302      	bcc.n	1000979e <_scanf_float+0x356>
10009798:	1c37      	adds	r7, r6, #0
1000979a:	376f      	adds	r7, #111	; 0x6f
1000979c:	37ff      	adds	r7, #255	; 0xff
1000979e:	1c38      	adds	r0, r7, #0
100097a0:	491d      	ldr	r1, [pc, #116]	; (10009818 <_scanf_float+0x3d0>)
100097a2:	f000 f867 	bl	10009874 <siprintf>
100097a6:	2200      	movs	r2, #0
100097a8:	9802      	ldr	r0, [sp, #8]
100097aa:	9904      	ldr	r1, [sp, #16]
100097ac:	f000 f8b6 	bl	1000991c <_strtod_r>
100097b0:	9b06      	ldr	r3, [sp, #24]
100097b2:	6832      	ldr	r2, [r6, #0]
100097b4:	9000      	str	r0, [sp, #0]
100097b6:	9101      	str	r1, [sp, #4]
100097b8:	681b      	ldr	r3, [r3, #0]
100097ba:	0791      	lsls	r1, r2, #30
100097bc:	d401      	bmi.n	100097c2 <_scanf_float+0x37a>
100097be:	0752      	lsls	r2, r2, #29
100097c0:	d508      	bpl.n	100097d4 <_scanf_float+0x38c>
100097c2:	9906      	ldr	r1, [sp, #24]
100097c4:	1d1a      	adds	r2, r3, #4
100097c6:	600a      	str	r2, [r1, #0]
100097c8:	681b      	ldr	r3, [r3, #0]
100097ca:	9900      	ldr	r1, [sp, #0]
100097cc:	9a01      	ldr	r2, [sp, #4]
100097ce:	6019      	str	r1, [r3, #0]
100097d0:	605a      	str	r2, [r3, #4]
100097d2:	e011      	b.n	100097f8 <_scanf_float+0x3b0>
100097d4:	9906      	ldr	r1, [sp, #24]
100097d6:	1d1a      	adds	r2, r3, #4
100097d8:	600a      	str	r2, [r1, #0]
100097da:	9800      	ldr	r0, [sp, #0]
100097dc:	9901      	ldr	r1, [sp, #4]
100097de:	681d      	ldr	r5, [r3, #0]
100097e0:	f000 f81c 	bl	1000981c <__fpclassifyd>
100097e4:	2800      	cmp	r0, #0
100097e6:	d102      	bne.n	100097ee <_scanf_float+0x3a6>
100097e8:	f000 f840 	bl	1000986c <nanf>
100097ec:	e003      	b.n	100097f6 <_scanf_float+0x3ae>
100097ee:	9800      	ldr	r0, [sp, #0]
100097f0:	9901      	ldr	r1, [sp, #4]
100097f2:	f7ff f8f3 	bl	100089dc <__aeabi_d2f>
100097f6:	6028      	str	r0, [r5, #0]
100097f8:	68f3      	ldr	r3, [r6, #12]
100097fa:	3301      	adds	r3, #1
100097fc:	60f3      	str	r3, [r6, #12]
100097fe:	e000      	b.n	10009802 <_scanf_float+0x3ba>
10009800:	2400      	movs	r4, #0
10009802:	1c20      	adds	r0, r4, #0
10009804:	b00b      	add	sp, #44	; 0x2c
10009806:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009808:	fffffe7f 	.word	0xfffffe7f
1000980c:	fffff87f 	.word	0xfffff87f
10009810:	fffffd7f 	.word	0xfffffd7f
10009814:	fffffeff 	.word	0xfffffeff
10009818:	1000cf26 	.word	0x1000cf26

1000981c <__fpclassifyd>:
1000981c:	b530      	push	{r4, r5, lr}
1000981e:	1c0c      	adds	r4, r1, #0
10009820:	2302      	movs	r3, #2
10009822:	4304      	orrs	r4, r0
10009824:	d017      	beq.n	10009856 <__fpclassifyd+0x3a>
10009826:	2480      	movs	r4, #128	; 0x80
10009828:	0624      	lsls	r4, r4, #24
1000982a:	42a1      	cmp	r1, r4
1000982c:	d101      	bne.n	10009832 <__fpclassifyd+0x16>
1000982e:	2800      	cmp	r0, #0
10009830:	d011      	beq.n	10009856 <__fpclassifyd+0x3a>
10009832:	4b0a      	ldr	r3, [pc, #40]	; (1000985c <__fpclassifyd+0x40>)
10009834:	0049      	lsls	r1, r1, #1
10009836:	0849      	lsrs	r1, r1, #1
10009838:	4a09      	ldr	r2, [pc, #36]	; (10009860 <__fpclassifyd+0x44>)
1000983a:	18cc      	adds	r4, r1, r3
1000983c:	2304      	movs	r3, #4
1000983e:	4294      	cmp	r4, r2
10009840:	d909      	bls.n	10009856 <__fpclassifyd+0x3a>
10009842:	4a08      	ldr	r2, [pc, #32]	; (10009864 <__fpclassifyd+0x48>)
10009844:	3b01      	subs	r3, #1
10009846:	4291      	cmp	r1, r2
10009848:	d905      	bls.n	10009856 <__fpclassifyd+0x3a>
1000984a:	4a07      	ldr	r2, [pc, #28]	; (10009868 <__fpclassifyd+0x4c>)
1000984c:	2300      	movs	r3, #0
1000984e:	4291      	cmp	r1, r2
10009850:	d101      	bne.n	10009856 <__fpclassifyd+0x3a>
10009852:	4243      	negs	r3, r0
10009854:	4143      	adcs	r3, r0
10009856:	1c18      	adds	r0, r3, #0
10009858:	bd30      	pop	{r4, r5, pc}
1000985a:	46c0      	nop			; (mov r8, r8)
1000985c:	fff00000 	.word	0xfff00000
10009860:	7fdfffff 	.word	0x7fdfffff
10009864:	000fffff 	.word	0x000fffff
10009868:	7ff00000 	.word	0x7ff00000

1000986c <nanf>:
1000986c:	4800      	ldr	r0, [pc, #0]	; (10009870 <nanf+0x4>)
1000986e:	4770      	bx	lr
10009870:	7fc00000 	.word	0x7fc00000

10009874 <siprintf>:
10009874:	b40e      	push	{r1, r2, r3}
10009876:	b510      	push	{r4, lr}
10009878:	b09d      	sub	sp, #116	; 0x74
1000987a:	a902      	add	r1, sp, #8
1000987c:	9002      	str	r0, [sp, #8]
1000987e:	6108      	str	r0, [r1, #16]
10009880:	480b      	ldr	r0, [pc, #44]	; (100098b0 <siprintf+0x3c>)
10009882:	2482      	movs	r4, #130	; 0x82
10009884:	6088      	str	r0, [r1, #8]
10009886:	6148      	str	r0, [r1, #20]
10009888:	2001      	movs	r0, #1
1000988a:	4240      	negs	r0, r0
1000988c:	ab1f      	add	r3, sp, #124	; 0x7c
1000988e:	81c8      	strh	r0, [r1, #14]
10009890:	4808      	ldr	r0, [pc, #32]	; (100098b4 <siprintf+0x40>)
10009892:	cb04      	ldmia	r3!, {r2}
10009894:	00a4      	lsls	r4, r4, #2
10009896:	6800      	ldr	r0, [r0, #0]
10009898:	9301      	str	r3, [sp, #4]
1000989a:	818c      	strh	r4, [r1, #12]
1000989c:	f002 fdb0 	bl	1000c400 <_svfiprintf_r>
100098a0:	2300      	movs	r3, #0
100098a2:	9a02      	ldr	r2, [sp, #8]
100098a4:	7013      	strb	r3, [r2, #0]
100098a6:	b01d      	add	sp, #116	; 0x74
100098a8:	bc10      	pop	{r4}
100098aa:	bc08      	pop	{r3}
100098ac:	b003      	add	sp, #12
100098ae:	4718      	bx	r3
100098b0:	7fffffff 	.word	0x7fffffff
100098b4:	20000710 	.word	0x20000710

100098b8 <strlen>:
100098b8:	2300      	movs	r3, #0
100098ba:	5cc2      	ldrb	r2, [r0, r3]
100098bc:	3301      	adds	r3, #1
100098be:	2a00      	cmp	r2, #0
100098c0:	d1fb      	bne.n	100098ba <strlen+0x2>
100098c2:	1e58      	subs	r0, r3, #1
100098c4:	4770      	bx	lr

100098c6 <match>:
100098c6:	b530      	push	{r4, r5, lr}
100098c8:	6803      	ldr	r3, [r0, #0]
100098ca:	780c      	ldrb	r4, [r1, #0]
100098cc:	3301      	adds	r3, #1
100098ce:	2c00      	cmp	r4, #0
100098d0:	d00a      	beq.n	100098e8 <match+0x22>
100098d2:	781a      	ldrb	r2, [r3, #0]
100098d4:	1c15      	adds	r5, r2, #0
100098d6:	3d41      	subs	r5, #65	; 0x41
100098d8:	2d19      	cmp	r5, #25
100098da:	d800      	bhi.n	100098de <match+0x18>
100098dc:	3220      	adds	r2, #32
100098de:	3101      	adds	r1, #1
100098e0:	42a2      	cmp	r2, r4
100098e2:	d0f2      	beq.n	100098ca <match+0x4>
100098e4:	2000      	movs	r0, #0
100098e6:	e001      	b.n	100098ec <match+0x26>
100098e8:	6003      	str	r3, [r0, #0]
100098ea:	2001      	movs	r0, #1
100098ec:	bd30      	pop	{r4, r5, pc}
	...

100098f0 <sulp>:
100098f0:	b570      	push	{r4, r5, r6, lr}
100098f2:	1c16      	adds	r6, r2, #0
100098f4:	1c0d      	adds	r5, r1, #0
100098f6:	f002 fb4b 	bl	1000bf90 <__ulp>
100098fa:	2e00      	cmp	r6, #0
100098fc:	d00b      	beq.n	10009916 <sulp+0x26>
100098fe:	226b      	movs	r2, #107	; 0x6b
10009900:	006b      	lsls	r3, r5, #1
10009902:	0d5b      	lsrs	r3, r3, #21
10009904:	1ad3      	subs	r3, r2, r3
10009906:	2b00      	cmp	r3, #0
10009908:	dd05      	ble.n	10009916 <sulp+0x26>
1000990a:	4d03      	ldr	r5, [pc, #12]	; (10009918 <sulp+0x28>)
1000990c:	051c      	lsls	r4, r3, #20
1000990e:	2200      	movs	r2, #0
10009910:	1963      	adds	r3, r4, r5
10009912:	f7fe f98d 	bl	10007c30 <__aeabi_dmul>
10009916:	bd70      	pop	{r4, r5, r6, pc}
10009918:	3ff00000 	.word	0x3ff00000

1000991c <_strtod_r>:
1000991c:	2300      	movs	r3, #0
1000991e:	b5f0      	push	{r4, r5, r6, r7, lr}
10009920:	b0a3      	sub	sp, #140	; 0x8c
10009922:	931e      	str	r3, [sp, #120]	; 0x78
10009924:	2600      	movs	r6, #0
10009926:	2700      	movs	r7, #0
10009928:	1c0b      	adds	r3, r1, #0
1000992a:	9003      	str	r0, [sp, #12]
1000992c:	9106      	str	r1, [sp, #24]
1000992e:	9219      	str	r2, [sp, #100]	; 0x64
10009930:	931d      	str	r3, [sp, #116]	; 0x74
10009932:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009934:	781a      	ldrb	r2, [r3, #0]
10009936:	2a0d      	cmp	r2, #13
10009938:	d805      	bhi.n	10009946 <_strtod_r+0x2a>
1000993a:	2a09      	cmp	r2, #9
1000993c:	d214      	bcs.n	10009968 <_strtod_r+0x4c>
1000993e:	2a00      	cmp	r2, #0
10009940:	d100      	bne.n	10009944 <_strtod_r+0x28>
10009942:	e1c3      	b.n	10009ccc <_strtod_r+0x3b0>
10009944:	e012      	b.n	1000996c <_strtod_r+0x50>
10009946:	2a2b      	cmp	r2, #43	; 0x2b
10009948:	d006      	beq.n	10009958 <_strtod_r+0x3c>
1000994a:	2a2d      	cmp	r2, #45	; 0x2d
1000994c:	d002      	beq.n	10009954 <_strtod_r+0x38>
1000994e:	2a20      	cmp	r2, #32
10009950:	d10c      	bne.n	1000996c <_strtod_r+0x50>
10009952:	e009      	b.n	10009968 <_strtod_r+0x4c>
10009954:	2201      	movs	r2, #1
10009956:	e000      	b.n	1000995a <_strtod_r+0x3e>
10009958:	2200      	movs	r2, #0
1000995a:	920d      	str	r2, [sp, #52]	; 0x34
1000995c:	1c5a      	adds	r2, r3, #1
1000995e:	921d      	str	r2, [sp, #116]	; 0x74
10009960:	785b      	ldrb	r3, [r3, #1]
10009962:	2b00      	cmp	r3, #0
10009964:	d104      	bne.n	10009970 <_strtod_r+0x54>
10009966:	e1b1      	b.n	10009ccc <_strtod_r+0x3b0>
10009968:	3301      	adds	r3, #1
1000996a:	e7e1      	b.n	10009930 <_strtod_r+0x14>
1000996c:	2300      	movs	r3, #0
1000996e:	930d      	str	r3, [sp, #52]	; 0x34
10009970:	2200      	movs	r2, #0
10009972:	9d1d      	ldr	r5, [sp, #116]	; 0x74
10009974:	920a      	str	r2, [sp, #40]	; 0x28
10009976:	782b      	ldrb	r3, [r5, #0]
10009978:	2b30      	cmp	r3, #48	; 0x30
1000997a:	d15d      	bne.n	10009a38 <_strtod_r+0x11c>
1000997c:	786b      	ldrb	r3, [r5, #1]
1000997e:	2b58      	cmp	r3, #88	; 0x58
10009980:	d001      	beq.n	10009986 <_strtod_r+0x6a>
10009982:	2b78      	cmp	r3, #120	; 0x78
10009984:	d14c      	bne.n	10009a20 <_strtod_r+0x104>
10009986:	ab1e      	add	r3, sp, #120	; 0x78
10009988:	9300      	str	r3, [sp, #0]
1000998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000998c:	9803      	ldr	r0, [sp, #12]
1000998e:	9301      	str	r3, [sp, #4]
10009990:	a91d      	add	r1, sp, #116	; 0x74
10009992:	4ac2      	ldr	r2, [pc, #776]	; (10009c9c <_strtod_r+0x380>)
10009994:	ab1f      	add	r3, sp, #124	; 0x7c
10009996:	f001 fd3c 	bl	1000b412 <__gethex>
1000999a:	2407      	movs	r4, #7
1000999c:	9004      	str	r0, [sp, #16]
1000999e:	4004      	ands	r4, r0
100099a0:	d101      	bne.n	100099a6 <_strtod_r+0x8a>
100099a2:	f000 fda7 	bl	1000a4f4 <_strtod_r+0xbd8>
100099a6:	2c06      	cmp	r4, #6
100099a8:	d105      	bne.n	100099b6 <_strtod_r+0x9a>
100099aa:	2300      	movs	r3, #0
100099ac:	3501      	adds	r5, #1
100099ae:	951d      	str	r5, [sp, #116]	; 0x74
100099b0:	930d      	str	r3, [sp, #52]	; 0x34
100099b2:	f000 fd9f 	bl	1000a4f4 <_strtod_r+0xbd8>
100099b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
100099b8:	2a00      	cmp	r2, #0
100099ba:	d007      	beq.n	100099cc <_strtod_r+0xb0>
100099bc:	a820      	add	r0, sp, #128	; 0x80
100099be:	2135      	movs	r1, #53	; 0x35
100099c0:	f002 fbda 	bl	1000c178 <__copybits>
100099c4:	9803      	ldr	r0, [sp, #12]
100099c6:	991e      	ldr	r1, [sp, #120]	; 0x78
100099c8:	f002 f843 	bl	1000ba52 <_Bfree>
100099cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
100099ce:	2c06      	cmp	r4, #6
100099d0:	d81c      	bhi.n	10009a0c <_strtod_r+0xf0>
100099d2:	1c20      	adds	r0, r4, #0
100099d4:	f002 fe7e 	bl	1000c6d4 <__gnu_thumb1_case_uqi>
100099d8:	14070a04 	.word	0x14070a04
100099dc:	0a17      	.short	0x0a17
100099de:	04          	.byte	0x04
100099df:	00          	.byte	0x00
100099e0:	2700      	movs	r7, #0
100099e2:	1c3e      	adds	r6, r7, #0
100099e4:	e012      	b.n	10009a0c <_strtod_r+0xf0>
100099e6:	9e20      	ldr	r6, [sp, #128]	; 0x80
100099e8:	9f21      	ldr	r7, [sp, #132]	; 0x84
100099ea:	e00f      	b.n	10009a0c <_strtod_r+0xf0>
100099ec:	4aac      	ldr	r2, [pc, #688]	; (10009ca0 <_strtod_r+0x384>)
100099ee:	9921      	ldr	r1, [sp, #132]	; 0x84
100099f0:	189b      	adds	r3, r3, r2
100099f2:	4aac      	ldr	r2, [pc, #688]	; (10009ca4 <_strtod_r+0x388>)
100099f4:	051b      	lsls	r3, r3, #20
100099f6:	400a      	ands	r2, r1
100099f8:	4313      	orrs	r3, r2
100099fa:	9e20      	ldr	r6, [sp, #128]	; 0x80
100099fc:	1c1f      	adds	r7, r3, #0
100099fe:	e005      	b.n	10009a0c <_strtod_r+0xf0>
10009a00:	4fa9      	ldr	r7, [pc, #676]	; (10009ca8 <_strtod_r+0x38c>)
10009a02:	2600      	movs	r6, #0
10009a04:	e002      	b.n	10009a0c <_strtod_r+0xf0>
10009a06:	2601      	movs	r6, #1
10009a08:	4fa8      	ldr	r7, [pc, #672]	; (10009cac <_strtod_r+0x390>)
10009a0a:	4276      	negs	r6, r6
10009a0c:	9b04      	ldr	r3, [sp, #16]
10009a0e:	071b      	lsls	r3, r3, #28
10009a10:	d401      	bmi.n	10009a16 <_strtod_r+0xfa>
10009a12:	f000 fd6f 	bl	1000a4f4 <_strtod_r+0xbd8>
10009a16:	2380      	movs	r3, #128	; 0x80
10009a18:	061b      	lsls	r3, r3, #24
10009a1a:	431f      	orrs	r7, r3
10009a1c:	f000 fd6a 	bl	1000a4f4 <_strtod_r+0xbd8>
10009a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009a22:	1c5a      	adds	r2, r3, #1
10009a24:	921d      	str	r2, [sp, #116]	; 0x74
10009a26:	785b      	ldrb	r3, [r3, #1]
10009a28:	2b30      	cmp	r3, #48	; 0x30
10009a2a:	d0f9      	beq.n	10009a20 <_strtod_r+0x104>
10009a2c:	2b00      	cmp	r3, #0
10009a2e:	d101      	bne.n	10009a34 <_strtod_r+0x118>
10009a30:	f000 fd60 	bl	1000a4f4 <_strtod_r+0xbd8>
10009a34:	2301      	movs	r3, #1
10009a36:	930a      	str	r3, [sp, #40]	; 0x28
10009a38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009a3a:	930c      	str	r3, [sp, #48]	; 0x30
10009a3c:	2300      	movs	r3, #0
10009a3e:	9305      	str	r3, [sp, #20]
10009a40:	9307      	str	r3, [sp, #28]
10009a42:	9304      	str	r3, [sp, #16]
10009a44:	9c1d      	ldr	r4, [sp, #116]	; 0x74
10009a46:	7823      	ldrb	r3, [r4, #0]
10009a48:	1c1a      	adds	r2, r3, #0
10009a4a:	3a30      	subs	r2, #48	; 0x30
10009a4c:	9308      	str	r3, [sp, #32]
10009a4e:	b2d3      	uxtb	r3, r2
10009a50:	2b09      	cmp	r3, #9
10009a52:	d812      	bhi.n	10009a7a <_strtod_r+0x15e>
10009a54:	9904      	ldr	r1, [sp, #16]
10009a56:	230a      	movs	r3, #10
10009a58:	2908      	cmp	r1, #8
10009a5a:	dc04      	bgt.n	10009a66 <_strtod_r+0x14a>
10009a5c:	9907      	ldr	r1, [sp, #28]
10009a5e:	434b      	muls	r3, r1
10009a60:	18d3      	adds	r3, r2, r3
10009a62:	9307      	str	r3, [sp, #28]
10009a64:	e003      	b.n	10009a6e <_strtod_r+0x152>
10009a66:	9905      	ldr	r1, [sp, #20]
10009a68:	434b      	muls	r3, r1
10009a6a:	18d3      	adds	r3, r2, r3
10009a6c:	9305      	str	r3, [sp, #20]
10009a6e:	9b04      	ldr	r3, [sp, #16]
10009a70:	3401      	adds	r4, #1
10009a72:	3301      	adds	r3, #1
10009a74:	9304      	str	r3, [sp, #16]
10009a76:	941d      	str	r4, [sp, #116]	; 0x74
10009a78:	e7e4      	b.n	10009a44 <_strtod_r+0x128>
10009a7a:	9803      	ldr	r0, [sp, #12]
10009a7c:	f001 ff98 	bl	1000b9b0 <_localeconv_r>
10009a80:	6805      	ldr	r5, [r0, #0]
10009a82:	9803      	ldr	r0, [sp, #12]
10009a84:	f001 ff94 	bl	1000b9b0 <_localeconv_r>
10009a88:	6800      	ldr	r0, [r0, #0]
10009a8a:	f7ff ff15 	bl	100098b8 <strlen>
10009a8e:	1c29      	adds	r1, r5, #0
10009a90:	1c02      	adds	r2, r0, #0
10009a92:	1c20      	adds	r0, r4, #0
10009a94:	f002 fdbc 	bl	1000c610 <strncmp>
10009a98:	1e05      	subs	r5, r0, #0
10009a9a:	d005      	beq.n	10009aa8 <_strtod_r+0x18c>
10009a9c:	2000      	movs	r0, #0
10009a9e:	9b08      	ldr	r3, [sp, #32]
10009aa0:	9c04      	ldr	r4, [sp, #16]
10009aa2:	1c01      	adds	r1, r0, #0
10009aa4:	9008      	str	r0, [sp, #32]
10009aa6:	e05a      	b.n	10009b5e <_strtod_r+0x242>
10009aa8:	9803      	ldr	r0, [sp, #12]
10009aaa:	f001 ff81 	bl	1000b9b0 <_localeconv_r>
10009aae:	6800      	ldr	r0, [r0, #0]
10009ab0:	f7ff ff02 	bl	100098b8 <strlen>
10009ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009ab6:	9a04      	ldr	r2, [sp, #16]
10009ab8:	1818      	adds	r0, r3, r0
10009aba:	901d      	str	r0, [sp, #116]	; 0x74
10009abc:	7803      	ldrb	r3, [r0, #0]
10009abe:	1e10      	subs	r0, r2, #0
10009ac0:	d141      	bne.n	10009b46 <_strtod_r+0x22a>
10009ac2:	2b30      	cmp	r3, #48	; 0x30
10009ac4:	d105      	bne.n	10009ad2 <_strtod_r+0x1b6>
10009ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009ac8:	3001      	adds	r0, #1
10009aca:	1c5a      	adds	r2, r3, #1
10009acc:	921d      	str	r2, [sp, #116]	; 0x74
10009ace:	785b      	ldrb	r3, [r3, #1]
10009ad0:	e7f7      	b.n	10009ac2 <_strtod_r+0x1a6>
10009ad2:	1c1a      	adds	r2, r3, #0
10009ad4:	3a31      	subs	r2, #49	; 0x31
10009ad6:	2a08      	cmp	r2, #8
10009ad8:	d83d      	bhi.n	10009b56 <_strtod_r+0x23a>
10009ada:	1c01      	adds	r1, r0, #0
10009adc:	2000      	movs	r0, #0
10009ade:	1c04      	adds	r4, r0, #0
10009ae0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
10009ae2:	920c      	str	r2, [sp, #48]	; 0x30
10009ae4:	3b30      	subs	r3, #48	; 0x30
10009ae6:	1c42      	adds	r2, r0, #1
10009ae8:	2b00      	cmp	r3, #0
10009aea:	d026      	beq.n	10009b3a <_strtod_r+0x21e>
10009aec:	1889      	adds	r1, r1, r2
10009aee:	1c22      	adds	r2, r4, #0
10009af0:	1900      	adds	r0, r0, r4
10009af2:	4282      	cmp	r2, r0
10009af4:	d00f      	beq.n	10009b16 <_strtod_r+0x1fa>
10009af6:	3201      	adds	r2, #1
10009af8:	1e54      	subs	r4, r2, #1
10009afa:	2c08      	cmp	r4, #8
10009afc:	dc04      	bgt.n	10009b08 <_strtod_r+0x1ec>
10009afe:	240a      	movs	r4, #10
10009b00:	9d07      	ldr	r5, [sp, #28]
10009b02:	4365      	muls	r5, r4
10009b04:	9507      	str	r5, [sp, #28]
10009b06:	e7f4      	b.n	10009af2 <_strtod_r+0x1d6>
10009b08:	2a10      	cmp	r2, #16
10009b0a:	dcf2      	bgt.n	10009af2 <_strtod_r+0x1d6>
10009b0c:	240a      	movs	r4, #10
10009b0e:	9d05      	ldr	r5, [sp, #20]
10009b10:	4365      	muls	r5, r4
10009b12:	9505      	str	r5, [sp, #20]
10009b14:	e7ed      	b.n	10009af2 <_strtod_r+0x1d6>
10009b16:	1c54      	adds	r4, r2, #1
10009b18:	2a08      	cmp	r2, #8
10009b1a:	dc06      	bgt.n	10009b2a <_strtod_r+0x20e>
10009b1c:	220a      	movs	r2, #10
10009b1e:	9807      	ldr	r0, [sp, #28]
10009b20:	4342      	muls	r2, r0
10009b22:	18d3      	adds	r3, r2, r3
10009b24:	9307      	str	r3, [sp, #28]
10009b26:	2200      	movs	r2, #0
10009b28:	e007      	b.n	10009b3a <_strtod_r+0x21e>
10009b2a:	2200      	movs	r2, #0
10009b2c:	2c10      	cmp	r4, #16
10009b2e:	dc04      	bgt.n	10009b3a <_strtod_r+0x21e>
10009b30:	200a      	movs	r0, #10
10009b32:	9d05      	ldr	r5, [sp, #20]
10009b34:	4368      	muls	r0, r5
10009b36:	18c3      	adds	r3, r0, r3
10009b38:	9305      	str	r3, [sp, #20]
10009b3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b3c:	1c58      	adds	r0, r3, #1
10009b3e:	901d      	str	r0, [sp, #116]	; 0x74
10009b40:	785b      	ldrb	r3, [r3, #1]
10009b42:	1c10      	adds	r0, r2, #0
10009b44:	e002      	b.n	10009b4c <_strtod_r+0x230>
10009b46:	1c28      	adds	r0, r5, #0
10009b48:	1c29      	adds	r1, r5, #0
10009b4a:	9c04      	ldr	r4, [sp, #16]
10009b4c:	1c1a      	adds	r2, r3, #0
10009b4e:	3a30      	subs	r2, #48	; 0x30
10009b50:	2a09      	cmp	r2, #9
10009b52:	d9c7      	bls.n	10009ae4 <_strtod_r+0x1c8>
10009b54:	e001      	b.n	10009b5a <_strtod_r+0x23e>
10009b56:	2400      	movs	r4, #0
10009b58:	1c21      	adds	r1, r4, #0
10009b5a:	2201      	movs	r2, #1
10009b5c:	9208      	str	r2, [sp, #32]
10009b5e:	2220      	movs	r2, #32
10009b60:	1c1d      	adds	r5, r3, #0
10009b62:	4395      	bics	r5, r2
10009b64:	2200      	movs	r2, #0
10009b66:	2d45      	cmp	r5, #69	; 0x45
10009b68:	d157      	bne.n	10009c1a <_strtod_r+0x2fe>
10009b6a:	1c23      	adds	r3, r4, #0
10009b6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10009b6e:	4303      	orrs	r3, r0
10009b70:	432b      	orrs	r3, r5
10009b72:	4293      	cmp	r3, r2
10009b74:	d100      	bne.n	10009b78 <_strtod_r+0x25c>
10009b76:	e0a9      	b.n	10009ccc <_strtod_r+0x3b0>
10009b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b7a:	9306      	str	r3, [sp, #24]
10009b7c:	3301      	adds	r3, #1
10009b7e:	931d      	str	r3, [sp, #116]	; 0x74
10009b80:	9b06      	ldr	r3, [sp, #24]
10009b82:	785b      	ldrb	r3, [r3, #1]
10009b84:	2b2b      	cmp	r3, #43	; 0x2b
10009b86:	d006      	beq.n	10009b96 <_strtod_r+0x27a>
10009b88:	2b2d      	cmp	r3, #45	; 0x2d
10009b8a:	d001      	beq.n	10009b90 <_strtod_r+0x274>
10009b8c:	9209      	str	r2, [sp, #36]	; 0x24
10009b8e:	e008      	b.n	10009ba2 <_strtod_r+0x286>
10009b90:	2301      	movs	r3, #1
10009b92:	9309      	str	r3, [sp, #36]	; 0x24
10009b94:	e000      	b.n	10009b98 <_strtod_r+0x27c>
10009b96:	9209      	str	r2, [sp, #36]	; 0x24
10009b98:	9b06      	ldr	r3, [sp, #24]
10009b9a:	3302      	adds	r3, #2
10009b9c:	931d      	str	r3, [sp, #116]	; 0x74
10009b9e:	9b06      	ldr	r3, [sp, #24]
10009ba0:	789b      	ldrb	r3, [r3, #2]
10009ba2:	1c1a      	adds	r2, r3, #0
10009ba4:	3a30      	subs	r2, #48	; 0x30
10009ba6:	2a09      	cmp	r2, #9
10009ba8:	d834      	bhi.n	10009c14 <_strtod_r+0x2f8>
10009baa:	2b30      	cmp	r3, #48	; 0x30
10009bac:	d104      	bne.n	10009bb8 <_strtod_r+0x29c>
10009bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009bb0:	1c5a      	adds	r2, r3, #1
10009bb2:	921d      	str	r2, [sp, #116]	; 0x74
10009bb4:	785b      	ldrb	r3, [r3, #1]
10009bb6:	e7f8      	b.n	10009baa <_strtod_r+0x28e>
10009bb8:	2531      	movs	r5, #49	; 0x31
10009bba:	426d      	negs	r5, r5
10009bbc:	46ac      	mov	ip, r5
10009bbe:	449c      	add	ip, r3
10009bc0:	4665      	mov	r5, ip
10009bc2:	2200      	movs	r2, #0
10009bc4:	2d08      	cmp	r5, #8
10009bc6:	d828      	bhi.n	10009c1a <_strtod_r+0x2fe>
10009bc8:	3b30      	subs	r3, #48	; 0x30
10009bca:	930b      	str	r3, [sp, #44]	; 0x2c
10009bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009bce:	930e      	str	r3, [sp, #56]	; 0x38
10009bd0:	2530      	movs	r5, #48	; 0x30
10009bd2:	426d      	negs	r5, r5
10009bd4:	46ac      	mov	ip, r5
10009bd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009bd8:	1c5a      	adds	r2, r3, #1
10009bda:	921d      	str	r2, [sp, #116]	; 0x74
10009bdc:	785b      	ldrb	r3, [r3, #1]
10009bde:	449c      	add	ip, r3
10009be0:	4665      	mov	r5, ip
10009be2:	2d09      	cmp	r5, #9
10009be4:	d806      	bhi.n	10009bf4 <_strtod_r+0x2d8>
10009be6:	220a      	movs	r2, #10
10009be8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10009bea:	436a      	muls	r2, r5
10009bec:	18d3      	adds	r3, r2, r3
10009bee:	3b30      	subs	r3, #48	; 0x30
10009bf0:	930b      	str	r3, [sp, #44]	; 0x2c
10009bf2:	e7ed      	b.n	10009bd0 <_strtod_r+0x2b4>
10009bf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10009bf6:	1b52      	subs	r2, r2, r5
10009bf8:	1e15      	subs	r5, r2, #0
10009bfa:	4a2d      	ldr	r2, [pc, #180]	; (10009cb0 <_strtod_r+0x394>)
10009bfc:	4694      	mov	ip, r2
10009bfe:	2d08      	cmp	r5, #8
10009c00:	dc03      	bgt.n	10009c0a <_strtod_r+0x2ee>
10009c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009c04:	4562      	cmp	r2, ip
10009c06:	dd00      	ble.n	10009c0a <_strtod_r+0x2ee>
10009c08:	4662      	mov	r2, ip
10009c0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
10009c0c:	2d00      	cmp	r5, #0
10009c0e:	d004      	beq.n	10009c1a <_strtod_r+0x2fe>
10009c10:	4252      	negs	r2, r2
10009c12:	e002      	b.n	10009c1a <_strtod_r+0x2fe>
10009c14:	9a06      	ldr	r2, [sp, #24]
10009c16:	921d      	str	r2, [sp, #116]	; 0x74
10009c18:	2200      	movs	r2, #0
10009c1a:	2c00      	cmp	r4, #0
10009c1c:	d161      	bne.n	10009ce2 <_strtod_r+0x3c6>
10009c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009c20:	4310      	orrs	r0, r2
10009c22:	d001      	beq.n	10009c28 <_strtod_r+0x30c>
10009c24:	f000 fc66 	bl	1000a4f4 <_strtod_r+0xbd8>
10009c28:	9a08      	ldr	r2, [sp, #32]
10009c2a:	2a00      	cmp	r2, #0
10009c2c:	d14e      	bne.n	10009ccc <_strtod_r+0x3b0>
10009c2e:	2b4e      	cmp	r3, #78	; 0x4e
10009c30:	d01c      	beq.n	10009c6c <_strtod_r+0x350>
10009c32:	dc02      	bgt.n	10009c3a <_strtod_r+0x31e>
10009c34:	2b49      	cmp	r3, #73	; 0x49
10009c36:	d005      	beq.n	10009c44 <_strtod_r+0x328>
10009c38:	e048      	b.n	10009ccc <_strtod_r+0x3b0>
10009c3a:	2b69      	cmp	r3, #105	; 0x69
10009c3c:	d002      	beq.n	10009c44 <_strtod_r+0x328>
10009c3e:	2b6e      	cmp	r3, #110	; 0x6e
10009c40:	d014      	beq.n	10009c6c <_strtod_r+0x350>
10009c42:	e043      	b.n	10009ccc <_strtod_r+0x3b0>
10009c44:	a81d      	add	r0, sp, #116	; 0x74
10009c46:	491b      	ldr	r1, [pc, #108]	; (10009cb4 <_strtod_r+0x398>)
10009c48:	f7ff fe3d 	bl	100098c6 <match>
10009c4c:	2800      	cmp	r0, #0
10009c4e:	d03d      	beq.n	10009ccc <_strtod_r+0x3b0>
10009c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009c52:	a81d      	add	r0, sp, #116	; 0x74
10009c54:	3b01      	subs	r3, #1
10009c56:	4918      	ldr	r1, [pc, #96]	; (10009cb8 <_strtod_r+0x39c>)
10009c58:	931d      	str	r3, [sp, #116]	; 0x74
10009c5a:	f7ff fe34 	bl	100098c6 <match>
10009c5e:	2800      	cmp	r0, #0
10009c60:	d102      	bne.n	10009c68 <_strtod_r+0x34c>
10009c62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009c64:	3301      	adds	r3, #1
10009c66:	931d      	str	r3, [sp, #116]	; 0x74
10009c68:	4f0f      	ldr	r7, [pc, #60]	; (10009ca8 <_strtod_r+0x38c>)
10009c6a:	e02c      	b.n	10009cc6 <_strtod_r+0x3aa>
10009c6c:	a81d      	add	r0, sp, #116	; 0x74
10009c6e:	4913      	ldr	r1, [pc, #76]	; (10009cbc <_strtod_r+0x3a0>)
10009c70:	f7ff fe29 	bl	100098c6 <match>
10009c74:	2800      	cmp	r0, #0
10009c76:	d029      	beq.n	10009ccc <_strtod_r+0x3b0>
10009c78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009c7a:	781b      	ldrb	r3, [r3, #0]
10009c7c:	2b28      	cmp	r3, #40	; 0x28
10009c7e:	d121      	bne.n	10009cc4 <_strtod_r+0x3a8>
10009c80:	a81d      	add	r0, sp, #116	; 0x74
10009c82:	490f      	ldr	r1, [pc, #60]	; (10009cc0 <_strtod_r+0x3a4>)
10009c84:	aa20      	add	r2, sp, #128	; 0x80
10009c86:	f001 fdfa 	bl	1000b87e <__hexnan>
10009c8a:	2805      	cmp	r0, #5
10009c8c:	d11a      	bne.n	10009cc4 <_strtod_r+0x3a8>
10009c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
10009c90:	4a05      	ldr	r2, [pc, #20]	; (10009ca8 <_strtod_r+0x38c>)
10009c92:	9e20      	ldr	r6, [sp, #128]	; 0x80
10009c94:	431a      	orrs	r2, r3
10009c96:	1c17      	adds	r7, r2, #0
10009c98:	f000 fc2c 	bl	1000a4f4 <_strtod_r+0xbd8>
10009c9c:	1000cf2c 	.word	0x1000cf2c
10009ca0:	00000433 	.word	0x00000433
10009ca4:	ffefffff 	.word	0xffefffff
10009ca8:	7ff00000 	.word	0x7ff00000
10009cac:	7fffffff 	.word	0x7fffffff
10009cb0:	00004e1f 	.word	0x00004e1f
10009cb4:	1000cef7 	.word	0x1000cef7
10009cb8:	1000d080 	.word	0x1000d080
10009cbc:	1000ceff 	.word	0x1000ceff
10009cc0:	1000cf68 	.word	0x1000cf68
10009cc4:	4f92      	ldr	r7, [pc, #584]	; (10009f10 <_strtod_r+0x5f4>)
10009cc6:	2600      	movs	r6, #0
10009cc8:	f000 fc14 	bl	1000a4f4 <_strtod_r+0xbd8>
10009ccc:	9b06      	ldr	r3, [sp, #24]
10009cce:	931d      	str	r3, [sp, #116]	; 0x74
10009cd0:	2300      	movs	r3, #0
10009cd2:	930d      	str	r3, [sp, #52]	; 0x34
10009cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
10009cd6:	2b00      	cmp	r3, #0
10009cd8:	d001      	beq.n	10009cde <_strtod_r+0x3c2>
10009cda:	f000 fc0e 	bl	1000a4fa <_strtod_r+0xbde>
10009cde:	f000 fc17 	bl	1000a510 <_strtod_r+0xbf4>
10009ce2:	1a53      	subs	r3, r2, r1
10009ce4:	9309      	str	r3, [sp, #36]	; 0x24
10009ce6:	9b04      	ldr	r3, [sp, #16]
10009ce8:	2b00      	cmp	r3, #0
10009cea:	d100      	bne.n	10009cee <_strtod_r+0x3d2>
10009cec:	9404      	str	r4, [sp, #16]
10009cee:	1e25      	subs	r5, r4, #0
10009cf0:	2d10      	cmp	r5, #16
10009cf2:	dd00      	ble.n	10009cf6 <_strtod_r+0x3da>
10009cf4:	2510      	movs	r5, #16
10009cf6:	9807      	ldr	r0, [sp, #28]
10009cf8:	f7fe fdea 	bl	100088d0 <__aeabi_ui2d>
10009cfc:	1c06      	adds	r6, r0, #0
10009cfe:	1c0f      	adds	r7, r1, #0
10009d00:	2d09      	cmp	r5, #9
10009d02:	dd15      	ble.n	10009d30 <_strtod_r+0x414>
10009d04:	1c2b      	adds	r3, r5, #0
10009d06:	4a83      	ldr	r2, [pc, #524]	; (10009f14 <_strtod_r+0x5f8>)
10009d08:	3b09      	subs	r3, #9
10009d0a:	00db      	lsls	r3, r3, #3
10009d0c:	18d3      	adds	r3, r2, r3
10009d0e:	681a      	ldr	r2, [r3, #0]
10009d10:	685b      	ldr	r3, [r3, #4]
10009d12:	f7fd ff8d 	bl	10007c30 <__aeabi_dmul>
10009d16:	1c06      	adds	r6, r0, #0
10009d18:	9805      	ldr	r0, [sp, #20]
10009d1a:	1c0f      	adds	r7, r1, #0
10009d1c:	f7fe fdd8 	bl	100088d0 <__aeabi_ui2d>
10009d20:	1c02      	adds	r2, r0, #0
10009d22:	1c0b      	adds	r3, r1, #0
10009d24:	1c30      	adds	r0, r6, #0
10009d26:	1c39      	adds	r1, r7, #0
10009d28:	f7fd fb40 	bl	100073ac <__aeabi_dadd>
10009d2c:	1c06      	adds	r6, r0, #0
10009d2e:	1c0f      	adds	r7, r1, #0
10009d30:	2c0f      	cmp	r4, #15
10009d32:	dc37      	bgt.n	10009da4 <_strtod_r+0x488>
10009d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d36:	2b00      	cmp	r3, #0
10009d38:	d100      	bne.n	10009d3c <_strtod_r+0x420>
10009d3a:	e3db      	b.n	1000a4f4 <_strtod_r+0xbd8>
10009d3c:	dd24      	ble.n	10009d88 <_strtod_r+0x46c>
10009d3e:	2b16      	cmp	r3, #22
10009d40:	dc07      	bgt.n	10009d52 <_strtod_r+0x436>
10009d42:	4974      	ldr	r1, [pc, #464]	; (10009f14 <_strtod_r+0x5f8>)
10009d44:	00da      	lsls	r2, r3, #3
10009d46:	188a      	adds	r2, r1, r2
10009d48:	6810      	ldr	r0, [r2, #0]
10009d4a:	6851      	ldr	r1, [r2, #4]
10009d4c:	1c3b      	adds	r3, r7, #0
10009d4e:	1c32      	adds	r2, r6, #0
10009d50:	e015      	b.n	10009d7e <_strtod_r+0x462>
10009d52:	2325      	movs	r3, #37	; 0x25
10009d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009d56:	1b1b      	subs	r3, r3, r4
10009d58:	429a      	cmp	r2, r3
10009d5a:	dc23      	bgt.n	10009da4 <_strtod_r+0x488>
10009d5c:	220f      	movs	r2, #15
10009d5e:	4d6d      	ldr	r5, [pc, #436]	; (10009f14 <_strtod_r+0x5f8>)
10009d60:	1b14      	subs	r4, r2, r4
10009d62:	00e3      	lsls	r3, r4, #3
10009d64:	18eb      	adds	r3, r5, r3
10009d66:	6818      	ldr	r0, [r3, #0]
10009d68:	6859      	ldr	r1, [r3, #4]
10009d6a:	1c32      	adds	r2, r6, #0
10009d6c:	1c3b      	adds	r3, r7, #0
10009d6e:	f7fd ff5f 	bl	10007c30 <__aeabi_dmul>
10009d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d74:	1b1c      	subs	r4, r3, r4
10009d76:	00e4      	lsls	r4, r4, #3
10009d78:	192d      	adds	r5, r5, r4
10009d7a:	682a      	ldr	r2, [r5, #0]
10009d7c:	686b      	ldr	r3, [r5, #4]
10009d7e:	f7fd ff57 	bl	10007c30 <__aeabi_dmul>
10009d82:	1c06      	adds	r6, r0, #0
10009d84:	1c0f      	adds	r7, r1, #0
10009d86:	e3b5      	b.n	1000a4f4 <_strtod_r+0xbd8>
10009d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d8a:	3316      	adds	r3, #22
10009d8c:	db0a      	blt.n	10009da4 <_strtod_r+0x488>
10009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d90:	1c30      	adds	r0, r6, #0
10009d92:	00da      	lsls	r2, r3, #3
10009d94:	4b5f      	ldr	r3, [pc, #380]	; (10009f14 <_strtod_r+0x5f8>)
10009d96:	1c39      	adds	r1, r7, #0
10009d98:	1a9a      	subs	r2, r3, r2
10009d9a:	6853      	ldr	r3, [r2, #4]
10009d9c:	6812      	ldr	r2, [r2, #0]
10009d9e:	f002 fcc1 	bl	1000c724 <__aeabi_ddiv>
10009da2:	e7ee      	b.n	10009d82 <_strtod_r+0x466>
10009da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009da6:	1b65      	subs	r5, r4, r5
10009da8:	195d      	adds	r5, r3, r5
10009daa:	2d00      	cmp	r5, #0
10009dac:	dd59      	ble.n	10009e62 <_strtod_r+0x546>
10009dae:	230f      	movs	r3, #15
10009db0:	402b      	ands	r3, r5
10009db2:	d00a      	beq.n	10009dca <_strtod_r+0x4ae>
10009db4:	4a57      	ldr	r2, [pc, #348]	; (10009f14 <_strtod_r+0x5f8>)
10009db6:	00db      	lsls	r3, r3, #3
10009db8:	18d3      	adds	r3, r2, r3
10009dba:	6818      	ldr	r0, [r3, #0]
10009dbc:	6859      	ldr	r1, [r3, #4]
10009dbe:	1c32      	adds	r2, r6, #0
10009dc0:	1c3b      	adds	r3, r7, #0
10009dc2:	f7fd ff35 	bl	10007c30 <__aeabi_dmul>
10009dc6:	1c06      	adds	r6, r0, #0
10009dc8:	1c0f      	adds	r7, r1, #0
10009dca:	230f      	movs	r3, #15
10009dcc:	439d      	bics	r5, r3
10009dce:	d100      	bne.n	10009dd2 <_strtod_r+0x4b6>
10009dd0:	e0b0      	b.n	10009f34 <_strtod_r+0x618>
10009dd2:	3326      	adds	r3, #38	; 0x26
10009dd4:	33ff      	adds	r3, #255	; 0xff
10009dd6:	429d      	cmp	r5, r3
10009dd8:	dd0e      	ble.n	10009df8 <_strtod_r+0x4dc>
10009dda:	2300      	movs	r3, #0
10009ddc:	9304      	str	r3, [sp, #16]
10009dde:	9305      	str	r3, [sp, #20]
10009de0:	930b      	str	r3, [sp, #44]	; 0x2c
10009de2:	9308      	str	r3, [sp, #32]
10009de4:	2322      	movs	r3, #34	; 0x22
10009de6:	2600      	movs	r6, #0
10009de8:	9a03      	ldr	r2, [sp, #12]
10009dea:	4f4b      	ldr	r7, [pc, #300]	; (10009f18 <_strtod_r+0x5fc>)
10009dec:	6013      	str	r3, [r2, #0]
10009dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009df0:	42b3      	cmp	r3, r6
10009df2:	d000      	beq.n	10009df6 <_strtod_r+0x4da>
10009df4:	e36a      	b.n	1000a4cc <_strtod_r+0xbb0>
10009df6:	e37d      	b.n	1000a4f4 <_strtod_r+0xbd8>
10009df8:	2300      	movs	r3, #0
10009dfa:	1c30      	adds	r0, r6, #0
10009dfc:	1c39      	adds	r1, r7, #0
10009dfe:	112d      	asrs	r5, r5, #4
10009e00:	9305      	str	r3, [sp, #20]
10009e02:	2d01      	cmp	r5, #1
10009e04:	dd0e      	ble.n	10009e24 <_strtod_r+0x508>
10009e06:	07eb      	lsls	r3, r5, #31
10009e08:	d507      	bpl.n	10009e1a <_strtod_r+0x4fe>
10009e0a:	9b05      	ldr	r3, [sp, #20]
10009e0c:	00da      	lsls	r2, r3, #3
10009e0e:	4b43      	ldr	r3, [pc, #268]	; (10009f1c <_strtod_r+0x600>)
10009e10:	18d3      	adds	r3, r2, r3
10009e12:	681a      	ldr	r2, [r3, #0]
10009e14:	685b      	ldr	r3, [r3, #4]
10009e16:	f7fd ff0b 	bl	10007c30 <__aeabi_dmul>
10009e1a:	9b05      	ldr	r3, [sp, #20]
10009e1c:	106d      	asrs	r5, r5, #1
10009e1e:	3301      	adds	r3, #1
10009e20:	9305      	str	r3, [sp, #20]
10009e22:	e7ee      	b.n	10009e02 <_strtod_r+0x4e6>
10009e24:	1c06      	adds	r6, r0, #0
10009e26:	4b3e      	ldr	r3, [pc, #248]	; (10009f20 <_strtod_r+0x604>)
10009e28:	18cf      	adds	r7, r1, r3
10009e2a:	9b05      	ldr	r3, [sp, #20]
10009e2c:	00da      	lsls	r2, r3, #3
10009e2e:	4b3b      	ldr	r3, [pc, #236]	; (10009f1c <_strtod_r+0x600>)
10009e30:	189b      	adds	r3, r3, r2
10009e32:	6818      	ldr	r0, [r3, #0]
10009e34:	6859      	ldr	r1, [r3, #4]
10009e36:	1c32      	adds	r2, r6, #0
10009e38:	1c3b      	adds	r3, r7, #0
10009e3a:	f7fd fef9 	bl	10007c30 <__aeabi_dmul>
10009e3e:	4b36      	ldr	r3, [pc, #216]	; (10009f18 <_strtod_r+0x5fc>)
10009e40:	1c0f      	adds	r7, r1, #0
10009e42:	400b      	ands	r3, r1
10009e44:	4937      	ldr	r1, [pc, #220]	; (10009f24 <_strtod_r+0x608>)
10009e46:	1c06      	adds	r6, r0, #0
10009e48:	428b      	cmp	r3, r1
10009e4a:	d8c6      	bhi.n	10009dda <_strtod_r+0x4be>
10009e4c:	4936      	ldr	r1, [pc, #216]	; (10009f28 <_strtod_r+0x60c>)
10009e4e:	428b      	cmp	r3, r1
10009e50:	d903      	bls.n	10009e5a <_strtod_r+0x53e>
10009e52:	2601      	movs	r6, #1
10009e54:	4f35      	ldr	r7, [pc, #212]	; (10009f2c <_strtod_r+0x610>)
10009e56:	4276      	negs	r6, r6
10009e58:	e06c      	b.n	10009f34 <_strtod_r+0x618>
10009e5a:	23d4      	movs	r3, #212	; 0xd4
10009e5c:	049b      	lsls	r3, r3, #18
10009e5e:	18ff      	adds	r7, r7, r3
10009e60:	e068      	b.n	10009f34 <_strtod_r+0x618>
10009e62:	2d00      	cmp	r5, #0
10009e64:	d066      	beq.n	10009f34 <_strtod_r+0x618>
10009e66:	230f      	movs	r3, #15
10009e68:	426d      	negs	r5, r5
10009e6a:	402b      	ands	r3, r5
10009e6c:	d00a      	beq.n	10009e84 <_strtod_r+0x568>
10009e6e:	4a29      	ldr	r2, [pc, #164]	; (10009f14 <_strtod_r+0x5f8>)
10009e70:	00db      	lsls	r3, r3, #3
10009e72:	18d3      	adds	r3, r2, r3
10009e74:	1c30      	adds	r0, r6, #0
10009e76:	681a      	ldr	r2, [r3, #0]
10009e78:	685b      	ldr	r3, [r3, #4]
10009e7a:	1c39      	adds	r1, r7, #0
10009e7c:	f002 fc52 	bl	1000c724 <__aeabi_ddiv>
10009e80:	1c06      	adds	r6, r0, #0
10009e82:	1c0f      	adds	r7, r1, #0
10009e84:	112d      	asrs	r5, r5, #4
10009e86:	d055      	beq.n	10009f34 <_strtod_r+0x618>
10009e88:	2d1f      	cmp	r5, #31
10009e8a:	dd05      	ble.n	10009e98 <_strtod_r+0x57c>
10009e8c:	2300      	movs	r3, #0
10009e8e:	9304      	str	r3, [sp, #16]
10009e90:	9305      	str	r3, [sp, #20]
10009e92:	930b      	str	r3, [sp, #44]	; 0x2c
10009e94:	9308      	str	r3, [sp, #32]
10009e96:	e118      	b.n	1000a0ca <_strtod_r+0x7ae>
10009e98:	2300      	movs	r3, #0
10009e9a:	9306      	str	r3, [sp, #24]
10009e9c:	06eb      	lsls	r3, r5, #27
10009e9e:	d501      	bpl.n	10009ea4 <_strtod_r+0x588>
10009ea0:	236a      	movs	r3, #106	; 0x6a
10009ea2:	9306      	str	r3, [sp, #24]
10009ea4:	1c39      	adds	r1, r7, #0
10009ea6:	1c30      	adds	r0, r6, #0
10009ea8:	4e21      	ldr	r6, [pc, #132]	; (10009f30 <_strtod_r+0x614>)
10009eaa:	2d00      	cmp	r5, #0
10009eac:	dd08      	ble.n	10009ec0 <_strtod_r+0x5a4>
10009eae:	07eb      	lsls	r3, r5, #31
10009eb0:	d503      	bpl.n	10009eba <_strtod_r+0x59e>
10009eb2:	6832      	ldr	r2, [r6, #0]
10009eb4:	6873      	ldr	r3, [r6, #4]
10009eb6:	f7fd febb 	bl	10007c30 <__aeabi_dmul>
10009eba:	106d      	asrs	r5, r5, #1
10009ebc:	3608      	adds	r6, #8
10009ebe:	e7f4      	b.n	10009eaa <_strtod_r+0x58e>
10009ec0:	9b06      	ldr	r3, [sp, #24]
10009ec2:	1c06      	adds	r6, r0, #0
10009ec4:	1c0f      	adds	r7, r1, #0
10009ec6:	2b00      	cmp	r3, #0
10009ec8:	d019      	beq.n	10009efe <_strtod_r+0x5e2>
10009eca:	226b      	movs	r2, #107	; 0x6b
10009ecc:	004b      	lsls	r3, r1, #1
10009ece:	0d5b      	lsrs	r3, r3, #21
10009ed0:	1c08      	adds	r0, r1, #0
10009ed2:	1ad3      	subs	r3, r2, r3
10009ed4:	2b00      	cmp	r3, #0
10009ed6:	dd12      	ble.n	10009efe <_strtod_r+0x5e2>
10009ed8:	2b1f      	cmp	r3, #31
10009eda:	dd0c      	ble.n	10009ef6 <_strtod_r+0x5da>
10009edc:	2600      	movs	r6, #0
10009ede:	2b34      	cmp	r3, #52	; 0x34
10009ee0:	dd02      	ble.n	10009ee8 <_strtod_r+0x5cc>
10009ee2:	27dc      	movs	r7, #220	; 0xdc
10009ee4:	04bf      	lsls	r7, r7, #18
10009ee6:	e00a      	b.n	10009efe <_strtod_r+0x5e2>
10009ee8:	2201      	movs	r2, #1
10009eea:	3b20      	subs	r3, #32
10009eec:	4252      	negs	r2, r2
10009eee:	409a      	lsls	r2, r3
10009ef0:	4010      	ands	r0, r2
10009ef2:	1c07      	adds	r7, r0, #0
10009ef4:	e003      	b.n	10009efe <_strtod_r+0x5e2>
10009ef6:	2201      	movs	r2, #1
10009ef8:	4252      	negs	r2, r2
10009efa:	409a      	lsls	r2, r3
10009efc:	4016      	ands	r6, r2
10009efe:	1c30      	adds	r0, r6, #0
10009f00:	1c39      	adds	r1, r7, #0
10009f02:	2200      	movs	r2, #0
10009f04:	2300      	movs	r3, #0
10009f06:	f7fc fdff 	bl	10006b08 <__aeabi_dcmpeq>
10009f0a:	2800      	cmp	r0, #0
10009f0c:	d1be      	bne.n	10009e8c <_strtod_r+0x570>
10009f0e:	e013      	b.n	10009f38 <_strtod_r+0x61c>
10009f10:	fff80000 	.word	0xfff80000
10009f14:	1000d098 	.word	0x1000d098
10009f18:	7ff00000 	.word	0x7ff00000
10009f1c:	1000d160 	.word	0x1000d160
10009f20:	fcb00000 	.word	0xfcb00000
10009f24:	7ca00000 	.word	0x7ca00000
10009f28:	7c900000 	.word	0x7c900000
10009f2c:	7fefffff 	.word	0x7fefffff
10009f30:	1000cf40 	.word	0x1000cf40
10009f34:	2300      	movs	r3, #0
10009f36:	9306      	str	r3, [sp, #24]
10009f38:	9b07      	ldr	r3, [sp, #28]
10009f3a:	9803      	ldr	r0, [sp, #12]
10009f3c:	9300      	str	r3, [sp, #0]
10009f3e:	990c      	ldr	r1, [sp, #48]	; 0x30
10009f40:	9a04      	ldr	r2, [sp, #16]
10009f42:	1c23      	adds	r3, r4, #0
10009f44:	f001 fdda 	bl	1000bafc <__s2b>
10009f48:	900b      	str	r0, [sp, #44]	; 0x2c
10009f4a:	2800      	cmp	r0, #0
10009f4c:	d100      	bne.n	10009f50 <_strtod_r+0x634>
10009f4e:	e744      	b.n	10009dda <_strtod_r+0x4be>
10009f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009f54:	425b      	negs	r3, r3
10009f56:	17d2      	asrs	r2, r2, #31
10009f58:	4013      	ands	r3, r2
10009f5a:	9313      	str	r3, [sp, #76]	; 0x4c
10009f5c:	2300      	movs	r3, #0
10009f5e:	9304      	str	r3, [sp, #16]
10009f60:	9305      	str	r3, [sp, #20]
10009f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009f64:	9803      	ldr	r0, [sp, #12]
10009f66:	6859      	ldr	r1, [r3, #4]
10009f68:	f001 fd3b 	bl	1000b9e2 <_Balloc>
10009f6c:	9008      	str	r0, [sp, #32]
10009f6e:	2800      	cmp	r0, #0
10009f70:	d100      	bne.n	10009f74 <_strtod_r+0x658>
10009f72:	e737      	b.n	10009de4 <_strtod_r+0x4c8>
10009f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009f76:	990b      	ldr	r1, [sp, #44]	; 0x2c
10009f78:	691b      	ldr	r3, [r3, #16]
10009f7a:	310c      	adds	r1, #12
10009f7c:	1c9a      	adds	r2, r3, #2
10009f7e:	0092      	lsls	r2, r2, #2
10009f80:	300c      	adds	r0, #12
10009f82:	9307      	str	r3, [sp, #28]
10009f84:	f7fe fe04 	bl	10008b90 <memcpy>
10009f88:	ab1f      	add	r3, sp, #124	; 0x7c
10009f8a:	9300      	str	r3, [sp, #0]
10009f8c:	ab20      	add	r3, sp, #128	; 0x80
10009f8e:	9301      	str	r3, [sp, #4]
10009f90:	9803      	ldr	r0, [sp, #12]
10009f92:	1c32      	adds	r2, r6, #0
10009f94:	1c3b      	adds	r3, r7, #0
10009f96:	960e      	str	r6, [sp, #56]	; 0x38
10009f98:	970f      	str	r7, [sp, #60]	; 0x3c
10009f9a:	f002 f86f 	bl	1000c07c <__d2b>
10009f9e:	901e      	str	r0, [sp, #120]	; 0x78
10009fa0:	2800      	cmp	r0, #0
10009fa2:	d100      	bne.n	10009fa6 <_strtod_r+0x68a>
10009fa4:	e71e      	b.n	10009de4 <_strtod_r+0x4c8>
10009fa6:	9803      	ldr	r0, [sp, #12]
10009fa8:	2101      	movs	r1, #1
10009faa:	f001 fe31 	bl	1000bc10 <__i2b>
10009fae:	9005      	str	r0, [sp, #20]
10009fb0:	2800      	cmp	r0, #0
10009fb2:	d100      	bne.n	10009fb6 <_strtod_r+0x69a>
10009fb4:	e716      	b.n	10009de4 <_strtod_r+0x4c8>
10009fb6:	2300      	movs	r3, #0
10009fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009fba:	930a      	str	r3, [sp, #40]	; 0x28
10009fbc:	4293      	cmp	r3, r2
10009fbe:	da00      	bge.n	10009fc2 <_strtod_r+0x6a6>
10009fc0:	920a      	str	r2, [sp, #40]	; 0x28
10009fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10009fc4:	2b00      	cmp	r3, #0
10009fc6:	da00      	bge.n	10009fca <_strtod_r+0x6ae>
10009fc8:	e089      	b.n	1000a0de <_strtod_r+0x7c2>
10009fca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009fce:	18d5      	adds	r5, r2, r3
10009fd0:	9a06      	ldr	r2, [sp, #24]
10009fd2:	9920      	ldr	r1, [sp, #128]	; 0x80
10009fd4:	1a9b      	subs	r3, r3, r2
10009fd6:	2236      	movs	r2, #54	; 0x36
10009fd8:	185b      	adds	r3, r3, r1
10009fda:	1a52      	subs	r2, r2, r1
10009fdc:	49c8      	ldr	r1, [pc, #800]	; (1000a300 <_strtod_r+0x9e4>)
10009fde:	2001      	movs	r0, #1
10009fe0:	428b      	cmp	r3, r1
10009fe2:	db00      	blt.n	10009fe6 <_strtod_r+0x6ca>
10009fe4:	e085      	b.n	1000a0f2 <_strtod_r+0x7d6>
10009fe6:	1ac9      	subs	r1, r1, r3
10009fe8:	1a52      	subs	r2, r2, r1
10009fea:	291f      	cmp	r1, #31
10009fec:	dc7b      	bgt.n	1000a0e6 <_strtod_r+0x7ca>
10009fee:	4088      	lsls	r0, r1
10009ff0:	2300      	movs	r3, #0
10009ff2:	9018      	str	r0, [sp, #96]	; 0x60
10009ff4:	9312      	str	r3, [sp, #72]	; 0x48
10009ff6:	18ab      	adds	r3, r5, r2
10009ff8:	9307      	str	r3, [sp, #28]
10009ffa:	9b06      	ldr	r3, [sp, #24]
10009ffc:	18a4      	adds	r4, r4, r2
10009ffe:	18e4      	adds	r4, r4, r3
1000a000:	9b07      	ldr	r3, [sp, #28]
1000a002:	42ab      	cmp	r3, r5
1000a004:	dd00      	ble.n	1000a008 <_strtod_r+0x6ec>
1000a006:	1c2b      	adds	r3, r5, #0
1000a008:	42a3      	cmp	r3, r4
1000a00a:	dd00      	ble.n	1000a00e <_strtod_r+0x6f2>
1000a00c:	1c23      	adds	r3, r4, #0
1000a00e:	2b00      	cmp	r3, #0
1000a010:	dd04      	ble.n	1000a01c <_strtod_r+0x700>
1000a012:	9a07      	ldr	r2, [sp, #28]
1000a014:	1ae4      	subs	r4, r4, r3
1000a016:	1ad2      	subs	r2, r2, r3
1000a018:	9207      	str	r2, [sp, #28]
1000a01a:	1aed      	subs	r5, r5, r3
1000a01c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000a01e:	2b00      	cmp	r3, #0
1000a020:	d16b      	bne.n	1000a0fa <_strtod_r+0x7de>
1000a022:	9b07      	ldr	r3, [sp, #28]
1000a024:	2b00      	cmp	r3, #0
1000a026:	dd00      	ble.n	1000a02a <_strtod_r+0x70e>
1000a028:	e080      	b.n	1000a12c <_strtod_r+0x810>
1000a02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a02c:	2b00      	cmp	r3, #0
1000a02e:	d000      	beq.n	1000a032 <_strtod_r+0x716>
1000a030:	e086      	b.n	1000a140 <_strtod_r+0x824>
1000a032:	2c00      	cmp	r4, #0
1000a034:	dd00      	ble.n	1000a038 <_strtod_r+0x71c>
1000a036:	e08d      	b.n	1000a154 <_strtod_r+0x838>
1000a038:	2d00      	cmp	r5, #0
1000a03a:	dd00      	ble.n	1000a03e <_strtod_r+0x722>
1000a03c:	e094      	b.n	1000a168 <_strtod_r+0x84c>
1000a03e:	9803      	ldr	r0, [sp, #12]
1000a040:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a042:	9a08      	ldr	r2, [sp, #32]
1000a044:	f001 ff39 	bl	1000beba <__mdiff>
1000a048:	9004      	str	r0, [sp, #16]
1000a04a:	2800      	cmp	r0, #0
1000a04c:	d100      	bne.n	1000a050 <_strtod_r+0x734>
1000a04e:	e6c9      	b.n	10009de4 <_strtod_r+0x4c8>
1000a050:	2200      	movs	r2, #0
1000a052:	68c3      	ldr	r3, [r0, #12]
1000a054:	9905      	ldr	r1, [sp, #20]
1000a056:	60c2      	str	r2, [r0, #12]
1000a058:	930c      	str	r3, [sp, #48]	; 0x30
1000a05a:	f001 ff13 	bl	1000be84 <__mcmp>
1000a05e:	2800      	cmp	r0, #0
1000a060:	db00      	blt.n	1000a064 <_strtod_r+0x748>
1000a062:	e091      	b.n	1000a188 <_strtod_r+0x86c>
1000a064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a066:	2b00      	cmp	r3, #0
1000a068:	d000      	beq.n	1000a06c <_strtod_r+0x750>
1000a06a:	e21a      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a06c:	2e00      	cmp	r6, #0
1000a06e:	d000      	beq.n	1000a072 <_strtod_r+0x756>
1000a070:	e217      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a072:	033b      	lsls	r3, r7, #12
1000a074:	d000      	beq.n	1000a078 <_strtod_r+0x75c>
1000a076:	e214      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a078:	22d6      	movs	r2, #214	; 0xd6
1000a07a:	4ba2      	ldr	r3, [pc, #648]	; (1000a304 <_strtod_r+0x9e8>)
1000a07c:	04d2      	lsls	r2, r2, #19
1000a07e:	403b      	ands	r3, r7
1000a080:	4293      	cmp	r3, r2
1000a082:	d800      	bhi.n	1000a086 <_strtod_r+0x76a>
1000a084:	e20d      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a086:	9b04      	ldr	r3, [sp, #16]
1000a088:	695b      	ldr	r3, [r3, #20]
1000a08a:	9307      	str	r3, [sp, #28]
1000a08c:	2b00      	cmp	r3, #0
1000a08e:	d075      	beq.n	1000a17c <_strtod_r+0x860>
1000a090:	9904      	ldr	r1, [sp, #16]
1000a092:	9803      	ldr	r0, [sp, #12]
1000a094:	2201      	movs	r2, #1
1000a096:	f001 fea3 	bl	1000bde0 <__lshift>
1000a09a:	9905      	ldr	r1, [sp, #20]
1000a09c:	9004      	str	r0, [sp, #16]
1000a09e:	f001 fef1 	bl	1000be84 <__mcmp>
1000a0a2:	2800      	cmp	r0, #0
1000a0a4:	dc00      	bgt.n	1000a0a8 <_strtod_r+0x78c>
1000a0a6:	e1fc      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a0a8:	9a06      	ldr	r2, [sp, #24]
1000a0aa:	4b96      	ldr	r3, [pc, #600]	; (1000a304 <_strtod_r+0x9e8>)
1000a0ac:	2a00      	cmp	r2, #0
1000a0ae:	d100      	bne.n	1000a0b2 <_strtod_r+0x796>
1000a0b0:	e09a      	b.n	1000a1e8 <_strtod_r+0x8cc>
1000a0b2:	1c1a      	adds	r2, r3, #0
1000a0b4:	21d6      	movs	r1, #214	; 0xd6
1000a0b6:	403a      	ands	r2, r7
1000a0b8:	04c9      	lsls	r1, r1, #19
1000a0ba:	428a      	cmp	r2, r1
1000a0bc:	dd00      	ble.n	1000a0c0 <_strtod_r+0x7a4>
1000a0be:	e093      	b.n	1000a1e8 <_strtod_r+0x8cc>
1000a0c0:	23dc      	movs	r3, #220	; 0xdc
1000a0c2:	049b      	lsls	r3, r3, #18
1000a0c4:	429a      	cmp	r2, r3
1000a0c6:	dd00      	ble.n	1000a0ca <_strtod_r+0x7ae>
1000a0c8:	e1ee      	b.n	1000a4a8 <_strtod_r+0xb8c>
1000a0ca:	2322      	movs	r3, #34	; 0x22
1000a0cc:	9a03      	ldr	r2, [sp, #12]
1000a0ce:	2600      	movs	r6, #0
1000a0d0:	6013      	str	r3, [r2, #0]
1000a0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a0d4:	2700      	movs	r7, #0
1000a0d6:	2b00      	cmp	r3, #0
1000a0d8:	d000      	beq.n	1000a0dc <_strtod_r+0x7c0>
1000a0da:	e1f7      	b.n	1000a4cc <_strtod_r+0xbb0>
1000a0dc:	e20a      	b.n	1000a4f4 <_strtod_r+0xbd8>
1000a0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a0e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000a0e2:	1ad4      	subs	r4, r2, r3
1000a0e4:	e774      	b.n	10009fd0 <_strtod_r+0x6b4>
1000a0e6:	4988      	ldr	r1, [pc, #544]	; (1000a308 <_strtod_r+0x9ec>)
1000a0e8:	1acb      	subs	r3, r1, r3
1000a0ea:	1c01      	adds	r1, r0, #0
1000a0ec:	4099      	lsls	r1, r3
1000a0ee:	9112      	str	r1, [sp, #72]	; 0x48
1000a0f0:	e001      	b.n	1000a0f6 <_strtod_r+0x7da>
1000a0f2:	2300      	movs	r3, #0
1000a0f4:	9312      	str	r3, [sp, #72]	; 0x48
1000a0f6:	9018      	str	r0, [sp, #96]	; 0x60
1000a0f8:	e77d      	b.n	10009ff6 <_strtod_r+0x6da>
1000a0fa:	1c1a      	adds	r2, r3, #0
1000a0fc:	9803      	ldr	r0, [sp, #12]
1000a0fe:	9905      	ldr	r1, [sp, #20]
1000a100:	f001 fe1c 	bl	1000bd3c <__pow5mult>
1000a104:	9005      	str	r0, [sp, #20]
1000a106:	1e03      	subs	r3, r0, #0
1000a108:	d100      	bne.n	1000a10c <_strtod_r+0x7f0>
1000a10a:	e66b      	b.n	10009de4 <_strtod_r+0x4c8>
1000a10c:	9803      	ldr	r0, [sp, #12]
1000a10e:	1c19      	adds	r1, r3, #0
1000a110:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1000a112:	f001 fd86 	bl	1000bc22 <__multiply>
1000a116:	900c      	str	r0, [sp, #48]	; 0x30
1000a118:	2800      	cmp	r0, #0
1000a11a:	d100      	bne.n	1000a11e <_strtod_r+0x802>
1000a11c:	e662      	b.n	10009de4 <_strtod_r+0x4c8>
1000a11e:	9803      	ldr	r0, [sp, #12]
1000a120:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a122:	f001 fc96 	bl	1000ba52 <_Bfree>
1000a126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a128:	931e      	str	r3, [sp, #120]	; 0x78
1000a12a:	e77a      	b.n	1000a022 <_strtod_r+0x706>
1000a12c:	9803      	ldr	r0, [sp, #12]
1000a12e:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a130:	9a07      	ldr	r2, [sp, #28]
1000a132:	f001 fe55 	bl	1000bde0 <__lshift>
1000a136:	901e      	str	r0, [sp, #120]	; 0x78
1000a138:	2800      	cmp	r0, #0
1000a13a:	d000      	beq.n	1000a13e <_strtod_r+0x822>
1000a13c:	e775      	b.n	1000a02a <_strtod_r+0x70e>
1000a13e:	e651      	b.n	10009de4 <_strtod_r+0x4c8>
1000a140:	9803      	ldr	r0, [sp, #12]
1000a142:	9908      	ldr	r1, [sp, #32]
1000a144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a146:	f001 fdf9 	bl	1000bd3c <__pow5mult>
1000a14a:	9008      	str	r0, [sp, #32]
1000a14c:	2800      	cmp	r0, #0
1000a14e:	d000      	beq.n	1000a152 <_strtod_r+0x836>
1000a150:	e76f      	b.n	1000a032 <_strtod_r+0x716>
1000a152:	e647      	b.n	10009de4 <_strtod_r+0x4c8>
1000a154:	9803      	ldr	r0, [sp, #12]
1000a156:	9908      	ldr	r1, [sp, #32]
1000a158:	1c22      	adds	r2, r4, #0
1000a15a:	f001 fe41 	bl	1000bde0 <__lshift>
1000a15e:	9008      	str	r0, [sp, #32]
1000a160:	2800      	cmp	r0, #0
1000a162:	d000      	beq.n	1000a166 <_strtod_r+0x84a>
1000a164:	e768      	b.n	1000a038 <_strtod_r+0x71c>
1000a166:	e63d      	b.n	10009de4 <_strtod_r+0x4c8>
1000a168:	9803      	ldr	r0, [sp, #12]
1000a16a:	9905      	ldr	r1, [sp, #20]
1000a16c:	1c2a      	adds	r2, r5, #0
1000a16e:	f001 fe37 	bl	1000bde0 <__lshift>
1000a172:	9005      	str	r0, [sp, #20]
1000a174:	2800      	cmp	r0, #0
1000a176:	d000      	beq.n	1000a17a <_strtod_r+0x85e>
1000a178:	e761      	b.n	1000a03e <_strtod_r+0x722>
1000a17a:	e633      	b.n	10009de4 <_strtod_r+0x4c8>
1000a17c:	9b04      	ldr	r3, [sp, #16]
1000a17e:	691b      	ldr	r3, [r3, #16]
1000a180:	9307      	str	r3, [sp, #28]
1000a182:	2b01      	cmp	r3, #1
1000a184:	dc84      	bgt.n	1000a090 <_strtod_r+0x774>
1000a186:	e18c      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a188:	2800      	cmp	r0, #0
1000a18a:	d164      	bne.n	1000a256 <_strtod_r+0x93a>
1000a18c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000a18e:	033b      	lsls	r3, r7, #12
1000a190:	2a00      	cmp	r2, #0
1000a192:	d024      	beq.n	1000a1de <_strtod_r+0x8c2>
1000a194:	4a5d      	ldr	r2, [pc, #372]	; (1000a30c <_strtod_r+0x9f0>)
1000a196:	1c39      	adds	r1, r7, #0
1000a198:	0b1b      	lsrs	r3, r3, #12
1000a19a:	4293      	cmp	r3, r2
1000a19c:	d12d      	bne.n	1000a1fa <_strtod_r+0x8de>
1000a19e:	9a06      	ldr	r2, [sp, #24]
1000a1a0:	3801      	subs	r0, #1
1000a1a2:	1c34      	adds	r4, r6, #0
1000a1a4:	1c03      	adds	r3, r0, #0
1000a1a6:	2a00      	cmp	r2, #0
1000a1a8:	d00a      	beq.n	1000a1c0 <_strtod_r+0x8a4>
1000a1aa:	25d4      	movs	r5, #212	; 0xd4
1000a1ac:	4a55      	ldr	r2, [pc, #340]	; (1000a304 <_strtod_r+0x9e8>)
1000a1ae:	04ed      	lsls	r5, r5, #19
1000a1b0:	403a      	ands	r2, r7
1000a1b2:	42aa      	cmp	r2, r5
1000a1b4:	d804      	bhi.n	1000a1c0 <_strtod_r+0x8a4>
1000a1b6:	336c      	adds	r3, #108	; 0x6c
1000a1b8:	0d12      	lsrs	r2, r2, #20
1000a1ba:	1a9a      	subs	r2, r3, r2
1000a1bc:	1c03      	adds	r3, r0, #0
1000a1be:	4093      	lsls	r3, r2
1000a1c0:	429c      	cmp	r4, r3
1000a1c2:	d11a      	bne.n	1000a1fa <_strtod_r+0x8de>
1000a1c4:	4b52      	ldr	r3, [pc, #328]	; (1000a310 <_strtod_r+0x9f4>)
1000a1c6:	4299      	cmp	r1, r3
1000a1c8:	d102      	bne.n	1000a1d0 <_strtod_r+0x8b4>
1000a1ca:	1c63      	adds	r3, r4, #1
1000a1cc:	d100      	bne.n	1000a1d0 <_strtod_r+0x8b4>
1000a1ce:	e609      	b.n	10009de4 <_strtod_r+0x4c8>
1000a1d0:	4b4c      	ldr	r3, [pc, #304]	; (1000a304 <_strtod_r+0x9e8>)
1000a1d2:	2600      	movs	r6, #0
1000a1d4:	4019      	ands	r1, r3
1000a1d6:	2380      	movs	r3, #128	; 0x80
1000a1d8:	035b      	lsls	r3, r3, #13
1000a1da:	18cf      	adds	r7, r1, r3
1000a1dc:	e161      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a1de:	2b00      	cmp	r3, #0
1000a1e0:	d10b      	bne.n	1000a1fa <_strtod_r+0x8de>
1000a1e2:	2e00      	cmp	r6, #0
1000a1e4:	d109      	bne.n	1000a1fa <_strtod_r+0x8de>
1000a1e6:	e75f      	b.n	1000a0a8 <_strtod_r+0x78c>
1000a1e8:	2601      	movs	r6, #1
1000a1ea:	4a4a      	ldr	r2, [pc, #296]	; (1000a314 <_strtod_r+0x9f8>)
1000a1ec:	403b      	ands	r3, r7
1000a1ee:	189b      	adds	r3, r3, r2
1000a1f0:	4a46      	ldr	r2, [pc, #280]	; (1000a30c <_strtod_r+0x9f0>)
1000a1f2:	4276      	negs	r6, r6
1000a1f4:	431a      	orrs	r2, r3
1000a1f6:	1c17      	adds	r7, r2, #0
1000a1f8:	e153      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a1fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a1fc:	2b00      	cmp	r3, #0
1000a1fe:	d003      	beq.n	1000a208 <_strtod_r+0x8ec>
1000a200:	423b      	tst	r3, r7
1000a202:	d100      	bne.n	1000a206 <_strtod_r+0x8ea>
1000a204:	e14d      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a206:	e003      	b.n	1000a210 <_strtod_r+0x8f4>
1000a208:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a20a:	4233      	tst	r3, r6
1000a20c:	d100      	bne.n	1000a210 <_strtod_r+0x8f4>
1000a20e:	e148      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a212:	1c30      	adds	r0, r6, #0
1000a214:	1c39      	adds	r1, r7, #0
1000a216:	9a06      	ldr	r2, [sp, #24]
1000a218:	2b00      	cmp	r3, #0
1000a21a:	d00a      	beq.n	1000a232 <_strtod_r+0x916>
1000a21c:	f7ff fb68 	bl	100098f0 <sulp>
1000a220:	1c02      	adds	r2, r0, #0
1000a222:	1c0b      	adds	r3, r1, #0
1000a224:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a226:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a228:	f7fd f8c0 	bl	100073ac <__aeabi_dadd>
1000a22c:	1c06      	adds	r6, r0, #0
1000a22e:	1c0f      	adds	r7, r1, #0
1000a230:	e137      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a232:	f7ff fb5d 	bl	100098f0 <sulp>
1000a236:	1c02      	adds	r2, r0, #0
1000a238:	1c0b      	adds	r3, r1, #0
1000a23a:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a23c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a23e:	f7fd ff91 	bl	10008164 <__aeabi_dsub>
1000a242:	2200      	movs	r2, #0
1000a244:	2300      	movs	r3, #0
1000a246:	1c06      	adds	r6, r0, #0
1000a248:	1c0f      	adds	r7, r1, #0
1000a24a:	f7fc fc5d 	bl	10006b08 <__aeabi_dcmpeq>
1000a24e:	2800      	cmp	r0, #0
1000a250:	d000      	beq.n	1000a254 <_strtod_r+0x938>
1000a252:	e73a      	b.n	1000a0ca <_strtod_r+0x7ae>
1000a254:	e125      	b.n	1000a4a2 <_strtod_r+0xb86>
1000a256:	9804      	ldr	r0, [sp, #16]
1000a258:	9905      	ldr	r1, [sp, #20]
1000a25a:	f001 ff63 	bl	1000c124 <__ratio>
1000a25e:	2380      	movs	r3, #128	; 0x80
1000a260:	2200      	movs	r2, #0
1000a262:	05db      	lsls	r3, r3, #23
1000a264:	1c04      	adds	r4, r0, #0
1000a266:	1c0d      	adds	r5, r1, #0
1000a268:	f7fc fc5e 	bl	10006b28 <__aeabi_dcmple>
1000a26c:	2800      	cmp	r0, #0
1000a26e:	d036      	beq.n	1000a2de <_strtod_r+0x9c2>
1000a270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a272:	2b00      	cmp	r3, #0
1000a274:	d002      	beq.n	1000a27c <_strtod_r+0x960>
1000a276:	2400      	movs	r4, #0
1000a278:	4d27      	ldr	r5, [pc, #156]	; (1000a318 <_strtod_r+0x9fc>)
1000a27a:	e00b      	b.n	1000a294 <_strtod_r+0x978>
1000a27c:	2e00      	cmp	r6, #0
1000a27e:	d102      	bne.n	1000a286 <_strtod_r+0x96a>
1000a280:	033b      	lsls	r3, r7, #12
1000a282:	d105      	bne.n	1000a290 <_strtod_r+0x974>
1000a284:	e00b      	b.n	1000a29e <_strtod_r+0x982>
1000a286:	2e01      	cmp	r6, #1
1000a288:	d102      	bne.n	1000a290 <_strtod_r+0x974>
1000a28a:	2f00      	cmp	r7, #0
1000a28c:	d100      	bne.n	1000a290 <_strtod_r+0x974>
1000a28e:	e71c      	b.n	1000a0ca <_strtod_r+0x7ae>
1000a290:	2400      	movs	r4, #0
1000a292:	4d22      	ldr	r5, [pc, #136]	; (1000a31c <_strtod_r+0xa00>)
1000a294:	2300      	movs	r3, #0
1000a296:	9307      	str	r3, [sp, #28]
1000a298:	4b1f      	ldr	r3, [pc, #124]	; (1000a318 <_strtod_r+0x9fc>)
1000a29a:	930a      	str	r3, [sp, #40]	; 0x28
1000a29c:	e048      	b.n	1000a330 <_strtod_r+0xa14>
1000a29e:	1c20      	adds	r0, r4, #0
1000a2a0:	1c29      	adds	r1, r5, #0
1000a2a2:	2200      	movs	r2, #0
1000a2a4:	4b1c      	ldr	r3, [pc, #112]	; (1000a318 <_strtod_r+0x9fc>)
1000a2a6:	f7fc fc35 	bl	10006b14 <__aeabi_dcmplt>
1000a2aa:	2800      	cmp	r0, #0
1000a2ac:	d108      	bne.n	1000a2c0 <_strtod_r+0x9a4>
1000a2ae:	1c20      	adds	r0, r4, #0
1000a2b0:	1c29      	adds	r1, r5, #0
1000a2b2:	2200      	movs	r2, #0
1000a2b4:	4b1a      	ldr	r3, [pc, #104]	; (1000a320 <_strtod_r+0xa04>)
1000a2b6:	f7fd fcbb 	bl	10007c30 <__aeabi_dmul>
1000a2ba:	9007      	str	r0, [sp, #28]
1000a2bc:	910a      	str	r1, [sp, #40]	; 0x28
1000a2be:	e003      	b.n	1000a2c8 <_strtod_r+0x9ac>
1000a2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a2c2:	9307      	str	r3, [sp, #28]
1000a2c4:	4b16      	ldr	r3, [pc, #88]	; (1000a320 <_strtod_r+0xa04>)
1000a2c6:	930a      	str	r3, [sp, #40]	; 0x28
1000a2c8:	2280      	movs	r2, #128	; 0x80
1000a2ca:	0612      	lsls	r2, r2, #24
1000a2cc:	4694      	mov	ip, r2
1000a2ce:	9b07      	ldr	r3, [sp, #28]
1000a2d0:	931a      	str	r3, [sp, #104]	; 0x68
1000a2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a2d4:	4463      	add	r3, ip
1000a2d6:	931b      	str	r3, [sp, #108]	; 0x6c
1000a2d8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
1000a2da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1000a2dc:	e028      	b.n	1000a330 <_strtod_r+0xa14>
1000a2de:	4b10      	ldr	r3, [pc, #64]	; (1000a320 <_strtod_r+0xa04>)
1000a2e0:	1c20      	adds	r0, r4, #0
1000a2e2:	1c29      	adds	r1, r5, #0
1000a2e4:	2200      	movs	r2, #0
1000a2e6:	f7fd fca3 	bl	10007c30 <__aeabi_dmul>
1000a2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a2ec:	9007      	str	r0, [sp, #28]
1000a2ee:	910a      	str	r1, [sp, #40]	; 0x28
1000a2f0:	2b00      	cmp	r3, #0
1000a2f2:	d117      	bne.n	1000a324 <_strtod_r+0xa08>
1000a2f4:	2380      	movs	r3, #128	; 0x80
1000a2f6:	061b      	lsls	r3, r3, #24
1000a2f8:	18cb      	adds	r3, r1, r3
1000a2fa:	9014      	str	r0, [sp, #80]	; 0x50
1000a2fc:	9315      	str	r3, [sp, #84]	; 0x54
1000a2fe:	e015      	b.n	1000a32c <_strtod_r+0xa10>
1000a300:	fffffc03 	.word	0xfffffc03
1000a304:	7ff00000 	.word	0x7ff00000
1000a308:	fffffbe3 	.word	0xfffffbe3
1000a30c:	000fffff 	.word	0x000fffff
1000a310:	7fefffff 	.word	0x7fefffff
1000a314:	fff00000 	.word	0xfff00000
1000a318:	3ff00000 	.word	0x3ff00000
1000a31c:	bff00000 	.word	0xbff00000
1000a320:	3fe00000 	.word	0x3fe00000
1000a324:	9a07      	ldr	r2, [sp, #28]
1000a326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a328:	9214      	str	r2, [sp, #80]	; 0x50
1000a32a:	9315      	str	r3, [sp, #84]	; 0x54
1000a32c:	9c14      	ldr	r4, [sp, #80]	; 0x50
1000a32e:	9d15      	ldr	r5, [sp, #84]	; 0x54
1000a330:	4b7a      	ldr	r3, [pc, #488]	; (1000a51c <_strtod_r+0xc00>)
1000a332:	403b      	ands	r3, r7
1000a334:	9312      	str	r3, [sp, #72]	; 0x48
1000a336:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a338:	4b79      	ldr	r3, [pc, #484]	; (1000a520 <_strtod_r+0xc04>)
1000a33a:	429a      	cmp	r2, r3
1000a33c:	d12b      	bne.n	1000a396 <_strtod_r+0xa7a>
1000a33e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a342:	9210      	str	r2, [sp, #64]	; 0x40
1000a344:	9311      	str	r3, [sp, #68]	; 0x44
1000a346:	4b77      	ldr	r3, [pc, #476]	; (1000a524 <_strtod_r+0xc08>)
1000a348:	1c30      	adds	r0, r6, #0
1000a34a:	18ff      	adds	r7, r7, r3
1000a34c:	1c39      	adds	r1, r7, #0
1000a34e:	f001 fe1f 	bl	1000bf90 <__ulp>
1000a352:	1c02      	adds	r2, r0, #0
1000a354:	1c0b      	adds	r3, r1, #0
1000a356:	1c20      	adds	r0, r4, #0
1000a358:	1c29      	adds	r1, r5, #0
1000a35a:	f7fd fc69 	bl	10007c30 <__aeabi_dmul>
1000a35e:	1c02      	adds	r2, r0, #0
1000a360:	1c0b      	adds	r3, r1, #0
1000a362:	1c30      	adds	r0, r6, #0
1000a364:	1c39      	adds	r1, r7, #0
1000a366:	f7fd f821 	bl	100073ac <__aeabi_dadd>
1000a36a:	4b6c      	ldr	r3, [pc, #432]	; (1000a51c <_strtod_r+0xc00>)
1000a36c:	4a6e      	ldr	r2, [pc, #440]	; (1000a528 <_strtod_r+0xc0c>)
1000a36e:	1c06      	adds	r6, r0, #0
1000a370:	400b      	ands	r3, r1
1000a372:	4293      	cmp	r3, r2
1000a374:	d90b      	bls.n	1000a38e <_strtod_r+0xa72>
1000a376:	4b6d      	ldr	r3, [pc, #436]	; (1000a52c <_strtod_r+0xc10>)
1000a378:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a37a:	429a      	cmp	r2, r3
1000a37c:	d103      	bne.n	1000a386 <_strtod_r+0xa6a>
1000a37e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000a380:	3301      	adds	r3, #1
1000a382:	d100      	bne.n	1000a386 <_strtod_r+0xa6a>
1000a384:	e52e      	b.n	10009de4 <_strtod_r+0x4c8>
1000a386:	2601      	movs	r6, #1
1000a388:	4f68      	ldr	r7, [pc, #416]	; (1000a52c <_strtod_r+0xc10>)
1000a38a:	4276      	negs	r6, r6
1000a38c:	e078      	b.n	1000a480 <_strtod_r+0xb64>
1000a38e:	23d4      	movs	r3, #212	; 0xd4
1000a390:	049b      	lsls	r3, r3, #18
1000a392:	18cf      	adds	r7, r1, r3
1000a394:	e040      	b.n	1000a418 <_strtod_r+0xafc>
1000a396:	9b06      	ldr	r3, [sp, #24]
1000a398:	2b00      	cmp	r3, #0
1000a39a:	d02b      	beq.n	1000a3f4 <_strtod_r+0xad8>
1000a39c:	23d4      	movs	r3, #212	; 0xd4
1000a39e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a3a0:	04db      	lsls	r3, r3, #19
1000a3a2:	429a      	cmp	r2, r3
1000a3a4:	d826      	bhi.n	1000a3f4 <_strtod_r+0xad8>
1000a3a6:	9807      	ldr	r0, [sp, #28]
1000a3a8:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a3aa:	4a61      	ldr	r2, [pc, #388]	; (1000a530 <_strtod_r+0xc14>)
1000a3ac:	4b61      	ldr	r3, [pc, #388]	; (1000a534 <_strtod_r+0xc18>)
1000a3ae:	f7fc fbbb 	bl	10006b28 <__aeabi_dcmple>
1000a3b2:	2800      	cmp	r0, #0
1000a3b4:	d019      	beq.n	1000a3ea <_strtod_r+0xace>
1000a3b6:	9807      	ldr	r0, [sp, #28]
1000a3b8:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a3ba:	f002 f995 	bl	1000c6e8 <__aeabi_d2uiz>
1000a3be:	2800      	cmp	r0, #0
1000a3c0:	d100      	bne.n	1000a3c4 <_strtod_r+0xaa8>
1000a3c2:	3001      	adds	r0, #1
1000a3c4:	f7fe fa84 	bl	100088d0 <__aeabi_ui2d>
1000a3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a3ca:	9007      	str	r0, [sp, #28]
1000a3cc:	910a      	str	r1, [sp, #40]	; 0x28
1000a3ce:	2b00      	cmp	r3, #0
1000a3d0:	d105      	bne.n	1000a3de <_strtod_r+0xac2>
1000a3d2:	2380      	movs	r3, #128	; 0x80
1000a3d4:	061b      	lsls	r3, r3, #24
1000a3d6:	18cb      	adds	r3, r1, r3
1000a3d8:	9016      	str	r0, [sp, #88]	; 0x58
1000a3da:	9317      	str	r3, [sp, #92]	; 0x5c
1000a3dc:	e003      	b.n	1000a3e6 <_strtod_r+0xaca>
1000a3de:	9a07      	ldr	r2, [sp, #28]
1000a3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a3e2:	9216      	str	r2, [sp, #88]	; 0x58
1000a3e4:	9317      	str	r3, [sp, #92]	; 0x5c
1000a3e6:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000a3e8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000a3ea:	23d6      	movs	r3, #214	; 0xd6
1000a3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a3ee:	04db      	lsls	r3, r3, #19
1000a3f0:	18eb      	adds	r3, r5, r3
1000a3f2:	1a9d      	subs	r5, r3, r2
1000a3f4:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a3f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a3f8:	f001 fdca 	bl	1000bf90 <__ulp>
1000a3fc:	1c02      	adds	r2, r0, #0
1000a3fe:	1c0b      	adds	r3, r1, #0
1000a400:	1c20      	adds	r0, r4, #0
1000a402:	1c29      	adds	r1, r5, #0
1000a404:	f7fd fc14 	bl	10007c30 <__aeabi_dmul>
1000a408:	1c02      	adds	r2, r0, #0
1000a40a:	1c0b      	adds	r3, r1, #0
1000a40c:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a40e:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a410:	f7fc ffcc 	bl	100073ac <__aeabi_dadd>
1000a414:	1c06      	adds	r6, r0, #0
1000a416:	1c0f      	adds	r7, r1, #0
1000a418:	9b06      	ldr	r3, [sp, #24]
1000a41a:	970e      	str	r7, [sp, #56]	; 0x38
1000a41c:	2b00      	cmp	r3, #0
1000a41e:	d12f      	bne.n	1000a480 <_strtod_r+0xb64>
1000a420:	4b3e      	ldr	r3, [pc, #248]	; (1000a51c <_strtod_r+0xc00>)
1000a422:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a424:	403b      	ands	r3, r7
1000a426:	429a      	cmp	r2, r3
1000a428:	d12a      	bne.n	1000a480 <_strtod_r+0xb64>
1000a42a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a42c:	9807      	ldr	r0, [sp, #28]
1000a42e:	f002 fc9d 	bl	1000cd6c <__aeabi_d2iz>
1000a432:	f7fe fa11 	bl	10008858 <__aeabi_i2d>
1000a436:	1c0b      	adds	r3, r1, #0
1000a438:	1c02      	adds	r2, r0, #0
1000a43a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a43c:	9807      	ldr	r0, [sp, #28]
1000a43e:	f7fd fe91 	bl	10008164 <__aeabi_dsub>
1000a442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a444:	1c04      	adds	r4, r0, #0
1000a446:	1c0d      	adds	r5, r1, #0
1000a448:	2b00      	cmp	r3, #0
1000a44a:	d104      	bne.n	1000a456 <_strtod_r+0xb3a>
1000a44c:	2e00      	cmp	r6, #0
1000a44e:	d102      	bne.n	1000a456 <_strtod_r+0xb3a>
1000a450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a452:	031b      	lsls	r3, r3, #12
1000a454:	d00e      	beq.n	1000a474 <_strtod_r+0xb58>
1000a456:	1c20      	adds	r0, r4, #0
1000a458:	1c29      	adds	r1, r5, #0
1000a45a:	4a37      	ldr	r2, [pc, #220]	; (1000a538 <_strtod_r+0xc1c>)
1000a45c:	4b37      	ldr	r3, [pc, #220]	; (1000a53c <_strtod_r+0xc20>)
1000a45e:	f7fc fb59 	bl	10006b14 <__aeabi_dcmplt>
1000a462:	2800      	cmp	r0, #0
1000a464:	d132      	bne.n	1000a4cc <_strtod_r+0xbb0>
1000a466:	1c20      	adds	r0, r4, #0
1000a468:	1c29      	adds	r1, r5, #0
1000a46a:	4a35      	ldr	r2, [pc, #212]	; (1000a540 <_strtod_r+0xc24>)
1000a46c:	4b35      	ldr	r3, [pc, #212]	; (1000a544 <_strtod_r+0xc28>)
1000a46e:	f7fc fb65 	bl	10006b3c <__aeabi_dcmpgt>
1000a472:	e003      	b.n	1000a47c <_strtod_r+0xb60>
1000a474:	4a30      	ldr	r2, [pc, #192]	; (1000a538 <_strtod_r+0xc1c>)
1000a476:	4b34      	ldr	r3, [pc, #208]	; (1000a548 <_strtod_r+0xc2c>)
1000a478:	f7fc fb4c 	bl	10006b14 <__aeabi_dcmplt>
1000a47c:	2800      	cmp	r0, #0
1000a47e:	d125      	bne.n	1000a4cc <_strtod_r+0xbb0>
1000a480:	9803      	ldr	r0, [sp, #12]
1000a482:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a484:	f001 fae5 	bl	1000ba52 <_Bfree>
1000a488:	9803      	ldr	r0, [sp, #12]
1000a48a:	9908      	ldr	r1, [sp, #32]
1000a48c:	f001 fae1 	bl	1000ba52 <_Bfree>
1000a490:	9803      	ldr	r0, [sp, #12]
1000a492:	9905      	ldr	r1, [sp, #20]
1000a494:	f001 fadd 	bl	1000ba52 <_Bfree>
1000a498:	9803      	ldr	r0, [sp, #12]
1000a49a:	9904      	ldr	r1, [sp, #16]
1000a49c:	f001 fad9 	bl	1000ba52 <_Bfree>
1000a4a0:	e55f      	b.n	10009f62 <_strtod_r+0x646>
1000a4a2:	9b06      	ldr	r3, [sp, #24]
1000a4a4:	2b00      	cmp	r3, #0
1000a4a6:	d011      	beq.n	1000a4cc <_strtod_r+0xbb0>
1000a4a8:	4b28      	ldr	r3, [pc, #160]	; (1000a54c <_strtod_r+0xc30>)
1000a4aa:	1c30      	adds	r0, r6, #0
1000a4ac:	9311      	str	r3, [sp, #68]	; 0x44
1000a4ae:	2300      	movs	r3, #0
1000a4b0:	9310      	str	r3, [sp, #64]	; 0x40
1000a4b2:	1c39      	adds	r1, r7, #0
1000a4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a4b8:	f7fd fbba 	bl	10007c30 <__aeabi_dmul>
1000a4bc:	1c06      	adds	r6, r0, #0
1000a4be:	1e0f      	subs	r7, r1, #0
1000a4c0:	d104      	bne.n	1000a4cc <_strtod_r+0xbb0>
1000a4c2:	2800      	cmp	r0, #0
1000a4c4:	d102      	bne.n	1000a4cc <_strtod_r+0xbb0>
1000a4c6:	2322      	movs	r3, #34	; 0x22
1000a4c8:	9a03      	ldr	r2, [sp, #12]
1000a4ca:	6013      	str	r3, [r2, #0]
1000a4cc:	9803      	ldr	r0, [sp, #12]
1000a4ce:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a4d0:	f001 fabf 	bl	1000ba52 <_Bfree>
1000a4d4:	9803      	ldr	r0, [sp, #12]
1000a4d6:	9908      	ldr	r1, [sp, #32]
1000a4d8:	f001 fabb 	bl	1000ba52 <_Bfree>
1000a4dc:	9803      	ldr	r0, [sp, #12]
1000a4de:	9905      	ldr	r1, [sp, #20]
1000a4e0:	f001 fab7 	bl	1000ba52 <_Bfree>
1000a4e4:	9803      	ldr	r0, [sp, #12]
1000a4e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000a4e8:	f001 fab3 	bl	1000ba52 <_Bfree>
1000a4ec:	9803      	ldr	r0, [sp, #12]
1000a4ee:	9904      	ldr	r1, [sp, #16]
1000a4f0:	f001 faaf 	bl	1000ba52 <_Bfree>
1000a4f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000a4f6:	2b00      	cmp	r3, #0
1000a4f8:	d002      	beq.n	1000a500 <_strtod_r+0xbe4>
1000a4fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000a4fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
1000a4fe:	601a      	str	r2, [r3, #0]
1000a500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a502:	2b00      	cmp	r3, #0
1000a504:	d004      	beq.n	1000a510 <_strtod_r+0xbf4>
1000a506:	2380      	movs	r3, #128	; 0x80
1000a508:	061b      	lsls	r3, r3, #24
1000a50a:	1c32      	adds	r2, r6, #0
1000a50c:	18fb      	adds	r3, r7, r3
1000a50e:	e001      	b.n	1000a514 <_strtod_r+0xbf8>
1000a510:	1c32      	adds	r2, r6, #0
1000a512:	1c3b      	adds	r3, r7, #0
1000a514:	1c10      	adds	r0, r2, #0
1000a516:	1c19      	adds	r1, r3, #0
1000a518:	b023      	add	sp, #140	; 0x8c
1000a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a51c:	7ff00000 	.word	0x7ff00000
1000a520:	7fe00000 	.word	0x7fe00000
1000a524:	fcb00000 	.word	0xfcb00000
1000a528:	7c9fffff 	.word	0x7c9fffff
1000a52c:	7fefffff 	.word	0x7fefffff
1000a530:	ffc00000 	.word	0xffc00000
1000a534:	41dfffff 	.word	0x41dfffff
1000a538:	94a03595 	.word	0x94a03595
1000a53c:	3fdfffff 	.word	0x3fdfffff
1000a540:	35afe535 	.word	0x35afe535
1000a544:	3fe00000 	.word	0x3fe00000
1000a548:	3fcfffff 	.word	0x3fcfffff
1000a54c:	39500000 	.word	0x39500000

1000a550 <_strtol_r>:
1000a550:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a552:	1c1e      	adds	r6, r3, #0
1000a554:	4b44      	ldr	r3, [pc, #272]	; (1000a668 <_strtol_r+0x118>)
1000a556:	b087      	sub	sp, #28
1000a558:	681b      	ldr	r3, [r3, #0]
1000a55a:	9005      	str	r0, [sp, #20]
1000a55c:	9302      	str	r3, [sp, #8]
1000a55e:	1c0b      	adds	r3, r1, #0
1000a560:	9103      	str	r1, [sp, #12]
1000a562:	9201      	str	r2, [sp, #4]
1000a564:	781c      	ldrb	r4, [r3, #0]
1000a566:	9a02      	ldr	r2, [sp, #8]
1000a568:	1c5d      	adds	r5, r3, #1
1000a56a:	1912      	adds	r2, r2, r4
1000a56c:	7850      	ldrb	r0, [r2, #1]
1000a56e:	2208      	movs	r2, #8
1000a570:	4010      	ands	r0, r2
1000a572:	d001      	beq.n	1000a578 <_strtol_r+0x28>
1000a574:	1c2b      	adds	r3, r5, #0
1000a576:	e7f5      	b.n	1000a564 <_strtol_r+0x14>
1000a578:	2c2d      	cmp	r4, #45	; 0x2d
1000a57a:	d104      	bne.n	1000a586 <_strtol_r+0x36>
1000a57c:	1c9d      	adds	r5, r3, #2
1000a57e:	785c      	ldrb	r4, [r3, #1]
1000a580:	2301      	movs	r3, #1
1000a582:	9300      	str	r3, [sp, #0]
1000a584:	e004      	b.n	1000a590 <_strtol_r+0x40>
1000a586:	9000      	str	r0, [sp, #0]
1000a588:	2c2b      	cmp	r4, #43	; 0x2b
1000a58a:	d101      	bne.n	1000a590 <_strtol_r+0x40>
1000a58c:	785c      	ldrb	r4, [r3, #1]
1000a58e:	1c9d      	adds	r5, r3, #2
1000a590:	2e00      	cmp	r6, #0
1000a592:	d002      	beq.n	1000a59a <_strtol_r+0x4a>
1000a594:	2e10      	cmp	r6, #16
1000a596:	d10a      	bne.n	1000a5ae <_strtol_r+0x5e>
1000a598:	e060      	b.n	1000a65c <_strtol_r+0x10c>
1000a59a:	2c30      	cmp	r4, #48	; 0x30
1000a59c:	d15c      	bne.n	1000a658 <_strtol_r+0x108>
1000a59e:	2220      	movs	r2, #32
1000a5a0:	782b      	ldrb	r3, [r5, #0]
1000a5a2:	4393      	bics	r3, r2
1000a5a4:	2b58      	cmp	r3, #88	; 0x58
1000a5a6:	d152      	bne.n	1000a64e <_strtol_r+0xfe>
1000a5a8:	2610      	movs	r6, #16
1000a5aa:	786c      	ldrb	r4, [r5, #1]
1000a5ac:	3502      	adds	r5, #2
1000a5ae:	9f00      	ldr	r7, [sp, #0]
1000a5b0:	1c31      	adds	r1, r6, #0
1000a5b2:	1e7b      	subs	r3, r7, #1
1000a5b4:	419f      	sbcs	r7, r3
1000a5b6:	4b2d      	ldr	r3, [pc, #180]	; (1000a66c <_strtol_r+0x11c>)
1000a5b8:	18ff      	adds	r7, r7, r3
1000a5ba:	1c38      	adds	r0, r7, #0
1000a5bc:	f7fc f998 	bl	100068f0 <__aeabi_uidivmod>
1000a5c0:	1c38      	adds	r0, r7, #0
1000a5c2:	9104      	str	r1, [sp, #16]
1000a5c4:	1c31      	adds	r1, r6, #0
1000a5c6:	f7fc f90d 	bl	100067e4 <__aeabi_uidiv>
1000a5ca:	2200      	movs	r2, #0
1000a5cc:	1c07      	adds	r7, r0, #0
1000a5ce:	1c13      	adds	r3, r2, #0
1000a5d0:	9902      	ldr	r1, [sp, #8]
1000a5d2:	1909      	adds	r1, r1, r4
1000a5d4:	7849      	ldrb	r1, [r1, #1]
1000a5d6:	0748      	lsls	r0, r1, #29
1000a5d8:	d501      	bpl.n	1000a5de <_strtol_r+0x8e>
1000a5da:	3c30      	subs	r4, #48	; 0x30
1000a5dc:	e007      	b.n	1000a5ee <_strtol_r+0x9e>
1000a5de:	2003      	movs	r0, #3
1000a5e0:	4008      	ands	r0, r1
1000a5e2:	d017      	beq.n	1000a614 <_strtol_r+0xc4>
1000a5e4:	2137      	movs	r1, #55	; 0x37
1000a5e6:	2801      	cmp	r0, #1
1000a5e8:	d000      	beq.n	1000a5ec <_strtol_r+0x9c>
1000a5ea:	3120      	adds	r1, #32
1000a5ec:	1a64      	subs	r4, r4, r1
1000a5ee:	42b4      	cmp	r4, r6
1000a5f0:	da10      	bge.n	1000a614 <_strtol_r+0xc4>
1000a5f2:	1c51      	adds	r1, r2, #1
1000a5f4:	d00b      	beq.n	1000a60e <_strtol_r+0xbe>
1000a5f6:	42bb      	cmp	r3, r7
1000a5f8:	d807      	bhi.n	1000a60a <_strtol_r+0xba>
1000a5fa:	d102      	bne.n	1000a602 <_strtol_r+0xb2>
1000a5fc:	9a04      	ldr	r2, [sp, #16]
1000a5fe:	4294      	cmp	r4, r2
1000a600:	dc03      	bgt.n	1000a60a <_strtol_r+0xba>
1000a602:	4373      	muls	r3, r6
1000a604:	2201      	movs	r2, #1
1000a606:	18e3      	adds	r3, r4, r3
1000a608:	e001      	b.n	1000a60e <_strtol_r+0xbe>
1000a60a:	2201      	movs	r2, #1
1000a60c:	4252      	negs	r2, r2
1000a60e:	782c      	ldrb	r4, [r5, #0]
1000a610:	3501      	adds	r5, #1
1000a612:	e7dd      	b.n	1000a5d0 <_strtol_r+0x80>
1000a614:	1c18      	adds	r0, r3, #0
1000a616:	1c51      	adds	r1, r2, #1
1000a618:	d10b      	bne.n	1000a632 <_strtol_r+0xe2>
1000a61a:	9800      	ldr	r0, [sp, #0]
1000a61c:	9a05      	ldr	r2, [sp, #20]
1000a61e:	1e43      	subs	r3, r0, #1
1000a620:	4198      	sbcs	r0, r3
1000a622:	4b12      	ldr	r3, [pc, #72]	; (1000a66c <_strtol_r+0x11c>)
1000a624:	18c0      	adds	r0, r0, r3
1000a626:	2322      	movs	r3, #34	; 0x22
1000a628:	6013      	str	r3, [r2, #0]
1000a62a:	9b01      	ldr	r3, [sp, #4]
1000a62c:	2b00      	cmp	r3, #0
1000a62e:	d10a      	bne.n	1000a646 <_strtol_r+0xf6>
1000a630:	e017      	b.n	1000a662 <_strtol_r+0x112>
1000a632:	9900      	ldr	r1, [sp, #0]
1000a634:	2900      	cmp	r1, #0
1000a636:	d000      	beq.n	1000a63a <_strtol_r+0xea>
1000a638:	4258      	negs	r0, r3
1000a63a:	9b01      	ldr	r3, [sp, #4]
1000a63c:	2b00      	cmp	r3, #0
1000a63e:	d010      	beq.n	1000a662 <_strtol_r+0x112>
1000a640:	9b03      	ldr	r3, [sp, #12]
1000a642:	2a00      	cmp	r2, #0
1000a644:	d000      	beq.n	1000a648 <_strtol_r+0xf8>
1000a646:	1e6b      	subs	r3, r5, #1
1000a648:	9a01      	ldr	r2, [sp, #4]
1000a64a:	6013      	str	r3, [r2, #0]
1000a64c:	e009      	b.n	1000a662 <_strtol_r+0x112>
1000a64e:	2430      	movs	r4, #48	; 0x30
1000a650:	2e00      	cmp	r6, #0
1000a652:	d1ac      	bne.n	1000a5ae <_strtol_r+0x5e>
1000a654:	2608      	movs	r6, #8
1000a656:	e7aa      	b.n	1000a5ae <_strtol_r+0x5e>
1000a658:	260a      	movs	r6, #10
1000a65a:	e7a8      	b.n	1000a5ae <_strtol_r+0x5e>
1000a65c:	2c30      	cmp	r4, #48	; 0x30
1000a65e:	d1a6      	bne.n	1000a5ae <_strtol_r+0x5e>
1000a660:	e79d      	b.n	1000a59e <_strtol_r+0x4e>
1000a662:	b007      	add	sp, #28
1000a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a666:	46c0      	nop			; (mov r8, r8)
1000a668:	20000714 	.word	0x20000714
1000a66c:	7fffffff 	.word	0x7fffffff

1000a670 <quorem>:
1000a670:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a672:	6903      	ldr	r3, [r0, #16]
1000a674:	690c      	ldr	r4, [r1, #16]
1000a676:	b089      	sub	sp, #36	; 0x24
1000a678:	2600      	movs	r6, #0
1000a67a:	42a3      	cmp	r3, r4
1000a67c:	db7c      	blt.n	1000a778 <quorem+0x108>
1000a67e:	1c0b      	adds	r3, r1, #0
1000a680:	3c01      	subs	r4, #1
1000a682:	3314      	adds	r3, #20
1000a684:	00a5      	lsls	r5, r4, #2
1000a686:	9303      	str	r3, [sp, #12]
1000a688:	195b      	adds	r3, r3, r5
1000a68a:	9304      	str	r3, [sp, #16]
1000a68c:	1c03      	adds	r3, r0, #0
1000a68e:	3314      	adds	r3, #20
1000a690:	9301      	str	r3, [sp, #4]
1000a692:	195d      	adds	r5, r3, r5
1000a694:	9b04      	ldr	r3, [sp, #16]
1000a696:	9107      	str	r1, [sp, #28]
1000a698:	681b      	ldr	r3, [r3, #0]
1000a69a:	9002      	str	r0, [sp, #8]
1000a69c:	1c59      	adds	r1, r3, #1
1000a69e:	6828      	ldr	r0, [r5, #0]
1000a6a0:	9305      	str	r3, [sp, #20]
1000a6a2:	f7fc f89f 	bl	100067e4 <__aeabi_uidiv>
1000a6a6:	1e07      	subs	r7, r0, #0
1000a6a8:	42b7      	cmp	r7, r6
1000a6aa:	d035      	beq.n	1000a718 <quorem+0xa8>
1000a6ac:	9b03      	ldr	r3, [sp, #12]
1000a6ae:	9801      	ldr	r0, [sp, #4]
1000a6b0:	469c      	mov	ip, r3
1000a6b2:	9605      	str	r6, [sp, #20]
1000a6b4:	4663      	mov	r3, ip
1000a6b6:	cb04      	ldmia	r3!, {r2}
1000a6b8:	b291      	uxth	r1, r2
1000a6ba:	4379      	muls	r1, r7
1000a6bc:	0c12      	lsrs	r2, r2, #16
1000a6be:	437a      	muls	r2, r7
1000a6c0:	1871      	adds	r1, r6, r1
1000a6c2:	0c0e      	lsrs	r6, r1, #16
1000a6c4:	469c      	mov	ip, r3
1000a6c6:	18b3      	adds	r3, r6, r2
1000a6c8:	9306      	str	r3, [sp, #24]
1000a6ca:	8802      	ldrh	r2, [r0, #0]
1000a6cc:	0c1e      	lsrs	r6, r3, #16
1000a6ce:	9b05      	ldr	r3, [sp, #20]
1000a6d0:	b289      	uxth	r1, r1
1000a6d2:	18d2      	adds	r2, r2, r3
1000a6d4:	6803      	ldr	r3, [r0, #0]
1000a6d6:	1a52      	subs	r2, r2, r1
1000a6d8:	0c19      	lsrs	r1, r3, #16
1000a6da:	466b      	mov	r3, sp
1000a6dc:	8b1b      	ldrh	r3, [r3, #24]
1000a6de:	1acb      	subs	r3, r1, r3
1000a6e0:	1411      	asrs	r1, r2, #16
1000a6e2:	185b      	adds	r3, r3, r1
1000a6e4:	1419      	asrs	r1, r3, #16
1000a6e6:	b292      	uxth	r2, r2
1000a6e8:	041b      	lsls	r3, r3, #16
1000a6ea:	431a      	orrs	r2, r3
1000a6ec:	9b04      	ldr	r3, [sp, #16]
1000a6ee:	9105      	str	r1, [sp, #20]
1000a6f0:	c004      	stmia	r0!, {r2}
1000a6f2:	4563      	cmp	r3, ip
1000a6f4:	d2de      	bcs.n	1000a6b4 <quorem+0x44>
1000a6f6:	682b      	ldr	r3, [r5, #0]
1000a6f8:	2b00      	cmp	r3, #0
1000a6fa:	d10d      	bne.n	1000a718 <quorem+0xa8>
1000a6fc:	1c23      	adds	r3, r4, #0
1000a6fe:	9a01      	ldr	r2, [sp, #4]
1000a700:	3d04      	subs	r5, #4
1000a702:	4295      	cmp	r5, r2
1000a704:	d803      	bhi.n	1000a70e <quorem+0x9e>
1000a706:	9a02      	ldr	r2, [sp, #8]
1000a708:	1c1c      	adds	r4, r3, #0
1000a70a:	6113      	str	r3, [r2, #16]
1000a70c:	e004      	b.n	1000a718 <quorem+0xa8>
1000a70e:	682a      	ldr	r2, [r5, #0]
1000a710:	2a00      	cmp	r2, #0
1000a712:	d1f8      	bne.n	1000a706 <quorem+0x96>
1000a714:	3b01      	subs	r3, #1
1000a716:	e7f2      	b.n	1000a6fe <quorem+0x8e>
1000a718:	9802      	ldr	r0, [sp, #8]
1000a71a:	9907      	ldr	r1, [sp, #28]
1000a71c:	f001 fbb2 	bl	1000be84 <__mcmp>
1000a720:	2800      	cmp	r0, #0
1000a722:	db28      	blt.n	1000a776 <quorem+0x106>
1000a724:	2000      	movs	r0, #0
1000a726:	9901      	ldr	r1, [sp, #4]
1000a728:	9a03      	ldr	r2, [sp, #12]
1000a72a:	3701      	adds	r7, #1
1000a72c:	ca20      	ldmia	r2!, {r5}
1000a72e:	880b      	ldrh	r3, [r1, #0]
1000a730:	1818      	adds	r0, r3, r0
1000a732:	b2ab      	uxth	r3, r5
1000a734:	1ac3      	subs	r3, r0, r3
1000a736:	6808      	ldr	r0, [r1, #0]
1000a738:	0c2d      	lsrs	r5, r5, #16
1000a73a:	0c00      	lsrs	r0, r0, #16
1000a73c:	1b45      	subs	r5, r0, r5
1000a73e:	141e      	asrs	r6, r3, #16
1000a740:	19ad      	adds	r5, r5, r6
1000a742:	1428      	asrs	r0, r5, #16
1000a744:	b29b      	uxth	r3, r3
1000a746:	042d      	lsls	r5, r5, #16
1000a748:	432b      	orrs	r3, r5
1000a74a:	c108      	stmia	r1!, {r3}
1000a74c:	9b04      	ldr	r3, [sp, #16]
1000a74e:	4293      	cmp	r3, r2
1000a750:	d2ec      	bcs.n	1000a72c <quorem+0xbc>
1000a752:	9a01      	ldr	r2, [sp, #4]
1000a754:	00a3      	lsls	r3, r4, #2
1000a756:	18d3      	adds	r3, r2, r3
1000a758:	681a      	ldr	r2, [r3, #0]
1000a75a:	2a00      	cmp	r2, #0
1000a75c:	d10b      	bne.n	1000a776 <quorem+0x106>
1000a75e:	9a01      	ldr	r2, [sp, #4]
1000a760:	3b04      	subs	r3, #4
1000a762:	4293      	cmp	r3, r2
1000a764:	d802      	bhi.n	1000a76c <quorem+0xfc>
1000a766:	9b02      	ldr	r3, [sp, #8]
1000a768:	611c      	str	r4, [r3, #16]
1000a76a:	e004      	b.n	1000a776 <quorem+0x106>
1000a76c:	681a      	ldr	r2, [r3, #0]
1000a76e:	2a00      	cmp	r2, #0
1000a770:	d1f9      	bne.n	1000a766 <quorem+0xf6>
1000a772:	3c01      	subs	r4, #1
1000a774:	e7f3      	b.n	1000a75e <quorem+0xee>
1000a776:	1c3e      	adds	r6, r7, #0
1000a778:	1c30      	adds	r0, r6, #0
1000a77a:	b009      	add	sp, #36	; 0x24
1000a77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1000a780 <_dtoa_r>:
1000a780:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a782:	1c16      	adds	r6, r2, #0
1000a784:	1c1f      	adds	r7, r3, #0
1000a786:	6a44      	ldr	r4, [r0, #36]	; 0x24
1000a788:	b09b      	sub	sp, #108	; 0x6c
1000a78a:	9008      	str	r0, [sp, #32]
1000a78c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
1000a78e:	9606      	str	r6, [sp, #24]
1000a790:	9707      	str	r7, [sp, #28]
1000a792:	2c00      	cmp	r4, #0
1000a794:	d108      	bne.n	1000a7a8 <_dtoa_r+0x28>
1000a796:	2010      	movs	r0, #16
1000a798:	f001 f90e 	bl	1000b9b8 <malloc>
1000a79c:	9b08      	ldr	r3, [sp, #32]
1000a79e:	6258      	str	r0, [r3, #36]	; 0x24
1000a7a0:	6044      	str	r4, [r0, #4]
1000a7a2:	6084      	str	r4, [r0, #8]
1000a7a4:	6004      	str	r4, [r0, #0]
1000a7a6:	60c4      	str	r4, [r0, #12]
1000a7a8:	9b08      	ldr	r3, [sp, #32]
1000a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7ac:	6819      	ldr	r1, [r3, #0]
1000a7ae:	2900      	cmp	r1, #0
1000a7b0:	d00b      	beq.n	1000a7ca <_dtoa_r+0x4a>
1000a7b2:	685a      	ldr	r2, [r3, #4]
1000a7b4:	2301      	movs	r3, #1
1000a7b6:	4093      	lsls	r3, r2
1000a7b8:	604a      	str	r2, [r1, #4]
1000a7ba:	608b      	str	r3, [r1, #8]
1000a7bc:	9808      	ldr	r0, [sp, #32]
1000a7be:	f001 f948 	bl	1000ba52 <_Bfree>
1000a7c2:	2200      	movs	r2, #0
1000a7c4:	9b08      	ldr	r3, [sp, #32]
1000a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a7c8:	601a      	str	r2, [r3, #0]
1000a7ca:	9b07      	ldr	r3, [sp, #28]
1000a7cc:	2b00      	cmp	r3, #0
1000a7ce:	da05      	bge.n	1000a7dc <_dtoa_r+0x5c>
1000a7d0:	2301      	movs	r3, #1
1000a7d2:	602b      	str	r3, [r5, #0]
1000a7d4:	007b      	lsls	r3, r7, #1
1000a7d6:	085b      	lsrs	r3, r3, #1
1000a7d8:	9307      	str	r3, [sp, #28]
1000a7da:	e001      	b.n	1000a7e0 <_dtoa_r+0x60>
1000a7dc:	2300      	movs	r3, #0
1000a7de:	602b      	str	r3, [r5, #0]
1000a7e0:	9c07      	ldr	r4, [sp, #28]
1000a7e2:	4bc6      	ldr	r3, [pc, #792]	; (1000aafc <_dtoa_r+0x37c>)
1000a7e4:	1c22      	adds	r2, r4, #0
1000a7e6:	9317      	str	r3, [sp, #92]	; 0x5c
1000a7e8:	401a      	ands	r2, r3
1000a7ea:	429a      	cmp	r2, r3
1000a7ec:	d119      	bne.n	1000a822 <_dtoa_r+0xa2>
1000a7ee:	4bc4      	ldr	r3, [pc, #784]	; (1000ab00 <_dtoa_r+0x380>)
1000a7f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000a7f2:	6013      	str	r3, [r2, #0]
1000a7f4:	9a06      	ldr	r2, [sp, #24]
1000a7f6:	4bc3      	ldr	r3, [pc, #780]	; (1000ab04 <_dtoa_r+0x384>)
1000a7f8:	2a00      	cmp	r2, #0
1000a7fa:	d102      	bne.n	1000a802 <_dtoa_r+0x82>
1000a7fc:	0324      	lsls	r4, r4, #12
1000a7fe:	d100      	bne.n	1000a802 <_dtoa_r+0x82>
1000a800:	4bc1      	ldr	r3, [pc, #772]	; (1000ab08 <_dtoa_r+0x388>)
1000a802:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000a804:	1c18      	adds	r0, r3, #0
1000a806:	2a00      	cmp	r2, #0
1000a808:	d101      	bne.n	1000a80e <_dtoa_r+0x8e>
1000a80a:	f000 fdb6 	bl	1000b37a <_dtoa_r+0xbfa>
1000a80e:	78d9      	ldrb	r1, [r3, #3]
1000a810:	1cda      	adds	r2, r3, #3
1000a812:	2900      	cmp	r1, #0
1000a814:	d000      	beq.n	1000a818 <_dtoa_r+0x98>
1000a816:	3205      	adds	r2, #5
1000a818:	9924      	ldr	r1, [sp, #144]	; 0x90
1000a81a:	1c18      	adds	r0, r3, #0
1000a81c:	600a      	str	r2, [r1, #0]
1000a81e:	f000 fdac 	bl	1000b37a <_dtoa_r+0xbfa>
1000a822:	9e06      	ldr	r6, [sp, #24]
1000a824:	9f07      	ldr	r7, [sp, #28]
1000a826:	2200      	movs	r2, #0
1000a828:	1c30      	adds	r0, r6, #0
1000a82a:	1c39      	adds	r1, r7, #0
1000a82c:	2300      	movs	r3, #0
1000a82e:	f7fc f96b 	bl	10006b08 <__aeabi_dcmpeq>
1000a832:	1e05      	subs	r5, r0, #0
1000a834:	d00e      	beq.n	1000a854 <_dtoa_r+0xd4>
1000a836:	2301      	movs	r3, #1
1000a838:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000a83a:	6013      	str	r3, [r2, #0]
1000a83c:	4bb3      	ldr	r3, [pc, #716]	; (1000ab0c <_dtoa_r+0x38c>)
1000a83e:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000a840:	1c18      	adds	r0, r3, #0
1000a842:	2a00      	cmp	r2, #0
1000a844:	d101      	bne.n	1000a84a <_dtoa_r+0xca>
1000a846:	f000 fd98 	bl	1000b37a <_dtoa_r+0xbfa>
1000a84a:	4ab1      	ldr	r2, [pc, #708]	; (1000ab10 <_dtoa_r+0x390>)
1000a84c:	9924      	ldr	r1, [sp, #144]	; 0x90
1000a84e:	600a      	str	r2, [r1, #0]
1000a850:	f000 fd93 	bl	1000b37a <_dtoa_r+0xbfa>
1000a854:	ab19      	add	r3, sp, #100	; 0x64
1000a856:	9300      	str	r3, [sp, #0]
1000a858:	ab18      	add	r3, sp, #96	; 0x60
1000a85a:	9301      	str	r3, [sp, #4]
1000a85c:	9808      	ldr	r0, [sp, #32]
1000a85e:	1c32      	adds	r2, r6, #0
1000a860:	1c3b      	adds	r3, r7, #0
1000a862:	f001 fc0b 	bl	1000c07c <__d2b>
1000a866:	0061      	lsls	r1, r4, #1
1000a868:	900a      	str	r0, [sp, #40]	; 0x28
1000a86a:	0d49      	lsrs	r1, r1, #21
1000a86c:	d009      	beq.n	1000a882 <_dtoa_r+0x102>
1000a86e:	0338      	lsls	r0, r7, #12
1000a870:	4ca8      	ldr	r4, [pc, #672]	; (1000ab14 <_dtoa_r+0x394>)
1000a872:	0b00      	lsrs	r0, r0, #12
1000a874:	4304      	orrs	r4, r0
1000a876:	48a8      	ldr	r0, [pc, #672]	; (1000ab18 <_dtoa_r+0x398>)
1000a878:	1c32      	adds	r2, r6, #0
1000a87a:	1c23      	adds	r3, r4, #0
1000a87c:	180e      	adds	r6, r1, r0
1000a87e:	9516      	str	r5, [sp, #88]	; 0x58
1000a880:	e01c      	b.n	1000a8bc <_dtoa_r+0x13c>
1000a882:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a884:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a886:	189e      	adds	r6, r3, r2
1000a888:	4ba4      	ldr	r3, [pc, #656]	; (1000ab1c <_dtoa_r+0x39c>)
1000a88a:	429e      	cmp	r6, r3
1000a88c:	db09      	blt.n	1000a8a2 <_dtoa_r+0x122>
1000a88e:	4ba4      	ldr	r3, [pc, #656]	; (1000ab20 <_dtoa_r+0x3a0>)
1000a890:	18f0      	adds	r0, r6, r3
1000a892:	9b06      	ldr	r3, [sp, #24]
1000a894:	40c3      	lsrs	r3, r0
1000a896:	1c18      	adds	r0, r3, #0
1000a898:	4ba2      	ldr	r3, [pc, #648]	; (1000ab24 <_dtoa_r+0x3a4>)
1000a89a:	1b9b      	subs	r3, r3, r6
1000a89c:	409c      	lsls	r4, r3
1000a89e:	4320      	orrs	r0, r4
1000a8a0:	e004      	b.n	1000a8ac <_dtoa_r+0x12c>
1000a8a2:	48a1      	ldr	r0, [pc, #644]	; (1000ab28 <_dtoa_r+0x3a8>)
1000a8a4:	9b06      	ldr	r3, [sp, #24]
1000a8a6:	1b80      	subs	r0, r0, r6
1000a8a8:	4083      	lsls	r3, r0
1000a8aa:	1c18      	adds	r0, r3, #0
1000a8ac:	f7fe f810 	bl	100088d0 <__aeabi_ui2d>
1000a8b0:	4c9e      	ldr	r4, [pc, #632]	; (1000ab2c <_dtoa_r+0x3ac>)
1000a8b2:	1c02      	adds	r2, r0, #0
1000a8b4:	190b      	adds	r3, r1, r4
1000a8b6:	2101      	movs	r1, #1
1000a8b8:	3e01      	subs	r6, #1
1000a8ba:	9116      	str	r1, [sp, #88]	; 0x58
1000a8bc:	1c10      	adds	r0, r2, #0
1000a8be:	1c19      	adds	r1, r3, #0
1000a8c0:	2200      	movs	r2, #0
1000a8c2:	4b9b      	ldr	r3, [pc, #620]	; (1000ab30 <_dtoa_r+0x3b0>)
1000a8c4:	f7fd fc4e 	bl	10008164 <__aeabi_dsub>
1000a8c8:	4a9a      	ldr	r2, [pc, #616]	; (1000ab34 <_dtoa_r+0x3b4>)
1000a8ca:	4b9b      	ldr	r3, [pc, #620]	; (1000ab38 <_dtoa_r+0x3b8>)
1000a8cc:	f7fd f9b0 	bl	10007c30 <__aeabi_dmul>
1000a8d0:	4a9a      	ldr	r2, [pc, #616]	; (1000ab3c <_dtoa_r+0x3bc>)
1000a8d2:	4b9b      	ldr	r3, [pc, #620]	; (1000ab40 <_dtoa_r+0x3c0>)
1000a8d4:	f7fc fd6a 	bl	100073ac <__aeabi_dadd>
1000a8d8:	1c04      	adds	r4, r0, #0
1000a8da:	1c30      	adds	r0, r6, #0
1000a8dc:	1c0d      	adds	r5, r1, #0
1000a8de:	f7fd ffbb 	bl	10008858 <__aeabi_i2d>
1000a8e2:	4a98      	ldr	r2, [pc, #608]	; (1000ab44 <_dtoa_r+0x3c4>)
1000a8e4:	4b98      	ldr	r3, [pc, #608]	; (1000ab48 <_dtoa_r+0x3c8>)
1000a8e6:	f7fd f9a3 	bl	10007c30 <__aeabi_dmul>
1000a8ea:	1c02      	adds	r2, r0, #0
1000a8ec:	1c0b      	adds	r3, r1, #0
1000a8ee:	1c20      	adds	r0, r4, #0
1000a8f0:	1c29      	adds	r1, r5, #0
1000a8f2:	f7fc fd5b 	bl	100073ac <__aeabi_dadd>
1000a8f6:	1c04      	adds	r4, r0, #0
1000a8f8:	1c0d      	adds	r5, r1, #0
1000a8fa:	f002 fa37 	bl	1000cd6c <__aeabi_d2iz>
1000a8fe:	1c29      	adds	r1, r5, #0
1000a900:	9003      	str	r0, [sp, #12]
1000a902:	2200      	movs	r2, #0
1000a904:	1c20      	adds	r0, r4, #0
1000a906:	2300      	movs	r3, #0
1000a908:	f7fc f904 	bl	10006b14 <__aeabi_dcmplt>
1000a90c:	2800      	cmp	r0, #0
1000a90e:	d00d      	beq.n	1000a92c <_dtoa_r+0x1ac>
1000a910:	9803      	ldr	r0, [sp, #12]
1000a912:	f7fd ffa1 	bl	10008858 <__aeabi_i2d>
1000a916:	1c02      	adds	r2, r0, #0
1000a918:	1c0b      	adds	r3, r1, #0
1000a91a:	1c20      	adds	r0, r4, #0
1000a91c:	1c29      	adds	r1, r5, #0
1000a91e:	f7fc f8f3 	bl	10006b08 <__aeabi_dcmpeq>
1000a922:	4243      	negs	r3, r0
1000a924:	4143      	adcs	r3, r0
1000a926:	9a03      	ldr	r2, [sp, #12]
1000a928:	1ad3      	subs	r3, r2, r3
1000a92a:	9303      	str	r3, [sp, #12]
1000a92c:	2301      	movs	r3, #1
1000a92e:	9313      	str	r3, [sp, #76]	; 0x4c
1000a930:	9b03      	ldr	r3, [sp, #12]
1000a932:	2b16      	cmp	r3, #22
1000a934:	d811      	bhi.n	1000a95a <_dtoa_r+0x1da>
1000a936:	4a85      	ldr	r2, [pc, #532]	; (1000ab4c <_dtoa_r+0x3cc>)
1000a938:	00db      	lsls	r3, r3, #3
1000a93a:	18d3      	adds	r3, r2, r3
1000a93c:	6818      	ldr	r0, [r3, #0]
1000a93e:	6859      	ldr	r1, [r3, #4]
1000a940:	9a06      	ldr	r2, [sp, #24]
1000a942:	9b07      	ldr	r3, [sp, #28]
1000a944:	f7fc f8fa 	bl	10006b3c <__aeabi_dcmpgt>
1000a948:	2800      	cmp	r0, #0
1000a94a:	d005      	beq.n	1000a958 <_dtoa_r+0x1d8>
1000a94c:	9b03      	ldr	r3, [sp, #12]
1000a94e:	3b01      	subs	r3, #1
1000a950:	9303      	str	r3, [sp, #12]
1000a952:	2300      	movs	r3, #0
1000a954:	9313      	str	r3, [sp, #76]	; 0x4c
1000a956:	e000      	b.n	1000a95a <_dtoa_r+0x1da>
1000a958:	9013      	str	r0, [sp, #76]	; 0x4c
1000a95a:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a95c:	1b9e      	subs	r6, r3, r6
1000a95e:	2300      	movs	r3, #0
1000a960:	930d      	str	r3, [sp, #52]	; 0x34
1000a962:	3e01      	subs	r6, #1
1000a964:	960e      	str	r6, [sp, #56]	; 0x38
1000a966:	d504      	bpl.n	1000a972 <_dtoa_r+0x1f2>
1000a968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a96a:	425b      	negs	r3, r3
1000a96c:	930d      	str	r3, [sp, #52]	; 0x34
1000a96e:	2300      	movs	r3, #0
1000a970:	930e      	str	r3, [sp, #56]	; 0x38
1000a972:	9b03      	ldr	r3, [sp, #12]
1000a974:	2b00      	cmp	r3, #0
1000a976:	db08      	blt.n	1000a98a <_dtoa_r+0x20a>
1000a978:	9a03      	ldr	r2, [sp, #12]
1000a97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a97c:	4694      	mov	ip, r2
1000a97e:	4463      	add	r3, ip
1000a980:	930e      	str	r3, [sp, #56]	; 0x38
1000a982:	2300      	movs	r3, #0
1000a984:	9212      	str	r2, [sp, #72]	; 0x48
1000a986:	930f      	str	r3, [sp, #60]	; 0x3c
1000a988:	e007      	b.n	1000a99a <_dtoa_r+0x21a>
1000a98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a98c:	9a03      	ldr	r2, [sp, #12]
1000a98e:	1a9b      	subs	r3, r3, r2
1000a990:	930d      	str	r3, [sp, #52]	; 0x34
1000a992:	4253      	negs	r3, r2
1000a994:	930f      	str	r3, [sp, #60]	; 0x3c
1000a996:	2300      	movs	r3, #0
1000a998:	9312      	str	r3, [sp, #72]	; 0x48
1000a99a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000a99c:	2501      	movs	r5, #1
1000a99e:	2b09      	cmp	r3, #9
1000a9a0:	d827      	bhi.n	1000a9f2 <_dtoa_r+0x272>
1000a9a2:	2b05      	cmp	r3, #5
1000a9a4:	dd02      	ble.n	1000a9ac <_dtoa_r+0x22c>
1000a9a6:	2500      	movs	r5, #0
1000a9a8:	3b04      	subs	r3, #4
1000a9aa:	9320      	str	r3, [sp, #128]	; 0x80
1000a9ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000a9ae:	1e98      	subs	r0, r3, #2
1000a9b0:	2803      	cmp	r0, #3
1000a9b2:	d823      	bhi.n	1000a9fc <_dtoa_r+0x27c>
1000a9b4:	f001 fe8e 	bl	1000c6d4 <__gnu_thumb1_case_uqi>
1000a9b8:	10040e02 	.word	0x10040e02
1000a9bc:	2300      	movs	r3, #0
1000a9be:	e000      	b.n	1000a9c2 <_dtoa_r+0x242>
1000a9c0:	2301      	movs	r3, #1
1000a9c2:	9310      	str	r3, [sp, #64]	; 0x40
1000a9c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000a9c6:	2b00      	cmp	r3, #0
1000a9c8:	dc21      	bgt.n	1000aa0e <_dtoa_r+0x28e>
1000a9ca:	2301      	movs	r3, #1
1000a9cc:	930b      	str	r3, [sp, #44]	; 0x2c
1000a9ce:	9309      	str	r3, [sp, #36]	; 0x24
1000a9d0:	1c1a      	adds	r2, r3, #0
1000a9d2:	e01a      	b.n	1000aa0a <_dtoa_r+0x28a>
1000a9d4:	2300      	movs	r3, #0
1000a9d6:	e000      	b.n	1000a9da <_dtoa_r+0x25a>
1000a9d8:	2301      	movs	r3, #1
1000a9da:	9a03      	ldr	r2, [sp, #12]
1000a9dc:	9310      	str	r3, [sp, #64]	; 0x40
1000a9de:	4694      	mov	ip, r2
1000a9e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000a9e2:	4463      	add	r3, ip
1000a9e4:	930b      	str	r3, [sp, #44]	; 0x2c
1000a9e6:	3301      	adds	r3, #1
1000a9e8:	9309      	str	r3, [sp, #36]	; 0x24
1000a9ea:	2b00      	cmp	r3, #0
1000a9ec:	dc12      	bgt.n	1000aa14 <_dtoa_r+0x294>
1000a9ee:	2301      	movs	r3, #1
1000a9f0:	e010      	b.n	1000aa14 <_dtoa_r+0x294>
1000a9f2:	2300      	movs	r3, #0
1000a9f4:	9510      	str	r5, [sp, #64]	; 0x40
1000a9f6:	9320      	str	r3, [sp, #128]	; 0x80
1000a9f8:	3b01      	subs	r3, #1
1000a9fa:	e002      	b.n	1000aa02 <_dtoa_r+0x282>
1000a9fc:	2301      	movs	r3, #1
1000a9fe:	9310      	str	r3, [sp, #64]	; 0x40
1000aa00:	3b02      	subs	r3, #2
1000aa02:	2200      	movs	r2, #0
1000aa04:	930b      	str	r3, [sp, #44]	; 0x2c
1000aa06:	9309      	str	r3, [sp, #36]	; 0x24
1000aa08:	3313      	adds	r3, #19
1000aa0a:	9221      	str	r2, [sp, #132]	; 0x84
1000aa0c:	e002      	b.n	1000aa14 <_dtoa_r+0x294>
1000aa0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000aa10:	930b      	str	r3, [sp, #44]	; 0x2c
1000aa12:	9309      	str	r3, [sp, #36]	; 0x24
1000aa14:	9a08      	ldr	r2, [sp, #32]
1000aa16:	6a54      	ldr	r4, [r2, #36]	; 0x24
1000aa18:	2200      	movs	r2, #0
1000aa1a:	6062      	str	r2, [r4, #4]
1000aa1c:	3204      	adds	r2, #4
1000aa1e:	1c11      	adds	r1, r2, #0
1000aa20:	3114      	adds	r1, #20
1000aa22:	4299      	cmp	r1, r3
1000aa24:	d804      	bhi.n	1000aa30 <_dtoa_r+0x2b0>
1000aa26:	6861      	ldr	r1, [r4, #4]
1000aa28:	0052      	lsls	r2, r2, #1
1000aa2a:	3101      	adds	r1, #1
1000aa2c:	6061      	str	r1, [r4, #4]
1000aa2e:	e7f6      	b.n	1000aa1e <_dtoa_r+0x29e>
1000aa30:	9808      	ldr	r0, [sp, #32]
1000aa32:	6861      	ldr	r1, [r4, #4]
1000aa34:	f000 ffd5 	bl	1000b9e2 <_Balloc>
1000aa38:	9b08      	ldr	r3, [sp, #32]
1000aa3a:	6020      	str	r0, [r4, #0]
1000aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa3e:	681b      	ldr	r3, [r3, #0]
1000aa40:	930c      	str	r3, [sp, #48]	; 0x30
1000aa42:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000aa44:	2b0e      	cmp	r3, #14
1000aa46:	d900      	bls.n	1000aa4a <_dtoa_r+0x2ca>
1000aa48:	e188      	b.n	1000ad5c <_dtoa_r+0x5dc>
1000aa4a:	2d00      	cmp	r5, #0
1000aa4c:	d100      	bne.n	1000aa50 <_dtoa_r+0x2d0>
1000aa4e:	e185      	b.n	1000ad5c <_dtoa_r+0x5dc>
1000aa50:	9b06      	ldr	r3, [sp, #24]
1000aa52:	9c07      	ldr	r4, [sp, #28]
1000aa54:	9314      	str	r3, [sp, #80]	; 0x50
1000aa56:	9415      	str	r4, [sp, #84]	; 0x54
1000aa58:	9b03      	ldr	r3, [sp, #12]
1000aa5a:	2b00      	cmp	r3, #0
1000aa5c:	dd30      	ble.n	1000aac0 <_dtoa_r+0x340>
1000aa5e:	220f      	movs	r2, #15
1000aa60:	493a      	ldr	r1, [pc, #232]	; (1000ab4c <_dtoa_r+0x3cc>)
1000aa62:	4013      	ands	r3, r2
1000aa64:	00db      	lsls	r3, r3, #3
1000aa66:	18cb      	adds	r3, r1, r3
1000aa68:	685c      	ldr	r4, [r3, #4]
1000aa6a:	681b      	ldr	r3, [r3, #0]
1000aa6c:	9304      	str	r3, [sp, #16]
1000aa6e:	9405      	str	r4, [sp, #20]
1000aa70:	9b03      	ldr	r3, [sp, #12]
1000aa72:	2702      	movs	r7, #2
1000aa74:	111d      	asrs	r5, r3, #4
1000aa76:	06eb      	lsls	r3, r5, #27
1000aa78:	d50a      	bpl.n	1000aa90 <_dtoa_r+0x310>
1000aa7a:	9814      	ldr	r0, [sp, #80]	; 0x50
1000aa7c:	9915      	ldr	r1, [sp, #84]	; 0x54
1000aa7e:	4b34      	ldr	r3, [pc, #208]	; (1000ab50 <_dtoa_r+0x3d0>)
1000aa80:	4015      	ands	r5, r2
1000aa82:	6a1a      	ldr	r2, [r3, #32]
1000aa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa86:	f001 fe4d 	bl	1000c724 <__aeabi_ddiv>
1000aa8a:	9006      	str	r0, [sp, #24]
1000aa8c:	9107      	str	r1, [sp, #28]
1000aa8e:	3701      	adds	r7, #1
1000aa90:	4c2f      	ldr	r4, [pc, #188]	; (1000ab50 <_dtoa_r+0x3d0>)
1000aa92:	2d00      	cmp	r5, #0
1000aa94:	d00d      	beq.n	1000aab2 <_dtoa_r+0x332>
1000aa96:	07eb      	lsls	r3, r5, #31
1000aa98:	d508      	bpl.n	1000aaac <_dtoa_r+0x32c>
1000aa9a:	9804      	ldr	r0, [sp, #16]
1000aa9c:	9905      	ldr	r1, [sp, #20]
1000aa9e:	6822      	ldr	r2, [r4, #0]
1000aaa0:	6863      	ldr	r3, [r4, #4]
1000aaa2:	f7fd f8c5 	bl	10007c30 <__aeabi_dmul>
1000aaa6:	9004      	str	r0, [sp, #16]
1000aaa8:	9105      	str	r1, [sp, #20]
1000aaaa:	3701      	adds	r7, #1
1000aaac:	106d      	asrs	r5, r5, #1
1000aaae:	3408      	adds	r4, #8
1000aab0:	e7ef      	b.n	1000aa92 <_dtoa_r+0x312>
1000aab2:	9806      	ldr	r0, [sp, #24]
1000aab4:	9907      	ldr	r1, [sp, #28]
1000aab6:	9a04      	ldr	r2, [sp, #16]
1000aab8:	9b05      	ldr	r3, [sp, #20]
1000aaba:	f001 fe33 	bl	1000c724 <__aeabi_ddiv>
1000aabe:	e049      	b.n	1000ab54 <_dtoa_r+0x3d4>
1000aac0:	9b03      	ldr	r3, [sp, #12]
1000aac2:	2702      	movs	r7, #2
1000aac4:	425d      	negs	r5, r3
1000aac6:	2d00      	cmp	r5, #0
1000aac8:	d046      	beq.n	1000ab58 <_dtoa_r+0x3d8>
1000aaca:	9814      	ldr	r0, [sp, #80]	; 0x50
1000aacc:	9915      	ldr	r1, [sp, #84]	; 0x54
1000aace:	230f      	movs	r3, #15
1000aad0:	4a1e      	ldr	r2, [pc, #120]	; (1000ab4c <_dtoa_r+0x3cc>)
1000aad2:	402b      	ands	r3, r5
1000aad4:	00db      	lsls	r3, r3, #3
1000aad6:	18d3      	adds	r3, r2, r3
1000aad8:	681a      	ldr	r2, [r3, #0]
1000aada:	685b      	ldr	r3, [r3, #4]
1000aadc:	f7fd f8a8 	bl	10007c30 <__aeabi_dmul>
1000aae0:	4c1b      	ldr	r4, [pc, #108]	; (1000ab50 <_dtoa_r+0x3d0>)
1000aae2:	112d      	asrs	r5, r5, #4
1000aae4:	2d00      	cmp	r5, #0
1000aae6:	d035      	beq.n	1000ab54 <_dtoa_r+0x3d4>
1000aae8:	07eb      	lsls	r3, r5, #31
1000aaea:	d504      	bpl.n	1000aaf6 <_dtoa_r+0x376>
1000aaec:	6822      	ldr	r2, [r4, #0]
1000aaee:	6863      	ldr	r3, [r4, #4]
1000aaf0:	3701      	adds	r7, #1
1000aaf2:	f7fd f89d 	bl	10007c30 <__aeabi_dmul>
1000aaf6:	106d      	asrs	r5, r5, #1
1000aaf8:	3408      	adds	r4, #8
1000aafa:	e7f3      	b.n	1000aae4 <_dtoa_r+0x364>
1000aafc:	7ff00000 	.word	0x7ff00000
1000ab00:	0000270f 	.word	0x0000270f
1000ab04:	1000d086 	.word	0x1000d086
1000ab08:	1000d07d 	.word	0x1000d07d
1000ab0c:	1000cf02 	.word	0x1000cf02
1000ab10:	1000cf03 	.word	0x1000cf03
1000ab14:	3ff00000 	.word	0x3ff00000
1000ab18:	fffffc01 	.word	0xfffffc01
1000ab1c:	fffffbef 	.word	0xfffffbef
1000ab20:	00000412 	.word	0x00000412
1000ab24:	fffffc0e 	.word	0xfffffc0e
1000ab28:	fffffbee 	.word	0xfffffbee
1000ab2c:	fe100000 	.word	0xfe100000
1000ab30:	3ff80000 	.word	0x3ff80000
1000ab34:	636f4361 	.word	0x636f4361
1000ab38:	3fd287a7 	.word	0x3fd287a7
1000ab3c:	8b60c8b3 	.word	0x8b60c8b3
1000ab40:	3fc68a28 	.word	0x3fc68a28
1000ab44:	509f79fb 	.word	0x509f79fb
1000ab48:	3fd34413 	.word	0x3fd34413
1000ab4c:	1000d098 	.word	0x1000d098
1000ab50:	1000d160 	.word	0x1000d160
1000ab54:	9006      	str	r0, [sp, #24]
1000ab56:	9107      	str	r1, [sp, #28]
1000ab58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000ab5a:	2b00      	cmp	r3, #0
1000ab5c:	d01e      	beq.n	1000ab9c <_dtoa_r+0x41c>
1000ab5e:	9c06      	ldr	r4, [sp, #24]
1000ab60:	9d07      	ldr	r5, [sp, #28]
1000ab62:	2200      	movs	r2, #0
1000ab64:	1c20      	adds	r0, r4, #0
1000ab66:	1c29      	adds	r1, r5, #0
1000ab68:	4bce      	ldr	r3, [pc, #824]	; (1000aea4 <_dtoa_r+0x724>)
1000ab6a:	f7fb ffd3 	bl	10006b14 <__aeabi_dcmplt>
1000ab6e:	2800      	cmp	r0, #0
1000ab70:	d014      	beq.n	1000ab9c <_dtoa_r+0x41c>
1000ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ab74:	2b00      	cmp	r3, #0
1000ab76:	d011      	beq.n	1000ab9c <_dtoa_r+0x41c>
1000ab78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ab7a:	2b00      	cmp	r3, #0
1000ab7c:	dc00      	bgt.n	1000ab80 <_dtoa_r+0x400>
1000ab7e:	e0e9      	b.n	1000ad54 <_dtoa_r+0x5d4>
1000ab80:	9b03      	ldr	r3, [sp, #12]
1000ab82:	1c29      	adds	r1, r5, #0
1000ab84:	3b01      	subs	r3, #1
1000ab86:	9311      	str	r3, [sp, #68]	; 0x44
1000ab88:	1c20      	adds	r0, r4, #0
1000ab8a:	2200      	movs	r2, #0
1000ab8c:	4bc6      	ldr	r3, [pc, #792]	; (1000aea8 <_dtoa_r+0x728>)
1000ab8e:	f7fd f84f 	bl	10007c30 <__aeabi_dmul>
1000ab92:	3701      	adds	r7, #1
1000ab94:	9006      	str	r0, [sp, #24]
1000ab96:	9107      	str	r1, [sp, #28]
1000ab98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000ab9a:	e002      	b.n	1000aba2 <_dtoa_r+0x422>
1000ab9c:	9b03      	ldr	r3, [sp, #12]
1000ab9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1000aba0:	9311      	str	r3, [sp, #68]	; 0x44
1000aba2:	1c38      	adds	r0, r7, #0
1000aba4:	9b06      	ldr	r3, [sp, #24]
1000aba6:	9c07      	ldr	r4, [sp, #28]
1000aba8:	9304      	str	r3, [sp, #16]
1000abaa:	9405      	str	r4, [sp, #20]
1000abac:	f7fd fe54 	bl	10008858 <__aeabi_i2d>
1000abb0:	9a04      	ldr	r2, [sp, #16]
1000abb2:	9b05      	ldr	r3, [sp, #20]
1000abb4:	f7fd f83c 	bl	10007c30 <__aeabi_dmul>
1000abb8:	2200      	movs	r2, #0
1000abba:	4bbc      	ldr	r3, [pc, #752]	; (1000aeac <_dtoa_r+0x72c>)
1000abbc:	f7fc fbf6 	bl	100073ac <__aeabi_dadd>
1000abc0:	9006      	str	r0, [sp, #24]
1000abc2:	9107      	str	r1, [sp, #28]
1000abc4:	9e06      	ldr	r6, [sp, #24]
1000abc6:	9f07      	ldr	r7, [sp, #28]
1000abc8:	9b07      	ldr	r3, [sp, #28]
1000abca:	4ab9      	ldr	r2, [pc, #740]	; (1000aeb0 <_dtoa_r+0x730>)
1000abcc:	189c      	adds	r4, r3, r2
1000abce:	2d00      	cmp	r5, #0
1000abd0:	d11c      	bne.n	1000ac0c <_dtoa_r+0x48c>
1000abd2:	9804      	ldr	r0, [sp, #16]
1000abd4:	9905      	ldr	r1, [sp, #20]
1000abd6:	2200      	movs	r2, #0
1000abd8:	4bb6      	ldr	r3, [pc, #728]	; (1000aeb4 <_dtoa_r+0x734>)
1000abda:	f7fd fac3 	bl	10008164 <__aeabi_dsub>
1000abde:	1c32      	adds	r2, r6, #0
1000abe0:	1c23      	adds	r3, r4, #0
1000abe2:	9004      	str	r0, [sp, #16]
1000abe4:	9105      	str	r1, [sp, #20]
1000abe6:	f7fb ffa9 	bl	10006b3c <__aeabi_dcmpgt>
1000abea:	2800      	cmp	r0, #0
1000abec:	d000      	beq.n	1000abf0 <_dtoa_r+0x470>
1000abee:	e263      	b.n	1000b0b8 <_dtoa_r+0x938>
1000abf0:	9804      	ldr	r0, [sp, #16]
1000abf2:	9905      	ldr	r1, [sp, #20]
1000abf4:	1c32      	adds	r2, r6, #0
1000abf6:	4eb0      	ldr	r6, [pc, #704]	; (1000aeb8 <_dtoa_r+0x738>)
1000abf8:	9c07      	ldr	r4, [sp, #28]
1000abfa:	46b4      	mov	ip, r6
1000abfc:	4464      	add	r4, ip
1000abfe:	1c23      	adds	r3, r4, #0
1000ac00:	f7fb ff88 	bl	10006b14 <__aeabi_dcmplt>
1000ac04:	2800      	cmp	r0, #0
1000ac06:	d000      	beq.n	1000ac0a <_dtoa_r+0x48a>
1000ac08:	e24c      	b.n	1000b0a4 <_dtoa_r+0x924>
1000ac0a:	e0a3      	b.n	1000ad54 <_dtoa_r+0x5d4>
1000ac0c:	4aab      	ldr	r2, [pc, #684]	; (1000aebc <_dtoa_r+0x73c>)
1000ac0e:	1e6b      	subs	r3, r5, #1
1000ac10:	9910      	ldr	r1, [sp, #64]	; 0x40
1000ac12:	00db      	lsls	r3, r3, #3
1000ac14:	18d3      	adds	r3, r2, r3
1000ac16:	2900      	cmp	r1, #0
1000ac18:	d04e      	beq.n	1000acb8 <_dtoa_r+0x538>
1000ac1a:	681a      	ldr	r2, [r3, #0]
1000ac1c:	685b      	ldr	r3, [r3, #4]
1000ac1e:	2000      	movs	r0, #0
1000ac20:	49a7      	ldr	r1, [pc, #668]	; (1000aec0 <_dtoa_r+0x740>)
1000ac22:	f001 fd7f 	bl	1000c724 <__aeabi_ddiv>
1000ac26:	1c32      	adds	r2, r6, #0
1000ac28:	1c23      	adds	r3, r4, #0
1000ac2a:	f7fd fa9b 	bl	10008164 <__aeabi_dsub>
1000ac2e:	9e04      	ldr	r6, [sp, #16]
1000ac30:	9f05      	ldr	r7, [sp, #20]
1000ac32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ac34:	9006      	str	r0, [sp, #24]
1000ac36:	9107      	str	r1, [sp, #28]
1000ac38:	9304      	str	r3, [sp, #16]
1000ac3a:	1c39      	adds	r1, r7, #0
1000ac3c:	1c30      	adds	r0, r6, #0
1000ac3e:	f002 f895 	bl	1000cd6c <__aeabi_d2iz>
1000ac42:	1c04      	adds	r4, r0, #0
1000ac44:	f7fd fe08 	bl	10008858 <__aeabi_i2d>
1000ac48:	1c02      	adds	r2, r0, #0
1000ac4a:	1c0b      	adds	r3, r1, #0
1000ac4c:	1c30      	adds	r0, r6, #0
1000ac4e:	1c39      	adds	r1, r7, #0
1000ac50:	f7fd fa88 	bl	10008164 <__aeabi_dsub>
1000ac54:	9b04      	ldr	r3, [sp, #16]
1000ac56:	3430      	adds	r4, #48	; 0x30
1000ac58:	3301      	adds	r3, #1
1000ac5a:	9304      	str	r3, [sp, #16]
1000ac5c:	3b01      	subs	r3, #1
1000ac5e:	701c      	strb	r4, [r3, #0]
1000ac60:	9a06      	ldr	r2, [sp, #24]
1000ac62:	9b07      	ldr	r3, [sp, #28]
1000ac64:	1c06      	adds	r6, r0, #0
1000ac66:	1c0f      	adds	r7, r1, #0
1000ac68:	f7fb ff54 	bl	10006b14 <__aeabi_dcmplt>
1000ac6c:	2800      	cmp	r0, #0
1000ac6e:	d000      	beq.n	1000ac72 <_dtoa_r+0x4f2>
1000ac70:	e361      	b.n	1000b336 <_dtoa_r+0xbb6>
1000ac72:	1c32      	adds	r2, r6, #0
1000ac74:	1c3b      	adds	r3, r7, #0
1000ac76:	2000      	movs	r0, #0
1000ac78:	498a      	ldr	r1, [pc, #552]	; (1000aea4 <_dtoa_r+0x724>)
1000ac7a:	f7fd fa73 	bl	10008164 <__aeabi_dsub>
1000ac7e:	9a06      	ldr	r2, [sp, #24]
1000ac80:	9b07      	ldr	r3, [sp, #28]
1000ac82:	f7fb ff47 	bl	10006b14 <__aeabi_dcmplt>
1000ac86:	2800      	cmp	r0, #0
1000ac88:	d000      	beq.n	1000ac8c <_dtoa_r+0x50c>
1000ac8a:	e0cd      	b.n	1000ae28 <_dtoa_r+0x6a8>
1000ac8c:	9b04      	ldr	r3, [sp, #16]
1000ac8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000ac90:	1a9b      	subs	r3, r3, r2
1000ac92:	42ab      	cmp	r3, r5
1000ac94:	da5e      	bge.n	1000ad54 <_dtoa_r+0x5d4>
1000ac96:	9806      	ldr	r0, [sp, #24]
1000ac98:	9907      	ldr	r1, [sp, #28]
1000ac9a:	2200      	movs	r2, #0
1000ac9c:	4b82      	ldr	r3, [pc, #520]	; (1000aea8 <_dtoa_r+0x728>)
1000ac9e:	f7fc ffc7 	bl	10007c30 <__aeabi_dmul>
1000aca2:	2200      	movs	r2, #0
1000aca4:	9006      	str	r0, [sp, #24]
1000aca6:	9107      	str	r1, [sp, #28]
1000aca8:	4b7f      	ldr	r3, [pc, #508]	; (1000aea8 <_dtoa_r+0x728>)
1000acaa:	1c30      	adds	r0, r6, #0
1000acac:	1c39      	adds	r1, r7, #0
1000acae:	f7fc ffbf 	bl	10007c30 <__aeabi_dmul>
1000acb2:	1c06      	adds	r6, r0, #0
1000acb4:	1c0f      	adds	r7, r1, #0
1000acb6:	e7c0      	b.n	1000ac3a <_dtoa_r+0x4ba>
1000acb8:	6818      	ldr	r0, [r3, #0]
1000acba:	6859      	ldr	r1, [r3, #4]
1000acbc:	1c32      	adds	r2, r6, #0
1000acbe:	1c23      	adds	r3, r4, #0
1000acc0:	f7fc ffb6 	bl	10007c30 <__aeabi_dmul>
1000acc4:	9e04      	ldr	r6, [sp, #16]
1000acc6:	9f05      	ldr	r7, [sp, #20]
1000acc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000acca:	9006      	str	r0, [sp, #24]
1000accc:	9107      	str	r1, [sp, #28]
1000acce:	1963      	adds	r3, r4, r5
1000acd0:	9304      	str	r3, [sp, #16]
1000acd2:	1c39      	adds	r1, r7, #0
1000acd4:	1c30      	adds	r0, r6, #0
1000acd6:	f002 f849 	bl	1000cd6c <__aeabi_d2iz>
1000acda:	1c05      	adds	r5, r0, #0
1000acdc:	f7fd fdbc 	bl	10008858 <__aeabi_i2d>
1000ace0:	1c0b      	adds	r3, r1, #0
1000ace2:	1c02      	adds	r2, r0, #0
1000ace4:	1c39      	adds	r1, r7, #0
1000ace6:	1c30      	adds	r0, r6, #0
1000ace8:	f7fd fa3c 	bl	10008164 <__aeabi_dsub>
1000acec:	3530      	adds	r5, #48	; 0x30
1000acee:	9b04      	ldr	r3, [sp, #16]
1000acf0:	7025      	strb	r5, [r4, #0]
1000acf2:	3401      	adds	r4, #1
1000acf4:	1c06      	adds	r6, r0, #0
1000acf6:	1c0f      	adds	r7, r1, #0
1000acf8:	42a3      	cmp	r3, r4
1000acfa:	d124      	bne.n	1000ad46 <_dtoa_r+0x5c6>
1000acfc:	2200      	movs	r2, #0
1000acfe:	9806      	ldr	r0, [sp, #24]
1000ad00:	9907      	ldr	r1, [sp, #28]
1000ad02:	4b6f      	ldr	r3, [pc, #444]	; (1000aec0 <_dtoa_r+0x740>)
1000ad04:	f7fc fb52 	bl	100073ac <__aeabi_dadd>
1000ad08:	1c02      	adds	r2, r0, #0
1000ad0a:	1c0b      	adds	r3, r1, #0
1000ad0c:	1c30      	adds	r0, r6, #0
1000ad0e:	1c39      	adds	r1, r7, #0
1000ad10:	f7fb ff14 	bl	10006b3c <__aeabi_dcmpgt>
1000ad14:	2800      	cmp	r0, #0
1000ad16:	d000      	beq.n	1000ad1a <_dtoa_r+0x59a>
1000ad18:	e086      	b.n	1000ae28 <_dtoa_r+0x6a8>
1000ad1a:	9a06      	ldr	r2, [sp, #24]
1000ad1c:	9b07      	ldr	r3, [sp, #28]
1000ad1e:	2000      	movs	r0, #0
1000ad20:	4967      	ldr	r1, [pc, #412]	; (1000aec0 <_dtoa_r+0x740>)
1000ad22:	f7fd fa1f 	bl	10008164 <__aeabi_dsub>
1000ad26:	1c02      	adds	r2, r0, #0
1000ad28:	1c0b      	adds	r3, r1, #0
1000ad2a:	1c30      	adds	r0, r6, #0
1000ad2c:	1c39      	adds	r1, r7, #0
1000ad2e:	f7fb fef1 	bl	10006b14 <__aeabi_dcmplt>
1000ad32:	2800      	cmp	r0, #0
1000ad34:	d00e      	beq.n	1000ad54 <_dtoa_r+0x5d4>
1000ad36:	9b04      	ldr	r3, [sp, #16]
1000ad38:	3b01      	subs	r3, #1
1000ad3a:	781a      	ldrb	r2, [r3, #0]
1000ad3c:	2a30      	cmp	r2, #48	; 0x30
1000ad3e:	d000      	beq.n	1000ad42 <_dtoa_r+0x5c2>
1000ad40:	e2f9      	b.n	1000b336 <_dtoa_r+0xbb6>
1000ad42:	9304      	str	r3, [sp, #16]
1000ad44:	e7f7      	b.n	1000ad36 <_dtoa_r+0x5b6>
1000ad46:	2200      	movs	r2, #0
1000ad48:	4b57      	ldr	r3, [pc, #348]	; (1000aea8 <_dtoa_r+0x728>)
1000ad4a:	f7fc ff71 	bl	10007c30 <__aeabi_dmul>
1000ad4e:	1c06      	adds	r6, r0, #0
1000ad50:	1c0f      	adds	r7, r1, #0
1000ad52:	e7be      	b.n	1000acd2 <_dtoa_r+0x552>
1000ad54:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000ad56:	9c15      	ldr	r4, [sp, #84]	; 0x54
1000ad58:	9306      	str	r3, [sp, #24]
1000ad5a:	9407      	str	r4, [sp, #28]
1000ad5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000ad5e:	2b00      	cmp	r3, #0
1000ad60:	da00      	bge.n	1000ad64 <_dtoa_r+0x5e4>
1000ad62:	e086      	b.n	1000ae72 <_dtoa_r+0x6f2>
1000ad64:	9a03      	ldr	r2, [sp, #12]
1000ad66:	2a0e      	cmp	r2, #14
1000ad68:	dd00      	ble.n	1000ad6c <_dtoa_r+0x5ec>
1000ad6a:	e082      	b.n	1000ae72 <_dtoa_r+0x6f2>
1000ad6c:	00d3      	lsls	r3, r2, #3
1000ad6e:	4a53      	ldr	r2, [pc, #332]	; (1000aebc <_dtoa_r+0x73c>)
1000ad70:	18d3      	adds	r3, r2, r3
1000ad72:	681e      	ldr	r6, [r3, #0]
1000ad74:	685f      	ldr	r7, [r3, #4]
1000ad76:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000ad78:	2b00      	cmp	r3, #0
1000ad7a:	da14      	bge.n	1000ada6 <_dtoa_r+0x626>
1000ad7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ad7e:	2b00      	cmp	r3, #0
1000ad80:	dc11      	bgt.n	1000ada6 <_dtoa_r+0x626>
1000ad82:	d000      	beq.n	1000ad86 <_dtoa_r+0x606>
1000ad84:	e190      	b.n	1000b0a8 <_dtoa_r+0x928>
1000ad86:	1c30      	adds	r0, r6, #0
1000ad88:	1c39      	adds	r1, r7, #0
1000ad8a:	2200      	movs	r2, #0
1000ad8c:	4b49      	ldr	r3, [pc, #292]	; (1000aeb4 <_dtoa_r+0x734>)
1000ad8e:	f7fc ff4f 	bl	10007c30 <__aeabi_dmul>
1000ad92:	9a06      	ldr	r2, [sp, #24]
1000ad94:	9b07      	ldr	r3, [sp, #28]
1000ad96:	f7fb fedb 	bl	10006b50 <__aeabi_dcmpge>
1000ad9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000ad9c:	1c3e      	adds	r6, r7, #0
1000ad9e:	2800      	cmp	r0, #0
1000ada0:	d000      	beq.n	1000ada4 <_dtoa_r+0x624>
1000ada2:	e183      	b.n	1000b0ac <_dtoa_r+0x92c>
1000ada4:	e18c      	b.n	1000b0c0 <_dtoa_r+0x940>
1000ada6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ada8:	9c06      	ldr	r4, [sp, #24]
1000adaa:	9d07      	ldr	r5, [sp, #28]
1000adac:	9304      	str	r3, [sp, #16]
1000adae:	1c32      	adds	r2, r6, #0
1000adb0:	1c3b      	adds	r3, r7, #0
1000adb2:	1c20      	adds	r0, r4, #0
1000adb4:	1c29      	adds	r1, r5, #0
1000adb6:	f001 fcb5 	bl	1000c724 <__aeabi_ddiv>
1000adba:	f001 ffd7 	bl	1000cd6c <__aeabi_d2iz>
1000adbe:	9006      	str	r0, [sp, #24]
1000adc0:	f7fd fd4a 	bl	10008858 <__aeabi_i2d>
1000adc4:	1c32      	adds	r2, r6, #0
1000adc6:	1c3b      	adds	r3, r7, #0
1000adc8:	f7fc ff32 	bl	10007c30 <__aeabi_dmul>
1000adcc:	1c02      	adds	r2, r0, #0
1000adce:	1c0b      	adds	r3, r1, #0
1000add0:	1c20      	adds	r0, r4, #0
1000add2:	1c29      	adds	r1, r5, #0
1000add4:	f7fd f9c6 	bl	10008164 <__aeabi_dsub>
1000add8:	1c0b      	adds	r3, r1, #0
1000adda:	9904      	ldr	r1, [sp, #16]
1000addc:	1c02      	adds	r2, r0, #0
1000adde:	9806      	ldr	r0, [sp, #24]
1000ade0:	3101      	adds	r1, #1
1000ade2:	9104      	str	r1, [sp, #16]
1000ade4:	3030      	adds	r0, #48	; 0x30
1000ade6:	3901      	subs	r1, #1
1000ade8:	7008      	strb	r0, [r1, #0]
1000adea:	980c      	ldr	r0, [sp, #48]	; 0x30
1000adec:	9904      	ldr	r1, [sp, #16]
1000adee:	1a09      	subs	r1, r1, r0
1000adf0:	9809      	ldr	r0, [sp, #36]	; 0x24
1000adf2:	4281      	cmp	r1, r0
1000adf4:	d12e      	bne.n	1000ae54 <_dtoa_r+0x6d4>
1000adf6:	1c10      	adds	r0, r2, #0
1000adf8:	1c19      	adds	r1, r3, #0
1000adfa:	f7fc fad7 	bl	100073ac <__aeabi_dadd>
1000adfe:	1c32      	adds	r2, r6, #0
1000ae00:	1c3b      	adds	r3, r7, #0
1000ae02:	1c04      	adds	r4, r0, #0
1000ae04:	1c0d      	adds	r5, r1, #0
1000ae06:	f7fb fe99 	bl	10006b3c <__aeabi_dcmpgt>
1000ae0a:	2800      	cmp	r0, #0
1000ae0c:	d110      	bne.n	1000ae30 <_dtoa_r+0x6b0>
1000ae0e:	1c20      	adds	r0, r4, #0
1000ae10:	1c29      	adds	r1, r5, #0
1000ae12:	1c32      	adds	r2, r6, #0
1000ae14:	1c3b      	adds	r3, r7, #0
1000ae16:	f7fb fe77 	bl	10006b08 <__aeabi_dcmpeq>
1000ae1a:	2800      	cmp	r0, #0
1000ae1c:	d100      	bne.n	1000ae20 <_dtoa_r+0x6a0>
1000ae1e:	e28c      	b.n	1000b33a <_dtoa_r+0xbba>
1000ae20:	9b06      	ldr	r3, [sp, #24]
1000ae22:	07db      	lsls	r3, r3, #31
1000ae24:	d404      	bmi.n	1000ae30 <_dtoa_r+0x6b0>
1000ae26:	e288      	b.n	1000b33a <_dtoa_r+0xbba>
1000ae28:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000ae2a:	9303      	str	r3, [sp, #12]
1000ae2c:	e000      	b.n	1000ae30 <_dtoa_r+0x6b0>
1000ae2e:	9304      	str	r3, [sp, #16]
1000ae30:	9b04      	ldr	r3, [sp, #16]
1000ae32:	3b01      	subs	r3, #1
1000ae34:	781a      	ldrb	r2, [r3, #0]
1000ae36:	2a39      	cmp	r2, #57	; 0x39
1000ae38:	d108      	bne.n	1000ae4c <_dtoa_r+0x6cc>
1000ae3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000ae3c:	4293      	cmp	r3, r2
1000ae3e:	d1f6      	bne.n	1000ae2e <_dtoa_r+0x6ae>
1000ae40:	9b03      	ldr	r3, [sp, #12]
1000ae42:	3301      	adds	r3, #1
1000ae44:	9303      	str	r3, [sp, #12]
1000ae46:	2330      	movs	r3, #48	; 0x30
1000ae48:	7013      	strb	r3, [r2, #0]
1000ae4a:	1c13      	adds	r3, r2, #0
1000ae4c:	781a      	ldrb	r2, [r3, #0]
1000ae4e:	3201      	adds	r2, #1
1000ae50:	701a      	strb	r2, [r3, #0]
1000ae52:	e272      	b.n	1000b33a <_dtoa_r+0xbba>
1000ae54:	1c10      	adds	r0, r2, #0
1000ae56:	1c19      	adds	r1, r3, #0
1000ae58:	2200      	movs	r2, #0
1000ae5a:	4b13      	ldr	r3, [pc, #76]	; (1000aea8 <_dtoa_r+0x728>)
1000ae5c:	f7fc fee8 	bl	10007c30 <__aeabi_dmul>
1000ae60:	2200      	movs	r2, #0
1000ae62:	2300      	movs	r3, #0
1000ae64:	1c04      	adds	r4, r0, #0
1000ae66:	1c0d      	adds	r5, r1, #0
1000ae68:	f7fb fe4e 	bl	10006b08 <__aeabi_dcmpeq>
1000ae6c:	2800      	cmp	r0, #0
1000ae6e:	d09e      	beq.n	1000adae <_dtoa_r+0x62e>
1000ae70:	e263      	b.n	1000b33a <_dtoa_r+0xbba>
1000ae72:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000ae74:	2a00      	cmp	r2, #0
1000ae76:	d044      	beq.n	1000af02 <_dtoa_r+0x782>
1000ae78:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000ae7a:	2a01      	cmp	r2, #1
1000ae7c:	dc0b      	bgt.n	1000ae96 <_dtoa_r+0x716>
1000ae7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000ae80:	2a00      	cmp	r2, #0
1000ae82:	d002      	beq.n	1000ae8a <_dtoa_r+0x70a>
1000ae84:	4a0f      	ldr	r2, [pc, #60]	; (1000aec4 <_dtoa_r+0x744>)
1000ae86:	189b      	adds	r3, r3, r2
1000ae88:	e002      	b.n	1000ae90 <_dtoa_r+0x710>
1000ae8a:	2336      	movs	r3, #54	; 0x36
1000ae8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000ae8e:	1a9b      	subs	r3, r3, r2
1000ae90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1000ae92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000ae94:	e029      	b.n	1000aeea <_dtoa_r+0x76a>
1000ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ae98:	1e5d      	subs	r5, r3, #1
1000ae9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ae9c:	42ab      	cmp	r3, r5
1000ae9e:	db13      	blt.n	1000aec8 <_dtoa_r+0x748>
1000aea0:	1b5d      	subs	r5, r3, r5
1000aea2:	e018      	b.n	1000aed6 <_dtoa_r+0x756>
1000aea4:	3ff00000 	.word	0x3ff00000
1000aea8:	40240000 	.word	0x40240000
1000aeac:	401c0000 	.word	0x401c0000
1000aeb0:	fcc00000 	.word	0xfcc00000
1000aeb4:	40140000 	.word	0x40140000
1000aeb8:	7cc00000 	.word	0x7cc00000
1000aebc:	1000d098 	.word	0x1000d098
1000aec0:	3fe00000 	.word	0x3fe00000
1000aec4:	00000433 	.word	0x00000433
1000aec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000aeca:	950f      	str	r5, [sp, #60]	; 0x3c
1000aecc:	1aea      	subs	r2, r5, r3
1000aece:	2500      	movs	r5, #0
1000aed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000aed2:	189b      	adds	r3, r3, r2
1000aed4:	9312      	str	r3, [sp, #72]	; 0x48
1000aed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000aed8:	2b00      	cmp	r3, #0
1000aeda:	da04      	bge.n	1000aee6 <_dtoa_r+0x766>
1000aedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000aede:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000aee0:	1a9c      	subs	r4, r3, r2
1000aee2:	2300      	movs	r3, #0
1000aee4:	e001      	b.n	1000aeea <_dtoa_r+0x76a>
1000aee6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000aeea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000aeec:	9808      	ldr	r0, [sp, #32]
1000aeee:	18d2      	adds	r2, r2, r3
1000aef0:	920d      	str	r2, [sp, #52]	; 0x34
1000aef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000aef4:	2101      	movs	r1, #1
1000aef6:	18d3      	adds	r3, r2, r3
1000aef8:	930e      	str	r3, [sp, #56]	; 0x38
1000aefa:	f000 fe89 	bl	1000bc10 <__i2b>
1000aefe:	1c06      	adds	r6, r0, #0
1000af00:	e002      	b.n	1000af08 <_dtoa_r+0x788>
1000af02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1000af04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000af06:	9e10      	ldr	r6, [sp, #64]	; 0x40
1000af08:	2c00      	cmp	r4, #0
1000af0a:	d00c      	beq.n	1000af26 <_dtoa_r+0x7a6>
1000af0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000af0e:	2b00      	cmp	r3, #0
1000af10:	dd09      	ble.n	1000af26 <_dtoa_r+0x7a6>
1000af12:	42a3      	cmp	r3, r4
1000af14:	dd00      	ble.n	1000af18 <_dtoa_r+0x798>
1000af16:	1c23      	adds	r3, r4, #0
1000af18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000af1a:	1ae4      	subs	r4, r4, r3
1000af1c:	1ad2      	subs	r2, r2, r3
1000af1e:	920d      	str	r2, [sp, #52]	; 0x34
1000af20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000af22:	1ad3      	subs	r3, r2, r3
1000af24:	930e      	str	r3, [sp, #56]	; 0x38
1000af26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000af28:	2b00      	cmp	r3, #0
1000af2a:	dd21      	ble.n	1000af70 <_dtoa_r+0x7f0>
1000af2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000af2e:	2b00      	cmp	r3, #0
1000af30:	d018      	beq.n	1000af64 <_dtoa_r+0x7e4>
1000af32:	2d00      	cmp	r5, #0
1000af34:	dd10      	ble.n	1000af58 <_dtoa_r+0x7d8>
1000af36:	1c31      	adds	r1, r6, #0
1000af38:	1c2a      	adds	r2, r5, #0
1000af3a:	9808      	ldr	r0, [sp, #32]
1000af3c:	f000 fefe 	bl	1000bd3c <__pow5mult>
1000af40:	1c06      	adds	r6, r0, #0
1000af42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000af44:	1c31      	adds	r1, r6, #0
1000af46:	9808      	ldr	r0, [sp, #32]
1000af48:	f000 fe6b 	bl	1000bc22 <__multiply>
1000af4c:	1c07      	adds	r7, r0, #0
1000af4e:	990a      	ldr	r1, [sp, #40]	; 0x28
1000af50:	9808      	ldr	r0, [sp, #32]
1000af52:	f000 fd7e 	bl	1000ba52 <_Bfree>
1000af56:	970a      	str	r7, [sp, #40]	; 0x28
1000af58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000af5a:	1b5a      	subs	r2, r3, r5
1000af5c:	d008      	beq.n	1000af70 <_dtoa_r+0x7f0>
1000af5e:	9808      	ldr	r0, [sp, #32]
1000af60:	990a      	ldr	r1, [sp, #40]	; 0x28
1000af62:	e002      	b.n	1000af6a <_dtoa_r+0x7ea>
1000af64:	9808      	ldr	r0, [sp, #32]
1000af66:	990a      	ldr	r1, [sp, #40]	; 0x28
1000af68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000af6a:	f000 fee7 	bl	1000bd3c <__pow5mult>
1000af6e:	900a      	str	r0, [sp, #40]	; 0x28
1000af70:	9808      	ldr	r0, [sp, #32]
1000af72:	2101      	movs	r1, #1
1000af74:	f000 fe4c 	bl	1000bc10 <__i2b>
1000af78:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000af7a:	1c07      	adds	r7, r0, #0
1000af7c:	2b00      	cmp	r3, #0
1000af7e:	dd0a      	ble.n	1000af96 <_dtoa_r+0x816>
1000af80:	1c39      	adds	r1, r7, #0
1000af82:	1c1a      	adds	r2, r3, #0
1000af84:	9808      	ldr	r0, [sp, #32]
1000af86:	f000 fed9 	bl	1000bd3c <__pow5mult>
1000af8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000af8c:	1c07      	adds	r7, r0, #0
1000af8e:	2500      	movs	r5, #0
1000af90:	2b01      	cmp	r3, #1
1000af92:	dc1b      	bgt.n	1000afcc <_dtoa_r+0x84c>
1000af94:	e003      	b.n	1000af9e <_dtoa_r+0x81e>
1000af96:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000af98:	2500      	movs	r5, #0
1000af9a:	2b01      	cmp	r3, #1
1000af9c:	dc12      	bgt.n	1000afc4 <_dtoa_r+0x844>
1000af9e:	2500      	movs	r5, #0
1000afa0:	9b06      	ldr	r3, [sp, #24]
1000afa2:	42ab      	cmp	r3, r5
1000afa4:	d10e      	bne.n	1000afc4 <_dtoa_r+0x844>
1000afa6:	9b07      	ldr	r3, [sp, #28]
1000afa8:	031b      	lsls	r3, r3, #12
1000afaa:	42ab      	cmp	r3, r5
1000afac:	d10a      	bne.n	1000afc4 <_dtoa_r+0x844>
1000afae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000afb0:	9a07      	ldr	r2, [sp, #28]
1000afb2:	4213      	tst	r3, r2
1000afb4:	d006      	beq.n	1000afc4 <_dtoa_r+0x844>
1000afb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000afb8:	3501      	adds	r5, #1
1000afba:	3301      	adds	r3, #1
1000afbc:	930d      	str	r3, [sp, #52]	; 0x34
1000afbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000afc0:	3301      	adds	r3, #1
1000afc2:	930e      	str	r3, [sp, #56]	; 0x38
1000afc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000afc6:	2001      	movs	r0, #1
1000afc8:	2b00      	cmp	r3, #0
1000afca:	d008      	beq.n	1000afde <_dtoa_r+0x85e>
1000afcc:	693b      	ldr	r3, [r7, #16]
1000afce:	3303      	adds	r3, #3
1000afd0:	009b      	lsls	r3, r3, #2
1000afd2:	18fb      	adds	r3, r7, r3
1000afd4:	6858      	ldr	r0, [r3, #4]
1000afd6:	f000 fdd1 	bl	1000bb7c <__hi0bits>
1000afda:	2320      	movs	r3, #32
1000afdc:	1a18      	subs	r0, r3, r0
1000afde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000afe0:	18c0      	adds	r0, r0, r3
1000afe2:	231f      	movs	r3, #31
1000afe4:	4018      	ands	r0, r3
1000afe6:	d009      	beq.n	1000affc <_dtoa_r+0x87c>
1000afe8:	3301      	adds	r3, #1
1000afea:	1a1b      	subs	r3, r3, r0
1000afec:	2b04      	cmp	r3, #4
1000afee:	dd02      	ble.n	1000aff6 <_dtoa_r+0x876>
1000aff0:	231c      	movs	r3, #28
1000aff2:	1a18      	subs	r0, r3, r0
1000aff4:	e003      	b.n	1000affe <_dtoa_r+0x87e>
1000aff6:	2b04      	cmp	r3, #4
1000aff8:	d008      	beq.n	1000b00c <_dtoa_r+0x88c>
1000affa:	1c18      	adds	r0, r3, #0
1000affc:	301c      	adds	r0, #28
1000affe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b000:	1824      	adds	r4, r4, r0
1000b002:	181b      	adds	r3, r3, r0
1000b004:	930d      	str	r3, [sp, #52]	; 0x34
1000b006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b008:	181b      	adds	r3, r3, r0
1000b00a:	930e      	str	r3, [sp, #56]	; 0x38
1000b00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b00e:	2b00      	cmp	r3, #0
1000b010:	dd05      	ble.n	1000b01e <_dtoa_r+0x89e>
1000b012:	9808      	ldr	r0, [sp, #32]
1000b014:	990a      	ldr	r1, [sp, #40]	; 0x28
1000b016:	1c1a      	adds	r2, r3, #0
1000b018:	f000 fee2 	bl	1000bde0 <__lshift>
1000b01c:	900a      	str	r0, [sp, #40]	; 0x28
1000b01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b020:	2b00      	cmp	r3, #0
1000b022:	dd05      	ble.n	1000b030 <_dtoa_r+0x8b0>
1000b024:	1c39      	adds	r1, r7, #0
1000b026:	9808      	ldr	r0, [sp, #32]
1000b028:	1c1a      	adds	r2, r3, #0
1000b02a:	f000 fed9 	bl	1000bde0 <__lshift>
1000b02e:	1c07      	adds	r7, r0, #0
1000b030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b032:	2b00      	cmp	r3, #0
1000b034:	d01e      	beq.n	1000b074 <_dtoa_r+0x8f4>
1000b036:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b038:	1c39      	adds	r1, r7, #0
1000b03a:	f000 ff23 	bl	1000be84 <__mcmp>
1000b03e:	2800      	cmp	r0, #0
1000b040:	da18      	bge.n	1000b074 <_dtoa_r+0x8f4>
1000b042:	9b03      	ldr	r3, [sp, #12]
1000b044:	9808      	ldr	r0, [sp, #32]
1000b046:	3b01      	subs	r3, #1
1000b048:	9303      	str	r3, [sp, #12]
1000b04a:	990a      	ldr	r1, [sp, #40]	; 0x28
1000b04c:	2300      	movs	r3, #0
1000b04e:	220a      	movs	r2, #10
1000b050:	f000 fd18 	bl	1000ba84 <__multadd>
1000b054:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b056:	900a      	str	r0, [sp, #40]	; 0x28
1000b058:	2b00      	cmp	r3, #0
1000b05a:	d100      	bne.n	1000b05e <_dtoa_r+0x8de>
1000b05c:	e17f      	b.n	1000b35e <_dtoa_r+0xbde>
1000b05e:	1c31      	adds	r1, r6, #0
1000b060:	2300      	movs	r3, #0
1000b062:	9808      	ldr	r0, [sp, #32]
1000b064:	220a      	movs	r2, #10
1000b066:	f000 fd0d 	bl	1000ba84 <__multadd>
1000b06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b06c:	1c06      	adds	r6, r0, #0
1000b06e:	2b00      	cmp	r3, #0
1000b070:	dc3c      	bgt.n	1000b0ec <_dtoa_r+0x96c>
1000b072:	e17d      	b.n	1000b370 <_dtoa_r+0xbf0>
1000b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b076:	2b00      	cmp	r3, #0
1000b078:	dc2e      	bgt.n	1000b0d8 <_dtoa_r+0x958>
1000b07a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b07c:	2b02      	cmp	r3, #2
1000b07e:	dd2b      	ble.n	1000b0d8 <_dtoa_r+0x958>
1000b080:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b082:	930b      	str	r3, [sp, #44]	; 0x2c
1000b084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b086:	2b00      	cmp	r3, #0
1000b088:	d110      	bne.n	1000b0ac <_dtoa_r+0x92c>
1000b08a:	1c39      	adds	r1, r7, #0
1000b08c:	9808      	ldr	r0, [sp, #32]
1000b08e:	2205      	movs	r2, #5
1000b090:	f000 fcf8 	bl	1000ba84 <__multadd>
1000b094:	1c07      	adds	r7, r0, #0
1000b096:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b098:	1c39      	adds	r1, r7, #0
1000b09a:	f000 fef3 	bl	1000be84 <__mcmp>
1000b09e:	2800      	cmp	r0, #0
1000b0a0:	dc0e      	bgt.n	1000b0c0 <_dtoa_r+0x940>
1000b0a2:	e003      	b.n	1000b0ac <_dtoa_r+0x92c>
1000b0a4:	1c2f      	adds	r7, r5, #0
1000b0a6:	e000      	b.n	1000b0aa <_dtoa_r+0x92a>
1000b0a8:	2700      	movs	r7, #0
1000b0aa:	1c3e      	adds	r6, r7, #0
1000b0ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000b0ae:	43db      	mvns	r3, r3
1000b0b0:	9303      	str	r3, [sp, #12]
1000b0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b0b4:	9304      	str	r3, [sp, #16]
1000b0b6:	e00c      	b.n	1000b0d2 <_dtoa_r+0x952>
1000b0b8:	1c2f      	adds	r7, r5, #0
1000b0ba:	1c2e      	adds	r6, r5, #0
1000b0bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b0be:	9303      	str	r3, [sp, #12]
1000b0c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b0c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b0c4:	3301      	adds	r3, #1
1000b0c6:	9304      	str	r3, [sp, #16]
1000b0c8:	2331      	movs	r3, #49	; 0x31
1000b0ca:	7013      	strb	r3, [r2, #0]
1000b0cc:	9b03      	ldr	r3, [sp, #12]
1000b0ce:	3301      	adds	r3, #1
1000b0d0:	9303      	str	r3, [sp, #12]
1000b0d2:	9609      	str	r6, [sp, #36]	; 0x24
1000b0d4:	2600      	movs	r6, #0
1000b0d6:	e11a      	b.n	1000b30e <_dtoa_r+0xb8e>
1000b0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b0da:	2b00      	cmp	r3, #0
1000b0dc:	d104      	bne.n	1000b0e8 <_dtoa_r+0x968>
1000b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b0e0:	930b      	str	r3, [sp, #44]	; 0x2c
1000b0e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000b0e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000b0e6:	e0d0      	b.n	1000b28a <_dtoa_r+0xb0a>
1000b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b0ea:	930b      	str	r3, [sp, #44]	; 0x2c
1000b0ec:	2c00      	cmp	r4, #0
1000b0ee:	dd05      	ble.n	1000b0fc <_dtoa_r+0x97c>
1000b0f0:	1c31      	adds	r1, r6, #0
1000b0f2:	9808      	ldr	r0, [sp, #32]
1000b0f4:	1c22      	adds	r2, r4, #0
1000b0f6:	f000 fe73 	bl	1000bde0 <__lshift>
1000b0fa:	1c06      	adds	r6, r0, #0
1000b0fc:	9609      	str	r6, [sp, #36]	; 0x24
1000b0fe:	2d00      	cmp	r5, #0
1000b100:	d012      	beq.n	1000b128 <_dtoa_r+0x9a8>
1000b102:	6871      	ldr	r1, [r6, #4]
1000b104:	9808      	ldr	r0, [sp, #32]
1000b106:	f000 fc6c 	bl	1000b9e2 <_Balloc>
1000b10a:	1c31      	adds	r1, r6, #0
1000b10c:	1c04      	adds	r4, r0, #0
1000b10e:	6933      	ldr	r3, [r6, #16]
1000b110:	310c      	adds	r1, #12
1000b112:	1c9a      	adds	r2, r3, #2
1000b114:	0092      	lsls	r2, r2, #2
1000b116:	300c      	adds	r0, #12
1000b118:	f7fd fd3a 	bl	10008b90 <memcpy>
1000b11c:	9808      	ldr	r0, [sp, #32]
1000b11e:	1c21      	adds	r1, r4, #0
1000b120:	2201      	movs	r2, #1
1000b122:	f000 fe5d 	bl	1000bde0 <__lshift>
1000b126:	9009      	str	r0, [sp, #36]	; 0x24
1000b128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b12a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b12c:	930e      	str	r3, [sp, #56]	; 0x38
1000b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b130:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000b132:	3b01      	subs	r3, #1
1000b134:	18d3      	adds	r3, r2, r3
1000b136:	9310      	str	r3, [sp, #64]	; 0x40
1000b138:	1c39      	adds	r1, r7, #0
1000b13a:	1c20      	adds	r0, r4, #0
1000b13c:	f7ff fa98 	bl	1000a670 <quorem>
1000b140:	1c03      	adds	r3, r0, #0
1000b142:	900f      	str	r0, [sp, #60]	; 0x3c
1000b144:	3330      	adds	r3, #48	; 0x30
1000b146:	1c31      	adds	r1, r6, #0
1000b148:	1c20      	adds	r0, r4, #0
1000b14a:	930d      	str	r3, [sp, #52]	; 0x34
1000b14c:	f000 fe9a 	bl	1000be84 <__mcmp>
1000b150:	1c39      	adds	r1, r7, #0
1000b152:	900b      	str	r0, [sp, #44]	; 0x2c
1000b154:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000b156:	9808      	ldr	r0, [sp, #32]
1000b158:	f000 feaf 	bl	1000beba <__mdiff>
1000b15c:	2301      	movs	r3, #1
1000b15e:	9304      	str	r3, [sp, #16]
1000b160:	68c3      	ldr	r3, [r0, #12]
1000b162:	1c05      	adds	r5, r0, #0
1000b164:	2b00      	cmp	r3, #0
1000b166:	d104      	bne.n	1000b172 <_dtoa_r+0x9f2>
1000b168:	1c20      	adds	r0, r4, #0
1000b16a:	1c29      	adds	r1, r5, #0
1000b16c:	f000 fe8a 	bl	1000be84 <__mcmp>
1000b170:	9004      	str	r0, [sp, #16]
1000b172:	9808      	ldr	r0, [sp, #32]
1000b174:	1c29      	adds	r1, r5, #0
1000b176:	f000 fc6c 	bl	1000ba52 <_Bfree>
1000b17a:	9b04      	ldr	r3, [sp, #16]
1000b17c:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000b17e:	4313      	orrs	r3, r2
1000b180:	d110      	bne.n	1000b1a4 <_dtoa_r+0xa24>
1000b182:	9a06      	ldr	r2, [sp, #24]
1000b184:	3301      	adds	r3, #1
1000b186:	4213      	tst	r3, r2
1000b188:	d10c      	bne.n	1000b1a4 <_dtoa_r+0xa24>
1000b18a:	980d      	ldr	r0, [sp, #52]	; 0x34
1000b18c:	940a      	str	r4, [sp, #40]	; 0x28
1000b18e:	2839      	cmp	r0, #57	; 0x39
1000b190:	d03d      	beq.n	1000b20e <_dtoa_r+0xa8e>
1000b192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b194:	2b00      	cmp	r3, #0
1000b196:	dd01      	ble.n	1000b19c <_dtoa_r+0xa1c>
1000b198:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000b19a:	3031      	adds	r0, #49	; 0x31
1000b19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b19e:	3301      	adds	r3, #1
1000b1a0:	9304      	str	r3, [sp, #16]
1000b1a2:	e03e      	b.n	1000b222 <_dtoa_r+0xaa2>
1000b1a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b1a6:	2b00      	cmp	r3, #0
1000b1a8:	da05      	bge.n	1000b1b6 <_dtoa_r+0xa36>
1000b1aa:	9b04      	ldr	r3, [sp, #16]
1000b1ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000b1ae:	940a      	str	r4, [sp, #40]	; 0x28
1000b1b0:	2b00      	cmp	r3, #0
1000b1b2:	dc09      	bgt.n	1000b1c8 <_dtoa_r+0xa48>
1000b1b4:	e01c      	b.n	1000b1f0 <_dtoa_r+0xa70>
1000b1b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000b1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b1ba:	431d      	orrs	r5, r3
1000b1bc:	d11e      	bne.n	1000b1fc <_dtoa_r+0xa7c>
1000b1be:	2301      	movs	r3, #1
1000b1c0:	9a06      	ldr	r2, [sp, #24]
1000b1c2:	4213      	tst	r3, r2
1000b1c4:	d11a      	bne.n	1000b1fc <_dtoa_r+0xa7c>
1000b1c6:	e7f0      	b.n	1000b1aa <_dtoa_r+0xa2a>
1000b1c8:	1c21      	adds	r1, r4, #0
1000b1ca:	9808      	ldr	r0, [sp, #32]
1000b1cc:	2201      	movs	r2, #1
1000b1ce:	f000 fe07 	bl	1000bde0 <__lshift>
1000b1d2:	1c39      	adds	r1, r7, #0
1000b1d4:	900a      	str	r0, [sp, #40]	; 0x28
1000b1d6:	f000 fe55 	bl	1000be84 <__mcmp>
1000b1da:	2800      	cmp	r0, #0
1000b1dc:	dc03      	bgt.n	1000b1e6 <_dtoa_r+0xa66>
1000b1de:	d107      	bne.n	1000b1f0 <_dtoa_r+0xa70>
1000b1e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b1e2:	07db      	lsls	r3, r3, #31
1000b1e4:	d504      	bpl.n	1000b1f0 <_dtoa_r+0xa70>
1000b1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b1e8:	2b39      	cmp	r3, #57	; 0x39
1000b1ea:	d010      	beq.n	1000b20e <_dtoa_r+0xa8e>
1000b1ec:	1c1d      	adds	r5, r3, #0
1000b1ee:	3501      	adds	r5, #1
1000b1f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1f2:	3301      	adds	r3, #1
1000b1f4:	9304      	str	r3, [sp, #16]
1000b1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1f8:	701d      	strb	r5, [r3, #0]
1000b1fa:	e088      	b.n	1000b30e <_dtoa_r+0xb8e>
1000b1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1fe:	1c5d      	adds	r5, r3, #1
1000b200:	9b04      	ldr	r3, [sp, #16]
1000b202:	2b00      	cmp	r3, #0
1000b204:	dd10      	ble.n	1000b228 <_dtoa_r+0xaa8>
1000b206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b208:	940a      	str	r4, [sp, #40]	; 0x28
1000b20a:	2b39      	cmp	r3, #57	; 0x39
1000b20c:	d106      	bne.n	1000b21c <_dtoa_r+0xa9c>
1000b20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b212:	3301      	adds	r3, #1
1000b214:	9304      	str	r3, [sp, #16]
1000b216:	2339      	movs	r3, #57	; 0x39
1000b218:	7013      	strb	r3, [r2, #0]
1000b21a:	e060      	b.n	1000b2de <_dtoa_r+0xb5e>
1000b21c:	980d      	ldr	r0, [sp, #52]	; 0x34
1000b21e:	9504      	str	r5, [sp, #16]
1000b220:	3001      	adds	r0, #1
1000b222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b224:	7018      	strb	r0, [r3, #0]
1000b226:	e072      	b.n	1000b30e <_dtoa_r+0xb8e>
1000b228:	466a      	mov	r2, sp
1000b22a:	2134      	movs	r1, #52	; 0x34
1000b22c:	1852      	adds	r2, r2, r1
1000b22e:	7812      	ldrb	r2, [r2, #0]
1000b230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b232:	9504      	str	r5, [sp, #16]
1000b234:	701a      	strb	r2, [r3, #0]
1000b236:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000b238:	4293      	cmp	r3, r2
1000b23a:	d03f      	beq.n	1000b2bc <_dtoa_r+0xb3c>
1000b23c:	1c21      	adds	r1, r4, #0
1000b23e:	220a      	movs	r2, #10
1000b240:	2300      	movs	r3, #0
1000b242:	9808      	ldr	r0, [sp, #32]
1000b244:	f000 fc1e 	bl	1000ba84 <__multadd>
1000b248:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b24a:	1c04      	adds	r4, r0, #0
1000b24c:	1c31      	adds	r1, r6, #0
1000b24e:	9808      	ldr	r0, [sp, #32]
1000b250:	220a      	movs	r2, #10
1000b252:	429e      	cmp	r6, r3
1000b254:	d105      	bne.n	1000b262 <_dtoa_r+0xae2>
1000b256:	2300      	movs	r3, #0
1000b258:	f000 fc14 	bl	1000ba84 <__multadd>
1000b25c:	1c06      	adds	r6, r0, #0
1000b25e:	9009      	str	r0, [sp, #36]	; 0x24
1000b260:	e00a      	b.n	1000b278 <_dtoa_r+0xaf8>
1000b262:	2300      	movs	r3, #0
1000b264:	f000 fc0e 	bl	1000ba84 <__multadd>
1000b268:	9909      	ldr	r1, [sp, #36]	; 0x24
1000b26a:	1c06      	adds	r6, r0, #0
1000b26c:	220a      	movs	r2, #10
1000b26e:	9808      	ldr	r0, [sp, #32]
1000b270:	2300      	movs	r3, #0
1000b272:	f000 fc07 	bl	1000ba84 <__multadd>
1000b276:	9009      	str	r0, [sp, #36]	; 0x24
1000b278:	950e      	str	r5, [sp, #56]	; 0x38
1000b27a:	e75d      	b.n	1000b138 <_dtoa_r+0x9b8>
1000b27c:	1c21      	adds	r1, r4, #0
1000b27e:	9808      	ldr	r0, [sp, #32]
1000b280:	220a      	movs	r2, #10
1000b282:	2300      	movs	r3, #0
1000b284:	f000 fbfe 	bl	1000ba84 <__multadd>
1000b288:	1c04      	adds	r4, r0, #0
1000b28a:	1c20      	adds	r0, r4, #0
1000b28c:	1c39      	adds	r1, r7, #0
1000b28e:	f7ff f9ef 	bl	1000a670 <quorem>
1000b292:	2234      	movs	r2, #52	; 0x34
1000b294:	466b      	mov	r3, sp
1000b296:	3030      	adds	r0, #48	; 0x30
1000b298:	189b      	adds	r3, r3, r2
1000b29a:	900d      	str	r0, [sp, #52]	; 0x34
1000b29c:	781b      	ldrb	r3, [r3, #0]
1000b29e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000b2a0:	702b      	strb	r3, [r5, #0]
1000b2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b2a4:	3501      	adds	r5, #1
1000b2a6:	1aeb      	subs	r3, r5, r3
1000b2a8:	4293      	cmp	r3, r2
1000b2aa:	dbe7      	blt.n	1000b27c <_dtoa_r+0xafc>
1000b2ac:	1e13      	subs	r3, r2, #0
1000b2ae:	dc00      	bgt.n	1000b2b2 <_dtoa_r+0xb32>
1000b2b0:	2301      	movs	r3, #1
1000b2b2:	9609      	str	r6, [sp, #36]	; 0x24
1000b2b4:	2600      	movs	r6, #0
1000b2b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b2b8:	18d3      	adds	r3, r2, r3
1000b2ba:	9304      	str	r3, [sp, #16]
1000b2bc:	1c21      	adds	r1, r4, #0
1000b2be:	9808      	ldr	r0, [sp, #32]
1000b2c0:	2201      	movs	r2, #1
1000b2c2:	f000 fd8d 	bl	1000bde0 <__lshift>
1000b2c6:	1c39      	adds	r1, r7, #0
1000b2c8:	900a      	str	r0, [sp, #40]	; 0x28
1000b2ca:	f000 fddb 	bl	1000be84 <__mcmp>
1000b2ce:	2800      	cmp	r0, #0
1000b2d0:	dc05      	bgt.n	1000b2de <_dtoa_r+0xb5e>
1000b2d2:	d115      	bne.n	1000b300 <_dtoa_r+0xb80>
1000b2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b2d6:	07db      	lsls	r3, r3, #31
1000b2d8:	d401      	bmi.n	1000b2de <_dtoa_r+0xb5e>
1000b2da:	e011      	b.n	1000b300 <_dtoa_r+0xb80>
1000b2dc:	9304      	str	r3, [sp, #16]
1000b2de:	9b04      	ldr	r3, [sp, #16]
1000b2e0:	3b01      	subs	r3, #1
1000b2e2:	781a      	ldrb	r2, [r3, #0]
1000b2e4:	2a39      	cmp	r2, #57	; 0x39
1000b2e6:	d108      	bne.n	1000b2fa <_dtoa_r+0xb7a>
1000b2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b2ea:	4293      	cmp	r3, r2
1000b2ec:	d1f6      	bne.n	1000b2dc <_dtoa_r+0xb5c>
1000b2ee:	9b03      	ldr	r3, [sp, #12]
1000b2f0:	3301      	adds	r3, #1
1000b2f2:	9303      	str	r3, [sp, #12]
1000b2f4:	2331      	movs	r3, #49	; 0x31
1000b2f6:	7013      	strb	r3, [r2, #0]
1000b2f8:	e009      	b.n	1000b30e <_dtoa_r+0xb8e>
1000b2fa:	3201      	adds	r2, #1
1000b2fc:	701a      	strb	r2, [r3, #0]
1000b2fe:	e006      	b.n	1000b30e <_dtoa_r+0xb8e>
1000b300:	9b04      	ldr	r3, [sp, #16]
1000b302:	3b01      	subs	r3, #1
1000b304:	781a      	ldrb	r2, [r3, #0]
1000b306:	2a30      	cmp	r2, #48	; 0x30
1000b308:	d101      	bne.n	1000b30e <_dtoa_r+0xb8e>
1000b30a:	9304      	str	r3, [sp, #16]
1000b30c:	e7f8      	b.n	1000b300 <_dtoa_r+0xb80>
1000b30e:	9808      	ldr	r0, [sp, #32]
1000b310:	1c39      	adds	r1, r7, #0
1000b312:	f000 fb9e 	bl	1000ba52 <_Bfree>
1000b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b318:	2b00      	cmp	r3, #0
1000b31a:	d00e      	beq.n	1000b33a <_dtoa_r+0xbba>
1000b31c:	2e00      	cmp	r6, #0
1000b31e:	d005      	beq.n	1000b32c <_dtoa_r+0xbac>
1000b320:	429e      	cmp	r6, r3
1000b322:	d003      	beq.n	1000b32c <_dtoa_r+0xbac>
1000b324:	9808      	ldr	r0, [sp, #32]
1000b326:	1c31      	adds	r1, r6, #0
1000b328:	f000 fb93 	bl	1000ba52 <_Bfree>
1000b32c:	9808      	ldr	r0, [sp, #32]
1000b32e:	9909      	ldr	r1, [sp, #36]	; 0x24
1000b330:	f000 fb8f 	bl	1000ba52 <_Bfree>
1000b334:	e001      	b.n	1000b33a <_dtoa_r+0xbba>
1000b336:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b338:	9303      	str	r3, [sp, #12]
1000b33a:	9808      	ldr	r0, [sp, #32]
1000b33c:	990a      	ldr	r1, [sp, #40]	; 0x28
1000b33e:	f000 fb88 	bl	1000ba52 <_Bfree>
1000b342:	2300      	movs	r3, #0
1000b344:	9a04      	ldr	r2, [sp, #16]
1000b346:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b348:	7013      	strb	r3, [r2, #0]
1000b34a:	9b03      	ldr	r3, [sp, #12]
1000b34c:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000b34e:	3301      	adds	r3, #1
1000b350:	6013      	str	r3, [r2, #0]
1000b352:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000b354:	2b00      	cmp	r3, #0
1000b356:	d010      	beq.n	1000b37a <_dtoa_r+0xbfa>
1000b358:	9a04      	ldr	r2, [sp, #16]
1000b35a:	601a      	str	r2, [r3, #0]
1000b35c:	e00d      	b.n	1000b37a <_dtoa_r+0xbfa>
1000b35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b360:	2b00      	cmp	r3, #0
1000b362:	dd00      	ble.n	1000b366 <_dtoa_r+0xbe6>
1000b364:	e6bd      	b.n	1000b0e2 <_dtoa_r+0x962>
1000b366:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b368:	2b02      	cmp	r3, #2
1000b36a:	dd00      	ble.n	1000b36e <_dtoa_r+0xbee>
1000b36c:	e68a      	b.n	1000b084 <_dtoa_r+0x904>
1000b36e:	e6b8      	b.n	1000b0e2 <_dtoa_r+0x962>
1000b370:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b372:	2b02      	cmp	r3, #2
1000b374:	dd00      	ble.n	1000b378 <_dtoa_r+0xbf8>
1000b376:	e685      	b.n	1000b084 <_dtoa_r+0x904>
1000b378:	e6b8      	b.n	1000b0ec <_dtoa_r+0x96c>
1000b37a:	b01b      	add	sp, #108	; 0x6c
1000b37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b37e:	46c0      	nop			; (mov r8, r8)

1000b380 <rshift>:
1000b380:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b382:	1c06      	adds	r6, r0, #0
1000b384:	6905      	ldr	r5, [r0, #16]
1000b386:	3614      	adds	r6, #20
1000b388:	114a      	asrs	r2, r1, #5
1000b38a:	1c34      	adds	r4, r6, #0
1000b38c:	42aa      	cmp	r2, r5
1000b38e:	da25      	bge.n	1000b3dc <rshift+0x5c>
1000b390:	231f      	movs	r3, #31
1000b392:	00ad      	lsls	r5, r5, #2
1000b394:	0092      	lsls	r2, r2, #2
1000b396:	4019      	ands	r1, r3
1000b398:	1975      	adds	r5, r6, r5
1000b39a:	18b2      	adds	r2, r6, r2
1000b39c:	1c33      	adds	r3, r6, #0
1000b39e:	2900      	cmp	r1, #0
1000b3a0:	d016      	beq.n	1000b3d0 <rshift+0x50>
1000b3a2:	1c13      	adds	r3, r2, #0
1000b3a4:	cb04      	ldmia	r3!, {r2}
1000b3a6:	2720      	movs	r7, #32
1000b3a8:	40ca      	lsrs	r2, r1
1000b3aa:	46b4      	mov	ip, r6
1000b3ac:	1a7f      	subs	r7, r7, r1
1000b3ae:	4664      	mov	r4, ip
1000b3b0:	42ab      	cmp	r3, r5
1000b3b2:	d208      	bcs.n	1000b3c6 <rshift+0x46>
1000b3b4:	681c      	ldr	r4, [r3, #0]
1000b3b6:	40bc      	lsls	r4, r7
1000b3b8:	4322      	orrs	r2, r4
1000b3ba:	4664      	mov	r4, ip
1000b3bc:	c404      	stmia	r4!, {r2}
1000b3be:	cb04      	ldmia	r3!, {r2}
1000b3c0:	46a4      	mov	ip, r4
1000b3c2:	40ca      	lsrs	r2, r1
1000b3c4:	e7f3      	b.n	1000b3ae <rshift+0x2e>
1000b3c6:	6022      	str	r2, [r4, #0]
1000b3c8:	2a00      	cmp	r2, #0
1000b3ca:	d007      	beq.n	1000b3dc <rshift+0x5c>
1000b3cc:	3404      	adds	r4, #4
1000b3ce:	e005      	b.n	1000b3dc <rshift+0x5c>
1000b3d0:	1c1c      	adds	r4, r3, #0
1000b3d2:	42aa      	cmp	r2, r5
1000b3d4:	d202      	bcs.n	1000b3dc <rshift+0x5c>
1000b3d6:	ca02      	ldmia	r2!, {r1}
1000b3d8:	c302      	stmia	r3!, {r1}
1000b3da:	e7f9      	b.n	1000b3d0 <rshift+0x50>
1000b3dc:	1ba3      	subs	r3, r4, r6
1000b3de:	109b      	asrs	r3, r3, #2
1000b3e0:	6103      	str	r3, [r0, #16]
1000b3e2:	d100      	bne.n	1000b3e6 <rshift+0x66>
1000b3e4:	6143      	str	r3, [r0, #20]
1000b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b3e8 <__hexdig_fun>:
1000b3e8:	1c03      	adds	r3, r0, #0
1000b3ea:	3b30      	subs	r3, #48	; 0x30
1000b3ec:	2b09      	cmp	r3, #9
1000b3ee:	d801      	bhi.n	1000b3f4 <__hexdig_fun+0xc>
1000b3f0:	3820      	subs	r0, #32
1000b3f2:	e00b      	b.n	1000b40c <__hexdig_fun+0x24>
1000b3f4:	1c03      	adds	r3, r0, #0
1000b3f6:	3b61      	subs	r3, #97	; 0x61
1000b3f8:	2b05      	cmp	r3, #5
1000b3fa:	d801      	bhi.n	1000b400 <__hexdig_fun+0x18>
1000b3fc:	3847      	subs	r0, #71	; 0x47
1000b3fe:	e005      	b.n	1000b40c <__hexdig_fun+0x24>
1000b400:	1c02      	adds	r2, r0, #0
1000b402:	3a41      	subs	r2, #65	; 0x41
1000b404:	2300      	movs	r3, #0
1000b406:	2a05      	cmp	r2, #5
1000b408:	d801      	bhi.n	1000b40e <__hexdig_fun+0x26>
1000b40a:	3827      	subs	r0, #39	; 0x27
1000b40c:	b2c3      	uxtb	r3, r0
1000b40e:	1c18      	adds	r0, r3, #0
1000b410:	4770      	bx	lr

1000b412 <__gethex>:
1000b412:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b414:	b08d      	sub	sp, #52	; 0x34
1000b416:	9109      	str	r1, [sp, #36]	; 0x24
1000b418:	9202      	str	r2, [sp, #8]
1000b41a:	930a      	str	r3, [sp, #40]	; 0x28
1000b41c:	9005      	str	r0, [sp, #20]
1000b41e:	f000 fac7 	bl	1000b9b0 <_localeconv_r>
1000b422:	6803      	ldr	r3, [r0, #0]
1000b424:	1c18      	adds	r0, r3, #0
1000b426:	9307      	str	r3, [sp, #28]
1000b428:	f7fe fa46 	bl	100098b8 <strlen>
1000b42c:	9b07      	ldr	r3, [sp, #28]
1000b42e:	9004      	str	r0, [sp, #16]
1000b430:	181b      	adds	r3, r3, r0
1000b432:	3b01      	subs	r3, #1
1000b434:	781b      	ldrb	r3, [r3, #0]
1000b436:	930b      	str	r3, [sp, #44]	; 0x2c
1000b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b43a:	6819      	ldr	r1, [r3, #0]
1000b43c:	1c8a      	adds	r2, r1, #2
1000b43e:	9201      	str	r2, [sp, #4]
1000b440:	9801      	ldr	r0, [sp, #4]
1000b442:	1a53      	subs	r3, r2, r1
1000b444:	7800      	ldrb	r0, [r0, #0]
1000b446:	3b02      	subs	r3, #2
1000b448:	3201      	adds	r2, #1
1000b44a:	2830      	cmp	r0, #48	; 0x30
1000b44c:	d0f7      	beq.n	1000b43e <__gethex+0x2c>
1000b44e:	9308      	str	r3, [sp, #32]
1000b450:	f7ff ffca 	bl	1000b3e8 <__hexdig_fun>
1000b454:	1e06      	subs	r6, r0, #0
1000b456:	d120      	bne.n	1000b49a <__gethex+0x88>
1000b458:	9801      	ldr	r0, [sp, #4]
1000b45a:	9907      	ldr	r1, [sp, #28]
1000b45c:	9a04      	ldr	r2, [sp, #16]
1000b45e:	f001 f8d7 	bl	1000c610 <strncmp>
1000b462:	2800      	cmp	r0, #0
1000b464:	d13c      	bne.n	1000b4e0 <__gethex+0xce>
1000b466:	9b01      	ldr	r3, [sp, #4]
1000b468:	9a04      	ldr	r2, [sp, #16]
1000b46a:	189c      	adds	r4, r3, r2
1000b46c:	7820      	ldrb	r0, [r4, #0]
1000b46e:	f7ff ffbb 	bl	1000b3e8 <__hexdig_fun>
1000b472:	2800      	cmp	r0, #0
1000b474:	d037      	beq.n	1000b4e6 <__gethex+0xd4>
1000b476:	9401      	str	r4, [sp, #4]
1000b478:	9b01      	ldr	r3, [sp, #4]
1000b47a:	7818      	ldrb	r0, [r3, #0]
1000b47c:	2830      	cmp	r0, #48	; 0x30
1000b47e:	d103      	bne.n	1000b488 <__gethex+0x76>
1000b480:	9b01      	ldr	r3, [sp, #4]
1000b482:	3301      	adds	r3, #1
1000b484:	9301      	str	r3, [sp, #4]
1000b486:	e7f7      	b.n	1000b478 <__gethex+0x66>
1000b488:	f7ff ffae 	bl	1000b3e8 <__hexdig_fun>
1000b48c:	4243      	negs	r3, r0
1000b48e:	4143      	adcs	r3, r0
1000b490:	9303      	str	r3, [sp, #12]
1000b492:	2301      	movs	r3, #1
1000b494:	1c26      	adds	r6, r4, #0
1000b496:	9308      	str	r3, [sp, #32]
1000b498:	e002      	b.n	1000b4a0 <__gethex+0x8e>
1000b49a:	2300      	movs	r3, #0
1000b49c:	1c1e      	adds	r6, r3, #0
1000b49e:	9303      	str	r3, [sp, #12]
1000b4a0:	9c01      	ldr	r4, [sp, #4]
1000b4a2:	7820      	ldrb	r0, [r4, #0]
1000b4a4:	f7ff ffa0 	bl	1000b3e8 <__hexdig_fun>
1000b4a8:	2800      	cmp	r0, #0
1000b4aa:	d001      	beq.n	1000b4b0 <__gethex+0x9e>
1000b4ac:	3401      	adds	r4, #1
1000b4ae:	e7f8      	b.n	1000b4a2 <__gethex+0x90>
1000b4b0:	1c20      	adds	r0, r4, #0
1000b4b2:	9907      	ldr	r1, [sp, #28]
1000b4b4:	9a04      	ldr	r2, [sp, #16]
1000b4b6:	f001 f8ab 	bl	1000c610 <strncmp>
1000b4ba:	2800      	cmp	r0, #0
1000b4bc:	d10b      	bne.n	1000b4d6 <__gethex+0xc4>
1000b4be:	2e00      	cmp	r6, #0
1000b4c0:	d10b      	bne.n	1000b4da <__gethex+0xc8>
1000b4c2:	9b04      	ldr	r3, [sp, #16]
1000b4c4:	18e6      	adds	r6, r4, r3
1000b4c6:	1c34      	adds	r4, r6, #0
1000b4c8:	7820      	ldrb	r0, [r4, #0]
1000b4ca:	f7ff ff8d 	bl	1000b3e8 <__hexdig_fun>
1000b4ce:	2800      	cmp	r0, #0
1000b4d0:	d001      	beq.n	1000b4d6 <__gethex+0xc4>
1000b4d2:	3401      	adds	r4, #1
1000b4d4:	e7f8      	b.n	1000b4c8 <__gethex+0xb6>
1000b4d6:	1e37      	subs	r7, r6, #0
1000b4d8:	d008      	beq.n	1000b4ec <__gethex+0xda>
1000b4da:	1b36      	subs	r6, r6, r4
1000b4dc:	00b7      	lsls	r7, r6, #2
1000b4de:	e005      	b.n	1000b4ec <__gethex+0xda>
1000b4e0:	9c01      	ldr	r4, [sp, #4]
1000b4e2:	1c37      	adds	r7, r6, #0
1000b4e4:	e000      	b.n	1000b4e8 <__gethex+0xd6>
1000b4e6:	1c07      	adds	r7, r0, #0
1000b4e8:	2301      	movs	r3, #1
1000b4ea:	9303      	str	r3, [sp, #12]
1000b4ec:	7823      	ldrb	r3, [r4, #0]
1000b4ee:	2b50      	cmp	r3, #80	; 0x50
1000b4f0:	d001      	beq.n	1000b4f6 <__gethex+0xe4>
1000b4f2:	2b70      	cmp	r3, #112	; 0x70
1000b4f4:	d128      	bne.n	1000b548 <__gethex+0x136>
1000b4f6:	7863      	ldrb	r3, [r4, #1]
1000b4f8:	2b2b      	cmp	r3, #43	; 0x2b
1000b4fa:	d007      	beq.n	1000b50c <__gethex+0xfa>
1000b4fc:	2b2d      	cmp	r3, #45	; 0x2d
1000b4fe:	d003      	beq.n	1000b508 <__gethex+0xf6>
1000b500:	2300      	movs	r3, #0
1000b502:	1c65      	adds	r5, r4, #1
1000b504:	9306      	str	r3, [sp, #24]
1000b506:	e004      	b.n	1000b512 <__gethex+0x100>
1000b508:	2301      	movs	r3, #1
1000b50a:	e000      	b.n	1000b50e <__gethex+0xfc>
1000b50c:	2300      	movs	r3, #0
1000b50e:	9306      	str	r3, [sp, #24]
1000b510:	1ca5      	adds	r5, r4, #2
1000b512:	7828      	ldrb	r0, [r5, #0]
1000b514:	f7ff ff68 	bl	1000b3e8 <__hexdig_fun>
1000b518:	1e43      	subs	r3, r0, #1
1000b51a:	b2db      	uxtb	r3, r3
1000b51c:	2b18      	cmp	r3, #24
1000b51e:	d813      	bhi.n	1000b548 <__gethex+0x136>
1000b520:	3810      	subs	r0, #16
1000b522:	3501      	adds	r5, #1
1000b524:	1c06      	adds	r6, r0, #0
1000b526:	7828      	ldrb	r0, [r5, #0]
1000b528:	f7ff ff5e 	bl	1000b3e8 <__hexdig_fun>
1000b52c:	1e43      	subs	r3, r0, #1
1000b52e:	b2db      	uxtb	r3, r3
1000b530:	2b18      	cmp	r3, #24
1000b532:	d803      	bhi.n	1000b53c <__gethex+0x12a>
1000b534:	230a      	movs	r3, #10
1000b536:	435e      	muls	r6, r3
1000b538:	1830      	adds	r0, r6, r0
1000b53a:	e7f1      	b.n	1000b520 <__gethex+0x10e>
1000b53c:	9b06      	ldr	r3, [sp, #24]
1000b53e:	2b00      	cmp	r3, #0
1000b540:	d000      	beq.n	1000b544 <__gethex+0x132>
1000b542:	4276      	negs	r6, r6
1000b544:	19bf      	adds	r7, r7, r6
1000b546:	e000      	b.n	1000b54a <__gethex+0x138>
1000b548:	1c25      	adds	r5, r4, #0
1000b54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b54c:	601d      	str	r5, [r3, #0]
1000b54e:	9b03      	ldr	r3, [sp, #12]
1000b550:	2b00      	cmp	r3, #0
1000b552:	d006      	beq.n	1000b562 <__gethex+0x150>
1000b554:	2000      	movs	r0, #0
1000b556:	9b08      	ldr	r3, [sp, #32]
1000b558:	4283      	cmp	r3, r0
1000b55a:	d000      	beq.n	1000b55e <__gethex+0x14c>
1000b55c:	e17b      	b.n	1000b856 <__gethex+0x444>
1000b55e:	3006      	adds	r0, #6
1000b560:	e179      	b.n	1000b856 <__gethex+0x444>
1000b562:	9b01      	ldr	r3, [sp, #4]
1000b564:	9903      	ldr	r1, [sp, #12]
1000b566:	1ae3      	subs	r3, r4, r3
1000b568:	3b01      	subs	r3, #1
1000b56a:	2b07      	cmp	r3, #7
1000b56c:	dd02      	ble.n	1000b574 <__gethex+0x162>
1000b56e:	3101      	adds	r1, #1
1000b570:	105b      	asrs	r3, r3, #1
1000b572:	e7fa      	b.n	1000b56a <__gethex+0x158>
1000b574:	9805      	ldr	r0, [sp, #20]
1000b576:	f000 fa34 	bl	1000b9e2 <_Balloc>
1000b57a:	1c03      	adds	r3, r0, #0
1000b57c:	2600      	movs	r6, #0
1000b57e:	1c05      	adds	r5, r0, #0
1000b580:	3314      	adds	r3, #20
1000b582:	9303      	str	r3, [sp, #12]
1000b584:	9308      	str	r3, [sp, #32]
1000b586:	9606      	str	r6, [sp, #24]
1000b588:	9b01      	ldr	r3, [sp, #4]
1000b58a:	429c      	cmp	r4, r3
1000b58c:	d92a      	bls.n	1000b5e4 <__gethex+0x1d2>
1000b58e:	1e63      	subs	r3, r4, #1
1000b590:	9309      	str	r3, [sp, #36]	; 0x24
1000b592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000b594:	781b      	ldrb	r3, [r3, #0]
1000b596:	4293      	cmp	r3, r2
1000b598:	d009      	beq.n	1000b5ae <__gethex+0x19c>
1000b59a:	9b06      	ldr	r3, [sp, #24]
1000b59c:	2b20      	cmp	r3, #32
1000b59e:	d114      	bne.n	1000b5ca <__gethex+0x1b8>
1000b5a0:	9b08      	ldr	r3, [sp, #32]
1000b5a2:	601e      	str	r6, [r3, #0]
1000b5a4:	2600      	movs	r6, #0
1000b5a6:	3304      	adds	r3, #4
1000b5a8:	9308      	str	r3, [sp, #32]
1000b5aa:	9606      	str	r6, [sp, #24]
1000b5ac:	e00d      	b.n	1000b5ca <__gethex+0x1b8>
1000b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b5b0:	9a04      	ldr	r2, [sp, #16]
1000b5b2:	1a9c      	subs	r4, r3, r2
1000b5b4:	9b01      	ldr	r3, [sp, #4]
1000b5b6:	3401      	adds	r4, #1
1000b5b8:	429c      	cmp	r4, r3
1000b5ba:	d3ee      	bcc.n	1000b59a <__gethex+0x188>
1000b5bc:	1c20      	adds	r0, r4, #0
1000b5be:	9907      	ldr	r1, [sp, #28]
1000b5c0:	f001 f826 	bl	1000c610 <strncmp>
1000b5c4:	2800      	cmp	r0, #0
1000b5c6:	d0df      	beq.n	1000b588 <__gethex+0x176>
1000b5c8:	e7e7      	b.n	1000b59a <__gethex+0x188>
1000b5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b5cc:	7818      	ldrb	r0, [r3, #0]
1000b5ce:	f7ff ff0b 	bl	1000b3e8 <__hexdig_fun>
1000b5d2:	230f      	movs	r3, #15
1000b5d4:	4018      	ands	r0, r3
1000b5d6:	9b06      	ldr	r3, [sp, #24]
1000b5d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000b5da:	4098      	lsls	r0, r3
1000b5dc:	3304      	adds	r3, #4
1000b5de:	4306      	orrs	r6, r0
1000b5e0:	9306      	str	r3, [sp, #24]
1000b5e2:	e7d1      	b.n	1000b588 <__gethex+0x176>
1000b5e4:	9c08      	ldr	r4, [sp, #32]
1000b5e6:	9b03      	ldr	r3, [sp, #12]
1000b5e8:	c440      	stmia	r4!, {r6}
1000b5ea:	1ae4      	subs	r4, r4, r3
1000b5ec:	10a4      	asrs	r4, r4, #2
1000b5ee:	612c      	str	r4, [r5, #16]
1000b5f0:	1c30      	adds	r0, r6, #0
1000b5f2:	f000 fac3 	bl	1000bb7c <__hi0bits>
1000b5f6:	9b02      	ldr	r3, [sp, #8]
1000b5f8:	0164      	lsls	r4, r4, #5
1000b5fa:	681b      	ldr	r3, [r3, #0]
1000b5fc:	1a26      	subs	r6, r4, r0
1000b5fe:	9301      	str	r3, [sp, #4]
1000b600:	429e      	cmp	r6, r3
1000b602:	dd25      	ble.n	1000b650 <__gethex+0x23e>
1000b604:	1af6      	subs	r6, r6, r3
1000b606:	1c28      	adds	r0, r5, #0
1000b608:	1c31      	adds	r1, r6, #0
1000b60a:	f000 fdcb 	bl	1000c1a4 <__any_on>
1000b60e:	2400      	movs	r4, #0
1000b610:	42a0      	cmp	r0, r4
1000b612:	d017      	beq.n	1000b644 <__gethex+0x232>
1000b614:	231f      	movs	r3, #31
1000b616:	3401      	adds	r4, #1
1000b618:	1c20      	adds	r0, r4, #0
1000b61a:	1e72      	subs	r2, r6, #1
1000b61c:	4013      	ands	r3, r2
1000b61e:	4098      	lsls	r0, r3
1000b620:	1c03      	adds	r3, r0, #0
1000b622:	1151      	asrs	r1, r2, #5
1000b624:	9803      	ldr	r0, [sp, #12]
1000b626:	0089      	lsls	r1, r1, #2
1000b628:	5809      	ldr	r1, [r1, r0]
1000b62a:	4219      	tst	r1, r3
1000b62c:	d00a      	beq.n	1000b644 <__gethex+0x232>
1000b62e:	42a2      	cmp	r2, r4
1000b630:	dc01      	bgt.n	1000b636 <__gethex+0x224>
1000b632:	2402      	movs	r4, #2
1000b634:	e006      	b.n	1000b644 <__gethex+0x232>
1000b636:	1eb1      	subs	r1, r6, #2
1000b638:	1c28      	adds	r0, r5, #0
1000b63a:	f000 fdb3 	bl	1000c1a4 <__any_on>
1000b63e:	2800      	cmp	r0, #0
1000b640:	d0f7      	beq.n	1000b632 <__gethex+0x220>
1000b642:	2403      	movs	r4, #3
1000b644:	1c28      	adds	r0, r5, #0
1000b646:	1c31      	adds	r1, r6, #0
1000b648:	f7ff fe9a 	bl	1000b380 <rshift>
1000b64c:	19bf      	adds	r7, r7, r6
1000b64e:	e00e      	b.n	1000b66e <__gethex+0x25c>
1000b650:	9b01      	ldr	r3, [sp, #4]
1000b652:	2400      	movs	r4, #0
1000b654:	429e      	cmp	r6, r3
1000b656:	da0a      	bge.n	1000b66e <__gethex+0x25c>
1000b658:	1b9e      	subs	r6, r3, r6
1000b65a:	1c29      	adds	r1, r5, #0
1000b65c:	9805      	ldr	r0, [sp, #20]
1000b65e:	1c32      	adds	r2, r6, #0
1000b660:	f000 fbbe 	bl	1000bde0 <__lshift>
1000b664:	1c03      	adds	r3, r0, #0
1000b666:	1c05      	adds	r5, r0, #0
1000b668:	3314      	adds	r3, #20
1000b66a:	1bbf      	subs	r7, r7, r6
1000b66c:	9303      	str	r3, [sp, #12]
1000b66e:	9b02      	ldr	r3, [sp, #8]
1000b670:	689b      	ldr	r3, [r3, #8]
1000b672:	9304      	str	r3, [sp, #16]
1000b674:	429f      	cmp	r7, r3
1000b676:	dd08      	ble.n	1000b68a <__gethex+0x278>
1000b678:	9805      	ldr	r0, [sp, #20]
1000b67a:	1c29      	adds	r1, r5, #0
1000b67c:	f000 f9e9 	bl	1000ba52 <_Bfree>
1000b680:	2300      	movs	r3, #0
1000b682:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000b684:	20a3      	movs	r0, #163	; 0xa3
1000b686:	6013      	str	r3, [r2, #0]
1000b688:	e0e5      	b.n	1000b856 <__gethex+0x444>
1000b68a:	9b02      	ldr	r3, [sp, #8]
1000b68c:	685e      	ldr	r6, [r3, #4]
1000b68e:	42b7      	cmp	r7, r6
1000b690:	da5a      	bge.n	1000b748 <__gethex+0x336>
1000b692:	9b01      	ldr	r3, [sp, #4]
1000b694:	1bf6      	subs	r6, r6, r7
1000b696:	429e      	cmp	r6, r3
1000b698:	db32      	blt.n	1000b700 <__gethex+0x2ee>
1000b69a:	9b02      	ldr	r3, [sp, #8]
1000b69c:	68db      	ldr	r3, [r3, #12]
1000b69e:	2b02      	cmp	r3, #2
1000b6a0:	d01e      	beq.n	1000b6e0 <__gethex+0x2ce>
1000b6a2:	2b03      	cmp	r3, #3
1000b6a4:	d020      	beq.n	1000b6e8 <__gethex+0x2d6>
1000b6a6:	2b01      	cmp	r3, #1
1000b6a8:	d121      	bne.n	1000b6ee <__gethex+0x2dc>
1000b6aa:	9b01      	ldr	r3, [sp, #4]
1000b6ac:	429e      	cmp	r6, r3
1000b6ae:	d11e      	bne.n	1000b6ee <__gethex+0x2dc>
1000b6b0:	2b01      	cmp	r3, #1
1000b6b2:	dc0d      	bgt.n	1000b6d0 <__gethex+0x2be>
1000b6b4:	9b02      	ldr	r3, [sp, #8]
1000b6b6:	2062      	movs	r0, #98	; 0x62
1000b6b8:	685b      	ldr	r3, [r3, #4]
1000b6ba:	9301      	str	r3, [sp, #4]
1000b6bc:	9a01      	ldr	r2, [sp, #4]
1000b6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000b6c0:	601a      	str	r2, [r3, #0]
1000b6c2:	2301      	movs	r3, #1
1000b6c4:	9a03      	ldr	r2, [sp, #12]
1000b6c6:	612b      	str	r3, [r5, #16]
1000b6c8:	6013      	str	r3, [r2, #0]
1000b6ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b6cc:	601d      	str	r5, [r3, #0]
1000b6ce:	e0c2      	b.n	1000b856 <__gethex+0x444>
1000b6d0:	9901      	ldr	r1, [sp, #4]
1000b6d2:	1c28      	adds	r0, r5, #0
1000b6d4:	3901      	subs	r1, #1
1000b6d6:	f000 fd65 	bl	1000c1a4 <__any_on>
1000b6da:	2800      	cmp	r0, #0
1000b6dc:	d1ea      	bne.n	1000b6b4 <__gethex+0x2a2>
1000b6de:	e006      	b.n	1000b6ee <__gethex+0x2dc>
1000b6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b6e2:	2b00      	cmp	r3, #0
1000b6e4:	d0e6      	beq.n	1000b6b4 <__gethex+0x2a2>
1000b6e6:	e002      	b.n	1000b6ee <__gethex+0x2dc>
1000b6e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b6ea:	2b00      	cmp	r3, #0
1000b6ec:	d1e2      	bne.n	1000b6b4 <__gethex+0x2a2>
1000b6ee:	9805      	ldr	r0, [sp, #20]
1000b6f0:	1c29      	adds	r1, r5, #0
1000b6f2:	f000 f9ae 	bl	1000ba52 <_Bfree>
1000b6f6:	2300      	movs	r3, #0
1000b6f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000b6fa:	2050      	movs	r0, #80	; 0x50
1000b6fc:	6013      	str	r3, [r2, #0]
1000b6fe:	e0aa      	b.n	1000b856 <__gethex+0x444>
1000b700:	1e77      	subs	r7, r6, #1
1000b702:	2c00      	cmp	r4, #0
1000b704:	d107      	bne.n	1000b716 <__gethex+0x304>
1000b706:	2f00      	cmp	r7, #0
1000b708:	dd06      	ble.n	1000b718 <__gethex+0x306>
1000b70a:	1c28      	adds	r0, r5, #0
1000b70c:	1c39      	adds	r1, r7, #0
1000b70e:	f000 fd49 	bl	1000c1a4 <__any_on>
1000b712:	1c04      	adds	r4, r0, #0
1000b714:	e000      	b.n	1000b718 <__gethex+0x306>
1000b716:	2401      	movs	r4, #1
1000b718:	231f      	movs	r3, #31
1000b71a:	117a      	asrs	r2, r7, #5
1000b71c:	401f      	ands	r7, r3
1000b71e:	3b1e      	subs	r3, #30
1000b720:	40bb      	lsls	r3, r7
1000b722:	1c1f      	adds	r7, r3, #0
1000b724:	9b03      	ldr	r3, [sp, #12]
1000b726:	0092      	lsls	r2, r2, #2
1000b728:	58d3      	ldr	r3, [r2, r3]
1000b72a:	423b      	tst	r3, r7
1000b72c:	d001      	beq.n	1000b732 <__gethex+0x320>
1000b72e:	2302      	movs	r3, #2
1000b730:	431c      	orrs	r4, r3
1000b732:	9b01      	ldr	r3, [sp, #4]
1000b734:	1c31      	adds	r1, r6, #0
1000b736:	1b9b      	subs	r3, r3, r6
1000b738:	1c28      	adds	r0, r5, #0
1000b73a:	9301      	str	r3, [sp, #4]
1000b73c:	f7ff fe20 	bl	1000b380 <rshift>
1000b740:	9b02      	ldr	r3, [sp, #8]
1000b742:	2602      	movs	r6, #2
1000b744:	685f      	ldr	r7, [r3, #4]
1000b746:	e000      	b.n	1000b74a <__gethex+0x338>
1000b748:	2601      	movs	r6, #1
1000b74a:	2c00      	cmp	r4, #0
1000b74c:	d07e      	beq.n	1000b84c <__gethex+0x43a>
1000b74e:	9b02      	ldr	r3, [sp, #8]
1000b750:	68db      	ldr	r3, [r3, #12]
1000b752:	2b02      	cmp	r3, #2
1000b754:	d00b      	beq.n	1000b76e <__gethex+0x35c>
1000b756:	2b03      	cmp	r3, #3
1000b758:	d00d      	beq.n	1000b776 <__gethex+0x364>
1000b75a:	2b01      	cmp	r3, #1
1000b75c:	d174      	bne.n	1000b848 <__gethex+0x436>
1000b75e:	07a2      	lsls	r2, r4, #30
1000b760:	d572      	bpl.n	1000b848 <__gethex+0x436>
1000b762:	9a03      	ldr	r2, [sp, #12]
1000b764:	6812      	ldr	r2, [r2, #0]
1000b766:	4314      	orrs	r4, r2
1000b768:	421c      	tst	r4, r3
1000b76a:	d107      	bne.n	1000b77c <__gethex+0x36a>
1000b76c:	e06c      	b.n	1000b848 <__gethex+0x436>
1000b76e:	2301      	movs	r3, #1
1000b770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000b772:	1a9b      	subs	r3, r3, r2
1000b774:	9313      	str	r3, [sp, #76]	; 0x4c
1000b776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b778:	2b00      	cmp	r3, #0
1000b77a:	d065      	beq.n	1000b848 <__gethex+0x436>
1000b77c:	692c      	ldr	r4, [r5, #16]
1000b77e:	00a3      	lsls	r3, r4, #2
1000b780:	9303      	str	r3, [sp, #12]
1000b782:	1c2b      	adds	r3, r5, #0
1000b784:	9a03      	ldr	r2, [sp, #12]
1000b786:	3314      	adds	r3, #20
1000b788:	1899      	adds	r1, r3, r2
1000b78a:	681a      	ldr	r2, [r3, #0]
1000b78c:	1c50      	adds	r0, r2, #1
1000b78e:	d002      	beq.n	1000b796 <__gethex+0x384>
1000b790:	3201      	adds	r2, #1
1000b792:	601a      	str	r2, [r3, #0]
1000b794:	e021      	b.n	1000b7da <__gethex+0x3c8>
1000b796:	2200      	movs	r2, #0
1000b798:	c304      	stmia	r3!, {r2}
1000b79a:	4299      	cmp	r1, r3
1000b79c:	d8f5      	bhi.n	1000b78a <__gethex+0x378>
1000b79e:	68ab      	ldr	r3, [r5, #8]
1000b7a0:	429c      	cmp	r4, r3
1000b7a2:	db12      	blt.n	1000b7ca <__gethex+0x3b8>
1000b7a4:	686b      	ldr	r3, [r5, #4]
1000b7a6:	9805      	ldr	r0, [sp, #20]
1000b7a8:	1c59      	adds	r1, r3, #1
1000b7aa:	f000 f91a 	bl	1000b9e2 <_Balloc>
1000b7ae:	1c29      	adds	r1, r5, #0
1000b7b0:	692b      	ldr	r3, [r5, #16]
1000b7b2:	9004      	str	r0, [sp, #16]
1000b7b4:	1c9a      	adds	r2, r3, #2
1000b7b6:	310c      	adds	r1, #12
1000b7b8:	0092      	lsls	r2, r2, #2
1000b7ba:	300c      	adds	r0, #12
1000b7bc:	f7fd f9e8 	bl	10008b90 <memcpy>
1000b7c0:	1c29      	adds	r1, r5, #0
1000b7c2:	9805      	ldr	r0, [sp, #20]
1000b7c4:	f000 f945 	bl	1000ba52 <_Bfree>
1000b7c8:	9d04      	ldr	r5, [sp, #16]
1000b7ca:	692b      	ldr	r3, [r5, #16]
1000b7cc:	1c5a      	adds	r2, r3, #1
1000b7ce:	612a      	str	r2, [r5, #16]
1000b7d0:	2201      	movs	r2, #1
1000b7d2:	3304      	adds	r3, #4
1000b7d4:	009b      	lsls	r3, r3, #2
1000b7d6:	18eb      	adds	r3, r5, r3
1000b7d8:	605a      	str	r2, [r3, #4]
1000b7da:	1c2b      	adds	r3, r5, #0
1000b7dc:	3314      	adds	r3, #20
1000b7de:	2e02      	cmp	r6, #2
1000b7e0:	d111      	bne.n	1000b806 <__gethex+0x3f4>
1000b7e2:	9a02      	ldr	r2, [sp, #8]
1000b7e4:	9901      	ldr	r1, [sp, #4]
1000b7e6:	6812      	ldr	r2, [r2, #0]
1000b7e8:	3a01      	subs	r2, #1
1000b7ea:	4291      	cmp	r1, r2
1000b7ec:	d12a      	bne.n	1000b844 <__gethex+0x432>
1000b7ee:	114a      	asrs	r2, r1, #5
1000b7f0:	211f      	movs	r1, #31
1000b7f2:	9801      	ldr	r0, [sp, #4]
1000b7f4:	0092      	lsls	r2, r2, #2
1000b7f6:	4001      	ands	r1, r0
1000b7f8:	2001      	movs	r0, #1
1000b7fa:	1c04      	adds	r4, r0, #0
1000b7fc:	408c      	lsls	r4, r1
1000b7fe:	58d3      	ldr	r3, [r2, r3]
1000b800:	4223      	tst	r3, r4
1000b802:	d01f      	beq.n	1000b844 <__gethex+0x432>
1000b804:	e00c      	b.n	1000b820 <__gethex+0x40e>
1000b806:	692a      	ldr	r2, [r5, #16]
1000b808:	42a2      	cmp	r2, r4
1000b80a:	dd0b      	ble.n	1000b824 <__gethex+0x412>
1000b80c:	1c28      	adds	r0, r5, #0
1000b80e:	2101      	movs	r1, #1
1000b810:	f7ff fdb6 	bl	1000b380 <rshift>
1000b814:	9b02      	ldr	r3, [sp, #8]
1000b816:	3701      	adds	r7, #1
1000b818:	689b      	ldr	r3, [r3, #8]
1000b81a:	429f      	cmp	r7, r3
1000b81c:	dd00      	ble.n	1000b820 <__gethex+0x40e>
1000b81e:	e72b      	b.n	1000b678 <__gethex+0x266>
1000b820:	2601      	movs	r6, #1
1000b822:	e00f      	b.n	1000b844 <__gethex+0x432>
1000b824:	241f      	movs	r4, #31
1000b826:	9a01      	ldr	r2, [sp, #4]
1000b828:	2601      	movs	r6, #1
1000b82a:	4022      	ands	r2, r4
1000b82c:	1e14      	subs	r4, r2, #0
1000b82e:	d009      	beq.n	1000b844 <__gethex+0x432>
1000b830:	9a03      	ldr	r2, [sp, #12]
1000b832:	189b      	adds	r3, r3, r2
1000b834:	3b04      	subs	r3, #4
1000b836:	6818      	ldr	r0, [r3, #0]
1000b838:	f000 f9a0 	bl	1000bb7c <__hi0bits>
1000b83c:	2120      	movs	r1, #32
1000b83e:	1b0c      	subs	r4, r1, r4
1000b840:	42a0      	cmp	r0, r4
1000b842:	dbe3      	blt.n	1000b80c <__gethex+0x3fa>
1000b844:	2320      	movs	r3, #32
1000b846:	e000      	b.n	1000b84a <__gethex+0x438>
1000b848:	2310      	movs	r3, #16
1000b84a:	431e      	orrs	r6, r3
1000b84c:	1c30      	adds	r0, r6, #0
1000b84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b850:	601d      	str	r5, [r3, #0]
1000b852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000b854:	601f      	str	r7, [r3, #0]
1000b856:	b00d      	add	sp, #52	; 0x34
1000b858:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b85a <L_shift>:
1000b85a:	2308      	movs	r3, #8
1000b85c:	b570      	push	{r4, r5, r6, lr}
1000b85e:	2520      	movs	r5, #32
1000b860:	1a9a      	subs	r2, r3, r2
1000b862:	0092      	lsls	r2, r2, #2
1000b864:	1aad      	subs	r5, r5, r2
1000b866:	6843      	ldr	r3, [r0, #4]
1000b868:	6806      	ldr	r6, [r0, #0]
1000b86a:	1c1c      	adds	r4, r3, #0
1000b86c:	40ac      	lsls	r4, r5
1000b86e:	40d3      	lsrs	r3, r2
1000b870:	4334      	orrs	r4, r6
1000b872:	6004      	str	r4, [r0, #0]
1000b874:	6043      	str	r3, [r0, #4]
1000b876:	3004      	adds	r0, #4
1000b878:	4288      	cmp	r0, r1
1000b87a:	d3f4      	bcc.n	1000b866 <L_shift+0xc>
1000b87c:	bd70      	pop	{r4, r5, r6, pc}

1000b87e <__hexnan>:
1000b87e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b880:	b089      	sub	sp, #36	; 0x24
1000b882:	9200      	str	r2, [sp, #0]
1000b884:	680a      	ldr	r2, [r1, #0]
1000b886:	9900      	ldr	r1, [sp, #0]
1000b888:	1153      	asrs	r3, r2, #5
1000b88a:	009b      	lsls	r3, r3, #2
1000b88c:	18cb      	adds	r3, r1, r3
1000b88e:	9302      	str	r3, [sp, #8]
1000b890:	231f      	movs	r3, #31
1000b892:	401a      	ands	r2, r3
1000b894:	9007      	str	r0, [sp, #28]
1000b896:	9205      	str	r2, [sp, #20]
1000b898:	d002      	beq.n	1000b8a0 <__hexnan+0x22>
1000b89a:	9b02      	ldr	r3, [sp, #8]
1000b89c:	3304      	adds	r3, #4
1000b89e:	9302      	str	r3, [sp, #8]
1000b8a0:	9b02      	ldr	r3, [sp, #8]
1000b8a2:	2500      	movs	r5, #0
1000b8a4:	1f1e      	subs	r6, r3, #4
1000b8a6:	1c37      	adds	r7, r6, #0
1000b8a8:	1c34      	adds	r4, r6, #0
1000b8aa:	9b07      	ldr	r3, [sp, #28]
1000b8ac:	6035      	str	r5, [r6, #0]
1000b8ae:	681b      	ldr	r3, [r3, #0]
1000b8b0:	9506      	str	r5, [sp, #24]
1000b8b2:	9303      	str	r3, [sp, #12]
1000b8b4:	9501      	str	r5, [sp, #4]
1000b8b6:	9b03      	ldr	r3, [sp, #12]
1000b8b8:	3301      	adds	r3, #1
1000b8ba:	9303      	str	r3, [sp, #12]
1000b8bc:	781b      	ldrb	r3, [r3, #0]
1000b8be:	9304      	str	r3, [sp, #16]
1000b8c0:	2b00      	cmp	r3, #0
1000b8c2:	d03b      	beq.n	1000b93c <__hexnan+0xbe>
1000b8c4:	9804      	ldr	r0, [sp, #16]
1000b8c6:	f7ff fd8f 	bl	1000b3e8 <__hexdig_fun>
1000b8ca:	2800      	cmp	r0, #0
1000b8cc:	d122      	bne.n	1000b914 <__hexnan+0x96>
1000b8ce:	9b04      	ldr	r3, [sp, #16]
1000b8d0:	2b20      	cmp	r3, #32
1000b8d2:	d817      	bhi.n	1000b904 <__hexnan+0x86>
1000b8d4:	9b06      	ldr	r3, [sp, #24]
1000b8d6:	9a01      	ldr	r2, [sp, #4]
1000b8d8:	4293      	cmp	r3, r2
1000b8da:	daec      	bge.n	1000b8b6 <__hexnan+0x38>
1000b8dc:	42bc      	cmp	r4, r7
1000b8de:	d206      	bcs.n	1000b8ee <__hexnan+0x70>
1000b8e0:	2d07      	cmp	r5, #7
1000b8e2:	dc04      	bgt.n	1000b8ee <__hexnan+0x70>
1000b8e4:	1c20      	adds	r0, r4, #0
1000b8e6:	1c39      	adds	r1, r7, #0
1000b8e8:	1c2a      	adds	r2, r5, #0
1000b8ea:	f7ff ffb6 	bl	1000b85a <L_shift>
1000b8ee:	9b00      	ldr	r3, [sp, #0]
1000b8f0:	2508      	movs	r5, #8
1000b8f2:	429c      	cmp	r4, r3
1000b8f4:	d9df      	bls.n	1000b8b6 <__hexnan+0x38>
1000b8f6:	2500      	movs	r5, #0
1000b8f8:	9b01      	ldr	r3, [sp, #4]
1000b8fa:	1f27      	subs	r7, r4, #4
1000b8fc:	603d      	str	r5, [r7, #0]
1000b8fe:	9306      	str	r3, [sp, #24]
1000b900:	1c3c      	adds	r4, r7, #0
1000b902:	e7d8      	b.n	1000b8b6 <__hexnan+0x38>
1000b904:	9b04      	ldr	r3, [sp, #16]
1000b906:	2b29      	cmp	r3, #41	; 0x29
1000b908:	d14c      	bne.n	1000b9a4 <__hexnan+0x126>
1000b90a:	9b03      	ldr	r3, [sp, #12]
1000b90c:	9a07      	ldr	r2, [sp, #28]
1000b90e:	3301      	adds	r3, #1
1000b910:	6013      	str	r3, [r2, #0]
1000b912:	e013      	b.n	1000b93c <__hexnan+0xbe>
1000b914:	9b01      	ldr	r3, [sp, #4]
1000b916:	3501      	adds	r5, #1
1000b918:	3301      	adds	r3, #1
1000b91a:	9301      	str	r3, [sp, #4]
1000b91c:	2d08      	cmp	r5, #8
1000b91e:	dd06      	ble.n	1000b92e <__hexnan+0xb0>
1000b920:	9b00      	ldr	r3, [sp, #0]
1000b922:	429c      	cmp	r4, r3
1000b924:	d9c7      	bls.n	1000b8b6 <__hexnan+0x38>
1000b926:	2300      	movs	r3, #0
1000b928:	2501      	movs	r5, #1
1000b92a:	3c04      	subs	r4, #4
1000b92c:	6023      	str	r3, [r4, #0]
1000b92e:	6823      	ldr	r3, [r4, #0]
1000b930:	011a      	lsls	r2, r3, #4
1000b932:	230f      	movs	r3, #15
1000b934:	4018      	ands	r0, r3
1000b936:	4310      	orrs	r0, r2
1000b938:	6020      	str	r0, [r4, #0]
1000b93a:	e7bc      	b.n	1000b8b6 <__hexnan+0x38>
1000b93c:	9b01      	ldr	r3, [sp, #4]
1000b93e:	2b00      	cmp	r3, #0
1000b940:	d030      	beq.n	1000b9a4 <__hexnan+0x126>
1000b942:	42bc      	cmp	r4, r7
1000b944:	d206      	bcs.n	1000b954 <__hexnan+0xd6>
1000b946:	2d07      	cmp	r5, #7
1000b948:	dc04      	bgt.n	1000b954 <__hexnan+0xd6>
1000b94a:	1c20      	adds	r0, r4, #0
1000b94c:	1c39      	adds	r1, r7, #0
1000b94e:	1c2a      	adds	r2, r5, #0
1000b950:	f7ff ff83 	bl	1000b85a <L_shift>
1000b954:	9b00      	ldr	r3, [sp, #0]
1000b956:	429c      	cmp	r4, r3
1000b958:	d90a      	bls.n	1000b970 <__hexnan+0xf2>
1000b95a:	3304      	adds	r3, #4
1000b95c:	cc02      	ldmia	r4!, {r1}
1000b95e:	1f1a      	subs	r2, r3, #4
1000b960:	6011      	str	r1, [r2, #0]
1000b962:	42a6      	cmp	r6, r4
1000b964:	d2f9      	bcs.n	1000b95a <__hexnan+0xdc>
1000b966:	2200      	movs	r2, #0
1000b968:	c304      	stmia	r3!, {r2}
1000b96a:	429e      	cmp	r6, r3
1000b96c:	d2fb      	bcs.n	1000b966 <__hexnan+0xe8>
1000b96e:	e00e      	b.n	1000b98e <__hexnan+0x110>
1000b970:	9b05      	ldr	r3, [sp, #20]
1000b972:	2b00      	cmp	r3, #0
1000b974:	d00b      	beq.n	1000b98e <__hexnan+0x110>
1000b976:	2220      	movs	r2, #32
1000b978:	9905      	ldr	r1, [sp, #20]
1000b97a:	9b02      	ldr	r3, [sp, #8]
1000b97c:	1a52      	subs	r2, r2, r1
1000b97e:	2101      	movs	r1, #1
1000b980:	4249      	negs	r1, r1
1000b982:	40d1      	lsrs	r1, r2
1000b984:	1c0a      	adds	r2, r1, #0
1000b986:	3b04      	subs	r3, #4
1000b988:	6819      	ldr	r1, [r3, #0]
1000b98a:	400a      	ands	r2, r1
1000b98c:	601a      	str	r2, [r3, #0]
1000b98e:	6833      	ldr	r3, [r6, #0]
1000b990:	2b00      	cmp	r3, #0
1000b992:	d109      	bne.n	1000b9a8 <__hexnan+0x12a>
1000b994:	9b00      	ldr	r3, [sp, #0]
1000b996:	429e      	cmp	r6, r3
1000b998:	d102      	bne.n	1000b9a0 <__hexnan+0x122>
1000b99a:	2301      	movs	r3, #1
1000b99c:	6033      	str	r3, [r6, #0]
1000b99e:	e003      	b.n	1000b9a8 <__hexnan+0x12a>
1000b9a0:	3e04      	subs	r6, #4
1000b9a2:	e7f4      	b.n	1000b98e <__hexnan+0x110>
1000b9a4:	2004      	movs	r0, #4
1000b9a6:	e000      	b.n	1000b9aa <__hexnan+0x12c>
1000b9a8:	2005      	movs	r0, #5
1000b9aa:	b009      	add	sp, #36	; 0x24
1000b9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1000b9b0 <_localeconv_r>:
1000b9b0:	4800      	ldr	r0, [pc, #0]	; (1000b9b4 <_localeconv_r+0x4>)
1000b9b2:	4770      	bx	lr
1000b9b4:	20000718 	.word	0x20000718

1000b9b8 <malloc>:
1000b9b8:	b508      	push	{r3, lr}
1000b9ba:	4b03      	ldr	r3, [pc, #12]	; (1000b9c8 <malloc+0x10>)
1000b9bc:	1c01      	adds	r1, r0, #0
1000b9be:	6818      	ldr	r0, [r3, #0]
1000b9c0:	f000 fc66 	bl	1000c290 <_malloc_r>
1000b9c4:	bd08      	pop	{r3, pc}
1000b9c6:	46c0      	nop			; (mov r8, r8)
1000b9c8:	20000710 	.word	0x20000710

1000b9cc <memchr>:
1000b9cc:	b2c9      	uxtb	r1, r1
1000b9ce:	1882      	adds	r2, r0, r2
1000b9d0:	4290      	cmp	r0, r2
1000b9d2:	d004      	beq.n	1000b9de <memchr+0x12>
1000b9d4:	7803      	ldrb	r3, [r0, #0]
1000b9d6:	428b      	cmp	r3, r1
1000b9d8:	d002      	beq.n	1000b9e0 <memchr+0x14>
1000b9da:	3001      	adds	r0, #1
1000b9dc:	e7f8      	b.n	1000b9d0 <memchr+0x4>
1000b9de:	2000      	movs	r0, #0
1000b9e0:	4770      	bx	lr

1000b9e2 <_Balloc>:
1000b9e2:	b570      	push	{r4, r5, r6, lr}
1000b9e4:	6a46      	ldr	r6, [r0, #36]	; 0x24
1000b9e6:	1c04      	adds	r4, r0, #0
1000b9e8:	1c0d      	adds	r5, r1, #0
1000b9ea:	2e00      	cmp	r6, #0
1000b9ec:	d107      	bne.n	1000b9fe <_Balloc+0x1c>
1000b9ee:	2010      	movs	r0, #16
1000b9f0:	f7ff ffe2 	bl	1000b9b8 <malloc>
1000b9f4:	6260      	str	r0, [r4, #36]	; 0x24
1000b9f6:	6046      	str	r6, [r0, #4]
1000b9f8:	6086      	str	r6, [r0, #8]
1000b9fa:	6006      	str	r6, [r0, #0]
1000b9fc:	60c6      	str	r6, [r0, #12]
1000b9fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
1000ba00:	68f3      	ldr	r3, [r6, #12]
1000ba02:	2b00      	cmp	r3, #0
1000ba04:	d009      	beq.n	1000ba1a <_Balloc+0x38>
1000ba06:	6a62      	ldr	r2, [r4, #36]	; 0x24
1000ba08:	00ab      	lsls	r3, r5, #2
1000ba0a:	68d2      	ldr	r2, [r2, #12]
1000ba0c:	18d3      	adds	r3, r2, r3
1000ba0e:	6818      	ldr	r0, [r3, #0]
1000ba10:	2800      	cmp	r0, #0
1000ba12:	d00e      	beq.n	1000ba32 <_Balloc+0x50>
1000ba14:	6802      	ldr	r2, [r0, #0]
1000ba16:	601a      	str	r2, [r3, #0]
1000ba18:	e017      	b.n	1000ba4a <_Balloc+0x68>
1000ba1a:	1c20      	adds	r0, r4, #0
1000ba1c:	2104      	movs	r1, #4
1000ba1e:	2221      	movs	r2, #33	; 0x21
1000ba20:	f000 fbe1 	bl	1000c1e6 <_calloc_r>
1000ba24:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000ba26:	60f0      	str	r0, [r6, #12]
1000ba28:	68db      	ldr	r3, [r3, #12]
1000ba2a:	2b00      	cmp	r3, #0
1000ba2c:	d1eb      	bne.n	1000ba06 <_Balloc+0x24>
1000ba2e:	2000      	movs	r0, #0
1000ba30:	e00e      	b.n	1000ba50 <_Balloc+0x6e>
1000ba32:	2101      	movs	r1, #1
1000ba34:	1c0e      	adds	r6, r1, #0
1000ba36:	40ae      	lsls	r6, r5
1000ba38:	1d72      	adds	r2, r6, #5
1000ba3a:	0092      	lsls	r2, r2, #2
1000ba3c:	1c20      	adds	r0, r4, #0
1000ba3e:	f000 fbd2 	bl	1000c1e6 <_calloc_r>
1000ba42:	2800      	cmp	r0, #0
1000ba44:	d0f3      	beq.n	1000ba2e <_Balloc+0x4c>
1000ba46:	6045      	str	r5, [r0, #4]
1000ba48:	6086      	str	r6, [r0, #8]
1000ba4a:	2300      	movs	r3, #0
1000ba4c:	6103      	str	r3, [r0, #16]
1000ba4e:	60c3      	str	r3, [r0, #12]
1000ba50:	bd70      	pop	{r4, r5, r6, pc}

1000ba52 <_Bfree>:
1000ba52:	b570      	push	{r4, r5, r6, lr}
1000ba54:	6a45      	ldr	r5, [r0, #36]	; 0x24
1000ba56:	1c06      	adds	r6, r0, #0
1000ba58:	1c0c      	adds	r4, r1, #0
1000ba5a:	2d00      	cmp	r5, #0
1000ba5c:	d107      	bne.n	1000ba6e <_Bfree+0x1c>
1000ba5e:	2010      	movs	r0, #16
1000ba60:	f7ff ffaa 	bl	1000b9b8 <malloc>
1000ba64:	6270      	str	r0, [r6, #36]	; 0x24
1000ba66:	6045      	str	r5, [r0, #4]
1000ba68:	6085      	str	r5, [r0, #8]
1000ba6a:	6005      	str	r5, [r0, #0]
1000ba6c:	60c5      	str	r5, [r0, #12]
1000ba6e:	2c00      	cmp	r4, #0
1000ba70:	d007      	beq.n	1000ba82 <_Bfree+0x30>
1000ba72:	6a72      	ldr	r2, [r6, #36]	; 0x24
1000ba74:	6863      	ldr	r3, [r4, #4]
1000ba76:	68d2      	ldr	r2, [r2, #12]
1000ba78:	009b      	lsls	r3, r3, #2
1000ba7a:	18d3      	adds	r3, r2, r3
1000ba7c:	681a      	ldr	r2, [r3, #0]
1000ba7e:	6022      	str	r2, [r4, #0]
1000ba80:	601c      	str	r4, [r3, #0]
1000ba82:	bd70      	pop	{r4, r5, r6, pc}

1000ba84 <__multadd>:
1000ba84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ba86:	1c1e      	adds	r6, r3, #0
1000ba88:	2314      	movs	r3, #20
1000ba8a:	469c      	mov	ip, r3
1000ba8c:	1c07      	adds	r7, r0, #0
1000ba8e:	1c0c      	adds	r4, r1, #0
1000ba90:	2000      	movs	r0, #0
1000ba92:	690d      	ldr	r5, [r1, #16]
1000ba94:	448c      	add	ip, r1
1000ba96:	4663      	mov	r3, ip
1000ba98:	8819      	ldrh	r1, [r3, #0]
1000ba9a:	681b      	ldr	r3, [r3, #0]
1000ba9c:	4351      	muls	r1, r2
1000ba9e:	0c1b      	lsrs	r3, r3, #16
1000baa0:	4353      	muls	r3, r2
1000baa2:	1989      	adds	r1, r1, r6
1000baa4:	0c0e      	lsrs	r6, r1, #16
1000baa6:	18f3      	adds	r3, r6, r3
1000baa8:	b289      	uxth	r1, r1
1000baaa:	0c1e      	lsrs	r6, r3, #16
1000baac:	041b      	lsls	r3, r3, #16
1000baae:	185b      	adds	r3, r3, r1
1000bab0:	4661      	mov	r1, ip
1000bab2:	3001      	adds	r0, #1
1000bab4:	c108      	stmia	r1!, {r3}
1000bab6:	468c      	mov	ip, r1
1000bab8:	42a8      	cmp	r0, r5
1000baba:	dbec      	blt.n	1000ba96 <__multadd+0x12>
1000babc:	2e00      	cmp	r6, #0
1000babe:	d01b      	beq.n	1000baf8 <__multadd+0x74>
1000bac0:	68a3      	ldr	r3, [r4, #8]
1000bac2:	429d      	cmp	r5, r3
1000bac4:	db12      	blt.n	1000baec <__multadd+0x68>
1000bac6:	6863      	ldr	r3, [r4, #4]
1000bac8:	1c38      	adds	r0, r7, #0
1000baca:	1c59      	adds	r1, r3, #1
1000bacc:	f7ff ff89 	bl	1000b9e2 <_Balloc>
1000bad0:	1c21      	adds	r1, r4, #0
1000bad2:	6923      	ldr	r3, [r4, #16]
1000bad4:	9001      	str	r0, [sp, #4]
1000bad6:	1c9a      	adds	r2, r3, #2
1000bad8:	310c      	adds	r1, #12
1000bada:	0092      	lsls	r2, r2, #2
1000badc:	300c      	adds	r0, #12
1000bade:	f7fd f857 	bl	10008b90 <memcpy>
1000bae2:	1c21      	adds	r1, r4, #0
1000bae4:	1c38      	adds	r0, r7, #0
1000bae6:	f7ff ffb4 	bl	1000ba52 <_Bfree>
1000baea:	9c01      	ldr	r4, [sp, #4]
1000baec:	1d2b      	adds	r3, r5, #4
1000baee:	009b      	lsls	r3, r3, #2
1000baf0:	18e3      	adds	r3, r4, r3
1000baf2:	3501      	adds	r5, #1
1000baf4:	605e      	str	r6, [r3, #4]
1000baf6:	6125      	str	r5, [r4, #16]
1000baf8:	1c20      	adds	r0, r4, #0
1000bafa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000bafc <__s2b>:
1000bafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bafe:	1c06      	adds	r6, r0, #0
1000bb00:	1c18      	adds	r0, r3, #0
1000bb02:	1c0c      	adds	r4, r1, #0
1000bb04:	3008      	adds	r0, #8
1000bb06:	2109      	movs	r1, #9
1000bb08:	9301      	str	r3, [sp, #4]
1000bb0a:	1c15      	adds	r5, r2, #0
1000bb0c:	f7fa fefa 	bl	10006904 <__aeabi_idiv>
1000bb10:	2301      	movs	r3, #1
1000bb12:	2100      	movs	r1, #0
1000bb14:	4298      	cmp	r0, r3
1000bb16:	dd02      	ble.n	1000bb1e <__s2b+0x22>
1000bb18:	005b      	lsls	r3, r3, #1
1000bb1a:	3101      	adds	r1, #1
1000bb1c:	e7fa      	b.n	1000bb14 <__s2b+0x18>
1000bb1e:	1c30      	adds	r0, r6, #0
1000bb20:	f7ff ff5f 	bl	1000b9e2 <_Balloc>
1000bb24:	9b08      	ldr	r3, [sp, #32]
1000bb26:	1c01      	adds	r1, r0, #0
1000bb28:	6143      	str	r3, [r0, #20]
1000bb2a:	2301      	movs	r3, #1
1000bb2c:	6103      	str	r3, [r0, #16]
1000bb2e:	2d09      	cmp	r5, #9
1000bb30:	dd12      	ble.n	1000bb58 <__s2b+0x5c>
1000bb32:	1c23      	adds	r3, r4, #0
1000bb34:	3309      	adds	r3, #9
1000bb36:	1c1f      	adds	r7, r3, #0
1000bb38:	9300      	str	r3, [sp, #0]
1000bb3a:	1964      	adds	r4, r4, r5
1000bb3c:	783b      	ldrb	r3, [r7, #0]
1000bb3e:	1c30      	adds	r0, r6, #0
1000bb40:	3b30      	subs	r3, #48	; 0x30
1000bb42:	220a      	movs	r2, #10
1000bb44:	f7ff ff9e 	bl	1000ba84 <__multadd>
1000bb48:	3701      	adds	r7, #1
1000bb4a:	1c01      	adds	r1, r0, #0
1000bb4c:	42a7      	cmp	r7, r4
1000bb4e:	d1f5      	bne.n	1000bb3c <__s2b+0x40>
1000bb50:	9b00      	ldr	r3, [sp, #0]
1000bb52:	195c      	adds	r4, r3, r5
1000bb54:	3c08      	subs	r4, #8
1000bb56:	e001      	b.n	1000bb5c <__s2b+0x60>
1000bb58:	2509      	movs	r5, #9
1000bb5a:	340a      	adds	r4, #10
1000bb5c:	1c2f      	adds	r7, r5, #0
1000bb5e:	9b01      	ldr	r3, [sp, #4]
1000bb60:	429f      	cmp	r7, r3
1000bb62:	da09      	bge.n	1000bb78 <__s2b+0x7c>
1000bb64:	1b63      	subs	r3, r4, r5
1000bb66:	5ddb      	ldrb	r3, [r3, r7]
1000bb68:	1c30      	adds	r0, r6, #0
1000bb6a:	3b30      	subs	r3, #48	; 0x30
1000bb6c:	220a      	movs	r2, #10
1000bb6e:	f7ff ff89 	bl	1000ba84 <__multadd>
1000bb72:	3701      	adds	r7, #1
1000bb74:	1c01      	adds	r1, r0, #0
1000bb76:	e7f2      	b.n	1000bb5e <__s2b+0x62>
1000bb78:	1c08      	adds	r0, r1, #0
1000bb7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000bb7c <__hi0bits>:
1000bb7c:	2200      	movs	r2, #0
1000bb7e:	1c03      	adds	r3, r0, #0
1000bb80:	0c01      	lsrs	r1, r0, #16
1000bb82:	4291      	cmp	r1, r2
1000bb84:	d101      	bne.n	1000bb8a <__hi0bits+0xe>
1000bb86:	0403      	lsls	r3, r0, #16
1000bb88:	3210      	adds	r2, #16
1000bb8a:	0e19      	lsrs	r1, r3, #24
1000bb8c:	d101      	bne.n	1000bb92 <__hi0bits+0x16>
1000bb8e:	3208      	adds	r2, #8
1000bb90:	021b      	lsls	r3, r3, #8
1000bb92:	0f19      	lsrs	r1, r3, #28
1000bb94:	d101      	bne.n	1000bb9a <__hi0bits+0x1e>
1000bb96:	3204      	adds	r2, #4
1000bb98:	011b      	lsls	r3, r3, #4
1000bb9a:	0f99      	lsrs	r1, r3, #30
1000bb9c:	d101      	bne.n	1000bba2 <__hi0bits+0x26>
1000bb9e:	3202      	adds	r2, #2
1000bba0:	009b      	lsls	r3, r3, #2
1000bba2:	1c10      	adds	r0, r2, #0
1000bba4:	2b00      	cmp	r3, #0
1000bba6:	db03      	blt.n	1000bbb0 <__hi0bits+0x34>
1000bba8:	2020      	movs	r0, #32
1000bbaa:	005b      	lsls	r3, r3, #1
1000bbac:	d500      	bpl.n	1000bbb0 <__hi0bits+0x34>
1000bbae:	1c50      	adds	r0, r2, #1
1000bbb0:	4770      	bx	lr

1000bbb2 <__lo0bits>:
1000bbb2:	2207      	movs	r2, #7
1000bbb4:	6803      	ldr	r3, [r0, #0]
1000bbb6:	b510      	push	{r4, lr}
1000bbb8:	1c01      	adds	r1, r0, #0
1000bbba:	401a      	ands	r2, r3
1000bbbc:	d00c      	beq.n	1000bbd8 <__lo0bits+0x26>
1000bbbe:	2401      	movs	r4, #1
1000bbc0:	2000      	movs	r0, #0
1000bbc2:	4223      	tst	r3, r4
1000bbc4:	d123      	bne.n	1000bc0e <__lo0bits+0x5c>
1000bbc6:	2202      	movs	r2, #2
1000bbc8:	4213      	tst	r3, r2
1000bbca:	d003      	beq.n	1000bbd4 <__lo0bits+0x22>
1000bbcc:	40e3      	lsrs	r3, r4
1000bbce:	1c20      	adds	r0, r4, #0
1000bbd0:	600b      	str	r3, [r1, #0]
1000bbd2:	e01c      	b.n	1000bc0e <__lo0bits+0x5c>
1000bbd4:	089b      	lsrs	r3, r3, #2
1000bbd6:	e018      	b.n	1000bc0a <__lo0bits+0x58>
1000bbd8:	b298      	uxth	r0, r3
1000bbda:	2800      	cmp	r0, #0
1000bbdc:	d101      	bne.n	1000bbe2 <__lo0bits+0x30>
1000bbde:	2210      	movs	r2, #16
1000bbe0:	0c1b      	lsrs	r3, r3, #16
1000bbe2:	b2d8      	uxtb	r0, r3
1000bbe4:	2800      	cmp	r0, #0
1000bbe6:	d101      	bne.n	1000bbec <__lo0bits+0x3a>
1000bbe8:	3208      	adds	r2, #8
1000bbea:	0a1b      	lsrs	r3, r3, #8
1000bbec:	0718      	lsls	r0, r3, #28
1000bbee:	d101      	bne.n	1000bbf4 <__lo0bits+0x42>
1000bbf0:	3204      	adds	r2, #4
1000bbf2:	091b      	lsrs	r3, r3, #4
1000bbf4:	0798      	lsls	r0, r3, #30
1000bbf6:	d101      	bne.n	1000bbfc <__lo0bits+0x4a>
1000bbf8:	3202      	adds	r2, #2
1000bbfa:	089b      	lsrs	r3, r3, #2
1000bbfc:	07d8      	lsls	r0, r3, #31
1000bbfe:	d404      	bmi.n	1000bc0a <__lo0bits+0x58>
1000bc00:	085b      	lsrs	r3, r3, #1
1000bc02:	2020      	movs	r0, #32
1000bc04:	2b00      	cmp	r3, #0
1000bc06:	d002      	beq.n	1000bc0e <__lo0bits+0x5c>
1000bc08:	3201      	adds	r2, #1
1000bc0a:	1c10      	adds	r0, r2, #0
1000bc0c:	600b      	str	r3, [r1, #0]
1000bc0e:	bd10      	pop	{r4, pc}

1000bc10 <__i2b>:
1000bc10:	b510      	push	{r4, lr}
1000bc12:	1c0c      	adds	r4, r1, #0
1000bc14:	2101      	movs	r1, #1
1000bc16:	f7ff fee4 	bl	1000b9e2 <_Balloc>
1000bc1a:	2301      	movs	r3, #1
1000bc1c:	6144      	str	r4, [r0, #20]
1000bc1e:	6103      	str	r3, [r0, #16]
1000bc20:	bd10      	pop	{r4, pc}

1000bc22 <__multiply>:
1000bc22:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc24:	690b      	ldr	r3, [r1, #16]
1000bc26:	1c14      	adds	r4, r2, #0
1000bc28:	6912      	ldr	r2, [r2, #16]
1000bc2a:	b089      	sub	sp, #36	; 0x24
1000bc2c:	1c0d      	adds	r5, r1, #0
1000bc2e:	4293      	cmp	r3, r2
1000bc30:	da01      	bge.n	1000bc36 <__multiply+0x14>
1000bc32:	1c25      	adds	r5, r4, #0
1000bc34:	1c0c      	adds	r4, r1, #0
1000bc36:	692f      	ldr	r7, [r5, #16]
1000bc38:	6926      	ldr	r6, [r4, #16]
1000bc3a:	68aa      	ldr	r2, [r5, #8]
1000bc3c:	19bb      	adds	r3, r7, r6
1000bc3e:	6869      	ldr	r1, [r5, #4]
1000bc40:	9300      	str	r3, [sp, #0]
1000bc42:	4293      	cmp	r3, r2
1000bc44:	dd00      	ble.n	1000bc48 <__multiply+0x26>
1000bc46:	3101      	adds	r1, #1
1000bc48:	f7ff fecb 	bl	1000b9e2 <_Balloc>
1000bc4c:	1c01      	adds	r1, r0, #0
1000bc4e:	9b00      	ldr	r3, [sp, #0]
1000bc50:	3114      	adds	r1, #20
1000bc52:	4684      	mov	ip, r0
1000bc54:	0098      	lsls	r0, r3, #2
1000bc56:	1c0b      	adds	r3, r1, #0
1000bc58:	1808      	adds	r0, r1, r0
1000bc5a:	4283      	cmp	r3, r0
1000bc5c:	d202      	bcs.n	1000bc64 <__multiply+0x42>
1000bc5e:	2200      	movs	r2, #0
1000bc60:	c304      	stmia	r3!, {r2}
1000bc62:	e7fa      	b.n	1000bc5a <__multiply+0x38>
1000bc64:	3514      	adds	r5, #20
1000bc66:	00bf      	lsls	r7, r7, #2
1000bc68:	19eb      	adds	r3, r5, r7
1000bc6a:	3414      	adds	r4, #20
1000bc6c:	00b6      	lsls	r6, r6, #2
1000bc6e:	9304      	str	r3, [sp, #16]
1000bc70:	19a3      	adds	r3, r4, r6
1000bc72:	9502      	str	r5, [sp, #8]
1000bc74:	9306      	str	r3, [sp, #24]
1000bc76:	9b06      	ldr	r3, [sp, #24]
1000bc78:	429c      	cmp	r4, r3
1000bc7a:	d256      	bcs.n	1000bd2a <__multiply+0x108>
1000bc7c:	8823      	ldrh	r3, [r4, #0]
1000bc7e:	9303      	str	r3, [sp, #12]
1000bc80:	2b00      	cmp	r3, #0
1000bc82:	d022      	beq.n	1000bcca <__multiply+0xa8>
1000bc84:	1c0e      	adds	r6, r1, #0
1000bc86:	2700      	movs	r7, #0
1000bc88:	9b02      	ldr	r3, [sp, #8]
1000bc8a:	9301      	str	r3, [sp, #4]
1000bc8c:	9b01      	ldr	r3, [sp, #4]
1000bc8e:	9d03      	ldr	r5, [sp, #12]
1000bc90:	cb04      	ldmia	r3!, {r2}
1000bc92:	9605      	str	r6, [sp, #20]
1000bc94:	9301      	str	r3, [sp, #4]
1000bc96:	8833      	ldrh	r3, [r6, #0]
1000bc98:	9307      	str	r3, [sp, #28]
1000bc9a:	b293      	uxth	r3, r2
1000bc9c:	436b      	muls	r3, r5
1000bc9e:	9d07      	ldr	r5, [sp, #28]
1000bca0:	0c12      	lsrs	r2, r2, #16
1000bca2:	18eb      	adds	r3, r5, r3
1000bca4:	6835      	ldr	r5, [r6, #0]
1000bca6:	19db      	adds	r3, r3, r7
1000bca8:	0c2f      	lsrs	r7, r5, #16
1000bcaa:	9d03      	ldr	r5, [sp, #12]
1000bcac:	436a      	muls	r2, r5
1000bcae:	18ba      	adds	r2, r7, r2
1000bcb0:	0c1f      	lsrs	r7, r3, #16
1000bcb2:	19d2      	adds	r2, r2, r7
1000bcb4:	0c17      	lsrs	r7, r2, #16
1000bcb6:	b29b      	uxth	r3, r3
1000bcb8:	0412      	lsls	r2, r2, #16
1000bcba:	4313      	orrs	r3, r2
1000bcbc:	c608      	stmia	r6!, {r3}
1000bcbe:	9a01      	ldr	r2, [sp, #4]
1000bcc0:	9b04      	ldr	r3, [sp, #16]
1000bcc2:	429a      	cmp	r2, r3
1000bcc4:	d3e2      	bcc.n	1000bc8c <__multiply+0x6a>
1000bcc6:	9b05      	ldr	r3, [sp, #20]
1000bcc8:	605f      	str	r7, [r3, #4]
1000bcca:	6823      	ldr	r3, [r4, #0]
1000bccc:	0c1b      	lsrs	r3, r3, #16
1000bcce:	9301      	str	r3, [sp, #4]
1000bcd0:	d021      	beq.n	1000bd16 <__multiply+0xf4>
1000bcd2:	2200      	movs	r2, #0
1000bcd4:	1c0d      	adds	r5, r1, #0
1000bcd6:	680b      	ldr	r3, [r1, #0]
1000bcd8:	9f02      	ldr	r7, [sp, #8]
1000bcda:	9203      	str	r2, [sp, #12]
1000bcdc:	883e      	ldrh	r6, [r7, #0]
1000bcde:	9a01      	ldr	r2, [sp, #4]
1000bce0:	b29b      	uxth	r3, r3
1000bce2:	4356      	muls	r6, r2
1000bce4:	682a      	ldr	r2, [r5, #0]
1000bce6:	9505      	str	r5, [sp, #20]
1000bce8:	0c12      	lsrs	r2, r2, #16
1000bcea:	18b2      	adds	r2, r6, r2
1000bcec:	9e03      	ldr	r6, [sp, #12]
1000bcee:	1992      	adds	r2, r2, r6
1000bcf0:	0416      	lsls	r6, r2, #16
1000bcf2:	4333      	orrs	r3, r6
1000bcf4:	602b      	str	r3, [r5, #0]
1000bcf6:	cf08      	ldmia	r7!, {r3}
1000bcf8:	9e01      	ldr	r6, [sp, #4]
1000bcfa:	0c1b      	lsrs	r3, r3, #16
1000bcfc:	4373      	muls	r3, r6
1000bcfe:	88ae      	ldrh	r6, [r5, #4]
1000bd00:	0c12      	lsrs	r2, r2, #16
1000bd02:	199b      	adds	r3, r3, r6
1000bd04:	189b      	adds	r3, r3, r2
1000bd06:	0c1a      	lsrs	r2, r3, #16
1000bd08:	9203      	str	r2, [sp, #12]
1000bd0a:	9a04      	ldr	r2, [sp, #16]
1000bd0c:	3504      	adds	r5, #4
1000bd0e:	42ba      	cmp	r2, r7
1000bd10:	d8e4      	bhi.n	1000bcdc <__multiply+0xba>
1000bd12:	9a05      	ldr	r2, [sp, #20]
1000bd14:	6053      	str	r3, [r2, #4]
1000bd16:	3404      	adds	r4, #4
1000bd18:	3104      	adds	r1, #4
1000bd1a:	e7ac      	b.n	1000bc76 <__multiply+0x54>
1000bd1c:	3804      	subs	r0, #4
1000bd1e:	6803      	ldr	r3, [r0, #0]
1000bd20:	2b00      	cmp	r3, #0
1000bd22:	d105      	bne.n	1000bd30 <__multiply+0x10e>
1000bd24:	9b00      	ldr	r3, [sp, #0]
1000bd26:	3b01      	subs	r3, #1
1000bd28:	9300      	str	r3, [sp, #0]
1000bd2a:	9b00      	ldr	r3, [sp, #0]
1000bd2c:	2b00      	cmp	r3, #0
1000bd2e:	dcf5      	bgt.n	1000bd1c <__multiply+0xfa>
1000bd30:	4663      	mov	r3, ip
1000bd32:	4660      	mov	r0, ip
1000bd34:	9a00      	ldr	r2, [sp, #0]
1000bd36:	611a      	str	r2, [r3, #16]
1000bd38:	b009      	add	sp, #36	; 0x24
1000bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bd3c <__pow5mult>:
1000bd3c:	2303      	movs	r3, #3
1000bd3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bd40:	4013      	ands	r3, r2
1000bd42:	1c05      	adds	r5, r0, #0
1000bd44:	1c0e      	adds	r6, r1, #0
1000bd46:	1c14      	adds	r4, r2, #0
1000bd48:	2b00      	cmp	r3, #0
1000bd4a:	d007      	beq.n	1000bd5c <__pow5mult+0x20>
1000bd4c:	4a22      	ldr	r2, [pc, #136]	; (1000bdd8 <__pow5mult+0x9c>)
1000bd4e:	3b01      	subs	r3, #1
1000bd50:	009b      	lsls	r3, r3, #2
1000bd52:	589a      	ldr	r2, [r3, r2]
1000bd54:	2300      	movs	r3, #0
1000bd56:	f7ff fe95 	bl	1000ba84 <__multadd>
1000bd5a:	1c06      	adds	r6, r0, #0
1000bd5c:	10a3      	asrs	r3, r4, #2
1000bd5e:	9301      	str	r3, [sp, #4]
1000bd60:	d037      	beq.n	1000bdd2 <__pow5mult+0x96>
1000bd62:	6a6c      	ldr	r4, [r5, #36]	; 0x24
1000bd64:	2c00      	cmp	r4, #0
1000bd66:	d107      	bne.n	1000bd78 <__pow5mult+0x3c>
1000bd68:	2010      	movs	r0, #16
1000bd6a:	f7ff fe25 	bl	1000b9b8 <malloc>
1000bd6e:	6268      	str	r0, [r5, #36]	; 0x24
1000bd70:	6044      	str	r4, [r0, #4]
1000bd72:	6084      	str	r4, [r0, #8]
1000bd74:	6004      	str	r4, [r0, #0]
1000bd76:	60c4      	str	r4, [r0, #12]
1000bd78:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1000bd7a:	68bc      	ldr	r4, [r7, #8]
1000bd7c:	2c00      	cmp	r4, #0
1000bd7e:	d110      	bne.n	1000bda2 <__pow5mult+0x66>
1000bd80:	1c28      	adds	r0, r5, #0
1000bd82:	4916      	ldr	r1, [pc, #88]	; (1000bddc <__pow5mult+0xa0>)
1000bd84:	f7ff ff44 	bl	1000bc10 <__i2b>
1000bd88:	2300      	movs	r3, #0
1000bd8a:	60b8      	str	r0, [r7, #8]
1000bd8c:	1c04      	adds	r4, r0, #0
1000bd8e:	6003      	str	r3, [r0, #0]
1000bd90:	e007      	b.n	1000bda2 <__pow5mult+0x66>
1000bd92:	9b01      	ldr	r3, [sp, #4]
1000bd94:	105b      	asrs	r3, r3, #1
1000bd96:	9301      	str	r3, [sp, #4]
1000bd98:	d01b      	beq.n	1000bdd2 <__pow5mult+0x96>
1000bd9a:	6820      	ldr	r0, [r4, #0]
1000bd9c:	2800      	cmp	r0, #0
1000bd9e:	d00f      	beq.n	1000bdc0 <__pow5mult+0x84>
1000bda0:	1c04      	adds	r4, r0, #0
1000bda2:	9b01      	ldr	r3, [sp, #4]
1000bda4:	07db      	lsls	r3, r3, #31
1000bda6:	d5f4      	bpl.n	1000bd92 <__pow5mult+0x56>
1000bda8:	1c31      	adds	r1, r6, #0
1000bdaa:	1c22      	adds	r2, r4, #0
1000bdac:	1c28      	adds	r0, r5, #0
1000bdae:	f7ff ff38 	bl	1000bc22 <__multiply>
1000bdb2:	1c07      	adds	r7, r0, #0
1000bdb4:	1c31      	adds	r1, r6, #0
1000bdb6:	1c28      	adds	r0, r5, #0
1000bdb8:	f7ff fe4b 	bl	1000ba52 <_Bfree>
1000bdbc:	1c3e      	adds	r6, r7, #0
1000bdbe:	e7e8      	b.n	1000bd92 <__pow5mult+0x56>
1000bdc0:	1c28      	adds	r0, r5, #0
1000bdc2:	1c21      	adds	r1, r4, #0
1000bdc4:	1c22      	adds	r2, r4, #0
1000bdc6:	f7ff ff2c 	bl	1000bc22 <__multiply>
1000bdca:	2300      	movs	r3, #0
1000bdcc:	6020      	str	r0, [r4, #0]
1000bdce:	6003      	str	r3, [r0, #0]
1000bdd0:	e7e6      	b.n	1000bda0 <__pow5mult+0x64>
1000bdd2:	1c30      	adds	r0, r6, #0
1000bdd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000bdd6:	46c0      	nop			; (mov r8, r8)
1000bdd8:	1000d188 	.word	0x1000d188
1000bddc:	00000271 	.word	0x00000271

1000bde0 <__lshift>:
1000bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bde2:	1c0c      	adds	r4, r1, #0
1000bde4:	1c17      	adds	r7, r2, #0
1000bde6:	6923      	ldr	r3, [r4, #16]
1000bde8:	1155      	asrs	r5, r2, #5
1000bdea:	b085      	sub	sp, #20
1000bdec:	18eb      	adds	r3, r5, r3
1000bdee:	9301      	str	r3, [sp, #4]
1000bdf0:	3301      	adds	r3, #1
1000bdf2:	9300      	str	r3, [sp, #0]
1000bdf4:	6849      	ldr	r1, [r1, #4]
1000bdf6:	68a3      	ldr	r3, [r4, #8]
1000bdf8:	9002      	str	r0, [sp, #8]
1000bdfa:	9a00      	ldr	r2, [sp, #0]
1000bdfc:	429a      	cmp	r2, r3
1000bdfe:	dd02      	ble.n	1000be06 <__lshift+0x26>
1000be00:	3101      	adds	r1, #1
1000be02:	005b      	lsls	r3, r3, #1
1000be04:	e7f9      	b.n	1000bdfa <__lshift+0x1a>
1000be06:	9802      	ldr	r0, [sp, #8]
1000be08:	f7ff fdeb 	bl	1000b9e2 <_Balloc>
1000be0c:	1c02      	adds	r2, r0, #0
1000be0e:	1c06      	adds	r6, r0, #0
1000be10:	2300      	movs	r3, #0
1000be12:	3214      	adds	r2, #20
1000be14:	42ab      	cmp	r3, r5
1000be16:	da04      	bge.n	1000be22 <__lshift+0x42>
1000be18:	2000      	movs	r0, #0
1000be1a:	0099      	lsls	r1, r3, #2
1000be1c:	5050      	str	r0, [r2, r1]
1000be1e:	3301      	adds	r3, #1
1000be20:	e7f8      	b.n	1000be14 <__lshift+0x34>
1000be22:	43eb      	mvns	r3, r5
1000be24:	17db      	asrs	r3, r3, #31
1000be26:	401d      	ands	r5, r3
1000be28:	1c23      	adds	r3, r4, #0
1000be2a:	00ad      	lsls	r5, r5, #2
1000be2c:	1955      	adds	r5, r2, r5
1000be2e:	6922      	ldr	r2, [r4, #16]
1000be30:	3314      	adds	r3, #20
1000be32:	0092      	lsls	r2, r2, #2
1000be34:	189a      	adds	r2, r3, r2
1000be36:	4694      	mov	ip, r2
1000be38:	221f      	movs	r2, #31
1000be3a:	4017      	ands	r7, r2
1000be3c:	d014      	beq.n	1000be68 <__lshift+0x88>
1000be3e:	3201      	adds	r2, #1
1000be40:	1bd2      	subs	r2, r2, r7
1000be42:	9203      	str	r2, [sp, #12]
1000be44:	2200      	movs	r2, #0
1000be46:	6819      	ldr	r1, [r3, #0]
1000be48:	1c28      	adds	r0, r5, #0
1000be4a:	40b9      	lsls	r1, r7
1000be4c:	430a      	orrs	r2, r1
1000be4e:	c504      	stmia	r5!, {r2}
1000be50:	cb04      	ldmia	r3!, {r2}
1000be52:	9903      	ldr	r1, [sp, #12]
1000be54:	40ca      	lsrs	r2, r1
1000be56:	459c      	cmp	ip, r3
1000be58:	d8f5      	bhi.n	1000be46 <__lshift+0x66>
1000be5a:	6042      	str	r2, [r0, #4]
1000be5c:	2a00      	cmp	r2, #0
1000be5e:	d007      	beq.n	1000be70 <__lshift+0x90>
1000be60:	9b01      	ldr	r3, [sp, #4]
1000be62:	3302      	adds	r3, #2
1000be64:	9300      	str	r3, [sp, #0]
1000be66:	e003      	b.n	1000be70 <__lshift+0x90>
1000be68:	cb04      	ldmia	r3!, {r2}
1000be6a:	c504      	stmia	r5!, {r2}
1000be6c:	459c      	cmp	ip, r3
1000be6e:	d8fb      	bhi.n	1000be68 <__lshift+0x88>
1000be70:	9b00      	ldr	r3, [sp, #0]
1000be72:	9802      	ldr	r0, [sp, #8]
1000be74:	3b01      	subs	r3, #1
1000be76:	6133      	str	r3, [r6, #16]
1000be78:	1c21      	adds	r1, r4, #0
1000be7a:	f7ff fdea 	bl	1000ba52 <_Bfree>
1000be7e:	1c30      	adds	r0, r6, #0
1000be80:	b005      	add	sp, #20
1000be82:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000be84 <__mcmp>:
1000be84:	6903      	ldr	r3, [r0, #16]
1000be86:	690a      	ldr	r2, [r1, #16]
1000be88:	b510      	push	{r4, lr}
1000be8a:	1a9b      	subs	r3, r3, r2
1000be8c:	1c04      	adds	r4, r0, #0
1000be8e:	1e18      	subs	r0, r3, #0
1000be90:	d112      	bne.n	1000beb8 <__mcmp+0x34>
1000be92:	0093      	lsls	r3, r2, #2
1000be94:	3414      	adds	r4, #20
1000be96:	3114      	adds	r1, #20
1000be98:	18e2      	adds	r2, r4, r3
1000be9a:	18c9      	adds	r1, r1, r3
1000be9c:	3a04      	subs	r2, #4
1000be9e:	3904      	subs	r1, #4
1000bea0:	6813      	ldr	r3, [r2, #0]
1000bea2:	6808      	ldr	r0, [r1, #0]
1000bea4:	4283      	cmp	r3, r0
1000bea6:	d004      	beq.n	1000beb2 <__mcmp+0x2e>
1000bea8:	4283      	cmp	r3, r0
1000beaa:	419b      	sbcs	r3, r3
1000beac:	2001      	movs	r0, #1
1000beae:	4318      	orrs	r0, r3
1000beb0:	e002      	b.n	1000beb8 <__mcmp+0x34>
1000beb2:	42a2      	cmp	r2, r4
1000beb4:	d8f2      	bhi.n	1000be9c <__mcmp+0x18>
1000beb6:	2000      	movs	r0, #0
1000beb8:	bd10      	pop	{r4, pc}

1000beba <__mdiff>:
1000beba:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bebc:	1c07      	adds	r7, r0, #0
1000bebe:	b085      	sub	sp, #20
1000bec0:	1c08      	adds	r0, r1, #0
1000bec2:	1c0c      	adds	r4, r1, #0
1000bec4:	1c11      	adds	r1, r2, #0
1000bec6:	1c15      	adds	r5, r2, #0
1000bec8:	f7ff ffdc 	bl	1000be84 <__mcmp>
1000becc:	1e06      	subs	r6, r0, #0
1000bece:	d107      	bne.n	1000bee0 <__mdiff+0x26>
1000bed0:	1c38      	adds	r0, r7, #0
1000bed2:	1c31      	adds	r1, r6, #0
1000bed4:	f7ff fd85 	bl	1000b9e2 <_Balloc>
1000bed8:	2301      	movs	r3, #1
1000beda:	6146      	str	r6, [r0, #20]
1000bedc:	6103      	str	r3, [r0, #16]
1000bede:	e055      	b.n	1000bf8c <__mdiff+0xd2>
1000bee0:	2300      	movs	r3, #0
1000bee2:	9301      	str	r3, [sp, #4]
1000bee4:	4298      	cmp	r0, r3
1000bee6:	da04      	bge.n	1000bef2 <__mdiff+0x38>
1000bee8:	1c23      	adds	r3, r4, #0
1000beea:	1c2c      	adds	r4, r5, #0
1000beec:	1c1d      	adds	r5, r3, #0
1000beee:	2301      	movs	r3, #1
1000bef0:	9301      	str	r3, [sp, #4]
1000bef2:	1c38      	adds	r0, r7, #0
1000bef4:	6861      	ldr	r1, [r4, #4]
1000bef6:	f7ff fd74 	bl	1000b9e2 <_Balloc>
1000befa:	9b01      	ldr	r3, [sp, #4]
1000befc:	6926      	ldr	r6, [r4, #16]
1000befe:	1c2f      	adds	r7, r5, #0
1000bf00:	60c3      	str	r3, [r0, #12]
1000bf02:	3414      	adds	r4, #20
1000bf04:	00b3      	lsls	r3, r6, #2
1000bf06:	18e3      	adds	r3, r4, r3
1000bf08:	1c02      	adds	r2, r0, #0
1000bf0a:	9302      	str	r3, [sp, #8]
1000bf0c:	692b      	ldr	r3, [r5, #16]
1000bf0e:	2500      	movs	r5, #0
1000bf10:	3714      	adds	r7, #20
1000bf12:	009b      	lsls	r3, r3, #2
1000bf14:	18fb      	adds	r3, r7, r3
1000bf16:	9303      	str	r3, [sp, #12]
1000bf18:	3214      	adds	r2, #20
1000bf1a:	cc08      	ldmia	r4!, {r3}
1000bf1c:	4669      	mov	r1, sp
1000bf1e:	469c      	mov	ip, r3
1000bf20:	cf08      	ldmia	r7!, {r3}
1000bf22:	3204      	adds	r2, #4
1000bf24:	9300      	str	r3, [sp, #0]
1000bf26:	4663      	mov	r3, ip
1000bf28:	808b      	strh	r3, [r1, #4]
1000bf2a:	888b      	ldrh	r3, [r1, #4]
1000bf2c:	195d      	adds	r5, r3, r5
1000bf2e:	9b00      	ldr	r3, [sp, #0]
1000bf30:	b29b      	uxth	r3, r3
1000bf32:	1aeb      	subs	r3, r5, r3
1000bf34:	4665      	mov	r5, ip
1000bf36:	9301      	str	r3, [sp, #4]
1000bf38:	9b00      	ldr	r3, [sp, #0]
1000bf3a:	0c2d      	lsrs	r5, r5, #16
1000bf3c:	0c19      	lsrs	r1, r3, #16
1000bf3e:	9b01      	ldr	r3, [sp, #4]
1000bf40:	1a69      	subs	r1, r5, r1
1000bf42:	141d      	asrs	r5, r3, #16
1000bf44:	1f13      	subs	r3, r2, #4
1000bf46:	469c      	mov	ip, r3
1000bf48:	466b      	mov	r3, sp
1000bf4a:	1949      	adds	r1, r1, r5
1000bf4c:	889b      	ldrh	r3, [r3, #4]
1000bf4e:	140d      	asrs	r5, r1, #16
1000bf50:	0409      	lsls	r1, r1, #16
1000bf52:	430b      	orrs	r3, r1
1000bf54:	4661      	mov	r1, ip
1000bf56:	600b      	str	r3, [r1, #0]
1000bf58:	9b03      	ldr	r3, [sp, #12]
1000bf5a:	429f      	cmp	r7, r3
1000bf5c:	d3dd      	bcc.n	1000bf1a <__mdiff+0x60>
1000bf5e:	9902      	ldr	r1, [sp, #8]
1000bf60:	1c13      	adds	r3, r2, #0
1000bf62:	428c      	cmp	r4, r1
1000bf64:	d20b      	bcs.n	1000bf7e <__mdiff+0xc4>
1000bf66:	cc08      	ldmia	r4!, {r3}
1000bf68:	b299      	uxth	r1, r3
1000bf6a:	1949      	adds	r1, r1, r5
1000bf6c:	140d      	asrs	r5, r1, #16
1000bf6e:	0c1b      	lsrs	r3, r3, #16
1000bf70:	18eb      	adds	r3, r5, r3
1000bf72:	141d      	asrs	r5, r3, #16
1000bf74:	b289      	uxth	r1, r1
1000bf76:	041b      	lsls	r3, r3, #16
1000bf78:	430b      	orrs	r3, r1
1000bf7a:	c208      	stmia	r2!, {r3}
1000bf7c:	e7ef      	b.n	1000bf5e <__mdiff+0xa4>
1000bf7e:	3b04      	subs	r3, #4
1000bf80:	681a      	ldr	r2, [r3, #0]
1000bf82:	2a00      	cmp	r2, #0
1000bf84:	d101      	bne.n	1000bf8a <__mdiff+0xd0>
1000bf86:	3e01      	subs	r6, #1
1000bf88:	e7f9      	b.n	1000bf7e <__mdiff+0xc4>
1000bf8a:	6106      	str	r6, [r0, #16]
1000bf8c:	b005      	add	sp, #20
1000bf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bf90 <__ulp>:
1000bf90:	4b0f      	ldr	r3, [pc, #60]	; (1000bfd0 <__ulp+0x40>)
1000bf92:	b510      	push	{r4, lr}
1000bf94:	4019      	ands	r1, r3
1000bf96:	4b0f      	ldr	r3, [pc, #60]	; (1000bfd4 <__ulp+0x44>)
1000bf98:	18c9      	adds	r1, r1, r3
1000bf9a:	2900      	cmp	r1, #0
1000bf9c:	dd02      	ble.n	1000bfa4 <__ulp+0x14>
1000bf9e:	2200      	movs	r2, #0
1000bfa0:	1c0b      	adds	r3, r1, #0
1000bfa2:	e011      	b.n	1000bfc8 <__ulp+0x38>
1000bfa4:	4249      	negs	r1, r1
1000bfa6:	1509      	asrs	r1, r1, #20
1000bfa8:	2200      	movs	r2, #0
1000bfaa:	2300      	movs	r3, #0
1000bfac:	2913      	cmp	r1, #19
1000bfae:	dc04      	bgt.n	1000bfba <__ulp+0x2a>
1000bfb0:	2080      	movs	r0, #128	; 0x80
1000bfb2:	0300      	lsls	r0, r0, #12
1000bfb4:	4108      	asrs	r0, r1
1000bfb6:	1c03      	adds	r3, r0, #0
1000bfb8:	e006      	b.n	1000bfc8 <__ulp+0x38>
1000bfba:	2001      	movs	r0, #1
1000bfbc:	2932      	cmp	r1, #50	; 0x32
1000bfbe:	dc02      	bgt.n	1000bfc6 <__ulp+0x36>
1000bfc0:	2433      	movs	r4, #51	; 0x33
1000bfc2:	1a61      	subs	r1, r4, r1
1000bfc4:	4088      	lsls	r0, r1
1000bfc6:	1c02      	adds	r2, r0, #0
1000bfc8:	1c10      	adds	r0, r2, #0
1000bfca:	1c19      	adds	r1, r3, #0
1000bfcc:	bd10      	pop	{r4, pc}
1000bfce:	46c0      	nop			; (mov r8, r8)
1000bfd0:	7ff00000 	.word	0x7ff00000
1000bfd4:	fcc00000 	.word	0xfcc00000

1000bfd8 <__b2d>:
1000bfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bfda:	1c06      	adds	r6, r0, #0
1000bfdc:	6903      	ldr	r3, [r0, #16]
1000bfde:	3614      	adds	r6, #20
1000bfe0:	009b      	lsls	r3, r3, #2
1000bfe2:	18f3      	adds	r3, r6, r3
1000bfe4:	1f1d      	subs	r5, r3, #4
1000bfe6:	682c      	ldr	r4, [r5, #0]
1000bfe8:	1c0f      	adds	r7, r1, #0
1000bfea:	1c20      	adds	r0, r4, #0
1000bfec:	9301      	str	r3, [sp, #4]
1000bfee:	f7ff fdc5 	bl	1000bb7c <__hi0bits>
1000bff2:	2320      	movs	r3, #32
1000bff4:	1a1b      	subs	r3, r3, r0
1000bff6:	603b      	str	r3, [r7, #0]
1000bff8:	491f      	ldr	r1, [pc, #124]	; (1000c078 <__b2d+0xa0>)
1000bffa:	280a      	cmp	r0, #10
1000bffc:	dc13      	bgt.n	1000c026 <__b2d+0x4e>
1000bffe:	230b      	movs	r3, #11
1000c000:	1c27      	adds	r7, r4, #0
1000c002:	1a1b      	subs	r3, r3, r0
1000c004:	40df      	lsrs	r7, r3
1000c006:	4339      	orrs	r1, r7
1000c008:	469c      	mov	ip, r3
1000c00a:	1c0b      	adds	r3, r1, #0
1000c00c:	2100      	movs	r1, #0
1000c00e:	42b5      	cmp	r5, r6
1000c010:	d902      	bls.n	1000c018 <__b2d+0x40>
1000c012:	9901      	ldr	r1, [sp, #4]
1000c014:	3908      	subs	r1, #8
1000c016:	6809      	ldr	r1, [r1, #0]
1000c018:	4665      	mov	r5, ip
1000c01a:	3015      	adds	r0, #21
1000c01c:	40e9      	lsrs	r1, r5
1000c01e:	4084      	lsls	r4, r0
1000c020:	4321      	orrs	r1, r4
1000c022:	1c0a      	adds	r2, r1, #0
1000c024:	e024      	b.n	1000c070 <__b2d+0x98>
1000c026:	2700      	movs	r7, #0
1000c028:	42b5      	cmp	r5, r6
1000c02a:	d902      	bls.n	1000c032 <__b2d+0x5a>
1000c02c:	9d01      	ldr	r5, [sp, #4]
1000c02e:	3d08      	subs	r5, #8
1000c030:	682f      	ldr	r7, [r5, #0]
1000c032:	230b      	movs	r3, #11
1000c034:	425b      	negs	r3, r3
1000c036:	469c      	mov	ip, r3
1000c038:	4484      	add	ip, r0
1000c03a:	4663      	mov	r3, ip
1000c03c:	2b00      	cmp	r3, #0
1000c03e:	d014      	beq.n	1000c06a <__b2d+0x92>
1000c040:	232b      	movs	r3, #43	; 0x2b
1000c042:	1a18      	subs	r0, r3, r0
1000c044:	4663      	mov	r3, ip
1000c046:	409c      	lsls	r4, r3
1000c048:	4321      	orrs	r1, r4
1000c04a:	1c3c      	adds	r4, r7, #0
1000c04c:	40c4      	lsrs	r4, r0
1000c04e:	4321      	orrs	r1, r4
1000c050:	1c0b      	adds	r3, r1, #0
1000c052:	2400      	movs	r4, #0
1000c054:	42b5      	cmp	r5, r6
1000c056:	d901      	bls.n	1000c05c <__b2d+0x84>
1000c058:	3d04      	subs	r5, #4
1000c05a:	682c      	ldr	r4, [r5, #0]
1000c05c:	40c4      	lsrs	r4, r0
1000c05e:	4661      	mov	r1, ip
1000c060:	1c20      	adds	r0, r4, #0
1000c062:	408f      	lsls	r7, r1
1000c064:	4338      	orrs	r0, r7
1000c066:	1c02      	adds	r2, r0, #0
1000c068:	e002      	b.n	1000c070 <__b2d+0x98>
1000c06a:	4321      	orrs	r1, r4
1000c06c:	1c0b      	adds	r3, r1, #0
1000c06e:	1c3a      	adds	r2, r7, #0
1000c070:	1c10      	adds	r0, r2, #0
1000c072:	1c19      	adds	r1, r3, #0
1000c074:	b003      	add	sp, #12
1000c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c078:	3ff00000 	.word	0x3ff00000

1000c07c <__d2b>:
1000c07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c07e:	1c1d      	adds	r5, r3, #0
1000c080:	2101      	movs	r1, #1
1000c082:	9f08      	ldr	r7, [sp, #32]
1000c084:	1c14      	adds	r4, r2, #0
1000c086:	f7ff fcac 	bl	1000b9e2 <_Balloc>
1000c08a:	032b      	lsls	r3, r5, #12
1000c08c:	006d      	lsls	r5, r5, #1
1000c08e:	1c06      	adds	r6, r0, #0
1000c090:	0b1b      	lsrs	r3, r3, #12
1000c092:	0d6d      	lsrs	r5, r5, #21
1000c094:	d002      	beq.n	1000c09c <__d2b+0x20>
1000c096:	2280      	movs	r2, #128	; 0x80
1000c098:	0352      	lsls	r2, r2, #13
1000c09a:	4313      	orrs	r3, r2
1000c09c:	9301      	str	r3, [sp, #4]
1000c09e:	2c00      	cmp	r4, #0
1000c0a0:	d018      	beq.n	1000c0d4 <__d2b+0x58>
1000c0a2:	4668      	mov	r0, sp
1000c0a4:	9400      	str	r4, [sp, #0]
1000c0a6:	f7ff fd84 	bl	1000bbb2 <__lo0bits>
1000c0aa:	9c00      	ldr	r4, [sp, #0]
1000c0ac:	2800      	cmp	r0, #0
1000c0ae:	d009      	beq.n	1000c0c4 <__d2b+0x48>
1000c0b0:	2320      	movs	r3, #32
1000c0b2:	9a01      	ldr	r2, [sp, #4]
1000c0b4:	1a19      	subs	r1, r3, r0
1000c0b6:	1c13      	adds	r3, r2, #0
1000c0b8:	408b      	lsls	r3, r1
1000c0ba:	40c2      	lsrs	r2, r0
1000c0bc:	4323      	orrs	r3, r4
1000c0be:	6173      	str	r3, [r6, #20]
1000c0c0:	9201      	str	r2, [sp, #4]
1000c0c2:	e000      	b.n	1000c0c6 <__d2b+0x4a>
1000c0c4:	6174      	str	r4, [r6, #20]
1000c0c6:	9c01      	ldr	r4, [sp, #4]
1000c0c8:	61b4      	str	r4, [r6, #24]
1000c0ca:	1e63      	subs	r3, r4, #1
1000c0cc:	419c      	sbcs	r4, r3
1000c0ce:	3401      	adds	r4, #1
1000c0d0:	6134      	str	r4, [r6, #16]
1000c0d2:	e007      	b.n	1000c0e4 <__d2b+0x68>
1000c0d4:	a801      	add	r0, sp, #4
1000c0d6:	f7ff fd6c 	bl	1000bbb2 <__lo0bits>
1000c0da:	2401      	movs	r4, #1
1000c0dc:	9b01      	ldr	r3, [sp, #4]
1000c0de:	6134      	str	r4, [r6, #16]
1000c0e0:	6173      	str	r3, [r6, #20]
1000c0e2:	3020      	adds	r0, #32
1000c0e4:	2d00      	cmp	r5, #0
1000c0e6:	d006      	beq.n	1000c0f6 <__d2b+0x7a>
1000c0e8:	4b0b      	ldr	r3, [pc, #44]	; (1000c118 <__d2b+0x9c>)
1000c0ea:	18ed      	adds	r5, r5, r3
1000c0ec:	2335      	movs	r3, #53	; 0x35
1000c0ee:	182d      	adds	r5, r5, r0
1000c0f0:	603d      	str	r5, [r7, #0]
1000c0f2:	1a18      	subs	r0, r3, r0
1000c0f4:	e00b      	b.n	1000c10e <__d2b+0x92>
1000c0f6:	4b09      	ldr	r3, [pc, #36]	; (1000c11c <__d2b+0xa0>)
1000c0f8:	18c0      	adds	r0, r0, r3
1000c0fa:	4b09      	ldr	r3, [pc, #36]	; (1000c120 <__d2b+0xa4>)
1000c0fc:	6038      	str	r0, [r7, #0]
1000c0fe:	18e3      	adds	r3, r4, r3
1000c100:	009b      	lsls	r3, r3, #2
1000c102:	18f3      	adds	r3, r6, r3
1000c104:	6958      	ldr	r0, [r3, #20]
1000c106:	f7ff fd39 	bl	1000bb7c <__hi0bits>
1000c10a:	0164      	lsls	r4, r4, #5
1000c10c:	1a20      	subs	r0, r4, r0
1000c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c110:	6018      	str	r0, [r3, #0]
1000c112:	1c30      	adds	r0, r6, #0
1000c114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000c116:	46c0      	nop			; (mov r8, r8)
1000c118:	fffffbcd 	.word	0xfffffbcd
1000c11c:	fffffbce 	.word	0xfffffbce
1000c120:	3fffffff 	.word	0x3fffffff

1000c124 <__ratio>:
1000c124:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c126:	b087      	sub	sp, #28
1000c128:	1c0e      	adds	r6, r1, #0
1000c12a:	a904      	add	r1, sp, #16
1000c12c:	1c07      	adds	r7, r0, #0
1000c12e:	f7ff ff53 	bl	1000bfd8 <__b2d>
1000c132:	1c04      	adds	r4, r0, #0
1000c134:	1c0d      	adds	r5, r1, #0
1000c136:	1c30      	adds	r0, r6, #0
1000c138:	a905      	add	r1, sp, #20
1000c13a:	9400      	str	r4, [sp, #0]
1000c13c:	9501      	str	r5, [sp, #4]
1000c13e:	f7ff ff4b 	bl	1000bfd8 <__b2d>
1000c142:	9b04      	ldr	r3, [sp, #16]
1000c144:	9a05      	ldr	r2, [sp, #20]
1000c146:	693f      	ldr	r7, [r7, #16]
1000c148:	1a9a      	subs	r2, r3, r2
1000c14a:	6933      	ldr	r3, [r6, #16]
1000c14c:	9002      	str	r0, [sp, #8]
1000c14e:	9103      	str	r1, [sp, #12]
1000c150:	1afb      	subs	r3, r7, r3
1000c152:	015b      	lsls	r3, r3, #5
1000c154:	18d3      	adds	r3, r2, r3
1000c156:	2b00      	cmp	r3, #0
1000c158:	dd03      	ble.n	1000c162 <__ratio+0x3e>
1000c15a:	051b      	lsls	r3, r3, #20
1000c15c:	195b      	adds	r3, r3, r5
1000c15e:	9301      	str	r3, [sp, #4]
1000c160:	e002      	b.n	1000c168 <__ratio+0x44>
1000c162:	051b      	lsls	r3, r3, #20
1000c164:	1acb      	subs	r3, r1, r3
1000c166:	9303      	str	r3, [sp, #12]
1000c168:	9800      	ldr	r0, [sp, #0]
1000c16a:	9901      	ldr	r1, [sp, #4]
1000c16c:	9a02      	ldr	r2, [sp, #8]
1000c16e:	9b03      	ldr	r3, [sp, #12]
1000c170:	f000 fad8 	bl	1000c724 <__aeabi_ddiv>
1000c174:	b007      	add	sp, #28
1000c176:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c178 <__copybits>:
1000c178:	1c13      	adds	r3, r2, #0
1000c17a:	3901      	subs	r1, #1
1000c17c:	b510      	push	{r4, lr}
1000c17e:	1149      	asrs	r1, r1, #5
1000c180:	6912      	ldr	r2, [r2, #16]
1000c182:	3101      	adds	r1, #1
1000c184:	0089      	lsls	r1, r1, #2
1000c186:	3314      	adds	r3, #20
1000c188:	0092      	lsls	r2, r2, #2
1000c18a:	1841      	adds	r1, r0, r1
1000c18c:	189a      	adds	r2, r3, r2
1000c18e:	4293      	cmp	r3, r2
1000c190:	d202      	bcs.n	1000c198 <__copybits+0x20>
1000c192:	cb10      	ldmia	r3!, {r4}
1000c194:	c010      	stmia	r0!, {r4}
1000c196:	e7fa      	b.n	1000c18e <__copybits+0x16>
1000c198:	4288      	cmp	r0, r1
1000c19a:	d202      	bcs.n	1000c1a2 <__copybits+0x2a>
1000c19c:	2300      	movs	r3, #0
1000c19e:	c008      	stmia	r0!, {r3}
1000c1a0:	e7fa      	b.n	1000c198 <__copybits+0x20>
1000c1a2:	bd10      	pop	{r4, pc}

1000c1a4 <__any_on>:
1000c1a4:	b530      	push	{r4, r5, lr}
1000c1a6:	1c04      	adds	r4, r0, #0
1000c1a8:	6902      	ldr	r2, [r0, #16]
1000c1aa:	3414      	adds	r4, #20
1000c1ac:	114b      	asrs	r3, r1, #5
1000c1ae:	4293      	cmp	r3, r2
1000c1b0:	dc0c      	bgt.n	1000c1cc <__any_on+0x28>
1000c1b2:	da0c      	bge.n	1000c1ce <__any_on+0x2a>
1000c1b4:	221f      	movs	r2, #31
1000c1b6:	4011      	ands	r1, r2
1000c1b8:	d009      	beq.n	1000c1ce <__any_on+0x2a>
1000c1ba:	009a      	lsls	r2, r3, #2
1000c1bc:	5915      	ldr	r5, [r2, r4]
1000c1be:	2001      	movs	r0, #1
1000c1c0:	1c2a      	adds	r2, r5, #0
1000c1c2:	40ca      	lsrs	r2, r1
1000c1c4:	408a      	lsls	r2, r1
1000c1c6:	42aa      	cmp	r2, r5
1000c1c8:	d10c      	bne.n	1000c1e4 <__any_on+0x40>
1000c1ca:	e000      	b.n	1000c1ce <__any_on+0x2a>
1000c1cc:	1c13      	adds	r3, r2, #0
1000c1ce:	009b      	lsls	r3, r3, #2
1000c1d0:	18e3      	adds	r3, r4, r3
1000c1d2:	42a3      	cmp	r3, r4
1000c1d4:	d905      	bls.n	1000c1e2 <__any_on+0x3e>
1000c1d6:	3b04      	subs	r3, #4
1000c1d8:	681a      	ldr	r2, [r3, #0]
1000c1da:	2a00      	cmp	r2, #0
1000c1dc:	d0f9      	beq.n	1000c1d2 <__any_on+0x2e>
1000c1de:	2001      	movs	r0, #1
1000c1e0:	e000      	b.n	1000c1e4 <__any_on+0x40>
1000c1e2:	2000      	movs	r0, #0
1000c1e4:	bd30      	pop	{r4, r5, pc}

1000c1e6 <_calloc_r>:
1000c1e6:	434a      	muls	r2, r1
1000c1e8:	b538      	push	{r3, r4, r5, lr}
1000c1ea:	1c11      	adds	r1, r2, #0
1000c1ec:	1c14      	adds	r4, r2, #0
1000c1ee:	f000 f84f 	bl	1000c290 <_malloc_r>
1000c1f2:	1e05      	subs	r5, r0, #0
1000c1f4:	d003      	beq.n	1000c1fe <_calloc_r+0x18>
1000c1f6:	2100      	movs	r1, #0
1000c1f8:	1c22      	adds	r2, r4, #0
1000c1fa:	f000 fa31 	bl	1000c660 <memset>
1000c1fe:	1c28      	adds	r0, r5, #0
1000c200:	bd38      	pop	{r3, r4, r5, pc}
	...

1000c204 <_free_r>:
1000c204:	b530      	push	{r4, r5, lr}
1000c206:	2900      	cmp	r1, #0
1000c208:	d03e      	beq.n	1000c288 <_free_r+0x84>
1000c20a:	3904      	subs	r1, #4
1000c20c:	680b      	ldr	r3, [r1, #0]
1000c20e:	2b00      	cmp	r3, #0
1000c210:	da00      	bge.n	1000c214 <_free_r+0x10>
1000c212:	18c9      	adds	r1, r1, r3
1000c214:	4a1d      	ldr	r2, [pc, #116]	; (1000c28c <_free_r+0x88>)
1000c216:	6813      	ldr	r3, [r2, #0]
1000c218:	1c14      	adds	r4, r2, #0
1000c21a:	2b00      	cmp	r3, #0
1000c21c:	d102      	bne.n	1000c224 <_free_r+0x20>
1000c21e:	604b      	str	r3, [r1, #4]
1000c220:	6011      	str	r1, [r2, #0]
1000c222:	e031      	b.n	1000c288 <_free_r+0x84>
1000c224:	4299      	cmp	r1, r3
1000c226:	d20d      	bcs.n	1000c244 <_free_r+0x40>
1000c228:	6808      	ldr	r0, [r1, #0]
1000c22a:	180a      	adds	r2, r1, r0
1000c22c:	429a      	cmp	r2, r3
1000c22e:	d103      	bne.n	1000c238 <_free_r+0x34>
1000c230:	6813      	ldr	r3, [r2, #0]
1000c232:	18c3      	adds	r3, r0, r3
1000c234:	600b      	str	r3, [r1, #0]
1000c236:	6853      	ldr	r3, [r2, #4]
1000c238:	604b      	str	r3, [r1, #4]
1000c23a:	6021      	str	r1, [r4, #0]
1000c23c:	e024      	b.n	1000c288 <_free_r+0x84>
1000c23e:	428a      	cmp	r2, r1
1000c240:	d803      	bhi.n	1000c24a <_free_r+0x46>
1000c242:	1c13      	adds	r3, r2, #0
1000c244:	685a      	ldr	r2, [r3, #4]
1000c246:	2a00      	cmp	r2, #0
1000c248:	d1f9      	bne.n	1000c23e <_free_r+0x3a>
1000c24a:	681d      	ldr	r5, [r3, #0]
1000c24c:	195c      	adds	r4, r3, r5
1000c24e:	428c      	cmp	r4, r1
1000c250:	d10b      	bne.n	1000c26a <_free_r+0x66>
1000c252:	6809      	ldr	r1, [r1, #0]
1000c254:	1869      	adds	r1, r5, r1
1000c256:	1858      	adds	r0, r3, r1
1000c258:	6019      	str	r1, [r3, #0]
1000c25a:	4290      	cmp	r0, r2
1000c25c:	d114      	bne.n	1000c288 <_free_r+0x84>
1000c25e:	6810      	ldr	r0, [r2, #0]
1000c260:	6852      	ldr	r2, [r2, #4]
1000c262:	1809      	adds	r1, r1, r0
1000c264:	6019      	str	r1, [r3, #0]
1000c266:	605a      	str	r2, [r3, #4]
1000c268:	e00e      	b.n	1000c288 <_free_r+0x84>
1000c26a:	428c      	cmp	r4, r1
1000c26c:	d902      	bls.n	1000c274 <_free_r+0x70>
1000c26e:	230c      	movs	r3, #12
1000c270:	6003      	str	r3, [r0, #0]
1000c272:	e009      	b.n	1000c288 <_free_r+0x84>
1000c274:	6808      	ldr	r0, [r1, #0]
1000c276:	180c      	adds	r4, r1, r0
1000c278:	4294      	cmp	r4, r2
1000c27a:	d103      	bne.n	1000c284 <_free_r+0x80>
1000c27c:	6814      	ldr	r4, [r2, #0]
1000c27e:	6852      	ldr	r2, [r2, #4]
1000c280:	1900      	adds	r0, r0, r4
1000c282:	6008      	str	r0, [r1, #0]
1000c284:	604a      	str	r2, [r1, #4]
1000c286:	6059      	str	r1, [r3, #4]
1000c288:	bd30      	pop	{r4, r5, pc}
1000c28a:	46c0      	nop			; (mov r8, r8)
1000c28c:	20000a30 	.word	0x20000a30

1000c290 <_malloc_r>:
1000c290:	2303      	movs	r3, #3
1000c292:	b570      	push	{r4, r5, r6, lr}
1000c294:	1ccc      	adds	r4, r1, #3
1000c296:	439c      	bics	r4, r3
1000c298:	3408      	adds	r4, #8
1000c29a:	1c05      	adds	r5, r0, #0
1000c29c:	2c0c      	cmp	r4, #12
1000c29e:	d201      	bcs.n	1000c2a4 <_malloc_r+0x14>
1000c2a0:	240c      	movs	r4, #12
1000c2a2:	e005      	b.n	1000c2b0 <_malloc_r+0x20>
1000c2a4:	2c00      	cmp	r4, #0
1000c2a6:	da03      	bge.n	1000c2b0 <_malloc_r+0x20>
1000c2a8:	230c      	movs	r3, #12
1000c2aa:	2000      	movs	r0, #0
1000c2ac:	602b      	str	r3, [r5, #0]
1000c2ae:	e042      	b.n	1000c336 <_malloc_r+0xa6>
1000c2b0:	428c      	cmp	r4, r1
1000c2b2:	d3f9      	bcc.n	1000c2a8 <_malloc_r+0x18>
1000c2b4:	4a20      	ldr	r2, [pc, #128]	; (1000c338 <_malloc_r+0xa8>)
1000c2b6:	6813      	ldr	r3, [r2, #0]
1000c2b8:	1c10      	adds	r0, r2, #0
1000c2ba:	1c19      	adds	r1, r3, #0
1000c2bc:	2900      	cmp	r1, #0
1000c2be:	d013      	beq.n	1000c2e8 <_malloc_r+0x58>
1000c2c0:	680a      	ldr	r2, [r1, #0]
1000c2c2:	1b12      	subs	r2, r2, r4
1000c2c4:	d40d      	bmi.n	1000c2e2 <_malloc_r+0x52>
1000c2c6:	2a0b      	cmp	r2, #11
1000c2c8:	d902      	bls.n	1000c2d0 <_malloc_r+0x40>
1000c2ca:	600a      	str	r2, [r1, #0]
1000c2cc:	188b      	adds	r3, r1, r2
1000c2ce:	e01f      	b.n	1000c310 <_malloc_r+0x80>
1000c2d0:	428b      	cmp	r3, r1
1000c2d2:	d102      	bne.n	1000c2da <_malloc_r+0x4a>
1000c2d4:	685a      	ldr	r2, [r3, #4]
1000c2d6:	6002      	str	r2, [r0, #0]
1000c2d8:	e01b      	b.n	1000c312 <_malloc_r+0x82>
1000c2da:	684a      	ldr	r2, [r1, #4]
1000c2dc:	605a      	str	r2, [r3, #4]
1000c2de:	1c0b      	adds	r3, r1, #0
1000c2e0:	e017      	b.n	1000c312 <_malloc_r+0x82>
1000c2e2:	1c0b      	adds	r3, r1, #0
1000c2e4:	6849      	ldr	r1, [r1, #4]
1000c2e6:	e7e9      	b.n	1000c2bc <_malloc_r+0x2c>
1000c2e8:	4e14      	ldr	r6, [pc, #80]	; (1000c33c <_malloc_r+0xac>)
1000c2ea:	6833      	ldr	r3, [r6, #0]
1000c2ec:	2b00      	cmp	r3, #0
1000c2ee:	d103      	bne.n	1000c2f8 <_malloc_r+0x68>
1000c2f0:	1c28      	adds	r0, r5, #0
1000c2f2:	f000 f97b 	bl	1000c5ec <_sbrk_r>
1000c2f6:	6030      	str	r0, [r6, #0]
1000c2f8:	1c28      	adds	r0, r5, #0
1000c2fa:	1c21      	adds	r1, r4, #0
1000c2fc:	f000 f976 	bl	1000c5ec <_sbrk_r>
1000c300:	1c03      	adds	r3, r0, #0
1000c302:	1c42      	adds	r2, r0, #1
1000c304:	d0d0      	beq.n	1000c2a8 <_malloc_r+0x18>
1000c306:	2203      	movs	r2, #3
1000c308:	1cc6      	adds	r6, r0, #3
1000c30a:	4396      	bics	r6, r2
1000c30c:	4286      	cmp	r6, r0
1000c30e:	d10a      	bne.n	1000c326 <_malloc_r+0x96>
1000c310:	601c      	str	r4, [r3, #0]
1000c312:	1c18      	adds	r0, r3, #0
1000c314:	2107      	movs	r1, #7
1000c316:	300b      	adds	r0, #11
1000c318:	1d1a      	adds	r2, r3, #4
1000c31a:	4388      	bics	r0, r1
1000c31c:	1a82      	subs	r2, r0, r2
1000c31e:	d00a      	beq.n	1000c336 <_malloc_r+0xa6>
1000c320:	4251      	negs	r1, r2
1000c322:	5099      	str	r1, [r3, r2]
1000c324:	e007      	b.n	1000c336 <_malloc_r+0xa6>
1000c326:	1a31      	subs	r1, r6, r0
1000c328:	1c28      	adds	r0, r5, #0
1000c32a:	f000 f95f 	bl	1000c5ec <_sbrk_r>
1000c32e:	1c43      	adds	r3, r0, #1
1000c330:	d0ba      	beq.n	1000c2a8 <_malloc_r+0x18>
1000c332:	1c33      	adds	r3, r6, #0
1000c334:	e7ec      	b.n	1000c310 <_malloc_r+0x80>
1000c336:	bd70      	pop	{r4, r5, r6, pc}
1000c338:	20000a30 	.word	0x20000a30
1000c33c:	20000a2c 	.word	0x20000a2c

1000c340 <__ssputs_r>:
1000c340:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c342:	688e      	ldr	r6, [r1, #8]
1000c344:	b085      	sub	sp, #20
1000c346:	1c07      	adds	r7, r0, #0
1000c348:	1c0c      	adds	r4, r1, #0
1000c34a:	9203      	str	r2, [sp, #12]
1000c34c:	9301      	str	r3, [sp, #4]
1000c34e:	42b3      	cmp	r3, r6
1000c350:	d345      	bcc.n	1000c3de <__ssputs_r+0x9e>
1000c352:	2390      	movs	r3, #144	; 0x90
1000c354:	898a      	ldrh	r2, [r1, #12]
1000c356:	00db      	lsls	r3, r3, #3
1000c358:	421a      	tst	r2, r3
1000c35a:	d03d      	beq.n	1000c3d8 <__ssputs_r+0x98>
1000c35c:	2503      	movs	r5, #3
1000c35e:	6909      	ldr	r1, [r1, #16]
1000c360:	6823      	ldr	r3, [r4, #0]
1000c362:	9801      	ldr	r0, [sp, #4]
1000c364:	1a5b      	subs	r3, r3, r1
1000c366:	9302      	str	r3, [sp, #8]
1000c368:	6963      	ldr	r3, [r4, #20]
1000c36a:	435d      	muls	r5, r3
1000c36c:	0feb      	lsrs	r3, r5, #31
1000c36e:	195d      	adds	r5, r3, r5
1000c370:	9b02      	ldr	r3, [sp, #8]
1000c372:	106d      	asrs	r5, r5, #1
1000c374:	3301      	adds	r3, #1
1000c376:	181b      	adds	r3, r3, r0
1000c378:	429d      	cmp	r5, r3
1000c37a:	d200      	bcs.n	1000c37e <__ssputs_r+0x3e>
1000c37c:	1c1d      	adds	r5, r3, #0
1000c37e:	1c38      	adds	r0, r7, #0
1000c380:	0553      	lsls	r3, r2, #21
1000c382:	d50f      	bpl.n	1000c3a4 <__ssputs_r+0x64>
1000c384:	1c29      	adds	r1, r5, #0
1000c386:	f7ff ff83 	bl	1000c290 <_malloc_r>
1000c38a:	1e06      	subs	r6, r0, #0
1000c38c:	d013      	beq.n	1000c3b6 <__ssputs_r+0x76>
1000c38e:	9a02      	ldr	r2, [sp, #8]
1000c390:	6921      	ldr	r1, [r4, #16]
1000c392:	f7fc fbfd 	bl	10008b90 <memcpy>
1000c396:	89a2      	ldrh	r2, [r4, #12]
1000c398:	4b18      	ldr	r3, [pc, #96]	; (1000c3fc <__ssputs_r+0xbc>)
1000c39a:	4013      	ands	r3, r2
1000c39c:	2280      	movs	r2, #128	; 0x80
1000c39e:	4313      	orrs	r3, r2
1000c3a0:	81a3      	strh	r3, [r4, #12]
1000c3a2:	e011      	b.n	1000c3c8 <__ssputs_r+0x88>
1000c3a4:	1c2a      	adds	r2, r5, #0
1000c3a6:	f000 f963 	bl	1000c670 <_realloc_r>
1000c3aa:	1e06      	subs	r6, r0, #0
1000c3ac:	d10c      	bne.n	1000c3c8 <__ssputs_r+0x88>
1000c3ae:	1c38      	adds	r0, r7, #0
1000c3b0:	6921      	ldr	r1, [r4, #16]
1000c3b2:	f7ff ff27 	bl	1000c204 <_free_r>
1000c3b6:	230c      	movs	r3, #12
1000c3b8:	2240      	movs	r2, #64	; 0x40
1000c3ba:	2001      	movs	r0, #1
1000c3bc:	603b      	str	r3, [r7, #0]
1000c3be:	89a3      	ldrh	r3, [r4, #12]
1000c3c0:	4240      	negs	r0, r0
1000c3c2:	4313      	orrs	r3, r2
1000c3c4:	81a3      	strh	r3, [r4, #12]
1000c3c6:	e017      	b.n	1000c3f8 <__ssputs_r+0xb8>
1000c3c8:	9b02      	ldr	r3, [sp, #8]
1000c3ca:	6126      	str	r6, [r4, #16]
1000c3cc:	18f6      	adds	r6, r6, r3
1000c3ce:	6026      	str	r6, [r4, #0]
1000c3d0:	6165      	str	r5, [r4, #20]
1000c3d2:	9e01      	ldr	r6, [sp, #4]
1000c3d4:	1aed      	subs	r5, r5, r3
1000c3d6:	60a5      	str	r5, [r4, #8]
1000c3d8:	9b01      	ldr	r3, [sp, #4]
1000c3da:	42b3      	cmp	r3, r6
1000c3dc:	d200      	bcs.n	1000c3e0 <__ssputs_r+0xa0>
1000c3de:	9e01      	ldr	r6, [sp, #4]
1000c3e0:	1c32      	adds	r2, r6, #0
1000c3e2:	6820      	ldr	r0, [r4, #0]
1000c3e4:	9903      	ldr	r1, [sp, #12]
1000c3e6:	f000 f927 	bl	1000c638 <memmove>
1000c3ea:	2000      	movs	r0, #0
1000c3ec:	68a3      	ldr	r3, [r4, #8]
1000c3ee:	1b9b      	subs	r3, r3, r6
1000c3f0:	60a3      	str	r3, [r4, #8]
1000c3f2:	6823      	ldr	r3, [r4, #0]
1000c3f4:	199e      	adds	r6, r3, r6
1000c3f6:	6026      	str	r6, [r4, #0]
1000c3f8:	b005      	add	sp, #20
1000c3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c3fc:	fffffb7f 	.word	0xfffffb7f

1000c400 <_svfiprintf_r>:
1000c400:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c402:	b09f      	sub	sp, #124	; 0x7c
1000c404:	9002      	str	r0, [sp, #8]
1000c406:	9305      	str	r3, [sp, #20]
1000c408:	898b      	ldrh	r3, [r1, #12]
1000c40a:	1c0e      	adds	r6, r1, #0
1000c40c:	1c17      	adds	r7, r2, #0
1000c40e:	061b      	lsls	r3, r3, #24
1000c410:	d510      	bpl.n	1000c434 <_svfiprintf_r+0x34>
1000c412:	690b      	ldr	r3, [r1, #16]
1000c414:	2b00      	cmp	r3, #0
1000c416:	d10d      	bne.n	1000c434 <_svfiprintf_r+0x34>
1000c418:	2140      	movs	r1, #64	; 0x40
1000c41a:	f7ff ff39 	bl	1000c290 <_malloc_r>
1000c41e:	6030      	str	r0, [r6, #0]
1000c420:	6130      	str	r0, [r6, #16]
1000c422:	2800      	cmp	r0, #0
1000c424:	d104      	bne.n	1000c430 <_svfiprintf_r+0x30>
1000c426:	230c      	movs	r3, #12
1000c428:	9a02      	ldr	r2, [sp, #8]
1000c42a:	3801      	subs	r0, #1
1000c42c:	6013      	str	r3, [r2, #0]
1000c42e:	e0d0      	b.n	1000c5d2 <_svfiprintf_r+0x1d2>
1000c430:	2340      	movs	r3, #64	; 0x40
1000c432:	6173      	str	r3, [r6, #20]
1000c434:	2300      	movs	r3, #0
1000c436:	ad06      	add	r5, sp, #24
1000c438:	616b      	str	r3, [r5, #20]
1000c43a:	3320      	adds	r3, #32
1000c43c:	766b      	strb	r3, [r5, #25]
1000c43e:	3310      	adds	r3, #16
1000c440:	76ab      	strb	r3, [r5, #26]
1000c442:	1c3c      	adds	r4, r7, #0
1000c444:	7823      	ldrb	r3, [r4, #0]
1000c446:	2b00      	cmp	r3, #0
1000c448:	d103      	bne.n	1000c452 <_svfiprintf_r+0x52>
1000c44a:	1be3      	subs	r3, r4, r7
1000c44c:	9304      	str	r3, [sp, #16]
1000c44e:	d012      	beq.n	1000c476 <_svfiprintf_r+0x76>
1000c450:	e003      	b.n	1000c45a <_svfiprintf_r+0x5a>
1000c452:	2b25      	cmp	r3, #37	; 0x25
1000c454:	d0f9      	beq.n	1000c44a <_svfiprintf_r+0x4a>
1000c456:	3401      	adds	r4, #1
1000c458:	e7f4      	b.n	1000c444 <_svfiprintf_r+0x44>
1000c45a:	9b04      	ldr	r3, [sp, #16]
1000c45c:	9802      	ldr	r0, [sp, #8]
1000c45e:	1c31      	adds	r1, r6, #0
1000c460:	1c3a      	adds	r2, r7, #0
1000c462:	f7ff ff6d 	bl	1000c340 <__ssputs_r>
1000c466:	1c43      	adds	r3, r0, #1
1000c468:	d100      	bne.n	1000c46c <_svfiprintf_r+0x6c>
1000c46a:	e0ac      	b.n	1000c5c6 <_svfiprintf_r+0x1c6>
1000c46c:	696a      	ldr	r2, [r5, #20]
1000c46e:	9b04      	ldr	r3, [sp, #16]
1000c470:	4694      	mov	ip, r2
1000c472:	4463      	add	r3, ip
1000c474:	616b      	str	r3, [r5, #20]
1000c476:	7823      	ldrb	r3, [r4, #0]
1000c478:	2b00      	cmp	r3, #0
1000c47a:	d100      	bne.n	1000c47e <_svfiprintf_r+0x7e>
1000c47c:	e0a3      	b.n	1000c5c6 <_svfiprintf_r+0x1c6>
1000c47e:	2201      	movs	r2, #1
1000c480:	2300      	movs	r3, #0
1000c482:	4252      	negs	r2, r2
1000c484:	606a      	str	r2, [r5, #4]
1000c486:	a902      	add	r1, sp, #8
1000c488:	3254      	adds	r2, #84	; 0x54
1000c48a:	1852      	adds	r2, r2, r1
1000c48c:	3401      	adds	r4, #1
1000c48e:	602b      	str	r3, [r5, #0]
1000c490:	60eb      	str	r3, [r5, #12]
1000c492:	60ab      	str	r3, [r5, #8]
1000c494:	7013      	strb	r3, [r2, #0]
1000c496:	65ab      	str	r3, [r5, #88]	; 0x58
1000c498:	4f4f      	ldr	r7, [pc, #316]	; (1000c5d8 <_svfiprintf_r+0x1d8>)
1000c49a:	7821      	ldrb	r1, [r4, #0]
1000c49c:	1c38      	adds	r0, r7, #0
1000c49e:	2205      	movs	r2, #5
1000c4a0:	f7ff fa94 	bl	1000b9cc <memchr>
1000c4a4:	2800      	cmp	r0, #0
1000c4a6:	d008      	beq.n	1000c4ba <_svfiprintf_r+0xba>
1000c4a8:	1bc0      	subs	r0, r0, r7
1000c4aa:	2701      	movs	r7, #1
1000c4ac:	4087      	lsls	r7, r0
1000c4ae:	1c38      	adds	r0, r7, #0
1000c4b0:	682b      	ldr	r3, [r5, #0]
1000c4b2:	3401      	adds	r4, #1
1000c4b4:	4318      	orrs	r0, r3
1000c4b6:	6028      	str	r0, [r5, #0]
1000c4b8:	e7ee      	b.n	1000c498 <_svfiprintf_r+0x98>
1000c4ba:	682b      	ldr	r3, [r5, #0]
1000c4bc:	06da      	lsls	r2, r3, #27
1000c4be:	d504      	bpl.n	1000c4ca <_svfiprintf_r+0xca>
1000c4c0:	2253      	movs	r2, #83	; 0x53
1000c4c2:	2120      	movs	r1, #32
1000c4c4:	a802      	add	r0, sp, #8
1000c4c6:	1812      	adds	r2, r2, r0
1000c4c8:	7011      	strb	r1, [r2, #0]
1000c4ca:	071a      	lsls	r2, r3, #28
1000c4cc:	d504      	bpl.n	1000c4d8 <_svfiprintf_r+0xd8>
1000c4ce:	2253      	movs	r2, #83	; 0x53
1000c4d0:	212b      	movs	r1, #43	; 0x2b
1000c4d2:	a802      	add	r0, sp, #8
1000c4d4:	1812      	adds	r2, r2, r0
1000c4d6:	7011      	strb	r1, [r2, #0]
1000c4d8:	7822      	ldrb	r2, [r4, #0]
1000c4da:	2a2a      	cmp	r2, #42	; 0x2a
1000c4dc:	d001      	beq.n	1000c4e2 <_svfiprintf_r+0xe2>
1000c4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c4e0:	e00e      	b.n	1000c500 <_svfiprintf_r+0x100>
1000c4e2:	9a05      	ldr	r2, [sp, #20]
1000c4e4:	1d11      	adds	r1, r2, #4
1000c4e6:	6812      	ldr	r2, [r2, #0]
1000c4e8:	9105      	str	r1, [sp, #20]
1000c4ea:	2a00      	cmp	r2, #0
1000c4ec:	db01      	blt.n	1000c4f2 <_svfiprintf_r+0xf2>
1000c4ee:	9209      	str	r2, [sp, #36]	; 0x24
1000c4f0:	e004      	b.n	1000c4fc <_svfiprintf_r+0xfc>
1000c4f2:	4252      	negs	r2, r2
1000c4f4:	60ea      	str	r2, [r5, #12]
1000c4f6:	2202      	movs	r2, #2
1000c4f8:	4313      	orrs	r3, r2
1000c4fa:	602b      	str	r3, [r5, #0]
1000c4fc:	3401      	adds	r4, #1
1000c4fe:	e009      	b.n	1000c514 <_svfiprintf_r+0x114>
1000c500:	7822      	ldrb	r2, [r4, #0]
1000c502:	3a30      	subs	r2, #48	; 0x30
1000c504:	2a09      	cmp	r2, #9
1000c506:	d804      	bhi.n	1000c512 <_svfiprintf_r+0x112>
1000c508:	210a      	movs	r1, #10
1000c50a:	434b      	muls	r3, r1
1000c50c:	3401      	adds	r4, #1
1000c50e:	189b      	adds	r3, r3, r2
1000c510:	e7f6      	b.n	1000c500 <_svfiprintf_r+0x100>
1000c512:	9309      	str	r3, [sp, #36]	; 0x24
1000c514:	7823      	ldrb	r3, [r4, #0]
1000c516:	2b2e      	cmp	r3, #46	; 0x2e
1000c518:	d118      	bne.n	1000c54c <_svfiprintf_r+0x14c>
1000c51a:	7863      	ldrb	r3, [r4, #1]
1000c51c:	2b2a      	cmp	r3, #42	; 0x2a
1000c51e:	d109      	bne.n	1000c534 <_svfiprintf_r+0x134>
1000c520:	9b05      	ldr	r3, [sp, #20]
1000c522:	3402      	adds	r4, #2
1000c524:	1d1a      	adds	r2, r3, #4
1000c526:	681b      	ldr	r3, [r3, #0]
1000c528:	9205      	str	r2, [sp, #20]
1000c52a:	2b00      	cmp	r3, #0
1000c52c:	da0d      	bge.n	1000c54a <_svfiprintf_r+0x14a>
1000c52e:	2301      	movs	r3, #1
1000c530:	425b      	negs	r3, r3
1000c532:	e00a      	b.n	1000c54a <_svfiprintf_r+0x14a>
1000c534:	2300      	movs	r3, #0
1000c536:	3401      	adds	r4, #1
1000c538:	7822      	ldrb	r2, [r4, #0]
1000c53a:	3a30      	subs	r2, #48	; 0x30
1000c53c:	2a09      	cmp	r2, #9
1000c53e:	d804      	bhi.n	1000c54a <_svfiprintf_r+0x14a>
1000c540:	210a      	movs	r1, #10
1000c542:	434b      	muls	r3, r1
1000c544:	3401      	adds	r4, #1
1000c546:	189b      	adds	r3, r3, r2
1000c548:	e7f6      	b.n	1000c538 <_svfiprintf_r+0x138>
1000c54a:	9307      	str	r3, [sp, #28]
1000c54c:	4f23      	ldr	r7, [pc, #140]	; (1000c5dc <_svfiprintf_r+0x1dc>)
1000c54e:	7821      	ldrb	r1, [r4, #0]
1000c550:	1c38      	adds	r0, r7, #0
1000c552:	2203      	movs	r2, #3
1000c554:	f7ff fa3a 	bl	1000b9cc <memchr>
1000c558:	2800      	cmp	r0, #0
1000c55a:	d007      	beq.n	1000c56c <_svfiprintf_r+0x16c>
1000c55c:	1bc0      	subs	r0, r0, r7
1000c55e:	2740      	movs	r7, #64	; 0x40
1000c560:	4087      	lsls	r7, r0
1000c562:	1c38      	adds	r0, r7, #0
1000c564:	682b      	ldr	r3, [r5, #0]
1000c566:	3401      	adds	r4, #1
1000c568:	4318      	orrs	r0, r3
1000c56a:	6028      	str	r0, [r5, #0]
1000c56c:	7821      	ldrb	r1, [r4, #0]
1000c56e:	481c      	ldr	r0, [pc, #112]	; (1000c5e0 <_svfiprintf_r+0x1e0>)
1000c570:	2206      	movs	r2, #6
1000c572:	1c67      	adds	r7, r4, #1
1000c574:	7629      	strb	r1, [r5, #24]
1000c576:	f7ff fa29 	bl	1000b9cc <memchr>
1000c57a:	2800      	cmp	r0, #0
1000c57c:	d012      	beq.n	1000c5a4 <_svfiprintf_r+0x1a4>
1000c57e:	4b19      	ldr	r3, [pc, #100]	; (1000c5e4 <_svfiprintf_r+0x1e4>)
1000c580:	2b00      	cmp	r3, #0
1000c582:	d106      	bne.n	1000c592 <_svfiprintf_r+0x192>
1000c584:	2207      	movs	r2, #7
1000c586:	9b05      	ldr	r3, [sp, #20]
1000c588:	3307      	adds	r3, #7
1000c58a:	4393      	bics	r3, r2
1000c58c:	3308      	adds	r3, #8
1000c58e:	9305      	str	r3, [sp, #20]
1000c590:	e014      	b.n	1000c5bc <_svfiprintf_r+0x1bc>
1000c592:	ab05      	add	r3, sp, #20
1000c594:	9300      	str	r3, [sp, #0]
1000c596:	9802      	ldr	r0, [sp, #8]
1000c598:	1c29      	adds	r1, r5, #0
1000c59a:	1c32      	adds	r2, r6, #0
1000c59c:	4b12      	ldr	r3, [pc, #72]	; (1000c5e8 <_svfiprintf_r+0x1e8>)
1000c59e:	f7fc fb95 	bl	10008ccc <_printf_float>
1000c5a2:	e007      	b.n	1000c5b4 <_svfiprintf_r+0x1b4>
1000c5a4:	ab05      	add	r3, sp, #20
1000c5a6:	9300      	str	r3, [sp, #0]
1000c5a8:	9802      	ldr	r0, [sp, #8]
1000c5aa:	1c29      	adds	r1, r5, #0
1000c5ac:	1c32      	adds	r2, r6, #0
1000c5ae:	4b0e      	ldr	r3, [pc, #56]	; (1000c5e8 <_svfiprintf_r+0x1e8>)
1000c5b0:	f7fc fe32 	bl	10009218 <_printf_i>
1000c5b4:	9003      	str	r0, [sp, #12]
1000c5b6:	9b03      	ldr	r3, [sp, #12]
1000c5b8:	3301      	adds	r3, #1
1000c5ba:	d004      	beq.n	1000c5c6 <_svfiprintf_r+0x1c6>
1000c5bc:	696b      	ldr	r3, [r5, #20]
1000c5be:	9a03      	ldr	r2, [sp, #12]
1000c5c0:	189b      	adds	r3, r3, r2
1000c5c2:	616b      	str	r3, [r5, #20]
1000c5c4:	e73d      	b.n	1000c442 <_svfiprintf_r+0x42>
1000c5c6:	89b3      	ldrh	r3, [r6, #12]
1000c5c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000c5ca:	065b      	lsls	r3, r3, #25
1000c5cc:	d501      	bpl.n	1000c5d2 <_svfiprintf_r+0x1d2>
1000c5ce:	2001      	movs	r0, #1
1000c5d0:	4240      	negs	r0, r0
1000c5d2:	b01f      	add	sp, #124	; 0x7c
1000c5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5d6:	46c0      	nop			; (mov r8, r8)
1000c5d8:	1000d194 	.word	0x1000d194
1000c5dc:	1000d19a 	.word	0x1000d19a
1000c5e0:	1000d19e 	.word	0x1000d19e
1000c5e4:	10008ccd 	.word	0x10008ccd
1000c5e8:	1000c341 	.word	0x1000c341

1000c5ec <_sbrk_r>:
1000c5ec:	b538      	push	{r3, r4, r5, lr}
1000c5ee:	2300      	movs	r3, #0
1000c5f0:	4c06      	ldr	r4, [pc, #24]	; (1000c60c <_sbrk_r+0x20>)
1000c5f2:	1c05      	adds	r5, r0, #0
1000c5f4:	1c08      	adds	r0, r1, #0
1000c5f6:	6023      	str	r3, [r4, #0]
1000c5f8:	f7f9 feda 	bl	100063b0 <_sbrk>
1000c5fc:	1c43      	adds	r3, r0, #1
1000c5fe:	d103      	bne.n	1000c608 <_sbrk_r+0x1c>
1000c600:	6823      	ldr	r3, [r4, #0]
1000c602:	2b00      	cmp	r3, #0
1000c604:	d000      	beq.n	1000c608 <_sbrk_r+0x1c>
1000c606:	602b      	str	r3, [r5, #0]
1000c608:	bd38      	pop	{r3, r4, r5, pc}
1000c60a:	46c0      	nop			; (mov r8, r8)
1000c60c:	20000b58 	.word	0x20000b58

1000c610 <strncmp>:
1000c610:	2300      	movs	r3, #0
1000c612:	b530      	push	{r4, r5, lr}
1000c614:	429a      	cmp	r2, r3
1000c616:	d00d      	beq.n	1000c634 <strncmp+0x24>
1000c618:	3a01      	subs	r2, #1
1000c61a:	5cc4      	ldrb	r4, [r0, r3]
1000c61c:	5ccd      	ldrb	r5, [r1, r3]
1000c61e:	42ac      	cmp	r4, r5
1000c620:	d102      	bne.n	1000c628 <strncmp+0x18>
1000c622:	4293      	cmp	r3, r2
1000c624:	d102      	bne.n	1000c62c <strncmp+0x1c>
1000c626:	1c25      	adds	r5, r4, #0
1000c628:	1b63      	subs	r3, r4, r5
1000c62a:	e003      	b.n	1000c634 <strncmp+0x24>
1000c62c:	3301      	adds	r3, #1
1000c62e:	2c00      	cmp	r4, #0
1000c630:	d1f3      	bne.n	1000c61a <strncmp+0xa>
1000c632:	e7f8      	b.n	1000c626 <strncmp+0x16>
1000c634:	1c18      	adds	r0, r3, #0
1000c636:	bd30      	pop	{r4, r5, pc}

1000c638 <memmove>:
1000c638:	b510      	push	{r4, lr}
1000c63a:	4281      	cmp	r1, r0
1000c63c:	d208      	bcs.n	1000c650 <memmove+0x18>
1000c63e:	188b      	adds	r3, r1, r2
1000c640:	4298      	cmp	r0, r3
1000c642:	d205      	bcs.n	1000c650 <memmove+0x18>
1000c644:	1a9b      	subs	r3, r3, r2
1000c646:	3a01      	subs	r2, #1
1000c648:	d309      	bcc.n	1000c65e <memmove+0x26>
1000c64a:	5c99      	ldrb	r1, [r3, r2]
1000c64c:	5481      	strb	r1, [r0, r2]
1000c64e:	e7fa      	b.n	1000c646 <memmove+0xe>
1000c650:	2300      	movs	r3, #0
1000c652:	4293      	cmp	r3, r2
1000c654:	d003      	beq.n	1000c65e <memmove+0x26>
1000c656:	5ccc      	ldrb	r4, [r1, r3]
1000c658:	54c4      	strb	r4, [r0, r3]
1000c65a:	3301      	adds	r3, #1
1000c65c:	e7f9      	b.n	1000c652 <memmove+0x1a>
1000c65e:	bd10      	pop	{r4, pc}

1000c660 <memset>:
1000c660:	1c03      	adds	r3, r0, #0
1000c662:	1882      	adds	r2, r0, r2
1000c664:	4293      	cmp	r3, r2
1000c666:	d002      	beq.n	1000c66e <memset+0xe>
1000c668:	7019      	strb	r1, [r3, #0]
1000c66a:	3301      	adds	r3, #1
1000c66c:	e7fa      	b.n	1000c664 <memset+0x4>
1000c66e:	4770      	bx	lr

1000c670 <_realloc_r>:
1000c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c672:	1c06      	adds	r6, r0, #0
1000c674:	1c0c      	adds	r4, r1, #0
1000c676:	1c15      	adds	r5, r2, #0
1000c678:	2900      	cmp	r1, #0
1000c67a:	d104      	bne.n	1000c686 <_realloc_r+0x16>
1000c67c:	1c11      	adds	r1, r2, #0
1000c67e:	f7ff fe07 	bl	1000c290 <_malloc_r>
1000c682:	1c04      	adds	r4, r0, #0
1000c684:	e018      	b.n	1000c6b8 <_realloc_r+0x48>
1000c686:	2a00      	cmp	r2, #0
1000c688:	d103      	bne.n	1000c692 <_realloc_r+0x22>
1000c68a:	f7ff fdbb 	bl	1000c204 <_free_r>
1000c68e:	1c2c      	adds	r4, r5, #0
1000c690:	e012      	b.n	1000c6b8 <_realloc_r+0x48>
1000c692:	f000 f813 	bl	1000c6bc <_malloc_usable_size_r>
1000c696:	42a8      	cmp	r0, r5
1000c698:	d20e      	bcs.n	1000c6b8 <_realloc_r+0x48>
1000c69a:	1c30      	adds	r0, r6, #0
1000c69c:	1c29      	adds	r1, r5, #0
1000c69e:	f7ff fdf7 	bl	1000c290 <_malloc_r>
1000c6a2:	1e07      	subs	r7, r0, #0
1000c6a4:	d007      	beq.n	1000c6b6 <_realloc_r+0x46>
1000c6a6:	1c21      	adds	r1, r4, #0
1000c6a8:	1c2a      	adds	r2, r5, #0
1000c6aa:	f7fc fa71 	bl	10008b90 <memcpy>
1000c6ae:	1c30      	adds	r0, r6, #0
1000c6b0:	1c21      	adds	r1, r4, #0
1000c6b2:	f7ff fda7 	bl	1000c204 <_free_r>
1000c6b6:	1c3c      	adds	r4, r7, #0
1000c6b8:	1c20      	adds	r0, r4, #0
1000c6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000c6bc <_malloc_usable_size_r>:
1000c6bc:	1f0b      	subs	r3, r1, #4
1000c6be:	681a      	ldr	r2, [r3, #0]
1000c6c0:	1f10      	subs	r0, r2, #4
1000c6c2:	2a00      	cmp	r2, #0
1000c6c4:	da04      	bge.n	1000c6d0 <_malloc_usable_size_r+0x14>
1000c6c6:	1889      	adds	r1, r1, r2
1000c6c8:	3904      	subs	r1, #4
1000c6ca:	680b      	ldr	r3, [r1, #0]
1000c6cc:	18d0      	adds	r0, r2, r3
1000c6ce:	3804      	subs	r0, #4
1000c6d0:	4770      	bx	lr
	...

1000c6d4 <__gnu_thumb1_case_uqi>:
1000c6d4:	b402      	push	{r1}
1000c6d6:	4671      	mov	r1, lr
1000c6d8:	0849      	lsrs	r1, r1, #1
1000c6da:	0049      	lsls	r1, r1, #1
1000c6dc:	5c09      	ldrb	r1, [r1, r0]
1000c6de:	0049      	lsls	r1, r1, #1
1000c6e0:	448e      	add	lr, r1
1000c6e2:	bc02      	pop	{r1}
1000c6e4:	4770      	bx	lr
1000c6e6:	46c0      	nop			; (mov r8, r8)

1000c6e8 <__aeabi_d2uiz>:
1000c6e8:	b538      	push	{r3, r4, r5, lr}
1000c6ea:	2200      	movs	r2, #0
1000c6ec:	4b0c      	ldr	r3, [pc, #48]	; (1000c720 <__aeabi_d2uiz+0x38>)
1000c6ee:	1c04      	adds	r4, r0, #0
1000c6f0:	1c0d      	adds	r5, r1, #0
1000c6f2:	f7fa fa2d 	bl	10006b50 <__aeabi_dcmpge>
1000c6f6:	2800      	cmp	r0, #0
1000c6f8:	d104      	bne.n	1000c704 <__aeabi_d2uiz+0x1c>
1000c6fa:	1c20      	adds	r0, r4, #0
1000c6fc:	1c29      	adds	r1, r5, #0
1000c6fe:	f000 fb35 	bl	1000cd6c <__aeabi_d2iz>
1000c702:	bd38      	pop	{r3, r4, r5, pc}
1000c704:	4b06      	ldr	r3, [pc, #24]	; (1000c720 <__aeabi_d2uiz+0x38>)
1000c706:	2200      	movs	r2, #0
1000c708:	1c20      	adds	r0, r4, #0
1000c70a:	1c29      	adds	r1, r5, #0
1000c70c:	f7fb fd2a 	bl	10008164 <__aeabi_dsub>
1000c710:	f000 fb2c 	bl	1000cd6c <__aeabi_d2iz>
1000c714:	2380      	movs	r3, #128	; 0x80
1000c716:	061b      	lsls	r3, r3, #24
1000c718:	469c      	mov	ip, r3
1000c71a:	4460      	add	r0, ip
1000c71c:	e7f1      	b.n	1000c702 <__aeabi_d2uiz+0x1a>
1000c71e:	46c0      	nop			; (mov r8, r8)
1000c720:	41e00000 	.word	0x41e00000

1000c724 <__aeabi_ddiv>:
1000c724:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c726:	465f      	mov	r7, fp
1000c728:	4656      	mov	r6, sl
1000c72a:	464d      	mov	r5, r9
1000c72c:	4644      	mov	r4, r8
1000c72e:	b4f0      	push	{r4, r5, r6, r7}
1000c730:	030f      	lsls	r7, r1, #12
1000c732:	b087      	sub	sp, #28
1000c734:	4698      	mov	r8, r3
1000c736:	004d      	lsls	r5, r1, #1
1000c738:	0b3b      	lsrs	r3, r7, #12
1000c73a:	0fcc      	lsrs	r4, r1, #31
1000c73c:	1c06      	adds	r6, r0, #0
1000c73e:	4692      	mov	sl, r2
1000c740:	4681      	mov	r9, r0
1000c742:	469b      	mov	fp, r3
1000c744:	0d6d      	lsrs	r5, r5, #21
1000c746:	9401      	str	r4, [sp, #4]
1000c748:	d06b      	beq.n	1000c822 <__aeabi_ddiv+0xfe>
1000c74a:	4b66      	ldr	r3, [pc, #408]	; (1000c8e4 <__aeabi_ddiv+0x1c0>)
1000c74c:	429d      	cmp	r5, r3
1000c74e:	d035      	beq.n	1000c7bc <__aeabi_ddiv+0x98>
1000c750:	2780      	movs	r7, #128	; 0x80
1000c752:	465b      	mov	r3, fp
1000c754:	037f      	lsls	r7, r7, #13
1000c756:	431f      	orrs	r7, r3
1000c758:	00f3      	lsls	r3, r6, #3
1000c75a:	4699      	mov	r9, r3
1000c75c:	4b62      	ldr	r3, [pc, #392]	; (1000c8e8 <__aeabi_ddiv+0x1c4>)
1000c75e:	00ff      	lsls	r7, r7, #3
1000c760:	0f40      	lsrs	r0, r0, #29
1000c762:	469c      	mov	ip, r3
1000c764:	4307      	orrs	r7, r0
1000c766:	2300      	movs	r3, #0
1000c768:	46bb      	mov	fp, r7
1000c76a:	2600      	movs	r6, #0
1000c76c:	4465      	add	r5, ip
1000c76e:	9300      	str	r3, [sp, #0]
1000c770:	4642      	mov	r2, r8
1000c772:	0317      	lsls	r7, r2, #12
1000c774:	0050      	lsls	r0, r2, #1
1000c776:	0fd2      	lsrs	r2, r2, #31
1000c778:	4653      	mov	r3, sl
1000c77a:	0b3f      	lsrs	r7, r7, #12
1000c77c:	0d40      	lsrs	r0, r0, #21
1000c77e:	4690      	mov	r8, r2
1000c780:	d100      	bne.n	1000c784 <__aeabi_ddiv+0x60>
1000c782:	e072      	b.n	1000c86a <__aeabi_ddiv+0x146>
1000c784:	4a57      	ldr	r2, [pc, #348]	; (1000c8e4 <__aeabi_ddiv+0x1c0>)
1000c786:	4290      	cmp	r0, r2
1000c788:	d067      	beq.n	1000c85a <__aeabi_ddiv+0x136>
1000c78a:	2380      	movs	r3, #128	; 0x80
1000c78c:	035b      	lsls	r3, r3, #13
1000c78e:	431f      	orrs	r7, r3
1000c790:	4653      	mov	r3, sl
1000c792:	4a55      	ldr	r2, [pc, #340]	; (1000c8e8 <__aeabi_ddiv+0x1c4>)
1000c794:	0f5b      	lsrs	r3, r3, #29
1000c796:	00ff      	lsls	r7, r7, #3
1000c798:	431f      	orrs	r7, r3
1000c79a:	4694      	mov	ip, r2
1000c79c:	4653      	mov	r3, sl
1000c79e:	2100      	movs	r1, #0
1000c7a0:	00db      	lsls	r3, r3, #3
1000c7a2:	4460      	add	r0, ip
1000c7a4:	4642      	mov	r2, r8
1000c7a6:	4062      	eors	r2, r4
1000c7a8:	4692      	mov	sl, r2
1000c7aa:	1a2d      	subs	r5, r5, r0
1000c7ac:	430e      	orrs	r6, r1
1000c7ae:	2e0f      	cmp	r6, #15
1000c7b0:	d900      	bls.n	1000c7b4 <__aeabi_ddiv+0x90>
1000c7b2:	e0a1      	b.n	1000c8f8 <__aeabi_ddiv+0x1d4>
1000c7b4:	484d      	ldr	r0, [pc, #308]	; (1000c8ec <__aeabi_ddiv+0x1c8>)
1000c7b6:	00b6      	lsls	r6, r6, #2
1000c7b8:	5980      	ldr	r0, [r0, r6]
1000c7ba:	4687      	mov	pc, r0
1000c7bc:	465b      	mov	r3, fp
1000c7be:	431e      	orrs	r6, r3
1000c7c0:	d000      	beq.n	1000c7c4 <__aeabi_ddiv+0xa0>
1000c7c2:	e076      	b.n	1000c8b2 <__aeabi_ddiv+0x18e>
1000c7c4:	2300      	movs	r3, #0
1000c7c6:	469b      	mov	fp, r3
1000c7c8:	4699      	mov	r9, r3
1000c7ca:	3302      	adds	r3, #2
1000c7cc:	2608      	movs	r6, #8
1000c7ce:	9300      	str	r3, [sp, #0]
1000c7d0:	e7ce      	b.n	1000c770 <__aeabi_ddiv+0x4c>
1000c7d2:	4699      	mov	r9, r3
1000c7d4:	4643      	mov	r3, r8
1000c7d6:	46bb      	mov	fp, r7
1000c7d8:	9301      	str	r3, [sp, #4]
1000c7da:	9100      	str	r1, [sp, #0]
1000c7dc:	9b00      	ldr	r3, [sp, #0]
1000c7de:	2b02      	cmp	r3, #2
1000c7e0:	d16b      	bne.n	1000c8ba <__aeabi_ddiv+0x196>
1000c7e2:	9b01      	ldr	r3, [sp, #4]
1000c7e4:	469a      	mov	sl, r3
1000c7e6:	2100      	movs	r1, #0
1000c7e8:	4653      	mov	r3, sl
1000c7ea:	2201      	movs	r2, #1
1000c7ec:	2700      	movs	r7, #0
1000c7ee:	4689      	mov	r9, r1
1000c7f0:	401a      	ands	r2, r3
1000c7f2:	4b3c      	ldr	r3, [pc, #240]	; (1000c8e4 <__aeabi_ddiv+0x1c0>)
1000c7f4:	2100      	movs	r1, #0
1000c7f6:	033f      	lsls	r7, r7, #12
1000c7f8:	0d0c      	lsrs	r4, r1, #20
1000c7fa:	0524      	lsls	r4, r4, #20
1000c7fc:	0b3f      	lsrs	r7, r7, #12
1000c7fe:	4327      	orrs	r7, r4
1000c800:	4c3b      	ldr	r4, [pc, #236]	; (1000c8f0 <__aeabi_ddiv+0x1cc>)
1000c802:	051b      	lsls	r3, r3, #20
1000c804:	4027      	ands	r7, r4
1000c806:	431f      	orrs	r7, r3
1000c808:	007f      	lsls	r7, r7, #1
1000c80a:	07d2      	lsls	r2, r2, #31
1000c80c:	087f      	lsrs	r7, r7, #1
1000c80e:	4317      	orrs	r7, r2
1000c810:	4648      	mov	r0, r9
1000c812:	1c39      	adds	r1, r7, #0
1000c814:	b007      	add	sp, #28
1000c816:	bc3c      	pop	{r2, r3, r4, r5}
1000c818:	4690      	mov	r8, r2
1000c81a:	4699      	mov	r9, r3
1000c81c:	46a2      	mov	sl, r4
1000c81e:	46ab      	mov	fp, r5
1000c820:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c822:	4303      	orrs	r3, r0
1000c824:	d03e      	beq.n	1000c8a4 <__aeabi_ddiv+0x180>
1000c826:	465b      	mov	r3, fp
1000c828:	2b00      	cmp	r3, #0
1000c82a:	d100      	bne.n	1000c82e <__aeabi_ddiv+0x10a>
1000c82c:	e19c      	b.n	1000cb68 <__aeabi_ddiv+0x444>
1000c82e:	4658      	mov	r0, fp
1000c830:	f7fc f964 	bl	10008afc <__clzsi2>
1000c834:	2328      	movs	r3, #40	; 0x28
1000c836:	1c31      	adds	r1, r6, #0
1000c838:	1a1b      	subs	r3, r3, r0
1000c83a:	1c02      	adds	r2, r0, #0
1000c83c:	465f      	mov	r7, fp
1000c83e:	40d9      	lsrs	r1, r3
1000c840:	3a08      	subs	r2, #8
1000c842:	4097      	lsls	r7, r2
1000c844:	1c0b      	adds	r3, r1, #0
1000c846:	4096      	lsls	r6, r2
1000c848:	433b      	orrs	r3, r7
1000c84a:	469b      	mov	fp, r3
1000c84c:	46b1      	mov	r9, r6
1000c84e:	2300      	movs	r3, #0
1000c850:	4d28      	ldr	r5, [pc, #160]	; (1000c8f4 <__aeabi_ddiv+0x1d0>)
1000c852:	2600      	movs	r6, #0
1000c854:	1a2d      	subs	r5, r5, r0
1000c856:	9300      	str	r3, [sp, #0]
1000c858:	e78a      	b.n	1000c770 <__aeabi_ddiv+0x4c>
1000c85a:	4652      	mov	r2, sl
1000c85c:	2103      	movs	r1, #3
1000c85e:	433a      	orrs	r2, r7
1000c860:	d1a0      	bne.n	1000c7a4 <__aeabi_ddiv+0x80>
1000c862:	2700      	movs	r7, #0
1000c864:	2300      	movs	r3, #0
1000c866:	2102      	movs	r1, #2
1000c868:	e79c      	b.n	1000c7a4 <__aeabi_ddiv+0x80>
1000c86a:	4652      	mov	r2, sl
1000c86c:	433a      	orrs	r2, r7
1000c86e:	d015      	beq.n	1000c89c <__aeabi_ddiv+0x178>
1000c870:	2f00      	cmp	r7, #0
1000c872:	d100      	bne.n	1000c876 <__aeabi_ddiv+0x152>
1000c874:	e185      	b.n	1000cb82 <__aeabi_ddiv+0x45e>
1000c876:	1c38      	adds	r0, r7, #0
1000c878:	f7fc f940 	bl	10008afc <__clzsi2>
1000c87c:	1c02      	adds	r2, r0, #0
1000c87e:	2128      	movs	r1, #40	; 0x28
1000c880:	4650      	mov	r0, sl
1000c882:	1a89      	subs	r1, r1, r2
1000c884:	1c13      	adds	r3, r2, #0
1000c886:	40c8      	lsrs	r0, r1
1000c888:	4651      	mov	r1, sl
1000c88a:	3b08      	subs	r3, #8
1000c88c:	4099      	lsls	r1, r3
1000c88e:	409f      	lsls	r7, r3
1000c890:	1c0b      	adds	r3, r1, #0
1000c892:	4307      	orrs	r7, r0
1000c894:	4817      	ldr	r0, [pc, #92]	; (1000c8f4 <__aeabi_ddiv+0x1d0>)
1000c896:	2100      	movs	r1, #0
1000c898:	1a80      	subs	r0, r0, r2
1000c89a:	e783      	b.n	1000c7a4 <__aeabi_ddiv+0x80>
1000c89c:	2700      	movs	r7, #0
1000c89e:	2300      	movs	r3, #0
1000c8a0:	2101      	movs	r1, #1
1000c8a2:	e77f      	b.n	1000c7a4 <__aeabi_ddiv+0x80>
1000c8a4:	2300      	movs	r3, #0
1000c8a6:	469b      	mov	fp, r3
1000c8a8:	4699      	mov	r9, r3
1000c8aa:	3301      	adds	r3, #1
1000c8ac:	2604      	movs	r6, #4
1000c8ae:	9300      	str	r3, [sp, #0]
1000c8b0:	e75e      	b.n	1000c770 <__aeabi_ddiv+0x4c>
1000c8b2:	2303      	movs	r3, #3
1000c8b4:	260c      	movs	r6, #12
1000c8b6:	9300      	str	r3, [sp, #0]
1000c8b8:	e75a      	b.n	1000c770 <__aeabi_ddiv+0x4c>
1000c8ba:	2b03      	cmp	r3, #3
1000c8bc:	d100      	bne.n	1000c8c0 <__aeabi_ddiv+0x19c>
1000c8be:	e23c      	b.n	1000cd3a <__aeabi_ddiv+0x616>
1000c8c0:	2b01      	cmp	r3, #1
1000c8c2:	d000      	beq.n	1000c8c6 <__aeabi_ddiv+0x1a2>
1000c8c4:	e1bf      	b.n	1000cc46 <__aeabi_ddiv+0x522>
1000c8c6:	1c1a      	adds	r2, r3, #0
1000c8c8:	9b01      	ldr	r3, [sp, #4]
1000c8ca:	401a      	ands	r2, r3
1000c8cc:	2100      	movs	r1, #0
1000c8ce:	2300      	movs	r3, #0
1000c8d0:	2700      	movs	r7, #0
1000c8d2:	4689      	mov	r9, r1
1000c8d4:	e78e      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000c8d6:	2300      	movs	r3, #0
1000c8d8:	2780      	movs	r7, #128	; 0x80
1000c8da:	4699      	mov	r9, r3
1000c8dc:	2200      	movs	r2, #0
1000c8de:	033f      	lsls	r7, r7, #12
1000c8e0:	4b00      	ldr	r3, [pc, #0]	; (1000c8e4 <__aeabi_ddiv+0x1c0>)
1000c8e2:	e787      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000c8e4:	000007ff 	.word	0x000007ff
1000c8e8:	fffffc01 	.word	0xfffffc01
1000c8ec:	1000d1a8 	.word	0x1000d1a8
1000c8f0:	800fffff 	.word	0x800fffff
1000c8f4:	fffffc0d 	.word	0xfffffc0d
1000c8f8:	45bb      	cmp	fp, r7
1000c8fa:	d900      	bls.n	1000c8fe <__aeabi_ddiv+0x1da>
1000c8fc:	e151      	b.n	1000cba2 <__aeabi_ddiv+0x47e>
1000c8fe:	d100      	bne.n	1000c902 <__aeabi_ddiv+0x1de>
1000c900:	e14c      	b.n	1000cb9c <__aeabi_ddiv+0x478>
1000c902:	464a      	mov	r2, r9
1000c904:	9203      	str	r2, [sp, #12]
1000c906:	2200      	movs	r2, #0
1000c908:	465c      	mov	r4, fp
1000c90a:	4690      	mov	r8, r2
1000c90c:	3d01      	subs	r5, #1
1000c90e:	0e18      	lsrs	r0, r3, #24
1000c910:	023f      	lsls	r7, r7, #8
1000c912:	4338      	orrs	r0, r7
1000c914:	021b      	lsls	r3, r3, #8
1000c916:	9301      	str	r3, [sp, #4]
1000c918:	0c03      	lsrs	r3, r0, #16
1000c91a:	4699      	mov	r9, r3
1000c91c:	0403      	lsls	r3, r0, #16
1000c91e:	0c1b      	lsrs	r3, r3, #16
1000c920:	4649      	mov	r1, r9
1000c922:	1c06      	adds	r6, r0, #0
1000c924:	1c20      	adds	r0, r4, #0
1000c926:	1c1f      	adds	r7, r3, #0
1000c928:	9300      	str	r3, [sp, #0]
1000c92a:	f7f9 ff5b 	bl	100067e4 <__aeabi_uidiv>
1000c92e:	1c02      	adds	r2, r0, #0
1000c930:	437a      	muls	r2, r7
1000c932:	9002      	str	r0, [sp, #8]
1000c934:	4649      	mov	r1, r9
1000c936:	1c20      	adds	r0, r4, #0
1000c938:	1c17      	adds	r7, r2, #0
1000c93a:	f7f9 ffd9 	bl	100068f0 <__aeabi_uidivmod>
1000c93e:	9b03      	ldr	r3, [sp, #12]
1000c940:	0409      	lsls	r1, r1, #16
1000c942:	0c1b      	lsrs	r3, r3, #16
1000c944:	4319      	orrs	r1, r3
1000c946:	428f      	cmp	r7, r1
1000c948:	d90c      	bls.n	1000c964 <__aeabi_ddiv+0x240>
1000c94a:	9b02      	ldr	r3, [sp, #8]
1000c94c:	1989      	adds	r1, r1, r6
1000c94e:	3b01      	subs	r3, #1
1000c950:	428e      	cmp	r6, r1
1000c952:	d900      	bls.n	1000c956 <__aeabi_ddiv+0x232>
1000c954:	e152      	b.n	1000cbfc <__aeabi_ddiv+0x4d8>
1000c956:	428f      	cmp	r7, r1
1000c958:	d800      	bhi.n	1000c95c <__aeabi_ddiv+0x238>
1000c95a:	e14f      	b.n	1000cbfc <__aeabi_ddiv+0x4d8>
1000c95c:	9b02      	ldr	r3, [sp, #8]
1000c95e:	1989      	adds	r1, r1, r6
1000c960:	3b02      	subs	r3, #2
1000c962:	9302      	str	r3, [sp, #8]
1000c964:	1bcc      	subs	r4, r1, r7
1000c966:	1c20      	adds	r0, r4, #0
1000c968:	4649      	mov	r1, r9
1000c96a:	f7f9 ff3b 	bl	100067e4 <__aeabi_uidiv>
1000c96e:	9f00      	ldr	r7, [sp, #0]
1000c970:	4683      	mov	fp, r0
1000c972:	4347      	muls	r7, r0
1000c974:	4649      	mov	r1, r9
1000c976:	1c20      	adds	r0, r4, #0
1000c978:	f7f9 ffba 	bl	100068f0 <__aeabi_uidivmod>
1000c97c:	9a03      	ldr	r2, [sp, #12]
1000c97e:	040b      	lsls	r3, r1, #16
1000c980:	0414      	lsls	r4, r2, #16
1000c982:	0c24      	lsrs	r4, r4, #16
1000c984:	4323      	orrs	r3, r4
1000c986:	429f      	cmp	r7, r3
1000c988:	d90d      	bls.n	1000c9a6 <__aeabi_ddiv+0x282>
1000c98a:	465a      	mov	r2, fp
1000c98c:	199b      	adds	r3, r3, r6
1000c98e:	3a01      	subs	r2, #1
1000c990:	429e      	cmp	r6, r3
1000c992:	d900      	bls.n	1000c996 <__aeabi_ddiv+0x272>
1000c994:	e130      	b.n	1000cbf8 <__aeabi_ddiv+0x4d4>
1000c996:	429f      	cmp	r7, r3
1000c998:	d800      	bhi.n	1000c99c <__aeabi_ddiv+0x278>
1000c99a:	e12d      	b.n	1000cbf8 <__aeabi_ddiv+0x4d4>
1000c99c:	2202      	movs	r2, #2
1000c99e:	4252      	negs	r2, r2
1000c9a0:	4694      	mov	ip, r2
1000c9a2:	199b      	adds	r3, r3, r6
1000c9a4:	44e3      	add	fp, ip
1000c9a6:	9a02      	ldr	r2, [sp, #8]
1000c9a8:	1bdb      	subs	r3, r3, r7
1000c9aa:	0417      	lsls	r7, r2, #16
1000c9ac:	465a      	mov	r2, fp
1000c9ae:	433a      	orrs	r2, r7
1000c9b0:	4693      	mov	fp, r2
1000c9b2:	9c01      	ldr	r4, [sp, #4]
1000c9b4:	0c17      	lsrs	r7, r2, #16
1000c9b6:	0c22      	lsrs	r2, r4, #16
1000c9b8:	1c10      	adds	r0, r2, #0
1000c9ba:	9204      	str	r2, [sp, #16]
1000c9bc:	465a      	mov	r2, fp
1000c9be:	0411      	lsls	r1, r2, #16
1000c9c0:	0422      	lsls	r2, r4, #16
1000c9c2:	0c12      	lsrs	r2, r2, #16
1000c9c4:	1c14      	adds	r4, r2, #0
1000c9c6:	0c09      	lsrs	r1, r1, #16
1000c9c8:	437c      	muls	r4, r7
1000c9ca:	9205      	str	r2, [sp, #20]
1000c9cc:	434a      	muls	r2, r1
1000c9ce:	4341      	muls	r1, r0
1000c9d0:	4347      	muls	r7, r0
1000c9d2:	1861      	adds	r1, r4, r1
1000c9d4:	0c10      	lsrs	r0, r2, #16
1000c9d6:	1809      	adds	r1, r1, r0
1000c9d8:	428c      	cmp	r4, r1
1000c9da:	d903      	bls.n	1000c9e4 <__aeabi_ddiv+0x2c0>
1000c9dc:	2080      	movs	r0, #128	; 0x80
1000c9de:	0240      	lsls	r0, r0, #9
1000c9e0:	4684      	mov	ip, r0
1000c9e2:	4467      	add	r7, ip
1000c9e4:	0c0c      	lsrs	r4, r1, #16
1000c9e6:	0412      	lsls	r2, r2, #16
1000c9e8:	0408      	lsls	r0, r1, #16
1000c9ea:	0c12      	lsrs	r2, r2, #16
1000c9ec:	193c      	adds	r4, r7, r4
1000c9ee:	1881      	adds	r1, r0, r2
1000c9f0:	42a3      	cmp	r3, r4
1000c9f2:	d200      	bcs.n	1000c9f6 <__aeabi_ddiv+0x2d2>
1000c9f4:	e0e5      	b.n	1000cbc2 <__aeabi_ddiv+0x49e>
1000c9f6:	d100      	bne.n	1000c9fa <__aeabi_ddiv+0x2d6>
1000c9f8:	e0df      	b.n	1000cbba <__aeabi_ddiv+0x496>
1000c9fa:	1b1f      	subs	r7, r3, r4
1000c9fc:	4643      	mov	r3, r8
1000c9fe:	1a5c      	subs	r4, r3, r1
1000ca00:	45a0      	cmp	r8, r4
1000ca02:	4192      	sbcs	r2, r2
1000ca04:	4252      	negs	r2, r2
1000ca06:	1abf      	subs	r7, r7, r2
1000ca08:	42b7      	cmp	r7, r6
1000ca0a:	d100      	bne.n	1000ca0e <__aeabi_ddiv+0x2ea>
1000ca0c:	e10e      	b.n	1000cc2c <__aeabi_ddiv+0x508>
1000ca0e:	1c38      	adds	r0, r7, #0
1000ca10:	4649      	mov	r1, r9
1000ca12:	f7f9 fee7 	bl	100067e4 <__aeabi_uidiv>
1000ca16:	9b00      	ldr	r3, [sp, #0]
1000ca18:	9002      	str	r0, [sp, #8]
1000ca1a:	4343      	muls	r3, r0
1000ca1c:	4649      	mov	r1, r9
1000ca1e:	1c38      	adds	r0, r7, #0
1000ca20:	4698      	mov	r8, r3
1000ca22:	f7f9 ff65 	bl	100068f0 <__aeabi_uidivmod>
1000ca26:	0c23      	lsrs	r3, r4, #16
1000ca28:	040f      	lsls	r7, r1, #16
1000ca2a:	431f      	orrs	r7, r3
1000ca2c:	45b8      	cmp	r8, r7
1000ca2e:	d90c      	bls.n	1000ca4a <__aeabi_ddiv+0x326>
1000ca30:	9b02      	ldr	r3, [sp, #8]
1000ca32:	19bf      	adds	r7, r7, r6
1000ca34:	3b01      	subs	r3, #1
1000ca36:	42be      	cmp	r6, r7
1000ca38:	d900      	bls.n	1000ca3c <__aeabi_ddiv+0x318>
1000ca3a:	e0fb      	b.n	1000cc34 <__aeabi_ddiv+0x510>
1000ca3c:	45b8      	cmp	r8, r7
1000ca3e:	d800      	bhi.n	1000ca42 <__aeabi_ddiv+0x31e>
1000ca40:	e0f8      	b.n	1000cc34 <__aeabi_ddiv+0x510>
1000ca42:	9b02      	ldr	r3, [sp, #8]
1000ca44:	19bf      	adds	r7, r7, r6
1000ca46:	3b02      	subs	r3, #2
1000ca48:	9302      	str	r3, [sp, #8]
1000ca4a:	4643      	mov	r3, r8
1000ca4c:	1aff      	subs	r7, r7, r3
1000ca4e:	4649      	mov	r1, r9
1000ca50:	1c38      	adds	r0, r7, #0
1000ca52:	f7f9 fec7 	bl	100067e4 <__aeabi_uidiv>
1000ca56:	9b00      	ldr	r3, [sp, #0]
1000ca58:	9003      	str	r0, [sp, #12]
1000ca5a:	4343      	muls	r3, r0
1000ca5c:	4649      	mov	r1, r9
1000ca5e:	1c38      	adds	r0, r7, #0
1000ca60:	4698      	mov	r8, r3
1000ca62:	f7f9 ff45 	bl	100068f0 <__aeabi_uidivmod>
1000ca66:	0424      	lsls	r4, r4, #16
1000ca68:	0409      	lsls	r1, r1, #16
1000ca6a:	0c24      	lsrs	r4, r4, #16
1000ca6c:	4321      	orrs	r1, r4
1000ca6e:	4588      	cmp	r8, r1
1000ca70:	d90c      	bls.n	1000ca8c <__aeabi_ddiv+0x368>
1000ca72:	9b03      	ldr	r3, [sp, #12]
1000ca74:	1989      	adds	r1, r1, r6
1000ca76:	3b01      	subs	r3, #1
1000ca78:	428e      	cmp	r6, r1
1000ca7a:	d900      	bls.n	1000ca7e <__aeabi_ddiv+0x35a>
1000ca7c:	e0dc      	b.n	1000cc38 <__aeabi_ddiv+0x514>
1000ca7e:	4588      	cmp	r8, r1
1000ca80:	d800      	bhi.n	1000ca84 <__aeabi_ddiv+0x360>
1000ca82:	e0d9      	b.n	1000cc38 <__aeabi_ddiv+0x514>
1000ca84:	9b03      	ldr	r3, [sp, #12]
1000ca86:	1989      	adds	r1, r1, r6
1000ca88:	3b02      	subs	r3, #2
1000ca8a:	9303      	str	r3, [sp, #12]
1000ca8c:	4643      	mov	r3, r8
1000ca8e:	1ac9      	subs	r1, r1, r3
1000ca90:	9b02      	ldr	r3, [sp, #8]
1000ca92:	9a03      	ldr	r2, [sp, #12]
1000ca94:	041b      	lsls	r3, r3, #16
1000ca96:	9c05      	ldr	r4, [sp, #20]
1000ca98:	431a      	orrs	r2, r3
1000ca9a:	0c10      	lsrs	r0, r2, #16
1000ca9c:	0413      	lsls	r3, r2, #16
1000ca9e:	4691      	mov	r9, r2
1000caa0:	1c22      	adds	r2, r4, #0
1000caa2:	9f04      	ldr	r7, [sp, #16]
1000caa4:	0c1b      	lsrs	r3, r3, #16
1000caa6:	435a      	muls	r2, r3
1000caa8:	4344      	muls	r4, r0
1000caaa:	437b      	muls	r3, r7
1000caac:	4378      	muls	r0, r7
1000caae:	18e3      	adds	r3, r4, r3
1000cab0:	0c17      	lsrs	r7, r2, #16
1000cab2:	19db      	adds	r3, r3, r7
1000cab4:	429c      	cmp	r4, r3
1000cab6:	d903      	bls.n	1000cac0 <__aeabi_ddiv+0x39c>
1000cab8:	2480      	movs	r4, #128	; 0x80
1000caba:	0264      	lsls	r4, r4, #9
1000cabc:	46a4      	mov	ip, r4
1000cabe:	4460      	add	r0, ip
1000cac0:	0c1c      	lsrs	r4, r3, #16
1000cac2:	0412      	lsls	r2, r2, #16
1000cac4:	041b      	lsls	r3, r3, #16
1000cac6:	0c12      	lsrs	r2, r2, #16
1000cac8:	1900      	adds	r0, r0, r4
1000caca:	189b      	adds	r3, r3, r2
1000cacc:	4281      	cmp	r1, r0
1000cace:	d200      	bcs.n	1000cad2 <__aeabi_ddiv+0x3ae>
1000cad0:	e096      	b.n	1000cc00 <__aeabi_ddiv+0x4dc>
1000cad2:	d100      	bne.n	1000cad6 <__aeabi_ddiv+0x3b2>
1000cad4:	e0fc      	b.n	1000ccd0 <__aeabi_ddiv+0x5ac>
1000cad6:	464a      	mov	r2, r9
1000cad8:	2301      	movs	r3, #1
1000cada:	431a      	orrs	r2, r3
1000cadc:	4691      	mov	r9, r2
1000cade:	4b9b      	ldr	r3, [pc, #620]	; (1000cd4c <__aeabi_ddiv+0x628>)
1000cae0:	18eb      	adds	r3, r5, r3
1000cae2:	2b00      	cmp	r3, #0
1000cae4:	dc00      	bgt.n	1000cae8 <__aeabi_ddiv+0x3c4>
1000cae6:	e099      	b.n	1000cc1c <__aeabi_ddiv+0x4f8>
1000cae8:	464a      	mov	r2, r9
1000caea:	0752      	lsls	r2, r2, #29
1000caec:	d00a      	beq.n	1000cb04 <__aeabi_ddiv+0x3e0>
1000caee:	220f      	movs	r2, #15
1000caf0:	4649      	mov	r1, r9
1000caf2:	400a      	ands	r2, r1
1000caf4:	2a04      	cmp	r2, #4
1000caf6:	d005      	beq.n	1000cb04 <__aeabi_ddiv+0x3e0>
1000caf8:	3104      	adds	r1, #4
1000cafa:	4549      	cmp	r1, r9
1000cafc:	4192      	sbcs	r2, r2
1000cafe:	4689      	mov	r9, r1
1000cb00:	4252      	negs	r2, r2
1000cb02:	4493      	add	fp, r2
1000cb04:	465a      	mov	r2, fp
1000cb06:	01d2      	lsls	r2, r2, #7
1000cb08:	d506      	bpl.n	1000cb18 <__aeabi_ddiv+0x3f4>
1000cb0a:	465a      	mov	r2, fp
1000cb0c:	4b90      	ldr	r3, [pc, #576]	; (1000cd50 <__aeabi_ddiv+0x62c>)
1000cb0e:	401a      	ands	r2, r3
1000cb10:	2380      	movs	r3, #128	; 0x80
1000cb12:	4693      	mov	fp, r2
1000cb14:	00db      	lsls	r3, r3, #3
1000cb16:	18eb      	adds	r3, r5, r3
1000cb18:	4a8e      	ldr	r2, [pc, #568]	; (1000cd54 <__aeabi_ddiv+0x630>)
1000cb1a:	4293      	cmp	r3, r2
1000cb1c:	dd00      	ble.n	1000cb20 <__aeabi_ddiv+0x3fc>
1000cb1e:	e662      	b.n	1000c7e6 <__aeabi_ddiv+0xc2>
1000cb20:	464a      	mov	r2, r9
1000cb22:	4659      	mov	r1, fp
1000cb24:	08d2      	lsrs	r2, r2, #3
1000cb26:	0749      	lsls	r1, r1, #29
1000cb28:	4311      	orrs	r1, r2
1000cb2a:	465a      	mov	r2, fp
1000cb2c:	4689      	mov	r9, r1
1000cb2e:	0257      	lsls	r7, r2, #9
1000cb30:	4651      	mov	r1, sl
1000cb32:	2201      	movs	r2, #1
1000cb34:	055b      	lsls	r3, r3, #21
1000cb36:	0b3f      	lsrs	r7, r7, #12
1000cb38:	0d5b      	lsrs	r3, r3, #21
1000cb3a:	400a      	ands	r2, r1
1000cb3c:	e65a      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cb3e:	2080      	movs	r0, #128	; 0x80
1000cb40:	465a      	mov	r2, fp
1000cb42:	0300      	lsls	r0, r0, #12
1000cb44:	4202      	tst	r2, r0
1000cb46:	d008      	beq.n	1000cb5a <__aeabi_ddiv+0x436>
1000cb48:	4207      	tst	r7, r0
1000cb4a:	d106      	bne.n	1000cb5a <__aeabi_ddiv+0x436>
1000cb4c:	4307      	orrs	r7, r0
1000cb4e:	033f      	lsls	r7, r7, #12
1000cb50:	4699      	mov	r9, r3
1000cb52:	0b3f      	lsrs	r7, r7, #12
1000cb54:	4642      	mov	r2, r8
1000cb56:	4b80      	ldr	r3, [pc, #512]	; (1000cd58 <__aeabi_ddiv+0x634>)
1000cb58:	e64c      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cb5a:	465f      	mov	r7, fp
1000cb5c:	4307      	orrs	r7, r0
1000cb5e:	033f      	lsls	r7, r7, #12
1000cb60:	0b3f      	lsrs	r7, r7, #12
1000cb62:	1c22      	adds	r2, r4, #0
1000cb64:	4b7c      	ldr	r3, [pc, #496]	; (1000cd58 <__aeabi_ddiv+0x634>)
1000cb66:	e645      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cb68:	f7fb ffc8 	bl	10008afc <__clzsi2>
1000cb6c:	1c03      	adds	r3, r0, #0
1000cb6e:	3020      	adds	r0, #32
1000cb70:	2827      	cmp	r0, #39	; 0x27
1000cb72:	dc00      	bgt.n	1000cb76 <__aeabi_ddiv+0x452>
1000cb74:	e65e      	b.n	1000c834 <__aeabi_ddiv+0x110>
1000cb76:	3b08      	subs	r3, #8
1000cb78:	409e      	lsls	r6, r3
1000cb7a:	2300      	movs	r3, #0
1000cb7c:	46b3      	mov	fp, r6
1000cb7e:	4699      	mov	r9, r3
1000cb80:	e665      	b.n	1000c84e <__aeabi_ddiv+0x12a>
1000cb82:	4650      	mov	r0, sl
1000cb84:	f7fb ffba 	bl	10008afc <__clzsi2>
1000cb88:	1c02      	adds	r2, r0, #0
1000cb8a:	3220      	adds	r2, #32
1000cb8c:	2a27      	cmp	r2, #39	; 0x27
1000cb8e:	dc00      	bgt.n	1000cb92 <__aeabi_ddiv+0x46e>
1000cb90:	e675      	b.n	1000c87e <__aeabi_ddiv+0x15a>
1000cb92:	4657      	mov	r7, sl
1000cb94:	3808      	subs	r0, #8
1000cb96:	4087      	lsls	r7, r0
1000cb98:	2300      	movs	r3, #0
1000cb9a:	e67b      	b.n	1000c894 <__aeabi_ddiv+0x170>
1000cb9c:	4599      	cmp	r9, r3
1000cb9e:	d200      	bcs.n	1000cba2 <__aeabi_ddiv+0x47e>
1000cba0:	e6af      	b.n	1000c902 <__aeabi_ddiv+0x1de>
1000cba2:	465a      	mov	r2, fp
1000cba4:	4659      	mov	r1, fp
1000cba6:	0854      	lsrs	r4, r2, #1
1000cba8:	464a      	mov	r2, r9
1000cbaa:	07c8      	lsls	r0, r1, #31
1000cbac:	0852      	lsrs	r2, r2, #1
1000cbae:	4302      	orrs	r2, r0
1000cbb0:	9203      	str	r2, [sp, #12]
1000cbb2:	464a      	mov	r2, r9
1000cbb4:	07d2      	lsls	r2, r2, #31
1000cbb6:	4690      	mov	r8, r2
1000cbb8:	e6a9      	b.n	1000c90e <__aeabi_ddiv+0x1ea>
1000cbba:	2700      	movs	r7, #0
1000cbbc:	4588      	cmp	r8, r1
1000cbbe:	d300      	bcc.n	1000cbc2 <__aeabi_ddiv+0x49e>
1000cbc0:	e71c      	b.n	1000c9fc <__aeabi_ddiv+0x2d8>
1000cbc2:	9f01      	ldr	r7, [sp, #4]
1000cbc4:	465a      	mov	r2, fp
1000cbc6:	46bc      	mov	ip, r7
1000cbc8:	44e0      	add	r8, ip
1000cbca:	45b8      	cmp	r8, r7
1000cbcc:	41bf      	sbcs	r7, r7
1000cbce:	427f      	negs	r7, r7
1000cbd0:	19bf      	adds	r7, r7, r6
1000cbd2:	18ff      	adds	r7, r7, r3
1000cbd4:	3a01      	subs	r2, #1
1000cbd6:	42be      	cmp	r6, r7
1000cbd8:	d206      	bcs.n	1000cbe8 <__aeabi_ddiv+0x4c4>
1000cbda:	42bc      	cmp	r4, r7
1000cbdc:	d85f      	bhi.n	1000cc9e <__aeabi_ddiv+0x57a>
1000cbde:	d100      	bne.n	1000cbe2 <__aeabi_ddiv+0x4be>
1000cbe0:	e09f      	b.n	1000cd22 <__aeabi_ddiv+0x5fe>
1000cbe2:	1b3f      	subs	r7, r7, r4
1000cbe4:	4693      	mov	fp, r2
1000cbe6:	e709      	b.n	1000c9fc <__aeabi_ddiv+0x2d8>
1000cbe8:	42b7      	cmp	r7, r6
1000cbea:	d1fa      	bne.n	1000cbe2 <__aeabi_ddiv+0x4be>
1000cbec:	9b01      	ldr	r3, [sp, #4]
1000cbee:	4543      	cmp	r3, r8
1000cbf0:	d9f3      	bls.n	1000cbda <__aeabi_ddiv+0x4b6>
1000cbf2:	1b37      	subs	r7, r6, r4
1000cbf4:	4693      	mov	fp, r2
1000cbf6:	e701      	b.n	1000c9fc <__aeabi_ddiv+0x2d8>
1000cbf8:	4693      	mov	fp, r2
1000cbfa:	e6d4      	b.n	1000c9a6 <__aeabi_ddiv+0x282>
1000cbfc:	9302      	str	r3, [sp, #8]
1000cbfe:	e6b1      	b.n	1000c964 <__aeabi_ddiv+0x240>
1000cc00:	464a      	mov	r2, r9
1000cc02:	1989      	adds	r1, r1, r6
1000cc04:	3a01      	subs	r2, #1
1000cc06:	428e      	cmp	r6, r1
1000cc08:	d918      	bls.n	1000cc3c <__aeabi_ddiv+0x518>
1000cc0a:	4691      	mov	r9, r2
1000cc0c:	4281      	cmp	r1, r0
1000cc0e:	d000      	beq.n	1000cc12 <__aeabi_ddiv+0x4ee>
1000cc10:	e761      	b.n	1000cad6 <__aeabi_ddiv+0x3b2>
1000cc12:	9a01      	ldr	r2, [sp, #4]
1000cc14:	429a      	cmp	r2, r3
1000cc16:	d000      	beq.n	1000cc1a <__aeabi_ddiv+0x4f6>
1000cc18:	e75d      	b.n	1000cad6 <__aeabi_ddiv+0x3b2>
1000cc1a:	e760      	b.n	1000cade <__aeabi_ddiv+0x3ba>
1000cc1c:	4f4f      	ldr	r7, [pc, #316]	; (1000cd5c <__aeabi_ddiv+0x638>)
1000cc1e:	1b7f      	subs	r7, r7, r5
1000cc20:	2f38      	cmp	r7, #56	; 0x38
1000cc22:	dd13      	ble.n	1000cc4c <__aeabi_ddiv+0x528>
1000cc24:	2201      	movs	r2, #1
1000cc26:	4653      	mov	r3, sl
1000cc28:	401a      	ands	r2, r3
1000cc2a:	e64f      	b.n	1000c8cc <__aeabi_ddiv+0x1a8>
1000cc2c:	2301      	movs	r3, #1
1000cc2e:	425b      	negs	r3, r3
1000cc30:	4699      	mov	r9, r3
1000cc32:	e754      	b.n	1000cade <__aeabi_ddiv+0x3ba>
1000cc34:	9302      	str	r3, [sp, #8]
1000cc36:	e708      	b.n	1000ca4a <__aeabi_ddiv+0x326>
1000cc38:	9303      	str	r3, [sp, #12]
1000cc3a:	e727      	b.n	1000ca8c <__aeabi_ddiv+0x368>
1000cc3c:	4288      	cmp	r0, r1
1000cc3e:	d83c      	bhi.n	1000ccba <__aeabi_ddiv+0x596>
1000cc40:	d074      	beq.n	1000cd2c <__aeabi_ddiv+0x608>
1000cc42:	4691      	mov	r9, r2
1000cc44:	e747      	b.n	1000cad6 <__aeabi_ddiv+0x3b2>
1000cc46:	9b01      	ldr	r3, [sp, #4]
1000cc48:	469a      	mov	sl, r3
1000cc4a:	e748      	b.n	1000cade <__aeabi_ddiv+0x3ba>
1000cc4c:	2f1f      	cmp	r7, #31
1000cc4e:	dc44      	bgt.n	1000ccda <__aeabi_ddiv+0x5b6>
1000cc50:	4b43      	ldr	r3, [pc, #268]	; (1000cd60 <__aeabi_ddiv+0x63c>)
1000cc52:	464a      	mov	r2, r9
1000cc54:	469c      	mov	ip, r3
1000cc56:	465b      	mov	r3, fp
1000cc58:	4465      	add	r5, ip
1000cc5a:	40fa      	lsrs	r2, r7
1000cc5c:	40ab      	lsls	r3, r5
1000cc5e:	4313      	orrs	r3, r2
1000cc60:	464a      	mov	r2, r9
1000cc62:	40aa      	lsls	r2, r5
1000cc64:	1c15      	adds	r5, r2, #0
1000cc66:	1e6a      	subs	r2, r5, #1
1000cc68:	4195      	sbcs	r5, r2
1000cc6a:	465a      	mov	r2, fp
1000cc6c:	40fa      	lsrs	r2, r7
1000cc6e:	432b      	orrs	r3, r5
1000cc70:	1c17      	adds	r7, r2, #0
1000cc72:	075a      	lsls	r2, r3, #29
1000cc74:	d009      	beq.n	1000cc8a <__aeabi_ddiv+0x566>
1000cc76:	220f      	movs	r2, #15
1000cc78:	401a      	ands	r2, r3
1000cc7a:	2a04      	cmp	r2, #4
1000cc7c:	d005      	beq.n	1000cc8a <__aeabi_ddiv+0x566>
1000cc7e:	1d1a      	adds	r2, r3, #4
1000cc80:	429a      	cmp	r2, r3
1000cc82:	419b      	sbcs	r3, r3
1000cc84:	425b      	negs	r3, r3
1000cc86:	18ff      	adds	r7, r7, r3
1000cc88:	1c13      	adds	r3, r2, #0
1000cc8a:	023a      	lsls	r2, r7, #8
1000cc8c:	d53e      	bpl.n	1000cd0c <__aeabi_ddiv+0x5e8>
1000cc8e:	4653      	mov	r3, sl
1000cc90:	2201      	movs	r2, #1
1000cc92:	2100      	movs	r1, #0
1000cc94:	401a      	ands	r2, r3
1000cc96:	2700      	movs	r7, #0
1000cc98:	2301      	movs	r3, #1
1000cc9a:	4689      	mov	r9, r1
1000cc9c:	e5aa      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cc9e:	2302      	movs	r3, #2
1000cca0:	425b      	negs	r3, r3
1000cca2:	469c      	mov	ip, r3
1000cca4:	9a01      	ldr	r2, [sp, #4]
1000cca6:	44e3      	add	fp, ip
1000cca8:	4694      	mov	ip, r2
1000ccaa:	44e0      	add	r8, ip
1000ccac:	4590      	cmp	r8, r2
1000ccae:	419b      	sbcs	r3, r3
1000ccb0:	425b      	negs	r3, r3
1000ccb2:	199b      	adds	r3, r3, r6
1000ccb4:	19df      	adds	r7, r3, r7
1000ccb6:	1b3f      	subs	r7, r7, r4
1000ccb8:	e6a0      	b.n	1000c9fc <__aeabi_ddiv+0x2d8>
1000ccba:	9f01      	ldr	r7, [sp, #4]
1000ccbc:	464a      	mov	r2, r9
1000ccbe:	007c      	lsls	r4, r7, #1
1000ccc0:	42bc      	cmp	r4, r7
1000ccc2:	41bf      	sbcs	r7, r7
1000ccc4:	427f      	negs	r7, r7
1000ccc6:	19bf      	adds	r7, r7, r6
1000ccc8:	3a02      	subs	r2, #2
1000ccca:	19c9      	adds	r1, r1, r7
1000cccc:	9401      	str	r4, [sp, #4]
1000ccce:	e79c      	b.n	1000cc0a <__aeabi_ddiv+0x4e6>
1000ccd0:	2b00      	cmp	r3, #0
1000ccd2:	d195      	bne.n	1000cc00 <__aeabi_ddiv+0x4dc>
1000ccd4:	2200      	movs	r2, #0
1000ccd6:	9201      	str	r2, [sp, #4]
1000ccd8:	e79b      	b.n	1000cc12 <__aeabi_ddiv+0x4ee>
1000ccda:	465a      	mov	r2, fp
1000ccdc:	4b21      	ldr	r3, [pc, #132]	; (1000cd64 <__aeabi_ddiv+0x640>)
1000ccde:	1b5b      	subs	r3, r3, r5
1000cce0:	40da      	lsrs	r2, r3
1000cce2:	2f20      	cmp	r7, #32
1000cce4:	d027      	beq.n	1000cd36 <__aeabi_ddiv+0x612>
1000cce6:	4b20      	ldr	r3, [pc, #128]	; (1000cd68 <__aeabi_ddiv+0x644>)
1000cce8:	469c      	mov	ip, r3
1000ccea:	465b      	mov	r3, fp
1000ccec:	4465      	add	r5, ip
1000ccee:	40ab      	lsls	r3, r5
1000ccf0:	4649      	mov	r1, r9
1000ccf2:	430b      	orrs	r3, r1
1000ccf4:	1e59      	subs	r1, r3, #1
1000ccf6:	418b      	sbcs	r3, r1
1000ccf8:	4313      	orrs	r3, r2
1000ccfa:	2207      	movs	r2, #7
1000ccfc:	2700      	movs	r7, #0
1000ccfe:	401a      	ands	r2, r3
1000cd00:	d007      	beq.n	1000cd12 <__aeabi_ddiv+0x5ee>
1000cd02:	220f      	movs	r2, #15
1000cd04:	2700      	movs	r7, #0
1000cd06:	401a      	ands	r2, r3
1000cd08:	2a04      	cmp	r2, #4
1000cd0a:	d1b8      	bne.n	1000cc7e <__aeabi_ddiv+0x55a>
1000cd0c:	077a      	lsls	r2, r7, #29
1000cd0e:	027f      	lsls	r7, r7, #9
1000cd10:	0b3f      	lsrs	r7, r7, #12
1000cd12:	08db      	lsrs	r3, r3, #3
1000cd14:	4313      	orrs	r3, r2
1000cd16:	4699      	mov	r9, r3
1000cd18:	2201      	movs	r2, #1
1000cd1a:	4653      	mov	r3, sl
1000cd1c:	401a      	ands	r2, r3
1000cd1e:	2300      	movs	r3, #0
1000cd20:	e568      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cd22:	4541      	cmp	r1, r8
1000cd24:	d8bb      	bhi.n	1000cc9e <__aeabi_ddiv+0x57a>
1000cd26:	4693      	mov	fp, r2
1000cd28:	2700      	movs	r7, #0
1000cd2a:	e667      	b.n	1000c9fc <__aeabi_ddiv+0x2d8>
1000cd2c:	9c01      	ldr	r4, [sp, #4]
1000cd2e:	429c      	cmp	r4, r3
1000cd30:	d3c3      	bcc.n	1000ccba <__aeabi_ddiv+0x596>
1000cd32:	4691      	mov	r9, r2
1000cd34:	e76d      	b.n	1000cc12 <__aeabi_ddiv+0x4ee>
1000cd36:	2300      	movs	r3, #0
1000cd38:	e7da      	b.n	1000ccf0 <__aeabi_ddiv+0x5cc>
1000cd3a:	2780      	movs	r7, #128	; 0x80
1000cd3c:	465b      	mov	r3, fp
1000cd3e:	033f      	lsls	r7, r7, #12
1000cd40:	431f      	orrs	r7, r3
1000cd42:	033f      	lsls	r7, r7, #12
1000cd44:	0b3f      	lsrs	r7, r7, #12
1000cd46:	9a01      	ldr	r2, [sp, #4]
1000cd48:	4b03      	ldr	r3, [pc, #12]	; (1000cd58 <__aeabi_ddiv+0x634>)
1000cd4a:	e553      	b.n	1000c7f4 <__aeabi_ddiv+0xd0>
1000cd4c:	000003ff 	.word	0x000003ff
1000cd50:	feffffff 	.word	0xfeffffff
1000cd54:	000007fe 	.word	0x000007fe
1000cd58:	000007ff 	.word	0x000007ff
1000cd5c:	fffffc02 	.word	0xfffffc02
1000cd60:	0000041e 	.word	0x0000041e
1000cd64:	fffffbe2 	.word	0xfffffbe2
1000cd68:	0000043e 	.word	0x0000043e

1000cd6c <__aeabi_d2iz>:
1000cd6c:	030b      	lsls	r3, r1, #12
1000cd6e:	b530      	push	{r4, r5, lr}
1000cd70:	4c13      	ldr	r4, [pc, #76]	; (1000cdc0 <__aeabi_d2iz+0x54>)
1000cd72:	0b1a      	lsrs	r2, r3, #12
1000cd74:	004b      	lsls	r3, r1, #1
1000cd76:	1c05      	adds	r5, r0, #0
1000cd78:	0d5b      	lsrs	r3, r3, #21
1000cd7a:	0fc9      	lsrs	r1, r1, #31
1000cd7c:	2000      	movs	r0, #0
1000cd7e:	42a3      	cmp	r3, r4
1000cd80:	dd10      	ble.n	1000cda4 <__aeabi_d2iz+0x38>
1000cd82:	4810      	ldr	r0, [pc, #64]	; (1000cdc4 <__aeabi_d2iz+0x58>)
1000cd84:	4283      	cmp	r3, r0
1000cd86:	dc0e      	bgt.n	1000cda6 <__aeabi_d2iz+0x3a>
1000cd88:	2080      	movs	r0, #128	; 0x80
1000cd8a:	4c0f      	ldr	r4, [pc, #60]	; (1000cdc8 <__aeabi_d2iz+0x5c>)
1000cd8c:	0340      	lsls	r0, r0, #13
1000cd8e:	4302      	orrs	r2, r0
1000cd90:	1ae4      	subs	r4, r4, r3
1000cd92:	2c1f      	cmp	r4, #31
1000cd94:	dd0a      	ble.n	1000cdac <__aeabi_d2iz+0x40>
1000cd96:	480d      	ldr	r0, [pc, #52]	; (1000cdcc <__aeabi_d2iz+0x60>)
1000cd98:	1ac3      	subs	r3, r0, r3
1000cd9a:	40da      	lsrs	r2, r3
1000cd9c:	1c13      	adds	r3, r2, #0
1000cd9e:	4248      	negs	r0, r1
1000cda0:	4043      	eors	r3, r0
1000cda2:	1858      	adds	r0, r3, r1
1000cda4:	bd30      	pop	{r4, r5, pc}
1000cda6:	4b0a      	ldr	r3, [pc, #40]	; (1000cdd0 <__aeabi_d2iz+0x64>)
1000cda8:	18c8      	adds	r0, r1, r3
1000cdaa:	e7fb      	b.n	1000cda4 <__aeabi_d2iz+0x38>
1000cdac:	1c28      	adds	r0, r5, #0
1000cdae:	40e0      	lsrs	r0, r4
1000cdb0:	4c08      	ldr	r4, [pc, #32]	; (1000cdd4 <__aeabi_d2iz+0x68>)
1000cdb2:	46a4      	mov	ip, r4
1000cdb4:	4463      	add	r3, ip
1000cdb6:	409a      	lsls	r2, r3
1000cdb8:	1c13      	adds	r3, r2, #0
1000cdba:	4303      	orrs	r3, r0
1000cdbc:	e7ef      	b.n	1000cd9e <__aeabi_d2iz+0x32>
1000cdbe:	46c0      	nop			; (mov r8, r8)
1000cdc0:	000003fe 	.word	0x000003fe
1000cdc4:	0000041d 	.word	0x0000041d
1000cdc8:	00000433 	.word	0x00000433
1000cdcc:	00000413 	.word	0x00000413
1000cdd0:	7fffffff 	.word	0x7fffffff
1000cdd4:	fffffbed 	.word	0xfffffbed
1000cdd8:	100016fc 	.word	0x100016fc
1000cddc:	1000173e 	.word	0x1000173e
1000cde0:	10001762 	.word	0x10001762
1000cde4:	10001780 	.word	0x10001780
1000cde8:	100017c8 	.word	0x100017c8
1000cdec:	100017d6 	.word	0x100017d6
1000cdf0:	1000194c 	.word	0x1000194c
1000cdf4:	10001964 	.word	0x10001964
1000cdf8:	10001980 	.word	0x10001980
1000cdfc:	100019e4 	.word	0x100019e4
1000ce00:	100019fe 	.word	0x100019fe
1000ce04:	10001a7e 	.word	0x10001a7e
1000ce08:	10001b96 	.word	0x10001b96
1000ce0c:	10001c48 	.word	0x10001c48
1000ce10:	10001d42 	.word	0x10001d42
1000ce14:	10001dfe 	.word	0x10001dfe
1000ce18:	10001ee0 	.word	0x10001ee0
1000ce1c:	10001fb2 	.word	0x10001fb2
1000ce20:	1000208c 	.word	0x1000208c
1000ce24:	100020f8 	.word	0x100020f8
1000ce28:	100059a6 	.word	0x100059a6
1000ce2c:	100059a6 	.word	0x100059a6
1000ce30:	100059b0 	.word	0x100059b0
1000ce34:	100059b0 	.word	0x100059b0
1000ce38:	100059d2 	.word	0x100059d2
1000ce3c:	100059d2 	.word	0x100059d2
1000ce40:	100059d2 	.word	0x100059d2
1000ce44:	100059d2 	.word	0x100059d2
1000ce48:	100059ba 	.word	0x100059ba
1000ce4c:	100059c6 	.word	0x100059c6

1000ce50 <g_xmc_vadc_group_array>:
1000ce50:	48030400 48030800 10006612 1000665a     ...H...H.f..Zf..
1000ce60:	1000669c 100066dc 10006718 10006762     .f...f...g..bg..
1000ce70:	10006eb6 10006eae 10006eae 10006ea6     .n...n...n...n..
1000ce80:	10006df8 10006df8 10006e9c 10006ea6     .m...m...n...n..
1000ce90:	10006df8 10006e9c 10006df8 10006ea6     .m...n...m...n..
1000cea0:	10006dfa 10006dfa 10006dfa 10006f40     .m...m...m..@o..
1000ceb0:	10007e1c 10007dfa 10007dfa 10007dee     .~...}...}...}..
1000cec0:	10007ce2 10007ce2 10007de2 10007dee     .|...|...}...}..
1000ced0:	10007ce2 10007de2 10007ce2 10007dee     .|...}...|...}..
1000cee0:	10007ce6 10007ce6 10007ce6 10007ffc     .|...|...|......
1000cef0:	4e490043 6e690046 414e0066 616e004e     C.INF.inf.NAN.na
1000cf00:	0030006e 33323130 37363534 42413938     n.0.0123456789AB
1000cf10:	46454443 32313000 36353433 61393837     CDEF.0123456789a
1000cf20:	65646362 25650066 0000646c              bcdef.e%ld..

1000cf2c <fpi.5242>:
1000cf2c:	00000035 fffffbce 000003cb 00000001     5...............
1000cf3c:	00000000                                ....

1000cf40 <tinytens>:
1000cf40:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
1000cf50:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
1000cf60:	64ac6f43 11680628                       Co.d(.h.

1000cf68 <fpinan.5278>:
1000cf68:	00000034 fffffbce 000003cb 00000001     4...............
1000cf78:	00000000                                ....

1000cf7c <_ctype_>:
1000cf7c:	20202000 20202020 28282020 20282828     .         ((((( 
1000cf8c:	20202020 20202020 20202020 20202020                     
1000cf9c:	10108820 10101010 10101010 10101010      ...............
1000cfac:	04040410 04040404 10040404 10101010     ................
1000cfbc:	41411010 41414141 01010101 01010101     ..AAAAAA........
1000cfcc:	01010101 01010101 01010101 10101010     ................
1000cfdc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1000cfec:	02020202 02020202 02020202 10101010     ................
1000cffc:	00000020 00000000 00000000 00000000      ...............
	...
1000d07c:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
1000d08c:	00584953 0000002e 00000000              SIX.........

1000d098 <__mprec_tens>:
1000d098:	00000000 3ff00000 00000000 40240000     .......?......$@
1000d0a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1000d0b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1000d0c8:	00000000 412e8480 00000000 416312d0     .......A......cA
1000d0d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1000d0e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1000d0f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1000d108:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1000d118:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1000d128:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1000d138:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1000d148:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1000d158:	79d99db4 44ea7843                       ...yCx.D

1000d160 <__mprec_bigtens>:
1000d160:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1000d170:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1000d180:	7f73bf3c 75154fdd                       <.s..O.u

1000d188 <p05.5277>:
1000d188:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
1000d198:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
1000d1a8:	1000c8f8 1000c7e6 1000c8cc 1000c7d2     ................
1000d1b8:	1000c8cc 1000c8d6 1000c8cc 1000c7d2     ................
1000d1c8:	1000c7e6 1000c7e6 1000c8d6 1000c7d2     ................
1000d1d8:	1000c7dc 1000c7dc 1000c7dc 1000cb3e     ............>...

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	10006565 	.word	0x10006565
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	10001a51 	.word	0x10001a51
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	100016c5 	.word	0x100016c5
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	10001911 	.word	0x10001911
	Insert_InterruptVeener IRQ19	
2000011c:	1000218d 	.word	0x1000218d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	100026f5 	.word	0x100026f5
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	100023b9 	.word	0x100023b9
	Insert_InterruptVeener IRQ24	
20000130:	100023d5 	.word	0x100023d5
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
