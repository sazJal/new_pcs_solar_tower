
SOLAR_TOWER_XMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c178  10001000  10001000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  1000d178  1000d178  0000d178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000144  2000000c  1000d178  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  4 .data         00000200  20000550  1000d2bc  00010550  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000410  20000750  00000600  00010750  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  7 .debug_aranges 00000ca8  00000000  00000000  00010750  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001bd8e  00000000  00000000  000113f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e34  00000000  00000000  0002d186  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007c7b  00000000  00000000  0002ffba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000037b8  00000000  00000000  00037c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000a6d4  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000045b8  00000000  00000000  00045ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ad8  00000000  00000000  0004a080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 00000ef4  00000000  00000000  0004ab58  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	1000d178 	.word	0x1000d178
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	10004bb9 	.word	0x10004bb9
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	1000d2bc 	.word	0x1000d2bc
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000750 	.word	0x20000750
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	1000d4bc 	.word	0x1000d4bc
	ldr	r2, =__ram_code_start
10001084:	20000750 	.word	0x20000750
	ldr	r3, =__ram_code_end
10001088:	20000750 	.word	0x20000750
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000750 	.word	0x20000750
	ldr	r2, =__bss_end
10001090:	20000b60 	.word	0x20000b60
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10008ad5 	.word	0x10008ad5
    blx  r0
#endif

    ldr  r0, =main
10001098:	100064e5 	.word	0x100064e5

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	b082      	sub	sp, #8
100010a4:	af00      	add	r7, sp, #0
100010a6:	6078      	str	r0, [r7, #4]
100010a8:	1c0a      	adds	r2, r1, #0
100010aa:	1cfb      	adds	r3, r7, #3
100010ac:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
100010ae:	687b      	ldr	r3, [r7, #4]
100010b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100010b2:	1cfb      	adds	r3, r7, #3
100010b4:	781b      	ldrb	r3, [r3, #0]
100010b6:	40da      	lsrs	r2, r3
100010b8:	1c13      	adds	r3, r2, #0
100010ba:	2201      	movs	r2, #1
100010bc:	4013      	ands	r3, r2
}
100010be:	1c18      	adds	r0, r3, #0
100010c0:	46bd      	mov	sp, r7
100010c2:	b002      	add	sp, #8
100010c4:	bd80      	pop	{r7, pc}
100010c6:	46c0      	nop			; (mov r8, r8)

100010c8 <OP_SetupConnection>:
OP_CTRL_FLAG_t controlFlag;


void OP_SetupConnection(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam,
						OP_CTRL_FLAG_t *ctrlFlag, float pvVoltage, PCS_BMC_STATUS_t *pcsBmsStatus, PCS_STATUS_t *pcsStatus)
{
100010c8:	b580      	push	{r7, lr}
100010ca:	b084      	sub	sp, #16
100010cc:	af00      	add	r7, sp, #0
100010ce:	60f8      	str	r0, [r7, #12]
100010d0:	60b9      	str	r1, [r7, #8]
100010d2:	607a      	str	r2, [r7, #4]
100010d4:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	/* 1. Ensure all relay at initial state */
	/* Initiate relay status */
	PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
100010d6:	2000      	movs	r0, #0
100010d8:	2100      	movs	r1, #0
100010da:	f001 feef 	bl	10002ebc <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
100010de:	2003      	movs	r0, #3
100010e0:	2100      	movs	r1, #0
100010e2:	f001 feeb 	bl	10002ebc <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KMP,  PDU_RELAY_OPEN);
100010e6:	2001      	movs	r0, #1
100010e8:	2100      	movs	r1, #0
100010ea:	f001 fee7 	bl	10002ebc <PDU_Switch_Relay>
	PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_OPEN);
100010ee:	2002      	movs	r0, #2
100010f0:	2100      	movs	r1, #0
100010f2:	f001 fee3 	bl	10002ebc <PDU_Switch_Relay>

	/* CAN Status Setup */
	pcsBmsStatus->bmc_main_relay		= RELAY_OPEN;
100010f6:	69bb      	ldr	r3, [r7, #24]
100010f8:	2200      	movs	r2, #0
100010fa:	709a      	strb	r2, [r3, #2]
	pcsBmsStatus->bmc_precharge_relay	= RELAY_OPEN;
100010fc:	69bb      	ldr	r3, [r7, #24]
100010fe:	2200      	movs	r2, #0
10001100:	70da      	strb	r2, [r3, #3]
	pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
10001102:	69bb      	ldr	r3, [r7, #24]
10001104:	2201      	movs	r2, #1
10001106:	701a      	strb	r2, [r3, #0]
	pcsBmsStatus->bmc_pcs_command		= BMU_PCS_STOP;
10001108:	69bb      	ldr	r3, [r7, #24]
1000110a:	2200      	movs	r2, #0
1000110c:	705a      	strb	r2, [r3, #1]

	/* 2. Checking PV Condition */
	if((pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode))
1000110e:	6838      	ldr	r0, [r7, #0]
10001110:	492e      	ldr	r1, [pc, #184]	; (100011cc <OP_SetupConnection+0x104>)
10001112:	f005 fd15 	bl	10006b40 <__aeabi_fcmpgt>
10001116:	1e03      	subs	r3, r0, #0
10001118:	d103      	bne.n	10001122 <OP_SetupConnection+0x5a>
1000111a:	687b      	ldr	r3, [r7, #4]
1000111c:	78db      	ldrb	r3, [r3, #3]
1000111e:	2b00      	cmp	r3, #0
10001120:	d038      	beq.n	10001194 <OP_SetupConnection+0xcc>
	{
		if((!sysTickParam->isTimeOut) && !toggle_timer) // start timer
10001122:	68bb      	ldr	r3, [r7, #8]
10001124:	791b      	ldrb	r3, [r3, #4]
10001126:	2201      	movs	r2, #1
10001128:	4053      	eors	r3, r2
1000112a:	b2db      	uxtb	r3, r3
1000112c:	2b00      	cmp	r3, #0
1000112e:	d010      	beq.n	10001152 <OP_SetupConnection+0x8a>
10001130:	4b27      	ldr	r3, [pc, #156]	; (100011d0 <OP_SetupConnection+0x108>)
10001132:	781b      	ldrb	r3, [r3, #0]
10001134:	2201      	movs	r2, #1
10001136:	4053      	eors	r3, r2
10001138:	b2db      	uxtb	r3, r3
1000113a:	2b00      	cmp	r3, #0
1000113c:	d009      	beq.n	10001152 <OP_SetupConnection+0x8a>
		{
			toggle_timer = true;
1000113e:	4b24      	ldr	r3, [pc, #144]	; (100011d0 <OP_SetupConnection+0x108>)
10001140:	2201      	movs	r2, #1
10001142:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
10001144:	68bb      	ldr	r3, [r7, #8]
10001146:	2201      	movs	r2, #1
10001148:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 15;
1000114a:	68bb      	ldr	r3, [r7, #8]
1000114c:	220f      	movs	r2, #15
1000114e:	805a      	strh	r2, [r3, #2]
10001150:	e01f      	b.n	10001192 <OP_SetupConnection+0xca>
		}
		else if((sysTickParam->isTimeOut) && toggle_timer)
10001152:	68bb      	ldr	r3, [r7, #8]
10001154:	791b      	ldrb	r3, [r3, #4]
10001156:	2b00      	cmp	r3, #0
10001158:	d01b      	beq.n	10001192 <OP_SetupConnection+0xca>
1000115a:	4b1d      	ldr	r3, [pc, #116]	; (100011d0 <OP_SetupConnection+0x108>)
1000115c:	781b      	ldrb	r3, [r3, #0]
1000115e:	2b00      	cmp	r3, #0
10001160:	d017      	beq.n	10001192 <OP_SetupConnection+0xca>
		{
			toggle_timer = false;
10001162:	4b1b      	ldr	r3, [pc, #108]	; (100011d0 <OP_SetupConnection+0x108>)
10001164:	2200      	movs	r2, #0
10001166:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut	= false;
10001168:	68bb      	ldr	r3, [r7, #8]
1000116a:	2200      	movs	r2, #0
1000116c:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
1000116e:	68bb      	ldr	r3, [r7, #8]
10001170:	2200      	movs	r2, #0
10001172:	805a      	strh	r2, [r3, #2]
			PDU_Switch_Relay(PDU_RELAY_KMF,  PDU_RELAY_CLOSE);
10001174:	2002      	movs	r0, #2
10001176:	2101      	movs	r1, #1
10001178:	f001 fea0 	bl	10002ebc <PDU_Switch_Relay>
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
1000117c:	2003      	movs	r0, #3
1000117e:	2101      	movs	r1, #1
10001180:	f001 fe9c 	bl	10002ebc <PDU_Switch_Relay>
			pcsBmsStatus->bmc_precharge_relay = RELAY_CLOSE;
10001184:	69bb      	ldr	r3, [r7, #24]
10001186:	2201      	movs	r2, #1
10001188:	70da      	strb	r2, [r3, #3]
			*state	= OP_TURN_ON;
1000118a:	68fb      	ldr	r3, [r7, #12]
1000118c:	2201      	movs	r2, #1
1000118e:	701a      	strb	r2, [r3, #0]
	pcsBmsStatus->bmc_pcs_command		= BMU_PCS_STOP;

	/* 2. Checking PV Condition */
	if((pvVoltage > 150.0 || ctrlFlag->isBypass_power_mode))
	{
		if((!sysTickParam->isTimeOut) && !toggle_timer) // start timer
10001190:	e019      	b.n	100011c6 <OP_SetupConnection+0xfe>
10001192:	e018      	b.n	100011c6 <OP_SetupConnection+0xfe>
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
			pcsBmsStatus->bmc_precharge_relay = RELAY_CLOSE;
			*state	= OP_TURN_ON;
		}
	}
	else if((pvVoltage < 150.0 || !ctrlFlag->isBypass_power_mode))
10001194:	6838      	ldr	r0, [r7, #0]
10001196:	490d      	ldr	r1, [pc, #52]	; (100011cc <OP_SetupConnection+0x104>)
10001198:	f005 fcbe 	bl	10006b18 <__aeabi_fcmplt>
1000119c:	1e03      	subs	r3, r0, #0
1000119e:	d106      	bne.n	100011ae <OP_SetupConnection+0xe6>
100011a0:	687b      	ldr	r3, [r7, #4]
100011a2:	78db      	ldrb	r3, [r3, #3]
100011a4:	2201      	movs	r2, #1
100011a6:	4053      	eors	r3, r2
100011a8:	b2db      	uxtb	r3, r3
100011aa:	2b00      	cmp	r3, #0
100011ac:	d00b      	beq.n	100011c6 <OP_SetupConnection+0xfe>
	{
		toggle_timer = false;
100011ae:	4b08      	ldr	r3, [pc, #32]	; (100011d0 <OP_SetupConnection+0x108>)
100011b0:	2200      	movs	r2, #0
100011b2:	701a      	strb	r2, [r3, #0]
		sysTickParam->enable	= false;
100011b4:	68bb      	ldr	r3, [r7, #8]
100011b6:	2200      	movs	r2, #0
100011b8:	701a      	strb	r2, [r3, #0]
		sysTickParam->isTimeOut	= false;
100011ba:	68bb      	ldr	r3, [r7, #8]
100011bc:	2200      	movs	r2, #0
100011be:	711a      	strb	r2, [r3, #4]
		sysTickParam->count		= 0;
100011c0:	68bb      	ldr	r3, [r7, #8]
100011c2:	2200      	movs	r2, #0
100011c4:	805a      	strh	r2, [r3, #2]
	}
}
100011c6:	46bd      	mov	sp, r7
100011c8:	b004      	add	sp, #16
100011ca:	bd80      	pop	{r7, pc}
100011cc:	43160000 	.word	0x43160000
100011d0:	20000750 	.word	0x20000750

100011d4 <OP_TurnOnPCS>:

void OP_TurnOnPCS(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam,
		OP_CTRL_FLAG_t *ctrlFlag, PCS_BMC_STATUS_t *pcsBmsStatus, PCS_STATUS_t *pcsStatus)
{
100011d4:	b580      	push	{r7, lr}
100011d6:	b084      	sub	sp, #16
100011d8:	af00      	add	r7, sp, #0
100011da:	60f8      	str	r0, [r7, #12]
100011dc:	60b9      	str	r1, [r7, #8]
100011de:	607a      	str	r2, [r7, #4]
100011e0:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	static bool isPrechargeExecuted = false;

	if(!XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted && (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
100011e2:	4b51      	ldr	r3, [pc, #324]	; (10001328 <OP_TurnOnPCS+0x154>)
100011e4:	1c18      	adds	r0, r3, #0
100011e6:	2102      	movs	r1, #2
100011e8:	f7ff ff5a 	bl	100010a0 <XMC_GPIO_GetInput>
100011ec:	1e03      	subs	r3, r0, #0
100011ee:	d142      	bne.n	10001276 <OP_TurnOnPCS+0xa2>
100011f0:	4b4e      	ldr	r3, [pc, #312]	; (1000132c <OP_TurnOnPCS+0x158>)
100011f2:	781b      	ldrb	r3, [r3, #0]
100011f4:	2201      	movs	r2, #1
100011f6:	4053      	eors	r3, r2
100011f8:	b2db      	uxtb	r3, r3
100011fa:	2b00      	cmp	r3, #0
100011fc:	d03b      	beq.n	10001276 <OP_TurnOnPCS+0xa2>
100011fe:	69bb      	ldr	r3, [r7, #24]
10001200:	781b      	ldrb	r3, [r3, #0]
10001202:	2b04      	cmp	r3, #4
10001204:	d137      	bne.n	10001276 <OP_TurnOnPCS+0xa2>
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
10001206:	68bb      	ldr	r3, [r7, #8]
10001208:	791b      	ldrb	r3, [r3, #4]
1000120a:	2201      	movs	r2, #1
1000120c:	4053      	eors	r3, r2
1000120e:	b2db      	uxtb	r3, r3
10001210:	2b00      	cmp	r3, #0
10001212:	d017      	beq.n	10001244 <OP_TurnOnPCS+0x70>
10001214:	68bb      	ldr	r3, [r7, #8]
10001216:	781b      	ldrb	r3, [r3, #0]
10001218:	2201      	movs	r2, #1
1000121a:	4053      	eors	r3, r2
1000121c:	b2db      	uxtb	r3, r3
1000121e:	2b00      	cmp	r3, #0
10001220:	d010      	beq.n	10001244 <OP_TurnOnPCS+0x70>
10001222:	4b43      	ldr	r3, [pc, #268]	; (10001330 <OP_TurnOnPCS+0x15c>)
10001224:	781b      	ldrb	r3, [r3, #0]
10001226:	2201      	movs	r2, #1
10001228:	4053      	eors	r3, r2
1000122a:	b2db      	uxtb	r3, r3
1000122c:	2b00      	cmp	r3, #0
1000122e:	d009      	beq.n	10001244 <OP_TurnOnPCS+0x70>
		{
			toggle_timer			= true;
10001230:	4b3f      	ldr	r3, [pc, #252]	; (10001330 <OP_TurnOnPCS+0x15c>)
10001232:	2201      	movs	r2, #1
10001234:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
10001236:	68bb      	ldr	r3, [r7, #8]
10001238:	2201      	movs	r2, #1
1000123a:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 2;
1000123c:	68bb      	ldr	r3, [r7, #8]
1000123e:	2202      	movs	r2, #2
10001240:	805a      	strh	r2, [r3, #2]
10001242:	e017      	b.n	10001274 <OP_TurnOnPCS+0xa0>
		}
		else if ((sysTickParam->isTimeOut) && (!sysTickParam->enable))
10001244:	68bb      	ldr	r3, [r7, #8]
10001246:	791b      	ldrb	r3, [r3, #4]
10001248:	2b00      	cmp	r3, #0
1000124a:	d013      	beq.n	10001274 <OP_TurnOnPCS+0xa0>
1000124c:	68bb      	ldr	r3, [r7, #8]
1000124e:	781b      	ldrb	r3, [r3, #0]
10001250:	2201      	movs	r2, #1
10001252:	4053      	eors	r3, r2
10001254:	b2db      	uxtb	r3, r3
10001256:	2b00      	cmp	r3, #0
10001258:	d00c      	beq.n	10001274 <OP_TurnOnPCS+0xa0>
		{
			ctrlFlag->isPerforming_Precharge = true;
1000125a:	687b      	ldr	r3, [r7, #4]
1000125c:	2201      	movs	r2, #1
1000125e:	701a      	strb	r2, [r3, #0]
			toggle_timer			= false;
10001260:	4b33      	ldr	r3, [pc, #204]	; (10001330 <OP_TurnOnPCS+0x15c>)
10001262:	2200      	movs	r2, #0
10001264:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut = false;
10001266:	68bb      	ldr	r3, [r7, #8]
10001268:	2200      	movs	r2, #0
1000126a:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
1000126c:	68bb      	ldr	r3, [r7, #8]
1000126e:	2200      	movs	r2, #0
10001270:	805a      	strh	r2, [r3, #2]
	static bool toggle_timer = false;
	static bool isPrechargeExecuted = false;

	if(!XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted && (pcsStatus->pcs_system_status == PCS_STAT_STANDBY))
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
10001272:	e017      	b.n	100012a4 <OP_TurnOnPCS+0xd0>
10001274:	e016      	b.n	100012a4 <OP_TurnOnPCS+0xd0>
			toggle_timer			= false;
			sysTickParam->isTimeOut = false;
			sysTickParam->count		= 0;
		}
	}
	else if(XMC_GPIO_GetInput(P2_2) && !isPrechargeExecuted)
10001276:	4b2c      	ldr	r3, [pc, #176]	; (10001328 <OP_TurnOnPCS+0x154>)
10001278:	1c18      	adds	r0, r3, #0
1000127a:	2102      	movs	r1, #2
1000127c:	f7ff ff10 	bl	100010a0 <XMC_GPIO_GetInput>
10001280:	1e03      	subs	r3, r0, #0
10001282:	d00f      	beq.n	100012a4 <OP_TurnOnPCS+0xd0>
10001284:	4b29      	ldr	r3, [pc, #164]	; (1000132c <OP_TurnOnPCS+0x158>)
10001286:	781b      	ldrb	r3, [r3, #0]
10001288:	2201      	movs	r2, #1
1000128a:	4053      	eors	r3, r2
1000128c:	b2db      	uxtb	r3, r3
1000128e:	2b00      	cmp	r3, #0
10001290:	d008      	beq.n	100012a4 <OP_TurnOnPCS+0xd0>
	{
		toggle_timer			= false;
10001292:	4b27      	ldr	r3, [pc, #156]	; (10001330 <OP_TurnOnPCS+0x15c>)
10001294:	2200      	movs	r2, #0
10001296:	701a      	strb	r2, [r3, #0]
		sysTickParam->enable 	= false;
10001298:	68bb      	ldr	r3, [r7, #8]
1000129a:	2200      	movs	r2, #0
1000129c:	701a      	strb	r2, [r3, #0]
		sysTickParam->count 	= 0;
1000129e:	68bb      	ldr	r3, [r7, #8]
100012a0:	2200      	movs	r2, #0
100012a2:	805a      	strh	r2, [r3, #2]
	}

	if(ctrlFlag->isPerforming_Precharge)
100012a4:	687b      	ldr	r3, [r7, #4]
100012a6:	781b      	ldrb	r3, [r3, #0]
100012a8:	2b00      	cmp	r3, #0
100012aa:	d03a      	beq.n	10001322 <OP_TurnOnPCS+0x14e>
	{
		if(!isPrechargeExecuted)
100012ac:	4b1f      	ldr	r3, [pc, #124]	; (1000132c <OP_TurnOnPCS+0x158>)
100012ae:	781b      	ldrb	r3, [r3, #0]
100012b0:	2201      	movs	r2, #1
100012b2:	4053      	eors	r3, r2
100012b4:	b2db      	uxtb	r3, r3
100012b6:	2b00      	cmp	r3, #0
100012b8:	d00e      	beq.n	100012d8 <OP_TurnOnPCS+0x104>
		{
			pcsBmsStatus->bmc_main_relay 		= RELAY_OPEN;
100012ba:	683b      	ldr	r3, [r7, #0]
100012bc:	2200      	movs	r2, #0
100012be:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bmc_precharge_relay	= RELAY_CLOSE;
100012c0:	683b      	ldr	r3, [r7, #0]
100012c2:	2201      	movs	r2, #1
100012c4:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
100012c6:	683b      	ldr	r3, [r7, #0]
100012c8:	2201      	movs	r2, #1
100012ca:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bmc_pcs_command		= BMU_PCS_STOP;
100012cc:	683b      	ldr	r3, [r7, #0]
100012ce:	2200      	movs	r2, #0
100012d0:	705a      	strb	r2, [r3, #1]
			isPrechargeExecuted					= true;
100012d2:	4b16      	ldr	r3, [pc, #88]	; (1000132c <OP_TurnOnPCS+0x158>)
100012d4:	2201      	movs	r2, #1
100012d6:	701a      	strb	r2, [r3, #0]
		}

		if(pcsStatus->pcs_precharge_IsComplete)
100012d8:	69bb      	ldr	r3, [r7, #24]
100012da:	785b      	ldrb	r3, [r3, #1]
100012dc:	2b00      	cmp	r3, #0
100012de:	d020      	beq.n	10001322 <OP_TurnOnPCS+0x14e>
		{
			/* CLose Main Relay */
			PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_CLOSE);
100012e0:	2001      	movs	r0, #1
100012e2:	2101      	movs	r1, #1
100012e4:	f001 fdea 	bl	10002ebc <PDU_Switch_Relay>

			/* Open Predischarge Relay */
			PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_OPEN);
100012e8:	2003      	movs	r0, #3
100012ea:	2100      	movs	r1, #0
100012ec:	f001 fde6 	bl	10002ebc <PDU_Switch_Relay>

			pcsBmsStatus->bmc_main_relay		= RELAY_CLOSE;
100012f0:	683b      	ldr	r3, [r7, #0]
100012f2:	2201      	movs	r2, #1
100012f4:	709a      	strb	r2, [r3, #2]
			pcsBmsStatus->bmc_precharge_relay	= RELAY_OPEN;
100012f6:	683b      	ldr	r3, [r7, #0]
100012f8:	2200      	movs	r2, #0
100012fa:	70da      	strb	r2, [r3, #3]
			pcsBmsStatus->bmc_status			= BMU_RUNNING;
100012fc:	683b      	ldr	r3, [r7, #0]
100012fe:	2202      	movs	r2, #2
10001300:	701a      	strb	r2, [r3, #0]
			pcsBmsStatus->bmc_pcs_command		= BMU_PCS_START;
10001302:	683b      	ldr	r3, [r7, #0]
10001304:	2201      	movs	r2, #1
10001306:	705a      	strb	r2, [r3, #1]

			*state = OP_RUNNING;
10001308:	68fb      	ldr	r3, [r7, #12]
1000130a:	2202      	movs	r2, #2
1000130c:	701a      	strb	r2, [r3, #0]

			/* close battery relay */
			PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_CLOSE);
1000130e:	2000      	movs	r0, #0
10001310:	2101      	movs	r1, #1
10001312:	f001 fdd3 	bl	10002ebc <PDU_Switch_Relay>
			isPrechargeExecuted					= false;
10001316:	4b05      	ldr	r3, [pc, #20]	; (1000132c <OP_TurnOnPCS+0x158>)
10001318:	2200      	movs	r2, #0
1000131a:	701a      	strb	r2, [r3, #0]
			ctrlFlag->isPerforming_Precharge	= false;
1000131c:	687b      	ldr	r3, [r7, #4]
1000131e:	2200      	movs	r2, #0
10001320:	701a      	strb	r2, [r3, #0]
		}
	}
}
10001322:	46bd      	mov	sp, r7
10001324:	b004      	add	sp, #16
10001326:	bd80      	pop	{r7, pc}
10001328:	40040200 	.word	0x40040200
1000132c:	20000751 	.word	0x20000751
10001330:	20000752 	.word	0x20000752

10001334 <OP_CheckingPCSStatus>:

void OP_CheckingPCSStatus(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						  MISC_SYSTICK_PARAM_t *sysTickParam,
						  OP_CTRL_FLAG_t *ctrlFlag)
{
10001334:	b580      	push	{r7, lr}
10001336:	b084      	sub	sp, #16
10001338:	af00      	add	r7, sp, #0
1000133a:	60f8      	str	r0, [r7, #12]
1000133c:	60b9      	str	r1, [r7, #8]
1000133e:	607a      	str	r2, [r7, #4]
10001340:	603b      	str	r3, [r7, #0]
	static bool toggle_timer = false;
	static bool isPutToStandbyExecuted = false;

	/* 1. Check PCS Warning Status */
	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
10001342:	68bb      	ldr	r3, [r7, #8]
10001344:	781b      	ldrb	r3, [r3, #0]
10001346:	2b04      	cmp	r3, #4
10001348:	d102      	bne.n	10001350 <OP_CheckingPCSStatus+0x1c>
	{
		*state = OP_ERROR;
1000134a:	68fb      	ldr	r3, [r7, #12]
1000134c:	2204      	movs	r2, #4
1000134e:	701a      	strb	r2, [r3, #0]
	}

	if(pcsStatus->pcs_system_status == PCS_STAT_INITIAL)
10001350:	68bb      	ldr	r3, [r7, #8]
10001352:	781b      	ldrb	r3, [r3, #0]
10001354:	2b00      	cmp	r3, #0
10001356:	d102      	bne.n	1000135e <OP_CheckingPCSStatus+0x2a>
	{
		*state = OP_SHUTDOWN;
10001358:	68fb      	ldr	r3, [r7, #12]
1000135a:	2205      	movs	r2, #5
1000135c:	701a      	strb	r2, [r3, #0]
	}

	if(!XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
1000135e:	4b3c      	ldr	r3, [pc, #240]	; (10001450 <OP_CheckingPCSStatus+0x11c>)
10001360:	1c18      	adds	r0, r3, #0
10001362:	2102      	movs	r1, #2
10001364:	f7ff fe9c 	bl	100010a0 <XMC_GPIO_GetInput>
10001368:	1e03      	subs	r3, r0, #0
1000136a:	d145      	bne.n	100013f8 <OP_CheckingPCSStatus+0xc4>
1000136c:	4b39      	ldr	r3, [pc, #228]	; (10001454 <OP_CheckingPCSStatus+0x120>)
1000136e:	781b      	ldrb	r3, [r3, #0]
10001370:	2201      	movs	r2, #1
10001372:	4053      	eors	r3, r2
10001374:	b2db      	uxtb	r3, r3
10001376:	2b00      	cmp	r3, #0
10001378:	d03e      	beq.n	100013f8 <OP_CheckingPCSStatus+0xc4>
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
1000137a:	687b      	ldr	r3, [r7, #4]
1000137c:	791b      	ldrb	r3, [r3, #4]
1000137e:	2201      	movs	r2, #1
10001380:	4053      	eors	r3, r2
10001382:	b2db      	uxtb	r3, r3
10001384:	2b00      	cmp	r3, #0
10001386:	d017      	beq.n	100013b8 <OP_CheckingPCSStatus+0x84>
10001388:	687b      	ldr	r3, [r7, #4]
1000138a:	781b      	ldrb	r3, [r3, #0]
1000138c:	2201      	movs	r2, #1
1000138e:	4053      	eors	r3, r2
10001390:	b2db      	uxtb	r3, r3
10001392:	2b00      	cmp	r3, #0
10001394:	d010      	beq.n	100013b8 <OP_CheckingPCSStatus+0x84>
10001396:	4b30      	ldr	r3, [pc, #192]	; (10001458 <OP_CheckingPCSStatus+0x124>)
10001398:	781b      	ldrb	r3, [r3, #0]
1000139a:	2201      	movs	r2, #1
1000139c:	4053      	eors	r3, r2
1000139e:	b2db      	uxtb	r3, r3
100013a0:	2b00      	cmp	r3, #0
100013a2:	d009      	beq.n	100013b8 <OP_CheckingPCSStatus+0x84>
		{
			toggle_timer			= true;
100013a4:	4b2c      	ldr	r3, [pc, #176]	; (10001458 <OP_CheckingPCSStatus+0x124>)
100013a6:	2201      	movs	r2, #1
100013a8:	701a      	strb	r2, [r3, #0]
			sysTickParam->enable	= true;
100013aa:	687b      	ldr	r3, [r7, #4]
100013ac:	2201      	movs	r2, #1
100013ae:	701a      	strb	r2, [r3, #0]
			sysTickParam->count		= 3;
100013b0:	687b      	ldr	r3, [r7, #4]
100013b2:	2203      	movs	r2, #3
100013b4:	805a      	strh	r2, [r3, #2]
100013b6:	e01e      	b.n	100013f6 <OP_CheckingPCSStatus+0xc2>
		}
		else if ((sysTickParam->isTimeOut) && (!sysTickParam->enable) && !isPutToStandbyExecuted)
100013b8:	687b      	ldr	r3, [r7, #4]
100013ba:	791b      	ldrb	r3, [r3, #4]
100013bc:	2b00      	cmp	r3, #0
100013be:	d01a      	beq.n	100013f6 <OP_CheckingPCSStatus+0xc2>
100013c0:	687b      	ldr	r3, [r7, #4]
100013c2:	781b      	ldrb	r3, [r3, #0]
100013c4:	2201      	movs	r2, #1
100013c6:	4053      	eors	r3, r2
100013c8:	b2db      	uxtb	r3, r3
100013ca:	2b00      	cmp	r3, #0
100013cc:	d013      	beq.n	100013f6 <OP_CheckingPCSStatus+0xc2>
100013ce:	4b21      	ldr	r3, [pc, #132]	; (10001454 <OP_CheckingPCSStatus+0x120>)
100013d0:	781b      	ldrb	r3, [r3, #0]
100013d2:	2201      	movs	r2, #1
100013d4:	4053      	eors	r3, r2
100013d6:	b2db      	uxtb	r3, r3
100013d8:	2b00      	cmp	r3, #0
100013da:	d00c      	beq.n	100013f6 <OP_CheckingPCSStatus+0xc2>
		{
			isPutToStandbyExecuted	= true;
100013dc:	4b1d      	ldr	r3, [pc, #116]	; (10001454 <OP_CheckingPCSStatus+0x120>)
100013de:	2201      	movs	r2, #1
100013e0:	701a      	strb	r2, [r3, #0]
			toggle_timer			= false;
100013e2:	4b1d      	ldr	r3, [pc, #116]	; (10001458 <OP_CheckingPCSStatus+0x124>)
100013e4:	2200      	movs	r2, #0
100013e6:	701a      	strb	r2, [r3, #0]
			sysTickParam->isTimeOut = false;
100013e8:	687b      	ldr	r3, [r7, #4]
100013ea:	2200      	movs	r2, #0
100013ec:	711a      	strb	r2, [r3, #4]
			sysTickParam->count		= 0;
100013ee:	687b      	ldr	r3, [r7, #4]
100013f0:	2200      	movs	r2, #0
100013f2:	805a      	strh	r2, [r3, #2]
		*state = OP_SHUTDOWN;
	}

	if(!XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
	{
		if((!sysTickParam->isTimeOut) && (!sysTickParam->enable) && !toggle_timer)
100013f4:	e017      	b.n	10001426 <OP_CheckingPCSStatus+0xf2>
100013f6:	e016      	b.n	10001426 <OP_CheckingPCSStatus+0xf2>
			toggle_timer			= false;
			sysTickParam->isTimeOut = false;
			sysTickParam->count		= 0;
		}
	}
	else if(XMC_GPIO_GetInput(P2_2) && !isPutToStandbyExecuted)
100013f8:	4b15      	ldr	r3, [pc, #84]	; (10001450 <OP_CheckingPCSStatus+0x11c>)
100013fa:	1c18      	adds	r0, r3, #0
100013fc:	2102      	movs	r1, #2
100013fe:	f7ff fe4f 	bl	100010a0 <XMC_GPIO_GetInput>
10001402:	1e03      	subs	r3, r0, #0
10001404:	d00f      	beq.n	10001426 <OP_CheckingPCSStatus+0xf2>
10001406:	4b13      	ldr	r3, [pc, #76]	; (10001454 <OP_CheckingPCSStatus+0x120>)
10001408:	781b      	ldrb	r3, [r3, #0]
1000140a:	2201      	movs	r2, #1
1000140c:	4053      	eors	r3, r2
1000140e:	b2db      	uxtb	r3, r3
10001410:	2b00      	cmp	r3, #0
10001412:	d008      	beq.n	10001426 <OP_CheckingPCSStatus+0xf2>
	{
		toggle_timer			= false;
10001414:	4b10      	ldr	r3, [pc, #64]	; (10001458 <OP_CheckingPCSStatus+0x124>)
10001416:	2200      	movs	r2, #0
10001418:	701a      	strb	r2, [r3, #0]
		sysTickParam->enable 	= false;
1000141a:	687b      	ldr	r3, [r7, #4]
1000141c:	2200      	movs	r2, #0
1000141e:	701a      	strb	r2, [r3, #0]
		sysTickParam->count 	= 0;
10001420:	687b      	ldr	r3, [r7, #4]
10001422:	2200      	movs	r2, #0
10001424:	805a      	strh	r2, [r3, #2]
	}

	/* Change to STANDBY upon the timer's time-out and button is released */
	if(isPutToStandbyExecuted)
10001426:	4b0b      	ldr	r3, [pc, #44]	; (10001454 <OP_CheckingPCSStatus+0x120>)
10001428:	781b      	ldrb	r3, [r3, #0]
1000142a:	2b00      	cmp	r3, #0
1000142c:	d00c      	beq.n	10001448 <OP_CheckingPCSStatus+0x114>
	{
		if(XMC_GPIO_GetInput(P2_2))
1000142e:	4b08      	ldr	r3, [pc, #32]	; (10001450 <OP_CheckingPCSStatus+0x11c>)
10001430:	1c18      	adds	r0, r3, #0
10001432:	2102      	movs	r1, #2
10001434:	f7ff fe34 	bl	100010a0 <XMC_GPIO_GetInput>
10001438:	1e03      	subs	r3, r0, #0
1000143a:	d005      	beq.n	10001448 <OP_CheckingPCSStatus+0x114>
		{
			isPutToStandbyExecuted	= false;
1000143c:	4b05      	ldr	r3, [pc, #20]	; (10001454 <OP_CheckingPCSStatus+0x120>)
1000143e:	2200      	movs	r2, #0
10001440:	701a      	strb	r2, [r3, #0]
			*state					= OP_STANDBY;
10001442:	68fb      	ldr	r3, [r7, #12]
10001444:	2203      	movs	r2, #3
10001446:	701a      	strb	r2, [r3, #0]
		}
	}
}
10001448:	46bd      	mov	sp, r7
1000144a:	b004      	add	sp, #16
1000144c:	bd80      	pop	{r7, pc}
1000144e:	46c0      	nop			; (mov r8, r8)
10001450:	40040200 	.word	0x40040200
10001454:	20000753 	.word	0x20000753
10001458:	20000754 	.word	0x20000754

1000145c <OP_PutSystemStandby>:

void OP_PutSystemStandby(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						 OP_CTRL_FLAG_t *ctrlFlag,
						 PCS_BMC_STATUS_t *pcsBmsStatus)
{
1000145c:	b580      	push	{r7, lr}
1000145e:	b084      	sub	sp, #16
10001460:	af00      	add	r7, sp, #0
10001462:	60f8      	str	r0, [r7, #12]
10001464:	60b9      	str	r1, [r7, #8]
10001466:	607a      	str	r2, [r7, #4]
10001468:	603b      	str	r3, [r7, #0]
	static bool isStandbyExecuted = false;

	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
1000146a:	68bb      	ldr	r3, [r7, #8]
1000146c:	781b      	ldrb	r3, [r3, #0]
1000146e:	2b06      	cmp	r3, #6
10001470:	d10c      	bne.n	1000148c <OP_PutSystemStandby+0x30>
	{
		if(!isStandbyExecuted)
10001472:	4b15      	ldr	r3, [pc, #84]	; (100014c8 <OP_PutSystemStandby+0x6c>)
10001474:	781b      	ldrb	r3, [r3, #0]
10001476:	2201      	movs	r2, #1
10001478:	4053      	eors	r3, r2
1000147a:	b2db      	uxtb	r3, r3
1000147c:	2b00      	cmp	r3, #0
1000147e:	d005      	beq.n	1000148c <OP_PutSystemStandby+0x30>
		{
			pcsBmsStatus->bmc_pcs_command = BMU_PCS_STOP;
10001480:	683b      	ldr	r3, [r7, #0]
10001482:	2200      	movs	r2, #0
10001484:	705a      	strb	r2, [r3, #1]
			isStandbyExecuted = true;
10001486:	4b10      	ldr	r3, [pc, #64]	; (100014c8 <OP_PutSystemStandby+0x6c>)
10001488:	2201      	movs	r2, #1
1000148a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(pcsStatus->pcs_system_status == PCS_STAT_STANDBY)
1000148c:	68bb      	ldr	r3, [r7, #8]
1000148e:	781b      	ldrb	r3, [r3, #0]
10001490:	2b04      	cmp	r3, #4
10001492:	d116      	bne.n	100014c2 <OP_PutSystemStandby+0x66>
	{
		/* Close Pre Discharge Relay */
		PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
10001494:	2003      	movs	r0, #3
10001496:	2101      	movs	r1, #1
10001498:	f001 fd10 	bl	10002ebc <PDU_Switch_Relay>

		/* Open Main Relay */
		PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_OPEN);
1000149c:	2001      	movs	r0, #1
1000149e:	2100      	movs	r1, #0
100014a0:	f001 fd0c 	bl	10002ebc <PDU_Switch_Relay>

		pcsBmsStatus->bmc_main_relay		= RELAY_OPEN;
100014a4:	683b      	ldr	r3, [r7, #0]
100014a6:	2200      	movs	r2, #0
100014a8:	709a      	strb	r2, [r3, #2]
		pcsBmsStatus->bmc_precharge_relay	= RELAY_CLOSE;
100014aa:	683b      	ldr	r3, [r7, #0]
100014ac:	2201      	movs	r2, #1
100014ae:	70da      	strb	r2, [r3, #3]
		pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
100014b0:	683b      	ldr	r3, [r7, #0]
100014b2:	2201      	movs	r2, #1
100014b4:	701a      	strb	r2, [r3, #0]

		*state = OP_TURN_ON;
100014b6:	68fb      	ldr	r3, [r7, #12]
100014b8:	2201      	movs	r2, #1
100014ba:	701a      	strb	r2, [r3, #0]
		isStandbyExecuted = false;
100014bc:	4b02      	ldr	r3, [pc, #8]	; (100014c8 <OP_PutSystemStandby+0x6c>)
100014be:	2200      	movs	r2, #0
100014c0:	701a      	strb	r2, [r3, #0]
	}
}
100014c2:	46bd      	mov	sp, r7
100014c4:	b004      	add	sp, #16
100014c6:	bd80      	pop	{r7, pc}
100014c8:	20000755 	.word	0x20000755

100014cc <OP_HandlingPCSWarning>:

void OP_HandlingPCSWarning(OP_STATE_t *state, PCS_STATUS_t *pcsStatus,
						   MISC_SYSTICK_PARAM_t *sysTickParam,
						   OP_CTRL_FLAG_t *ctrlFlag, BMC_PARAMETER_t *bmsParam,
						   PCS_BMC_STATUS_t *pcsBmsStatus)
{
100014cc:	b580      	push	{r7, lr}
100014ce:	b084      	sub	sp, #16
100014d0:	af00      	add	r7, sp, #0
100014d2:	60f8      	str	r0, [r7, #12]
100014d4:	60b9      	str	r1, [r7, #8]
100014d6:	607a      	str	r2, [r7, #4]
100014d8:	603b      	str	r3, [r7, #0]

	/* 1. if error elapsed, attempt for change PCS to RUN state */
	if(!ctrlFlag->isStandby)
100014da:	683b      	ldr	r3, [r7, #0]
100014dc:	785b      	ldrb	r3, [r3, #1]
100014de:	2201      	movs	r2, #1
100014e0:	4053      	eors	r3, r2
100014e2:	b2db      	uxtb	r3, r3
100014e4:	2b00      	cmp	r3, #0
100014e6:	d002      	beq.n	100014ee <OP_HandlingPCSWarning+0x22>
	{
		pcsBmsStatus->bmc_pcs_command = BMU_PCS_START;
100014e8:	69fb      	ldr	r3, [r7, #28]
100014ea:	2201      	movs	r2, #1
100014ec:	705a      	strb	r2, [r3, #1]
	}

	/* 1. if PCS acknowledged that already change to RUN, return the state to RUNNING */
	if(pcsStatus->pcs_system_status == PCS_STAT_RUNNING)
100014ee:	68bb      	ldr	r3, [r7, #8]
100014f0:	781b      	ldrb	r3, [r3, #0]
100014f2:	2b06      	cmp	r3, #6
100014f4:	d102      	bne.n	100014fc <OP_HandlingPCSWarning+0x30>
	{
		*state = OP_RUNNING;
100014f6:	68fb      	ldr	r3, [r7, #12]
100014f8:	2202      	movs	r2, #2
100014fa:	701a      	strb	r2, [r3, #0]
	}
	/* 2. Check SoC Level and BMC Dip Switch Mode*/
	if((pcsStatus->pcs_system_status == PCS_STAT_INITIAL) || (!ctrlFlag->isBypass_power_mode && bmsParam->soc < 50))
100014fc:	68bb      	ldr	r3, [r7, #8]
100014fe:	781b      	ldrb	r3, [r3, #0]
10001500:	2b00      	cmp	r3, #0
10001502:	d00a      	beq.n	1000151a <OP_HandlingPCSWarning+0x4e>
10001504:	683b      	ldr	r3, [r7, #0]
10001506:	78db      	ldrb	r3, [r3, #3]
10001508:	2201      	movs	r2, #1
1000150a:	4053      	eors	r3, r2
1000150c:	b2db      	uxtb	r3, r3
1000150e:	2b00      	cmp	r3, #0
10001510:	d006      	beq.n	10001520 <OP_HandlingPCSWarning+0x54>
10001512:	69bb      	ldr	r3, [r7, #24]
10001514:	881b      	ldrh	r3, [r3, #0]
10001516:	2b31      	cmp	r3, #49	; 0x31
10001518:	d802      	bhi.n	10001520 <OP_HandlingPCSWarning+0x54>
	{
		*state = OP_SHUTDOWN;
1000151a:	68fb      	ldr	r3, [r7, #12]
1000151c:	2205      	movs	r2, #5
1000151e:	701a      	strb	r2, [r3, #0]
	}
}
10001520:	46bd      	mov	sp, r7
10001522:	b004      	add	sp, #16
10001524:	bd80      	pop	{r7, pc}
10001526:	46c0      	nop			; (mov r8, r8)

10001528 <OP_PutSystemShutDown>:

void OP_PutSystemShutDown(OP_STATE_t *state, MISC_SYSTICK_PARAM_t *sysTickParam, OP_CTRL_FLAG_t *ctrlFlag,
						  PCS_BMC_STATUS_t *pcsBmsStatus)
{
10001528:	b580      	push	{r7, lr}
1000152a:	b084      	sub	sp, #16
1000152c:	af00      	add	r7, sp, #0
1000152e:	60f8      	str	r0, [r7, #12]
10001530:	60b9      	str	r1, [r7, #8]
10001532:	607a      	str	r2, [r7, #4]
10001534:	603b      	str	r3, [r7, #0]
	if(!sysTickParam->isTimeOut)
10001536:	68bb      	ldr	r3, [r7, #8]
10001538:	791b      	ldrb	r3, [r3, #4]
1000153a:	2201      	movs	r2, #1
1000153c:	4053      	eors	r3, r2
1000153e:	b2db      	uxtb	r3, r3
10001540:	2b00      	cmp	r3, #0
10001542:	d006      	beq.n	10001552 <OP_PutSystemShutDown+0x2a>
	{
		sysTickParam->enable	= true;
10001544:	68bb      	ldr	r3, [r7, #8]
10001546:	2201      	movs	r2, #1
10001548:	701a      	strb	r2, [r3, #0]
		sysTickParam->count		= 10;
1000154a:	68bb      	ldr	r3, [r7, #8]
1000154c:	220a      	movs	r2, #10
1000154e:	805a      	strh	r2, [r3, #2]
10001550:	e028      	b.n	100015a4 <OP_PutSystemShutDown+0x7c>
	}
	else
	{
		sysTickParam->isTimeOut = false;
10001552:	68bb      	ldr	r3, [r7, #8]
10001554:	2200      	movs	r2, #0
10001556:	711a      	strb	r2, [r3, #4]
		sysTickParam->count = 0;
10001558:	68bb      	ldr	r3, [r7, #8]
1000155a:	2200      	movs	r2, #0
1000155c:	805a      	strh	r2, [r3, #2]

		/* Close Pre Discharge Relay */
		PDU_Switch_Relay(PDU_RELAY_KDSG, PDU_RELAY_CLOSE);
1000155e:	2003      	movs	r0, #3
10001560:	2101      	movs	r1, #1
10001562:	f001 fcab 	bl	10002ebc <PDU_Switch_Relay>

		/* Open Main Relay */
		PDU_Switch_Relay(PDU_RELAY_KMP, PDU_RELAY_OPEN);
10001566:	2001      	movs	r0, #1
10001568:	2100      	movs	r1, #0
1000156a:	f001 fca7 	bl	10002ebc <PDU_Switch_Relay>
		pcsBmsStatus->bmc_main_relay		= RELAY_OPEN;
1000156e:	683b      	ldr	r3, [r7, #0]
10001570:	2200      	movs	r2, #0
10001572:	709a      	strb	r2, [r3, #2]
		pcsBmsStatus->bmc_precharge_relay	= RELAY_CLOSE;
10001574:	683b      	ldr	r3, [r7, #0]
10001576:	2201      	movs	r2, #1
10001578:	70da      	strb	r2, [r3, #3]
		pcsBmsStatus->bmc_status			= BMU_PRECHARGE;
1000157a:	683b      	ldr	r3, [r7, #0]
1000157c:	2201      	movs	r2, #1
1000157e:	701a      	strb	r2, [r3, #0]
		if(!ctrlFlag->isBypass_power_mode)
10001580:	687b      	ldr	r3, [r7, #4]
10001582:	78db      	ldrb	r3, [r3, #3]
10001584:	2201      	movs	r2, #1
10001586:	4053      	eors	r3, r2
10001588:	b2db      	uxtb	r3, r3
1000158a:	2b00      	cmp	r3, #0
1000158c:	d007      	beq.n	1000159e <OP_PutSystemShutDown+0x76>
		{
			PDU_Switch_Relay(PDU_RELAY_KBAT, PDU_RELAY_OPEN);
1000158e:	2000      	movs	r0, #0
10001590:	2100      	movs	r1, #0
10001592:	f001 fc93 	bl	10002ebc <PDU_Switch_Relay>
			*state = OP_POWERUP;
10001596:	68fb      	ldr	r3, [r7, #12]
10001598:	2200      	movs	r2, #0
1000159a:	701a      	strb	r2, [r3, #0]
1000159c:	e002      	b.n	100015a4 <OP_PutSystemShutDown+0x7c>
		}
		else
		{
			*state = OP_TURN_ON;
1000159e:	68fb      	ldr	r3, [r7, #12]
100015a0:	2201      	movs	r2, #1
100015a2:	701a      	strb	r2, [r3, #0]
		}
	}
}
100015a4:	46bd      	mov	sp, r7
100015a6:	b004      	add	sp, #16
100015a8:	bd80      	pop	{r7, pc}
100015aa:	46c0      	nop			; (mov r8, r8)

100015ac <OP_CheckingMode>:

void OP_CheckingMode(OP_CTRL_FLAG_t *ctrlFlag)
{
100015ac:	b580      	push	{r7, lr}
100015ae:	b082      	sub	sp, #8
100015b0:	af00      	add	r7, sp, #0
100015b2:	6078      	str	r0, [r7, #4]
	/* Read Dip Switch */
	(XMC_GPIO_GetInput(P4_2) == 1)?(ctrlFlag->isBypass_power_mode = true):
100015b4:	4b1f      	ldr	r3, [pc, #124]	; (10001634 <OP_CheckingMode+0x88>)
100015b6:	1c18      	adds	r0, r3, #0
100015b8:	2102      	movs	r1, #2
100015ba:	f7ff fd71 	bl	100010a0 <XMC_GPIO_GetInput>
100015be:	1e03      	subs	r3, r0, #0
100015c0:	2b01      	cmp	r3, #1
100015c2:	d103      	bne.n	100015cc <OP_CheckingMode+0x20>
100015c4:	687b      	ldr	r3, [r7, #4]
100015c6:	2201      	movs	r2, #1
100015c8:	70da      	strb	r2, [r3, #3]
100015ca:	e002      	b.n	100015d2 <OP_CheckingMode+0x26>
								   (ctrlFlag->isBypass_power_mode = false);
100015cc:	687b      	ldr	r3, [r7, #4]
100015ce:	2200      	movs	r2, #0
100015d0:	70da      	strb	r2, [r3, #3]
	(XMC_GPIO_GetInput(P4_3) == 1)?(ctrlFlag->isAuto_mode = true):
100015d2:	4b18      	ldr	r3, [pc, #96]	; (10001634 <OP_CheckingMode+0x88>)
100015d4:	1c18      	adds	r0, r3, #0
100015d6:	2103      	movs	r1, #3
100015d8:	f7ff fd62 	bl	100010a0 <XMC_GPIO_GetInput>
100015dc:	1e03      	subs	r3, r0, #0
100015de:	2b01      	cmp	r3, #1
100015e0:	d103      	bne.n	100015ea <OP_CheckingMode+0x3e>
100015e2:	687b      	ldr	r3, [r7, #4]
100015e4:	2201      	movs	r2, #1
100015e6:	709a      	strb	r2, [r3, #2]
100015e8:	e002      	b.n	100015f0 <OP_CheckingMode+0x44>
								   (ctrlFlag->isAuto_mode = false);
100015ea:	687b      	ldr	r3, [r7, #4]
100015ec:	2200      	movs	r2, #0
100015ee:	709a      	strb	r2, [r3, #2]
	(XMC_GPIO_GetInput(P4_4) == 1)?(ctrlFlag->isChecking_peripheral = true):
100015f0:	4b10      	ldr	r3, [pc, #64]	; (10001634 <OP_CheckingMode+0x88>)
100015f2:	1c18      	adds	r0, r3, #0
100015f4:	2104      	movs	r1, #4
100015f6:	f7ff fd53 	bl	100010a0 <XMC_GPIO_GetInput>
100015fa:	1e03      	subs	r3, r0, #0
100015fc:	2b01      	cmp	r3, #1
100015fe:	d103      	bne.n	10001608 <OP_CheckingMode+0x5c>
10001600:	687b      	ldr	r3, [r7, #4]
10001602:	2201      	movs	r2, #1
10001604:	715a      	strb	r2, [r3, #5]
10001606:	e002      	b.n	1000160e <OP_CheckingMode+0x62>
								   (ctrlFlag->isChecking_peripheral = false);
10001608:	687b      	ldr	r3, [r7, #4]
1000160a:	2200      	movs	r2, #0
1000160c:	715a      	strb	r2, [r3, #5]
	(XMC_GPIO_GetInput(P4_5) == 1)?(ctrlFlag->isForced_shutting_down = true):
1000160e:	4b09      	ldr	r3, [pc, #36]	; (10001634 <OP_CheckingMode+0x88>)
10001610:	1c18      	adds	r0, r3, #0
10001612:	2105      	movs	r1, #5
10001614:	f7ff fd44 	bl	100010a0 <XMC_GPIO_GetInput>
10001618:	1e03      	subs	r3, r0, #0
1000161a:	2b01      	cmp	r3, #1
1000161c:	d103      	bne.n	10001626 <OP_CheckingMode+0x7a>
1000161e:	687b      	ldr	r3, [r7, #4]
10001620:	2201      	movs	r2, #1
10001622:	711a      	strb	r2, [r3, #4]
10001624:	e002      	b.n	1000162c <OP_CheckingMode+0x80>
								   (ctrlFlag->isForced_shutting_down = false);
10001626:	687b      	ldr	r3, [r7, #4]
10001628:	2200      	movs	r2, #0
1000162a:	711a      	strb	r2, [r3, #4]
}
1000162c:	46bd      	mov	sp, r7
1000162e:	b002      	add	sp, #8
10001630:	bd80      	pop	{r7, pc}
10001632:	46c0      	nop			; (mov r8, r8)
10001634:	40040400 	.word	0x40040400

10001638 <OP_CheckingError>:

void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
10001638:	b580      	push	{r7, lr}
1000163a:	b084      	sub	sp, #16
1000163c:	af00      	add	r7, sp, #0
1000163e:	60f8      	str	r0, [r7, #12]
10001640:	60b9      	str	r1, [r7, #8]
10001642:	607a      	str	r2, [r7, #4]
10001644:	603b      	str	r3, [r7, #0]
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
10001646:	68bb      	ldr	r3, [r7, #8]
10001648:	791b      	ldrb	r3, [r3, #4]
1000164a:	1c1a      	adds	r2, r3, #0
						  gridStatus->dcgrid_system_pcsIsStandBy |\
1000164c:	687b      	ldr	r3, [r7, #4]
1000164e:	78db      	ldrb	r3, [r3, #3]
void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
10001650:	4313      	orrs	r3, r2
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
10001652:	683a      	ldr	r2, [r7, #0]
10001654:	78d2      	ldrb	r2, [r2, #3]
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
10001656:	4313      	orrs	r3, r2
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
10001658:	69ba      	ldr	r2, [r7, #24]
1000165a:	78d2      	ldrb	r2, [r2, #3]
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
1000165c:	4313      	orrs	r3, r2
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
1000165e:	69fa      	ldr	r2, [r7, #28]
10001660:	78d2      	ldrb	r2, [r2, #3]
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
10001662:	4313      	orrs	r3, r2
10001664:	1e5a      	subs	r2, r3, #1
10001666:	4193      	sbcs	r3, r2
10001668:	b2da      	uxtb	r2, r3
void OP_CheckingError(OP_CTRL_FLAG_t *ctrlFlag, PCS_STATUS_t *pcsStatus,
					  DCGRID_STATUS_t *gridStatus, ACINV_STATUS_t *invStatus,
					  PVCONV_STATUS_t *pvStatus, BATCONV_STATUS_t *BatStatus)
{
	  /* Check if any system in Standby mode */
	ctrlFlag->isStandby = pcsStatus->pcs_system_pcsIsStandBy 	 |\
1000166a:	68fb      	ldr	r3, [r7, #12]
1000166c:	705a      	strb	r2, [r3, #1]
						  gridStatus->dcgrid_system_pcsIsStandBy |\
						  invStatus->acinv_system_pcsIsStandBy	 |\
						  pvStatus->pvconv_system_pcsIsStandBy   |\
						  BatStatus->batconv_system_pcsIsStandBy;
}
1000166e:	46bd      	mov	sp, r7
10001670:	b004      	add	sp, #16
10001672:	bd80      	pop	{r7, pc}

10001674 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
10001674:	b580      	push	{r7, lr}
10001676:	b082      	sub	sp, #8
10001678:	af00      	add	r7, sp, #0
1000167a:	1c02      	adds	r2, r0, #0
1000167c:	1dfb      	adds	r3, r7, #7
1000167e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10001680:	1dfb      	adds	r3, r7, #7
10001682:	781b      	ldrb	r3, [r3, #0]
10001684:	2b7f      	cmp	r3, #127	; 0x7f
10001686:	d80a      	bhi.n	1000169e <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001688:	4906      	ldr	r1, [pc, #24]	; (100016a4 <__NVIC_ClearPendingIRQ+0x30>)
1000168a:	1dfb      	adds	r3, r7, #7
1000168c:	781b      	ldrb	r3, [r3, #0]
1000168e:	1c1a      	adds	r2, r3, #0
10001690:	231f      	movs	r3, #31
10001692:	4013      	ands	r3, r2
10001694:	2201      	movs	r2, #1
10001696:	409a      	lsls	r2, r3
10001698:	23c0      	movs	r3, #192	; 0xc0
1000169a:	005b      	lsls	r3, r3, #1
1000169c:	50ca      	str	r2, [r1, r3]
  }
}
1000169e:	46bd      	mov	sp, r7
100016a0:	b002      	add	sp, #8
100016a2:	bd80      	pop	{r7, pc}
100016a4:	e000e100 	.word	0xe000e100

100016a8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100016a8:	b580      	push	{r7, lr}
100016aa:	b082      	sub	sp, #8
100016ac:	af00      	add	r7, sp, #0
100016ae:	6078      	str	r0, [r7, #4]
100016b0:	1c0a      	adds	r2, r1, #0
100016b2:	1cfb      	adds	r3, r7, #3
100016b4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
100016b6:	1cfb      	adds	r3, r7, #3
100016b8:	781b      	ldrb	r3, [r3, #0]
100016ba:	2280      	movs	r2, #128	; 0x80
100016bc:	0252      	lsls	r2, r2, #9
100016be:	409a      	lsls	r2, r3
100016c0:	687b      	ldr	r3, [r7, #4]
100016c2:	605a      	str	r2, [r3, #4]
}
100016c4:	46bd      	mov	sp, r7
100016c6:	b002      	add	sp, #8
100016c8:	bd80      	pop	{r7, pc}
100016ca:	46c0      	nop			; (mov r8, r8)

100016cc <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
100016cc:	b580      	push	{r7, lr}
100016ce:	b082      	sub	sp, #8
100016d0:	af00      	add	r7, sp, #0
100016d2:	6078      	str	r0, [r7, #4]
100016d4:	1c0a      	adds	r2, r1, #0
100016d6:	1cfb      	adds	r3, r7, #3
100016d8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
100016da:	1cfb      	adds	r3, r7, #3
100016dc:	781b      	ldrb	r3, [r3, #0]
100016de:	4a03      	ldr	r2, [pc, #12]	; (100016ec <XMC_GPIO_ToggleOutput+0x20>)
100016e0:	409a      	lsls	r2, r3
100016e2:	687b      	ldr	r3, [r7, #4]
100016e4:	605a      	str	r2, [r3, #4]
}
100016e6:	46bd      	mov	sp, r7
100016e8:	b002      	add	sp, #8
100016ea:	bd80      	pop	{r7, pc}
100016ec:	00010001 	.word	0x00010001

100016f0 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
100016f0:	b580      	push	{r7, lr}
100016f2:	b082      	sub	sp, #8
100016f4:	af00      	add	r7, sp, #0
100016f6:	6078      	str	r0, [r7, #4]
100016f8:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	683a      	ldr	r2, [r7, #0]
100016fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001700:	46bd      	mov	sp, r7
10001702:	b002      	add	sp, #8
10001704:	bd80      	pop	{r7, pc}
10001706:	46c0      	nop			; (mov r8, r8)

10001708 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10001708:	b580      	push	{r7, lr}
1000170a:	b082      	sub	sp, #8
1000170c:	af00      	add	r7, sp, #0
1000170e:	6078      	str	r0, [r7, #4]
10001710:	1c0a      	adds	r2, r1, #0
10001712:	1cfb      	adds	r3, r7, #3
10001714:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
10001716:	1cfb      	adds	r3, r7, #3
10001718:	781b      	ldrb	r3, [r3, #0]
1000171a:	2201      	movs	r2, #1
1000171c:	409a      	lsls	r2, r3
1000171e:	687b      	ldr	r3, [r7, #4]
10001720:	21b0      	movs	r1, #176	; 0xb0
10001722:	505a      	str	r2, [r3, r1]
}
10001724:	46bd      	mov	sp, r7
10001726:	b002      	add	sp, #8
10001728:	bd80      	pop	{r7, pc}
1000172a:	46c0      	nop			; (mov r8, r8)

1000172c <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
1000172c:	b580      	push	{r7, lr}
1000172e:	b082      	sub	sp, #8
10001730:	af00      	add	r7, sp, #0
10001732:	6078      	str	r0, [r7, #4]
10001734:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
10001736:	687b      	ldr	r3, [r7, #4]
10001738:	683a      	ldr	r2, [r7, #0]
1000173a:	32c0      	adds	r2, #192	; 0xc0
1000173c:	0092      	lsls	r2, r2, #2
1000173e:	58d3      	ldr	r3, [r2, r3]
10001740:	b29b      	uxth	r3, r3
}
10001742:	1c18      	adds	r0, r3, #0
10001744:	46bd      	mov	sp, r7
10001746:	b002      	add	sp, #8
10001748:	bd80      	pop	{r7, pc}
1000174a:	46c0      	nop			; (mov r8, r8)

1000174c <XMC_VADC_GROUP_ClearResultEvent>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_ChannelTriggerEvent().
 */
__STATIC_INLINE void XMC_VADC_GROUP_ClearResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
1000174c:	b580      	push	{r7, lr}
1000174e:	b082      	sub	sp, #8
10001750:	af00      	add	r7, sp, #0
10001752:	6078      	str	r0, [r7, #4]
10001754:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ClearResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  group_ptr->REFCLR = (uint32_t)((uint32_t)1 << res_reg);
10001756:	683b      	ldr	r3, [r7, #0]
10001758:	2201      	movs	r2, #1
1000175a:	409a      	lsls	r2, r3
1000175c:	1c11      	adds	r1, r2, #0
1000175e:	687a      	ldr	r2, [r7, #4]
10001760:	23ca      	movs	r3, #202	; 0xca
10001762:	005b      	lsls	r3, r3, #1
10001764:	50d1      	str	r1, [r2, r3]
}
10001766:	46bd      	mov	sp, r7
10001768:	b002      	add	sp, #8
1000176a:	bd80      	pop	{r7, pc}

1000176c <IRQ12_Handler>:
 */

#include "interrupts.h"

void genixrs485_intrpt_handler(void)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b082      	sub	sp, #8
10001770:	af00      	add	r7, sp, #0
	static uint8_t 	count;
	static uint8_t 	length;
	static char buffer[32];
	uint8_t data;

	XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0,
10001772:	4a82      	ldr	r2, [pc, #520]	; (1000197c <IRQ12_Handler+0x210>)
10001774:	2380      	movs	r3, #128	; 0x80
10001776:	01db      	lsls	r3, r3, #7
10001778:	1c10      	adds	r0, r2, #0
1000177a:	1c19      	adds	r1, r3, #0
1000177c:	f7ff ffb8 	bl	100016f0 <XMC_UART_CH_ClearStatusFlag>
								XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);

	data = XMC_UART_CH_GetReceivedData(XMC_USIC1_CH0);
10001780:	4b7e      	ldr	r3, [pc, #504]	; (1000197c <IRQ12_Handler+0x210>)
10001782:	1c18      	adds	r0, r3, #0
10001784:	f004 f9f8 	bl	10005b78 <XMC_UART_CH_GetReceivedData>
10001788:	1c03      	adds	r3, r0, #0
1000178a:	1c1a      	adds	r2, r3, #0
1000178c:	1dfb      	adds	r3, r7, #7
1000178e:	701a      	strb	r2, [r3, #0]
	switch(rcvState)
10001790:	4b7b      	ldr	r3, [pc, #492]	; (10001980 <IRQ12_Handler+0x214>)
10001792:	781b      	ldrb	r3, [r3, #0]
10001794:	2b05      	cmp	r3, #5
10001796:	d900      	bls.n	1000179a <IRQ12_Handler+0x2e>
10001798:	e0eb      	b.n	10001972 <IRQ12_Handler+0x206>
1000179a:	009a      	lsls	r2, r3, #2
1000179c:	4b79      	ldr	r3, [pc, #484]	; (10001984 <IRQ12_Handler+0x218>)
1000179e:	18d3      	adds	r3, r2, r3
100017a0:	681b      	ldr	r3, [r3, #0]
100017a2:	469f      	mov	pc, r3
	{
		case RCV_HEADER_CHECK	:
			head = (head << 8) | data;
100017a4:	4b78      	ldr	r3, [pc, #480]	; (10001988 <IRQ12_Handler+0x21c>)
100017a6:	881b      	ldrh	r3, [r3, #0]
100017a8:	021b      	lsls	r3, r3, #8
100017aa:	b29a      	uxth	r2, r3
100017ac:	1dfb      	adds	r3, r7, #7
100017ae:	781b      	ldrb	r3, [r3, #0]
100017b0:	b29b      	uxth	r3, r3
100017b2:	4313      	orrs	r3, r2
100017b4:	b29b      	uxth	r3, r3
100017b6:	b29a      	uxth	r2, r3
100017b8:	4b73      	ldr	r3, [pc, #460]	; (10001988 <IRQ12_Handler+0x21c>)
100017ba:	801a      	strh	r2, [r3, #0]
			if(head == 0xAABB)
100017bc:	4b72      	ldr	r3, [pc, #456]	; (10001988 <IRQ12_Handler+0x21c>)
100017be:	881b      	ldrh	r3, [r3, #0]
100017c0:	4a72      	ldr	r2, [pc, #456]	; (1000198c <IRQ12_Handler+0x220>)
100017c2:	4293      	cmp	r3, r2
100017c4:	d10e      	bne.n	100017e4 <IRQ12_Handler+0x78>
			{
				XMC_GPIO_SetOutputLow(P2_11);
100017c6:	4b72      	ldr	r3, [pc, #456]	; (10001990 <IRQ12_Handler+0x224>)
100017c8:	1c18      	adds	r0, r3, #0
100017ca:	210b      	movs	r1, #11
100017cc:	f7ff ff6c 	bl	100016a8 <XMC_GPIO_SetOutputLow>
				rcvState = RCV_DATA_LENGTH;
100017d0:	4b6b      	ldr	r3, [pc, #428]	; (10001980 <IRQ12_Handler+0x214>)
100017d2:	2201      	movs	r2, #1
100017d4:	701a      	strb	r2, [r3, #0]
				head	 = 0x0000;
100017d6:	4b6c      	ldr	r3, [pc, #432]	; (10001988 <IRQ12_Handler+0x21c>)
100017d8:	2200      	movs	r2, #0
100017da:	801a      	strh	r2, [r3, #0]
				length   = 0;
100017dc:	4b6d      	ldr	r3, [pc, #436]	; (10001994 <IRQ12_Handler+0x228>)
100017de:	2200      	movs	r2, #0
100017e0:	701a      	strb	r2, [r3, #0]
			}
			break;
100017e2:	e0c7      	b.n	10001974 <IRQ12_Handler+0x208>
100017e4:	e0c6      	b.n	10001974 <IRQ12_Handler+0x208>
		case RCV_DATA_LENGTH	:
			if(data == 32)
100017e6:	1dfb      	adds	r3, r7, #7
100017e8:	781b      	ldrb	r3, [r3, #0]
100017ea:	2b20      	cmp	r3, #32
100017ec:	d109      	bne.n	10001802 <IRQ12_Handler+0x96>
			{

				length = data-4; // dont know why substracted by 4. LoL
100017ee:	1dfb      	adds	r3, r7, #7
100017f0:	781b      	ldrb	r3, [r3, #0]
100017f2:	3b04      	subs	r3, #4
100017f4:	b2da      	uxtb	r2, r3
100017f6:	4b67      	ldr	r3, [pc, #412]	; (10001994 <IRQ12_Handler+0x228>)
100017f8:	701a      	strb	r2, [r3, #0]
				rcvState = RCV_RESPONSE_CODE;
100017fa:	4b61      	ldr	r3, [pc, #388]	; (10001980 <IRQ12_Handler+0x214>)
100017fc:	2202      	movs	r2, #2
100017fe:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
			}
			break;
10001800:	e0b8      	b.n	10001974 <IRQ12_Handler+0x208>
				length = data-4; // dont know why substracted by 4. LoL
				rcvState = RCV_RESPONSE_CODE;
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
10001802:	4b5f      	ldr	r3, [pc, #380]	; (10001980 <IRQ12_Handler+0x214>)
10001804:	2200      	movs	r2, #0
10001806:	701a      	strb	r2, [r3, #0]
			}
			break;
10001808:	e0b4      	b.n	10001974 <IRQ12_Handler+0x208>
		case RCV_RESPONSE_CODE	:
			if(data == GENIX_SUMMARY)
1000180a:	1dfb      	adds	r3, r7, #7
1000180c:	781b      	ldrb	r3, [r3, #0]
1000180e:	2b02      	cmp	r3, #2
10001810:	d106      	bne.n	10001820 <IRQ12_Handler+0xb4>
			{

				rcvState = RCV_COLLECT_DATA;
10001812:	4b5b      	ldr	r3, [pc, #364]	; (10001980 <IRQ12_Handler+0x214>)
10001814:	2203      	movs	r2, #3
10001816:	701a      	strb	r2, [r3, #0]
				count=0;
10001818:	4b5f      	ldr	r3, [pc, #380]	; (10001998 <IRQ12_Handler+0x22c>)
1000181a:	2200      	movs	r2, #0
1000181c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
			}
			break;
1000181e:	e0a9      	b.n	10001974 <IRQ12_Handler+0x208>
				rcvState = RCV_COLLECT_DATA;
				count=0;
			}
			else
			{
				rcvState = RCV_HEADER_CHECK;
10001820:	4b57      	ldr	r3, [pc, #348]	; (10001980 <IRQ12_Handler+0x214>)
10001822:	2200      	movs	r2, #0
10001824:	701a      	strb	r2, [r3, #0]
			}
			break;
10001826:	e0a5      	b.n	10001974 <IRQ12_Handler+0x208>
		case RCV_COLLECT_DATA	:
			if(count == length-1)
10001828:	4b5b      	ldr	r3, [pc, #364]	; (10001998 <IRQ12_Handler+0x22c>)
1000182a:	781b      	ldrb	r3, [r3, #0]
1000182c:	1c1a      	adds	r2, r3, #0
1000182e:	4b59      	ldr	r3, [pc, #356]	; (10001994 <IRQ12_Handler+0x228>)
10001830:	781b      	ldrb	r3, [r3, #0]
10001832:	3b01      	subs	r3, #1
10001834:	429a      	cmp	r2, r3
10001836:	d10d      	bne.n	10001854 <IRQ12_Handler+0xe8>
			{

				buffer[count] = data;
10001838:	4b57      	ldr	r3, [pc, #348]	; (10001998 <IRQ12_Handler+0x22c>)
1000183a:	781b      	ldrb	r3, [r3, #0]
1000183c:	1c19      	adds	r1, r3, #0
1000183e:	4b57      	ldr	r3, [pc, #348]	; (1000199c <IRQ12_Handler+0x230>)
10001840:	1dfa      	adds	r2, r7, #7
10001842:	7812      	ldrb	r2, [r2, #0]
10001844:	545a      	strb	r2, [r3, r1]
				rcvState = RCV_ECC_CHECK;
10001846:	4b4e      	ldr	r3, [pc, #312]	; (10001980 <IRQ12_Handler+0x214>)
10001848:	2204      	movs	r2, #4
1000184a:	701a      	strb	r2, [r3, #0]
				count = 0;
1000184c:	4b52      	ldr	r3, [pc, #328]	; (10001998 <IRQ12_Handler+0x22c>)
1000184e:	2200      	movs	r2, #0
10001850:	701a      	strb	r2, [r3, #0]
			else
			{
				buffer[count] = data;
				count++;
			}
			break;
10001852:	e08f      	b.n	10001974 <IRQ12_Handler+0x208>
				rcvState = RCV_ECC_CHECK;
				count = 0;
			}
			else
			{
				buffer[count] = data;
10001854:	4b50      	ldr	r3, [pc, #320]	; (10001998 <IRQ12_Handler+0x22c>)
10001856:	781b      	ldrb	r3, [r3, #0]
10001858:	1c19      	adds	r1, r3, #0
1000185a:	4b50      	ldr	r3, [pc, #320]	; (1000199c <IRQ12_Handler+0x230>)
1000185c:	1dfa      	adds	r2, r7, #7
1000185e:	7812      	ldrb	r2, [r2, #0]
10001860:	545a      	strb	r2, [r3, r1]
				count++;
10001862:	4b4d      	ldr	r3, [pc, #308]	; (10001998 <IRQ12_Handler+0x22c>)
10001864:	781b      	ldrb	r3, [r3, #0]
10001866:	3301      	adds	r3, #1
10001868:	b2da      	uxtb	r2, r3
1000186a:	4b4b      	ldr	r3, [pc, #300]	; (10001998 <IRQ12_Handler+0x22c>)
1000186c:	701a      	strb	r2, [r3, #0]
			}
			break;
1000186e:	e081      	b.n	10001974 <IRQ12_Handler+0x208>
		case RCV_ECC_CHECK :
			tail = 0x0000;
10001870:	4b4b      	ldr	r3, [pc, #300]	; (100019a0 <IRQ12_Handler+0x234>)
10001872:	2200      	movs	r2, #0
10001874:	801a      	strh	r2, [r3, #0]
			rcvState = RCV_TAIL_CHECK;
10001876:	4b42      	ldr	r3, [pc, #264]	; (10001980 <IRQ12_Handler+0x214>)
10001878:	2205      	movs	r2, #5
1000187a:	701a      	strb	r2, [r3, #0]
			break;
1000187c:	e07a      	b.n	10001974 <IRQ12_Handler+0x208>
		case RCV_TAIL_CHECK :
			tail = (tail << 8) | data;
1000187e:	4b48      	ldr	r3, [pc, #288]	; (100019a0 <IRQ12_Handler+0x234>)
10001880:	881b      	ldrh	r3, [r3, #0]
10001882:	021b      	lsls	r3, r3, #8
10001884:	b29a      	uxth	r2, r3
10001886:	1dfb      	adds	r3, r7, #7
10001888:	781b      	ldrb	r3, [r3, #0]
1000188a:	b29b      	uxth	r3, r3
1000188c:	4313      	orrs	r3, r2
1000188e:	b29b      	uxth	r3, r3
10001890:	b29a      	uxth	r2, r3
10001892:	4b43      	ldr	r3, [pc, #268]	; (100019a0 <IRQ12_Handler+0x234>)
10001894:	801a      	strh	r2, [r3, #0]
			if(count == 1)
10001896:	4b40      	ldr	r3, [pc, #256]	; (10001998 <IRQ12_Handler+0x22c>)
10001898:	781b      	ldrb	r3, [r3, #0]
1000189a:	2b01      	cmp	r3, #1
1000189c:	d162      	bne.n	10001964 <IRQ12_Handler+0x1f8>
			{
				if(tail == 0x0D0A)
1000189e:	4b40      	ldr	r3, [pc, #256]	; (100019a0 <IRQ12_Handler+0x234>)
100018a0:	881b      	ldrh	r3, [r3, #0]
100018a2:	4a40      	ldr	r2, [pc, #256]	; (100019a4 <IRQ12_Handler+0x238>)
100018a4:	4293      	cmp	r3, r2
100018a6:	d159      	bne.n	1000195c <IRQ12_Handler+0x1f0>
				{
					/* do a parse */
					/* Battery Voltage */
					genix_data.pack_voltage = (((uint16_t)(buffer[0]) << 8) | buffer[1]);
100018a8:	4b3c      	ldr	r3, [pc, #240]	; (1000199c <IRQ12_Handler+0x230>)
100018aa:	781b      	ldrb	r3, [r3, #0]
100018ac:	021b      	lsls	r3, r3, #8
100018ae:	b29a      	uxth	r2, r3
100018b0:	4b3a      	ldr	r3, [pc, #232]	; (1000199c <IRQ12_Handler+0x230>)
100018b2:	785b      	ldrb	r3, [r3, #1]
100018b4:	b29b      	uxth	r3, r3
100018b6:	4313      	orrs	r3, r2
100018b8:	b29b      	uxth	r3, r3
100018ba:	b29a      	uxth	r2, r3
100018bc:	4b3a      	ldr	r3, [pc, #232]	; (100019a8 <IRQ12_Handler+0x23c>)
100018be:	805a      	strh	r2, [r3, #2]
					data_group.vBat_genix = genix_data.pack_voltage/10;
100018c0:	4b39      	ldr	r3, [pc, #228]	; (100019a8 <IRQ12_Handler+0x23c>)
100018c2:	885b      	ldrh	r3, [r3, #2]
100018c4:	1c18      	adds	r0, r3, #0
100018c6:	210a      	movs	r1, #10
100018c8:	f004 ff54 	bl	10006774 <__aeabi_uidiv>
100018cc:	1c03      	adds	r3, r0, #0
100018ce:	b29a      	uxth	r2, r3
100018d0:	4b36      	ldr	r3, [pc, #216]	; (100019ac <IRQ12_Handler+0x240>)
100018d2:	879a      	strh	r2, [r3, #60]	; 0x3c
					/* Current */
					genix_data.pack_current = ((((int16_t)(buffer[2]) << 8) | buffer[3]) - 30000);
100018d4:	4b31      	ldr	r3, [pc, #196]	; (1000199c <IRQ12_Handler+0x230>)
100018d6:	789b      	ldrb	r3, [r3, #2]
100018d8:	021b      	lsls	r3, r3, #8
100018da:	b29a      	uxth	r2, r3
100018dc:	4b2f      	ldr	r3, [pc, #188]	; (1000199c <IRQ12_Handler+0x230>)
100018de:	78db      	ldrb	r3, [r3, #3]
100018e0:	b29b      	uxth	r3, r3
100018e2:	4313      	orrs	r3, r2
100018e4:	b29b      	uxth	r3, r3
100018e6:	b29b      	uxth	r3, r3
100018e8:	4a31      	ldr	r2, [pc, #196]	; (100019b0 <IRQ12_Handler+0x244>)
100018ea:	4694      	mov	ip, r2
100018ec:	4463      	add	r3, ip
100018ee:	b29b      	uxth	r3, r3
100018f0:	b29a      	uxth	r2, r3
100018f2:	4b2d      	ldr	r3, [pc, #180]	; (100019a8 <IRQ12_Handler+0x23c>)
100018f4:	80da      	strh	r2, [r3, #6]
					data_group.iBat_genix = (genix_data.pack_current)/10;
100018f6:	4b2c      	ldr	r3, [pc, #176]	; (100019a8 <IRQ12_Handler+0x23c>)
100018f8:	88db      	ldrh	r3, [r3, #6]
100018fa:	b21b      	sxth	r3, r3
100018fc:	1c18      	adds	r0, r3, #0
100018fe:	210a      	movs	r1, #10
10001900:	f004 ffc8 	bl	10006894 <__aeabi_idiv>
10001904:	1c03      	adds	r3, r0, #0
10001906:	b29b      	uxth	r3, r3
10001908:	b21b      	sxth	r3, r3
1000190a:	1c18      	adds	r0, r3, #0
1000190c:	f005 fcce 	bl	100072ac <__aeabi_i2f>
10001910:	1c02      	adds	r2, r0, #0
10001912:	4b26      	ldr	r3, [pc, #152]	; (100019ac <IRQ12_Handler+0x240>)
10001914:	641a      	str	r2, [r3, #64]	; 0x40
					/* Max Cell Temperature */
					genix_data.pack_max_temp = ((uint16_t)(buffer[11])-40)*10;
10001916:	4b21      	ldr	r3, [pc, #132]	; (1000199c <IRQ12_Handler+0x230>)
10001918:	7adb      	ldrb	r3, [r3, #11]
1000191a:	3b28      	subs	r3, #40	; 0x28
1000191c:	b29b      	uxth	r3, r3
1000191e:	1c1a      	adds	r2, r3, #0
10001920:	0092      	lsls	r2, r2, #2
10001922:	18d3      	adds	r3, r2, r3
10001924:	18db      	adds	r3, r3, r3
10001926:	b29a      	uxth	r2, r3
10001928:	4b1f      	ldr	r3, [pc, #124]	; (100019a8 <IRQ12_Handler+0x23c>)
1000192a:	809a      	strh	r2, [r3, #4]
					data_group.temp_genix = genix_data.pack_max_temp/10;
1000192c:	4b1e      	ldr	r3, [pc, #120]	; (100019a8 <IRQ12_Handler+0x23c>)
1000192e:	889b      	ldrh	r3, [r3, #4]
10001930:	1c18      	adds	r0, r3, #0
10001932:	210a      	movs	r1, #10
10001934:	f004 ff1e 	bl	10006774 <__aeabi_uidiv>
10001938:	1c03      	adds	r3, r0, #0
1000193a:	b29b      	uxth	r3, r3
1000193c:	b2d9      	uxtb	r1, r3
1000193e:	4b1b      	ldr	r3, [pc, #108]	; (100019ac <IRQ12_Handler+0x240>)
10001940:	2244      	movs	r2, #68	; 0x44
10001942:	5499      	strb	r1, [r3, r2]
					/* SoC */
					genix_data.pack_soc = (uint8_t)(buffer[4]);
10001944:	4b15      	ldr	r3, [pc, #84]	; (1000199c <IRQ12_Handler+0x230>)
10001946:	791a      	ldrb	r2, [r3, #4]
10001948:	4b17      	ldr	r3, [pc, #92]	; (100019a8 <IRQ12_Handler+0x23c>)
1000194a:	701a      	strb	r2, [r3, #0]
					data_group.soC = genix_data.pack_soc;
1000194c:	4b16      	ldr	r3, [pc, #88]	; (100019a8 <IRQ12_Handler+0x23c>)
1000194e:	7819      	ldrb	r1, [r3, #0]
10001950:	4b16      	ldr	r3, [pc, #88]	; (100019ac <IRQ12_Handler+0x240>)
10001952:	223a      	movs	r2, #58	; 0x3a
10001954:	5499      	strb	r1, [r3, r2]
					count = 0;
10001956:	4b10      	ldr	r3, [pc, #64]	; (10001998 <IRQ12_Handler+0x22c>)
10001958:	2200      	movs	r2, #0
1000195a:	701a      	strb	r2, [r3, #0]
				}
				rcvState = RCV_HEADER_CHECK;
1000195c:	4b08      	ldr	r3, [pc, #32]	; (10001980 <IRQ12_Handler+0x214>)
1000195e:	2200      	movs	r2, #0
10001960:	701a      	strb	r2, [r3, #0]
			}
			else count++;
			break;
10001962:	e007      	b.n	10001974 <IRQ12_Handler+0x208>
					data_group.soC = genix_data.pack_soc;
					count = 0;
				}
				rcvState = RCV_HEADER_CHECK;
			}
			else count++;
10001964:	4b0c      	ldr	r3, [pc, #48]	; (10001998 <IRQ12_Handler+0x22c>)
10001966:	781b      	ldrb	r3, [r3, #0]
10001968:	3301      	adds	r3, #1
1000196a:	b2da      	uxtb	r2, r3
1000196c:	4b0a      	ldr	r3, [pc, #40]	; (10001998 <IRQ12_Handler+0x22c>)
1000196e:	701a      	strb	r2, [r3, #0]
			break;
10001970:	e000      	b.n	10001974 <IRQ12_Handler+0x208>
		default				:break;
10001972:	46c0      	nop			; (mov r8, r8)
	}
}
10001974:	46bd      	mov	sp, r7
10001976:	b002      	add	sp, #8
10001978:	bd80      	pop	{r7, pc}
1000197a:	46c0      	nop			; (mov r8, r8)
1000197c:	48004000 	.word	0x48004000
10001980:	20000756 	.word	0x20000756
10001984:	1000cd68 	.word	0x1000cd68
10001988:	20000758 	.word	0x20000758
1000198c:	0000aabb 	.word	0x0000aabb
10001990:	40040200 	.word	0x40040200
10001994:	2000075a 	.word	0x2000075a
10001998:	2000075b 	.word	0x2000075b
1000199c:	2000075c 	.word	0x2000075c
100019a0:	2000077c 	.word	0x2000077c
100019a4:	00000d0a 	.word	0x00000d0a
100019a8:	20000ad4 	.word	0x20000ad4
100019ac:	20000a48 	.word	0x20000a48
100019b0:	ffff8ad0 	.word	0xffff8ad0

100019b4 <IRQ18_Handler>:

void esp32uart_intrpt_handler(void)
{
100019b4:	b580      	push	{r7, lr}
100019b6:	b082      	sub	sp, #8
100019b8:	af00      	add	r7, sp, #0
	static uint8_t count=0;
	uint8_t data;
	static uint8_t crc=0;
	static uint8_t buffData[7];
	static bool isValid;
	XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0,XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION);
100019ba:	2390      	movs	r3, #144	; 0x90
100019bc:	05da      	lsls	r2, r3, #23
100019be:	2380      	movs	r3, #128	; 0x80
100019c0:	01db      	lsls	r3, r3, #7
100019c2:	1c10      	adds	r0, r2, #0
100019c4:	1c19      	adds	r1, r3, #0
100019c6:	f7ff fe93 	bl	100016f0 <XMC_UART_CH_ClearStatusFlag>
	data = XMC_UART_CH_GetReceivedData(XMC_USIC0_CH0);
100019ca:	2390      	movs	r3, #144	; 0x90
100019cc:	05db      	lsls	r3, r3, #23
100019ce:	1c18      	adds	r0, r3, #0
100019d0:	f004 f8d2 	bl	10005b78 <XMC_UART_CH_GetReceivedData>
100019d4:	1c03      	adds	r3, r0, #0
100019d6:	b2da      	uxtb	r2, r3
100019d8:	1dfb      	adds	r3, r7, #7
100019da:	701a      	strb	r2, [r3, #0]

	switch(state)
100019dc:	4b3d      	ldr	r3, [pc, #244]	; (10001ad4 <IRQ18_Handler+0x120>)
100019de:	781b      	ldrb	r3, [r3, #0]
100019e0:	2b04      	cmp	r3, #4
100019e2:	d900      	bls.n	100019e6 <IRQ18_Handler+0x32>
100019e4:	e071      	b.n	10001aca <IRQ18_Handler+0x116>
100019e6:	009a      	lsls	r2, r3, #2
100019e8:	4b3b      	ldr	r3, [pc, #236]	; (10001ad8 <IRQ18_Handler+0x124>)
100019ea:	18d3      	adds	r3, r2, r3
100019ec:	681b      	ldr	r3, [r3, #0]
100019ee:	469f      	mov	pc, r3
	{
		case ESP_SOF	:
			if(data == 0x04)
100019f0:	1dfb      	adds	r3, r7, #7
100019f2:	781b      	ldrb	r3, [r3, #0]
100019f4:	2b04      	cmp	r3, #4
100019f6:	d106      	bne.n	10001a06 <IRQ18_Handler+0x52>
			{
				isValid = false;
100019f8:	4b38      	ldr	r3, [pc, #224]	; (10001adc <IRQ18_Handler+0x128>)
100019fa:	2200      	movs	r2, #0
100019fc:	701a      	strb	r2, [r3, #0]
				state = ESP_LENGTH;
100019fe:	4b35      	ldr	r3, [pc, #212]	; (10001ad4 <IRQ18_Handler+0x120>)
10001a00:	2201      	movs	r2, #1
10001a02:	701a      	strb	r2, [r3, #0]
			}
			break;
10001a04:	e062      	b.n	10001acc <IRQ18_Handler+0x118>
10001a06:	e061      	b.n	10001acc <IRQ18_Handler+0x118>
		case ESP_LENGTH	:
			length = data;
10001a08:	1dfb      	adds	r3, r7, #7
10001a0a:	781a      	ldrb	r2, [r3, #0]
10001a0c:	4b34      	ldr	r3, [pc, #208]	; (10001ae0 <IRQ18_Handler+0x12c>)
10001a0e:	701a      	strb	r2, [r3, #0]
			count = 0;
10001a10:	4b34      	ldr	r3, [pc, #208]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a12:	2200      	movs	r2, #0
10001a14:	701a      	strb	r2, [r3, #0]
			crc = 0;
10001a16:	4b34      	ldr	r3, [pc, #208]	; (10001ae8 <IRQ18_Handler+0x134>)
10001a18:	2200      	movs	r2, #0
10001a1a:	701a      	strb	r2, [r3, #0]
			state = ESP_DATA;
10001a1c:	4b2d      	ldr	r3, [pc, #180]	; (10001ad4 <IRQ18_Handler+0x120>)
10001a1e:	2202      	movs	r2, #2
10001a20:	701a      	strb	r2, [r3, #0]
			break;
10001a22:	e053      	b.n	10001acc <IRQ18_Handler+0x118>
		case ESP_DATA :
			ESP32_SendStream((char*)&data, 1);
10001a24:	1dfb      	adds	r3, r7, #7
10001a26:	1c18      	adds	r0, r3, #0
10001a28:	2101      	movs	r1, #1
10001a2a:	f002 fca1 	bl	10004370 <ESP32_SendStream>
			if(count == length-1)
10001a2e:	4b2d      	ldr	r3, [pc, #180]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a30:	781b      	ldrb	r3, [r3, #0]
10001a32:	1c1a      	adds	r2, r3, #0
10001a34:	4b2a      	ldr	r3, [pc, #168]	; (10001ae0 <IRQ18_Handler+0x12c>)
10001a36:	781b      	ldrb	r3, [r3, #0]
10001a38:	3b01      	subs	r3, #1
10001a3a:	429a      	cmp	r2, r3
10001a3c:	d116      	bne.n	10001a6c <IRQ18_Handler+0xb8>
			{
				buffData[count] = data;
10001a3e:	4b29      	ldr	r3, [pc, #164]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a40:	781b      	ldrb	r3, [r3, #0]
10001a42:	1c1a      	adds	r2, r3, #0
10001a44:	1dfb      	adds	r3, r7, #7
10001a46:	7819      	ldrb	r1, [r3, #0]
10001a48:	4b28      	ldr	r3, [pc, #160]	; (10001aec <IRQ18_Handler+0x138>)
10001a4a:	5499      	strb	r1, [r3, r2]
				crc = ESP32_CRC8_maxim(buffData, length);
10001a4c:	4b24      	ldr	r3, [pc, #144]	; (10001ae0 <IRQ18_Handler+0x12c>)
10001a4e:	781b      	ldrb	r3, [r3, #0]
10001a50:	1c1a      	adds	r2, r3, #0
10001a52:	4b26      	ldr	r3, [pc, #152]	; (10001aec <IRQ18_Handler+0x138>)
10001a54:	1c18      	adds	r0, r3, #0
10001a56:	1c11      	adds	r1, r2, #0
10001a58:	f003 f852 	bl	10004b00 <ESP32_CRC8_maxim>
10001a5c:	1c03      	adds	r3, r0, #0
10001a5e:	1c1a      	adds	r2, r3, #0
10001a60:	4b21      	ldr	r3, [pc, #132]	; (10001ae8 <IRQ18_Handler+0x134>)
10001a62:	701a      	strb	r2, [r3, #0]
				state = ESP_CRC8;
10001a64:	4b1b      	ldr	r3, [pc, #108]	; (10001ad4 <IRQ18_Handler+0x120>)
10001a66:	2203      	movs	r2, #3
10001a68:	701a      	strb	r2, [r3, #0]
			else
			{
				buffData[count] = data;
				count++;
			}
			break;
10001a6a:	e02f      	b.n	10001acc <IRQ18_Handler+0x118>
				crc = ESP32_CRC8_maxim(buffData, length);
				state = ESP_CRC8;
			}
			else
			{
				buffData[count] = data;
10001a6c:	4b1d      	ldr	r3, [pc, #116]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a6e:	781b      	ldrb	r3, [r3, #0]
10001a70:	1c1a      	adds	r2, r3, #0
10001a72:	1dfb      	adds	r3, r7, #7
10001a74:	7819      	ldrb	r1, [r3, #0]
10001a76:	4b1d      	ldr	r3, [pc, #116]	; (10001aec <IRQ18_Handler+0x138>)
10001a78:	5499      	strb	r1, [r3, r2]
				count++;
10001a7a:	4b1a      	ldr	r3, [pc, #104]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a7c:	781b      	ldrb	r3, [r3, #0]
10001a7e:	3301      	adds	r3, #1
10001a80:	b2da      	uxtb	r2, r3
10001a82:	4b18      	ldr	r3, [pc, #96]	; (10001ae4 <IRQ18_Handler+0x130>)
10001a84:	701a      	strb	r2, [r3, #0]
			}
			break;
10001a86:	e021      	b.n	10001acc <IRQ18_Handler+0x118>
		case ESP_CRC8 :
			if(data == crc)
10001a88:	1dfb      	adds	r3, r7, #7
10001a8a:	781a      	ldrb	r2, [r3, #0]
10001a8c:	4b16      	ldr	r3, [pc, #88]	; (10001ae8 <IRQ18_Handler+0x134>)
10001a8e:	781b      	ldrb	r3, [r3, #0]
10001a90:	429a      	cmp	r2, r3
10001a92:	d102      	bne.n	10001a9a <IRQ18_Handler+0xe6>
//				date_data.month		= buffData[2];
//				date_data.date		= buffData[3];
//				time_data.hour		= buffData[4];
//				time_data.minute	= buffData[5];
//				time_data.second	= buffData[6];
				isValid				= true;
10001a94:	4b11      	ldr	r3, [pc, #68]	; (10001adc <IRQ18_Handler+0x128>)
10001a96:	2201      	movs	r2, #1
10001a98:	701a      	strb	r2, [r3, #0]
			}
			state = ESP_EOF;
10001a9a:	4b0e      	ldr	r3, [pc, #56]	; (10001ad4 <IRQ18_Handler+0x120>)
10001a9c:	2204      	movs	r2, #4
10001a9e:	701a      	strb	r2, [r3, #0]
			break;
10001aa0:	e014      	b.n	10001acc <IRQ18_Handler+0x118>
		case ESP_EOF :
			if(data == 0x0B)
10001aa2:	1dfb      	adds	r3, r7, #7
10001aa4:	781b      	ldrb	r3, [r3, #0]
10001aa6:	2b0b      	cmp	r3, #11
10001aa8:	d10b      	bne.n	10001ac2 <IRQ18_Handler+0x10e>
			{
				if(isValid)
10001aaa:	4b0c      	ldr	r3, [pc, #48]	; (10001adc <IRQ18_Handler+0x128>)
10001aac:	781b      	ldrb	r3, [r3, #0]
10001aae:	2b00      	cmp	r3, #0
10001ab0:	d007      	beq.n	10001ac2 <IRQ18_Handler+0x10e>
				{
					XMC_GPIO_ToggleOutput(P2_13);
10001ab2:	4b0f      	ldr	r3, [pc, #60]	; (10001af0 <IRQ18_Handler+0x13c>)
10001ab4:	1c18      	adds	r0, r3, #0
10001ab6:	210d      	movs	r1, #13
10001ab8:	f7ff fe08 	bl	100016cc <XMC_GPIO_ToggleOutput>
					isValid = false;
10001abc:	4b07      	ldr	r3, [pc, #28]	; (10001adc <IRQ18_Handler+0x128>)
10001abe:	2200      	movs	r2, #0
10001ac0:	701a      	strb	r2, [r3, #0]
				}
			}
			state= ESP_SOF;
10001ac2:	4b04      	ldr	r3, [pc, #16]	; (10001ad4 <IRQ18_Handler+0x120>)
10001ac4:	2200      	movs	r2, #0
10001ac6:	701a      	strb	r2, [r3, #0]
			break;
10001ac8:	e000      	b.n	10001acc <IRQ18_Handler+0x118>
		default			: break;
10001aca:	46c0      	nop			; (mov r8, r8)
	}
}
10001acc:	46bd      	mov	sp, r7
10001ace:	b002      	add	sp, #8
10001ad0:	bd80      	pop	{r7, pc}
10001ad2:	46c0      	nop			; (mov r8, r8)
10001ad4:	2000077e 	.word	0x2000077e
10001ad8:	1000cd80 	.word	0x1000cd80
10001adc:	2000077f 	.word	0x2000077f
10001ae0:	20000780 	.word	0x20000780
10001ae4:	20000781 	.word	0x20000781
10001ae8:	20000782 	.word	0x20000782
10001aec:	20000784 	.word	0x20000784
10001af0:	40040200 	.word	0x40040200

10001af4 <IRQ7_Handler>:

void pcsCAN_intrpt_handler(void)
{
10001af4:	b590      	push	{r4, r7, lr}
10001af6:	b083      	sub	sp, #12
10001af8:	af00      	add	r7, sp, #0
	// takes 30 us
	XMC_CAN_MO_Receive(&msgObjFromPCS);
10001afa:	4bd1      	ldr	r3, [pc, #836]	; (10001e40 <IRQ7_Handler+0x34c>)
10001afc:	1c18      	adds	r0, r3, #0
10001afe:	f003 fddd 	bl	100056bc <XMC_CAN_MO_Receive>
	switch(msgObjFromPCS.can_identifier)
10001b02:	4bcf      	ldr	r3, [pc, #828]	; (10001e40 <IRQ7_Handler+0x34c>)
10001b04:	685b      	ldr	r3, [r3, #4]
10001b06:	00db      	lsls	r3, r3, #3
10001b08:	08db      	lsrs	r3, r3, #3
10001b0a:	4ace      	ldr	r2, [pc, #824]	; (10001e44 <IRQ7_Handler+0x350>)
10001b0c:	4694      	mov	ip, r2
10001b0e:	4463      	add	r3, ip
10001b10:	2b08      	cmp	r3, #8
10001b12:	d901      	bls.n	10001b18 <IRQ7_Handler+0x24>
10001b14:	f000 fb84 	bl	10002220 <IRQ7_Handler+0x72c>
10001b18:	009a      	lsls	r2, r3, #2
10001b1a:	4bcb      	ldr	r3, [pc, #812]	; (10001e48 <IRQ7_Handler+0x354>)
10001b1c:	18d3      	adds	r3, r2, r3
10001b1e:	681b      	ldr	r3, [r3, #0]
10001b20:	469f      	mov	pc, r3
	{
		case 0x200 : // PCS System Properties
			pcsSystemStatus = PCS_GetPCSStatus(&msgObjFromPCS);
10001b22:	4cca      	ldr	r4, [pc, #808]	; (10001e4c <IRQ7_Handler+0x358>)
10001b24:	1c3a      	adds	r2, r7, #0
10001b26:	4bc6      	ldr	r3, [pc, #792]	; (10001e40 <IRQ7_Handler+0x34c>)
10001b28:	1c10      	adds	r0, r2, #0
10001b2a:	1c19      	adds	r1, r3, #0
10001b2c:	f001 fc3c 	bl	100033a8 <PCS_GetPCSStatus>
10001b30:	1c3b      	adds	r3, r7, #0
10001b32:	1c21      	adds	r1, r4, #0
10001b34:	1c1a      	adds	r2, r3, #0
10001b36:	2305      	movs	r3, #5
10001b38:	1c08      	adds	r0, r1, #0
10001b3a:	1c11      	adds	r1, r2, #0
10001b3c:	1c1a      	adds	r2, r3, #0
10001b3e:	f006 ffef 	bl	10008b20 <memcpy>

			data_group.pcs_system = 0x00;
10001b42:	4bc3      	ldr	r3, [pc, #780]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b44:	2200      	movs	r2, #0
10001b46:	701a      	strb	r2, [r3, #0]
			if(pcsSystemStatus.pcs_system_status == PCS_STAT_INITIAL)		{data_group.pcs_system = 0x01;}
10001b48:	4bc0      	ldr	r3, [pc, #768]	; (10001e4c <IRQ7_Handler+0x358>)
10001b4a:	781b      	ldrb	r3, [r3, #0]
10001b4c:	2b00      	cmp	r3, #0
10001b4e:	d103      	bne.n	10001b58 <IRQ7_Handler+0x64>
10001b50:	4bbf      	ldr	r3, [pc, #764]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b52:	2201      	movs	r2, #1
10001b54:	701a      	strb	r2, [r3, #0]
10001b56:	e00e      	b.n	10001b76 <IRQ7_Handler+0x82>
			else if(pcsSystemStatus.pcs_system_status == PCS_STAT_STANDBY)	{data_group.pcs_system = 0x02;}
10001b58:	4bbc      	ldr	r3, [pc, #752]	; (10001e4c <IRQ7_Handler+0x358>)
10001b5a:	781b      	ldrb	r3, [r3, #0]
10001b5c:	2b04      	cmp	r3, #4
10001b5e:	d103      	bne.n	10001b68 <IRQ7_Handler+0x74>
10001b60:	4bbb      	ldr	r3, [pc, #748]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b62:	2202      	movs	r2, #2
10001b64:	701a      	strb	r2, [r3, #0]
10001b66:	e006      	b.n	10001b76 <IRQ7_Handler+0x82>
			else if(pcsSystemStatus.pcs_system_status == PCS_STAT_RUNNING)	{data_group.pcs_system = 0x03;}
10001b68:	4bb8      	ldr	r3, [pc, #736]	; (10001e4c <IRQ7_Handler+0x358>)
10001b6a:	781b      	ldrb	r3, [r3, #0]
10001b6c:	2b06      	cmp	r3, #6
10001b6e:	d102      	bne.n	10001b76 <IRQ7_Handler+0x82>
10001b70:	4bb7      	ldr	r3, [pc, #732]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b72:	2203      	movs	r2, #3
10001b74:	701a      	strb	r2, [r3, #0]

			if(pcsSystemStatus.pcs_precharge_IsComplete) {data_group.pcs_system |= 0x04;}
10001b76:	4bb5      	ldr	r3, [pc, #724]	; (10001e4c <IRQ7_Handler+0x358>)
10001b78:	785b      	ldrb	r3, [r3, #1]
10001b7a:	2b00      	cmp	r3, #0
10001b7c:	d007      	beq.n	10001b8e <IRQ7_Handler+0x9a>
10001b7e:	4bb4      	ldr	r3, [pc, #720]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b80:	781b      	ldrb	r3, [r3, #0]
10001b82:	2204      	movs	r2, #4
10001b84:	4313      	orrs	r3, r2
10001b86:	b2da      	uxtb	r2, r3
10001b88:	4bb1      	ldr	r3, [pc, #708]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b8a:	701a      	strb	r2, [r3, #0]
10001b8c:	e003      	b.n	10001b96 <IRQ7_Handler+0xa2>
			else {data_group.pcs_system |= 0x00;}
10001b8e:	4bb0      	ldr	r3, [pc, #704]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b90:	781a      	ldrb	r2, [r3, #0]
10001b92:	4baf      	ldr	r3, [pc, #700]	; (10001e50 <IRQ7_Handler+0x35c>)
10001b94:	701a      	strb	r2, [r3, #0]

				 if (pcsSystemStatus.pcs_system_warning == PCS_WARN_NORMAL) 	{data_group.pcs_system |= (0x00 << 3);}
10001b96:	4bad      	ldr	r3, [pc, #692]	; (10001e4c <IRQ7_Handler+0x358>)
10001b98:	789b      	ldrb	r3, [r3, #2]
10001b9a:	2b00      	cmp	r3, #0
10001b9c:	d104      	bne.n	10001ba8 <IRQ7_Handler+0xb4>
10001b9e:	4bac      	ldr	r3, [pc, #688]	; (10001e50 <IRQ7_Handler+0x35c>)
10001ba0:	781a      	ldrb	r2, [r3, #0]
10001ba2:	4bab      	ldr	r3, [pc, #684]	; (10001e50 <IRQ7_Handler+0x35c>)
10001ba4:	701a      	strb	r2, [r3, #0]
10001ba6:	e053      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_PCS_OT) 	{data_group.pcs_system |= (0x01 << 3);}
10001ba8:	4ba8      	ldr	r3, [pc, #672]	; (10001e4c <IRQ7_Handler+0x358>)
10001baa:	789b      	ldrb	r3, [r3, #2]
10001bac:	2b06      	cmp	r3, #6
10001bae:	d107      	bne.n	10001bc0 <IRQ7_Handler+0xcc>
10001bb0:	4ba7      	ldr	r3, [pc, #668]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bb2:	781b      	ldrb	r3, [r3, #0]
10001bb4:	2208      	movs	r2, #8
10001bb6:	4313      	orrs	r3, r2
10001bb8:	b2da      	uxtb	r2, r3
10001bba:	4ba5      	ldr	r3, [pc, #660]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bbc:	701a      	strb	r2, [r3, #0]
10001bbe:	e047      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVCHG) 	{data_group.pcs_system |= (0x02 << 3);}
10001bc0:	4ba2      	ldr	r3, [pc, #648]	; (10001e4c <IRQ7_Handler+0x358>)
10001bc2:	789b      	ldrb	r3, [r3, #2]
10001bc4:	2b01      	cmp	r3, #1
10001bc6:	d107      	bne.n	10001bd8 <IRQ7_Handler+0xe4>
10001bc8:	4ba1      	ldr	r3, [pc, #644]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bca:	781b      	ldrb	r3, [r3, #0]
10001bcc:	2210      	movs	r2, #16
10001bce:	4313      	orrs	r3, r2
10001bd0:	b2da      	uxtb	r2, r3
10001bd2:	4b9f      	ldr	r3, [pc, #636]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bd4:	701a      	strb	r2, [r3, #0]
10001bd6:	e03b      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_CHGSUP) {data_group.pcs_system |= (0x03 << 3);}
10001bd8:	4b9c      	ldr	r3, [pc, #624]	; (10001e4c <IRQ7_Handler+0x358>)
10001bda:	789b      	ldrb	r3, [r3, #2]
10001bdc:	2b02      	cmp	r3, #2
10001bde:	d107      	bne.n	10001bf0 <IRQ7_Handler+0xfc>
10001be0:	4b9b      	ldr	r3, [pc, #620]	; (10001e50 <IRQ7_Handler+0x35c>)
10001be2:	781b      	ldrb	r3, [r3, #0]
10001be4:	2218      	movs	r2, #24
10001be6:	4313      	orrs	r3, r2
10001be8:	b2da      	uxtb	r2, r3
10001bea:	4b99      	ldr	r3, [pc, #612]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bec:	701a      	strb	r2, [r3, #0]
10001bee:	e02f      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_DSGSUP) {data_group.pcs_system |= (0x04 << 3);}
10001bf0:	4b96      	ldr	r3, [pc, #600]	; (10001e4c <IRQ7_Handler+0x358>)
10001bf2:	789b      	ldrb	r3, [r3, #2]
10001bf4:	2b03      	cmp	r3, #3
10001bf6:	d107      	bne.n	10001c08 <IRQ7_Handler+0x114>
10001bf8:	4b95      	ldr	r3, [pc, #596]	; (10001e50 <IRQ7_Handler+0x35c>)
10001bfa:	781b      	ldrb	r3, [r3, #0]
10001bfc:	2220      	movs	r2, #32
10001bfe:	4313      	orrs	r3, r2
10001c00:	b2da      	uxtb	r2, r3
10001c02:	4b93      	ldr	r3, [pc, #588]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c04:	701a      	strb	r2, [r3, #0]
10001c06:	e023      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVDSG)  {data_group.pcs_system |= (0x05 << 3);}
10001c08:	4b90      	ldr	r3, [pc, #576]	; (10001e4c <IRQ7_Handler+0x358>)
10001c0a:	789b      	ldrb	r3, [r3, #2]
10001c0c:	2b04      	cmp	r3, #4
10001c0e:	d107      	bne.n	10001c20 <IRQ7_Handler+0x12c>
10001c10:	4b8f      	ldr	r3, [pc, #572]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c12:	781b      	ldrb	r3, [r3, #0]
10001c14:	2228      	movs	r2, #40	; 0x28
10001c16:	4313      	orrs	r3, r2
10001c18:	b2da      	uxtb	r2, r3
10001c1a:	4b8d      	ldr	r3, [pc, #564]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c1c:	701a      	strb	r2, [r3, #0]
10001c1e:	e017      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_BAT_OVDSG2) {data_group.pcs_system |= (0x06 << 3);}
10001c20:	4b8a      	ldr	r3, [pc, #552]	; (10001e4c <IRQ7_Handler+0x358>)
10001c22:	789b      	ldrb	r3, [r3, #2]
10001c24:	2b05      	cmp	r3, #5
10001c26:	d107      	bne.n	10001c38 <IRQ7_Handler+0x144>
10001c28:	4b89      	ldr	r3, [pc, #548]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c2a:	781b      	ldrb	r3, [r3, #0]
10001c2c:	2230      	movs	r2, #48	; 0x30
10001c2e:	4313      	orrs	r3, r2
10001c30:	b2da      	uxtb	r2, r3
10001c32:	4b87      	ldr	r3, [pc, #540]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c34:	701a      	strb	r2, [r3, #0]
10001c36:	e00b      	b.n	10001c50 <IRQ7_Handler+0x15c>
			else if (pcsSystemStatus.pcs_system_warning == PCS_WARN_COMM_ERR)	{data_group.pcs_system |= (0x07 << 3);}
10001c38:	4b84      	ldr	r3, [pc, #528]	; (10001e4c <IRQ7_Handler+0x358>)
10001c3a:	789b      	ldrb	r3, [r3, #2]
10001c3c:	2b07      	cmp	r3, #7
10001c3e:	d107      	bne.n	10001c50 <IRQ7_Handler+0x15c>
10001c40:	4b83      	ldr	r3, [pc, #524]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c42:	781b      	ldrb	r3, [r3, #0]
10001c44:	2238      	movs	r2, #56	; 0x38
10001c46:	4313      	orrs	r3, r2
10001c48:	b2da      	uxtb	r2, r3
10001c4a:	4b81      	ldr	r3, [pc, #516]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c4c:	701a      	strb	r2, [r3, #0]
			break;
10001c4e:	e2e8      	b.n	10002222 <IRQ7_Handler+0x72e>
10001c50:	e2e7      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x201 : // DC Grid Converter Properties
			pcsDCgridStatus = PCS_GetDCGridStatus(&msgObjFromPCS);
10001c52:	4b7b      	ldr	r3, [pc, #492]	; (10001e40 <IRQ7_Handler+0x34c>)
10001c54:	1c18      	adds	r0, r3, #0
10001c56:	f001 fc73 	bl	10003540 <PCS_GetDCGridStatus>
10001c5a:	1c03      	adds	r3, r0, #0
10001c5c:	1c1a      	adds	r2, r3, #0
10001c5e:	4b7d      	ldr	r3, [pc, #500]	; (10001e54 <IRQ7_Handler+0x360>)
10001c60:	1c11      	adds	r1, r2, #0
10001c62:	7019      	strb	r1, [r3, #0]
10001c64:	0411      	lsls	r1, r2, #16
10001c66:	0e09      	lsrs	r1, r1, #24
10001c68:	7059      	strb	r1, [r3, #1]
10001c6a:	0211      	lsls	r1, r2, #8
10001c6c:	0e09      	lsrs	r1, r1, #24
10001c6e:	7099      	strb	r1, [r3, #2]
10001c70:	0e12      	lsrs	r2, r2, #24
10001c72:	70da      	strb	r2, [r3, #3]

			data_group.dcgrid_system = 0x00;
10001c74:	4b76      	ldr	r3, [pc, #472]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c76:	2200      	movs	r2, #0
10001c78:	705a      	strb	r2, [r3, #1]
				 if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_NOT_RUNNING) 	{data_group.dcgrid_system |= 0x01;}
10001c7a:	4b76      	ldr	r3, [pc, #472]	; (10001e54 <IRQ7_Handler+0x360>)
10001c7c:	781b      	ldrb	r3, [r3, #0]
10001c7e:	2b00      	cmp	r3, #0
10001c80:	d107      	bne.n	10001c92 <IRQ7_Handler+0x19e>
10001c82:	4b73      	ldr	r3, [pc, #460]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c84:	785b      	ldrb	r3, [r3, #1]
10001c86:	2201      	movs	r2, #1
10001c88:	4313      	orrs	r3, r2
10001c8a:	b2da      	uxtb	r2, r3
10001c8c:	4b70      	ldr	r3, [pc, #448]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c8e:	705a      	strb	r2, [r3, #1]
10001c90:	e016      	b.n	10001cc0 <IRQ7_Handler+0x1cc>
			else if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_CHG) 			{data_group.dcgrid_system |= 0x02;}
10001c92:	4b70      	ldr	r3, [pc, #448]	; (10001e54 <IRQ7_Handler+0x360>)
10001c94:	781b      	ldrb	r3, [r3, #0]
10001c96:	2b04      	cmp	r3, #4
10001c98:	d107      	bne.n	10001caa <IRQ7_Handler+0x1b6>
10001c9a:	4b6d      	ldr	r3, [pc, #436]	; (10001e50 <IRQ7_Handler+0x35c>)
10001c9c:	785b      	ldrb	r3, [r3, #1]
10001c9e:	2202      	movs	r2, #2
10001ca0:	4313      	orrs	r3, r2
10001ca2:	b2da      	uxtb	r2, r3
10001ca4:	4b6a      	ldr	r3, [pc, #424]	; (10001e50 <IRQ7_Handler+0x35c>)
10001ca6:	705a      	strb	r2, [r3, #1]
10001ca8:	e00a      	b.n	10001cc0 <IRQ7_Handler+0x1cc>
			else if(pcsDCgridStatus.dcgrid_system_status == GRID_STAT_DSG) 			{data_group.dcgrid_system |= 0x03;}
10001caa:	4b6a      	ldr	r3, [pc, #424]	; (10001e54 <IRQ7_Handler+0x360>)
10001cac:	781b      	ldrb	r3, [r3, #0]
10001cae:	2b08      	cmp	r3, #8
10001cb0:	d106      	bne.n	10001cc0 <IRQ7_Handler+0x1cc>
10001cb2:	4b67      	ldr	r3, [pc, #412]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cb4:	785b      	ldrb	r3, [r3, #1]
10001cb6:	2203      	movs	r2, #3
10001cb8:	4313      	orrs	r3, r2
10001cba:	b2da      	uxtb	r2, r3
10001cbc:	4b64      	ldr	r3, [pc, #400]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cbe:	705a      	strb	r2, [r3, #1]

				 if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_NORMAL)	{data_group.dcgrid_system |= (0x00 << 2);}
10001cc0:	4b64      	ldr	r3, [pc, #400]	; (10001e54 <IRQ7_Handler+0x360>)
10001cc2:	785b      	ldrb	r3, [r3, #1]
10001cc4:	2b00      	cmp	r3, #0
10001cc6:	d104      	bne.n	10001cd2 <IRQ7_Handler+0x1de>
10001cc8:	4b61      	ldr	r3, [pc, #388]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cca:	785a      	ldrb	r2, [r3, #1]
10001ccc:	4b60      	ldr	r3, [pc, #384]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cce:	705a      	strb	r2, [r3, #1]
10001cd0:	e017      	b.n	10001d02 <IRQ7_Handler+0x20e>
			else if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_OV)		{data_group.dcgrid_system |= (0x01 << 2);}
10001cd2:	4b60      	ldr	r3, [pc, #384]	; (10001e54 <IRQ7_Handler+0x360>)
10001cd4:	785b      	ldrb	r3, [r3, #1]
10001cd6:	2b01      	cmp	r3, #1
10001cd8:	d107      	bne.n	10001cea <IRQ7_Handler+0x1f6>
10001cda:	4b5d      	ldr	r3, [pc, #372]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cdc:	785b      	ldrb	r3, [r3, #1]
10001cde:	2204      	movs	r2, #4
10001ce0:	4313      	orrs	r3, r2
10001ce2:	b2da      	uxtb	r2, r3
10001ce4:	4b5a      	ldr	r3, [pc, #360]	; (10001e50 <IRQ7_Handler+0x35c>)
10001ce6:	705a      	strb	r2, [r3, #1]
10001ce8:	e00b      	b.n	10001d02 <IRQ7_Handler+0x20e>
			else if(pcsDCgridStatus.dcgrid_system_warning == GRID_WARN_OC)		{data_group.dcgrid_system |= (0x02 << 2);}
10001cea:	4b5a      	ldr	r3, [pc, #360]	; (10001e54 <IRQ7_Handler+0x360>)
10001cec:	785b      	ldrb	r3, [r3, #1]
10001cee:	2b02      	cmp	r3, #2
10001cf0:	d107      	bne.n	10001d02 <IRQ7_Handler+0x20e>
10001cf2:	4b57      	ldr	r3, [pc, #348]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cf4:	785b      	ldrb	r3, [r3, #1]
10001cf6:	2208      	movs	r2, #8
10001cf8:	4313      	orrs	r3, r2
10001cfa:	b2da      	uxtb	r2, r3
10001cfc:	4b54      	ldr	r3, [pc, #336]	; (10001e50 <IRQ7_Handler+0x35c>)
10001cfe:	705a      	strb	r2, [r3, #1]
			break;
10001d00:	e28f      	b.n	10002222 <IRQ7_Handler+0x72e>
10001d02:	e28e      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x202 : // AC Inverter Properties
			pcsACinvStatus = PCS_GetACInvStatus(&msgObjFromPCS);
10001d04:	4b4e      	ldr	r3, [pc, #312]	; (10001e40 <IRQ7_Handler+0x34c>)
10001d06:	1c18      	adds	r0, r3, #0
10001d08:	f001 fca6 	bl	10003658 <PCS_GetACInvStatus>
10001d0c:	1c03      	adds	r3, r0, #0
10001d0e:	1c1a      	adds	r2, r3, #0
10001d10:	4b51      	ldr	r3, [pc, #324]	; (10001e58 <IRQ7_Handler+0x364>)
10001d12:	1c11      	adds	r1, r2, #0
10001d14:	7019      	strb	r1, [r3, #0]
10001d16:	0411      	lsls	r1, r2, #16
10001d18:	0e09      	lsrs	r1, r1, #24
10001d1a:	7059      	strb	r1, [r3, #1]
10001d1c:	0211      	lsls	r1, r2, #8
10001d1e:	0e09      	lsrs	r1, r1, #24
10001d20:	7099      	strb	r1, [r3, #2]
10001d22:	0e12      	lsrs	r2, r2, #24
10001d24:	70da      	strb	r2, [r3, #3]

			data_group.inv_system = 0x00;
10001d26:	4b4a      	ldr	r3, [pc, #296]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d28:	2200      	movs	r2, #0
10001d2a:	709a      	strb	r2, [r3, #2]
				 if(pcsACinvStatus.acinv_system_status == INV_STAT_NOT_RUNNING) {data_group.inv_system |= 0x01;}
10001d2c:	4b4a      	ldr	r3, [pc, #296]	; (10001e58 <IRQ7_Handler+0x364>)
10001d2e:	781b      	ldrb	r3, [r3, #0]
10001d30:	2b00      	cmp	r3, #0
10001d32:	d107      	bne.n	10001d44 <IRQ7_Handler+0x250>
10001d34:	4b46      	ldr	r3, [pc, #280]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d36:	789b      	ldrb	r3, [r3, #2]
10001d38:	2201      	movs	r2, #1
10001d3a:	4313      	orrs	r3, r2
10001d3c:	b2da      	uxtb	r2, r3
10001d3e:	4b44      	ldr	r3, [pc, #272]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d40:	709a      	strb	r2, [r3, #2]
10001d42:	e016      	b.n	10001d72 <IRQ7_Handler+0x27e>
			else if(pcsACinvStatus.acinv_system_status == INV_STAT_RUNNING) 	{data_group.inv_system |= 0x02;}
10001d44:	4b44      	ldr	r3, [pc, #272]	; (10001e58 <IRQ7_Handler+0x364>)
10001d46:	781b      	ldrb	r3, [r3, #0]
10001d48:	2b0e      	cmp	r3, #14
10001d4a:	d107      	bne.n	10001d5c <IRQ7_Handler+0x268>
10001d4c:	4b40      	ldr	r3, [pc, #256]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d4e:	789b      	ldrb	r3, [r3, #2]
10001d50:	2202      	movs	r2, #2
10001d52:	4313      	orrs	r3, r2
10001d54:	b2da      	uxtb	r2, r3
10001d56:	4b3e      	ldr	r3, [pc, #248]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d58:	709a      	strb	r2, [r3, #2]
10001d5a:	e00a      	b.n	10001d72 <IRQ7_Handler+0x27e>
			else if(pcsACinvStatus.acinv_system_status == INV_STAT_NONE) 		{data_group.inv_system |= 0x03;}
10001d5c:	4b3e      	ldr	r3, [pc, #248]	; (10001e58 <IRQ7_Handler+0x364>)
10001d5e:	781b      	ldrb	r3, [r3, #0]
10001d60:	2b04      	cmp	r3, #4
10001d62:	d106      	bne.n	10001d72 <IRQ7_Handler+0x27e>
10001d64:	4b3a      	ldr	r3, [pc, #232]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d66:	789b      	ldrb	r3, [r3, #2]
10001d68:	2203      	movs	r2, #3
10001d6a:	4313      	orrs	r3, r2
10001d6c:	b2da      	uxtb	r2, r3
10001d6e:	4b38      	ldr	r3, [pc, #224]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d70:	709a      	strb	r2, [r3, #2]

				 if(pcsACinvStatus.acinv_system_warning == INV_WARN_NORMAL)	{data_group.inv_system |= (0x00 << 2);}
10001d72:	4b39      	ldr	r3, [pc, #228]	; (10001e58 <IRQ7_Handler+0x364>)
10001d74:	785b      	ldrb	r3, [r3, #1]
10001d76:	2b00      	cmp	r3, #0
10001d78:	d104      	bne.n	10001d84 <IRQ7_Handler+0x290>
10001d7a:	4b35      	ldr	r3, [pc, #212]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d7c:	789a      	ldrb	r2, [r3, #2]
10001d7e:	4b34      	ldr	r3, [pc, #208]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d80:	709a      	strb	r2, [r3, #2]
10001d82:	e03b      	b.n	10001dfc <IRQ7_Handler+0x308>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_MCU_OV)	{data_group.inv_system |= (0x01 << 2);}
10001d84:	4b34      	ldr	r3, [pc, #208]	; (10001e58 <IRQ7_Handler+0x364>)
10001d86:	785b      	ldrb	r3, [r3, #1]
10001d88:	2b01      	cmp	r3, #1
10001d8a:	d107      	bne.n	10001d9c <IRQ7_Handler+0x2a8>
10001d8c:	4b30      	ldr	r3, [pc, #192]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d8e:	789b      	ldrb	r3, [r3, #2]
10001d90:	2204      	movs	r2, #4
10001d92:	4313      	orrs	r3, r2
10001d94:	b2da      	uxtb	r2, r3
10001d96:	4b2e      	ldr	r3, [pc, #184]	; (10001e50 <IRQ7_Handler+0x35c>)
10001d98:	709a      	strb	r2, [r3, #2]
10001d9a:	e02f      	b.n	10001dfc <IRQ7_Handler+0x308>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OT)		{data_group.inv_system |= (0x02 << 2);}
10001d9c:	4b2e      	ldr	r3, [pc, #184]	; (10001e58 <IRQ7_Handler+0x364>)
10001d9e:	785b      	ldrb	r3, [r3, #1]
10001da0:	2b02      	cmp	r3, #2
10001da2:	d107      	bne.n	10001db4 <IRQ7_Handler+0x2c0>
10001da4:	4b2a      	ldr	r3, [pc, #168]	; (10001e50 <IRQ7_Handler+0x35c>)
10001da6:	789b      	ldrb	r3, [r3, #2]
10001da8:	2208      	movs	r2, #8
10001daa:	4313      	orrs	r3, r2
10001dac:	b2da      	uxtb	r2, r3
10001dae:	4b28      	ldr	r3, [pc, #160]	; (10001e50 <IRQ7_Handler+0x35c>)
10001db0:	709a      	strb	r2, [r3, #2]
10001db2:	e023      	b.n	10001dfc <IRQ7_Handler+0x308>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OV)		{data_group.inv_system |= (0x03 << 2);}
10001db4:	4b28      	ldr	r3, [pc, #160]	; (10001e58 <IRQ7_Handler+0x364>)
10001db6:	785b      	ldrb	r3, [r3, #1]
10001db8:	2b03      	cmp	r3, #3
10001dba:	d107      	bne.n	10001dcc <IRQ7_Handler+0x2d8>
10001dbc:	4b24      	ldr	r3, [pc, #144]	; (10001e50 <IRQ7_Handler+0x35c>)
10001dbe:	789b      	ldrb	r3, [r3, #2]
10001dc0:	220c      	movs	r2, #12
10001dc2:	4313      	orrs	r3, r2
10001dc4:	b2da      	uxtb	r2, r3
10001dc6:	4b22      	ldr	r3, [pc, #136]	; (10001e50 <IRQ7_Handler+0x35c>)
10001dc8:	709a      	strb	r2, [r3, #2]
10001dca:	e017      	b.n	10001dfc <IRQ7_Handler+0x308>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_UV)		{data_group.inv_system |= (0x04 << 2);}
10001dcc:	4b22      	ldr	r3, [pc, #136]	; (10001e58 <IRQ7_Handler+0x364>)
10001dce:	785b      	ldrb	r3, [r3, #1]
10001dd0:	2b04      	cmp	r3, #4
10001dd2:	d107      	bne.n	10001de4 <IRQ7_Handler+0x2f0>
10001dd4:	4b1e      	ldr	r3, [pc, #120]	; (10001e50 <IRQ7_Handler+0x35c>)
10001dd6:	789b      	ldrb	r3, [r3, #2]
10001dd8:	2210      	movs	r2, #16
10001dda:	4313      	orrs	r3, r2
10001ddc:	b2da      	uxtb	r2, r3
10001dde:	4b1c      	ldr	r3, [pc, #112]	; (10001e50 <IRQ7_Handler+0x35c>)
10001de0:	709a      	strb	r2, [r3, #2]
10001de2:	e00b      	b.n	10001dfc <IRQ7_Handler+0x308>
			else if(pcsACinvStatus.acinv_system_warning == INV_WARN_OL)		{data_group.inv_system |= (0x05 << 2);}
10001de4:	4b1c      	ldr	r3, [pc, #112]	; (10001e58 <IRQ7_Handler+0x364>)
10001de6:	785b      	ldrb	r3, [r3, #1]
10001de8:	2b05      	cmp	r3, #5
10001dea:	d107      	bne.n	10001dfc <IRQ7_Handler+0x308>
10001dec:	4b18      	ldr	r3, [pc, #96]	; (10001e50 <IRQ7_Handler+0x35c>)
10001dee:	789b      	ldrb	r3, [r3, #2]
10001df0:	2214      	movs	r2, #20
10001df2:	4313      	orrs	r3, r2
10001df4:	b2da      	uxtb	r2, r3
10001df6:	4b16      	ldr	r3, [pc, #88]	; (10001e50 <IRQ7_Handler+0x35c>)
10001df8:	709a      	strb	r2, [r3, #2]
			break;
10001dfa:	e212      	b.n	10002222 <IRQ7_Handler+0x72e>
10001dfc:	e211      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x203 : // PV Converter Properties
			pcsPVconvStatus = PCS_GetPVConvStatus(&msgObjFromPCS);
10001dfe:	4b10      	ldr	r3, [pc, #64]	; (10001e40 <IRQ7_Handler+0x34c>)
10001e00:	1c18      	adds	r0, r3, #0
10001e02:	f001 fcd3 	bl	100037ac <PCS_GetPVConvStatus>
10001e06:	1c03      	adds	r3, r0, #0
10001e08:	1c1a      	adds	r2, r3, #0
10001e0a:	4b14      	ldr	r3, [pc, #80]	; (10001e5c <IRQ7_Handler+0x368>)
10001e0c:	1c11      	adds	r1, r2, #0
10001e0e:	7019      	strb	r1, [r3, #0]
10001e10:	0411      	lsls	r1, r2, #16
10001e12:	0e09      	lsrs	r1, r1, #24
10001e14:	7059      	strb	r1, [r3, #1]
10001e16:	0211      	lsls	r1, r2, #8
10001e18:	0e09      	lsrs	r1, r1, #24
10001e1a:	7099      	strb	r1, [r3, #2]
10001e1c:	0e12      	lsrs	r2, r2, #24
10001e1e:	70da      	strb	r2, [r3, #3]

			data_group.pvconv_system = 0x00;
10001e20:	4b0b      	ldr	r3, [pc, #44]	; (10001e50 <IRQ7_Handler+0x35c>)
10001e22:	2200      	movs	r2, #0
10001e24:	70da      	strb	r2, [r3, #3]
				 if(pcsPVconvStatus.pvconv_system_status == PV_STAT_NOT_RUNNING){data_group.pvconv_system |= 0x01;}
10001e26:	4b0d      	ldr	r3, [pc, #52]	; (10001e5c <IRQ7_Handler+0x368>)
10001e28:	781b      	ldrb	r3, [r3, #0]
10001e2a:	2b00      	cmp	r3, #0
10001e2c:	d118      	bne.n	10001e60 <IRQ7_Handler+0x36c>
10001e2e:	4b08      	ldr	r3, [pc, #32]	; (10001e50 <IRQ7_Handler+0x35c>)
10001e30:	78db      	ldrb	r3, [r3, #3]
10001e32:	2201      	movs	r2, #1
10001e34:	4313      	orrs	r3, r2
10001e36:	b2da      	uxtb	r2, r3
10001e38:	4b05      	ldr	r3, [pc, #20]	; (10001e50 <IRQ7_Handler+0x35c>)
10001e3a:	70da      	strb	r2, [r3, #3]
10001e3c:	e01b      	b.n	10001e76 <IRQ7_Handler+0x382>
10001e3e:	46c0      	nop			; (mov r8, r8)
10001e40:	20000658 	.word	0x20000658
10001e44:	fffffe00 	.word	0xfffffe00
10001e48:	1000cd94 	.word	0x1000cd94
10001e4c:	20000b48 	.word	0x20000b48
10001e50:	20000a48 	.word	0x20000a48
10001e54:	20000adc 	.word	0x20000adc
10001e58:	20000aa0 	.word	0x20000aa0
10001e5c:	20000a44 	.word	0x20000a44
			else if(pcsPVconvStatus.pvconv_system_status == PV_STAT_RUNNING) 	{data_group.pvconv_system |= 0x02;}
10001e60:	4be1      	ldr	r3, [pc, #900]	; (100021e8 <IRQ7_Handler+0x6f4>)
10001e62:	781b      	ldrb	r3, [r3, #0]
10001e64:	2b04      	cmp	r3, #4
10001e66:	d106      	bne.n	10001e76 <IRQ7_Handler+0x382>
10001e68:	4be0      	ldr	r3, [pc, #896]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e6a:	78db      	ldrb	r3, [r3, #3]
10001e6c:	2202      	movs	r2, #2
10001e6e:	4313      	orrs	r3, r2
10001e70:	b2da      	uxtb	r2, r3
10001e72:	4bde      	ldr	r3, [pc, #888]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e74:	70da      	strb	r2, [r3, #3]

				 if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_NORMAL){data_group.pvconv_system |= (0x00 << 2);}
10001e76:	4bdc      	ldr	r3, [pc, #880]	; (100021e8 <IRQ7_Handler+0x6f4>)
10001e78:	785b      	ldrb	r3, [r3, #1]
10001e7a:	2b00      	cmp	r3, #0
10001e7c:	d104      	bne.n	10001e88 <IRQ7_Handler+0x394>
10001e7e:	4bdb      	ldr	r3, [pc, #876]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e80:	78da      	ldrb	r2, [r3, #3]
10001e82:	4bda      	ldr	r3, [pc, #872]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e84:	70da      	strb	r2, [r3, #3]
10001e86:	e017      	b.n	10001eb8 <IRQ7_Handler+0x3c4>
			else if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_OV) 	{data_group.pvconv_system |= (0x01 << 2);}
10001e88:	4bd7      	ldr	r3, [pc, #860]	; (100021e8 <IRQ7_Handler+0x6f4>)
10001e8a:	785b      	ldrb	r3, [r3, #1]
10001e8c:	2b01      	cmp	r3, #1
10001e8e:	d107      	bne.n	10001ea0 <IRQ7_Handler+0x3ac>
10001e90:	4bd6      	ldr	r3, [pc, #856]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e92:	78db      	ldrb	r3, [r3, #3]
10001e94:	2204      	movs	r2, #4
10001e96:	4313      	orrs	r3, r2
10001e98:	b2da      	uxtb	r2, r3
10001e9a:	4bd4      	ldr	r3, [pc, #848]	; (100021ec <IRQ7_Handler+0x6f8>)
10001e9c:	70da      	strb	r2, [r3, #3]
10001e9e:	e00b      	b.n	10001eb8 <IRQ7_Handler+0x3c4>
			else if(pcsPVconvStatus.pvconv_system_warning == PV_WARN_OC) 	{data_group.pvconv_system |= (0x02 << 2);}
10001ea0:	4bd1      	ldr	r3, [pc, #836]	; (100021e8 <IRQ7_Handler+0x6f4>)
10001ea2:	785b      	ldrb	r3, [r3, #1]
10001ea4:	2b02      	cmp	r3, #2
10001ea6:	d107      	bne.n	10001eb8 <IRQ7_Handler+0x3c4>
10001ea8:	4bd0      	ldr	r3, [pc, #832]	; (100021ec <IRQ7_Handler+0x6f8>)
10001eaa:	78db      	ldrb	r3, [r3, #3]
10001eac:	2208      	movs	r2, #8
10001eae:	4313      	orrs	r3, r2
10001eb0:	b2da      	uxtb	r2, r3
10001eb2:	4bce      	ldr	r3, [pc, #824]	; (100021ec <IRQ7_Handler+0x6f8>)
10001eb4:	70da      	strb	r2, [r3, #3]
			break;
10001eb6:	e1b4      	b.n	10002222 <IRQ7_Handler+0x72e>
10001eb8:	e1b3      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x204 : // Battery Converter Properties
			pcsBatconvStatus = PCS_GetBatConvStatus(&msgObjFromPCS);
10001eba:	4bcd      	ldr	r3, [pc, #820]	; (100021f0 <IRQ7_Handler+0x6fc>)
10001ebc:	1c18      	adds	r0, r3, #0
10001ebe:	f001 fce7 	bl	10003890 <PCS_GetBatConvStatus>
10001ec2:	1c03      	adds	r3, r0, #0
10001ec4:	1c1a      	adds	r2, r3, #0
10001ec6:	4bcb      	ldr	r3, [pc, #812]	; (100021f4 <IRQ7_Handler+0x700>)
10001ec8:	1c11      	adds	r1, r2, #0
10001eca:	7019      	strb	r1, [r3, #0]
10001ecc:	0411      	lsls	r1, r2, #16
10001ece:	0e09      	lsrs	r1, r1, #24
10001ed0:	7059      	strb	r1, [r3, #1]
10001ed2:	0211      	lsls	r1, r2, #8
10001ed4:	0e09      	lsrs	r1, r1, #24
10001ed6:	7099      	strb	r1, [r3, #2]
10001ed8:	0e12      	lsrs	r2, r2, #24
10001eda:	70da      	strb	r2, [r3, #3]

			data_group.batconv_system = 0x00;
10001edc:	4bc3      	ldr	r3, [pc, #780]	; (100021ec <IRQ7_Handler+0x6f8>)
10001ede:	2200      	movs	r2, #0
10001ee0:	711a      	strb	r2, [r3, #4]
				 if(pcsBatconvStatus.batconv_system_status == BATCONV_STAT_NOT_RUNNING) {data_group.batconv_system |= 0x01;}
10001ee2:	4bc4      	ldr	r3, [pc, #784]	; (100021f4 <IRQ7_Handler+0x700>)
10001ee4:	781b      	ldrb	r3, [r3, #0]
10001ee6:	2b00      	cmp	r3, #0
10001ee8:	d107      	bne.n	10001efa <IRQ7_Handler+0x406>
10001eea:	4bc0      	ldr	r3, [pc, #768]	; (100021ec <IRQ7_Handler+0x6f8>)
10001eec:	791b      	ldrb	r3, [r3, #4]
10001eee:	2201      	movs	r2, #1
10001ef0:	4313      	orrs	r3, r2
10001ef2:	b2da      	uxtb	r2, r3
10001ef4:	4bbd      	ldr	r3, [pc, #756]	; (100021ec <IRQ7_Handler+0x6f8>)
10001ef6:	711a      	strb	r2, [r3, #4]
10001ef8:	e00a      	b.n	10001f10 <IRQ7_Handler+0x41c>
			else if(pcsBatconvStatus.batconv_system_status == BATCONV_STAT_RUNNING) 	{data_group.batconv_system |= 0x02;}
10001efa:	4bbe      	ldr	r3, [pc, #760]	; (100021f4 <IRQ7_Handler+0x700>)
10001efc:	781b      	ldrb	r3, [r3, #0]
10001efe:	2b04      	cmp	r3, #4
10001f00:	d106      	bne.n	10001f10 <IRQ7_Handler+0x41c>
10001f02:	4bba      	ldr	r3, [pc, #744]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f04:	791b      	ldrb	r3, [r3, #4]
10001f06:	2202      	movs	r2, #2
10001f08:	4313      	orrs	r3, r2
10001f0a:	b2da      	uxtb	r2, r3
10001f0c:	4bb7      	ldr	r3, [pc, #732]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f0e:	711a      	strb	r2, [r3, #4]

				 if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_NORMAL)  {data_group.batconv_system |= (0x00 << 2);}
10001f10:	4bb8      	ldr	r3, [pc, #736]	; (100021f4 <IRQ7_Handler+0x700>)
10001f12:	785b      	ldrb	r3, [r3, #1]
10001f14:	2b00      	cmp	r3, #0
10001f16:	d104      	bne.n	10001f22 <IRQ7_Handler+0x42e>
10001f18:	4bb4      	ldr	r3, [pc, #720]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f1a:	791a      	ldrb	r2, [r3, #4]
10001f1c:	4bb3      	ldr	r3, [pc, #716]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f1e:	711a      	strb	r2, [r3, #4]
10001f20:	e02f      	b.n	10001f82 <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_OV) 	 {data_group.batconv_system |= (0x01 << 2);}
10001f22:	4bb4      	ldr	r3, [pc, #720]	; (100021f4 <IRQ7_Handler+0x700>)
10001f24:	785b      	ldrb	r3, [r3, #1]
10001f26:	2b01      	cmp	r3, #1
10001f28:	d107      	bne.n	10001f3a <IRQ7_Handler+0x446>
10001f2a:	4bb0      	ldr	r3, [pc, #704]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f2c:	791b      	ldrb	r3, [r3, #4]
10001f2e:	2204      	movs	r2, #4
10001f30:	4313      	orrs	r3, r2
10001f32:	b2da      	uxtb	r2, r3
10001f34:	4bad      	ldr	r3, [pc, #692]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f36:	711a      	strb	r2, [r3, #4]
10001f38:	e023      	b.n	10001f82 <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_OC) 	 {data_group.batconv_system |= (0x02 << 2);}
10001f3a:	4bae      	ldr	r3, [pc, #696]	; (100021f4 <IRQ7_Handler+0x700>)
10001f3c:	785b      	ldrb	r3, [r3, #1]
10001f3e:	2b02      	cmp	r3, #2
10001f40:	d107      	bne.n	10001f52 <IRQ7_Handler+0x45e>
10001f42:	4baa      	ldr	r3, [pc, #680]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f44:	791b      	ldrb	r3, [r3, #4]
10001f46:	2208      	movs	r2, #8
10001f48:	4313      	orrs	r3, r2
10001f4a:	b2da      	uxtb	r2, r3
10001f4c:	4ba7      	ldr	r3, [pc, #668]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f4e:	711a      	strb	r2, [r3, #4]
10001f50:	e017      	b.n	10001f82 <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_DCDC_OV) {data_group.batconv_system |= (0x03 << 2);}
10001f52:	4ba8      	ldr	r3, [pc, #672]	; (100021f4 <IRQ7_Handler+0x700>)
10001f54:	785b      	ldrb	r3, [r3, #1]
10001f56:	2b03      	cmp	r3, #3
10001f58:	d107      	bne.n	10001f6a <IRQ7_Handler+0x476>
10001f5a:	4ba4      	ldr	r3, [pc, #656]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f5c:	791b      	ldrb	r3, [r3, #4]
10001f5e:	220c      	movs	r2, #12
10001f60:	4313      	orrs	r3, r2
10001f62:	b2da      	uxtb	r2, r3
10001f64:	4ba1      	ldr	r3, [pc, #644]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f66:	711a      	strb	r2, [r3, #4]
10001f68:	e00b      	b.n	10001f82 <IRQ7_Handler+0x48e>
			else if(pcsBatconvStatus.batconv_system_warning == BATCONV_WARN_DCDC_OT) {data_group.batconv_system |= (0x04 << 2);}
10001f6a:	4ba2      	ldr	r3, [pc, #648]	; (100021f4 <IRQ7_Handler+0x700>)
10001f6c:	785b      	ldrb	r3, [r3, #1]
10001f6e:	2b04      	cmp	r3, #4
10001f70:	d107      	bne.n	10001f82 <IRQ7_Handler+0x48e>
10001f72:	4b9e      	ldr	r3, [pc, #632]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f74:	791b      	ldrb	r3, [r3, #4]
10001f76:	2210      	movs	r2, #16
10001f78:	4313      	orrs	r3, r2
10001f7a:	b2da      	uxtb	r2, r3
10001f7c:	4b9b      	ldr	r3, [pc, #620]	; (100021ec <IRQ7_Handler+0x6f8>)
10001f7e:	711a      	strb	r2, [r3, #4]
			break;
10001f80:	e14f      	b.n	10002222 <IRQ7_Handler+0x72e>
10001f82:	e14e      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x205 : // Voltage Properties
			pcsVoltages = PCS_GetVoltParam(&msgObjFromPCS);
10001f84:	4c9c      	ldr	r4, [pc, #624]	; (100021f8 <IRQ7_Handler+0x704>)
10001f86:	1c3a      	adds	r2, r7, #0
10001f88:	4b99      	ldr	r3, [pc, #612]	; (100021f0 <IRQ7_Handler+0x6fc>)
10001f8a:	1c10      	adds	r0, r2, #0
10001f8c:	1c19      	adds	r1, r3, #0
10001f8e:	f001 fd1b 	bl	100039c8 <PCS_GetVoltParam>
10001f92:	1c3b      	adds	r3, r7, #0
10001f94:	1c21      	adds	r1, r4, #0
10001f96:	1c1a      	adds	r2, r3, #0
10001f98:	2308      	movs	r3, #8
10001f9a:	1c08      	adds	r0, r1, #0
10001f9c:	1c11      	adds	r1, r2, #0
10001f9e:	1c1a      	adds	r2, r3, #0
10001fa0:	f006 fdbe 	bl	10008b20 <memcpy>

			data_group.vPv_conv 	= pcsVoltages.vPV*0.1;
10001fa4:	4b94      	ldr	r3, [pc, #592]	; (100021f8 <IRQ7_Handler+0x704>)
10001fa6:	889b      	ldrh	r3, [r3, #4]
10001fa8:	1c18      	adds	r0, r3, #0
10001faa:	f006 fc1d 	bl	100087e8 <__aeabi_i2d>
10001fae:	1c03      	adds	r3, r0, #0
10001fb0:	1c0c      	adds	r4, r1, #0
10001fb2:	1c18      	adds	r0, r3, #0
10001fb4:	1c21      	adds	r1, r4, #0
10001fb6:	4a91      	ldr	r2, [pc, #580]	; (100021fc <IRQ7_Handler+0x708>)
10001fb8:	4b91      	ldr	r3, [pc, #580]	; (10002200 <IRQ7_Handler+0x70c>)
10001fba:	f005 fe01 	bl	10007bc0 <__aeabi_dmul>
10001fbe:	1c03      	adds	r3, r0, #0
10001fc0:	1c0c      	adds	r4, r1, #0
10001fc2:	1c18      	adds	r0, r3, #0
10001fc4:	1c21      	adds	r1, r4, #0
10001fc6:	f006 fcd1 	bl	1000896c <__aeabi_d2f>
10001fca:	1c02      	adds	r2, r0, #0
10001fcc:	4b87      	ldr	r3, [pc, #540]	; (100021ec <IRQ7_Handler+0x6f8>)
10001fce:	611a      	str	r2, [r3, #16]
			data_group.vDC_grid 	= pcsVoltages.vdcGrid*0.1;
10001fd0:	4b89      	ldr	r3, [pc, #548]	; (100021f8 <IRQ7_Handler+0x704>)
10001fd2:	881b      	ldrh	r3, [r3, #0]
10001fd4:	1c18      	adds	r0, r3, #0
10001fd6:	f006 fc07 	bl	100087e8 <__aeabi_i2d>
10001fda:	1c03      	adds	r3, r0, #0
10001fdc:	1c0c      	adds	r4, r1, #0
10001fde:	1c18      	adds	r0, r3, #0
10001fe0:	1c21      	adds	r1, r4, #0
10001fe2:	4a86      	ldr	r2, [pc, #536]	; (100021fc <IRQ7_Handler+0x708>)
10001fe4:	4b86      	ldr	r3, [pc, #536]	; (10002200 <IRQ7_Handler+0x70c>)
10001fe6:	f005 fdeb 	bl	10007bc0 <__aeabi_dmul>
10001fea:	1c03      	adds	r3, r0, #0
10001fec:	1c0c      	adds	r4, r1, #0
10001fee:	1c18      	adds	r0, r3, #0
10001ff0:	1c21      	adds	r1, r4, #0
10001ff2:	f006 fcbb 	bl	1000896c <__aeabi_d2f>
10001ff6:	1c02      	adds	r2, r0, #0
10001ff8:	4b7c      	ldr	r3, [pc, #496]	; (100021ec <IRQ7_Handler+0x6f8>)
10001ffa:	609a      	str	r2, [r3, #8]
			data_group.vBat_conv 	= pcsVoltages.vbat*0.1;
10001ffc:	4b7e      	ldr	r3, [pc, #504]	; (100021f8 <IRQ7_Handler+0x704>)
10001ffe:	88db      	ldrh	r3, [r3, #6]
10002000:	1c18      	adds	r0, r3, #0
10002002:	f006 fbf1 	bl	100087e8 <__aeabi_i2d>
10002006:	1c03      	adds	r3, r0, #0
10002008:	1c0c      	adds	r4, r1, #0
1000200a:	1c18      	adds	r0, r3, #0
1000200c:	1c21      	adds	r1, r4, #0
1000200e:	4a7b      	ldr	r2, [pc, #492]	; (100021fc <IRQ7_Handler+0x708>)
10002010:	4b7b      	ldr	r3, [pc, #492]	; (10002200 <IRQ7_Handler+0x70c>)
10002012:	f005 fdd5 	bl	10007bc0 <__aeabi_dmul>
10002016:	1c03      	adds	r3, r0, #0
10002018:	1c0c      	adds	r4, r1, #0
1000201a:	1c18      	adds	r0, r3, #0
1000201c:	1c21      	adds	r1, r4, #0
1000201e:	f006 fca5 	bl	1000896c <__aeabi_d2f>
10002022:	1c02      	adds	r2, r0, #0
10002024:	4b71      	ldr	r3, [pc, #452]	; (100021ec <IRQ7_Handler+0x6f8>)
10002026:	615a      	str	r2, [r3, #20]
			data_group.vAC_inv 		= pcsVoltages.vacOut*0.1;
10002028:	4b73      	ldr	r3, [pc, #460]	; (100021f8 <IRQ7_Handler+0x704>)
1000202a:	885b      	ldrh	r3, [r3, #2]
1000202c:	1c18      	adds	r0, r3, #0
1000202e:	f006 fbdb 	bl	100087e8 <__aeabi_i2d>
10002032:	1c03      	adds	r3, r0, #0
10002034:	1c0c      	adds	r4, r1, #0
10002036:	1c18      	adds	r0, r3, #0
10002038:	1c21      	adds	r1, r4, #0
1000203a:	4a70      	ldr	r2, [pc, #448]	; (100021fc <IRQ7_Handler+0x708>)
1000203c:	4b70      	ldr	r3, [pc, #448]	; (10002200 <IRQ7_Handler+0x70c>)
1000203e:	f005 fdbf 	bl	10007bc0 <__aeabi_dmul>
10002042:	1c03      	adds	r3, r0, #0
10002044:	1c0c      	adds	r4, r1, #0
10002046:	1c18      	adds	r0, r3, #0
10002048:	1c21      	adds	r1, r4, #0
1000204a:	f006 fc8f 	bl	1000896c <__aeabi_d2f>
1000204e:	1c02      	adds	r2, r0, #0
10002050:	4b66      	ldr	r3, [pc, #408]	; (100021ec <IRQ7_Handler+0x6f8>)
10002052:	60da      	str	r2, [r3, #12]
			break;
10002054:	e0e5      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x206 : // Current Properties
			pcsCurrents = PCS_GetAmpParam(&msgObjFromPCS);
10002056:	4c6b      	ldr	r4, [pc, #428]	; (10002204 <IRQ7_Handler+0x710>)
10002058:	1c3a      	adds	r2, r7, #0
1000205a:	4b65      	ldr	r3, [pc, #404]	; (100021f0 <IRQ7_Handler+0x6fc>)
1000205c:	1c10      	adds	r0, r2, #0
1000205e:	1c19      	adds	r1, r3, #0
10002060:	f001 fcfa 	bl	10003a58 <PCS_GetAmpParam>
10002064:	1c3b      	adds	r3, r7, #0
10002066:	1c21      	adds	r1, r4, #0
10002068:	1c1a      	adds	r2, r3, #0
1000206a:	2308      	movs	r3, #8
1000206c:	1c08      	adds	r0, r1, #0
1000206e:	1c11      	adds	r1, r2, #0
10002070:	1c1a      	adds	r2, r3, #0
10002072:	f006 fd55 	bl	10008b20 <memcpy>

			data_group.iPv_conv		= pcsCurrents.iPV*0.01;
10002076:	4b63      	ldr	r3, [pc, #396]	; (10002204 <IRQ7_Handler+0x710>)
10002078:	889b      	ldrh	r3, [r3, #4]
1000207a:	b21b      	sxth	r3, r3
1000207c:	1c18      	adds	r0, r3, #0
1000207e:	f006 fbb3 	bl	100087e8 <__aeabi_i2d>
10002082:	1c03      	adds	r3, r0, #0
10002084:	1c0c      	adds	r4, r1, #0
10002086:	1c18      	adds	r0, r3, #0
10002088:	1c21      	adds	r1, r4, #0
1000208a:	4a5f      	ldr	r2, [pc, #380]	; (10002208 <IRQ7_Handler+0x714>)
1000208c:	4b5f      	ldr	r3, [pc, #380]	; (1000220c <IRQ7_Handler+0x718>)
1000208e:	f005 fd97 	bl	10007bc0 <__aeabi_dmul>
10002092:	1c03      	adds	r3, r0, #0
10002094:	1c0c      	adds	r4, r1, #0
10002096:	1c18      	adds	r0, r3, #0
10002098:	1c21      	adds	r1, r4, #0
1000209a:	f006 fc67 	bl	1000896c <__aeabi_d2f>
1000209e:	1c02      	adds	r2, r0, #0
100020a0:	4b52      	ldr	r3, [pc, #328]	; (100021ec <IRQ7_Handler+0x6f8>)
100020a2:	621a      	str	r2, [r3, #32]
			data_group.iDC_grid		= pcsCurrents.idcGrid*0.001;
100020a4:	4b57      	ldr	r3, [pc, #348]	; (10002204 <IRQ7_Handler+0x710>)
100020a6:	881b      	ldrh	r3, [r3, #0]
100020a8:	b21b      	sxth	r3, r3
100020aa:	1c18      	adds	r0, r3, #0
100020ac:	f006 fb9c 	bl	100087e8 <__aeabi_i2d>
100020b0:	1c03      	adds	r3, r0, #0
100020b2:	1c0c      	adds	r4, r1, #0
100020b4:	1c18      	adds	r0, r3, #0
100020b6:	1c21      	adds	r1, r4, #0
100020b8:	4a55      	ldr	r2, [pc, #340]	; (10002210 <IRQ7_Handler+0x71c>)
100020ba:	4b56      	ldr	r3, [pc, #344]	; (10002214 <IRQ7_Handler+0x720>)
100020bc:	f005 fd80 	bl	10007bc0 <__aeabi_dmul>
100020c0:	1c03      	adds	r3, r0, #0
100020c2:	1c0c      	adds	r4, r1, #0
100020c4:	1c18      	adds	r0, r3, #0
100020c6:	1c21      	adds	r1, r4, #0
100020c8:	f006 fc50 	bl	1000896c <__aeabi_d2f>
100020cc:	1c02      	adds	r2, r0, #0
100020ce:	4b47      	ldr	r3, [pc, #284]	; (100021ec <IRQ7_Handler+0x6f8>)
100020d0:	619a      	str	r2, [r3, #24]
			data_group.iBat_conv	= pcsCurrents.ibat*0.01;
100020d2:	4b4c      	ldr	r3, [pc, #304]	; (10002204 <IRQ7_Handler+0x710>)
100020d4:	88db      	ldrh	r3, [r3, #6]
100020d6:	b21b      	sxth	r3, r3
100020d8:	1c18      	adds	r0, r3, #0
100020da:	f006 fb85 	bl	100087e8 <__aeabi_i2d>
100020de:	1c03      	adds	r3, r0, #0
100020e0:	1c0c      	adds	r4, r1, #0
100020e2:	1c18      	adds	r0, r3, #0
100020e4:	1c21      	adds	r1, r4, #0
100020e6:	4a48      	ldr	r2, [pc, #288]	; (10002208 <IRQ7_Handler+0x714>)
100020e8:	4b48      	ldr	r3, [pc, #288]	; (1000220c <IRQ7_Handler+0x718>)
100020ea:	f005 fd69 	bl	10007bc0 <__aeabi_dmul>
100020ee:	1c03      	adds	r3, r0, #0
100020f0:	1c0c      	adds	r4, r1, #0
100020f2:	1c18      	adds	r0, r3, #0
100020f4:	1c21      	adds	r1, r4, #0
100020f6:	f006 fc39 	bl	1000896c <__aeabi_d2f>
100020fa:	1c02      	adds	r2, r0, #0
100020fc:	4b3b      	ldr	r3, [pc, #236]	; (100021ec <IRQ7_Handler+0x6f8>)
100020fe:	625a      	str	r2, [r3, #36]	; 0x24
			data_group.iAC_inv		= pcsCurrents.iacOut*0.01;
10002100:	4b40      	ldr	r3, [pc, #256]	; (10002204 <IRQ7_Handler+0x710>)
10002102:	885b      	ldrh	r3, [r3, #2]
10002104:	b21b      	sxth	r3, r3
10002106:	1c18      	adds	r0, r3, #0
10002108:	f006 fb6e 	bl	100087e8 <__aeabi_i2d>
1000210c:	1c03      	adds	r3, r0, #0
1000210e:	1c0c      	adds	r4, r1, #0
10002110:	1c18      	adds	r0, r3, #0
10002112:	1c21      	adds	r1, r4, #0
10002114:	4a3c      	ldr	r2, [pc, #240]	; (10002208 <IRQ7_Handler+0x714>)
10002116:	4b3d      	ldr	r3, [pc, #244]	; (1000220c <IRQ7_Handler+0x718>)
10002118:	f005 fd52 	bl	10007bc0 <__aeabi_dmul>
1000211c:	1c03      	adds	r3, r0, #0
1000211e:	1c0c      	adds	r4, r1, #0
10002120:	1c18      	adds	r0, r3, #0
10002122:	1c21      	adds	r1, r4, #0
10002124:	f006 fc22 	bl	1000896c <__aeabi_d2f>
10002128:	1c02      	adds	r2, r0, #0
1000212a:	4b30      	ldr	r3, [pc, #192]	; (100021ec <IRQ7_Handler+0x6f8>)
1000212c:	61da      	str	r2, [r3, #28]
			break;
1000212e:	e078      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x207 : // Power Properties
			pcsPowers = PCS_GetPowerParam(&msgObjFromPCS);
10002130:	4c39      	ldr	r4, [pc, #228]	; (10002218 <IRQ7_Handler+0x724>)
10002132:	1c3a      	adds	r2, r7, #0
10002134:	4b2e      	ldr	r3, [pc, #184]	; (100021f0 <IRQ7_Handler+0x6fc>)
10002136:	1c10      	adds	r0, r2, #0
10002138:	1c19      	adds	r1, r3, #0
1000213a:	f001 fcd1 	bl	10003ae0 <PCS_GetPowerParam>
1000213e:	1c3b      	adds	r3, r7, #0
10002140:	1c21      	adds	r1, r4, #0
10002142:	1c1a      	adds	r2, r3, #0
10002144:	2308      	movs	r3, #8
10002146:	1c08      	adds	r0, r1, #0
10002148:	1c11      	adds	r1, r2, #0
1000214a:	1c1a      	adds	r2, r3, #0
1000214c:	f006 fce8 	bl	10008b20 <memcpy>

			data_group.pPv_conv		= pcsPowers.pPV;
10002150:	4b31      	ldr	r3, [pc, #196]	; (10002218 <IRQ7_Handler+0x724>)
10002152:	889a      	ldrh	r2, [r3, #4]
10002154:	4b25      	ldr	r3, [pc, #148]	; (100021ec <IRQ7_Handler+0x6f8>)
10002156:	859a      	strh	r2, [r3, #44]	; 0x2c
			data_group.pDC_grid		= pcsPowers.pdcGrid;
10002158:	4b2f      	ldr	r3, [pc, #188]	; (10002218 <IRQ7_Handler+0x724>)
1000215a:	881b      	ldrh	r3, [r3, #0]
1000215c:	b29a      	uxth	r2, r3
1000215e:	4b23      	ldr	r3, [pc, #140]	; (100021ec <IRQ7_Handler+0x6f8>)
10002160:	851a      	strh	r2, [r3, #40]	; 0x28
			data_group.pBat_conv	= pcsPowers.pbat;
10002162:	4b2d      	ldr	r3, [pc, #180]	; (10002218 <IRQ7_Handler+0x724>)
10002164:	88db      	ldrh	r3, [r3, #6]
10002166:	b29a      	uxth	r2, r3
10002168:	4b20      	ldr	r3, [pc, #128]	; (100021ec <IRQ7_Handler+0x6f8>)
1000216a:	85da      	strh	r2, [r3, #46]	; 0x2e
			data_group.pAC_inv		= pcsPowers.pacOut;
1000216c:	4b2a      	ldr	r3, [pc, #168]	; (10002218 <IRQ7_Handler+0x724>)
1000216e:	885a      	ldrh	r2, [r3, #2]
10002170:	4b1e      	ldr	r3, [pc, #120]	; (100021ec <IRQ7_Handler+0x6f8>)
10002172:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
10002174:	e055      	b.n	10002222 <IRQ7_Handler+0x72e>

		case 0x208 : // Frequency and Temperature Properties
			pcsMiscs = PCS_GetMiscParam(&msgObjFromPCS);
10002176:	4b1e      	ldr	r3, [pc, #120]	; (100021f0 <IRQ7_Handler+0x6fc>)
10002178:	1c18      	adds	r0, r3, #0
1000217a:	f001 fcf9 	bl	10003b70 <PCS_GetMiscParam>
1000217e:	1c03      	adds	r3, r0, #0
10002180:	1c1a      	adds	r2, r3, #0
10002182:	4b26      	ldr	r3, [pc, #152]	; (1000221c <IRQ7_Handler+0x728>)
10002184:	1c11      	adds	r1, r2, #0
10002186:	8019      	strh	r1, [r3, #0]
10002188:	0c12      	lsrs	r2, r2, #16
1000218a:	805a      	strh	r2, [r3, #2]

			data_group.temp_sensor	= pcsMiscs.tempPCS*0.1;
1000218c:	4b23      	ldr	r3, [pc, #140]	; (1000221c <IRQ7_Handler+0x728>)
1000218e:	881b      	ldrh	r3, [r3, #0]
10002190:	1c18      	adds	r0, r3, #0
10002192:	f006 fb29 	bl	100087e8 <__aeabi_i2d>
10002196:	1c03      	adds	r3, r0, #0
10002198:	1c0c      	adds	r4, r1, #0
1000219a:	1c18      	adds	r0, r3, #0
1000219c:	1c21      	adds	r1, r4, #0
1000219e:	4a17      	ldr	r2, [pc, #92]	; (100021fc <IRQ7_Handler+0x708>)
100021a0:	4b17      	ldr	r3, [pc, #92]	; (10002200 <IRQ7_Handler+0x70c>)
100021a2:	f005 fd0d 	bl	10007bc0 <__aeabi_dmul>
100021a6:	1c03      	adds	r3, r0, #0
100021a8:	1c0c      	adds	r4, r1, #0
100021aa:	1c18      	adds	r0, r3, #0
100021ac:	1c21      	adds	r1, r4, #0
100021ae:	f006 fbdd 	bl	1000896c <__aeabi_d2f>
100021b2:	1c02      	adds	r2, r0, #0
100021b4:	4b0d      	ldr	r3, [pc, #52]	; (100021ec <IRQ7_Handler+0x6f8>)
100021b6:	631a      	str	r2, [r3, #48]	; 0x30
			data_group.frequency	= pcsMiscs.frequency*0.1;
100021b8:	4b18      	ldr	r3, [pc, #96]	; (1000221c <IRQ7_Handler+0x728>)
100021ba:	885b      	ldrh	r3, [r3, #2]
100021bc:	1c18      	adds	r0, r3, #0
100021be:	f006 fb13 	bl	100087e8 <__aeabi_i2d>
100021c2:	1c03      	adds	r3, r0, #0
100021c4:	1c0c      	adds	r4, r1, #0
100021c6:	1c18      	adds	r0, r3, #0
100021c8:	1c21      	adds	r1, r4, #0
100021ca:	4a0c      	ldr	r2, [pc, #48]	; (100021fc <IRQ7_Handler+0x708>)
100021cc:	4b0c      	ldr	r3, [pc, #48]	; (10002200 <IRQ7_Handler+0x70c>)
100021ce:	f005 fcf7 	bl	10007bc0 <__aeabi_dmul>
100021d2:	1c03      	adds	r3, r0, #0
100021d4:	1c0c      	adds	r4, r1, #0
100021d6:	1c18      	adds	r0, r3, #0
100021d8:	1c21      	adds	r1, r4, #0
100021da:	f006 fbc7 	bl	1000896c <__aeabi_d2f>
100021de:	1c02      	adds	r2, r0, #0
100021e0:	4b02      	ldr	r3, [pc, #8]	; (100021ec <IRQ7_Handler+0x6f8>)
100021e2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
100021e4:	e01d      	b.n	10002222 <IRQ7_Handler+0x72e>
100021e6:	46c0      	nop			; (mov r8, r8)
100021e8:	20000a44 	.word	0x20000a44
100021ec:	20000a48 	.word	0x20000a48
100021f0:	20000658 	.word	0x20000658
100021f4:	20000ab8 	.word	0x20000ab8
100021f8:	20000a34 	.word	0x20000a34
100021fc:	9999999a 	.word	0x9999999a
10002200:	3fb99999 	.word	0x3fb99999
10002204:	20000aa4 	.word	0x20000aa4
10002208:	47ae147b 	.word	0x47ae147b
1000220c:	3f847ae1 	.word	0x3f847ae1
10002210:	d2f1a9fc 	.word	0xd2f1a9fc
10002214:	3f50624d 	.word	0x3f50624d
10002218:	20000b30 	.word	0x20000b30
1000221c:	20000ad0 	.word	0x20000ad0

		default    : // others
			break;
10002220:	46c0      	nop			; (mov r8, r8)
	}

	NVIC_ClearPendingIRQ(IRQ7_IRQn);
10002222:	2007      	movs	r0, #7
10002224:	f7ff fa26 	bl	10001674 <__NVIC_ClearPendingIRQ>
}
10002228:	46bd      	mov	sp, r7
1000222a:	b003      	add	sp, #12
1000222c:	bd90      	pop	{r4, r7, pc}
1000222e:	46c0      	nop			; (mov r8, r8)

10002230 <IRQ19_Handler>:

void adc_intrpt_handler(void)
{
10002230:	b598      	push	{r3, r4, r7, lr}
10002232:	af00      	add	r7, sp, #0
	static PDU_SENSOR_AVG_t sensorAvgBuff;

	XMC_VADC_GROUP_ClearResultEvent(VADC_G1,2); // Clear Result 2 event flag
10002234:	4b76      	ldr	r3, [pc, #472]	; (10002410 <IRQ19_Handler+0x1e0>)
10002236:	1c18      	adds	r0, r3, #0
10002238:	2102      	movs	r1, #2
1000223a:	f7ff fa87 	bl	1000174c <XMC_VADC_GROUP_ClearResultEvent>
	pduSensorRaw.rawPVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,0));
1000223e:	4b74      	ldr	r3, [pc, #464]	; (10002410 <IRQ19_Handler+0x1e0>)
10002240:	1c18      	adds	r0, r3, #0
10002242:	2100      	movs	r1, #0
10002244:	f7ff fa72 	bl	1000172c <XMC_VADC_GROUP_GetResult>
10002248:	1c03      	adds	r3, r0, #0
1000224a:	1c1a      	adds	r2, r3, #0
1000224c:	4b71      	ldr	r3, [pc, #452]	; (10002414 <IRQ19_Handler+0x1e4>)
1000224e:	801a      	strh	r2, [r3, #0]
	pduSensorRaw.rawBTPT = (XMC_VADC_GROUP_GetResult(VADC_G1,1));
10002250:	4b6f      	ldr	r3, [pc, #444]	; (10002410 <IRQ19_Handler+0x1e0>)
10002252:	1c18      	adds	r0, r3, #0
10002254:	2101      	movs	r1, #1
10002256:	f7ff fa69 	bl	1000172c <XMC_VADC_GROUP_GetResult>
1000225a:	1c03      	adds	r3, r0, #0
1000225c:	1c1a      	adds	r2, r3, #0
1000225e:	4b6d      	ldr	r3, [pc, #436]	; (10002414 <IRQ19_Handler+0x1e4>)
10002260:	805a      	strh	r2, [r3, #2]
	pduSensorRaw.rawDCCT = (XMC_VADC_GROUP_GetResult(VADC_G1,2));
10002262:	4b6b      	ldr	r3, [pc, #428]	; (10002410 <IRQ19_Handler+0x1e0>)
10002264:	1c18      	adds	r0, r3, #0
10002266:	2102      	movs	r1, #2
10002268:	f7ff fa60 	bl	1000172c <XMC_VADC_GROUP_GetResult>
1000226c:	1c03      	adds	r3, r0, #0
1000226e:	1c1a      	adds	r2, r3, #0
10002270:	4b68      	ldr	r3, [pc, #416]	; (10002414 <IRQ19_Handler+0x1e4>)
10002272:	80da      	strh	r2, [r3, #6]
	pduSensorRaw.rawPVPT = (XMC_VADC_GROUP_GetResult(VADC_G1,3));
10002274:	4b66      	ldr	r3, [pc, #408]	; (10002410 <IRQ19_Handler+0x1e0>)
10002276:	1c18      	adds	r0, r3, #0
10002278:	2103      	movs	r1, #3
1000227a:	f7ff fa57 	bl	1000172c <XMC_VADC_GROUP_GetResult>
1000227e:	1c03      	adds	r3, r0, #0
10002280:	1c1a      	adds	r2, r3, #0
10002282:	4b64      	ldr	r3, [pc, #400]	; (10002414 <IRQ19_Handler+0x1e4>)
10002284:	801a      	strh	r2, [r3, #0]

	sensorAvgBuff.sumAvgBTPT = sensorAvgBuff.sumAvgBTPT + pduSensorRaw.rawBTPT;
10002286:	4b64      	ldr	r3, [pc, #400]	; (10002418 <IRQ19_Handler+0x1e8>)
10002288:	689b      	ldr	r3, [r3, #8]
1000228a:	4a62      	ldr	r2, [pc, #392]	; (10002414 <IRQ19_Handler+0x1e4>)
1000228c:	8852      	ldrh	r2, [r2, #2]
1000228e:	189a      	adds	r2, r3, r2
10002290:	4b61      	ldr	r3, [pc, #388]	; (10002418 <IRQ19_Handler+0x1e8>)
10002292:	609a      	str	r2, [r3, #8]
	sensorAvgBuff.sumAvgPVPT = sensorAvgBuff.sumAvgPVPT + pduSensorRaw.rawPVPT;
10002294:	4b60      	ldr	r3, [pc, #384]	; (10002418 <IRQ19_Handler+0x1e8>)
10002296:	685b      	ldr	r3, [r3, #4]
10002298:	4a5e      	ldr	r2, [pc, #376]	; (10002414 <IRQ19_Handler+0x1e4>)
1000229a:	8812      	ldrh	r2, [r2, #0]
1000229c:	189a      	adds	r2, r3, r2
1000229e:	4b5e      	ldr	r3, [pc, #376]	; (10002418 <IRQ19_Handler+0x1e8>)
100022a0:	605a      	str	r2, [r3, #4]
	sensorAvgBuff.sumAvgHVPT = sensorAvgBuff.sumAvgHVPT + pduSensorRaw.rawHVPT;
100022a2:	4b5d      	ldr	r3, [pc, #372]	; (10002418 <IRQ19_Handler+0x1e8>)
100022a4:	68db      	ldr	r3, [r3, #12]
100022a6:	4a5b      	ldr	r2, [pc, #364]	; (10002414 <IRQ19_Handler+0x1e4>)
100022a8:	8892      	ldrh	r2, [r2, #4]
100022aa:	189a      	adds	r2, r3, r2
100022ac:	4b5a      	ldr	r3, [pc, #360]	; (10002418 <IRQ19_Handler+0x1e8>)
100022ae:	60da      	str	r2, [r3, #12]
	sensorAvgBuff.sumAvgDCCT = sensorAvgBuff.sumAvgDCCT + pduSensorRaw.rawDCCT;
100022b0:	4b59      	ldr	r3, [pc, #356]	; (10002418 <IRQ19_Handler+0x1e8>)
100022b2:	691b      	ldr	r3, [r3, #16]
100022b4:	4a57      	ldr	r2, [pc, #348]	; (10002414 <IRQ19_Handler+0x1e4>)
100022b6:	88d2      	ldrh	r2, [r2, #6]
100022b8:	189a      	adds	r2, r3, r2
100022ba:	4b57      	ldr	r3, [pc, #348]	; (10002418 <IRQ19_Handler+0x1e8>)
100022bc:	611a      	str	r2, [r3, #16]

	/* Do moving Average Filter */
	if(pduSensorAvg.count == 31)
100022be:	4b57      	ldr	r3, [pc, #348]	; (1000241c <IRQ19_Handler+0x1ec>)
100022c0:	789b      	ldrb	r3, [r3, #2]
100022c2:	2b1f      	cmp	r3, #31
100022c4:	d000      	beq.n	100022c8 <IRQ19_Handler+0x98>
100022c6:	e09b      	b.n	10002400 <IRQ19_Handler+0x1d0>
	{
		pduSensorAvg.sumAvgPVPT = sensorAvgBuff.sumAvgPVPT >> 5;
100022c8:	4b53      	ldr	r3, [pc, #332]	; (10002418 <IRQ19_Handler+0x1e8>)
100022ca:	685b      	ldr	r3, [r3, #4]
100022cc:	095a      	lsrs	r2, r3, #5
100022ce:	4b53      	ldr	r3, [pc, #332]	; (1000241c <IRQ19_Handler+0x1ec>)
100022d0:	605a      	str	r2, [r3, #4]
		pduSensorAvg.sumAvgHVPT = sensorAvgBuff.sumAvgHVPT >> 5;
100022d2:	4b51      	ldr	r3, [pc, #324]	; (10002418 <IRQ19_Handler+0x1e8>)
100022d4:	68db      	ldr	r3, [r3, #12]
100022d6:	095a      	lsrs	r2, r3, #5
100022d8:	4b50      	ldr	r3, [pc, #320]	; (1000241c <IRQ19_Handler+0x1ec>)
100022da:	60da      	str	r2, [r3, #12]
		pduSensorAvg.sumAvgBTPT = sensorAvgBuff.sumAvgBTPT >> 5;
100022dc:	4b4e      	ldr	r3, [pc, #312]	; (10002418 <IRQ19_Handler+0x1e8>)
100022de:	689b      	ldr	r3, [r3, #8]
100022e0:	095a      	lsrs	r2, r3, #5
100022e2:	4b4e      	ldr	r3, [pc, #312]	; (1000241c <IRQ19_Handler+0x1ec>)
100022e4:	609a      	str	r2, [r3, #8]
		pduSensorAvg.sumAvgDCCT = sensorAvgBuff.sumAvgDCCT >> 5;
100022e6:	4b4c      	ldr	r3, [pc, #304]	; (10002418 <IRQ19_Handler+0x1e8>)
100022e8:	691b      	ldr	r3, [r3, #16]
100022ea:	095a      	lsrs	r2, r3, #5
100022ec:	4b4b      	ldr	r3, [pc, #300]	; (1000241c <IRQ19_Handler+0x1ec>)
100022ee:	611a      	str	r2, [r3, #16]
		sensorAvgBuff.sumAvgBTPT = 0;
100022f0:	4b49      	ldr	r3, [pc, #292]	; (10002418 <IRQ19_Handler+0x1e8>)
100022f2:	2200      	movs	r2, #0
100022f4:	609a      	str	r2, [r3, #8]
		sensorAvgBuff.sumAvgPVPT = 0;
100022f6:	4b48      	ldr	r3, [pc, #288]	; (10002418 <IRQ19_Handler+0x1e8>)
100022f8:	2200      	movs	r2, #0
100022fa:	605a      	str	r2, [r3, #4]
		sensorAvgBuff.sumAvgHVPT = 0;
100022fc:	4b46      	ldr	r3, [pc, #280]	; (10002418 <IRQ19_Handler+0x1e8>)
100022fe:	2200      	movs	r2, #0
10002300:	60da      	str	r2, [r3, #12]
		sensorAvgBuff.sumAvgDCCT = 0;
10002302:	4b45      	ldr	r3, [pc, #276]	; (10002418 <IRQ19_Handler+0x1e8>)
10002304:	2200      	movs	r2, #0
10002306:	611a      	str	r2, [r3, #16]

		pduSensor.mDCCT = 0.0296*pduSensorAvg.sumAvgDCCT - 60.441;
10002308:	4b44      	ldr	r3, [pc, #272]	; (1000241c <IRQ19_Handler+0x1ec>)
1000230a:	691b      	ldr	r3, [r3, #16]
1000230c:	1c18      	adds	r0, r3, #0
1000230e:	f006 faa7 	bl	10008860 <__aeabi_ui2d>
10002312:	1c03      	adds	r3, r0, #0
10002314:	1c0c      	adds	r4, r1, #0
10002316:	1c18      	adds	r0, r3, #0
10002318:	1c21      	adds	r1, r4, #0
1000231a:	4a41      	ldr	r2, [pc, #260]	; (10002420 <IRQ19_Handler+0x1f0>)
1000231c:	4b41      	ldr	r3, [pc, #260]	; (10002424 <IRQ19_Handler+0x1f4>)
1000231e:	f005 fc4f 	bl	10007bc0 <__aeabi_dmul>
10002322:	1c03      	adds	r3, r0, #0
10002324:	1c0c      	adds	r4, r1, #0
10002326:	1c18      	adds	r0, r3, #0
10002328:	1c21      	adds	r1, r4, #0
1000232a:	4a3f      	ldr	r2, [pc, #252]	; (10002428 <IRQ19_Handler+0x1f8>)
1000232c:	4b3f      	ldr	r3, [pc, #252]	; (1000242c <IRQ19_Handler+0x1fc>)
1000232e:	f005 fee1 	bl	100080f4 <__aeabi_dsub>
10002332:	1c03      	adds	r3, r0, #0
10002334:	1c0c      	adds	r4, r1, #0
10002336:	1c18      	adds	r0, r3, #0
10002338:	1c21      	adds	r1, r4, #0
1000233a:	f006 fb17 	bl	1000896c <__aeabi_d2f>
1000233e:	1c02      	adds	r2, r0, #0
10002340:	4b3b      	ldr	r3, [pc, #236]	; (10002430 <IRQ19_Handler+0x200>)
10002342:	60da      	str	r2, [r3, #12]
		pduSensor.mBTPT = 0.0986*pduSensorAvg.sumAvgBTPT - 2.4981;
10002344:	4b35      	ldr	r3, [pc, #212]	; (1000241c <IRQ19_Handler+0x1ec>)
10002346:	689b      	ldr	r3, [r3, #8]
10002348:	1c18      	adds	r0, r3, #0
1000234a:	f006 fa89 	bl	10008860 <__aeabi_ui2d>
1000234e:	1c03      	adds	r3, r0, #0
10002350:	1c0c      	adds	r4, r1, #0
10002352:	1c18      	adds	r0, r3, #0
10002354:	1c21      	adds	r1, r4, #0
10002356:	4a37      	ldr	r2, [pc, #220]	; (10002434 <IRQ19_Handler+0x204>)
10002358:	4b37      	ldr	r3, [pc, #220]	; (10002438 <IRQ19_Handler+0x208>)
1000235a:	f005 fc31 	bl	10007bc0 <__aeabi_dmul>
1000235e:	1c03      	adds	r3, r0, #0
10002360:	1c0c      	adds	r4, r1, #0
10002362:	1c18      	adds	r0, r3, #0
10002364:	1c21      	adds	r1, r4, #0
10002366:	4a35      	ldr	r2, [pc, #212]	; (1000243c <IRQ19_Handler+0x20c>)
10002368:	4b35      	ldr	r3, [pc, #212]	; (10002440 <IRQ19_Handler+0x210>)
1000236a:	f005 fec3 	bl	100080f4 <__aeabi_dsub>
1000236e:	1c03      	adds	r3, r0, #0
10002370:	1c0c      	adds	r4, r1, #0
10002372:	1c18      	adds	r0, r3, #0
10002374:	1c21      	adds	r1, r4, #0
10002376:	f006 faf9 	bl	1000896c <__aeabi_d2f>
1000237a:	1c02      	adds	r2, r0, #0
1000237c:	4b2c      	ldr	r3, [pc, #176]	; (10002430 <IRQ19_Handler+0x200>)
1000237e:	605a      	str	r2, [r3, #4]
		pduSensor.mHVPT = 0.0977*pduSensorAvg.sumAvgHVPT + 0.413;
10002380:	4b26      	ldr	r3, [pc, #152]	; (1000241c <IRQ19_Handler+0x1ec>)
10002382:	68db      	ldr	r3, [r3, #12]
10002384:	1c18      	adds	r0, r3, #0
10002386:	f006 fa6b 	bl	10008860 <__aeabi_ui2d>
1000238a:	1c03      	adds	r3, r0, #0
1000238c:	1c0c      	adds	r4, r1, #0
1000238e:	1c18      	adds	r0, r3, #0
10002390:	1c21      	adds	r1, r4, #0
10002392:	4a2c      	ldr	r2, [pc, #176]	; (10002444 <IRQ19_Handler+0x214>)
10002394:	4b2c      	ldr	r3, [pc, #176]	; (10002448 <IRQ19_Handler+0x218>)
10002396:	f005 fc13 	bl	10007bc0 <__aeabi_dmul>
1000239a:	1c03      	adds	r3, r0, #0
1000239c:	1c0c      	adds	r4, r1, #0
1000239e:	1c18      	adds	r0, r3, #0
100023a0:	1c21      	adds	r1, r4, #0
100023a2:	4a2a      	ldr	r2, [pc, #168]	; (1000244c <IRQ19_Handler+0x21c>)
100023a4:	4b2a      	ldr	r3, [pc, #168]	; (10002450 <IRQ19_Handler+0x220>)
100023a6:	f004 ffc9 	bl	1000733c <__aeabi_dadd>
100023aa:	1c03      	adds	r3, r0, #0
100023ac:	1c0c      	adds	r4, r1, #0
100023ae:	1c18      	adds	r0, r3, #0
100023b0:	1c21      	adds	r1, r4, #0
100023b2:	f006 fadb 	bl	1000896c <__aeabi_d2f>
100023b6:	1c02      	adds	r2, r0, #0
100023b8:	4b1d      	ldr	r3, [pc, #116]	; (10002430 <IRQ19_Handler+0x200>)
100023ba:	609a      	str	r2, [r3, #8]
		pduSensor.mPVPT = 0.0977*pduSensorAvg.sumAvgPVPT + 0.4414;
100023bc:	4b17      	ldr	r3, [pc, #92]	; (1000241c <IRQ19_Handler+0x1ec>)
100023be:	685b      	ldr	r3, [r3, #4]
100023c0:	1c18      	adds	r0, r3, #0
100023c2:	f006 fa4d 	bl	10008860 <__aeabi_ui2d>
100023c6:	1c03      	adds	r3, r0, #0
100023c8:	1c0c      	adds	r4, r1, #0
100023ca:	1c18      	adds	r0, r3, #0
100023cc:	1c21      	adds	r1, r4, #0
100023ce:	4a1d      	ldr	r2, [pc, #116]	; (10002444 <IRQ19_Handler+0x214>)
100023d0:	4b1d      	ldr	r3, [pc, #116]	; (10002448 <IRQ19_Handler+0x218>)
100023d2:	f005 fbf5 	bl	10007bc0 <__aeabi_dmul>
100023d6:	1c03      	adds	r3, r0, #0
100023d8:	1c0c      	adds	r4, r1, #0
100023da:	1c18      	adds	r0, r3, #0
100023dc:	1c21      	adds	r1, r4, #0
100023de:	4a1d      	ldr	r2, [pc, #116]	; (10002454 <IRQ19_Handler+0x224>)
100023e0:	4b1d      	ldr	r3, [pc, #116]	; (10002458 <IRQ19_Handler+0x228>)
100023e2:	f004 ffab 	bl	1000733c <__aeabi_dadd>
100023e6:	1c03      	adds	r3, r0, #0
100023e8:	1c0c      	adds	r4, r1, #0
100023ea:	1c18      	adds	r0, r3, #0
100023ec:	1c21      	adds	r1, r4, #0
100023ee:	f006 fabd 	bl	1000896c <__aeabi_d2f>
100023f2:	1c02      	adds	r2, r0, #0
100023f4:	4b0e      	ldr	r3, [pc, #56]	; (10002430 <IRQ19_Handler+0x200>)
100023f6:	601a      	str	r2, [r3, #0]
		pduSensorAvg.count = 0;
100023f8:	4b08      	ldr	r3, [pc, #32]	; (1000241c <IRQ19_Handler+0x1ec>)
100023fa:	2200      	movs	r2, #0
100023fc:	709a      	strb	r2, [r3, #2]
100023fe:	e005      	b.n	1000240c <IRQ19_Handler+0x1dc>
	}
	else {pduSensorAvg.count++;}
10002400:	4b06      	ldr	r3, [pc, #24]	; (1000241c <IRQ19_Handler+0x1ec>)
10002402:	789b      	ldrb	r3, [r3, #2]
10002404:	3301      	adds	r3, #1
10002406:	b2da      	uxtb	r2, r3
10002408:	4b04      	ldr	r3, [pc, #16]	; (1000241c <IRQ19_Handler+0x1ec>)
1000240a:	709a      	strb	r2, [r3, #2]

}
1000240c:	46bd      	mov	sp, r7
1000240e:	bd98      	pop	{r3, r4, r7, pc}
10002410:	48030800 	.word	0x48030800
10002414:	20000ab0 	.word	0x20000ab0
10002418:	2000078c 	.word	0x2000078c
1000241c:	20000abc 	.word	0x20000abc
10002420:	5fd8adac 	.word	0x5fd8adac
10002424:	3f9e4f76 	.word	0x3f9e4f76
10002428:	b020c49c 	.word	0xb020c49c
1000242c:	404e3872 	.word	0x404e3872
10002430:	20000b38 	.word	0x20000b38
10002434:	7f62b6ae 	.word	0x7f62b6ae
10002438:	3fb93dd9 	.word	0x3fb93dd9
1000243c:	da5119ce 	.word	0xda5119ce
10002440:	4003fc1b 	.word	0x4003fc1b
10002444:	00d1b717 	.word	0x00d1b717
10002448:	3fb902de 	.word	0x3fb902de
1000244c:	8d4fdf3b 	.word	0x8d4fdf3b
10002450:	3fda6e97 	.word	0x3fda6e97
10002454:	c91d14e4 	.word	0xc91d14e4
10002458:	3fdc3fe5 	.word	0x3fdc3fe5

1000245c <IRQ23_Handler>:

void one_msec_intrpt_handler(void)
{
1000245c:	b580      	push	{r7, lr}
1000245e:	af00      	add	r7, sp, #0
	XMC_CCU4_SLICE_ClearEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002460:	4b04      	ldr	r3, [pc, #16]	; (10002474 <IRQ23_Handler+0x18>)
10002462:	1c18      	adds	r0, r3, #0
10002464:	2100      	movs	r1, #0
10002466:	f7ff f94f 	bl	10001708 <XMC_CCU4_SLICE_ClearEvent>
	PDU_ADC_Start();
1000246a:	f000 fd93 	bl	10002f94 <PDU_ADC_Start>
}
1000246e:	46bd      	mov	sp, r7
10002470:	bd80      	pop	{r7, pc}
10002472:	46c0      	nop			; (mov r8, r8)
10002474:	48040100 	.word	0x48040100

10002478 <IRQ24_Handler>:

void hundred_msec_intrpt_handler(void)
{
10002478:	b590      	push	{r4, r7, lr}
1000247a:	b083      	sub	sp, #12
1000247c:	af00      	add	r7, sp, #0
	float soc_f;
	float ocv;

//	ocv = genix_data.pack_voltage*0.1;
	ocv = pduSensor.mBTPT;
1000247e:	4b9a      	ldr	r3, [pc, #616]	; (100026e8 <IRQ24_Handler+0x270>)
10002480:	685b      	ldr	r3, [r3, #4]
10002482:	603b      	str	r3, [r7, #0]

	/* piece-wise OCV-SoC transformation */
#if (BATTERY_NUM_75 == 1)
	if 		((ocv > 182.25)  && (ocv <= 201.75)) {soc_f = 0.1425*ocv - 25.962;}
10002484:	6838      	ldr	r0, [r7, #0]
10002486:	4999      	ldr	r1, [pc, #612]	; (100026ec <IRQ24_Handler+0x274>)
10002488:	f004 fb5a 	bl	10006b40 <__aeabi_fcmpgt>
1000248c:	1e03      	subs	r3, r0, #0
1000248e:	d021      	beq.n	100024d4 <IRQ24_Handler+0x5c>
10002490:	6838      	ldr	r0, [r7, #0]
10002492:	4997      	ldr	r1, [pc, #604]	; (100026f0 <IRQ24_Handler+0x278>)
10002494:	f004 fb4a 	bl	10006b2c <__aeabi_fcmple>
10002498:	1e03      	subs	r3, r0, #0
1000249a:	d01b      	beq.n	100024d4 <IRQ24_Handler+0x5c>
1000249c:	6838      	ldr	r0, [r7, #0]
1000249e:	f006 fa11 	bl	100088c4 <__aeabi_f2d>
100024a2:	1c03      	adds	r3, r0, #0
100024a4:	1c0c      	adds	r4, r1, #0
100024a6:	1c18      	adds	r0, r3, #0
100024a8:	1c21      	adds	r1, r4, #0
100024aa:	4a92      	ldr	r2, [pc, #584]	; (100026f4 <IRQ24_Handler+0x27c>)
100024ac:	4b92      	ldr	r3, [pc, #584]	; (100026f8 <IRQ24_Handler+0x280>)
100024ae:	f005 fb87 	bl	10007bc0 <__aeabi_dmul>
100024b2:	1c03      	adds	r3, r0, #0
100024b4:	1c0c      	adds	r4, r1, #0
100024b6:	1c18      	adds	r0, r3, #0
100024b8:	1c21      	adds	r1, r4, #0
100024ba:	4a90      	ldr	r2, [pc, #576]	; (100026fc <IRQ24_Handler+0x284>)
100024bc:	4b90      	ldr	r3, [pc, #576]	; (10002700 <IRQ24_Handler+0x288>)
100024be:	f005 fe19 	bl	100080f4 <__aeabi_dsub>
100024c2:	1c03      	adds	r3, r0, #0
100024c4:	1c0c      	adds	r4, r1, #0
100024c6:	1c18      	adds	r0, r3, #0
100024c8:	1c21      	adds	r1, r4, #0
100024ca:	f006 fa4f 	bl	1000896c <__aeabi_d2f>
100024ce:	1c03      	adds	r3, r0, #0
100024d0:	607b      	str	r3, [r7, #4]
100024d2:	e0be      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if ((ocv > 201.75)  && (ocv <= 235.125)){soc_f = 0.3167*ocv - 61.374;}
100024d4:	6838      	ldr	r0, [r7, #0]
100024d6:	4986      	ldr	r1, [pc, #536]	; (100026f0 <IRQ24_Handler+0x278>)
100024d8:	f004 fb32 	bl	10006b40 <__aeabi_fcmpgt>
100024dc:	1e03      	subs	r3, r0, #0
100024de:	d021      	beq.n	10002524 <IRQ24_Handler+0xac>
100024e0:	6838      	ldr	r0, [r7, #0]
100024e2:	4988      	ldr	r1, [pc, #544]	; (10002704 <IRQ24_Handler+0x28c>)
100024e4:	f004 fb22 	bl	10006b2c <__aeabi_fcmple>
100024e8:	1e03      	subs	r3, r0, #0
100024ea:	d01b      	beq.n	10002524 <IRQ24_Handler+0xac>
100024ec:	6838      	ldr	r0, [r7, #0]
100024ee:	f006 f9e9 	bl	100088c4 <__aeabi_f2d>
100024f2:	1c03      	adds	r3, r0, #0
100024f4:	1c0c      	adds	r4, r1, #0
100024f6:	1c18      	adds	r0, r3, #0
100024f8:	1c21      	adds	r1, r4, #0
100024fa:	4a83      	ldr	r2, [pc, #524]	; (10002708 <IRQ24_Handler+0x290>)
100024fc:	4b83      	ldr	r3, [pc, #524]	; (1000270c <IRQ24_Handler+0x294>)
100024fe:	f005 fb5f 	bl	10007bc0 <__aeabi_dmul>
10002502:	1c03      	adds	r3, r0, #0
10002504:	1c0c      	adds	r4, r1, #0
10002506:	1c18      	adds	r0, r3, #0
10002508:	1c21      	adds	r1, r4, #0
1000250a:	4a81      	ldr	r2, [pc, #516]	; (10002710 <IRQ24_Handler+0x298>)
1000250c:	4b81      	ldr	r3, [pc, #516]	; (10002714 <IRQ24_Handler+0x29c>)
1000250e:	f005 fdf1 	bl	100080f4 <__aeabi_dsub>
10002512:	1c03      	adds	r3, r0, #0
10002514:	1c0c      	adds	r4, r1, #0
10002516:	1c18      	adds	r0, r3, #0
10002518:	1c21      	adds	r1, r4, #0
1000251a:	f006 fa27 	bl	1000896c <__aeabi_d2f>
1000251e:	1c03      	adds	r3, r0, #0
10002520:	607b      	str	r3, [r7, #4]
10002522:	e096      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if ((ocv > 235.125) && (ocv <= 245.25)) {soc_f = 2.4691*ocv - 566.67;}
10002524:	6838      	ldr	r0, [r7, #0]
10002526:	4977      	ldr	r1, [pc, #476]	; (10002704 <IRQ24_Handler+0x28c>)
10002528:	f004 fb0a 	bl	10006b40 <__aeabi_fcmpgt>
1000252c:	1e03      	subs	r3, r0, #0
1000252e:	d021      	beq.n	10002574 <IRQ24_Handler+0xfc>
10002530:	6838      	ldr	r0, [r7, #0]
10002532:	4979      	ldr	r1, [pc, #484]	; (10002718 <IRQ24_Handler+0x2a0>)
10002534:	f004 fafa 	bl	10006b2c <__aeabi_fcmple>
10002538:	1e03      	subs	r3, r0, #0
1000253a:	d01b      	beq.n	10002574 <IRQ24_Handler+0xfc>
1000253c:	6838      	ldr	r0, [r7, #0]
1000253e:	f006 f9c1 	bl	100088c4 <__aeabi_f2d>
10002542:	1c03      	adds	r3, r0, #0
10002544:	1c0c      	adds	r4, r1, #0
10002546:	1c18      	adds	r0, r3, #0
10002548:	1c21      	adds	r1, r4, #0
1000254a:	4a74      	ldr	r2, [pc, #464]	; (1000271c <IRQ24_Handler+0x2a4>)
1000254c:	4b74      	ldr	r3, [pc, #464]	; (10002720 <IRQ24_Handler+0x2a8>)
1000254e:	f005 fb37 	bl	10007bc0 <__aeabi_dmul>
10002552:	1c03      	adds	r3, r0, #0
10002554:	1c0c      	adds	r4, r1, #0
10002556:	1c18      	adds	r0, r3, #0
10002558:	1c21      	adds	r1, r4, #0
1000255a:	4a72      	ldr	r2, [pc, #456]	; (10002724 <IRQ24_Handler+0x2ac>)
1000255c:	4b72      	ldr	r3, [pc, #456]	; (10002728 <IRQ24_Handler+0x2b0>)
1000255e:	f005 fdc9 	bl	100080f4 <__aeabi_dsub>
10002562:	1c03      	adds	r3, r0, #0
10002564:	1c0c      	adds	r4, r1, #0
10002566:	1c18      	adds	r0, r3, #0
10002568:	1c21      	adds	r1, r4, #0
1000256a:	f006 f9ff 	bl	1000896c <__aeabi_d2f>
1000256e:	1c03      	adds	r3, r0, #0
10002570:	607b      	str	r3, [r7, #4]
10002572:	e06e      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if ((ocv > 245.25)  && (ocv <= 250.65)) {soc_f = 9.2593*ocv - 2231.9;}
10002574:	6838      	ldr	r0, [r7, #0]
10002576:	4968      	ldr	r1, [pc, #416]	; (10002718 <IRQ24_Handler+0x2a0>)
10002578:	f004 fae2 	bl	10006b40 <__aeabi_fcmpgt>
1000257c:	1e03      	subs	r3, r0, #0
1000257e:	d028      	beq.n	100025d2 <IRQ24_Handler+0x15a>
10002580:	6838      	ldr	r0, [r7, #0]
10002582:	f006 f99f 	bl	100088c4 <__aeabi_f2d>
10002586:	1c03      	adds	r3, r0, #0
10002588:	1c0c      	adds	r4, r1, #0
1000258a:	1c18      	adds	r0, r3, #0
1000258c:	1c21      	adds	r1, r4, #0
1000258e:	4a67      	ldr	r2, [pc, #412]	; (1000272c <IRQ24_Handler+0x2b4>)
10002590:	4b67      	ldr	r3, [pc, #412]	; (10002730 <IRQ24_Handler+0x2b8>)
10002592:	f004 fa91 	bl	10006ab8 <__aeabi_dcmple>
10002596:	1e03      	subs	r3, r0, #0
10002598:	d01b      	beq.n	100025d2 <IRQ24_Handler+0x15a>
1000259a:	6838      	ldr	r0, [r7, #0]
1000259c:	f006 f992 	bl	100088c4 <__aeabi_f2d>
100025a0:	1c03      	adds	r3, r0, #0
100025a2:	1c0c      	adds	r4, r1, #0
100025a4:	1c18      	adds	r0, r3, #0
100025a6:	1c21      	adds	r1, r4, #0
100025a8:	4a62      	ldr	r2, [pc, #392]	; (10002734 <IRQ24_Handler+0x2bc>)
100025aa:	4b63      	ldr	r3, [pc, #396]	; (10002738 <IRQ24_Handler+0x2c0>)
100025ac:	f005 fb08 	bl	10007bc0 <__aeabi_dmul>
100025b0:	1c03      	adds	r3, r0, #0
100025b2:	1c0c      	adds	r4, r1, #0
100025b4:	1c18      	adds	r0, r3, #0
100025b6:	1c21      	adds	r1, r4, #0
100025b8:	4a5c      	ldr	r2, [pc, #368]	; (1000272c <IRQ24_Handler+0x2b4>)
100025ba:	4b60      	ldr	r3, [pc, #384]	; (1000273c <IRQ24_Handler+0x2c4>)
100025bc:	f005 fd9a 	bl	100080f4 <__aeabi_dsub>
100025c0:	1c03      	adds	r3, r0, #0
100025c2:	1c0c      	adds	r4, r1, #0
100025c4:	1c18      	adds	r0, r3, #0
100025c6:	1c21      	adds	r1, r4, #0
100025c8:	f006 f9d0 	bl	1000896c <__aeabi_d2f>
100025cc:	1c03      	adds	r3, r0, #0
100025ce:	607b      	str	r3, [r7, #4]
100025d0:	e03f      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if ((ocv > 250.65)  && (ocv <= 250.875)){soc_f = 37.037*ocv - 9194.4;}
100025d2:	6838      	ldr	r0, [r7, #0]
100025d4:	f006 f976 	bl	100088c4 <__aeabi_f2d>
100025d8:	1c03      	adds	r3, r0, #0
100025da:	1c0c      	adds	r4, r1, #0
100025dc:	1c18      	adds	r0, r3, #0
100025de:	1c21      	adds	r1, r4, #0
100025e0:	4a52      	ldr	r2, [pc, #328]	; (1000272c <IRQ24_Handler+0x2b4>)
100025e2:	4b53      	ldr	r3, [pc, #332]	; (10002730 <IRQ24_Handler+0x2b8>)
100025e4:	f004 fa72 	bl	10006acc <__aeabi_dcmpgt>
100025e8:	1e03      	subs	r3, r0, #0
100025ea:	d021      	beq.n	10002630 <IRQ24_Handler+0x1b8>
100025ec:	6838      	ldr	r0, [r7, #0]
100025ee:	4954      	ldr	r1, [pc, #336]	; (10002740 <IRQ24_Handler+0x2c8>)
100025f0:	f004 fa9c 	bl	10006b2c <__aeabi_fcmple>
100025f4:	1e03      	subs	r3, r0, #0
100025f6:	d01b      	beq.n	10002630 <IRQ24_Handler+0x1b8>
100025f8:	6838      	ldr	r0, [r7, #0]
100025fa:	f006 f963 	bl	100088c4 <__aeabi_f2d>
100025fe:	1c03      	adds	r3, r0, #0
10002600:	1c0c      	adds	r4, r1, #0
10002602:	1c18      	adds	r0, r3, #0
10002604:	1c21      	adds	r1, r4, #0
10002606:	4a4f      	ldr	r2, [pc, #316]	; (10002744 <IRQ24_Handler+0x2cc>)
10002608:	4b4f      	ldr	r3, [pc, #316]	; (10002748 <IRQ24_Handler+0x2d0>)
1000260a:	f005 fad9 	bl	10007bc0 <__aeabi_dmul>
1000260e:	1c03      	adds	r3, r0, #0
10002610:	1c0c      	adds	r4, r1, #0
10002612:	1c18      	adds	r0, r3, #0
10002614:	1c21      	adds	r1, r4, #0
10002616:	4a4d      	ldr	r2, [pc, #308]	; (1000274c <IRQ24_Handler+0x2d4>)
10002618:	4b4d      	ldr	r3, [pc, #308]	; (10002750 <IRQ24_Handler+0x2d8>)
1000261a:	f005 fd6b 	bl	100080f4 <__aeabi_dsub>
1000261e:	1c03      	adds	r3, r0, #0
10002620:	1c0c      	adds	r4, r1, #0
10002622:	1c18      	adds	r0, r3, #0
10002624:	1c21      	adds	r1, r4, #0
10002626:	f006 f9a1 	bl	1000896c <__aeabi_d2f>
1000262a:	1c03      	adds	r3, r0, #0
1000262c:	607b      	str	r3, [r7, #4]
1000262e:	e010      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if (ocv  > 250.875){soc_f = 100.0;}
10002630:	6838      	ldr	r0, [r7, #0]
10002632:	4943      	ldr	r1, [pc, #268]	; (10002740 <IRQ24_Handler+0x2c8>)
10002634:	f004 fa84 	bl	10006b40 <__aeabi_fcmpgt>
10002638:	1e03      	subs	r3, r0, #0
1000263a:	d002      	beq.n	10002642 <IRQ24_Handler+0x1ca>
1000263c:	4b45      	ldr	r3, [pc, #276]	; (10002754 <IRQ24_Handler+0x2dc>)
1000263e:	607b      	str	r3, [r7, #4]
10002640:	e007      	b.n	10002652 <IRQ24_Handler+0x1da>
	else if (ocv <= 182.25){soc_f = 0.0;}
10002642:	6838      	ldr	r0, [r7, #0]
10002644:	4929      	ldr	r1, [pc, #164]	; (100026ec <IRQ24_Handler+0x274>)
10002646:	f004 fa71 	bl	10006b2c <__aeabi_fcmple>
1000264a:	1e03      	subs	r3, r0, #0
1000264c:	d001      	beq.n	10002652 <IRQ24_Handler+0x1da>
1000264e:	2300      	movs	r3, #0
10002650:	607b      	str	r3, [r7, #4]
	else if (ocv  > 267.6){soc_f = 100.0;}
	else if (ocv <= 194.4){soc_f = 0.0;}
#endif

	/* send PCS status */
	bmsSensor.vbat 		= pduSensor.mBTPT*10;
10002652:	4b25      	ldr	r3, [pc, #148]	; (100026e8 <IRQ24_Handler+0x270>)
10002654:	685b      	ldr	r3, [r3, #4]
10002656:	1c18      	adds	r0, r3, #0
10002658:	493f      	ldr	r1, [pc, #252]	; (10002758 <IRQ24_Handler+0x2e0>)
1000265a:	f004 fb57 	bl	10006d0c <__aeabi_fmul>
1000265e:	1c03      	adds	r3, r0, #0
10002660:	1c18      	adds	r0, r3, #0
10002662:	f004 fa81 	bl	10006b68 <__aeabi_f2uiz>
10002666:	1c03      	adds	r3, r0, #0
10002668:	b29a      	uxth	r2, r3
1000266a:	4b3c      	ldr	r3, [pc, #240]	; (1000275c <IRQ24_Handler+0x2e4>)
1000266c:	805a      	strh	r2, [r3, #2]
//	bmsSensor.ibat 		= genix_data.pack_current;
	bmsSensor.ibat 		= pduSensor.mDCCT*10;
1000266e:	4b1e      	ldr	r3, [pc, #120]	; (100026e8 <IRQ24_Handler+0x270>)
10002670:	68db      	ldr	r3, [r3, #12]
10002672:	1c18      	adds	r0, r3, #0
10002674:	4938      	ldr	r1, [pc, #224]	; (10002758 <IRQ24_Handler+0x2e0>)
10002676:	f004 fb49 	bl	10006d0c <__aeabi_fmul>
1000267a:	1c03      	adds	r3, r0, #0
1000267c:	1c18      	adds	r0, r3, #0
1000267e:	f004 fa73 	bl	10006b68 <__aeabi_f2uiz>
10002682:	1c03      	adds	r3, r0, #0
10002684:	b29a      	uxth	r2, r3
10002686:	4b35      	ldr	r3, [pc, #212]	; (1000275c <IRQ24_Handler+0x2e4>)
10002688:	809a      	strh	r2, [r3, #4]
//	bmsSensor.soc		= genix_data.pack_soc;
	bmsSensor.soc		= soc_f*10;
1000268a:	6878      	ldr	r0, [r7, #4]
1000268c:	4932      	ldr	r1, [pc, #200]	; (10002758 <IRQ24_Handler+0x2e0>)
1000268e:	f004 fb3d 	bl	10006d0c <__aeabi_fmul>
10002692:	1c03      	adds	r3, r0, #0
10002694:	1c18      	adds	r0, r3, #0
10002696:	f004 fa67 	bl	10006b68 <__aeabi_f2uiz>
1000269a:	1c03      	adds	r3, r0, #0
1000269c:	b29a      	uxth	r2, r3
1000269e:	4b2f      	ldr	r3, [pc, #188]	; (1000275c <IRQ24_Handler+0x2e4>)
100026a0:	801a      	strh	r2, [r3, #0]
	bmsSensor.tempbat 	= genix_data.pack_max_temp;
100026a2:	4b2f      	ldr	r3, [pc, #188]	; (10002760 <IRQ24_Handler+0x2e8>)
100026a4:	889a      	ldrh	r2, [r3, #4]
100026a6:	4b2d      	ldr	r3, [pc, #180]	; (1000275c <IRQ24_Handler+0x2e4>)
100026a8:	80da      	strh	r2, [r3, #6]

	GENIX_RequestData(GENIX_SUMMARY);
100026aa:	2002      	movs	r0, #2
100026ac:	f001 fc92 	bl	10003fd4 <GENIX_RequestData>
	PCS_BMUTransmitToPCS(0x100, &pcsBmsStatus, &bmsSensor);
100026b0:	2380      	movs	r3, #128	; 0x80
100026b2:	0059      	lsls	r1, r3, #1
100026b4:	4a2b      	ldr	r2, [pc, #172]	; (10002764 <IRQ24_Handler+0x2ec>)
100026b6:	4b29      	ldr	r3, [pc, #164]	; (1000275c <IRQ24_Handler+0x2e4>)
100026b8:	1c08      	adds	r0, r1, #0
100026ba:	1c11      	adds	r1, r2, #0
100026bc:	1c1a      	adds	r2, r3, #0
100026be:	f000 fde3 	bl	10003288 <PCS_BMUTransmitToPCS>
	PCS_BMUTransmitToPCS(0x101, &pcsBmsStatus, &bmsSensor);
100026c2:	2302      	movs	r3, #2
100026c4:	33ff      	adds	r3, #255	; 0xff
100026c6:	1c19      	adds	r1, r3, #0
100026c8:	4a26      	ldr	r2, [pc, #152]	; (10002764 <IRQ24_Handler+0x2ec>)
100026ca:	4b24      	ldr	r3, [pc, #144]	; (1000275c <IRQ24_Handler+0x2e4>)
100026cc:	1c08      	adds	r0, r1, #0
100026ce:	1c11      	adds	r1, r2, #0
100026d0:	1c1a      	adds	r2, r3, #0
100026d2:	f000 fdd9 	bl	10003288 <PCS_BMUTransmitToPCS>
	XMC_CCU4_SLICE_ClearEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100026d6:	4b24      	ldr	r3, [pc, #144]	; (10002768 <IRQ24_Handler+0x2f0>)
100026d8:	1c18      	adds	r0, r3, #0
100026da:	2100      	movs	r1, #0
100026dc:	f7ff f814 	bl	10001708 <XMC_CCU4_SLICE_ClearEvent>
}
100026e0:	46bd      	mov	sp, r7
100026e2:	b003      	add	sp, #12
100026e4:	bd90      	pop	{r4, r7, pc}
100026e6:	46c0      	nop			; (mov r8, r8)
100026e8:	20000b38 	.word	0x20000b38
100026ec:	43364000 	.word	0x43364000
100026f0:	4349c000 	.word	0x4349c000
100026f4:	a3d70a3d 	.word	0xa3d70a3d
100026f8:	3fc23d70 	.word	0x3fc23d70
100026fc:	a1cac083 	.word	0xa1cac083
10002700:	4039f645 	.word	0x4039f645
10002704:	436b2000 	.word	0x436b2000
10002708:	13a92a30 	.word	0x13a92a30
1000270c:	3fd444d0 	.word	0x3fd444d0
10002710:	3b645a1d 	.word	0x3b645a1d
10002714:	404eafdf 	.word	0x404eafdf
10002718:	43754000 	.word	0x43754000
1000271c:	80346dc6 	.word	0x80346dc6
10002720:	4003c0b7 	.word	0x4003c0b7
10002724:	28f5c28f 	.word	0x28f5c28f
10002728:	4081b55c 	.word	0x4081b55c
1000272c:	cccccccd 	.word	0xcccccccd
10002730:	406f54cc 	.word	0x406f54cc
10002734:	f837b4a2 	.word	0xf837b4a2
10002738:	402284c2 	.word	0x402284c2
1000273c:	40a16fcc 	.word	0x40a16fcc
10002740:	437ae000 	.word	0x437ae000
10002744:	6a7ef9db 	.word	0x6a7ef9db
10002748:	404284bc 	.word	0x404284bc
1000274c:	33333333 	.word	0x33333333
10002750:	40c1f533 	.word	0x40c1f533
10002754:	42c80000 	.word	0x42c80000
10002758:	41200000 	.word	0x41200000
1000275c:	20000a3c 	.word	0x20000a3c
10002760:	20000ad4 	.word	0x20000ad4
10002764:	20000b50 	.word	0x20000b50
10002768:	48040200 	.word	0x48040200

1000276c <IRQ21_Handler>:

void five_hundreds_intrpt_handler(void)
{
1000276c:	b580      	push	{r7, lr}
1000276e:	af00      	add	r7, sp, #0
	static uint8_t counting=0;
	if(counting == 1)
10002770:	4b1e      	ldr	r3, [pc, #120]	; (100027ec <IRQ21_Handler+0x80>)
10002772:	781b      	ldrb	r3, [r3, #0]
10002774:	2b01      	cmp	r3, #1
10002776:	d118      	bne.n	100027aa <IRQ21_Handler+0x3e>
	{
		if(sysTickParamHandle.enable)
10002778:	4b1d      	ldr	r3, [pc, #116]	; (100027f0 <IRQ21_Handler+0x84>)
1000277a:	781b      	ldrb	r3, [r3, #0]
1000277c:	2b00      	cmp	r3, #0
1000277e:	d010      	beq.n	100027a2 <IRQ21_Handler+0x36>
		{
			if(sysTickParamHandle.count == 0)
10002780:	4b1b      	ldr	r3, [pc, #108]	; (100027f0 <IRQ21_Handler+0x84>)
10002782:	885b      	ldrh	r3, [r3, #2]
10002784:	2b00      	cmp	r3, #0
10002786:	d106      	bne.n	10002796 <IRQ21_Handler+0x2a>
			{
				sysTickParamHandle.enable = false;
10002788:	4b19      	ldr	r3, [pc, #100]	; (100027f0 <IRQ21_Handler+0x84>)
1000278a:	2200      	movs	r2, #0
1000278c:	701a      	strb	r2, [r3, #0]
				sysTickParamHandle.isTimeOut = true;
1000278e:	4b18      	ldr	r3, [pc, #96]	; (100027f0 <IRQ21_Handler+0x84>)
10002790:	2201      	movs	r2, #1
10002792:	711a      	strb	r2, [r3, #4]
10002794:	e005      	b.n	100027a2 <IRQ21_Handler+0x36>
			}
			else
			{
				sysTickParamHandle.count--;
10002796:	4b16      	ldr	r3, [pc, #88]	; (100027f0 <IRQ21_Handler+0x84>)
10002798:	885b      	ldrh	r3, [r3, #2]
1000279a:	3b01      	subs	r3, #1
1000279c:	b29a      	uxth	r2, r3
1000279e:	4b14      	ldr	r3, [pc, #80]	; (100027f0 <IRQ21_Handler+0x84>)
100027a0:	805a      	strh	r2, [r3, #2]
			}
		}
		counting = 0;
100027a2:	4b12      	ldr	r3, [pc, #72]	; (100027ec <IRQ21_Handler+0x80>)
100027a4:	2200      	movs	r2, #0
100027a6:	701a      	strb	r2, [r3, #0]
100027a8:	e005      	b.n	100027b6 <IRQ21_Handler+0x4a>
	}
	else
	{
		counting++;
100027aa:	4b10      	ldr	r3, [pc, #64]	; (100027ec <IRQ21_Handler+0x80>)
100027ac:	781b      	ldrb	r3, [r3, #0]
100027ae:	3301      	adds	r3, #1
100027b0:	b2da      	uxtb	r2, r3
100027b2:	4b0e      	ldr	r3, [pc, #56]	; (100027ec <IRQ21_Handler+0x80>)
100027b4:	701a      	strb	r2, [r3, #0]
	}
	buffptr = ESP32_Map_Data(&data_group);
100027b6:	4b0f      	ldr	r3, [pc, #60]	; (100027f4 <IRQ21_Handler+0x88>)
100027b8:	1c18      	adds	r0, r3, #0
100027ba:	f001 fe13 	bl	100043e4 <ESP32_Map_Data>
100027be:	1c02      	adds	r2, r0, #0
100027c0:	4b0d      	ldr	r3, [pc, #52]	; (100027f8 <IRQ21_Handler+0x8c>)
100027c2:	601a      	str	r2, [r3, #0]
	memcpy(espBuffer, buffptr, ESP_DATA_LENGTH);
100027c4:	4b0c      	ldr	r3, [pc, #48]	; (100027f8 <IRQ21_Handler+0x8c>)
100027c6:	681b      	ldr	r3, [r3, #0]
100027c8:	4a0c      	ldr	r2, [pc, #48]	; (100027fc <IRQ21_Handler+0x90>)
100027ca:	1c10      	adds	r0, r2, #0
100027cc:	1c19      	adds	r1, r3, #0
100027ce:	224b      	movs	r2, #75	; 0x4b
100027d0:	f006 f9a6 	bl	10008b20 <memcpy>
	ESP32_SendStream((char*)&espBuffer, ESP_DATA_LENGTH);
100027d4:	4b09      	ldr	r3, [pc, #36]	; (100027fc <IRQ21_Handler+0x90>)
100027d6:	1c18      	adds	r0, r3, #0
100027d8:	214b      	movs	r1, #75	; 0x4b
100027da:	f001 fdc9 	bl	10004370 <ESP32_SendStream>

	XMC_CCU4_SLICE_ClearEvent(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100027de:	4b08      	ldr	r3, [pc, #32]	; (10002800 <IRQ21_Handler+0x94>)
100027e0:	1c18      	adds	r0, r3, #0
100027e2:	2100      	movs	r1, #0
100027e4:	f7fe ff90 	bl	10001708 <XMC_CCU4_SLICE_ClearEvent>
}
100027e8:	46bd      	mov	sp, r7
100027ea:	bd80      	pop	{r7, pc}
100027ec:	200007a0 	.word	0x200007a0
100027f0:	20000a98 	.word	0x20000a98
100027f4:	20000a48 	.word	0x20000a48
100027f8:	20000aac 	.word	0x20000aac
100027fc:	20000ae0 	.word	0x20000ae0
10002800:	48040300 	.word	0x48040300

10002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002804:	b580      	push	{r7, lr}
10002806:	b082      	sub	sp, #8
10002808:	af00      	add	r7, sp, #0
1000280a:	1c02      	adds	r2, r0, #0
1000280c:	1dfb      	adds	r3, r7, #7
1000280e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002810:	1dfb      	adds	r3, r7, #7
10002812:	781b      	ldrb	r3, [r3, #0]
10002814:	2b7f      	cmp	r3, #127	; 0x7f
10002816:	d809      	bhi.n	1000282c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002818:	4b06      	ldr	r3, [pc, #24]	; (10002834 <__NVIC_EnableIRQ+0x30>)
1000281a:	1dfa      	adds	r2, r7, #7
1000281c:	7812      	ldrb	r2, [r2, #0]
1000281e:	1c11      	adds	r1, r2, #0
10002820:	221f      	movs	r2, #31
10002822:	400a      	ands	r2, r1
10002824:	2101      	movs	r1, #1
10002826:	4091      	lsls	r1, r2
10002828:	1c0a      	adds	r2, r1, #0
1000282a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
1000282c:	46bd      	mov	sp, r7
1000282e:	b002      	add	sp, #8
10002830:	bd80      	pop	{r7, pc}
10002832:	46c0      	nop			; (mov r8, r8)
10002834:	e000e100 	.word	0xe000e100

10002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002838:	b5b0      	push	{r4, r5, r7, lr}
1000283a:	b082      	sub	sp, #8
1000283c:	af00      	add	r7, sp, #0
1000283e:	1c02      	adds	r2, r0, #0
10002840:	6039      	str	r1, [r7, #0]
10002842:	1dfb      	adds	r3, r7, #7
10002844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002846:	1dfb      	adds	r3, r7, #7
10002848:	781b      	ldrb	r3, [r3, #0]
1000284a:	2b7f      	cmp	r3, #127	; 0x7f
1000284c:	d827      	bhi.n	1000289e <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000284e:	4c2d      	ldr	r4, [pc, #180]	; (10002904 <__NVIC_SetPriority+0xcc>)
10002850:	1dfb      	adds	r3, r7, #7
10002852:	781b      	ldrb	r3, [r3, #0]
10002854:	b25b      	sxtb	r3, r3
10002856:	089b      	lsrs	r3, r3, #2
10002858:	492a      	ldr	r1, [pc, #168]	; (10002904 <__NVIC_SetPriority+0xcc>)
1000285a:	1dfa      	adds	r2, r7, #7
1000285c:	7812      	ldrb	r2, [r2, #0]
1000285e:	b252      	sxtb	r2, r2
10002860:	0892      	lsrs	r2, r2, #2
10002862:	32c0      	adds	r2, #192	; 0xc0
10002864:	0092      	lsls	r2, r2, #2
10002866:	5852      	ldr	r2, [r2, r1]
10002868:	1df9      	adds	r1, r7, #7
1000286a:	7809      	ldrb	r1, [r1, #0]
1000286c:	1c08      	adds	r0, r1, #0
1000286e:	2103      	movs	r1, #3
10002870:	4001      	ands	r1, r0
10002872:	00c9      	lsls	r1, r1, #3
10002874:	1c08      	adds	r0, r1, #0
10002876:	21ff      	movs	r1, #255	; 0xff
10002878:	4081      	lsls	r1, r0
1000287a:	43c9      	mvns	r1, r1
1000287c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000287e:	683a      	ldr	r2, [r7, #0]
10002880:	0192      	lsls	r2, r2, #6
10002882:	20ff      	movs	r0, #255	; 0xff
10002884:	4002      	ands	r2, r0
10002886:	1df8      	adds	r0, r7, #7
10002888:	7800      	ldrb	r0, [r0, #0]
1000288a:	1c05      	adds	r5, r0, #0
1000288c:	2003      	movs	r0, #3
1000288e:	4028      	ands	r0, r5
10002890:	00c0      	lsls	r0, r0, #3
10002892:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002894:	430a      	orrs	r2, r1
10002896:	33c0      	adds	r3, #192	; 0xc0
10002898:	009b      	lsls	r3, r3, #2
1000289a:	511a      	str	r2, [r3, r4]
1000289c:	e02e      	b.n	100028fc <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000289e:	4c1a      	ldr	r4, [pc, #104]	; (10002908 <__NVIC_SetPriority+0xd0>)
100028a0:	1dfb      	adds	r3, r7, #7
100028a2:	781b      	ldrb	r3, [r3, #0]
100028a4:	1c1a      	adds	r2, r3, #0
100028a6:	230f      	movs	r3, #15
100028a8:	4013      	ands	r3, r2
100028aa:	3b08      	subs	r3, #8
100028ac:	0899      	lsrs	r1, r3, #2
100028ae:	4a16      	ldr	r2, [pc, #88]	; (10002908 <__NVIC_SetPriority+0xd0>)
100028b0:	1dfb      	adds	r3, r7, #7
100028b2:	781b      	ldrb	r3, [r3, #0]
100028b4:	1c18      	adds	r0, r3, #0
100028b6:	230f      	movs	r3, #15
100028b8:	4003      	ands	r3, r0
100028ba:	3b08      	subs	r3, #8
100028bc:	089b      	lsrs	r3, r3, #2
100028be:	3306      	adds	r3, #6
100028c0:	009b      	lsls	r3, r3, #2
100028c2:	18d3      	adds	r3, r2, r3
100028c4:	685b      	ldr	r3, [r3, #4]
100028c6:	1dfa      	adds	r2, r7, #7
100028c8:	7812      	ldrb	r2, [r2, #0]
100028ca:	1c10      	adds	r0, r2, #0
100028cc:	2203      	movs	r2, #3
100028ce:	4002      	ands	r2, r0
100028d0:	00d2      	lsls	r2, r2, #3
100028d2:	1c10      	adds	r0, r2, #0
100028d4:	22ff      	movs	r2, #255	; 0xff
100028d6:	4082      	lsls	r2, r0
100028d8:	43d2      	mvns	r2, r2
100028da:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100028dc:	683b      	ldr	r3, [r7, #0]
100028de:	019b      	lsls	r3, r3, #6
100028e0:	20ff      	movs	r0, #255	; 0xff
100028e2:	4003      	ands	r3, r0
100028e4:	1df8      	adds	r0, r7, #7
100028e6:	7800      	ldrb	r0, [r0, #0]
100028e8:	1c05      	adds	r5, r0, #0
100028ea:	2003      	movs	r0, #3
100028ec:	4028      	ands	r0, r5
100028ee:	00c0      	lsls	r0, r0, #3
100028f0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100028f2:	431a      	orrs	r2, r3
100028f4:	1d8b      	adds	r3, r1, #6
100028f6:	009b      	lsls	r3, r3, #2
100028f8:	18e3      	adds	r3, r4, r3
100028fa:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100028fc:	46bd      	mov	sp, r7
100028fe:	b002      	add	sp, #8
10002900:	bdb0      	pop	{r4, r5, r7, pc}
10002902:	46c0      	nop			; (mov r8, r8)
10002904:	e000e100 	.word	0xe000e100
10002908:	e000ed00 	.word	0xe000ed00

1000290c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000290c:	b580      	push	{r7, lr}
1000290e:	b082      	sub	sp, #8
10002910:	af00      	add	r7, sp, #0
10002912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002914:	687b      	ldr	r3, [r7, #4]
10002916:	2280      	movs	r2, #128	; 0x80
10002918:	0052      	lsls	r2, r2, #1
1000291a:	60da      	str	r2, [r3, #12]
}
1000291c:	46bd      	mov	sp, r7
1000291e:	b002      	add	sp, #8
10002920:	bd80      	pop	{r7, pc}
10002922:	46c0      	nop			; (mov r8, r8)

10002924 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
10002924:	b580      	push	{r7, lr}
10002926:	b082      	sub	sp, #8
10002928:	af00      	add	r7, sp, #0
1000292a:	6078      	str	r0, [r7, #4]
1000292c:	1c0a      	adds	r2, r1, #0
1000292e:	1cfb      	adds	r3, r7, #3
10002930:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
10002932:	1cfb      	adds	r3, r7, #3
10002934:	781b      	ldrb	r3, [r3, #0]
10002936:	2201      	movs	r2, #1
10002938:	409a      	lsls	r2, r3
1000293a:	687b      	ldr	r3, [r7, #4]
1000293c:	60da      	str	r2, [r3, #12]
}
1000293e:	46bd      	mov	sp, r7
10002940:	b002      	add	sp, #8
10002942:	bd80      	pop	{r7, pc}

10002944 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
10002944:	b580      	push	{r7, lr}
10002946:	b082      	sub	sp, #8
10002948:	af00      	add	r7, sp, #0
1000294a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1000294c:	687b      	ldr	r3, [r7, #4]
1000294e:	2201      	movs	r2, #1
10002950:	60da      	str	r2, [r3, #12]
}
10002952:	46bd      	mov	sp, r7
10002954:	b002      	add	sp, #8
10002956:	bd80      	pop	{r7, pc}

10002958 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
10002958:	b580      	push	{r7, lr}
1000295a:	b082      	sub	sp, #8
1000295c:	af00      	add	r7, sp, #0
1000295e:	6078      	str	r0, [r7, #4]
10002960:	1c0a      	adds	r2, r1, #0
10002962:	1cbb      	adds	r3, r7, #2
10002964:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10002966:	1cbb      	adds	r3, r7, #2
10002968:	881a      	ldrh	r2, [r3, #0]
1000296a:	687b      	ldr	r3, [r7, #4]
1000296c:	635a      	str	r2, [r3, #52]	; 0x34
}
1000296e:	46bd      	mov	sp, r7
10002970:	b002      	add	sp, #8
10002972:	bd80      	pop	{r7, pc}

10002974 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002974:	b580      	push	{r7, lr}
10002976:	b082      	sub	sp, #8
10002978:	af00      	add	r7, sp, #0
1000297a:	6078      	str	r0, [r7, #4]
1000297c:	1c0a      	adds	r2, r1, #0
1000297e:	1cbb      	adds	r3, r7, #2
10002980:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002982:	1cbb      	adds	r3, r7, #2
10002984:	881a      	ldrh	r2, [r3, #0]
10002986:	687b      	ldr	r3, [r7, #4]
10002988:	63da      	str	r2, [r3, #60]	; 0x3c
}
1000298a:	46bd      	mov	sp, r7
1000298c:	b002      	add	sp, #8
1000298e:	bd80      	pop	{r7, pc}

10002990 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002990:	b580      	push	{r7, lr}
10002992:	b082      	sub	sp, #8
10002994:	af00      	add	r7, sp, #0
10002996:	6078      	str	r0, [r7, #4]
10002998:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000299a:	687b      	ldr	r3, [r7, #4]
1000299c:	683a      	ldr	r2, [r7, #0]
1000299e:	611a      	str	r2, [r3, #16]
}
100029a0:	46bd      	mov	sp, r7
100029a2:	b002      	add	sp, #8
100029a4:	bd80      	pop	{r7, pc}
100029a6:	46c0      	nop			; (mov r8, r8)

100029a8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
100029a8:	b580      	push	{r7, lr}
100029aa:	b082      	sub	sp, #8
100029ac:	af00      	add	r7, sp, #0
100029ae:	6078      	str	r0, [r7, #4]
100029b0:	1c0a      	adds	r2, r1, #0
100029b2:	1cfb      	adds	r3, r7, #3
100029b4:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100029b6:	687b      	ldr	r3, [r7, #4]
100029b8:	22a4      	movs	r2, #164	; 0xa4
100029ba:	589a      	ldr	r2, [r3, r2]
100029bc:	1cfb      	adds	r3, r7, #3
100029be:	781b      	ldrb	r3, [r3, #0]
100029c0:	2101      	movs	r1, #1
100029c2:	4099      	lsls	r1, r3
100029c4:	1c0b      	adds	r3, r1, #0
100029c6:	431a      	orrs	r2, r3
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	21a4      	movs	r1, #164	; 0xa4
100029cc:	505a      	str	r2, [r3, r1]
}
100029ce:	46bd      	mov	sp, r7
100029d0:	b002      	add	sp, #8
100029d2:	bd80      	pop	{r7, pc}

100029d4 <TIMING_TimerInit>:
 */

#include "timing_op.h"

void TIMING_TimerInit(void)
{
100029d4:	b580      	push	{r7, lr}
100029d6:	af00      	add	r7, sp, #0

	/* Enable clock, enable prescaler block and configure global control */
	XMC_CCU4_Init(CCU40, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
100029d8:	4b53      	ldr	r3, [pc, #332]	; (10002b28 <TIMING_TimerInit+0x154>)
100029da:	1c18      	adds	r0, r3, #0
100029dc:	2100      	movs	r1, #0
100029de:	f002 ffa5 	bl	1000592c <XMC_CCU4_Init>

	/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(CCU40);
100029e2:	4b51      	ldr	r3, [pc, #324]	; (10002b28 <TIMING_TimerInit+0x154>)
100029e4:	1c18      	adds	r0, r3, #0
100029e6:	f7ff ff91 	bl	1000290c <XMC_CCU4_StartPrescaler>

	/* Start of CCU4 configurations */
	/* Ensure fCCU reaches CCU40 */
	XMC_CCU4_SetModuleClock(CCU40, XMC_CCU4_CLOCK_SCU);
100029ea:	4b4f      	ldr	r3, [pc, #316]	; (10002b28 <TIMING_TimerInit+0x154>)
100029ec:	1c18      	adds	r0, r3, #0
100029ee:	2100      	movs	r1, #0
100029f0:	f002 ffc0 	bl	10005974 <XMC_CCU4_SetModuleClock>

	//Configure Slice(s) Functions, Interrupts and Start-up
	/* Initialize the Slice */
	XMC_CCU4_SLICE_CompareInit(CCU40_CC40, &SLICE0_config);
100029f4:	4a4d      	ldr	r2, [pc, #308]	; (10002b2c <TIMING_TimerInit+0x158>)
100029f6:	4b4e      	ldr	r3, [pc, #312]	; (10002b30 <TIMING_TimerInit+0x15c>)
100029f8:	1c10      	adds	r0, r2, #0
100029fa:	1c19      	adds	r1, r3, #0
100029fc:	f002 ffd4 	bl	100059a8 <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CompareInit(CCU40_CC41, &SLICE1_config);
10002a00:	4a4c      	ldr	r2, [pc, #304]	; (10002b34 <TIMING_TimerInit+0x160>)
10002a02:	4b4d      	ldr	r3, [pc, #308]	; (10002b38 <TIMING_TimerInit+0x164>)
10002a04:	1c10      	adds	r0, r2, #0
10002a06:	1c19      	adds	r1, r3, #0
10002a08:	f002 ffce 	bl	100059a8 <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CompareInit(CCU40_CC42, &SLICE2_config);
10002a0c:	4a4b      	ldr	r2, [pc, #300]	; (10002b3c <TIMING_TimerInit+0x168>)
10002a0e:	4b4c      	ldr	r3, [pc, #304]	; (10002b40 <TIMING_TimerInit+0x16c>)
10002a10:	1c10      	adds	r0, r2, #0
10002a12:	1c19      	adds	r1, r3, #0
10002a14:	f002 ffc8 	bl	100059a8 <XMC_CCU4_SLICE_CompareInit>


	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 32 = 3 MHz */
	/* Program duty cycle[50%] and frequency [1 kHz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC40, 1500); // any value less than PWM Period Counter
10002a18:	4a44      	ldr	r2, [pc, #272]	; (10002b2c <TIMING_TimerInit+0x158>)
10002a1a:	4b4a      	ldr	r3, [pc, #296]	; (10002b44 <TIMING_TimerInit+0x170>)
10002a1c:	1c10      	adds	r0, r2, #0
10002a1e:	1c19      	adds	r1, r3, #0
10002a20:	f7ff ffa8 	bl	10002974 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC40, 3000);
10002a24:	4a41      	ldr	r2, [pc, #260]	; (10002b2c <TIMING_TimerInit+0x158>)
10002a26:	4b48      	ldr	r3, [pc, #288]	; (10002b48 <TIMING_TimerInit+0x174>)
10002a28:	1c10      	adds	r0, r2, #0
10002a2a:	1c19      	adds	r1, r3, #0
10002a2c:	f7ff ff94 	bl	10002958 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	/* Freq / Prescaler 1024 = 93750 Hz */
	/* Program duty cycle[50%] and frequency [10 Hz] */
//	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC41, 4687); // any value less than PWM Period Counter
//	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC41, 9375);
	/* Program duty cycle[50%] and frequency [9.375 Hz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC41, 5000); // any value less than PWM Period Counter
10002a30:	4a40      	ldr	r2, [pc, #256]	; (10002b34 <TIMING_TimerInit+0x160>)
10002a32:	4b46      	ldr	r3, [pc, #280]	; (10002b4c <TIMING_TimerInit+0x178>)
10002a34:	1c10      	adds	r0, r2, #0
10002a36:	1c19      	adds	r1, r3, #0
10002a38:	f7ff ff9c 	bl	10002974 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC41, 10000);
10002a3c:	4a3d      	ldr	r2, [pc, #244]	; (10002b34 <TIMING_TimerInit+0x160>)
10002a3e:	4b44      	ldr	r3, [pc, #272]	; (10002b50 <TIMING_TimerInit+0x17c>)
10002a40:	1c10      	adds	r0, r2, #0
10002a42:	1c19      	adds	r1, r3, #0
10002a44:	f7ff ff88 	bl	10002958 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Frequency CCU4 = 96MHz */
	/* Freq / Prescaler 8192 = 11718.75 Hz */
	/* Program duty cycle[50%] and frequency [2 Hz] */
	XMC_CCU4_SLICE_SetTimerCompareMatch(CCU40_CC42, 2930); // any value less than PWM Period Counter
10002a48:	4a3c      	ldr	r2, [pc, #240]	; (10002b3c <TIMING_TimerInit+0x168>)
10002a4a:	4b42      	ldr	r3, [pc, #264]	; (10002b54 <TIMING_TimerInit+0x180>)
10002a4c:	1c10      	adds	r0, r2, #0
10002a4e:	1c19      	adds	r1, r3, #0
10002a50:	f7ff ff90 	bl	10002974 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU40_CC42, 5859);
10002a54:	4a39      	ldr	r2, [pc, #228]	; (10002b3c <TIMING_TimerInit+0x168>)
10002a56:	4b40      	ldr	r3, [pc, #256]	; (10002b58 <TIMING_TimerInit+0x184>)
10002a58:	1c10      	adds	r0, r2, #0
10002a5a:	1c19      	adds	r1, r3, #0
10002a5c:	f7ff ff7c 	bl	10002958 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Enable shadow transfer for PWM Slice */
	XMC_CCU4_EnableShadowTransfer(CCU40, \
10002a60:	4b31      	ldr	r3, [pc, #196]	; (10002b28 <TIMING_TimerInit+0x154>)
10002a62:	1c18      	adds	r0, r3, #0
10002a64:	2105      	movs	r1, #5
10002a66:	f7ff ff93 	bl	10002990 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
	XMC_CCU4_EnableShadowTransfer(CCU40, \
10002a6a:	4b2f      	ldr	r3, [pc, #188]	; (10002b28 <TIMING_TimerInit+0x154>)
10002a6c:	1c18      	adds	r0, r3, #0
10002a6e:	2150      	movs	r1, #80	; 0x50
10002a70:	f7ff ff8e 	bl	10002990 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_1|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1));
	XMC_CCU4_EnableShadowTransfer(CCU40, \
10002a74:	4a2c      	ldr	r2, [pc, #176]	; (10002b28 <TIMING_TimerInit+0x154>)
10002a76:	23a0      	movs	r3, #160	; 0xa0
10002a78:	00db      	lsls	r3, r3, #3
10002a7a:	1c10      	adds	r0, r2, #0
10002a7c:	1c19      	adds	r1, r3, #0
10002a7e:	f7ff ff87 	bl	10002990 <XMC_CCU4_EnableShadowTransfer>
		(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_2|XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2));

	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a82:	4b2a      	ldr	r3, [pc, #168]	; (10002b2c <TIMING_TimerInit+0x158>)
10002a84:	1c18      	adds	r0, r3, #0
10002a86:	2100      	movs	r1, #0
10002a88:	f7ff ff8e 	bl	100029a8 <XMC_CCU4_SLICE_EnableEvent>
	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a8c:	4b29      	ldr	r3, [pc, #164]	; (10002b34 <TIMING_TimerInit+0x160>)
10002a8e:	1c18      	adds	r0, r3, #0
10002a90:	2100      	movs	r1, #0
10002a92:	f7ff ff89 	bl	100029a8 <XMC_CCU4_SLICE_EnableEvent>
	/* Enable events */
	XMC_CCU4_SLICE_EnableEvent(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002a96:	4b29      	ldr	r3, [pc, #164]	; (10002b3c <TIMING_TimerInit+0x168>)
10002a98:	1c18      	adds	r0, r3, #0
10002a9a:	2100      	movs	r1, #0
10002a9c:	f7ff ff84 	bl	100029a8 <XMC_CCU4_SLICE_EnableEvent>

	/* Connect event to SR2 */
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC40, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_2);
10002aa0:	4b22      	ldr	r3, [pc, #136]	; (10002b2c <TIMING_TimerInit+0x158>)
10002aa2:	1c18      	adds	r0, r3, #0
10002aa4:	2100      	movs	r1, #0
10002aa6:	2202      	movs	r2, #2
10002aa8:	f002 ffb2 	bl	10005a10 <XMC_CCU4_SLICE_SetInterruptNode>
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC41, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_3);
10002aac:	4b21      	ldr	r3, [pc, #132]	; (10002b34 <TIMING_TimerInit+0x160>)
10002aae:	1c18      	adds	r0, r3, #0
10002ab0:	2100      	movs	r1, #0
10002ab2:	2203      	movs	r2, #3
10002ab4:	f002 ffac 	bl	10005a10 <XMC_CCU4_SLICE_SetInterruptNode>
	XMC_CCU4_SLICE_SetInterruptNode(CCU40_CC42, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH, XMC_CCU4_SLICE_SR_ID_0);
10002ab8:	4b20      	ldr	r3, [pc, #128]	; (10002b3c <TIMING_TimerInit+0x168>)
10002aba:	1c18      	adds	r0, r3, #0
10002abc:	2100      	movs	r1, #0
10002abe:	2200      	movs	r2, #0
10002ac0:	f002 ffa6 	bl	10005a10 <XMC_CCU4_SLICE_SetInterruptNode>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ23_IRQn, 3U); // for CCU40_CC40
10002ac4:	2017      	movs	r0, #23
10002ac6:	2103      	movs	r1, #3
10002ac8:	f7ff feb6 	bl	10002838 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ23_IRQn);
10002acc:	2017      	movs	r0, #23
10002ace:	f7ff fe99 	bl	10002804 <__NVIC_EnableIRQ>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ24_IRQn, 9U); // for CCU40_CC41
10002ad2:	2018      	movs	r0, #24
10002ad4:	2109      	movs	r1, #9
10002ad6:	f7ff feaf 	bl	10002838 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ24_IRQn);
10002ada:	2018      	movs	r0, #24
10002adc:	f7ff fe92 	bl	10002804 <__NVIC_EnableIRQ>

	/* Set NVIC priority */
	NVIC_SetPriority(IRQ21_IRQn, 2U); // for CCU40_CC42
10002ae0:	2015      	movs	r0, #21
10002ae2:	2102      	movs	r1, #2
10002ae4:	f7ff fea8 	bl	10002838 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ21_IRQn);
10002ae8:	2015      	movs	r0, #21
10002aea:	f7ff fe8b 	bl	10002804 <__NVIC_EnableIRQ>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(CCU40, 0U);
10002aee:	4b0e      	ldr	r3, [pc, #56]	; (10002b28 <TIMING_TimerInit+0x154>)
10002af0:	1c18      	adds	r0, r3, #0
10002af2:	2100      	movs	r1, #0
10002af4:	f7ff ff16 	bl	10002924 <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(CCU40, 1U);
10002af8:	4b0b      	ldr	r3, [pc, #44]	; (10002b28 <TIMING_TimerInit+0x154>)
10002afa:	1c18      	adds	r0, r3, #0
10002afc:	2101      	movs	r1, #1
10002afe:	f7ff ff11 	bl	10002924 <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(CCU40, 2U);
10002b02:	4b09      	ldr	r3, [pc, #36]	; (10002b28 <TIMING_TimerInit+0x154>)
10002b04:	1c18      	adds	r0, r3, #0
10002b06:	2102      	movs	r1, #2
10002b08:	f7ff ff0c 	bl	10002924 <XMC_CCU4_EnableClock>

	/* Start the TImer*/
	XMC_CCU4_SLICE_StartTimer(CCU40_CC40); // timer for Handshaking
10002b0c:	4b07      	ldr	r3, [pc, #28]	; (10002b2c <TIMING_TimerInit+0x158>)
10002b0e:	1c18      	adds	r0, r3, #0
10002b10:	f7ff ff18 	bl	10002944 <XMC_CCU4_SLICE_StartTimer>
	XMC_CCU4_SLICE_StartTimer(CCU40_CC41); // clocking for BMS and ESP32
10002b14:	4b07      	ldr	r3, [pc, #28]	; (10002b34 <TIMING_TimerInit+0x160>)
10002b16:	1c18      	adds	r0, r3, #0
10002b18:	f7ff ff14 	bl	10002944 <XMC_CCU4_SLICE_StartTimer>
	XMC_CCU4_SLICE_StartTimer(CCU40_CC42); // send data via bluetooth
10002b1c:	4b07      	ldr	r3, [pc, #28]	; (10002b3c <TIMING_TimerInit+0x168>)
10002b1e:	1c18      	adds	r0, r3, #0
10002b20:	f7ff ff10 	bl	10002944 <XMC_CCU4_SLICE_StartTimer>

}
10002b24:	46bd      	mov	sp, r7
10002b26:	bd80      	pop	{r7, pc}
10002b28:	48040000 	.word	0x48040000
10002b2c:	48040100 	.word	0x48040100
10002b30:	20000550 	.word	0x20000550
10002b34:	48040200 	.word	0x48040200
10002b38:	20000558 	.word	0x20000558
10002b3c:	48040300 	.word	0x48040300
10002b40:	20000560 	.word	0x20000560
10002b44:	000005dc 	.word	0x000005dc
10002b48:	00000bb8 	.word	0x00000bb8
10002b4c:	00001388 	.word	0x00001388
10002b50:	00002710 	.word	0x00002710
10002b54:	00000b72 	.word	0x00000b72
10002b58:	000016e3 	.word	0x000016e3

10002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002b5c:	b580      	push	{r7, lr}
10002b5e:	b082      	sub	sp, #8
10002b60:	af00      	add	r7, sp, #0
10002b62:	1c02      	adds	r2, r0, #0
10002b64:	1dfb      	adds	r3, r7, #7
10002b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002b68:	1dfb      	adds	r3, r7, #7
10002b6a:	781b      	ldrb	r3, [r3, #0]
10002b6c:	2b7f      	cmp	r3, #127	; 0x7f
10002b6e:	d809      	bhi.n	10002b84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002b70:	4b06      	ldr	r3, [pc, #24]	; (10002b8c <__NVIC_EnableIRQ+0x30>)
10002b72:	1dfa      	adds	r2, r7, #7
10002b74:	7812      	ldrb	r2, [r2, #0]
10002b76:	1c11      	adds	r1, r2, #0
10002b78:	221f      	movs	r2, #31
10002b7a:	400a      	ands	r2, r1
10002b7c:	2101      	movs	r1, #1
10002b7e:	4091      	lsls	r1, r2
10002b80:	1c0a      	adds	r2, r1, #0
10002b82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002b84:	46bd      	mov	sp, r7
10002b86:	b002      	add	sp, #8
10002b88:	bd80      	pop	{r7, pc}
10002b8a:	46c0      	nop			; (mov r8, r8)
10002b8c:	e000e100 	.word	0xe000e100

10002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002b90:	b5b0      	push	{r4, r5, r7, lr}
10002b92:	b082      	sub	sp, #8
10002b94:	af00      	add	r7, sp, #0
10002b96:	1c02      	adds	r2, r0, #0
10002b98:	6039      	str	r1, [r7, #0]
10002b9a:	1dfb      	adds	r3, r7, #7
10002b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002b9e:	1dfb      	adds	r3, r7, #7
10002ba0:	781b      	ldrb	r3, [r3, #0]
10002ba2:	2b7f      	cmp	r3, #127	; 0x7f
10002ba4:	d827      	bhi.n	10002bf6 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002ba6:	4c2d      	ldr	r4, [pc, #180]	; (10002c5c <__NVIC_SetPriority+0xcc>)
10002ba8:	1dfb      	adds	r3, r7, #7
10002baa:	781b      	ldrb	r3, [r3, #0]
10002bac:	b25b      	sxtb	r3, r3
10002bae:	089b      	lsrs	r3, r3, #2
10002bb0:	492a      	ldr	r1, [pc, #168]	; (10002c5c <__NVIC_SetPriority+0xcc>)
10002bb2:	1dfa      	adds	r2, r7, #7
10002bb4:	7812      	ldrb	r2, [r2, #0]
10002bb6:	b252      	sxtb	r2, r2
10002bb8:	0892      	lsrs	r2, r2, #2
10002bba:	32c0      	adds	r2, #192	; 0xc0
10002bbc:	0092      	lsls	r2, r2, #2
10002bbe:	5852      	ldr	r2, [r2, r1]
10002bc0:	1df9      	adds	r1, r7, #7
10002bc2:	7809      	ldrb	r1, [r1, #0]
10002bc4:	1c08      	adds	r0, r1, #0
10002bc6:	2103      	movs	r1, #3
10002bc8:	4001      	ands	r1, r0
10002bca:	00c9      	lsls	r1, r1, #3
10002bcc:	1c08      	adds	r0, r1, #0
10002bce:	21ff      	movs	r1, #255	; 0xff
10002bd0:	4081      	lsls	r1, r0
10002bd2:	43c9      	mvns	r1, r1
10002bd4:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002bd6:	683a      	ldr	r2, [r7, #0]
10002bd8:	0192      	lsls	r2, r2, #6
10002bda:	20ff      	movs	r0, #255	; 0xff
10002bdc:	4002      	ands	r2, r0
10002bde:	1df8      	adds	r0, r7, #7
10002be0:	7800      	ldrb	r0, [r0, #0]
10002be2:	1c05      	adds	r5, r0, #0
10002be4:	2003      	movs	r0, #3
10002be6:	4028      	ands	r0, r5
10002be8:	00c0      	lsls	r0, r0, #3
10002bea:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bec:	430a      	orrs	r2, r1
10002bee:	33c0      	adds	r3, #192	; 0xc0
10002bf0:	009b      	lsls	r3, r3, #2
10002bf2:	511a      	str	r2, [r3, r4]
10002bf4:	e02e      	b.n	10002c54 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002bf6:	4c1a      	ldr	r4, [pc, #104]	; (10002c60 <__NVIC_SetPriority+0xd0>)
10002bf8:	1dfb      	adds	r3, r7, #7
10002bfa:	781b      	ldrb	r3, [r3, #0]
10002bfc:	1c1a      	adds	r2, r3, #0
10002bfe:	230f      	movs	r3, #15
10002c00:	4013      	ands	r3, r2
10002c02:	3b08      	subs	r3, #8
10002c04:	0899      	lsrs	r1, r3, #2
10002c06:	4a16      	ldr	r2, [pc, #88]	; (10002c60 <__NVIC_SetPriority+0xd0>)
10002c08:	1dfb      	adds	r3, r7, #7
10002c0a:	781b      	ldrb	r3, [r3, #0]
10002c0c:	1c18      	adds	r0, r3, #0
10002c0e:	230f      	movs	r3, #15
10002c10:	4003      	ands	r3, r0
10002c12:	3b08      	subs	r3, #8
10002c14:	089b      	lsrs	r3, r3, #2
10002c16:	3306      	adds	r3, #6
10002c18:	009b      	lsls	r3, r3, #2
10002c1a:	18d3      	adds	r3, r2, r3
10002c1c:	685b      	ldr	r3, [r3, #4]
10002c1e:	1dfa      	adds	r2, r7, #7
10002c20:	7812      	ldrb	r2, [r2, #0]
10002c22:	1c10      	adds	r0, r2, #0
10002c24:	2203      	movs	r2, #3
10002c26:	4002      	ands	r2, r0
10002c28:	00d2      	lsls	r2, r2, #3
10002c2a:	1c10      	adds	r0, r2, #0
10002c2c:	22ff      	movs	r2, #255	; 0xff
10002c2e:	4082      	lsls	r2, r0
10002c30:	43d2      	mvns	r2, r2
10002c32:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002c34:	683b      	ldr	r3, [r7, #0]
10002c36:	019b      	lsls	r3, r3, #6
10002c38:	20ff      	movs	r0, #255	; 0xff
10002c3a:	4003      	ands	r3, r0
10002c3c:	1df8      	adds	r0, r7, #7
10002c3e:	7800      	ldrb	r0, [r0, #0]
10002c40:	1c05      	adds	r5, r0, #0
10002c42:	2003      	movs	r0, #3
10002c44:	4028      	ands	r0, r5
10002c46:	00c0      	lsls	r0, r0, #3
10002c48:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002c4a:	431a      	orrs	r2, r3
10002c4c:	1d8b      	adds	r3, r1, #6
10002c4e:	009b      	lsls	r3, r3, #2
10002c50:	18e3      	adds	r3, r4, r3
10002c52:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002c54:	46bd      	mov	sp, r7
10002c56:	b002      	add	sp, #8
10002c58:	bdb0      	pop	{r4, r5, r7, pc}
10002c5a:	46c0      	nop			; (mov r8, r8)
10002c5c:	e000e100 	.word	0xe000e100
10002c60:	e000ed00 	.word	0xe000ed00

10002c64 <XMC_VADC_GROUP_QueueTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
{
10002c64:	b580      	push	{r7, lr}
10002c66:	b082      	sub	sp, #8
10002c68:	af00      	add	r7, sp, #0
10002c6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
10002c6c:	687a      	ldr	r2, [r7, #4]
10002c6e:	2382      	movs	r3, #130	; 0x82
10002c70:	005b      	lsls	r3, r3, #1
10002c72:	58d3      	ldr	r3, [r2, r3]
10002c74:	2280      	movs	r2, #128	; 0x80
10002c76:	0092      	lsls	r2, r2, #2
10002c78:	431a      	orrs	r2, r3
10002c7a:	1c11      	adds	r1, r2, #0
10002c7c:	687a      	ldr	r2, [r7, #4]
10002c7e:	2382      	movs	r3, #130	; 0x82
10002c80:	005b      	lsls	r3, r3, #1
10002c82:	50d1      	str	r1, [r2, r3]
}
10002c84:	46bd      	mov	sp, r7
10002c86:	b002      	add	sp, #8
10002c88:	bd80      	pop	{r7, pc}
10002c8a:	46c0      	nop			; (mov r8, r8)

10002c8c <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
10002c8c:	b580      	push	{r7, lr}
10002c8e:	b082      	sub	sp, #8
10002c90:	af00      	add	r7, sp, #0
10002c92:	6078      	str	r0, [r7, #4]
10002c94:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
10002c96:	6839      	ldr	r1, [r7, #0]
10002c98:	687a      	ldr	r2, [r7, #4]
10002c9a:	2388      	movs	r3, #136	; 0x88
10002c9c:	005b      	lsls	r3, r3, #1
10002c9e:	50d1      	str	r1, [r2, r3]
}
10002ca0:	46bd      	mov	sp, r7
10002ca2:	b002      	add	sp, #8
10002ca4:	bd80      	pop	{r7, pc}
10002ca6:	46c0      	nop			; (mov r8, r8)

10002ca8 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10002ca8:	b580      	push	{r7, lr}
10002caa:	b084      	sub	sp, #16
10002cac:	af00      	add	r7, sp, #0
10002cae:	60f8      	str	r0, [r7, #12]
10002cb0:	60b9      	str	r1, [r7, #8]
10002cb2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10002cb4:	687b      	ldr	r3, [r7, #4]
10002cb6:	6819      	ldr	r1, [r3, #0]
10002cb8:	68fb      	ldr	r3, [r7, #12]
10002cba:	68ba      	ldr	r2, [r7, #8]
10002cbc:	32a0      	adds	r2, #160	; 0xa0
10002cbe:	0092      	lsls	r2, r2, #2
10002cc0:	50d1      	str	r1, [r2, r3]

}
10002cc2:	46bd      	mov	sp, r7
10002cc4:	b004      	add	sp, #16
10002cc6:	bd80      	pop	{r7, pc}

10002cc8 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
10002cc8:	b580      	push	{r7, lr}
10002cca:	b084      	sub	sp, #16
10002ccc:	af00      	add	r7, sp, #0
10002cce:	60f8      	str	r0, [r7, #12]
10002cd0:	607a      	str	r2, [r7, #4]
10002cd2:	230b      	movs	r3, #11
10002cd4:	18fb      	adds	r3, r7, r3
10002cd6:	1c0a      	adds	r2, r1, #0
10002cd8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
10002cda:	230b      	movs	r3, #11
10002cdc:	18fb      	adds	r3, r7, r3
10002cde:	781b      	ldrb	r3, [r3, #0]
10002ce0:	687a      	ldr	r2, [r7, #4]
10002ce2:	409a      	lsls	r2, r3
10002ce4:	68fb      	ldr	r3, [r7, #12]
10002ce6:	605a      	str	r2, [r3, #4]
}
10002ce8:	46bd      	mov	sp, r7
10002cea:	b004      	add	sp, #16
10002cec:	bd80      	pop	{r7, pc}
10002cee:	46c0      	nop			; (mov r8, r8)

10002cf0 <PDU_SensorADC_Init>:
 */

#include "pdu_op.h"

void PDU_SensorADC_Init(void)
{
10002cf0:	b580      	push	{r7, lr}
10002cf2:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P2_9,&adc_io);
10002cf4:	4a4c      	ldr	r2, [pc, #304]	; (10002e28 <PDU_SensorADC_Init+0x138>)
10002cf6:	4b4d      	ldr	r3, [pc, #308]	; (10002e2c <PDU_SensorADC_Init+0x13c>)
10002cf8:	1c10      	adds	r0, r2, #0
10002cfa:	2109      	movs	r1, #9
10002cfc:	1c1a      	adds	r2, r3, #0
10002cfe:	f001 fff9 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_3,&adc_io);
10002d02:	4a49      	ldr	r2, [pc, #292]	; (10002e28 <PDU_SensorADC_Init+0x138>)
10002d04:	4b49      	ldr	r3, [pc, #292]	; (10002e2c <PDU_SensorADC_Init+0x13c>)
10002d06:	1c10      	adds	r0, r2, #0
10002d08:	2103      	movs	r1, #3
10002d0a:	1c1a      	adds	r2, r3, #0
10002d0c:	f001 fff2 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_4,&adc_io);
10002d10:	4a45      	ldr	r2, [pc, #276]	; (10002e28 <PDU_SensorADC_Init+0x138>)
10002d12:	4b46      	ldr	r3, [pc, #280]	; (10002e2c <PDU_SensorADC_Init+0x13c>)
10002d14:	1c10      	adds	r0, r2, #0
10002d16:	2104      	movs	r1, #4
10002d18:	1c1a      	adds	r2, r3, #0
10002d1a:	f001 ffeb 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_5,&adc_io);
10002d1e:	4a42      	ldr	r2, [pc, #264]	; (10002e28 <PDU_SensorADC_Init+0x138>)
10002d20:	4b42      	ldr	r3, [pc, #264]	; (10002e2c <PDU_SensorADC_Init+0x13c>)
10002d22:	1c10      	adds	r0, r2, #0
10002d24:	2105      	movs	r1, #5
10002d26:	1c1a      	adds	r2, r3, #0
10002d28:	f001 ffe4 	bl	10004cf4 <XMC_GPIO_Init>

	XMC_VADC_GLOBAL_Init(VADC, &g_global_handle);
10002d2c:	4a40      	ldr	r2, [pc, #256]	; (10002e30 <PDU_SensorADC_Init+0x140>)
10002d2e:	4b41      	ldr	r3, [pc, #260]	; (10002e34 <PDU_SensorADC_Init+0x144>)
10002d30:	1c10      	adds	r0, r2, #0
10002d32:	1c19      	adds	r1, r3, #0
10002d34:	f003 f94e 	bl	10005fd4 <XMC_VADC_GLOBAL_Init>
	/* Configure a conversion kernel */
	XMC_VADC_GROUP_Init(VADC_G1, &g_group_handle);
10002d38:	4a3f      	ldr	r2, [pc, #252]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d3a:	4b40      	ldr	r3, [pc, #256]	; (10002e3c <PDU_SensorADC_Init+0x14c>)
10002d3c:	1c10      	adds	r0, r2, #0
10002d3e:	1c19      	adds	r1, r3, #0
10002d40:	f003 f9ae 	bl	100060a0 <XMC_VADC_GROUP_Init>

	/* Enable the analog converters */
	XMC_VADC_GROUP_SetPowerMode(VADC_G1, XMC_VADC_GROUP_POWERMODE_NORMAL);
10002d44:	4b3c      	ldr	r3, [pc, #240]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d46:	1c18      	adds	r0, r3, #0
10002d48:	2103      	movs	r1, #3
10002d4a:	f003 fa51 	bl	100061f0 <XMC_VADC_GROUP_SetPowerMode>

	XMC_VADC_GLOBAL_StartupCalibration(VADC);		//XMC1400 EE step will not work with this API here
10002d4e:	4b38      	ldr	r3, [pc, #224]	; (10002e30 <PDU_SensorADC_Init+0x140>)
10002d50:	1c18      	adds	r0, r3, #0
10002d52:	f003 f96b 	bl	1000602c <XMC_VADC_GLOBAL_StartupCalibration>

	/* Configure the queue request source of the aforesaid conversion kernel */
	XMC_VADC_GROUP_QueueInit(VADC_G1, &g_queue_handle);
10002d56:	4a38      	ldr	r2, [pc, #224]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d58:	4b39      	ldr	r3, [pc, #228]	; (10002e40 <PDU_SensorADC_Init+0x150>)
10002d5a:	1c10      	adds	r0, r2, #0
10002d5c:	1c19      	adds	r1, r3, #0
10002d5e:	f003 fa63 	bl	10006228 <XMC_VADC_GROUP_QueueInit>

	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[0]);	// Queue no.0
10002d62:	4a35      	ldr	r2, [pc, #212]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d64:	4b37      	ldr	r3, [pc, #220]	; (10002e44 <PDU_SensorADC_Init+0x154>)
10002d66:	681b      	ldr	r3, [r3, #0]
10002d68:	1c10      	adds	r0, r2, #0
10002d6a:	1c19      	adds	r1, r3, #0
10002d6c:	f7ff ff8e 	bl	10002c8c <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[1]);	// Queue no.1
10002d70:	4a31      	ldr	r2, [pc, #196]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d72:	4b34      	ldr	r3, [pc, #208]	; (10002e44 <PDU_SensorADC_Init+0x154>)
10002d74:	685b      	ldr	r3, [r3, #4]
10002d76:	1c10      	adds	r0, r2, #0
10002d78:	1c19      	adds	r1, r3, #0
10002d7a:	f7ff ff87 	bl	10002c8c <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[2]);	// Queue no.2
10002d7e:	4a2e      	ldr	r2, [pc, #184]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d80:	4b30      	ldr	r3, [pc, #192]	; (10002e44 <PDU_SensorADC_Init+0x154>)
10002d82:	689b      	ldr	r3, [r3, #8]
10002d84:	1c10      	adds	r0, r2, #0
10002d86:	1c19      	adds	r1, r3, #0
10002d88:	f7ff ff80 	bl	10002c8c <XMC_VADC_GROUP_QueueInsertChannel>
	XMC_VADC_GROUP_QueueInsertChannel(VADC_G1, g_queue_entry[3]);	// Queue no.3
10002d8c:	4a2a      	ldr	r2, [pc, #168]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d8e:	4b2d      	ldr	r3, [pc, #180]	; (10002e44 <PDU_SensorADC_Init+0x154>)
10002d90:	68db      	ldr	r3, [r3, #12]
10002d92:	1c10      	adds	r0, r2, #0
10002d94:	1c19      	adds	r1, r3, #0
10002d96:	f7ff ff79 	bl	10002c8c <XMC_VADC_GROUP_QueueInsertChannel>

	XMC_VADC_GROUP_ChannelInit(VADC_G1,4, &g_channel_handle[0]);	// G1 ch 4 P2_9
10002d9a:	4a27      	ldr	r2, [pc, #156]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002d9c:	4b2a      	ldr	r3, [pc, #168]	; (10002e48 <PDU_SensorADC_Init+0x158>)
10002d9e:	1c10      	adds	r0, r2, #0
10002da0:	2104      	movs	r1, #4
10002da2:	1c1a      	adds	r2, r3, #0
10002da4:	f003 fa98 	bl	100062d8 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,5, &g_channel_handle[1]);	// G1 ch 5 P2_3
10002da8:	4a23      	ldr	r2, [pc, #140]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002daa:	4b28      	ldr	r3, [pc, #160]	; (10002e4c <PDU_SensorADC_Init+0x15c>)
10002dac:	1c10      	adds	r0, r2, #0
10002dae:	2105      	movs	r1, #5
10002db0:	1c1a      	adds	r2, r3, #0
10002db2:	f003 fa91 	bl	100062d8 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,6, &g_channel_handle[2]);	// G1 ch 6 P2_4
10002db6:	4a20      	ldr	r2, [pc, #128]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002db8:	4b25      	ldr	r3, [pc, #148]	; (10002e50 <PDU_SensorADC_Init+0x160>)
10002dba:	1c10      	adds	r0, r2, #0
10002dbc:	2106      	movs	r1, #6
10002dbe:	1c1a      	adds	r2, r3, #0
10002dc0:	f003 fa8a 	bl	100062d8 <XMC_VADC_GROUP_ChannelInit>
	XMC_VADC_GROUP_ChannelInit(VADC_G1,7, &g_channel_handle[3]);	// G1 ch 7 P2_5
10002dc4:	4a1c      	ldr	r2, [pc, #112]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002dc6:	4b23      	ldr	r3, [pc, #140]	; (10002e54 <PDU_SensorADC_Init+0x164>)
10002dc8:	1c10      	adds	r0, r2, #0
10002dca:	2107      	movs	r1, #7
10002dcc:	1c1a      	adds	r2, r3, #0
10002dce:	f003 fa83 	bl	100062d8 <XMC_VADC_GROUP_ChannelInit>

	XMC_VADC_GROUP_ResultInit(VADC_G1, 0, &g_result_handle[0]);
10002dd2:	4a19      	ldr	r2, [pc, #100]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002dd4:	4b20      	ldr	r3, [pc, #128]	; (10002e58 <PDU_SensorADC_Init+0x168>)
10002dd6:	1c10      	adds	r0, r2, #0
10002dd8:	2100      	movs	r1, #0
10002dda:	1c1a      	adds	r2, r3, #0
10002ddc:	f7ff ff64 	bl	10002ca8 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 1, &g_result_handle[1]);
10002de0:	4a15      	ldr	r2, [pc, #84]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002de2:	4b1e      	ldr	r3, [pc, #120]	; (10002e5c <PDU_SensorADC_Init+0x16c>)
10002de4:	1c10      	adds	r0, r2, #0
10002de6:	2101      	movs	r1, #1
10002de8:	1c1a      	adds	r2, r3, #0
10002dea:	f7ff ff5d 	bl	10002ca8 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 2, &g_result_handle[2]);
10002dee:	4a12      	ldr	r2, [pc, #72]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002df0:	4b1b      	ldr	r3, [pc, #108]	; (10002e60 <PDU_SensorADC_Init+0x170>)
10002df2:	1c10      	adds	r0, r2, #0
10002df4:	2102      	movs	r1, #2
10002df6:	1c1a      	adds	r2, r3, #0
10002df8:	f7ff ff56 	bl	10002ca8 <XMC_VADC_GROUP_ResultInit>
	XMC_VADC_GROUP_ResultInit(VADC_G1, 3, &g_result_handle[3]);
10002dfc:	4a0e      	ldr	r2, [pc, #56]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002dfe:	4b19      	ldr	r3, [pc, #100]	; (10002e64 <PDU_SensorADC_Init+0x174>)
10002e00:	1c10      	adds	r0, r2, #0
10002e02:	2103      	movs	r1, #3
10002e04:	1c1a      	adds	r2, r3, #0
10002e06:	f7ff ff4f 	bl	10002ca8 <XMC_VADC_GROUP_ResultInit>
//	XMC_VADC_GROUP_ChannelSetEventInterruptNode(VADC_G1, 7, XMC_VADC_SR_GROUP_SR1); // For Channel 7
//	NVIC_SetPriority(IRQ20_IRQn, IRQ20_IRQn_11);			// Table 4-3 Interrupt Node assignment
//	NVIC_EnableIRQ(IRQ20_IRQn);

	/* Enable event at check g_result_handle[i].event_gen_enable */
	XMC_VADC_GROUP_SetResultInterruptNode(VADC_G1, VADC_RES_MAX-1, XMC_VADC_SR_GROUP_SR0);
10002e0a:	4b0b      	ldr	r3, [pc, #44]	; (10002e38 <PDU_SensorADC_Init+0x148>)
10002e0c:	1c18      	adds	r0, r3, #0
10002e0e:	2103      	movs	r1, #3
10002e10:	2200      	movs	r2, #0
10002e12:	f003 facf 	bl	100063b4 <XMC_VADC_GROUP_SetResultInterruptNode>
	NVIC_SetPriority(IRQ19_IRQn, 17U);
10002e16:	2013      	movs	r0, #19
10002e18:	2111      	movs	r1, #17
10002e1a:	f7ff feb9 	bl	10002b90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ19_IRQn);
10002e1e:	2013      	movs	r0, #19
10002e20:	f7ff fe9c 	bl	10002b5c <__NVIC_EnableIRQ>
}
10002e24:	46bd      	mov	sp, r7
10002e26:	bd80      	pop	{r7, pc}
10002e28:	40040200 	.word	0x40040200
10002e2c:	200007a4 	.word	0x200007a4
10002e30:	48030000 	.word	0x48030000
10002e34:	20000568 	.word	0x20000568
10002e38:	48030800 	.word	0x48030800
10002e3c:	20000580 	.word	0x20000580
10002e40:	20000594 	.word	0x20000594
10002e44:	200005a0 	.word	0x200005a0
10002e48:	200005b0 	.word	0x200005b0
10002e4c:	200005c0 	.word	0x200005c0
10002e50:	200005d0 	.word	0x200005d0
10002e54:	200005e0 	.word	0x200005e0
10002e58:	200005f0 	.word	0x200005f0
10002e5c:	200005f4 	.word	0x200005f4
10002e60:	200005f8 	.word	0x200005f8
10002e64:	200005fc 	.word	0x200005fc

10002e68 <PDU_Relay_Init>:

void PDU_Relay_Init(void)
{
10002e68:	b580      	push	{r7, lr}
10002e6a:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(P1_4, &relay_KBAT);
10002e6c:	4a0e      	ldr	r2, [pc, #56]	; (10002ea8 <PDU_Relay_Init+0x40>)
10002e6e:	4b0f      	ldr	r3, [pc, #60]	; (10002eac <PDU_Relay_Init+0x44>)
10002e70:	1c10      	adds	r0, r2, #0
10002e72:	2104      	movs	r1, #4
10002e74:	1c1a      	adds	r2, r3, #0
10002e76:	f001 ff3d 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_5, &relay_KMP);
10002e7a:	4a0b      	ldr	r2, [pc, #44]	; (10002ea8 <PDU_Relay_Init+0x40>)
10002e7c:	4b0c      	ldr	r3, [pc, #48]	; (10002eb0 <PDU_Relay_Init+0x48>)
10002e7e:	1c10      	adds	r0, r2, #0
10002e80:	2105      	movs	r1, #5
10002e82:	1c1a      	adds	r2, r3, #0
10002e84:	f001 ff36 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_6, &relay_KMF);
10002e88:	4a07      	ldr	r2, [pc, #28]	; (10002ea8 <PDU_Relay_Init+0x40>)
10002e8a:	4b0a      	ldr	r3, [pc, #40]	; (10002eb4 <PDU_Relay_Init+0x4c>)
10002e8c:	1c10      	adds	r0, r2, #0
10002e8e:	2106      	movs	r1, #6
10002e90:	1c1a      	adds	r2, r3, #0
10002e92:	f001 ff2f 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
10002e96:	4a04      	ldr	r2, [pc, #16]	; (10002ea8 <PDU_Relay_Init+0x40>)
10002e98:	4b07      	ldr	r3, [pc, #28]	; (10002eb8 <PDU_Relay_Init+0x50>)
10002e9a:	1c10      	adds	r0, r2, #0
10002e9c:	2107      	movs	r1, #7
10002e9e:	1c1a      	adds	r2, r3, #0
10002ea0:	f001 ff28 	bl	10004cf4 <XMC_GPIO_Init>
}
10002ea4:	46bd      	mov	sp, r7
10002ea6:	bd80      	pop	{r7, pc}
10002ea8:	40040100 	.word	0x40040100
10002eac:	20000618 	.word	0x20000618
10002eb0:	20000600 	.word	0x20000600
10002eb4:	20000608 	.word	0x20000608
10002eb8:	20000610 	.word	0x20000610

10002ebc <PDU_Switch_Relay>:

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
10002ebc:	b580      	push	{r7, lr}
10002ebe:	b082      	sub	sp, #8
10002ec0:	af00      	add	r7, sp, #0
10002ec2:	1c02      	adds	r2, r0, #0
10002ec4:	1dfb      	adds	r3, r7, #7
10002ec6:	701a      	strb	r2, [r3, #0]
10002ec8:	1dbb      	adds	r3, r7, #6
10002eca:	1c0a      	adds	r2, r1, #0
10002ecc:	701a      	strb	r2, [r3, #0]
	switch(relay_name)
10002ece:	1dfb      	adds	r3, r7, #7
10002ed0:	781b      	ldrb	r3, [r3, #0]
10002ed2:	2b01      	cmp	r3, #1
10002ed4:	d01c      	beq.n	10002f10 <PDU_Switch_Relay+0x54>
10002ed6:	dc02      	bgt.n	10002ede <PDU_Switch_Relay+0x22>
10002ed8:	2b00      	cmp	r3, #0
10002eda:	d005      	beq.n	10002ee8 <PDU_Switch_Relay+0x2c>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10002edc:	e054      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
	XMC_GPIO_Init(P1_7, &relay_KDSG);
}

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
10002ede:	2b02      	cmp	r3, #2
10002ee0:	d02a      	beq.n	10002f38 <PDU_Switch_Relay+0x7c>
10002ee2:	2b03      	cmp	r3, #3
10002ee4:	d03c      	beq.n	10002f60 <PDU_Switch_Relay+0xa4>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		default				: break;
10002ee6:	e04f      	b.n	10002f88 <PDU_Switch_Relay+0xcc>

void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002ee8:	1dbb      	adds	r3, r7, #6
10002eea:	781b      	ldrb	r3, [r3, #0]
10002eec:	2b00      	cmp	r3, #0
10002eee:	d006      	beq.n	10002efe <PDU_Switch_Relay+0x42>
10002ef0:	4b27      	ldr	r3, [pc, #156]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002ef2:	1c18      	adds	r0, r3, #0
10002ef4:	2104      	movs	r1, #4
10002ef6:	2201      	movs	r2, #1
10002ef8:	f7ff fee6 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
10002efc:	e044      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
void PDU_Switch_Relay(PDU_RELAY_NAME_t relay_name, PDU_RELAY_STAT_t level)
{
	switch(relay_name)
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002efe:	4a24      	ldr	r2, [pc, #144]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f00:	2380      	movs	r3, #128	; 0x80
10002f02:	025b      	lsls	r3, r3, #9
10002f04:	1c10      	adds	r0, r2, #0
10002f06:	2104      	movs	r1, #4
10002f08:	1c1a      	adds	r2, r3, #0
10002f0a:	f7ff fedd 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
						  	  break;
10002f0e:	e03b      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002f10:	1dbb      	adds	r3, r7, #6
10002f12:	781b      	ldrb	r3, [r3, #0]
10002f14:	2b00      	cmp	r3, #0
10002f16:	d006      	beq.n	10002f26 <PDU_Switch_Relay+0x6a>
10002f18:	4b1d      	ldr	r3, [pc, #116]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f1a:	1c18      	adds	r0, r3, #0
10002f1c:	2105      	movs	r1, #5
10002f1e:	2201      	movs	r2, #1
10002f20:	f7ff fed2 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002f24:	e030      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
	{
		case PDU_RELAY_KBAT : level?(XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
								    (XMC_GPIO_SetOutputLevel(P1_4, XMC_GPIO_OUTPUT_LEVEL_LOW));
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002f26:	4a1a      	ldr	r2, [pc, #104]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f28:	2380      	movs	r3, #128	; 0x80
10002f2a:	025b      	lsls	r3, r3, #9
10002f2c:	1c10      	adds	r0, r2, #0
10002f2e:	2105      	movs	r1, #5
10002f30:	1c1a      	adds	r2, r3, #0
10002f32:	f7ff fec9 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
							  break;
10002f36:	e027      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002f38:	1dbb      	adds	r3, r7, #6
10002f3a:	781b      	ldrb	r3, [r3, #0]
10002f3c:	2b00      	cmp	r3, #0
10002f3e:	d006      	beq.n	10002f4e <PDU_Switch_Relay+0x92>
10002f40:	4b13      	ldr	r3, [pc, #76]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f42:	1c18      	adds	r0, r3, #0
10002f44:	2106      	movs	r1, #6
10002f46:	2201      	movs	r2, #1
10002f48:	f7ff febe 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002f4c:	e01c      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
						  	  break;
		case PDU_RELAY_KMP 	: level?(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_5, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002f4e:	4a10      	ldr	r2, [pc, #64]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f50:	2380      	movs	r3, #128	; 0x80
10002f52:	025b      	lsls	r3, r3, #9
10002f54:	1c10      	adds	r0, r2, #0
10002f56:	2106      	movs	r1, #6
10002f58:	1c1a      	adds	r2, r3, #0
10002f5a:	f7ff feb5 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
							  break;
10002f5e:	e013      	b.n	10002f88 <PDU_Switch_Relay+0xcc>
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
10002f60:	1dbb      	adds	r3, r7, #6
10002f62:	781b      	ldrb	r3, [r3, #0]
10002f64:	2b00      	cmp	r3, #0
10002f66:	d006      	beq.n	10002f76 <PDU_Switch_Relay+0xba>
10002f68:	4b09      	ldr	r3, [pc, #36]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f6a:	1c18      	adds	r0, r3, #0
10002f6c:	2107      	movs	r1, #7
10002f6e:	2201      	movs	r2, #1
10002f70:	f7ff feaa 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
10002f74:	e007      	b.n	10002f86 <PDU_Switch_Relay+0xca>
							  break;
		case PDU_RELAY_KMF 	: level?(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_6, XMC_GPIO_OUTPUT_LEVEL_LOW));
							  break;
		case PDU_RELAY_KDSG	: level?(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_HIGH)):\
									(XMC_GPIO_SetOutputLevel(P1_7, XMC_GPIO_OUTPUT_LEVEL_LOW));
10002f76:	4a06      	ldr	r2, [pc, #24]	; (10002f90 <PDU_Switch_Relay+0xd4>)
10002f78:	2380      	movs	r3, #128	; 0x80
10002f7a:	025b      	lsls	r3, r3, #9
10002f7c:	1c10      	adds	r0, r2, #0
10002f7e:	2107      	movs	r1, #7
10002f80:	1c1a      	adds	r2, r3, #0
10002f82:	f7ff fea1 	bl	10002cc8 <XMC_GPIO_SetOutputLevel>
							  break;
10002f86:	46c0      	nop			; (mov r8, r8)
		default				: break;
	}
}
10002f88:	46bd      	mov	sp, r7
10002f8a:	b002      	add	sp, #8
10002f8c:	bd80      	pop	{r7, pc}
10002f8e:	46c0      	nop			; (mov r8, r8)
10002f90:	40040100 	.word	0x40040100

10002f94 <PDU_ADC_Start>:

void PDU_ADC_Start(void)
{
10002f94:	b580      	push	{r7, lr}
10002f96:	af00      	add	r7, sp, #0
	XMC_VADC_GROUP_QueueTriggerConversion(VADC_G1);
10002f98:	4b02      	ldr	r3, [pc, #8]	; (10002fa4 <PDU_ADC_Start+0x10>)
10002f9a:	1c18      	adds	r0, r3, #0
10002f9c:	f7ff fe62 	bl	10002c64 <XMC_VADC_GROUP_QueueTriggerConversion>
}
10002fa0:	46bd      	mov	sp, r7
10002fa2:	bd80      	pop	{r7, pc}
10002fa4:	48030800 	.word	0x48030800

10002fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002fa8:	b580      	push	{r7, lr}
10002faa:	b082      	sub	sp, #8
10002fac:	af00      	add	r7, sp, #0
10002fae:	1c02      	adds	r2, r0, #0
10002fb0:	1dfb      	adds	r3, r7, #7
10002fb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002fb4:	1dfb      	adds	r3, r7, #7
10002fb6:	781b      	ldrb	r3, [r3, #0]
10002fb8:	2b7f      	cmp	r3, #127	; 0x7f
10002fba:	d809      	bhi.n	10002fd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002fbc:	4b06      	ldr	r3, [pc, #24]	; (10002fd8 <__NVIC_EnableIRQ+0x30>)
10002fbe:	1dfa      	adds	r2, r7, #7
10002fc0:	7812      	ldrb	r2, [r2, #0]
10002fc2:	1c11      	adds	r1, r2, #0
10002fc4:	221f      	movs	r2, #31
10002fc6:	400a      	ands	r2, r1
10002fc8:	2101      	movs	r1, #1
10002fca:	4091      	lsls	r1, r2
10002fcc:	1c0a      	adds	r2, r1, #0
10002fce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10002fd0:	46bd      	mov	sp, r7
10002fd2:	b002      	add	sp, #8
10002fd4:	bd80      	pop	{r7, pc}
10002fd6:	46c0      	nop			; (mov r8, r8)
10002fd8:	e000e100 	.word	0xe000e100

10002fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002fdc:	b5b0      	push	{r4, r5, r7, lr}
10002fde:	b082      	sub	sp, #8
10002fe0:	af00      	add	r7, sp, #0
10002fe2:	1c02      	adds	r2, r0, #0
10002fe4:	6039      	str	r1, [r7, #0]
10002fe6:	1dfb      	adds	r3, r7, #7
10002fe8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002fea:	1dfb      	adds	r3, r7, #7
10002fec:	781b      	ldrb	r3, [r3, #0]
10002fee:	2b7f      	cmp	r3, #127	; 0x7f
10002ff0:	d827      	bhi.n	10003042 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002ff2:	4c2d      	ldr	r4, [pc, #180]	; (100030a8 <__NVIC_SetPriority+0xcc>)
10002ff4:	1dfb      	adds	r3, r7, #7
10002ff6:	781b      	ldrb	r3, [r3, #0]
10002ff8:	b25b      	sxtb	r3, r3
10002ffa:	089b      	lsrs	r3, r3, #2
10002ffc:	492a      	ldr	r1, [pc, #168]	; (100030a8 <__NVIC_SetPriority+0xcc>)
10002ffe:	1dfa      	adds	r2, r7, #7
10003000:	7812      	ldrb	r2, [r2, #0]
10003002:	b252      	sxtb	r2, r2
10003004:	0892      	lsrs	r2, r2, #2
10003006:	32c0      	adds	r2, #192	; 0xc0
10003008:	0092      	lsls	r2, r2, #2
1000300a:	5852      	ldr	r2, [r2, r1]
1000300c:	1df9      	adds	r1, r7, #7
1000300e:	7809      	ldrb	r1, [r1, #0]
10003010:	1c08      	adds	r0, r1, #0
10003012:	2103      	movs	r1, #3
10003014:	4001      	ands	r1, r0
10003016:	00c9      	lsls	r1, r1, #3
10003018:	1c08      	adds	r0, r1, #0
1000301a:	21ff      	movs	r1, #255	; 0xff
1000301c:	4081      	lsls	r1, r0
1000301e:	43c9      	mvns	r1, r1
10003020:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003022:	683a      	ldr	r2, [r7, #0]
10003024:	0192      	lsls	r2, r2, #6
10003026:	20ff      	movs	r0, #255	; 0xff
10003028:	4002      	ands	r2, r0
1000302a:	1df8      	adds	r0, r7, #7
1000302c:	7800      	ldrb	r0, [r0, #0]
1000302e:	1c05      	adds	r5, r0, #0
10003030:	2003      	movs	r0, #3
10003032:	4028      	ands	r0, r5
10003034:	00c0      	lsls	r0, r0, #3
10003036:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003038:	430a      	orrs	r2, r1
1000303a:	33c0      	adds	r3, #192	; 0xc0
1000303c:	009b      	lsls	r3, r3, #2
1000303e:	511a      	str	r2, [r3, r4]
10003040:	e02e      	b.n	100030a0 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003042:	4c1a      	ldr	r4, [pc, #104]	; (100030ac <__NVIC_SetPriority+0xd0>)
10003044:	1dfb      	adds	r3, r7, #7
10003046:	781b      	ldrb	r3, [r3, #0]
10003048:	1c1a      	adds	r2, r3, #0
1000304a:	230f      	movs	r3, #15
1000304c:	4013      	ands	r3, r2
1000304e:	3b08      	subs	r3, #8
10003050:	0899      	lsrs	r1, r3, #2
10003052:	4a16      	ldr	r2, [pc, #88]	; (100030ac <__NVIC_SetPriority+0xd0>)
10003054:	1dfb      	adds	r3, r7, #7
10003056:	781b      	ldrb	r3, [r3, #0]
10003058:	1c18      	adds	r0, r3, #0
1000305a:	230f      	movs	r3, #15
1000305c:	4003      	ands	r3, r0
1000305e:	3b08      	subs	r3, #8
10003060:	089b      	lsrs	r3, r3, #2
10003062:	3306      	adds	r3, #6
10003064:	009b      	lsls	r3, r3, #2
10003066:	18d3      	adds	r3, r2, r3
10003068:	685b      	ldr	r3, [r3, #4]
1000306a:	1dfa      	adds	r2, r7, #7
1000306c:	7812      	ldrb	r2, [r2, #0]
1000306e:	1c10      	adds	r0, r2, #0
10003070:	2203      	movs	r2, #3
10003072:	4002      	ands	r2, r0
10003074:	00d2      	lsls	r2, r2, #3
10003076:	1c10      	adds	r0, r2, #0
10003078:	22ff      	movs	r2, #255	; 0xff
1000307a:	4082      	lsls	r2, r0
1000307c:	43d2      	mvns	r2, r2
1000307e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003080:	683b      	ldr	r3, [r7, #0]
10003082:	019b      	lsls	r3, r3, #6
10003084:	20ff      	movs	r0, #255	; 0xff
10003086:	4003      	ands	r3, r0
10003088:	1df8      	adds	r0, r7, #7
1000308a:	7800      	ldrb	r0, [r0, #0]
1000308c:	1c05      	adds	r5, r0, #0
1000308e:	2003      	movs	r0, #3
10003090:	4028      	ands	r0, r5
10003092:	00c0      	lsls	r0, r0, #3
10003094:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003096:	431a      	orrs	r2, r3
10003098:	1d8b      	adds	r3, r1, #6
1000309a:	009b      	lsls	r3, r3, #2
1000309c:	18e3      	adds	r3, r4, r3
1000309e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100030a0:	46bd      	mov	sp, r7
100030a2:	b002      	add	sp, #8
100030a4:	bdb0      	pop	{r4, r5, r7, pc}
100030a6:	46c0      	nop			; (mov r8, r8)
100030a8:	e000e100 	.word	0xe000e100
100030ac:	e000ed00 	.word	0xe000ed00

100030b0 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
100030b0:	b580      	push	{r7, lr}
100030b2:	b082      	sub	sp, #8
100030b4:	af00      	add	r7, sp, #0
100030b6:	6078      	str	r0, [r7, #4]
100030b8:	1c0a      	adds	r2, r1, #0
100030ba:	1cfb      	adds	r3, r7, #3
100030bc:	701a      	strb	r2, [r3, #0]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
100030be:	687b      	ldr	r3, [r7, #4]
100030c0:	68db      	ldr	r3, [r3, #12]
100030c2:	2207      	movs	r2, #7
100030c4:	4393      	bics	r3, r2
100030c6:	1c1a      	adds	r2, r3, #0
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
100030c8:	1cfb      	adds	r3, r7, #3
100030ca:	781b      	ldrb	r3, [r3, #0]
100030cc:	2107      	movs	r1, #7
100030ce:	400b      	ands	r3, r1
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
100030d0:	431a      	orrs	r2, r3
100030d2:	687b      	ldr	r3, [r7, #4]
100030d4:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
100030d6:	46bd      	mov	sp, r7
100030d8:	b002      	add	sp, #8
100030da:	bd80      	pop	{r7, pc}

100030dc <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100030dc:	b580      	push	{r7, lr}
100030de:	b082      	sub	sp, #8
100030e0:	af00      	add	r7, sp, #0
100030e2:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
100030e4:	687b      	ldr	r3, [r7, #4]
100030e6:	681b      	ldr	r3, [r3, #0]
100030e8:	2240      	movs	r2, #64	; 0x40
100030ea:	431a      	orrs	r2, r3
100030ec:	687b      	ldr	r3, [r7, #4]
100030ee:	601a      	str	r2, [r3, #0]
}
100030f0:	46bd      	mov	sp, r7
100030f2:	b002      	add	sp, #8
100030f4:	bd80      	pop	{r7, pc}
100030f6:	46c0      	nop			; (mov r8, r8)

100030f8 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
100030f8:	b580      	push	{r7, lr}
100030fa:	b082      	sub	sp, #8
100030fc:	af00      	add	r7, sp, #0
100030fe:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10003100:	687b      	ldr	r3, [r7, #4]
10003102:	681b      	ldr	r3, [r3, #0]
10003104:	2240      	movs	r2, #64	; 0x40
10003106:	4393      	bics	r3, r2
10003108:	1c1a      	adds	r2, r3, #0
1000310a:	687b      	ldr	r3, [r7, #4]
1000310c:	601a      	str	r2, [r3, #0]
}
1000310e:	46bd      	mov	sp, r7
10003110:	b002      	add	sp, #8
10003112:	bd80      	pop	{r7, pc}

10003114 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
10003114:	b580      	push	{r7, lr}
10003116:	b082      	sub	sp, #8
10003118:	af00      	add	r7, sp, #0
1000311a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
1000311c:	687b      	ldr	r3, [r7, #4]
1000311e:	681b      	ldr	r3, [r3, #0]
10003120:	2201      	movs	r2, #1
10003122:	4393      	bics	r3, r2
10003124:	1c1a      	adds	r2, r3, #0
10003126:	687b      	ldr	r3, [r7, #4]
10003128:	601a      	str	r2, [r3, #0]
}
1000312a:	46bd      	mov	sp, r7
1000312c:	b002      	add	sp, #8
1000312e:	bd80      	pop	{r7, pc}

10003130 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
10003130:	b580      	push	{r7, lr}
10003132:	b084      	sub	sp, #16
10003134:	af00      	add	r7, sp, #0
10003136:	60f8      	str	r0, [r7, #12]
10003138:	607a      	str	r2, [r7, #4]
1000313a:	230b      	movs	r3, #11
1000313c:	18fb      	adds	r3, r7, r3
1000313e:	1c0a      	adds	r2, r1, #0
10003140:	701a      	strb	r2, [r3, #0]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003142:	68fb      	ldr	r3, [r7, #12]
10003144:	681b      	ldr	r3, [r3, #0]
10003146:	68fa      	ldr	r2, [r7, #12]
10003148:	6812      	ldr	r2, [r2, #0]
1000314a:	6892      	ldr	r2, [r2, #8]
1000314c:	210b      	movs	r1, #11
1000314e:	1879      	adds	r1, r7, r1
10003150:	7809      	ldrb	r1, [r1, #0]
10003152:	2007      	movs	r0, #7
10003154:	4088      	lsls	r0, r1
10003156:	1c01      	adds	r1, r0, #0
10003158:	43c9      	mvns	r1, r1
1000315a:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
1000315c:	220b      	movs	r2, #11
1000315e:	18ba      	adds	r2, r7, r2
10003160:	7812      	ldrb	r2, [r2, #0]
10003162:	6878      	ldr	r0, [r7, #4]
10003164:	4090      	lsls	r0, r2
10003166:	1c02      	adds	r2, r0, #0

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
10003168:	430a      	orrs	r2, r1
1000316a:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
1000316c:	46bd      	mov	sp, r7
1000316e:	b004      	add	sp, #16
10003170:	bd80      	pop	{r7, pc}
10003172:	46c0      	nop			; (mov r8, r8)

10003174 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
10003174:	b580      	push	{r7, lr}
10003176:	b082      	sub	sp, #8
10003178:	af00      	add	r7, sp, #0
1000317a:	6078      	str	r0, [r7, #4]
1000317c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
1000317e:	687b      	ldr	r3, [r7, #4]
10003180:	681b      	ldr	r3, [r3, #0]
10003182:	687a      	ldr	r2, [r7, #4]
10003184:	6812      	ldr	r2, [r2, #0]
10003186:	6811      	ldr	r1, [r2, #0]
10003188:	683a      	ldr	r2, [r7, #0]
1000318a:	430a      	orrs	r2, r1
1000318c:	601a      	str	r2, [r3, #0]
}
1000318e:	46bd      	mov	sp, r7
10003190:	b002      	add	sp, #8
10003192:	bd80      	pop	{r7, pc}

10003194 <PCS_ConnectionInit>:
 */

#include "pcs_op.h"

void PCS_ConnectionInit(void)
{
10003194:	b580      	push	{r7, lr}
10003196:	af00      	add	r7, sp, #0
	/* Configure CAN Module */
	XMC_GPIO_Init(CAN0_TXD, &CAN0_txd_config);
10003198:	4a31      	ldr	r2, [pc, #196]	; (10003260 <PCS_ConnectionInit+0xcc>)
1000319a:	4b32      	ldr	r3, [pc, #200]	; (10003264 <PCS_ConnectionInit+0xd0>)
1000319c:	1c10      	adds	r0, r2, #0
1000319e:	2105      	movs	r1, #5
100031a0:	1c1a      	adds	r2, r3, #0
100031a2:	f001 fda7 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(CAN0_RXD, &CAN0_rxd_config);
100031a6:	4a2e      	ldr	r2, [pc, #184]	; (10003260 <PCS_ConnectionInit+0xcc>)
100031a8:	4b2f      	ldr	r3, [pc, #188]	; (10003268 <PCS_ConnectionInit+0xd4>)
100031aa:	1c10      	adds	r0, r2, #0
100031ac:	2104      	movs	r1, #4
100031ae:	1c1a      	adds	r2, r3, #0
100031b0:	f001 fda0 	bl	10004cf4 <XMC_GPIO_Init>

	XMC_CAN_Init(CAN, XMC_CAN_CANCLKSRC_MCLK, 11000000);
100031b4:	4a2d      	ldr	r2, [pc, #180]	; (1000326c <PCS_ConnectionInit+0xd8>)
100031b6:	4b2e      	ldr	r3, [pc, #184]	; (10003270 <PCS_ConnectionInit+0xdc>)
100031b8:	1c10      	adds	r0, r2, #0
100031ba:	2101      	movs	r1, #1
100031bc:	1c1a      	adds	r2, r3, #0
100031be:	f002 f889 	bl	100052d4 <XMC_CAN_Init>

	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
100031c2:	4b2c      	ldr	r3, [pc, #176]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031c4:	1c18      	adds	r0, r3, #0
100031c6:	f7ff ff89 	bl	100030dc <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_SetReceiveInput(CAN_NODE0, XMC_CAN_NODE_RECEIVE_INPUT_RXDCA);
100031ca:	4b2a      	ldr	r3, [pc, #168]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031cc:	1c18      	adds	r0, r3, #0
100031ce:	2100      	movs	r1, #0
100031d0:	f7ff ff6e 	bl	100030b0 <XMC_CAN_NODE_SetReceiveInput>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
100031d4:	4b27      	ldr	r3, [pc, #156]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031d6:	1c18      	adds	r0, r3, #0
100031d8:	f7ff ff8e 	bl	100030f8 <XMC_CAN_NODE_DisableConfigurationChange>

	/* NODE 1 Initialization */
	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
100031dc:	4b25      	ldr	r3, [pc, #148]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031de:	1c18      	adds	r0, r3, #0
100031e0:	f7ff ff7c 	bl	100030dc <XMC_CAN_NODE_EnableConfigurationChange>
	XMC_CAN_NODE_NominalBitTimeConfigure(CAN_NODE0,&can_baud);
100031e4:	4a23      	ldr	r2, [pc, #140]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031e6:	4b24      	ldr	r3, [pc, #144]	; (10003278 <PCS_ConnectionInit+0xe4>)
100031e8:	1c10      	adds	r0, r2, #0
100031ea:	1c19      	adds	r1, r3, #0
100031ec:	f001 ff46 	bl	1000507c <XMC_CAN_NODE_NominalBitTimeConfigure>
	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
100031f0:	4b20      	ldr	r3, [pc, #128]	; (10003274 <PCS_ConnectionInit+0xe0>)
100031f2:	1c18      	adds	r0, r3, #0
100031f4:	f7ff ff80 	bl	100030f8 <XMC_CAN_NODE_DisableConfigurationChange>

	XMC_CAN_MO_Config(&msgObjToPCS);
100031f8:	4b20      	ldr	r3, [pc, #128]	; (1000327c <PCS_ConnectionInit+0xe8>)
100031fa:	1c18      	adds	r0, r3, #0
100031fc:	f002 f944 	bl	10005488 <XMC_CAN_MO_Config>
	XMC_CAN_MO_Config(&msgObjFromPCS);
10003200:	4b1f      	ldr	r3, [pc, #124]	; (10003280 <PCS_ConnectionInit+0xec>)
10003202:	1c18      	adds	r0, r3, #0
10003204:	f002 f940 	bl	10005488 <XMC_CAN_MO_Config>

	/* Enable receive event */
	XMC_CAN_MO_EnableEvent(&msgObjFromPCS, XMC_CAN_MO_EVENT_RECEIVE);
10003208:	4a1d      	ldr	r2, [pc, #116]	; (10003280 <PCS_ConnectionInit+0xec>)
1000320a:	2380      	movs	r3, #128	; 0x80
1000320c:	025b      	lsls	r3, r3, #9
1000320e:	1c10      	adds	r0, r2, #0
10003210:	1c19      	adds	r1, r3, #0
10003212:	f7ff ffaf 	bl	10003174 <XMC_CAN_MO_EnableEvent>

	/* Set receive interrupt Service request number */
	XMC_SCU_SetInterruptControl(7, XMC_SCU_IRQCTRL_CAN0_SR3_IRQ7);
10003216:	4b1b      	ldr	r3, [pc, #108]	; (10003284 <PCS_ConnectionInit+0xf0>)
10003218:	2007      	movs	r0, #7
1000321a:	1c19      	adds	r1, r3, #0
1000321c:	f001 fe78 	bl	10004f10 <XMC_SCU_SetInterruptControl>
	XMC_CAN_MO_SetEventNodePointer(&msgObjFromPCS, XMC_CAN_MO_POINTER_EVENT_RECEIVE, 3);
10003220:	4b17      	ldr	r3, [pc, #92]	; (10003280 <PCS_ConnectionInit+0xec>)
10003222:	1c18      	adds	r0, r3, #0
10003224:	2100      	movs	r1, #0
10003226:	2203      	movs	r2, #3
10003228:	f7ff ff82 	bl	10003130 <XMC_CAN_MO_SetEventNodePointer>
	NVIC_SetPriority(IRQ7_IRQn, 1);
1000322c:	2007      	movs	r0, #7
1000322e:	2101      	movs	r1, #1
10003230:	f7ff fed4 	bl	10002fdc <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ7_IRQn);
10003234:	2007      	movs	r0, #7
10003236:	f7ff feb7 	bl	10002fa8 <__NVIC_EnableIRQ>

	XMC_CAN_AllocateMOtoNodeList(CAN,0,4);
1000323a:	4b0c      	ldr	r3, [pc, #48]	; (1000326c <PCS_ConnectionInit+0xd8>)
1000323c:	1c18      	adds	r0, r3, #0
1000323e:	2100      	movs	r1, #0
10003240:	2204      	movs	r2, #4
10003242:	f002 f805 	bl	10005250 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_AllocateMOtoNodeList(CAN,0,2);
10003246:	4b09      	ldr	r3, [pc, #36]	; (1000326c <PCS_ConnectionInit+0xd8>)
10003248:	1c18      	adds	r0, r3, #0
1000324a:	2100      	movs	r1, #0
1000324c:	2202      	movs	r2, #2
1000324e:	f001 ffff 	bl	10005250 <XMC_CAN_AllocateMOtoNodeList>
	XMC_CAN_NODE_ResetInitBit(CAN_NODE0);
10003252:	4b08      	ldr	r3, [pc, #32]	; (10003274 <PCS_ConnectionInit+0xe0>)
10003254:	1c18      	adds	r0, r3, #0
10003256:	f7ff ff5d 	bl	10003114 <XMC_CAN_NODE_ResetInitBit>
}
1000325a:	46bd      	mov	sp, r7
1000325c:	bd80      	pop	{r7, pc}
1000325e:	46c0      	nop			; (mov r8, r8)
10003260:	40040000 	.word	0x40040000
10003264:	20000620 	.word	0x20000620
10003268:	200007ac 	.word	0x200007ac
1000326c:	50040000 	.word	0x50040000
10003270:	00a7d8c0 	.word	0x00a7d8c0
10003274:	50040200 	.word	0x50040200
10003278:	20000628 	.word	0x20000628
1000327c:	20000638 	.word	0x20000638
10003280:	20000658 	.word	0x20000658
10003284:	00000701 	.word	0x00000701

10003288 <PCS_BMUTransmitToPCS>:

void PCS_BMUTransmitToPCS(uint32_t id, PCS_BMC_STATUS_t *bmuStatus, BMC_PARAMETER_t *bmuParam)
{
10003288:	b580      	push	{r7, lr}
1000328a:	b084      	sub	sp, #16
1000328c:	af00      	add	r7, sp, #0
1000328e:	60f8      	str	r0, [r7, #12]
10003290:	60b9      	str	r1, [r7, #8]
10003292:	607a      	str	r2, [r7, #4]
	switch(id)
10003294:	68fb      	ldr	r3, [r7, #12]
10003296:	2280      	movs	r2, #128	; 0x80
10003298:	0052      	lsls	r2, r2, #1
1000329a:	4293      	cmp	r3, r2
1000329c:	d004      	beq.n	100032a8 <PCS_BMUTransmitToPCS+0x20>
1000329e:	2202      	movs	r2, #2
100032a0:	32ff      	adds	r2, #255	; 0xff
100032a2:	4293      	cmp	r3, r2
100032a4:	d037      	beq.n	10003316 <PCS_BMUTransmitToPCS+0x8e>
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
			break;
		default		:
			break;
100032a6:	e072      	b.n	1000338e <PCS_BMUTransmitToPCS+0x106>
void PCS_BMUTransmitToPCS(uint32_t id, PCS_BMC_STATUS_t *bmuStatus, BMC_PARAMETER_t *bmuParam)
{
	switch(id)
	{
		case (0x100)	:
			msgObjToPCS.can_identifier 	 = id;
100032a8:	68fb      	ldr	r3, [r7, #12]
100032aa:	00db      	lsls	r3, r3, #3
100032ac:	08da      	lsrs	r2, r3, #3
100032ae:	4b3d      	ldr	r3, [pc, #244]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032b0:	00d2      	lsls	r2, r2, #3
100032b2:	08d2      	lsrs	r2, r2, #3
100032b4:	6859      	ldr	r1, [r3, #4]
100032b6:	0f49      	lsrs	r1, r1, #29
100032b8:	0749      	lsls	r1, r1, #29
100032ba:	430a      	orrs	r2, r1
100032bc:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = 0x00;
100032be:	4b39      	ldr	r3, [pc, #228]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032c0:	2200      	movs	r2, #0
100032c2:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = bmuStatus->bmc_status;
100032c4:	68bb      	ldr	r3, [r7, #8]
100032c6:	781a      	ldrb	r2, [r3, #0]
100032c8:	4b36      	ldr	r3, [pc, #216]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032ca:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = 0x00;
100032cc:	4b35      	ldr	r3, [pc, #212]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032ce:	2200      	movs	r2, #0
100032d0:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = bmuStatus->bmc_pcs_command;
100032d2:	68bb      	ldr	r3, [r7, #8]
100032d4:	785a      	ldrb	r2, [r3, #1]
100032d6:	4b33      	ldr	r3, [pc, #204]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032d8:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = 0x00;
100032da:	4b32      	ldr	r3, [pc, #200]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032dc:	2200      	movs	r2, #0
100032de:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = 0x00;
100032e0:	4b30      	ldr	r3, [pc, #192]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032e2:	2200      	movs	r2, #0
100032e4:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[5]|= (bmuStatus->bmc_precharge_relay<<1) | bmuStatus->bmc_main_relay;
100032e6:	4b2f      	ldr	r3, [pc, #188]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
100032e8:	7d5b      	ldrb	r3, [r3, #21]
100032ea:	b2da      	uxtb	r2, r3
100032ec:	68bb      	ldr	r3, [r7, #8]
100032ee:	78db      	ldrb	r3, [r3, #3]
100032f0:	005b      	lsls	r3, r3, #1
100032f2:	b2d9      	uxtb	r1, r3
100032f4:	68bb      	ldr	r3, [r7, #8]
100032f6:	789b      	ldrb	r3, [r3, #2]
100032f8:	b2db      	uxtb	r3, r3
100032fa:	430b      	orrs	r3, r1
100032fc:	b2db      	uxtb	r3, r3
100032fe:	4313      	orrs	r3, r2
10003300:	b2db      	uxtb	r3, r3
10003302:	b2da      	uxtb	r2, r3
10003304:	4b27      	ldr	r3, [pc, #156]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003306:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = 0x00;
10003308:	4b26      	ldr	r3, [pc, #152]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
1000330a:	2200      	movs	r2, #0
1000330c:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = 0x00;
1000330e:	4b25      	ldr	r3, [pc, #148]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003310:	2200      	movs	r2, #0
10003312:	75da      	strb	r2, [r3, #23]
			break;
10003314:	e03b      	b.n	1000338e <PCS_BMUTransmitToPCS+0x106>
		case (0x101)	:
			msgObjToPCS.can_identifier 	 = id;
10003316:	68fb      	ldr	r3, [r7, #12]
10003318:	00db      	lsls	r3, r3, #3
1000331a:	08da      	lsrs	r2, r3, #3
1000331c:	4b21      	ldr	r3, [pc, #132]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
1000331e:	00d2      	lsls	r2, r2, #3
10003320:	08d2      	lsrs	r2, r2, #3
10003322:	6859      	ldr	r1, [r3, #4]
10003324:	0f49      	lsrs	r1, r1, #29
10003326:	0749      	lsls	r1, r1, #29
10003328:	430a      	orrs	r2, r1
1000332a:	605a      	str	r2, [r3, #4]
			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmuParam->soc>>8);
1000332c:	687b      	ldr	r3, [r7, #4]
1000332e:	881b      	ldrh	r3, [r3, #0]
10003330:	0a1b      	lsrs	r3, r3, #8
10003332:	b29b      	uxth	r3, r3
10003334:	b2da      	uxtb	r2, r3
10003336:	4b1b      	ldr	r3, [pc, #108]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003338:	741a      	strb	r2, [r3, #16]
			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmuParam->soc);
1000333a:	687b      	ldr	r3, [r7, #4]
1000333c:	881b      	ldrh	r3, [r3, #0]
1000333e:	b2da      	uxtb	r2, r3
10003340:	4b18      	ldr	r3, [pc, #96]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003342:	745a      	strb	r2, [r3, #17]
			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmuParam->vbat>>8);
10003344:	687b      	ldr	r3, [r7, #4]
10003346:	885b      	ldrh	r3, [r3, #2]
10003348:	0a1b      	lsrs	r3, r3, #8
1000334a:	b29b      	uxth	r3, r3
1000334c:	b2da      	uxtb	r2, r3
1000334e:	4b15      	ldr	r3, [pc, #84]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003350:	749a      	strb	r2, [r3, #18]
			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmuParam->vbat);
10003352:	687b      	ldr	r3, [r7, #4]
10003354:	885b      	ldrh	r3, [r3, #2]
10003356:	b2da      	uxtb	r2, r3
10003358:	4b12      	ldr	r3, [pc, #72]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
1000335a:	74da      	strb	r2, [r3, #19]
			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmuParam->ibat>>8);
1000335c:	687b      	ldr	r3, [r7, #4]
1000335e:	889b      	ldrh	r3, [r3, #4]
10003360:	0a1b      	lsrs	r3, r3, #8
10003362:	b29b      	uxth	r3, r3
10003364:	b2da      	uxtb	r2, r3
10003366:	4b0f      	ldr	r3, [pc, #60]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003368:	751a      	strb	r2, [r3, #20]
			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
1000336a:	687b      	ldr	r3, [r7, #4]
1000336c:	889b      	ldrh	r3, [r3, #4]
1000336e:	b2da      	uxtb	r2, r3
10003370:	4b0c      	ldr	r3, [pc, #48]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003372:	755a      	strb	r2, [r3, #21]
			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
10003374:	687b      	ldr	r3, [r7, #4]
10003376:	88db      	ldrh	r3, [r3, #6]
10003378:	0a1b      	lsrs	r3, r3, #8
1000337a:	b29b      	uxth	r3, r3
1000337c:	b2da      	uxtb	r2, r3
1000337e:	4b09      	ldr	r3, [pc, #36]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003380:	759a      	strb	r2, [r3, #22]
			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
10003382:	687b      	ldr	r3, [r7, #4]
10003384:	88db      	ldrh	r3, [r3, #6]
10003386:	b2da      	uxtb	r2, r3
10003388:	4b06      	ldr	r3, [pc, #24]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
1000338a:	75da      	strb	r2, [r3, #23]
			break;
1000338c:	46c0      	nop			; (mov r8, r8)
		default		:
			break;
	}
	XMC_CAN_MO_Config(&msgObjToPCS);
1000338e:	4b05      	ldr	r3, [pc, #20]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003390:	1c18      	adds	r0, r3, #0
10003392:	f002 f879 	bl	10005488 <XMC_CAN_MO_Config>
	XMC_CAN_MO_Transmit(&msgObjToPCS);
10003396:	4b03      	ldr	r3, [pc, #12]	; (100033a4 <PCS_BMUTransmitToPCS+0x11c>)
10003398:	1c18      	adds	r0, r3, #0
1000339a:	f002 f957 	bl	1000564c <XMC_CAN_MO_Transmit>
}
1000339e:	46bd      	mov	sp, r7
100033a0:	b004      	add	sp, #16
100033a2:	bd80      	pop	{r7, pc}
100033a4:	20000638 	.word	0x20000638

100033a8 <PCS_GetPCSStatus>:

PCS_STATUS_t PCS_GetPCSStatus(XMC_CAN_MO_t *can_m0_obj)
{
100033a8:	b580      	push	{r7, lr}
100033aa:	b084      	sub	sp, #16
100033ac:	af00      	add	r7, sp, #0
100033ae:	6078      	str	r0, [r7, #4]
100033b0:	6039      	str	r1, [r7, #0]
	PCS_STATUS_t param;
	uint8_t 	 status;
	status = can_m0_obj->can_data_byte[0];
100033b2:	230f      	movs	r3, #15
100033b4:	18fb      	adds	r3, r7, r3
100033b6:	683a      	ldr	r2, [r7, #0]
100033b8:	7c12      	ldrb	r2, [r2, #16]
100033ba:	701a      	strb	r2, [r3, #0]
	if(status<=3) 						{param.pcs_system_status = PCS_STAT_INITIAL;}
100033bc:	230f      	movs	r3, #15
100033be:	18fb      	adds	r3, r7, r3
100033c0:	781b      	ldrb	r3, [r3, #0]
100033c2:	2b03      	cmp	r3, #3
100033c4:	d804      	bhi.n	100033d0 <PCS_GetPCSStatus+0x28>
100033c6:	2308      	movs	r3, #8
100033c8:	18fb      	adds	r3, r7, r3
100033ca:	2200      	movs	r2, #0
100033cc:	701a      	strb	r2, [r3, #0]
100033ce:	e017      	b.n	10003400 <PCS_GetPCSStatus+0x58>
	else if((status==4) ) 				{param.pcs_system_status = PCS_STAT_STANDBY;}
100033d0:	230f      	movs	r3, #15
100033d2:	18fb      	adds	r3, r7, r3
100033d4:	781b      	ldrb	r3, [r3, #0]
100033d6:	2b04      	cmp	r3, #4
100033d8:	d104      	bne.n	100033e4 <PCS_GetPCSStatus+0x3c>
100033da:	2308      	movs	r3, #8
100033dc:	18fb      	adds	r3, r7, r3
100033de:	2204      	movs	r2, #4
100033e0:	701a      	strb	r2, [r3, #0]
100033e2:	e00d      	b.n	10003400 <PCS_GetPCSStatus+0x58>
	else if((status==6) || (status==5)) {param.pcs_system_status = PCS_STAT_RUNNING;}
100033e4:	230f      	movs	r3, #15
100033e6:	18fb      	adds	r3, r7, r3
100033e8:	781b      	ldrb	r3, [r3, #0]
100033ea:	2b06      	cmp	r3, #6
100033ec:	d004      	beq.n	100033f8 <PCS_GetPCSStatus+0x50>
100033ee:	230f      	movs	r3, #15
100033f0:	18fb      	adds	r3, r7, r3
100033f2:	781b      	ldrb	r3, [r3, #0]
100033f4:	2b05      	cmp	r3, #5
100033f6:	d103      	bne.n	10003400 <PCS_GetPCSStatus+0x58>
100033f8:	2308      	movs	r3, #8
100033fa:	18fb      	adds	r3, r7, r3
100033fc:	2206      	movs	r2, #6
100033fe:	701a      	strb	r2, [r3, #0]

	status = can_m0_obj->can_data_byte[1];
10003400:	230f      	movs	r3, #15
10003402:	18fb      	adds	r3, r7, r3
10003404:	683a      	ldr	r2, [r7, #0]
10003406:	7c52      	ldrb	r2, [r2, #17]
10003408:	701a      	strb	r2, [r3, #0]
	if(status)	{param.pcs_precharge_IsComplete = true;}
1000340a:	230f      	movs	r3, #15
1000340c:	18fb      	adds	r3, r7, r3
1000340e:	781b      	ldrb	r3, [r3, #0]
10003410:	2b00      	cmp	r3, #0
10003412:	d004      	beq.n	1000341e <PCS_GetPCSStatus+0x76>
10003414:	2308      	movs	r3, #8
10003416:	18fb      	adds	r3, r7, r3
10003418:	2201      	movs	r2, #1
1000341a:	705a      	strb	r2, [r3, #1]
1000341c:	e003      	b.n	10003426 <PCS_GetPCSStatus+0x7e>
	else 		{param.pcs_precharge_IsComplete = false;}
1000341e:	2308      	movs	r3, #8
10003420:	18fb      	adds	r3, r7, r3
10003422:	2200      	movs	r2, #0
10003424:	705a      	strb	r2, [r3, #1]

	param.pcs_system_warning = PCS_WARN_NORMAL;
10003426:	2308      	movs	r3, #8
10003428:	18fb      	adds	r3, r7, r3
1000342a:	2200      	movs	r2, #0
1000342c:	709a      	strb	r2, [r3, #2]
	param.pcs_system_pcsIsStandBy = false;
1000342e:	2308      	movs	r3, #8
10003430:	18fb      	adds	r3, r7, r3
10003432:	2200      	movs	r2, #0
10003434:	711a      	strb	r2, [r3, #4]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
10003436:	230f      	movs	r3, #15
10003438:	18fb      	adds	r3, r7, r3
1000343a:	683a      	ldr	r2, [r7, #0]
1000343c:	7c92      	ldrb	r2, [r2, #18]
1000343e:	701a      	strb	r2, [r3, #0]
	if((status>>6)&0x01)
10003440:	230f      	movs	r3, #15
10003442:	18fb      	adds	r3, r7, r3
10003444:	781b      	ldrb	r3, [r3, #0]
10003446:	099b      	lsrs	r3, r3, #6
10003448:	b2db      	uxtb	r3, r3
1000344a:	1c1a      	adds	r2, r3, #0
1000344c:	2301      	movs	r3, #1
1000344e:	4013      	ands	r3, r2
10003450:	d007      	beq.n	10003462 <PCS_GetPCSStatus+0xba>
	{
		param.pcs_system_warning = PCS_WARN_PCS_OT;
10003452:	2308      	movs	r3, #8
10003454:	18fb      	adds	r3, r7, r3
10003456:	2206      	movs	r2, #6
10003458:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
1000345a:	2308      	movs	r3, #8
1000345c:	18fb      	adds	r3, r7, r3
1000345e:	2201      	movs	r2, #1
10003460:	711a      	strb	r2, [r3, #4]
	}

	status = can_m0_obj->can_data_byte[3];
10003462:	230f      	movs	r3, #15
10003464:	18fb      	adds	r3, r7, r3
10003466:	683a      	ldr	r2, [r7, #0]
10003468:	7cd2      	ldrb	r2, [r2, #19]
1000346a:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
1000346c:	230f      	movs	r3, #15
1000346e:	18fb      	adds	r3, r7, r3
10003470:	781b      	ldrb	r3, [r3, #0]
10003472:	09db      	lsrs	r3, r3, #7
10003474:	b2db      	uxtb	r3, r3
10003476:	1c1a      	adds	r2, r3, #0
10003478:	2301      	movs	r3, #1
1000347a:	4013      	ands	r3, r2
1000347c:	d007      	beq.n	1000348e <PCS_GetPCSStatus+0xe6>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVCHG;
1000347e:	2308      	movs	r3, #8
10003480:	18fb      	adds	r3, r7, r3
10003482:	2201      	movs	r2, #1
10003484:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
10003486:	2308      	movs	r3, #8
10003488:	18fb      	adds	r3, r7, r3
1000348a:	2201      	movs	r2, #1
1000348c:	711a      	strb	r2, [r3, #4]
	}
	if((status>>6)&0x01){param.pcs_system_warning = PCS_WARN_BAT_CHGSUP;}
1000348e:	230f      	movs	r3, #15
10003490:	18fb      	adds	r3, r7, r3
10003492:	781b      	ldrb	r3, [r3, #0]
10003494:	099b      	lsrs	r3, r3, #6
10003496:	b2db      	uxtb	r3, r3
10003498:	1c1a      	adds	r2, r3, #0
1000349a:	2301      	movs	r3, #1
1000349c:	4013      	ands	r3, r2
1000349e:	d003      	beq.n	100034a8 <PCS_GetPCSStatus+0x100>
100034a0:	2308      	movs	r3, #8
100034a2:	18fb      	adds	r3, r7, r3
100034a4:	2202      	movs	r2, #2
100034a6:	709a      	strb	r2, [r3, #2]
	if((status>>5)&0x01){param.pcs_system_warning = PCS_WARN_BAT_DSGSUP;}
100034a8:	230f      	movs	r3, #15
100034aa:	18fb      	adds	r3, r7, r3
100034ac:	781b      	ldrb	r3, [r3, #0]
100034ae:	095b      	lsrs	r3, r3, #5
100034b0:	b2db      	uxtb	r3, r3
100034b2:	1c1a      	adds	r2, r3, #0
100034b4:	2301      	movs	r3, #1
100034b6:	4013      	ands	r3, r2
100034b8:	d003      	beq.n	100034c2 <PCS_GetPCSStatus+0x11a>
100034ba:	2308      	movs	r3, #8
100034bc:	18fb      	adds	r3, r7, r3
100034be:	2203      	movs	r2, #3
100034c0:	709a      	strb	r2, [r3, #2]
	if((status>>4)&0x01){param.pcs_system_warning = PCS_WARN_BAT_OVDSG;}
100034c2:	230f      	movs	r3, #15
100034c4:	18fb      	adds	r3, r7, r3
100034c6:	781b      	ldrb	r3, [r3, #0]
100034c8:	091b      	lsrs	r3, r3, #4
100034ca:	b2db      	uxtb	r3, r3
100034cc:	1c1a      	adds	r2, r3, #0
100034ce:	2301      	movs	r3, #1
100034d0:	4013      	ands	r3, r2
100034d2:	d003      	beq.n	100034dc <PCS_GetPCSStatus+0x134>
100034d4:	2308      	movs	r3, #8
100034d6:	18fb      	adds	r3, r7, r3
100034d8:	2204      	movs	r2, #4
100034da:	709a      	strb	r2, [r3, #2]
	if((status>>3)&0x01)
100034dc:	230f      	movs	r3, #15
100034de:	18fb      	adds	r3, r7, r3
100034e0:	781b      	ldrb	r3, [r3, #0]
100034e2:	08db      	lsrs	r3, r3, #3
100034e4:	b2db      	uxtb	r3, r3
100034e6:	1c1a      	adds	r2, r3, #0
100034e8:	2301      	movs	r3, #1
100034ea:	4013      	ands	r3, r2
100034ec:	d007      	beq.n	100034fe <PCS_GetPCSStatus+0x156>
	{
		param.pcs_system_warning = PCS_WARN_BAT_OVDSG2;
100034ee:	2308      	movs	r3, #8
100034f0:	18fb      	adds	r3, r7, r3
100034f2:	2205      	movs	r2, #5
100034f4:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
100034f6:	2308      	movs	r3, #8
100034f8:	18fb      	adds	r3, r7, r3
100034fa:	2201      	movs	r2, #1
100034fc:	711a      	strb	r2, [r3, #4]
	}
	if((status>>2)&0x01)
100034fe:	230f      	movs	r3, #15
10003500:	18fb      	adds	r3, r7, r3
10003502:	781b      	ldrb	r3, [r3, #0]
10003504:	089b      	lsrs	r3, r3, #2
10003506:	b2db      	uxtb	r3, r3
10003508:	1c1a      	adds	r2, r3, #0
1000350a:	2301      	movs	r3, #1
1000350c:	4013      	ands	r3, r2
1000350e:	d007      	beq.n	10003520 <PCS_GetPCSStatus+0x178>
	{
		param.pcs_system_warning = PCS_WARN_COMM_ERR;
10003510:	2308      	movs	r3, #8
10003512:	18fb      	adds	r3, r7, r3
10003514:	2207      	movs	r2, #7
10003516:	709a      	strb	r2, [r3, #2]
		param.pcs_system_pcsIsStandBy = true;
10003518:	2308      	movs	r3, #8
1000351a:	18fb      	adds	r3, r7, r3
1000351c:	2201      	movs	r2, #1
1000351e:	711a      	strb	r2, [r3, #4]
	}

	return param;
10003520:	687a      	ldr	r2, [r7, #4]
10003522:	2308      	movs	r3, #8
10003524:	18fb      	adds	r3, r7, r3
10003526:	1c11      	adds	r1, r2, #0
10003528:	1c1a      	adds	r2, r3, #0
1000352a:	2305      	movs	r3, #5
1000352c:	1c08      	adds	r0, r1, #0
1000352e:	1c11      	adds	r1, r2, #0
10003530:	1c1a      	adds	r2, r3, #0
10003532:	f005 faf5 	bl	10008b20 <memcpy>
}
10003536:	6878      	ldr	r0, [r7, #4]
10003538:	46bd      	mov	sp, r7
1000353a:	b004      	add	sp, #16
1000353c:	bd80      	pop	{r7, pc}
1000353e:	46c0      	nop			; (mov r8, r8)

10003540 <PCS_GetDCGridStatus>:

DCGRID_STATUS_t 	PCS_GetDCGridStatus(XMC_CAN_MO_t *can_m0_obj)
{
10003540:	b580      	push	{r7, lr}
10003542:	b086      	sub	sp, #24
10003544:	af00      	add	r7, sp, #0
10003546:	6078      	str	r0, [r7, #4]
	DCGRID_STATUS_t param;
	uint8_t			status;

	param.dcgrid_system_pcsIsStandBy = false;
10003548:	230c      	movs	r3, #12
1000354a:	18fb      	adds	r3, r7, r3
1000354c:	2200      	movs	r2, #0
1000354e:	70da      	strb	r2, [r3, #3]

	status = can_m0_obj->can_data_byte[0];
10003550:	2317      	movs	r3, #23
10003552:	18fb      	adds	r3, r7, r3
10003554:	687a      	ldr	r2, [r7, #4]
10003556:	7c12      	ldrb	r2, [r2, #16]
10003558:	701a      	strb	r2, [r3, #0]
	if		((status<=3)||(status==6)||(status==7)) {param.dcgrid_system_status = GRID_STAT_NOT_RUNNING;}
1000355a:	2317      	movs	r3, #23
1000355c:	18fb      	adds	r3, r7, r3
1000355e:	781b      	ldrb	r3, [r3, #0]
10003560:	2b03      	cmp	r3, #3
10003562:	d909      	bls.n	10003578 <PCS_GetDCGridStatus+0x38>
10003564:	2317      	movs	r3, #23
10003566:	18fb      	adds	r3, r7, r3
10003568:	781b      	ldrb	r3, [r3, #0]
1000356a:	2b06      	cmp	r3, #6
1000356c:	d004      	beq.n	10003578 <PCS_GetDCGridStatus+0x38>
1000356e:	2317      	movs	r3, #23
10003570:	18fb      	adds	r3, r7, r3
10003572:	781b      	ldrb	r3, [r3, #0]
10003574:	2b07      	cmp	r3, #7
10003576:	d104      	bne.n	10003582 <PCS_GetDCGridStatus+0x42>
10003578:	230c      	movs	r3, #12
1000357a:	18fb      	adds	r3, r7, r3
1000357c:	2200      	movs	r2, #0
1000357e:	701a      	strb	r2, [r3, #0]
10003580:	e01c      	b.n	100035bc <PCS_GetDCGridStatus+0x7c>
	else if ((status==4)||(status ==5)) 			{param.dcgrid_system_status = GRID_STAT_CHG;}
10003582:	2317      	movs	r3, #23
10003584:	18fb      	adds	r3, r7, r3
10003586:	781b      	ldrb	r3, [r3, #0]
10003588:	2b04      	cmp	r3, #4
1000358a:	d004      	beq.n	10003596 <PCS_GetDCGridStatus+0x56>
1000358c:	2317      	movs	r3, #23
1000358e:	18fb      	adds	r3, r7, r3
10003590:	781b      	ldrb	r3, [r3, #0]
10003592:	2b05      	cmp	r3, #5
10003594:	d104      	bne.n	100035a0 <PCS_GetDCGridStatus+0x60>
10003596:	230c      	movs	r3, #12
10003598:	18fb      	adds	r3, r7, r3
1000359a:	2204      	movs	r2, #4
1000359c:	701a      	strb	r2, [r3, #0]
1000359e:	e00d      	b.n	100035bc <PCS_GetDCGridStatus+0x7c>
	else if ((status==8)||(status ==9)) 			{param.dcgrid_system_status = GRID_STAT_DSG;}
100035a0:	2317      	movs	r3, #23
100035a2:	18fb      	adds	r3, r7, r3
100035a4:	781b      	ldrb	r3, [r3, #0]
100035a6:	2b08      	cmp	r3, #8
100035a8:	d004      	beq.n	100035b4 <PCS_GetDCGridStatus+0x74>
100035aa:	2317      	movs	r3, #23
100035ac:	18fb      	adds	r3, r7, r3
100035ae:	781b      	ldrb	r3, [r3, #0]
100035b0:	2b09      	cmp	r3, #9
100035b2:	d103      	bne.n	100035bc <PCS_GetDCGridStatus+0x7c>
100035b4:	230c      	movs	r3, #12
100035b6:	18fb      	adds	r3, r7, r3
100035b8:	2208      	movs	r2, #8
100035ba:	701a      	strb	r2, [r3, #0]

	param.dcgrid_system_warning=GRID_WARN_NORMAL;
100035bc:	230c      	movs	r3, #12
100035be:	18fb      	adds	r3, r7, r3
100035c0:	2200      	movs	r2, #0
100035c2:	705a      	strb	r2, [r3, #1]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
100035c4:	2317      	movs	r3, #23
100035c6:	18fb      	adds	r3, r7, r3
100035c8:	687a      	ldr	r2, [r7, #4]
100035ca:	7c92      	ldrb	r2, [r2, #18]
100035cc:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.dcgrid_system_warning=GRID_WARN_OV;}
100035ce:	2317      	movs	r3, #23
100035d0:	18fb      	adds	r3, r7, r3
100035d2:	781b      	ldrb	r3, [r3, #0]
100035d4:	09db      	lsrs	r3, r3, #7
100035d6:	b2db      	uxtb	r3, r3
100035d8:	1c1a      	adds	r2, r3, #0
100035da:	2301      	movs	r3, #1
100035dc:	4013      	ands	r3, r2
100035de:	d003      	beq.n	100035e8 <PCS_GetDCGridStatus+0xa8>
100035e0:	230c      	movs	r3, #12
100035e2:	18fb      	adds	r3, r7, r3
100035e4:	2201      	movs	r2, #1
100035e6:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.dcgrid_system_warning=GRID_WARN_OC;}
100035e8:	2317      	movs	r3, #23
100035ea:	18fb      	adds	r3, r7, r3
100035ec:	781b      	ldrb	r3, [r3, #0]
100035ee:	099b      	lsrs	r3, r3, #6
100035f0:	b2db      	uxtb	r3, r3
100035f2:	1c1a      	adds	r2, r3, #0
100035f4:	2301      	movs	r3, #1
100035f6:	4013      	ands	r3, r2
100035f8:	d003      	beq.n	10003602 <PCS_GetDCGridStatus+0xc2>
100035fa:	230c      	movs	r3, #12
100035fc:	18fb      	adds	r3, r7, r3
100035fe:	2202      	movs	r2, #2
10003600:	705a      	strb	r2, [r3, #1]

	return param;
10003602:	2310      	movs	r3, #16
10003604:	18fb      	adds	r3, r7, r3
10003606:	220c      	movs	r2, #12
10003608:	18ba      	adds	r2, r7, r2
1000360a:	6812      	ldr	r2, [r2, #0]
1000360c:	601a      	str	r2, [r3, #0]
1000360e:	2310      	movs	r3, #16
10003610:	18fa      	adds	r2, r7, r3
10003612:	2300      	movs	r3, #0
10003614:	7811      	ldrb	r1, [r2, #0]
10003616:	20ff      	movs	r0, #255	; 0xff
10003618:	4001      	ands	r1, r0
1000361a:	20ff      	movs	r0, #255	; 0xff
1000361c:	4383      	bics	r3, r0
1000361e:	430b      	orrs	r3, r1
10003620:	7851      	ldrb	r1, [r2, #1]
10003622:	20ff      	movs	r0, #255	; 0xff
10003624:	4001      	ands	r1, r0
10003626:	0209      	lsls	r1, r1, #8
10003628:	4809      	ldr	r0, [pc, #36]	; (10003650 <PCS_GetDCGridStatus+0x110>)
1000362a:	4003      	ands	r3, r0
1000362c:	430b      	orrs	r3, r1
1000362e:	7891      	ldrb	r1, [r2, #2]
10003630:	20ff      	movs	r0, #255	; 0xff
10003632:	4001      	ands	r1, r0
10003634:	0409      	lsls	r1, r1, #16
10003636:	4807      	ldr	r0, [pc, #28]	; (10003654 <PCS_GetDCGridStatus+0x114>)
10003638:	4003      	ands	r3, r0
1000363a:	430b      	orrs	r3, r1
1000363c:	78d2      	ldrb	r2, [r2, #3]
1000363e:	0612      	lsls	r2, r2, #24
10003640:	021b      	lsls	r3, r3, #8
10003642:	0a1b      	lsrs	r3, r3, #8
10003644:	4313      	orrs	r3, r2
}
10003646:	1c18      	adds	r0, r3, #0
10003648:	46bd      	mov	sp, r7
1000364a:	b006      	add	sp, #24
1000364c:	bd80      	pop	{r7, pc}
1000364e:	46c0      	nop			; (mov r8, r8)
10003650:	ffff00ff 	.word	0xffff00ff
10003654:	ff00ffff 	.word	0xff00ffff

10003658 <PCS_GetACInvStatus>:

ACINV_STATUS_t 		PCS_GetACInvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10003658:	b580      	push	{r7, lr}
1000365a:	b086      	sub	sp, #24
1000365c:	af00      	add	r7, sp, #0
1000365e:	6078      	str	r0, [r7, #4]
	ACINV_STATUS_t param;
	uint8_t		   status;

	status = can_m0_obj->can_data_byte[0];
10003660:	2317      	movs	r3, #23
10003662:	18fb      	adds	r3, r7, r3
10003664:	687a      	ldr	r2, [r7, #4]
10003666:	7c12      	ldrb	r2, [r2, #16]
10003668:	701a      	strb	r2, [r3, #0]
	if((status<=3)||(status==11)||(status==13))	{param.acinv_system_status = INV_STAT_NOT_RUNNING;}
1000366a:	2317      	movs	r3, #23
1000366c:	18fb      	adds	r3, r7, r3
1000366e:	781b      	ldrb	r3, [r3, #0]
10003670:	2b03      	cmp	r3, #3
10003672:	d909      	bls.n	10003688 <PCS_GetACInvStatus+0x30>
10003674:	2317      	movs	r3, #23
10003676:	18fb      	adds	r3, r7, r3
10003678:	781b      	ldrb	r3, [r3, #0]
1000367a:	2b0b      	cmp	r3, #11
1000367c:	d004      	beq.n	10003688 <PCS_GetACInvStatus+0x30>
1000367e:	2317      	movs	r3, #23
10003680:	18fb      	adds	r3, r7, r3
10003682:	781b      	ldrb	r3, [r3, #0]
10003684:	2b0d      	cmp	r3, #13
10003686:	d104      	bne.n	10003692 <PCS_GetACInvStatus+0x3a>
10003688:	230c      	movs	r3, #12
1000368a:	18fb      	adds	r3, r7, r3
1000368c:	2200      	movs	r2, #0
1000368e:	701a      	strb	r2, [r3, #0]
10003690:	e012      	b.n	100036b8 <PCS_GetACInvStatus+0x60>
	else if((status==14)||(status ==15))  		{param.acinv_system_status = INV_STAT_RUNNING;}
10003692:	2317      	movs	r3, #23
10003694:	18fb      	adds	r3, r7, r3
10003696:	781b      	ldrb	r3, [r3, #0]
10003698:	2b0e      	cmp	r3, #14
1000369a:	d004      	beq.n	100036a6 <PCS_GetACInvStatus+0x4e>
1000369c:	2317      	movs	r3, #23
1000369e:	18fb      	adds	r3, r7, r3
100036a0:	781b      	ldrb	r3, [r3, #0]
100036a2:	2b0f      	cmp	r3, #15
100036a4:	d104      	bne.n	100036b0 <PCS_GetACInvStatus+0x58>
100036a6:	230c      	movs	r3, #12
100036a8:	18fb      	adds	r3, r7, r3
100036aa:	220e      	movs	r2, #14
100036ac:	701a      	strb	r2, [r3, #0]
100036ae:	e003      	b.n	100036b8 <PCS_GetACInvStatus+0x60>
	else							 			{param.acinv_system_status = INV_STAT_NONE;}
100036b0:	230c      	movs	r3, #12
100036b2:	18fb      	adds	r3, r7, r3
100036b4:	2204      	movs	r2, #4
100036b6:	701a      	strb	r2, [r3, #0]

	param.acinv_system_warning = INV_WARN_NORMAL;
100036b8:	230c      	movs	r3, #12
100036ba:	18fb      	adds	r3, r7, r3
100036bc:	2200      	movs	r2, #0
100036be:	705a      	strb	r2, [r3, #1]
	param.acinv_system_pcsIsStandBy = false;
100036c0:	230c      	movs	r3, #12
100036c2:	18fb      	adds	r3, r7, r3
100036c4:	2200      	movs	r2, #0
100036c6:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
100036c8:	2317      	movs	r3, #23
100036ca:	18fb      	adds	r3, r7, r3
100036cc:	687a      	ldr	r2, [r7, #4]
100036ce:	7c92      	ldrb	r2, [r2, #18]
100036d0:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
100036d2:	2317      	movs	r3, #23
100036d4:	18fb      	adds	r3, r7, r3
100036d6:	781b      	ldrb	r3, [r3, #0]
100036d8:	09db      	lsrs	r3, r3, #7
100036da:	b2db      	uxtb	r3, r3
100036dc:	1c1a      	adds	r2, r3, #0
100036de:	2301      	movs	r3, #1
100036e0:	4013      	ands	r3, r2
100036e2:	d007      	beq.n	100036f4 <PCS_GetACInvStatus+0x9c>
		{
			param.acinv_system_warning = INV_WARN_MCU_OV;
100036e4:	230c      	movs	r3, #12
100036e6:	18fb      	adds	r3, r7, r3
100036e8:	2201      	movs	r2, #1
100036ea:	705a      	strb	r2, [r3, #1]
			param.acinv_system_pcsIsStandBy = true;
100036ec:	230c      	movs	r3, #12
100036ee:	18fb      	adds	r3, r7, r3
100036f0:	2201      	movs	r2, #1
100036f2:	70da      	strb	r2, [r3, #3]
		}
	if((status>>3)&0x01){param.acinv_system_warning = INV_WARN_OT;}
100036f4:	2317      	movs	r3, #23
100036f6:	18fb      	adds	r3, r7, r3
100036f8:	781b      	ldrb	r3, [r3, #0]
100036fa:	08db      	lsrs	r3, r3, #3
100036fc:	b2db      	uxtb	r3, r3
100036fe:	1c1a      	adds	r2, r3, #0
10003700:	2301      	movs	r3, #1
10003702:	4013      	ands	r3, r2
10003704:	d003      	beq.n	1000370e <PCS_GetACInvStatus+0xb6>
10003706:	230c      	movs	r3, #12
10003708:	18fb      	adds	r3, r7, r3
1000370a:	2202      	movs	r2, #2
1000370c:	705a      	strb	r2, [r3, #1]
	if((status>>2)&0x01){param.acinv_system_warning = INV_WARN_OV;}
1000370e:	2317      	movs	r3, #23
10003710:	18fb      	adds	r3, r7, r3
10003712:	781b      	ldrb	r3, [r3, #0]
10003714:	089b      	lsrs	r3, r3, #2
10003716:	b2db      	uxtb	r3, r3
10003718:	1c1a      	adds	r2, r3, #0
1000371a:	2301      	movs	r3, #1
1000371c:	4013      	ands	r3, r2
1000371e:	d003      	beq.n	10003728 <PCS_GetACInvStatus+0xd0>
10003720:	230c      	movs	r3, #12
10003722:	18fb      	adds	r3, r7, r3
10003724:	2203      	movs	r2, #3
10003726:	705a      	strb	r2, [r3, #1]
	if((status>>1)&0x01){param.acinv_system_warning = INV_WARN_UV;}
10003728:	2317      	movs	r3, #23
1000372a:	18fb      	adds	r3, r7, r3
1000372c:	781b      	ldrb	r3, [r3, #0]
1000372e:	085b      	lsrs	r3, r3, #1
10003730:	b2db      	uxtb	r3, r3
10003732:	1c1a      	adds	r2, r3, #0
10003734:	2301      	movs	r3, #1
10003736:	4013      	ands	r3, r2
10003738:	d003      	beq.n	10003742 <PCS_GetACInvStatus+0xea>
1000373a:	230c      	movs	r3, #12
1000373c:	18fb      	adds	r3, r7, r3
1000373e:	2204      	movs	r2, #4
10003740:	705a      	strb	r2, [r3, #1]
	if((status)&0x01){param.acinv_system_warning = INV_WARN_OL;}
10003742:	2317      	movs	r3, #23
10003744:	18fb      	adds	r3, r7, r3
10003746:	781b      	ldrb	r3, [r3, #0]
10003748:	2201      	movs	r2, #1
1000374a:	4013      	ands	r3, r2
1000374c:	d003      	beq.n	10003756 <PCS_GetACInvStatus+0xfe>
1000374e:	230c      	movs	r3, #12
10003750:	18fb      	adds	r3, r7, r3
10003752:	2205      	movs	r2, #5
10003754:	705a      	strb	r2, [r3, #1]

	return param;
10003756:	2310      	movs	r3, #16
10003758:	18fb      	adds	r3, r7, r3
1000375a:	220c      	movs	r2, #12
1000375c:	18ba      	adds	r2, r7, r2
1000375e:	6812      	ldr	r2, [r2, #0]
10003760:	601a      	str	r2, [r3, #0]
10003762:	2310      	movs	r3, #16
10003764:	18fa      	adds	r2, r7, r3
10003766:	2300      	movs	r3, #0
10003768:	7811      	ldrb	r1, [r2, #0]
1000376a:	20ff      	movs	r0, #255	; 0xff
1000376c:	4001      	ands	r1, r0
1000376e:	20ff      	movs	r0, #255	; 0xff
10003770:	4383      	bics	r3, r0
10003772:	430b      	orrs	r3, r1
10003774:	7851      	ldrb	r1, [r2, #1]
10003776:	20ff      	movs	r0, #255	; 0xff
10003778:	4001      	ands	r1, r0
1000377a:	0209      	lsls	r1, r1, #8
1000377c:	4809      	ldr	r0, [pc, #36]	; (100037a4 <PCS_GetACInvStatus+0x14c>)
1000377e:	4003      	ands	r3, r0
10003780:	430b      	orrs	r3, r1
10003782:	7891      	ldrb	r1, [r2, #2]
10003784:	20ff      	movs	r0, #255	; 0xff
10003786:	4001      	ands	r1, r0
10003788:	0409      	lsls	r1, r1, #16
1000378a:	4807      	ldr	r0, [pc, #28]	; (100037a8 <PCS_GetACInvStatus+0x150>)
1000378c:	4003      	ands	r3, r0
1000378e:	430b      	orrs	r3, r1
10003790:	78d2      	ldrb	r2, [r2, #3]
10003792:	0612      	lsls	r2, r2, #24
10003794:	021b      	lsls	r3, r3, #8
10003796:	0a1b      	lsrs	r3, r3, #8
10003798:	4313      	orrs	r3, r2
}
1000379a:	1c18      	adds	r0, r3, #0
1000379c:	46bd      	mov	sp, r7
1000379e:	b006      	add	sp, #24
100037a0:	bd80      	pop	{r7, pc}
100037a2:	46c0      	nop			; (mov r8, r8)
100037a4:	ffff00ff 	.word	0xffff00ff
100037a8:	ff00ffff 	.word	0xff00ffff

100037ac <PCS_GetPVConvStatus>:

PVCONV_STATUS_t 	PCS_GetPVConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
100037ac:	b580      	push	{r7, lr}
100037ae:	b086      	sub	sp, #24
100037b0:	af00      	add	r7, sp, #0
100037b2:	6078      	str	r0, [r7, #4]
	PVCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
100037b4:	2317      	movs	r3, #23
100037b6:	18fb      	adds	r3, r7, r3
100037b8:	687a      	ldr	r2, [r7, #4]
100037ba:	7c12      	ldrb	r2, [r2, #16]
100037bc:	701a      	strb	r2, [r3, #0]
	if 		(status<=3) 				{param.pvconv_system_status = PV_STAT_NOT_RUNNING;}
100037be:	2317      	movs	r3, #23
100037c0:	18fb      	adds	r3, r7, r3
100037c2:	781b      	ldrb	r3, [r3, #0]
100037c4:	2b03      	cmp	r3, #3
100037c6:	d804      	bhi.n	100037d2 <PCS_GetPVConvStatus+0x26>
100037c8:	230c      	movs	r3, #12
100037ca:	18fb      	adds	r3, r7, r3
100037cc:	2200      	movs	r2, #0
100037ce:	701a      	strb	r2, [r3, #0]
100037d0:	e00d      	b.n	100037ee <PCS_GetPVConvStatus+0x42>
	else if ((status==4)||(status ==5))	{param.pvconv_system_status = PV_STAT_RUNNING;}
100037d2:	2317      	movs	r3, #23
100037d4:	18fb      	adds	r3, r7, r3
100037d6:	781b      	ldrb	r3, [r3, #0]
100037d8:	2b04      	cmp	r3, #4
100037da:	d004      	beq.n	100037e6 <PCS_GetPVConvStatus+0x3a>
100037dc:	2317      	movs	r3, #23
100037de:	18fb      	adds	r3, r7, r3
100037e0:	781b      	ldrb	r3, [r3, #0]
100037e2:	2b05      	cmp	r3, #5
100037e4:	d103      	bne.n	100037ee <PCS_GetPVConvStatus+0x42>
100037e6:	230c      	movs	r3, #12
100037e8:	18fb      	adds	r3, r7, r3
100037ea:	2204      	movs	r2, #4
100037ec:	701a      	strb	r2, [r3, #0]

	param.pvconv_system_warning = PV_WARN_NORMAL;
100037ee:	230c      	movs	r3, #12
100037f0:	18fb      	adds	r3, r7, r3
100037f2:	2200      	movs	r2, #0
100037f4:	705a      	strb	r2, [r3, #1]
	param.pvconv_system_pcsIsStandBy = false;
100037f6:	230c      	movs	r3, #12
100037f8:	18fb      	adds	r3, r7, r3
100037fa:	2200      	movs	r2, #0
100037fc:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
100037fe:	2317      	movs	r3, #23
10003800:	18fb      	adds	r3, r7, r3
10003802:	687a      	ldr	r2, [r7, #4]
10003804:	7c92      	ldrb	r2, [r2, #18]
10003806:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01){param.pvconv_system_warning = PV_WARN_OV;}
10003808:	2317      	movs	r3, #23
1000380a:	18fb      	adds	r3, r7, r3
1000380c:	781b      	ldrb	r3, [r3, #0]
1000380e:	09db      	lsrs	r3, r3, #7
10003810:	b2db      	uxtb	r3, r3
10003812:	1c1a      	adds	r2, r3, #0
10003814:	2301      	movs	r3, #1
10003816:	4013      	ands	r3, r2
10003818:	d003      	beq.n	10003822 <PCS_GetPVConvStatus+0x76>
1000381a:	230c      	movs	r3, #12
1000381c:	18fb      	adds	r3, r7, r3
1000381e:	2201      	movs	r2, #1
10003820:	705a      	strb	r2, [r3, #1]
	if((status>>6)&0x01){param.pvconv_system_warning = PV_WARN_OC;}
10003822:	2317      	movs	r3, #23
10003824:	18fb      	adds	r3, r7, r3
10003826:	781b      	ldrb	r3, [r3, #0]
10003828:	099b      	lsrs	r3, r3, #6
1000382a:	b2db      	uxtb	r3, r3
1000382c:	1c1a      	adds	r2, r3, #0
1000382e:	2301      	movs	r3, #1
10003830:	4013      	ands	r3, r2
10003832:	d003      	beq.n	1000383c <PCS_GetPVConvStatus+0x90>
10003834:	230c      	movs	r3, #12
10003836:	18fb      	adds	r3, r7, r3
10003838:	2202      	movs	r2, #2
1000383a:	705a      	strb	r2, [r3, #1]

	return param;
1000383c:	2310      	movs	r3, #16
1000383e:	18fb      	adds	r3, r7, r3
10003840:	220c      	movs	r2, #12
10003842:	18ba      	adds	r2, r7, r2
10003844:	6812      	ldr	r2, [r2, #0]
10003846:	601a      	str	r2, [r3, #0]
10003848:	2310      	movs	r3, #16
1000384a:	18fa      	adds	r2, r7, r3
1000384c:	2300      	movs	r3, #0
1000384e:	7811      	ldrb	r1, [r2, #0]
10003850:	20ff      	movs	r0, #255	; 0xff
10003852:	4001      	ands	r1, r0
10003854:	20ff      	movs	r0, #255	; 0xff
10003856:	4383      	bics	r3, r0
10003858:	430b      	orrs	r3, r1
1000385a:	7851      	ldrb	r1, [r2, #1]
1000385c:	20ff      	movs	r0, #255	; 0xff
1000385e:	4001      	ands	r1, r0
10003860:	0209      	lsls	r1, r1, #8
10003862:	4809      	ldr	r0, [pc, #36]	; (10003888 <PCS_GetPVConvStatus+0xdc>)
10003864:	4003      	ands	r3, r0
10003866:	430b      	orrs	r3, r1
10003868:	7891      	ldrb	r1, [r2, #2]
1000386a:	20ff      	movs	r0, #255	; 0xff
1000386c:	4001      	ands	r1, r0
1000386e:	0409      	lsls	r1, r1, #16
10003870:	4806      	ldr	r0, [pc, #24]	; (1000388c <PCS_GetPVConvStatus+0xe0>)
10003872:	4003      	ands	r3, r0
10003874:	430b      	orrs	r3, r1
10003876:	78d2      	ldrb	r2, [r2, #3]
10003878:	0612      	lsls	r2, r2, #24
1000387a:	021b      	lsls	r3, r3, #8
1000387c:	0a1b      	lsrs	r3, r3, #8
1000387e:	4313      	orrs	r3, r2
}
10003880:	1c18      	adds	r0, r3, #0
10003882:	46bd      	mov	sp, r7
10003884:	b006      	add	sp, #24
10003886:	bd80      	pop	{r7, pc}
10003888:	ffff00ff 	.word	0xffff00ff
1000388c:	ff00ffff 	.word	0xff00ffff

10003890 <PCS_GetBatConvStatus>:

BATCONV_STATUS_t 	PCS_GetBatConvStatus(XMC_CAN_MO_t *can_m0_obj)
{
10003890:	b580      	push	{r7, lr}
10003892:	b086      	sub	sp, #24
10003894:	af00      	add	r7, sp, #0
10003896:	6078      	str	r0, [r7, #4]
	BATCONV_STATUS_t param;
	uint8_t		   status;
	status = can_m0_obj->can_data_byte[0];
10003898:	2317      	movs	r3, #23
1000389a:	18fb      	adds	r3, r7, r3
1000389c:	687a      	ldr	r2, [r7, #4]
1000389e:	7c12      	ldrb	r2, [r2, #16]
100038a0:	701a      	strb	r2, [r3, #0]
	if (status<=3) 						{param.batconv_system_status = BATCONV_STAT_NOT_RUNNING;}
100038a2:	2317      	movs	r3, #23
100038a4:	18fb      	adds	r3, r7, r3
100038a6:	781b      	ldrb	r3, [r3, #0]
100038a8:	2b03      	cmp	r3, #3
100038aa:	d804      	bhi.n	100038b6 <PCS_GetBatConvStatus+0x26>
100038ac:	230c      	movs	r3, #12
100038ae:	18fb      	adds	r3, r7, r3
100038b0:	2200      	movs	r2, #0
100038b2:	701a      	strb	r2, [r3, #0]
100038b4:	e00d      	b.n	100038d2 <PCS_GetBatConvStatus+0x42>
	else if((status==4)||(status ==5))	{param.batconv_system_status = BATCONV_STAT_RUNNING;}
100038b6:	2317      	movs	r3, #23
100038b8:	18fb      	adds	r3, r7, r3
100038ba:	781b      	ldrb	r3, [r3, #0]
100038bc:	2b04      	cmp	r3, #4
100038be:	d004      	beq.n	100038ca <PCS_GetBatConvStatus+0x3a>
100038c0:	2317      	movs	r3, #23
100038c2:	18fb      	adds	r3, r7, r3
100038c4:	781b      	ldrb	r3, [r3, #0]
100038c6:	2b05      	cmp	r3, #5
100038c8:	d103      	bne.n	100038d2 <PCS_GetBatConvStatus+0x42>
100038ca:	230c      	movs	r3, #12
100038cc:	18fb      	adds	r3, r7, r3
100038ce:	2204      	movs	r2, #4
100038d0:	701a      	strb	r2, [r3, #0]

	param.batconv_system_warning = BATCONV_WARN_NORMAL;
100038d2:	230c      	movs	r3, #12
100038d4:	18fb      	adds	r3, r7, r3
100038d6:	2200      	movs	r2, #0
100038d8:	705a      	strb	r2, [r3, #1]
	param.batconv_system_pcsIsStandBy = false;
100038da:	230c      	movs	r3, #12
100038dc:	18fb      	adds	r3, r7, r3
100038de:	2200      	movs	r2, #0
100038e0:	70da      	strb	r2, [r3, #3]

	/* check the warning status */
	status = can_m0_obj->can_data_byte[2];
100038e2:	2317      	movs	r3, #23
100038e4:	18fb      	adds	r3, r7, r3
100038e6:	687a      	ldr	r2, [r7, #4]
100038e8:	7c92      	ldrb	r2, [r2, #18]
100038ea:	701a      	strb	r2, [r3, #0]
	if((status>>7)&0x01)
100038ec:	2317      	movs	r3, #23
100038ee:	18fb      	adds	r3, r7, r3
100038f0:	781b      	ldrb	r3, [r3, #0]
100038f2:	09db      	lsrs	r3, r3, #7
100038f4:	b2db      	uxtb	r3, r3
100038f6:	1c1a      	adds	r2, r3, #0
100038f8:	2301      	movs	r3, #1
100038fa:	4013      	ands	r3, r2
100038fc:	d007      	beq.n	1000390e <PCS_GetBatConvStatus+0x7e>
		{
			param.batconv_system_warning = BATCONV_WARN_OV;
100038fe:	230c      	movs	r3, #12
10003900:	18fb      	adds	r3, r7, r3
10003902:	2201      	movs	r2, #1
10003904:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
10003906:	230c      	movs	r3, #12
10003908:	18fb      	adds	r3, r7, r3
1000390a:	2201      	movs	r2, #1
1000390c:	70da      	strb	r2, [r3, #3]
		}
	if((status>>6)&0x01)
1000390e:	2317      	movs	r3, #23
10003910:	18fb      	adds	r3, r7, r3
10003912:	781b      	ldrb	r3, [r3, #0]
10003914:	099b      	lsrs	r3, r3, #6
10003916:	b2db      	uxtb	r3, r3
10003918:	1c1a      	adds	r2, r3, #0
1000391a:	2301      	movs	r3, #1
1000391c:	4013      	ands	r3, r2
1000391e:	d007      	beq.n	10003930 <PCS_GetBatConvStatus+0xa0>
		{
			param.batconv_system_warning = BATCONV_WARN_OC;
10003920:	230c      	movs	r3, #12
10003922:	18fb      	adds	r3, r7, r3
10003924:	2202      	movs	r2, #2
10003926:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
10003928:	230c      	movs	r3, #12
1000392a:	18fb      	adds	r3, r7, r3
1000392c:	2201      	movs	r2, #1
1000392e:	70da      	strb	r2, [r3, #3]
		}
	if((status>>5)&0x01)
10003930:	2317      	movs	r3, #23
10003932:	18fb      	adds	r3, r7, r3
10003934:	781b      	ldrb	r3, [r3, #0]
10003936:	095b      	lsrs	r3, r3, #5
10003938:	b2db      	uxtb	r3, r3
1000393a:	1c1a      	adds	r2, r3, #0
1000393c:	2301      	movs	r3, #1
1000393e:	4013      	ands	r3, r2
10003940:	d007      	beq.n	10003952 <PCS_GetBatConvStatus+0xc2>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OV;
10003942:	230c      	movs	r3, #12
10003944:	18fb      	adds	r3, r7, r3
10003946:	2203      	movs	r2, #3
10003948:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
1000394a:	230c      	movs	r3, #12
1000394c:	18fb      	adds	r3, r7, r3
1000394e:	2201      	movs	r2, #1
10003950:	70da      	strb	r2, [r3, #3]
		}
	if((status>>2)&0x01)
10003952:	2317      	movs	r3, #23
10003954:	18fb      	adds	r3, r7, r3
10003956:	781b      	ldrb	r3, [r3, #0]
10003958:	089b      	lsrs	r3, r3, #2
1000395a:	b2db      	uxtb	r3, r3
1000395c:	1c1a      	adds	r2, r3, #0
1000395e:	2301      	movs	r3, #1
10003960:	4013      	ands	r3, r2
10003962:	d007      	beq.n	10003974 <PCS_GetBatConvStatus+0xe4>
		{
			param.batconv_system_warning = BATCONV_WARN_DCDC_OT;
10003964:	230c      	movs	r3, #12
10003966:	18fb      	adds	r3, r7, r3
10003968:	2204      	movs	r2, #4
1000396a:	705a      	strb	r2, [r3, #1]
			param.batconv_system_pcsIsStandBy = true;
1000396c:	230c      	movs	r3, #12
1000396e:	18fb      	adds	r3, r7, r3
10003970:	2201      	movs	r2, #1
10003972:	70da      	strb	r2, [r3, #3]
		}

	return param;
10003974:	2310      	movs	r3, #16
10003976:	18fb      	adds	r3, r7, r3
10003978:	220c      	movs	r2, #12
1000397a:	18ba      	adds	r2, r7, r2
1000397c:	6812      	ldr	r2, [r2, #0]
1000397e:	601a      	str	r2, [r3, #0]
10003980:	2310      	movs	r3, #16
10003982:	18fa      	adds	r2, r7, r3
10003984:	2300      	movs	r3, #0
10003986:	7811      	ldrb	r1, [r2, #0]
10003988:	20ff      	movs	r0, #255	; 0xff
1000398a:	4001      	ands	r1, r0
1000398c:	20ff      	movs	r0, #255	; 0xff
1000398e:	4383      	bics	r3, r0
10003990:	430b      	orrs	r3, r1
10003992:	7851      	ldrb	r1, [r2, #1]
10003994:	20ff      	movs	r0, #255	; 0xff
10003996:	4001      	ands	r1, r0
10003998:	0209      	lsls	r1, r1, #8
1000399a:	4809      	ldr	r0, [pc, #36]	; (100039c0 <PCS_GetBatConvStatus+0x130>)
1000399c:	4003      	ands	r3, r0
1000399e:	430b      	orrs	r3, r1
100039a0:	7891      	ldrb	r1, [r2, #2]
100039a2:	20ff      	movs	r0, #255	; 0xff
100039a4:	4001      	ands	r1, r0
100039a6:	0409      	lsls	r1, r1, #16
100039a8:	4806      	ldr	r0, [pc, #24]	; (100039c4 <PCS_GetBatConvStatus+0x134>)
100039aa:	4003      	ands	r3, r0
100039ac:	430b      	orrs	r3, r1
100039ae:	78d2      	ldrb	r2, [r2, #3]
100039b0:	0612      	lsls	r2, r2, #24
100039b2:	021b      	lsls	r3, r3, #8
100039b4:	0a1b      	lsrs	r3, r3, #8
100039b6:	4313      	orrs	r3, r2
}
100039b8:	1c18      	adds	r0, r3, #0
100039ba:	46bd      	mov	sp, r7
100039bc:	b006      	add	sp, #24
100039be:	bd80      	pop	{r7, pc}
100039c0:	ffff00ff 	.word	0xffff00ff
100039c4:	ff00ffff 	.word	0xff00ffff

100039c8 <PCS_GetVoltParam>:

PCS_VOLTAGE_PARAM_t	PCS_GetVoltParam(XMC_CAN_MO_t *can_m0_obj)
{
100039c8:	b580      	push	{r7, lr}
100039ca:	b084      	sub	sp, #16
100039cc:	af00      	add	r7, sp, #0
100039ce:	6078      	str	r0, [r7, #4]
100039d0:	6039      	str	r1, [r7, #0]
	PCS_VOLTAGE_PARAM_t param;

	param.vdcGrid 	= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
100039d2:	683b      	ldr	r3, [r7, #0]
100039d4:	7c1b      	ldrb	r3, [r3, #16]
100039d6:	021b      	lsls	r3, r3, #8
100039d8:	b29a      	uxth	r2, r3
100039da:	683b      	ldr	r3, [r7, #0]
100039dc:	7c5b      	ldrb	r3, [r3, #17]
100039de:	b29b      	uxth	r3, r3
100039e0:	4313      	orrs	r3, r2
100039e2:	b29b      	uxth	r3, r3
100039e4:	b29a      	uxth	r2, r3
100039e6:	2308      	movs	r3, #8
100039e8:	18fb      	adds	r3, r7, r3
100039ea:	801a      	strh	r2, [r3, #0]
	param.vacOut  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
100039ec:	683b      	ldr	r3, [r7, #0]
100039ee:	7c9b      	ldrb	r3, [r3, #18]
100039f0:	021b      	lsls	r3, r3, #8
100039f2:	b29a      	uxth	r2, r3
100039f4:	683b      	ldr	r3, [r7, #0]
100039f6:	7cdb      	ldrb	r3, [r3, #19]
100039f8:	b29b      	uxth	r3, r3
100039fa:	4313      	orrs	r3, r2
100039fc:	b29b      	uxth	r3, r3
100039fe:	b29a      	uxth	r2, r3
10003a00:	2308      	movs	r3, #8
10003a02:	18fb      	adds	r3, r7, r3
10003a04:	805a      	strh	r2, [r3, #2]
	param.vPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
10003a06:	683b      	ldr	r3, [r7, #0]
10003a08:	7d1b      	ldrb	r3, [r3, #20]
10003a0a:	021b      	lsls	r3, r3, #8
10003a0c:	b29a      	uxth	r2, r3
10003a0e:	683b      	ldr	r3, [r7, #0]
10003a10:	7d5b      	ldrb	r3, [r3, #21]
10003a12:	b29b      	uxth	r3, r3
10003a14:	4313      	orrs	r3, r2
10003a16:	b29b      	uxth	r3, r3
10003a18:	b29a      	uxth	r2, r3
10003a1a:	2308      	movs	r3, #8
10003a1c:	18fb      	adds	r3, r7, r3
10003a1e:	809a      	strh	r2, [r3, #4]
	param.vbat  	= ((uint16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003a20:	683b      	ldr	r3, [r7, #0]
10003a22:	7d9b      	ldrb	r3, [r3, #22]
10003a24:	021b      	lsls	r3, r3, #8
10003a26:	b29a      	uxth	r2, r3
10003a28:	683b      	ldr	r3, [r7, #0]
10003a2a:	7ddb      	ldrb	r3, [r3, #23]
10003a2c:	b29b      	uxth	r3, r3
10003a2e:	4313      	orrs	r3, r2
10003a30:	b29b      	uxth	r3, r3
10003a32:	b29a      	uxth	r2, r3
10003a34:	2308      	movs	r3, #8
10003a36:	18fb      	adds	r3, r7, r3
10003a38:	80da      	strh	r2, [r3, #6]

	return param;
10003a3a:	687a      	ldr	r2, [r7, #4]
10003a3c:	2308      	movs	r3, #8
10003a3e:	18fb      	adds	r3, r7, r3
10003a40:	1c11      	adds	r1, r2, #0
10003a42:	1c1a      	adds	r2, r3, #0
10003a44:	2308      	movs	r3, #8
10003a46:	1c08      	adds	r0, r1, #0
10003a48:	1c11      	adds	r1, r2, #0
10003a4a:	1c1a      	adds	r2, r3, #0
10003a4c:	f005 f868 	bl	10008b20 <memcpy>
}
10003a50:	6878      	ldr	r0, [r7, #4]
10003a52:	46bd      	mov	sp, r7
10003a54:	b004      	add	sp, #16
10003a56:	bd80      	pop	{r7, pc}

10003a58 <PCS_GetAmpParam>:

PCS_CURRENT_PARAM_t	PCS_GetAmpParam(XMC_CAN_MO_t *can_m0_obj)
{
10003a58:	b580      	push	{r7, lr}
10003a5a:	b084      	sub	sp, #16
10003a5c:	af00      	add	r7, sp, #0
10003a5e:	6078      	str	r0, [r7, #4]
10003a60:	6039      	str	r1, [r7, #0]
	PCS_CURRENT_PARAM_t param;

	param.idcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003a62:	683b      	ldr	r3, [r7, #0]
10003a64:	7c1b      	ldrb	r3, [r3, #16]
10003a66:	021b      	lsls	r3, r3, #8
10003a68:	b29a      	uxth	r2, r3
10003a6a:	683b      	ldr	r3, [r7, #0]
10003a6c:	7c5b      	ldrb	r3, [r3, #17]
10003a6e:	b29b      	uxth	r3, r3
10003a70:	4313      	orrs	r3, r2
10003a72:	b29a      	uxth	r2, r3
10003a74:	2308      	movs	r3, #8
10003a76:	18fb      	adds	r3, r7, r3
10003a78:	801a      	strh	r2, [r3, #0]
	param.iacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003a7a:	683b      	ldr	r3, [r7, #0]
10003a7c:	7c9b      	ldrb	r3, [r3, #18]
10003a7e:	021b      	lsls	r3, r3, #8
10003a80:	b29a      	uxth	r2, r3
10003a82:	683b      	ldr	r3, [r7, #0]
10003a84:	7cdb      	ldrb	r3, [r3, #19]
10003a86:	b29b      	uxth	r3, r3
10003a88:	4313      	orrs	r3, r2
10003a8a:	b29a      	uxth	r2, r3
10003a8c:	2308      	movs	r3, #8
10003a8e:	18fb      	adds	r3, r7, r3
10003a90:	805a      	strh	r2, [r3, #2]
	param.iPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
10003a92:	683b      	ldr	r3, [r7, #0]
10003a94:	7d1b      	ldrb	r3, [r3, #20]
10003a96:	021b      	lsls	r3, r3, #8
10003a98:	b29a      	uxth	r2, r3
10003a9a:	683b      	ldr	r3, [r7, #0]
10003a9c:	7d5b      	ldrb	r3, [r3, #21]
10003a9e:	b29b      	uxth	r3, r3
10003aa0:	4313      	orrs	r3, r2
10003aa2:	b29a      	uxth	r2, r3
10003aa4:	2308      	movs	r3, #8
10003aa6:	18fb      	adds	r3, r7, r3
10003aa8:	809a      	strh	r2, [r3, #4]
	param.ibat  	= ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003aaa:	683b      	ldr	r3, [r7, #0]
10003aac:	7d9b      	ldrb	r3, [r3, #22]
10003aae:	021b      	lsls	r3, r3, #8
10003ab0:	b29a      	uxth	r2, r3
10003ab2:	683b      	ldr	r3, [r7, #0]
10003ab4:	7ddb      	ldrb	r3, [r3, #23]
10003ab6:	b29b      	uxth	r3, r3
10003ab8:	4313      	orrs	r3, r2
10003aba:	b29a      	uxth	r2, r3
10003abc:	2308      	movs	r3, #8
10003abe:	18fb      	adds	r3, r7, r3
10003ac0:	80da      	strh	r2, [r3, #6]

	return param;
10003ac2:	687a      	ldr	r2, [r7, #4]
10003ac4:	2308      	movs	r3, #8
10003ac6:	18fb      	adds	r3, r7, r3
10003ac8:	1c11      	adds	r1, r2, #0
10003aca:	1c1a      	adds	r2, r3, #0
10003acc:	2308      	movs	r3, #8
10003ace:	1c08      	adds	r0, r1, #0
10003ad0:	1c11      	adds	r1, r2, #0
10003ad2:	1c1a      	adds	r2, r3, #0
10003ad4:	f005 f824 	bl	10008b20 <memcpy>
}
10003ad8:	6878      	ldr	r0, [r7, #4]
10003ada:	46bd      	mov	sp, r7
10003adc:	b004      	add	sp, #16
10003ade:	bd80      	pop	{r7, pc}

10003ae0 <PCS_GetPowerParam>:

PCS_POWER_PARAM_t 	PCS_GetPowerParam(XMC_CAN_MO_t *can_m0_obj)
{
10003ae0:	b580      	push	{r7, lr}
10003ae2:	b084      	sub	sp, #16
10003ae4:	af00      	add	r7, sp, #0
10003ae6:	6078      	str	r0, [r7, #4]
10003ae8:	6039      	str	r1, [r7, #0]
	PCS_POWER_PARAM_t param;

	param.pdcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003aea:	683b      	ldr	r3, [r7, #0]
10003aec:	7c1b      	ldrb	r3, [r3, #16]
10003aee:	021b      	lsls	r3, r3, #8
10003af0:	b29a      	uxth	r2, r3
10003af2:	683b      	ldr	r3, [r7, #0]
10003af4:	7c5b      	ldrb	r3, [r3, #17]
10003af6:	b29b      	uxth	r3, r3
10003af8:	4313      	orrs	r3, r2
10003afa:	b29b      	uxth	r3, r3
10003afc:	b29a      	uxth	r2, r3
10003afe:	2308      	movs	r3, #8
10003b00:	18fb      	adds	r3, r7, r3
10003b02:	801a      	strh	r2, [r3, #0]
	param.pacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003b04:	683b      	ldr	r3, [r7, #0]
10003b06:	7c9b      	ldrb	r3, [r3, #18]
10003b08:	021b      	lsls	r3, r3, #8
10003b0a:	b29a      	uxth	r2, r3
10003b0c:	683b      	ldr	r3, [r7, #0]
10003b0e:	7cdb      	ldrb	r3, [r3, #19]
10003b10:	b29b      	uxth	r3, r3
10003b12:	4313      	orrs	r3, r2
10003b14:	b29b      	uxth	r3, r3
10003b16:	b29a      	uxth	r2, r3
10003b18:	2308      	movs	r3, #8
10003b1a:	18fb      	adds	r3, r7, r3
10003b1c:	805a      	strh	r2, [r3, #2]
	param.pPV 	   = ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
10003b1e:	683b      	ldr	r3, [r7, #0]
10003b20:	7d1b      	ldrb	r3, [r3, #20]
10003b22:	021b      	lsls	r3, r3, #8
10003b24:	b29a      	uxth	r2, r3
10003b26:	683b      	ldr	r3, [r7, #0]
10003b28:	7d5b      	ldrb	r3, [r3, #21]
10003b2a:	b29b      	uxth	r3, r3
10003b2c:	4313      	orrs	r3, r2
10003b2e:	b29b      	uxth	r3, r3
10003b30:	b29a      	uxth	r2, r3
10003b32:	2308      	movs	r3, #8
10003b34:	18fb      	adds	r3, r7, r3
10003b36:	809a      	strh	r2, [r3, #4]
	param.pbat     = ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
10003b38:	683b      	ldr	r3, [r7, #0]
10003b3a:	7d9b      	ldrb	r3, [r3, #22]
10003b3c:	021b      	lsls	r3, r3, #8
10003b3e:	b29a      	uxth	r2, r3
10003b40:	683b      	ldr	r3, [r7, #0]
10003b42:	7ddb      	ldrb	r3, [r3, #23]
10003b44:	b29b      	uxth	r3, r3
10003b46:	4313      	orrs	r3, r2
10003b48:	b29b      	uxth	r3, r3
10003b4a:	b29a      	uxth	r2, r3
10003b4c:	2308      	movs	r3, #8
10003b4e:	18fb      	adds	r3, r7, r3
10003b50:	80da      	strh	r2, [r3, #6]

	return param;
10003b52:	687a      	ldr	r2, [r7, #4]
10003b54:	2308      	movs	r3, #8
10003b56:	18fb      	adds	r3, r7, r3
10003b58:	1c11      	adds	r1, r2, #0
10003b5a:	1c1a      	adds	r2, r3, #0
10003b5c:	2308      	movs	r3, #8
10003b5e:	1c08      	adds	r0, r1, #0
10003b60:	1c11      	adds	r1, r2, #0
10003b62:	1c1a      	adds	r2, r3, #0
10003b64:	f004 ffdc 	bl	10008b20 <memcpy>
}
10003b68:	6878      	ldr	r0, [r7, #4]
10003b6a:	46bd      	mov	sp, r7
10003b6c:	b004      	add	sp, #16
10003b6e:	bd80      	pop	{r7, pc}

10003b70 <PCS_GetMiscParam>:

PCS_MISC_PARAM_t 	PCS_GetMiscParam(XMC_CAN_MO_t *can_m0_obj)
{
10003b70:	b580      	push	{r7, lr}
10003b72:	b084      	sub	sp, #16
10003b74:	af00      	add	r7, sp, #0
10003b76:	6078      	str	r0, [r7, #4]
	PCS_MISC_PARAM_t param;

	param.tempPCS 		= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
10003b78:	687b      	ldr	r3, [r7, #4]
10003b7a:	7c1b      	ldrb	r3, [r3, #16]
10003b7c:	021b      	lsls	r3, r3, #8
10003b7e:	b29a      	uxth	r2, r3
10003b80:	687b      	ldr	r3, [r7, #4]
10003b82:	7c5b      	ldrb	r3, [r3, #17]
10003b84:	b29b      	uxth	r3, r3
10003b86:	4313      	orrs	r3, r2
10003b88:	b29b      	uxth	r3, r3
10003b8a:	b29a      	uxth	r2, r3
10003b8c:	2308      	movs	r3, #8
10003b8e:	18fb      	adds	r3, r7, r3
10003b90:	801a      	strh	r2, [r3, #0]
	param.frequency  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
10003b92:	687b      	ldr	r3, [r7, #4]
10003b94:	7c9b      	ldrb	r3, [r3, #18]
10003b96:	021b      	lsls	r3, r3, #8
10003b98:	b29a      	uxth	r2, r3
10003b9a:	687b      	ldr	r3, [r7, #4]
10003b9c:	7cdb      	ldrb	r3, [r3, #19]
10003b9e:	b29b      	uxth	r3, r3
10003ba0:	4313      	orrs	r3, r2
10003ba2:	b29b      	uxth	r3, r3
10003ba4:	b29a      	uxth	r2, r3
10003ba6:	2308      	movs	r3, #8
10003ba8:	18fb      	adds	r3, r7, r3
10003baa:	805a      	strh	r2, [r3, #2]

	return param;
10003bac:	230c      	movs	r3, #12
10003bae:	18fb      	adds	r3, r7, r3
10003bb0:	2208      	movs	r2, #8
10003bb2:	18ba      	adds	r2, r7, r2
10003bb4:	6812      	ldr	r2, [r2, #0]
10003bb6:	601a      	str	r2, [r3, #0]
10003bb8:	230c      	movs	r3, #12
10003bba:	18fa      	adds	r2, r7, r3
10003bbc:	2300      	movs	r3, #0
10003bbe:	8811      	ldrh	r1, [r2, #0]
10003bc0:	0409      	lsls	r1, r1, #16
10003bc2:	0c09      	lsrs	r1, r1, #16
10003bc4:	0c1b      	lsrs	r3, r3, #16
10003bc6:	041b      	lsls	r3, r3, #16
10003bc8:	430b      	orrs	r3, r1
10003bca:	8852      	ldrh	r2, [r2, #2]
10003bcc:	0412      	lsls	r2, r2, #16
10003bce:	041b      	lsls	r3, r3, #16
10003bd0:	0c1b      	lsrs	r3, r3, #16
10003bd2:	4313      	orrs	r3, r2
}
10003bd4:	1c18      	adds	r0, r3, #0
10003bd6:	46bd      	mov	sp, r7
10003bd8:	b004      	add	sp, #16
10003bda:	bd80      	pop	{r7, pc}

10003bdc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10003bdc:	b580      	push	{r7, lr}
10003bde:	b082      	sub	sp, #8
10003be0:	af00      	add	r7, sp, #0
10003be2:	6078      	str	r0, [r7, #4]
10003be4:	1c0a      	adds	r2, r1, #0
10003be6:	1cfb      	adds	r3, r7, #3
10003be8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10003bea:	1cfb      	adds	r3, r7, #3
10003bec:	781b      	ldrb	r3, [r3, #0]
10003bee:	2201      	movs	r2, #1
10003bf0:	409a      	lsls	r2, r3
10003bf2:	687b      	ldr	r3, [r7, #4]
10003bf4:	605a      	str	r2, [r3, #4]
}
10003bf6:	46bd      	mov	sp, r7
10003bf8:	b002      	add	sp, #8
10003bfa:	bd80      	pop	{r7, pc}

10003bfc <GPIO_Init>:
 */

#include "gpio_op.h"

void GPIO_Init(void)
{
10003bfc:	b580      	push	{r7, lr}
10003bfe:	af00      	add	r7, sp, #0
	/* Initialize LEDs */
	XMC_GPIO_Init(P2_11, &led);
10003c00:	4a24      	ldr	r2, [pc, #144]	; (10003c94 <GPIO_Init+0x98>)
10003c02:	4b25      	ldr	r3, [pc, #148]	; (10003c98 <GPIO_Init+0x9c>)
10003c04:	1c10      	adds	r0, r2, #0
10003c06:	210b      	movs	r1, #11
10003c08:	1c1a      	adds	r2, r3, #0
10003c0a:	f001 f873 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_12, &led);
10003c0e:	4a21      	ldr	r2, [pc, #132]	; (10003c94 <GPIO_Init+0x98>)
10003c10:	4b21      	ldr	r3, [pc, #132]	; (10003c98 <GPIO_Init+0x9c>)
10003c12:	1c10      	adds	r0, r2, #0
10003c14:	210c      	movs	r1, #12
10003c16:	1c1a      	adds	r2, r3, #0
10003c18:	f001 f86c 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P2_13, &led);
10003c1c:	4a1d      	ldr	r2, [pc, #116]	; (10003c94 <GPIO_Init+0x98>)
10003c1e:	4b1e      	ldr	r3, [pc, #120]	; (10003c98 <GPIO_Init+0x9c>)
10003c20:	1c10      	adds	r0, r2, #0
10003c22:	210d      	movs	r1, #13
10003c24:	1c1a      	adds	r2, r3, #0
10003c26:	f001 f865 	bl	10004cf4 <XMC_GPIO_Init>

	/* Initialize DIP Switches */
	XMC_GPIO_Init(P4_2,&dipswitch_config);
10003c2a:	4a1c      	ldr	r2, [pc, #112]	; (10003c9c <GPIO_Init+0xa0>)
10003c2c:	4b1c      	ldr	r3, [pc, #112]	; (10003ca0 <GPIO_Init+0xa4>)
10003c2e:	1c10      	adds	r0, r2, #0
10003c30:	2102      	movs	r1, #2
10003c32:	1c1a      	adds	r2, r3, #0
10003c34:	f001 f85e 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_3,&dipswitch_config);
10003c38:	4a18      	ldr	r2, [pc, #96]	; (10003c9c <GPIO_Init+0xa0>)
10003c3a:	4b19      	ldr	r3, [pc, #100]	; (10003ca0 <GPIO_Init+0xa4>)
10003c3c:	1c10      	adds	r0, r2, #0
10003c3e:	2103      	movs	r1, #3
10003c40:	1c1a      	adds	r2, r3, #0
10003c42:	f001 f857 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_4,&dipswitch_config);
10003c46:	4a15      	ldr	r2, [pc, #84]	; (10003c9c <GPIO_Init+0xa0>)
10003c48:	4b15      	ldr	r3, [pc, #84]	; (10003ca0 <GPIO_Init+0xa4>)
10003c4a:	1c10      	adds	r0, r2, #0
10003c4c:	2104      	movs	r1, #4
10003c4e:	1c1a      	adds	r2, r3, #0
10003c50:	f001 f850 	bl	10004cf4 <XMC_GPIO_Init>
	XMC_GPIO_Init(P4_5,&dipswitch_config);
10003c54:	4a11      	ldr	r2, [pc, #68]	; (10003c9c <GPIO_Init+0xa0>)
10003c56:	4b12      	ldr	r3, [pc, #72]	; (10003ca0 <GPIO_Init+0xa4>)
10003c58:	1c10      	adds	r0, r2, #0
10003c5a:	2105      	movs	r1, #5
10003c5c:	1c1a      	adds	r2, r3, #0
10003c5e:	f001 f849 	bl	10004cf4 <XMC_GPIO_Init>

	/* Initialize Start Button */
	XMC_GPIO_Init(P2_2, &button);
10003c62:	4a0c      	ldr	r2, [pc, #48]	; (10003c94 <GPIO_Init+0x98>)
10003c64:	4b0f      	ldr	r3, [pc, #60]	; (10003ca4 <GPIO_Init+0xa8>)
10003c66:	1c10      	adds	r0, r2, #0
10003c68:	2102      	movs	r1, #2
10003c6a:	1c1a      	adds	r2, r3, #0
10003c6c:	f001 f842 	bl	10004cf4 <XMC_GPIO_Init>

	/* Set all LED off */
	XMC_GPIO_SetOutputHigh(P2_11);
10003c70:	4b08      	ldr	r3, [pc, #32]	; (10003c94 <GPIO_Init+0x98>)
10003c72:	1c18      	adds	r0, r3, #0
10003c74:	210b      	movs	r1, #11
10003c76:	f7ff ffb1 	bl	10003bdc <XMC_GPIO_SetOutputHigh>
	XMC_GPIO_SetOutputHigh(P2_12);
10003c7a:	4b06      	ldr	r3, [pc, #24]	; (10003c94 <GPIO_Init+0x98>)
10003c7c:	1c18      	adds	r0, r3, #0
10003c7e:	210c      	movs	r1, #12
10003c80:	f7ff ffac 	bl	10003bdc <XMC_GPIO_SetOutputHigh>
	XMC_GPIO_SetOutputHigh(P2_13);
10003c84:	4b03      	ldr	r3, [pc, #12]	; (10003c94 <GPIO_Init+0x98>)
10003c86:	1c18      	adds	r0, r3, #0
10003c88:	210d      	movs	r1, #13
10003c8a:	f7ff ffa7 	bl	10003bdc <XMC_GPIO_SetOutputHigh>


}
10003c8e:	46bd      	mov	sp, r7
10003c90:	bd80      	pop	{r7, pc}
10003c92:	46c0      	nop			; (mov r8, r8)
10003c94:	40040200 	.word	0x40040200
10003c98:	20000678 	.word	0x20000678
10003c9c:	40040400 	.word	0x40040400
10003ca0:	200007bc 	.word	0x200007bc
10003ca4:	200007b4 	.word	0x200007b4

10003ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10003ca8:	b580      	push	{r7, lr}
10003caa:	b082      	sub	sp, #8
10003cac:	af00      	add	r7, sp, #0
10003cae:	1c02      	adds	r2, r0, #0
10003cb0:	1dfb      	adds	r3, r7, #7
10003cb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003cb4:	1dfb      	adds	r3, r7, #7
10003cb6:	781b      	ldrb	r3, [r3, #0]
10003cb8:	2b7f      	cmp	r3, #127	; 0x7f
10003cba:	d809      	bhi.n	10003cd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10003cbc:	4b06      	ldr	r3, [pc, #24]	; (10003cd8 <__NVIC_EnableIRQ+0x30>)
10003cbe:	1dfa      	adds	r2, r7, #7
10003cc0:	7812      	ldrb	r2, [r2, #0]
10003cc2:	1c11      	adds	r1, r2, #0
10003cc4:	221f      	movs	r2, #31
10003cc6:	400a      	ands	r2, r1
10003cc8:	2101      	movs	r1, #1
10003cca:	4091      	lsls	r1, r2
10003ccc:	1c0a      	adds	r2, r1, #0
10003cce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
10003cd0:	46bd      	mov	sp, r7
10003cd2:	b002      	add	sp, #8
10003cd4:	bd80      	pop	{r7, pc}
10003cd6:	46c0      	nop			; (mov r8, r8)
10003cd8:	e000e100 	.word	0xe000e100

10003cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10003cdc:	b5b0      	push	{r4, r5, r7, lr}
10003cde:	b082      	sub	sp, #8
10003ce0:	af00      	add	r7, sp, #0
10003ce2:	1c02      	adds	r2, r0, #0
10003ce4:	6039      	str	r1, [r7, #0]
10003ce6:	1dfb      	adds	r3, r7, #7
10003ce8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10003cea:	1dfb      	adds	r3, r7, #7
10003cec:	781b      	ldrb	r3, [r3, #0]
10003cee:	2b7f      	cmp	r3, #127	; 0x7f
10003cf0:	d827      	bhi.n	10003d42 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003cf2:	4c2d      	ldr	r4, [pc, #180]	; (10003da8 <__NVIC_SetPriority+0xcc>)
10003cf4:	1dfb      	adds	r3, r7, #7
10003cf6:	781b      	ldrb	r3, [r3, #0]
10003cf8:	b25b      	sxtb	r3, r3
10003cfa:	089b      	lsrs	r3, r3, #2
10003cfc:	492a      	ldr	r1, [pc, #168]	; (10003da8 <__NVIC_SetPriority+0xcc>)
10003cfe:	1dfa      	adds	r2, r7, #7
10003d00:	7812      	ldrb	r2, [r2, #0]
10003d02:	b252      	sxtb	r2, r2
10003d04:	0892      	lsrs	r2, r2, #2
10003d06:	32c0      	adds	r2, #192	; 0xc0
10003d08:	0092      	lsls	r2, r2, #2
10003d0a:	5852      	ldr	r2, [r2, r1]
10003d0c:	1df9      	adds	r1, r7, #7
10003d0e:	7809      	ldrb	r1, [r1, #0]
10003d10:	1c08      	adds	r0, r1, #0
10003d12:	2103      	movs	r1, #3
10003d14:	4001      	ands	r1, r0
10003d16:	00c9      	lsls	r1, r1, #3
10003d18:	1c08      	adds	r0, r1, #0
10003d1a:	21ff      	movs	r1, #255	; 0xff
10003d1c:	4081      	lsls	r1, r0
10003d1e:	43c9      	mvns	r1, r1
10003d20:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003d22:	683a      	ldr	r2, [r7, #0]
10003d24:	0192      	lsls	r2, r2, #6
10003d26:	20ff      	movs	r0, #255	; 0xff
10003d28:	4002      	ands	r2, r0
10003d2a:	1df8      	adds	r0, r7, #7
10003d2c:	7800      	ldrb	r0, [r0, #0]
10003d2e:	1c05      	adds	r5, r0, #0
10003d30:	2003      	movs	r0, #3
10003d32:	4028      	ands	r0, r5
10003d34:	00c0      	lsls	r0, r0, #3
10003d36:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003d38:	430a      	orrs	r2, r1
10003d3a:	33c0      	adds	r3, #192	; 0xc0
10003d3c:	009b      	lsls	r3, r3, #2
10003d3e:	511a      	str	r2, [r3, r4]
10003d40:	e02e      	b.n	10003da0 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003d42:	4c1a      	ldr	r4, [pc, #104]	; (10003dac <__NVIC_SetPriority+0xd0>)
10003d44:	1dfb      	adds	r3, r7, #7
10003d46:	781b      	ldrb	r3, [r3, #0]
10003d48:	1c1a      	adds	r2, r3, #0
10003d4a:	230f      	movs	r3, #15
10003d4c:	4013      	ands	r3, r2
10003d4e:	3b08      	subs	r3, #8
10003d50:	0899      	lsrs	r1, r3, #2
10003d52:	4a16      	ldr	r2, [pc, #88]	; (10003dac <__NVIC_SetPriority+0xd0>)
10003d54:	1dfb      	adds	r3, r7, #7
10003d56:	781b      	ldrb	r3, [r3, #0]
10003d58:	1c18      	adds	r0, r3, #0
10003d5a:	230f      	movs	r3, #15
10003d5c:	4003      	ands	r3, r0
10003d5e:	3b08      	subs	r3, #8
10003d60:	089b      	lsrs	r3, r3, #2
10003d62:	3306      	adds	r3, #6
10003d64:	009b      	lsls	r3, r3, #2
10003d66:	18d3      	adds	r3, r2, r3
10003d68:	685b      	ldr	r3, [r3, #4]
10003d6a:	1dfa      	adds	r2, r7, #7
10003d6c:	7812      	ldrb	r2, [r2, #0]
10003d6e:	1c10      	adds	r0, r2, #0
10003d70:	2203      	movs	r2, #3
10003d72:	4002      	ands	r2, r0
10003d74:	00d2      	lsls	r2, r2, #3
10003d76:	1c10      	adds	r0, r2, #0
10003d78:	22ff      	movs	r2, #255	; 0xff
10003d7a:	4082      	lsls	r2, r0
10003d7c:	43d2      	mvns	r2, r2
10003d7e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10003d80:	683b      	ldr	r3, [r7, #0]
10003d82:	019b      	lsls	r3, r3, #6
10003d84:	20ff      	movs	r0, #255	; 0xff
10003d86:	4003      	ands	r3, r0
10003d88:	1df8      	adds	r0, r7, #7
10003d8a:	7800      	ldrb	r0, [r0, #0]
10003d8c:	1c05      	adds	r5, r0, #0
10003d8e:	2003      	movs	r0, #3
10003d90:	4028      	ands	r0, r5
10003d92:	00c0      	lsls	r0, r0, #3
10003d94:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10003d96:	431a      	orrs	r2, r3
10003d98:	1d8b      	adds	r3, r1, #6
10003d9a:	009b      	lsls	r3, r3, #2
10003d9c:	18e3      	adds	r3, r4, r3
10003d9e:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10003da0:	46bd      	mov	sp, r7
10003da2:	b002      	add	sp, #8
10003da4:	bdb0      	pop	{r4, r5, r7, pc}
10003da6:	46c0      	nop			; (mov r8, r8)
10003da8:	e000e100 	.word	0xe000e100
10003dac:	e000ed00 	.word	0xe000ed00

10003db0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
10003db0:	b580      	push	{r7, lr}
10003db2:	b082      	sub	sp, #8
10003db4:	af00      	add	r7, sp, #0
10003db6:	6078      	str	r0, [r7, #4]
10003db8:	1c08      	adds	r0, r1, #0
10003dba:	1c11      	adds	r1, r2, #0
10003dbc:	1cfb      	adds	r3, r7, #3
10003dbe:	1c02      	adds	r2, r0, #0
10003dc0:	701a      	strb	r2, [r3, #0]
10003dc2:	1cbb      	adds	r3, r7, #2
10003dc4:	1c0a      	adds	r2, r1, #0
10003dc6:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003dc8:	1cfb      	adds	r3, r7, #3
10003dca:	7818      	ldrb	r0, [r3, #0]
10003dcc:	1cfb      	adds	r3, r7, #3
10003dce:	781b      	ldrb	r3, [r3, #0]
10003dd0:	687a      	ldr	r2, [r7, #4]
10003dd2:	3306      	adds	r3, #6
10003dd4:	009b      	lsls	r3, r3, #2
10003dd6:	18d3      	adds	r3, r2, r3
10003dd8:	685b      	ldr	r3, [r3, #4]
10003dda:	2207      	movs	r2, #7
10003ddc:	4393      	bics	r3, r2
10003dde:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
10003de0:	1cbb      	adds	r3, r7, #2
10003de2:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
10003de4:	431a      	orrs	r2, r3
10003de6:	6879      	ldr	r1, [r7, #4]
10003de8:	1d83      	adds	r3, r0, #6
10003dea:	009b      	lsls	r3, r3, #2
10003dec:	18cb      	adds	r3, r1, r3
10003dee:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
10003df0:	46bd      	mov	sp, r7
10003df2:	b002      	add	sp, #8
10003df4:	bd80      	pop	{r7, pc}
10003df6:	46c0      	nop			; (mov r8, r8)

10003df8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
10003df8:	b580      	push	{r7, lr}
10003dfa:	b082      	sub	sp, #8
10003dfc:	af00      	add	r7, sp, #0
10003dfe:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10003e00:	687b      	ldr	r3, [r7, #4]
10003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003e04:	b2db      	uxtb	r3, r3
10003e06:	227f      	movs	r2, #127	; 0x7f
10003e08:	4393      	bics	r3, r2
10003e0a:	b2db      	uxtb	r3, r3
}
10003e0c:	1c18      	adds	r0, r3, #0
10003e0e:	46bd      	mov	sp, r7
10003e10:	b002      	add	sp, #8
10003e12:	bd80      	pop	{r7, pc}

10003e14 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10003e14:	b580      	push	{r7, lr}
10003e16:	b082      	sub	sp, #8
10003e18:	af00      	add	r7, sp, #0
10003e1a:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10003e1c:	687b      	ldr	r3, [r7, #4]
10003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10003e20:	220f      	movs	r2, #15
10003e22:	4393      	bics	r3, r2
10003e24:	2202      	movs	r2, #2
10003e26:	431a      	orrs	r2, r3
10003e28:	687b      	ldr	r3, [r7, #4]
10003e2a:	641a      	str	r2, [r3, #64]	; 0x40
}
10003e2c:	46bd      	mov	sp, r7
10003e2e:	b002      	add	sp, #8
10003e30:	bd80      	pop	{r7, pc}
10003e32:	46c0      	nop			; (mov r8, r8)

10003e34 <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
10003e34:	b580      	push	{r7, lr}
10003e36:	b084      	sub	sp, #16
10003e38:	af00      	add	r7, sp, #0
10003e3a:	60f8      	str	r0, [r7, #12]
10003e3c:	607a      	str	r2, [r7, #4]
10003e3e:	230b      	movs	r3, #11
10003e40:	18fb      	adds	r3, r7, r3
10003e42:	1c0a      	adds	r2, r1, #0
10003e44:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
10003e46:	68f9      	ldr	r1, [r7, #12]
10003e48:	230b      	movs	r3, #11
10003e4a:	18fb      	adds	r3, r7, r3
10003e4c:	781a      	ldrb	r2, [r3, #0]
10003e4e:	687b      	ldr	r3, [r7, #4]
10003e50:	1c08      	adds	r0, r1, #0
10003e52:	1c11      	adds	r1, r2, #0
10003e54:	1c1a      	adds	r2, r3, #0
10003e56:	f002 f801 	bl	10005e5c <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
10003e5a:	46bd      	mov	sp, r7
10003e5c:	b004      	add	sp, #16
10003e5e:	bd80      	pop	{r7, pc}

10003e60 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10003e60:	b580      	push	{r7, lr}
10003e62:	b082      	sub	sp, #8
10003e64:	af00      	add	r7, sp, #0
10003e66:	6078      	str	r0, [r7, #4]
10003e68:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	683a      	ldr	r2, [r7, #0]
10003e6e:	64da      	str	r2, [r3, #76]	; 0x4c
}
10003e70:	46bd      	mov	sp, r7
10003e72:	b002      	add	sp, #8
10003e74:	bd80      	pop	{r7, pc}
10003e76:	46c0      	nop			; (mov r8, r8)

10003e78 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
10003e78:	b580      	push	{r7, lr}
10003e7a:	b082      	sub	sp, #8
10003e7c:	af00      	add	r7, sp, #0
10003e7e:	6078      	str	r0, [r7, #4]
10003e80:	1c08      	adds	r0, r1, #0
10003e82:	1c11      	adds	r1, r2, #0
10003e84:	1cfb      	adds	r3, r7, #3
10003e86:	1c02      	adds	r2, r0, #0
10003e88:	701a      	strb	r2, [r3, #0]
10003e8a:	1cbb      	adds	r3, r7, #2
10003e8c:	1c0a      	adds	r2, r1, #0
10003e8e:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
10003e90:	1cfb      	adds	r3, r7, #3
10003e92:	7818      	ldrb	r0, [r3, #0]
10003e94:	1cfb      	adds	r3, r7, #3
10003e96:	781b      	ldrb	r3, [r3, #0]
10003e98:	687a      	ldr	r2, [r7, #4]
10003e9a:	3306      	adds	r3, #6
10003e9c:	009b      	lsls	r3, r3, #2
10003e9e:	18d3      	adds	r3, r2, r3
10003ea0:	685b      	ldr	r3, [r3, #4]
10003ea2:	2250      	movs	r2, #80	; 0x50
10003ea4:	4393      	bics	r3, r2
10003ea6:	1c1a      	adds	r2, r3, #0
10003ea8:	6879      	ldr	r1, [r7, #4]
10003eaa:	1d83      	adds	r3, r0, #6
10003eac:	009b      	lsls	r3, r3, #2
10003eae:	18cb      	adds	r3, r1, r3
10003eb0:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
10003eb2:	6879      	ldr	r1, [r7, #4]
10003eb4:	1cfb      	adds	r3, r7, #3
10003eb6:	781a      	ldrb	r2, [r3, #0]
10003eb8:	1cbb      	adds	r3, r7, #2
10003eba:	781b      	ldrb	r3, [r3, #0]
10003ebc:	1c08      	adds	r0, r1, #0
10003ebe:	1c11      	adds	r1, r2, #0
10003ec0:	1c1a      	adds	r2, r3, #0
10003ec2:	f7ff ff75 	bl	10003db0 <XMC_USIC_CH_SetInputSource>
}
10003ec6:	46bd      	mov	sp, r7
10003ec8:	b002      	add	sp, #8
10003eca:	bd80      	pop	{r7, pc}

10003ecc <GENIX_ConnectionInit>:
 */

#include "genix_op.h"

void GENIX_ConnectionInit(void)
{
10003ecc:	b580      	push	{r7, lr}
10003ece:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P0_2, &tx_genix_config);
10003ed0:	4a1e      	ldr	r2, [pc, #120]	; (10003f4c <GENIX_ConnectionInit+0x80>)
10003ed2:	4b1f      	ldr	r3, [pc, #124]	; (10003f50 <GENIX_ConnectionInit+0x84>)
10003ed4:	1c10      	adds	r0, r2, #0
10003ed6:	2102      	movs	r1, #2
10003ed8:	1c1a      	adds	r2, r3, #0
10003eda:	f000 ff0b 	bl	10004cf4 <XMC_GPIO_Init>
    XMC_GPIO_Init(P0_3, &rx_genix_config);
10003ede:	4a1b      	ldr	r2, [pc, #108]	; (10003f4c <GENIX_ConnectionInit+0x80>)
10003ee0:	4b1c      	ldr	r3, [pc, #112]	; (10003f54 <GENIX_ConnectionInit+0x88>)
10003ee2:	1c10      	adds	r0, r2, #0
10003ee4:	2103      	movs	r1, #3
10003ee6:	1c1a      	adds	r2, r3, #0
10003ee8:	f000 ff04 	bl	10004cf4 <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC1_CH0);
10003eec:	4b1a      	ldr	r3, [pc, #104]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003eee:	1c18      	adds	r0, r3, #0
10003ef0:	f001 fe7c 	bl	10005bec <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC1_CH0, &uart_genix_config);
10003ef4:	4a18      	ldr	r2, [pc, #96]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003ef6:	4b19      	ldr	r3, [pc, #100]	; (10003f5c <GENIX_ConnectionInit+0x90>)
10003ef8:	1c10      	adds	r0, r2, #0
10003efa:	1c19      	adds	r1, r3, #0
10003efc:	f001 fdd4 	bl	10005aa8 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC1_CH0, XMC_UART_CH_INPUT_RXD, USIC1_C0_DX0_P0_3);
10003f00:	4b15      	ldr	r3, [pc, #84]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003f02:	1c18      	adds	r0, r3, #0
10003f04:	2100      	movs	r1, #0
10003f06:	2201      	movs	r2, #1
10003f08:	f7ff ffb6 	bl	10003e78 <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC1_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
10003f0c:	4a12      	ldr	r2, [pc, #72]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003f0e:	2380      	movs	r3, #128	; 0x80
10003f10:	01db      	lsls	r3, r3, #7
10003f12:	1c10      	adds	r0, r2, #0
10003f14:	1c19      	adds	r1, r3, #0
10003f16:	f001 fe4f 	bl	10005bb8 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC1_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
10003f1a:	4b0f      	ldr	r3, [pc, #60]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003f1c:	1c18      	adds	r0, r3, #0
10003f1e:	2108      	movs	r1, #8
10003f20:	2203      	movs	r2, #3
10003f22:	f7ff ff87 	bl	10003e34 <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ12_IRQn, XMC_SCU_IRQCTRL_USIC1_SR3_IRQ12);
10003f26:	4b0e      	ldr	r3, [pc, #56]	; (10003f60 <GENIX_ConnectionInit+0x94>)
10003f28:	200c      	movs	r0, #12
10003f2a:	1c19      	adds	r1, r3, #0
10003f2c:	f000 fff0 	bl	10004f10 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ12_IRQn, 10U);
10003f30:	200c      	movs	r0, #12
10003f32:	210a      	movs	r1, #10
10003f34:	f7ff fed2 	bl	10003cdc <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ12_IRQn);
10003f38:	200c      	movs	r0, #12
10003f3a:	f7ff feb5 	bl	10003ca8 <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC1_CH0); // Sets the USIC channel operation mode to UART mode
10003f3e:	4b06      	ldr	r3, [pc, #24]	; (10003f58 <GENIX_ConnectionInit+0x8c>)
10003f40:	1c18      	adds	r0, r3, #0
10003f42:	f7ff ff67 	bl	10003e14 <XMC_UART_CH_Start>
}
10003f46:	46bd      	mov	sp, r7
10003f48:	bd80      	pop	{r7, pc}
10003f4a:	46c0      	nop			; (mov r8, r8)
10003f4c:	40040000 	.word	0x40040000
10003f50:	20000680 	.word	0x20000680
10003f54:	200007c4 	.word	0x200007c4
10003f58:	48004000 	.word	0x48004000
10003f5c:	20000688 	.word	0x20000688
10003f60:	00000c01 	.word	0x00000c01

10003f64 <GENIX_SendStream>:

void GENIX_SendStream(char *buffer, uint8_t length)
{
10003f64:	b580      	push	{r7, lr}
10003f66:	b084      	sub	sp, #16
10003f68:	af00      	add	r7, sp, #0
10003f6a:	6078      	str	r0, [r7, #4]
10003f6c:	1c0a      	adds	r2, r1, #0
10003f6e:	1cfb      	adds	r3, r7, #3
10003f70:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
10003f72:	230f      	movs	r3, #15
10003f74:	18fb      	adds	r3, r7, r3
10003f76:	2200      	movs	r2, #0
10003f78:	701a      	strb	r2, [r3, #0]
	while(count < length)
10003f7a:	e01f      	b.n	10003fbc <GENIX_SendStream+0x58>
	{
		while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC1_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10003f7c:	46c0      	nop			; (mov r8, r8)
10003f7e:	4b14      	ldr	r3, [pc, #80]	; (10003fd0 <GENIX_SendStream+0x6c>)
10003f80:	1c18      	adds	r0, r3, #0
10003f82:	f7ff ff39 	bl	10003df8 <XMC_USIC_CH_GetTransmitBufferStatus>
10003f86:	1e03      	subs	r3, r0, #0
10003f88:	2b80      	cmp	r3, #128	; 0x80
10003f8a:	d0f8      	beq.n	10003f7e <GENIX_SendStream+0x1a>
		XMC_UART_CH_ClearStatusFlag(XMC_USIC1_CH0, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
10003f8c:	4a10      	ldr	r2, [pc, #64]	; (10003fd0 <GENIX_SendStream+0x6c>)
10003f8e:	2380      	movs	r3, #128	; 0x80
10003f90:	019b      	lsls	r3, r3, #6
10003f92:	1c10      	adds	r0, r2, #0
10003f94:	1c19      	adds	r1, r3, #0
10003f96:	f7ff ff63 	bl	10003e60 <XMC_UART_CH_ClearStatusFlag>

		XMC_USIC1_CH0->TBUF[0U] = buffer[count];
10003f9a:	490d      	ldr	r1, [pc, #52]	; (10003fd0 <GENIX_SendStream+0x6c>)
10003f9c:	230f      	movs	r3, #15
10003f9e:	18fb      	adds	r3, r7, r3
10003fa0:	781b      	ldrb	r3, [r3, #0]
10003fa2:	687a      	ldr	r2, [r7, #4]
10003fa4:	18d3      	adds	r3, r2, r3
10003fa6:	781b      	ldrb	r3, [r3, #0]
10003fa8:	1c1a      	adds	r2, r3, #0
10003faa:	2380      	movs	r3, #128	; 0x80
10003fac:	50ca      	str	r2, [r1, r3]

		count++;
10003fae:	230f      	movs	r3, #15
10003fb0:	18fb      	adds	r3, r7, r3
10003fb2:	781a      	ldrb	r2, [r3, #0]
10003fb4:	230f      	movs	r3, #15
10003fb6:	18fb      	adds	r3, r7, r3
10003fb8:	3201      	adds	r2, #1
10003fba:	701a      	strb	r2, [r3, #0]
}

void GENIX_SendStream(char *buffer, uint8_t length)
{
	uint8_t count = 0;
	while(count < length)
10003fbc:	230f      	movs	r3, #15
10003fbe:	18fa      	adds	r2, r7, r3
10003fc0:	1cfb      	adds	r3, r7, #3
10003fc2:	7812      	ldrb	r2, [r2, #0]
10003fc4:	781b      	ldrb	r3, [r3, #0]
10003fc6:	429a      	cmp	r2, r3
10003fc8:	d3d8      	bcc.n	10003f7c <GENIX_SendStream+0x18>

		XMC_USIC1_CH0->TBUF[0U] = buffer[count];

		count++;
	 }
}
10003fca:	46bd      	mov	sp, r7
10003fcc:	b004      	add	sp, #16
10003fce:	bd80      	pop	{r7, pc}
10003fd0:	48004000 	.word	0x48004000

10003fd4 <GENIX_RequestData>:

void GENIX_RequestData(GENIX_COMMAND_TYPE_t command)
{
10003fd4:	b580      	push	{r7, lr}
10003fd6:	b086      	sub	sp, #24
10003fd8:	af00      	add	r7, sp, #0
10003fda:	1c02      	adds	r2, r0, #0
10003fdc:	1dfb      	adds	r3, r7, #7
10003fde:	701a      	strb	r2, [r3, #0]
	uint8_t ecc;
	uint8_t buffer[13];

	buffer[0] = 0xCC;
10003fe0:	2308      	movs	r3, #8
10003fe2:	18fb      	adds	r3, r7, r3
10003fe4:	22cc      	movs	r2, #204	; 0xcc
10003fe6:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0xDD;
10003fe8:	2308      	movs	r3, #8
10003fea:	18fb      	adds	r3, r7, r3
10003fec:	22dd      	movs	r2, #221	; 0xdd
10003fee:	705a      	strb	r2, [r3, #1]
	buffer[2] = 0x0A;
10003ff0:	2308      	movs	r3, #8
10003ff2:	18fb      	adds	r3, r7, r3
10003ff4:	220a      	movs	r2, #10
10003ff6:	709a      	strb	r2, [r3, #2]
	buffer[3] = command;
10003ff8:	2308      	movs	r3, #8
10003ffa:	18fb      	adds	r3, r7, r3
10003ffc:	1dfa      	adds	r2, r7, #7
10003ffe:	7812      	ldrb	r2, [r2, #0]
10004000:	70da      	strb	r2, [r3, #3]
	buffer[4] = 0x00;
10004002:	2308      	movs	r3, #8
10004004:	18fb      	adds	r3, r7, r3
10004006:	2200      	movs	r2, #0
10004008:	711a      	strb	r2, [r3, #4]
	buffer[5] = 0x00;
1000400a:	2308      	movs	r3, #8
1000400c:	18fb      	adds	r3, r7, r3
1000400e:	2200      	movs	r2, #0
10004010:	715a      	strb	r2, [r3, #5]
	buffer[6] = 0x00;
10004012:	2308      	movs	r3, #8
10004014:	18fb      	adds	r3, r7, r3
10004016:	2200      	movs	r2, #0
10004018:	719a      	strb	r2, [r3, #6]
	buffer[7] = 0x00;
1000401a:	2308      	movs	r3, #8
1000401c:	18fb      	adds	r3, r7, r3
1000401e:	2200      	movs	r2, #0
10004020:	71da      	strb	r2, [r3, #7]
	buffer[8] = 0x00;
10004022:	2308      	movs	r3, #8
10004024:	18fb      	adds	r3, r7, r3
10004026:	2200      	movs	r2, #0
10004028:	721a      	strb	r2, [r3, #8]
	buffer[9] = 0x00;
1000402a:	2308      	movs	r3, #8
1000402c:	18fb      	adds	r3, r7, r3
1000402e:	2200      	movs	r2, #0
10004030:	725a      	strb	r2, [r3, #9]

	ecc = 0x00;
10004032:	2317      	movs	r3, #23
10004034:	18fb      	adds	r3, r7, r3
10004036:	2200      	movs	r2, #0
10004038:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
1000403a:	2316      	movs	r3, #22
1000403c:	18fb      	adds	r3, r7, r3
1000403e:	2200      	movs	r2, #0
10004040:	701a      	strb	r2, [r3, #0]
10004042:	e013      	b.n	1000406c <GENIX_RequestData+0x98>
	{
		ecc = ecc+buffer[i];
10004044:	2316      	movs	r3, #22
10004046:	18fb      	adds	r3, r7, r3
10004048:	781b      	ldrb	r3, [r3, #0]
1000404a:	2208      	movs	r2, #8
1000404c:	18ba      	adds	r2, r7, r2
1000404e:	5cd1      	ldrb	r1, [r2, r3]
10004050:	2317      	movs	r3, #23
10004052:	18fb      	adds	r3, r7, r3
10004054:	2217      	movs	r2, #23
10004056:	18ba      	adds	r2, r7, r2
10004058:	7812      	ldrb	r2, [r2, #0]
1000405a:	188a      	adds	r2, r1, r2
1000405c:	701a      	strb	r2, [r3, #0]
	buffer[7] = 0x00;
	buffer[8] = 0x00;
	buffer[9] = 0x00;

	ecc = 0x00;
	for(uint8_t i = 0; i<10; i++)
1000405e:	2316      	movs	r3, #22
10004060:	18fb      	adds	r3, r7, r3
10004062:	781a      	ldrb	r2, [r3, #0]
10004064:	2316      	movs	r3, #22
10004066:	18fb      	adds	r3, r7, r3
10004068:	3201      	adds	r2, #1
1000406a:	701a      	strb	r2, [r3, #0]
1000406c:	2316      	movs	r3, #22
1000406e:	18fb      	adds	r3, r7, r3
10004070:	781b      	ldrb	r3, [r3, #0]
10004072:	2b09      	cmp	r3, #9
10004074:	d9e6      	bls.n	10004044 <GENIX_RequestData+0x70>
	{
		ecc = ecc+buffer[i];
	}

	ecc = 0x1D;
10004076:	2317      	movs	r3, #23
10004078:	18fb      	adds	r3, r7, r3
1000407a:	221d      	movs	r2, #29
1000407c:	701a      	strb	r2, [r3, #0]
	buffer[10] = ecc;
1000407e:	2308      	movs	r3, #8
10004080:	18fb      	adds	r3, r7, r3
10004082:	2217      	movs	r2, #23
10004084:	18ba      	adds	r2, r7, r2
10004086:	7812      	ldrb	r2, [r2, #0]
10004088:	729a      	strb	r2, [r3, #10]
	buffer[11] = 0x0D;
1000408a:	2308      	movs	r3, #8
1000408c:	18fb      	adds	r3, r7, r3
1000408e:	220d      	movs	r2, #13
10004090:	72da      	strb	r2, [r3, #11]
	buffer[12] = 0x0A;
10004092:	2308      	movs	r3, #8
10004094:	18fb      	adds	r3, r7, r3
10004096:	220a      	movs	r2, #10
10004098:	731a      	strb	r2, [r3, #12]

	GENIX_SendStream((char*)&buffer, 13);
1000409a:	2308      	movs	r3, #8
1000409c:	18fb      	adds	r3, r7, r3
1000409e:	1c18      	adds	r0, r3, #0
100040a0:	210d      	movs	r1, #13
100040a2:	f7ff ff5f 	bl	10003f64 <GENIX_SendStream>
}
100040a6:	46bd      	mov	sp, r7
100040a8:	b006      	add	sp, #24
100040aa:	bd80      	pop	{r7, pc}

100040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100040ac:	b580      	push	{r7, lr}
100040ae:	b082      	sub	sp, #8
100040b0:	af00      	add	r7, sp, #0
100040b2:	1c02      	adds	r2, r0, #0
100040b4:	1dfb      	adds	r3, r7, #7
100040b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100040b8:	1dfb      	adds	r3, r7, #7
100040ba:	781b      	ldrb	r3, [r3, #0]
100040bc:	2b7f      	cmp	r3, #127	; 0x7f
100040be:	d809      	bhi.n	100040d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100040c0:	4b06      	ldr	r3, [pc, #24]	; (100040dc <__NVIC_EnableIRQ+0x30>)
100040c2:	1dfa      	adds	r2, r7, #7
100040c4:	7812      	ldrb	r2, [r2, #0]
100040c6:	1c11      	adds	r1, r2, #0
100040c8:	221f      	movs	r2, #31
100040ca:	400a      	ands	r2, r1
100040cc:	2101      	movs	r1, #1
100040ce:	4091      	lsls	r1, r2
100040d0:	1c0a      	adds	r2, r1, #0
100040d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100040d4:	46bd      	mov	sp, r7
100040d6:	b002      	add	sp, #8
100040d8:	bd80      	pop	{r7, pc}
100040da:	46c0      	nop			; (mov r8, r8)
100040dc:	e000e100 	.word	0xe000e100

100040e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100040e0:	b5b0      	push	{r4, r5, r7, lr}
100040e2:	b082      	sub	sp, #8
100040e4:	af00      	add	r7, sp, #0
100040e6:	1c02      	adds	r2, r0, #0
100040e8:	6039      	str	r1, [r7, #0]
100040ea:	1dfb      	adds	r3, r7, #7
100040ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100040ee:	1dfb      	adds	r3, r7, #7
100040f0:	781b      	ldrb	r3, [r3, #0]
100040f2:	2b7f      	cmp	r3, #127	; 0x7f
100040f4:	d827      	bhi.n	10004146 <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100040f6:	4c2d      	ldr	r4, [pc, #180]	; (100041ac <__NVIC_SetPriority+0xcc>)
100040f8:	1dfb      	adds	r3, r7, #7
100040fa:	781b      	ldrb	r3, [r3, #0]
100040fc:	b25b      	sxtb	r3, r3
100040fe:	089b      	lsrs	r3, r3, #2
10004100:	492a      	ldr	r1, [pc, #168]	; (100041ac <__NVIC_SetPriority+0xcc>)
10004102:	1dfa      	adds	r2, r7, #7
10004104:	7812      	ldrb	r2, [r2, #0]
10004106:	b252      	sxtb	r2, r2
10004108:	0892      	lsrs	r2, r2, #2
1000410a:	32c0      	adds	r2, #192	; 0xc0
1000410c:	0092      	lsls	r2, r2, #2
1000410e:	5852      	ldr	r2, [r2, r1]
10004110:	1df9      	adds	r1, r7, #7
10004112:	7809      	ldrb	r1, [r1, #0]
10004114:	1c08      	adds	r0, r1, #0
10004116:	2103      	movs	r1, #3
10004118:	4001      	ands	r1, r0
1000411a:	00c9      	lsls	r1, r1, #3
1000411c:	1c08      	adds	r0, r1, #0
1000411e:	21ff      	movs	r1, #255	; 0xff
10004120:	4081      	lsls	r1, r0
10004122:	43c9      	mvns	r1, r1
10004124:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004126:	683a      	ldr	r2, [r7, #0]
10004128:	0192      	lsls	r2, r2, #6
1000412a:	20ff      	movs	r0, #255	; 0xff
1000412c:	4002      	ands	r2, r0
1000412e:	1df8      	adds	r0, r7, #7
10004130:	7800      	ldrb	r0, [r0, #0]
10004132:	1c05      	adds	r5, r0, #0
10004134:	2003      	movs	r0, #3
10004136:	4028      	ands	r0, r5
10004138:	00c0      	lsls	r0, r0, #3
1000413a:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000413c:	430a      	orrs	r2, r1
1000413e:	33c0      	adds	r3, #192	; 0xc0
10004140:	009b      	lsls	r3, r3, #2
10004142:	511a      	str	r2, [r3, r4]
10004144:	e02e      	b.n	100041a4 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10004146:	4c1a      	ldr	r4, [pc, #104]	; (100041b0 <__NVIC_SetPriority+0xd0>)
10004148:	1dfb      	adds	r3, r7, #7
1000414a:	781b      	ldrb	r3, [r3, #0]
1000414c:	1c1a      	adds	r2, r3, #0
1000414e:	230f      	movs	r3, #15
10004150:	4013      	ands	r3, r2
10004152:	3b08      	subs	r3, #8
10004154:	0899      	lsrs	r1, r3, #2
10004156:	4a16      	ldr	r2, [pc, #88]	; (100041b0 <__NVIC_SetPriority+0xd0>)
10004158:	1dfb      	adds	r3, r7, #7
1000415a:	781b      	ldrb	r3, [r3, #0]
1000415c:	1c18      	adds	r0, r3, #0
1000415e:	230f      	movs	r3, #15
10004160:	4003      	ands	r3, r0
10004162:	3b08      	subs	r3, #8
10004164:	089b      	lsrs	r3, r3, #2
10004166:	3306      	adds	r3, #6
10004168:	009b      	lsls	r3, r3, #2
1000416a:	18d3      	adds	r3, r2, r3
1000416c:	685b      	ldr	r3, [r3, #4]
1000416e:	1dfa      	adds	r2, r7, #7
10004170:	7812      	ldrb	r2, [r2, #0]
10004172:	1c10      	adds	r0, r2, #0
10004174:	2203      	movs	r2, #3
10004176:	4002      	ands	r2, r0
10004178:	00d2      	lsls	r2, r2, #3
1000417a:	1c10      	adds	r0, r2, #0
1000417c:	22ff      	movs	r2, #255	; 0xff
1000417e:	4082      	lsls	r2, r0
10004180:	43d2      	mvns	r2, r2
10004182:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10004184:	683b      	ldr	r3, [r7, #0]
10004186:	019b      	lsls	r3, r3, #6
10004188:	20ff      	movs	r0, #255	; 0xff
1000418a:	4003      	ands	r3, r0
1000418c:	1df8      	adds	r0, r7, #7
1000418e:	7800      	ldrb	r0, [r0, #0]
10004190:	1c05      	adds	r5, r0, #0
10004192:	2003      	movs	r0, #3
10004194:	4028      	ands	r0, r5
10004196:	00c0      	lsls	r0, r0, #3
10004198:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000419a:	431a      	orrs	r2, r3
1000419c:	1d8b      	adds	r3, r1, #6
1000419e:	009b      	lsls	r3, r3, #2
100041a0:	18e3      	adds	r3, r4, r3
100041a2:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100041a4:	46bd      	mov	sp, r7
100041a6:	b002      	add	sp, #8
100041a8:	bdb0      	pop	{r4, r5, r7, pc}
100041aa:	46c0      	nop			; (mov r8, r8)
100041ac:	e000e100 	.word	0xe000e100
100041b0:	e000ed00 	.word	0xe000ed00

100041b4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
100041b4:	b580      	push	{r7, lr}
100041b6:	b082      	sub	sp, #8
100041b8:	af00      	add	r7, sp, #0
100041ba:	6078      	str	r0, [r7, #4]
100041bc:	1c08      	adds	r0, r1, #0
100041be:	1c11      	adds	r1, r2, #0
100041c0:	1cfb      	adds	r3, r7, #3
100041c2:	1c02      	adds	r2, r0, #0
100041c4:	701a      	strb	r2, [r3, #0]
100041c6:	1cbb      	adds	r3, r7, #2
100041c8:	1c0a      	adds	r2, r1, #0
100041ca:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100041cc:	1cfb      	adds	r3, r7, #3
100041ce:	7818      	ldrb	r0, [r3, #0]
100041d0:	1cfb      	adds	r3, r7, #3
100041d2:	781b      	ldrb	r3, [r3, #0]
100041d4:	687a      	ldr	r2, [r7, #4]
100041d6:	3306      	adds	r3, #6
100041d8:	009b      	lsls	r3, r3, #2
100041da:	18d3      	adds	r3, r2, r3
100041dc:	685b      	ldr	r3, [r3, #4]
100041de:	2207      	movs	r2, #7
100041e0:	4393      	bics	r3, r2
100041e2:	1c1a      	adds	r2, r3, #0
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
100041e4:	1cbb      	adds	r3, r7, #2
100041e6:	781b      	ldrb	r3, [r3, #0]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
100041e8:	431a      	orrs	r2, r3
100041ea:	6879      	ldr	r1, [r7, #4]
100041ec:	1d83      	adds	r3, r0, #6
100041ee:	009b      	lsls	r3, r3, #2
100041f0:	18cb      	adds	r3, r1, r3
100041f2:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
100041f4:	46bd      	mov	sp, r7
100041f6:	b002      	add	sp, #8
100041f8:	bd80      	pop	{r7, pc}
100041fa:	46c0      	nop			; (mov r8, r8)

100041fc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
100041fc:	b580      	push	{r7, lr}
100041fe:	b082      	sub	sp, #8
10004200:	af00      	add	r7, sp, #0
10004202:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
10004204:	687b      	ldr	r3, [r7, #4]
10004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10004208:	b2db      	uxtb	r3, r3
1000420a:	227f      	movs	r2, #127	; 0x7f
1000420c:	4393      	bics	r3, r2
1000420e:	b2db      	uxtb	r3, r3
}
10004210:	1c18      	adds	r0, r3, #0
10004212:	46bd      	mov	sp, r7
10004214:	b002      	add	sp, #8
10004216:	bd80      	pop	{r7, pc}

10004218 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
10004218:	b580      	push	{r7, lr}
1000421a:	b082      	sub	sp, #8
1000421c:	af00      	add	r7, sp, #0
1000421e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
10004220:	687b      	ldr	r3, [r7, #4]
10004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10004224:	220f      	movs	r2, #15
10004226:	4393      	bics	r3, r2
10004228:	2202      	movs	r2, #2
1000422a:	431a      	orrs	r2, r3
1000422c:	687b      	ldr	r3, [r7, #4]
1000422e:	641a      	str	r2, [r3, #64]	; 0x40
}
10004230:	46bd      	mov	sp, r7
10004232:	b002      	add	sp, #8
10004234:	bd80      	pop	{r7, pc}
10004236:	46c0      	nop			; (mov r8, r8)

10004238 <XMC_UART_CH_SelectInterruptNodePointer>:
 * XMC_UART_CH_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                            const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                            const uint32_t service_request)
{
10004238:	b580      	push	{r7, lr}
1000423a:	b084      	sub	sp, #16
1000423c:	af00      	add	r7, sp, #0
1000423e:	60f8      	str	r0, [r7, #12]
10004240:	607a      	str	r2, [r7, #4]
10004242:	230b      	movs	r3, #11
10004244:	18fb      	adds	r3, r7, r3
10004246:	1c0a      	adds	r2, r1, #0
10004248:	701a      	strb	r2, [r3, #0]
  XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node,
1000424a:	68f9      	ldr	r1, [r7, #12]
1000424c:	230b      	movs	r3, #11
1000424e:	18fb      	adds	r3, r7, r3
10004250:	781a      	ldrb	r2, [r3, #0]
10004252:	687b      	ldr	r3, [r7, #4]
10004254:	1c08      	adds	r0, r1, #0
10004256:	1c11      	adds	r1, r2, #0
10004258:	1c1a      	adds	r2, r3, #0
1000425a:	f001 fdff 	bl	10005e5c <XMC_USIC_CH_SetInterruptNodePointer>
		                                       (uint32_t)service_request);
}
1000425e:	46bd      	mov	sp, r7
10004260:	b004      	add	sp, #16
10004262:	bd80      	pop	{r7, pc}

10004264 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
10004264:	b580      	push	{r7, lr}
10004266:	b082      	sub	sp, #8
10004268:	af00      	add	r7, sp, #0
1000426a:	6078      	str	r0, [r7, #4]
1000426c:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
1000426e:	687b      	ldr	r3, [r7, #4]
10004270:	683a      	ldr	r2, [r7, #0]
10004272:	64da      	str	r2, [r3, #76]	; 0x4c
}
10004274:	46bd      	mov	sp, r7
10004276:	b002      	add	sp, #8
10004278:	bd80      	pop	{r7, pc}
1000427a:	46c0      	nop			; (mov r8, r8)

1000427c <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
1000427c:	b580      	push	{r7, lr}
1000427e:	b082      	sub	sp, #8
10004280:	af00      	add	r7, sp, #0
10004282:	6078      	str	r0, [r7, #4]
10004284:	1c08      	adds	r0, r1, #0
10004286:	1c11      	adds	r1, r2, #0
10004288:	1cfb      	adds	r3, r7, #3
1000428a:	1c02      	adds	r2, r0, #0
1000428c:	701a      	strb	r2, [r3, #0]
1000428e:	1cbb      	adds	r3, r7, #2
10004290:	1c0a      	adds	r2, r1, #0
10004292:	701a      	strb	r2, [r3, #0]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
10004294:	1cfb      	adds	r3, r7, #3
10004296:	7818      	ldrb	r0, [r3, #0]
10004298:	1cfb      	adds	r3, r7, #3
1000429a:	781b      	ldrb	r3, [r3, #0]
1000429c:	687a      	ldr	r2, [r7, #4]
1000429e:	3306      	adds	r3, #6
100042a0:	009b      	lsls	r3, r3, #2
100042a2:	18d3      	adds	r3, r2, r3
100042a4:	685b      	ldr	r3, [r3, #4]
100042a6:	2250      	movs	r2, #80	; 0x50
100042a8:	4393      	bics	r3, r2
100042aa:	1c1a      	adds	r2, r3, #0
100042ac:	6879      	ldr	r1, [r7, #4]
100042ae:	1d83      	adds	r3, r0, #6
100042b0:	009b      	lsls	r3, r3, #2
100042b2:	18cb      	adds	r3, r1, r3
100042b4:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
100042b6:	6879      	ldr	r1, [r7, #4]
100042b8:	1cfb      	adds	r3, r7, #3
100042ba:	781a      	ldrb	r2, [r3, #0]
100042bc:	1cbb      	adds	r3, r7, #2
100042be:	781b      	ldrb	r3, [r3, #0]
100042c0:	1c08      	adds	r0, r1, #0
100042c2:	1c11      	adds	r1, r2, #0
100042c4:	1c1a      	adds	r2, r3, #0
100042c6:	f7ff ff75 	bl	100041b4 <XMC_USIC_CH_SetInputSource>
}
100042ca:	46bd      	mov	sp, r7
100042cc:	b002      	add	sp, #8
100042ce:	bd80      	pop	{r7, pc}

100042d0 <ESP32_ConnectionInit>:

static bool      crc_tab16_init = false;
static uint16_t  crc_tab16[256];

void ESP32_ConnectionInit(void)
{
100042d0:	b580      	push	{r7, lr}
100042d2:	af00      	add	r7, sp, #0
    XMC_GPIO_Init(P2_0, &tx_config);
100042d4:	4a21      	ldr	r2, [pc, #132]	; (1000435c <ESP32_ConnectionInit+0x8c>)
100042d6:	4b22      	ldr	r3, [pc, #136]	; (10004360 <ESP32_ConnectionInit+0x90>)
100042d8:	1c10      	adds	r0, r2, #0
100042da:	2100      	movs	r1, #0
100042dc:	1c1a      	adds	r2, r3, #0
100042de:	f000 fd09 	bl	10004cf4 <XMC_GPIO_Init>
    XMC_GPIO_Init(P2_1, &rx_config);
100042e2:	4a1e      	ldr	r2, [pc, #120]	; (1000435c <ESP32_ConnectionInit+0x8c>)
100042e4:	4b1f      	ldr	r3, [pc, #124]	; (10004364 <ESP32_ConnectionInit+0x94>)
100042e6:	1c10      	adds	r0, r2, #0
100042e8:	2101      	movs	r1, #1
100042ea:	1c1a      	adds	r2, r3, #0
100042ec:	f000 fd02 	bl	10004cf4 <XMC_GPIO_Init>

   	XMC_USIC_CH_Enable(XMC_USIC0_CH0);
100042f0:	2390      	movs	r3, #144	; 0x90
100042f2:	05db      	lsls	r3, r3, #23
100042f4:	1c18      	adds	r0, r3, #0
100042f6:	f001 fc79 	bl	10005bec <XMC_USIC_CH_Enable>
	XMC_UART_CH_Init(XMC_USIC0_CH0, &uart_config);
100042fa:	2390      	movs	r3, #144	; 0x90
100042fc:	05da      	lsls	r2, r3, #23
100042fe:	4b1a      	ldr	r3, [pc, #104]	; (10004368 <ESP32_ConnectionInit+0x98>)
10004300:	1c10      	adds	r0, r2, #0
10004302:	1c19      	adds	r1, r3, #0
10004304:	f001 fbd0 	bl	10005aa8 <XMC_UART_CH_Init>
	XMC_UART_CH_SetInputSource(XMC_USIC0_CH0, XMC_UART_CH_INPUT_RXD, USIC0_C0_DX0_P2_1);
10004308:	2390      	movs	r3, #144	; 0x90
1000430a:	05db      	lsls	r3, r3, #23
1000430c:	1c18      	adds	r0, r3, #0
1000430e:	2100      	movs	r1, #0
10004310:	2205      	movs	r2, #5
10004312:	f7ff ffb3 	bl	1000427c <XMC_UART_CH_SetInputSource>

	XMC_UART_CH_EnableEvent(XMC_USIC0_CH0,XMC_UART_CH_EVENT_STANDARD_RECEIVE); // PSR.RFF
10004316:	2390      	movs	r3, #144	; 0x90
10004318:	05da      	lsls	r2, r3, #23
1000431a:	2380      	movs	r3, #128	; 0x80
1000431c:	01db      	lsls	r3, r3, #7
1000431e:	1c10      	adds	r0, r2, #0
10004320:	1c19      	adds	r1, r3, #0
10004322:	f001 fc49 	bl	10005bb8 <XMC_UART_CH_EnableEvent>
	XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC0_CH0, XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE, 3);
10004326:	2390      	movs	r3, #144	; 0x90
10004328:	05db      	lsls	r3, r3, #23
1000432a:	1c18      	adds	r0, r3, #0
1000432c:	2108      	movs	r1, #8
1000432e:	2203      	movs	r2, #3
10004330:	f7ff ff82 	bl	10004238 <XMC_UART_CH_SelectInterruptNodePointer>
	XMC_SCU_SetInterruptControl(IRQ18_IRQn, XMC_SCU_IRQCTRL_USIC0_SR3_IRQ18);
10004334:	4b0d      	ldr	r3, [pc, #52]	; (1000436c <ESP32_ConnectionInit+0x9c>)
10004336:	2012      	movs	r0, #18
10004338:	1c19      	adds	r1, r3, #0
1000433a:	f000 fde9 	bl	10004f10 <XMC_SCU_SetInterruptControl>
	NVIC_SetPriority(IRQ18_IRQn, 10U);
1000433e:	2012      	movs	r0, #18
10004340:	210a      	movs	r1, #10
10004342:	f7ff fecd 	bl	100040e0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(IRQ18_IRQn);
10004346:	2012      	movs	r0, #18
10004348:	f7ff feb0 	bl	100040ac <__NVIC_EnableIRQ>

	XMC_UART_CH_Start(XMC_USIC0_CH0);
1000434c:	2390      	movs	r3, #144	; 0x90
1000434e:	05db      	lsls	r3, r3, #23
10004350:	1c18      	adds	r0, r3, #0
10004352:	f7ff ff61 	bl	10004218 <XMC_UART_CH_Start>
}
10004356:	46bd      	mov	sp, r7
10004358:	bd80      	pop	{r7, pc}
1000435a:	46c0      	nop			; (mov r8, r8)
1000435c:	40040200 	.word	0x40040200
10004360:	20000694 	.word	0x20000694
10004364:	2000069c 	.word	0x2000069c
10004368:	200006a4 	.word	0x200006a4
1000436c:	00001201 	.word	0x00001201

10004370 <ESP32_SendStream>:

void ESP32_SendStream(char *buffer, uint8_t length)
{
10004370:	b580      	push	{r7, lr}
10004372:	b084      	sub	sp, #16
10004374:	af00      	add	r7, sp, #0
10004376:	6078      	str	r0, [r7, #4]
10004378:	1c0a      	adds	r2, r1, #0
1000437a:	1cfb      	adds	r3, r7, #3
1000437c:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
1000437e:	230f      	movs	r3, #15
10004380:	18fb      	adds	r3, r7, r3
10004382:	2200      	movs	r2, #0
10004384:	701a      	strb	r2, [r3, #0]
	while(count < length)
10004386:	e022      	b.n	100043ce <ESP32_SendStream+0x5e>
	{
		while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY){}
10004388:	46c0      	nop			; (mov r8, r8)
1000438a:	2390      	movs	r3, #144	; 0x90
1000438c:	05db      	lsls	r3, r3, #23
1000438e:	1c18      	adds	r0, r3, #0
10004390:	f7ff ff34 	bl	100041fc <XMC_USIC_CH_GetTransmitBufferStatus>
10004394:	1e03      	subs	r3, r0, #0
10004396:	2b80      	cmp	r3, #128	; 0x80
10004398:	d0f7      	beq.n	1000438a <ESP32_SendStream+0x1a>
		XMC_UART_CH_ClearStatusFlag(XMC_USIC0_CH0, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
1000439a:	2390      	movs	r3, #144	; 0x90
1000439c:	05da      	lsls	r2, r3, #23
1000439e:	2380      	movs	r3, #128	; 0x80
100043a0:	019b      	lsls	r3, r3, #6
100043a2:	1c10      	adds	r0, r2, #0
100043a4:	1c19      	adds	r1, r3, #0
100043a6:	f7ff ff5d 	bl	10004264 <XMC_UART_CH_ClearStatusFlag>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];
100043aa:	2390      	movs	r3, #144	; 0x90
100043ac:	05db      	lsls	r3, r3, #23
100043ae:	220f      	movs	r2, #15
100043b0:	18ba      	adds	r2, r7, r2
100043b2:	7812      	ldrb	r2, [r2, #0]
100043b4:	6879      	ldr	r1, [r7, #4]
100043b6:	188a      	adds	r2, r1, r2
100043b8:	7812      	ldrb	r2, [r2, #0]
100043ba:	1c11      	adds	r1, r2, #0
100043bc:	2280      	movs	r2, #128	; 0x80
100043be:	5099      	str	r1, [r3, r2]

		count++;
100043c0:	230f      	movs	r3, #15
100043c2:	18fb      	adds	r3, r7, r3
100043c4:	781a      	ldrb	r2, [r3, #0]
100043c6:	230f      	movs	r3, #15
100043c8:	18fb      	adds	r3, r7, r3
100043ca:	3201      	adds	r2, #1
100043cc:	701a      	strb	r2, [r3, #0]
}

void ESP32_SendStream(char *buffer, uint8_t length)
{
	uint8_t count = 0;
	while(count < length)
100043ce:	230f      	movs	r3, #15
100043d0:	18fa      	adds	r2, r7, r3
100043d2:	1cfb      	adds	r3, r7, #3
100043d4:	7812      	ldrb	r2, [r2, #0]
100043d6:	781b      	ldrb	r3, [r3, #0]
100043d8:	429a      	cmp	r2, r3
100043da:	d3d5      	bcc.n	10004388 <ESP32_SendStream+0x18>

		XMC_USIC0_CH0->TBUF[0U] = buffer[count];

		count++;
	 }
}
100043dc:	46bd      	mov	sp, r7
100043de:	b004      	add	sp, #16
100043e0:	bd80      	pop	{r7, pc}
100043e2:	46c0      	nop			; (mov r8, r8)

100043e4 <ESP32_Map_Data>:

uint8_t *ESP32_Map_Data(ESP_Data_Group_t *dataGroup)
{
100043e4:	b590      	push	{r4, r7, lr}
100043e6:	b085      	sub	sp, #20
100043e8:	af00      	add	r7, sp, #0
100043ea:	6078      	str	r0, [r7, #4]
	static uint8_t buffer[80];
	uint8_t offset = 3;
100043ec:	230f      	movs	r3, #15
100043ee:	18fb      	adds	r3, r7, r3
100043f0:	2203      	movs	r2, #3
100043f2:	701a      	strb	r2, [r3, #0]
	uint16_t crc;
	buffer[0] = SoF;
100043f4:	4bf9      	ldr	r3, [pc, #996]	; (100047dc <ESP32_Map_Data+0x3f8>)
100043f6:	2205      	movs	r2, #5
100043f8:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x02;
100043fa:	4bf8      	ldr	r3, [pc, #992]	; (100047dc <ESP32_Map_Data+0x3f8>)
100043fc:	2202      	movs	r2, #2
100043fe:	705a      	strb	r2, [r3, #1]
	buffer[2] = 69;
10004400:	4bf6      	ldr	r3, [pc, #984]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004402:	2245      	movs	r2, #69	; 0x45
10004404:	709a      	strb	r2, [r3, #2]
	/* pcs converter system */
	buffer[offset+0] = dataGroup->pcs_system;
10004406:	230f      	movs	r3, #15
10004408:	18fb      	adds	r3, r7, r3
1000440a:	781b      	ldrb	r3, [r3, #0]
1000440c:	687a      	ldr	r2, [r7, #4]
1000440e:	7811      	ldrb	r1, [r2, #0]
10004410:	4af2      	ldr	r2, [pc, #968]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004412:	54d1      	strb	r1, [r2, r3]
	buffer[offset+1] = dataGroup->dcgrid_system;
10004414:	230f      	movs	r3, #15
10004416:	18fb      	adds	r3, r7, r3
10004418:	781b      	ldrb	r3, [r3, #0]
1000441a:	3301      	adds	r3, #1
1000441c:	687a      	ldr	r2, [r7, #4]
1000441e:	7851      	ldrb	r1, [r2, #1]
10004420:	4aee      	ldr	r2, [pc, #952]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004422:	54d1      	strb	r1, [r2, r3]
	buffer[offset+2] = dataGroup->inv_system;
10004424:	230f      	movs	r3, #15
10004426:	18fb      	adds	r3, r7, r3
10004428:	781b      	ldrb	r3, [r3, #0]
1000442a:	3302      	adds	r3, #2
1000442c:	687a      	ldr	r2, [r7, #4]
1000442e:	7891      	ldrb	r1, [r2, #2]
10004430:	4aea      	ldr	r2, [pc, #936]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004432:	54d1      	strb	r1, [r2, r3]
	buffer[offset+3] = dataGroup->pvconv_system;
10004434:	230f      	movs	r3, #15
10004436:	18fb      	adds	r3, r7, r3
10004438:	781b      	ldrb	r3, [r3, #0]
1000443a:	3303      	adds	r3, #3
1000443c:	687a      	ldr	r2, [r7, #4]
1000443e:	78d1      	ldrb	r1, [r2, #3]
10004440:	4ae6      	ldr	r2, [pc, #920]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004442:	54d1      	strb	r1, [r2, r3]
	buffer[offset+4] = dataGroup->batconv_system;
10004444:	230f      	movs	r3, #15
10004446:	18fb      	adds	r3, r7, r3
10004448:	781b      	ldrb	r3, [r3, #0]
1000444a:	3304      	adds	r3, #4
1000444c:	687a      	ldr	r2, [r7, #4]
1000444e:	7911      	ldrb	r1, [r2, #4]
10004450:	4ae2      	ldr	r2, [pc, #904]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004452:	54d1      	strb	r1, [r2, r3]

	/* pcs sensors */
	buffer[offset+5]  = ((unsigned char*)&dataGroup->vDC_grid)[0];
10004454:	230f      	movs	r3, #15
10004456:	18fb      	adds	r3, r7, r3
10004458:	781b      	ldrb	r3, [r3, #0]
1000445a:	3305      	adds	r3, #5
1000445c:	687a      	ldr	r2, [r7, #4]
1000445e:	3208      	adds	r2, #8
10004460:	7811      	ldrb	r1, [r2, #0]
10004462:	4ade      	ldr	r2, [pc, #888]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004464:	54d1      	strb	r1, [r2, r3]
	buffer[offset+6]  = ((unsigned char*)&dataGroup->vDC_grid)[1];
10004466:	230f      	movs	r3, #15
10004468:	18fb      	adds	r3, r7, r3
1000446a:	781b      	ldrb	r3, [r3, #0]
1000446c:	3306      	adds	r3, #6
1000446e:	687a      	ldr	r2, [r7, #4]
10004470:	3208      	adds	r2, #8
10004472:	3201      	adds	r2, #1
10004474:	7811      	ldrb	r1, [r2, #0]
10004476:	4ad9      	ldr	r2, [pc, #868]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004478:	54d1      	strb	r1, [r2, r3]
	buffer[offset+7]  = ((unsigned char*)&dataGroup->vDC_grid)[2];
1000447a:	230f      	movs	r3, #15
1000447c:	18fb      	adds	r3, r7, r3
1000447e:	781b      	ldrb	r3, [r3, #0]
10004480:	3307      	adds	r3, #7
10004482:	687a      	ldr	r2, [r7, #4]
10004484:	3208      	adds	r2, #8
10004486:	3202      	adds	r2, #2
10004488:	7811      	ldrb	r1, [r2, #0]
1000448a:	4ad4      	ldr	r2, [pc, #848]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000448c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+8]  = ((unsigned char*)&dataGroup->vDC_grid)[3];
1000448e:	230f      	movs	r3, #15
10004490:	18fb      	adds	r3, r7, r3
10004492:	781b      	ldrb	r3, [r3, #0]
10004494:	3308      	adds	r3, #8
10004496:	687a      	ldr	r2, [r7, #4]
10004498:	3208      	adds	r2, #8
1000449a:	3203      	adds	r2, #3
1000449c:	7811      	ldrb	r1, [r2, #0]
1000449e:	4acf      	ldr	r2, [pc, #828]	; (100047dc <ESP32_Map_Data+0x3f8>)
100044a0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+9]  = ((unsigned char*)&dataGroup->vAC_inv)[0];
100044a2:	230f      	movs	r3, #15
100044a4:	18fb      	adds	r3, r7, r3
100044a6:	781b      	ldrb	r3, [r3, #0]
100044a8:	3309      	adds	r3, #9
100044aa:	687a      	ldr	r2, [r7, #4]
100044ac:	320c      	adds	r2, #12
100044ae:	7811      	ldrb	r1, [r2, #0]
100044b0:	4aca      	ldr	r2, [pc, #808]	; (100047dc <ESP32_Map_Data+0x3f8>)
100044b2:	54d1      	strb	r1, [r2, r3]
	buffer[offset+10] = ((unsigned char*)&dataGroup->vAC_inv)[1];
100044b4:	230f      	movs	r3, #15
100044b6:	18fb      	adds	r3, r7, r3
100044b8:	781b      	ldrb	r3, [r3, #0]
100044ba:	330a      	adds	r3, #10
100044bc:	687a      	ldr	r2, [r7, #4]
100044be:	320c      	adds	r2, #12
100044c0:	3201      	adds	r2, #1
100044c2:	7811      	ldrb	r1, [r2, #0]
100044c4:	4ac5      	ldr	r2, [pc, #788]	; (100047dc <ESP32_Map_Data+0x3f8>)
100044c6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+11] = ((unsigned char*)&dataGroup->vAC_inv)[2];
100044c8:	230f      	movs	r3, #15
100044ca:	18fb      	adds	r3, r7, r3
100044cc:	781b      	ldrb	r3, [r3, #0]
100044ce:	330b      	adds	r3, #11
100044d0:	687a      	ldr	r2, [r7, #4]
100044d2:	320c      	adds	r2, #12
100044d4:	3202      	adds	r2, #2
100044d6:	7811      	ldrb	r1, [r2, #0]
100044d8:	4ac0      	ldr	r2, [pc, #768]	; (100047dc <ESP32_Map_Data+0x3f8>)
100044da:	54d1      	strb	r1, [r2, r3]
	buffer[offset+12] = ((unsigned char*)&dataGroup->vAC_inv)[3];
100044dc:	230f      	movs	r3, #15
100044de:	18fb      	adds	r3, r7, r3
100044e0:	781b      	ldrb	r3, [r3, #0]
100044e2:	330c      	adds	r3, #12
100044e4:	687a      	ldr	r2, [r7, #4]
100044e6:	320c      	adds	r2, #12
100044e8:	3203      	adds	r2, #3
100044ea:	7811      	ldrb	r1, [r2, #0]
100044ec:	4abb      	ldr	r2, [pc, #748]	; (100047dc <ESP32_Map_Data+0x3f8>)
100044ee:	54d1      	strb	r1, [r2, r3]
	buffer[offset+13] = ((unsigned char*)&dataGroup->vPv_conv)[0];
100044f0:	230f      	movs	r3, #15
100044f2:	18fb      	adds	r3, r7, r3
100044f4:	781b      	ldrb	r3, [r3, #0]
100044f6:	330d      	adds	r3, #13
100044f8:	687a      	ldr	r2, [r7, #4]
100044fa:	3210      	adds	r2, #16
100044fc:	7811      	ldrb	r1, [r2, #0]
100044fe:	4ab7      	ldr	r2, [pc, #732]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004500:	54d1      	strb	r1, [r2, r3]
	buffer[offset+14] = ((unsigned char*)&dataGroup->vPv_conv)[1];
10004502:	230f      	movs	r3, #15
10004504:	18fb      	adds	r3, r7, r3
10004506:	781b      	ldrb	r3, [r3, #0]
10004508:	330e      	adds	r3, #14
1000450a:	687a      	ldr	r2, [r7, #4]
1000450c:	3210      	adds	r2, #16
1000450e:	3201      	adds	r2, #1
10004510:	7811      	ldrb	r1, [r2, #0]
10004512:	4ab2      	ldr	r2, [pc, #712]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004514:	54d1      	strb	r1, [r2, r3]
	buffer[offset+15] = ((unsigned char*)&dataGroup->vPv_conv)[2];
10004516:	230f      	movs	r3, #15
10004518:	18fb      	adds	r3, r7, r3
1000451a:	781b      	ldrb	r3, [r3, #0]
1000451c:	330f      	adds	r3, #15
1000451e:	687a      	ldr	r2, [r7, #4]
10004520:	3210      	adds	r2, #16
10004522:	3202      	adds	r2, #2
10004524:	7811      	ldrb	r1, [r2, #0]
10004526:	4aad      	ldr	r2, [pc, #692]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004528:	54d1      	strb	r1, [r2, r3]
	buffer[offset+16] = ((unsigned char*)&dataGroup->vPv_conv)[3];
1000452a:	230f      	movs	r3, #15
1000452c:	18fb      	adds	r3, r7, r3
1000452e:	781b      	ldrb	r3, [r3, #0]
10004530:	3310      	adds	r3, #16
10004532:	687a      	ldr	r2, [r7, #4]
10004534:	3210      	adds	r2, #16
10004536:	3203      	adds	r2, #3
10004538:	7811      	ldrb	r1, [r2, #0]
1000453a:	4aa8      	ldr	r2, [pc, #672]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000453c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+17] = ((unsigned char*)&dataGroup->vBat_conv)[0];
1000453e:	230f      	movs	r3, #15
10004540:	18fb      	adds	r3, r7, r3
10004542:	781b      	ldrb	r3, [r3, #0]
10004544:	3311      	adds	r3, #17
10004546:	687a      	ldr	r2, [r7, #4]
10004548:	3214      	adds	r2, #20
1000454a:	7811      	ldrb	r1, [r2, #0]
1000454c:	4aa3      	ldr	r2, [pc, #652]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000454e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+18] = ((unsigned char*)&dataGroup->vBat_conv)[1];
10004550:	230f      	movs	r3, #15
10004552:	18fb      	adds	r3, r7, r3
10004554:	781b      	ldrb	r3, [r3, #0]
10004556:	3312      	adds	r3, #18
10004558:	687a      	ldr	r2, [r7, #4]
1000455a:	3214      	adds	r2, #20
1000455c:	3201      	adds	r2, #1
1000455e:	7811      	ldrb	r1, [r2, #0]
10004560:	4a9e      	ldr	r2, [pc, #632]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004562:	54d1      	strb	r1, [r2, r3]
	buffer[offset+19] = ((unsigned char*)&dataGroup->vBat_conv)[2];
10004564:	230f      	movs	r3, #15
10004566:	18fb      	adds	r3, r7, r3
10004568:	781b      	ldrb	r3, [r3, #0]
1000456a:	3313      	adds	r3, #19
1000456c:	687a      	ldr	r2, [r7, #4]
1000456e:	3214      	adds	r2, #20
10004570:	3202      	adds	r2, #2
10004572:	7811      	ldrb	r1, [r2, #0]
10004574:	4a99      	ldr	r2, [pc, #612]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004576:	54d1      	strb	r1, [r2, r3]
	buffer[offset+20] = ((unsigned char*)&dataGroup->vBat_conv)[3];
10004578:	230f      	movs	r3, #15
1000457a:	18fb      	adds	r3, r7, r3
1000457c:	781b      	ldrb	r3, [r3, #0]
1000457e:	3314      	adds	r3, #20
10004580:	687a      	ldr	r2, [r7, #4]
10004582:	3214      	adds	r2, #20
10004584:	3203      	adds	r2, #3
10004586:	7811      	ldrb	r1, [r2, #0]
10004588:	4a94      	ldr	r2, [pc, #592]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000458a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+21] = ((unsigned char*)&dataGroup->iDC_grid)[0];
1000458c:	230f      	movs	r3, #15
1000458e:	18fb      	adds	r3, r7, r3
10004590:	781b      	ldrb	r3, [r3, #0]
10004592:	3315      	adds	r3, #21
10004594:	687a      	ldr	r2, [r7, #4]
10004596:	3218      	adds	r2, #24
10004598:	7811      	ldrb	r1, [r2, #0]
1000459a:	4a90      	ldr	r2, [pc, #576]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000459c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+22] = ((unsigned char*)&dataGroup->iDC_grid)[1];
1000459e:	230f      	movs	r3, #15
100045a0:	18fb      	adds	r3, r7, r3
100045a2:	781b      	ldrb	r3, [r3, #0]
100045a4:	3316      	adds	r3, #22
100045a6:	687a      	ldr	r2, [r7, #4]
100045a8:	3218      	adds	r2, #24
100045aa:	3201      	adds	r2, #1
100045ac:	7811      	ldrb	r1, [r2, #0]
100045ae:	4a8b      	ldr	r2, [pc, #556]	; (100047dc <ESP32_Map_Data+0x3f8>)
100045b0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+23] = ((unsigned char*)&dataGroup->iDC_grid)[2];
100045b2:	230f      	movs	r3, #15
100045b4:	18fb      	adds	r3, r7, r3
100045b6:	781b      	ldrb	r3, [r3, #0]
100045b8:	3317      	adds	r3, #23
100045ba:	687a      	ldr	r2, [r7, #4]
100045bc:	3218      	adds	r2, #24
100045be:	3202      	adds	r2, #2
100045c0:	7811      	ldrb	r1, [r2, #0]
100045c2:	4a86      	ldr	r2, [pc, #536]	; (100047dc <ESP32_Map_Data+0x3f8>)
100045c4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+24] = ((unsigned char*)&dataGroup->iDC_grid)[3];
100045c6:	230f      	movs	r3, #15
100045c8:	18fb      	adds	r3, r7, r3
100045ca:	781b      	ldrb	r3, [r3, #0]
100045cc:	3318      	adds	r3, #24
100045ce:	687a      	ldr	r2, [r7, #4]
100045d0:	3218      	adds	r2, #24
100045d2:	3203      	adds	r2, #3
100045d4:	7811      	ldrb	r1, [r2, #0]
100045d6:	4a81      	ldr	r2, [pc, #516]	; (100047dc <ESP32_Map_Data+0x3f8>)
100045d8:	54d1      	strb	r1, [r2, r3]
	buffer[offset+25] = ((unsigned char*)&dataGroup->iAC_inv)[0];
100045da:	230f      	movs	r3, #15
100045dc:	18fb      	adds	r3, r7, r3
100045de:	781b      	ldrb	r3, [r3, #0]
100045e0:	3319      	adds	r3, #25
100045e2:	687a      	ldr	r2, [r7, #4]
100045e4:	321c      	adds	r2, #28
100045e6:	7811      	ldrb	r1, [r2, #0]
100045e8:	4a7c      	ldr	r2, [pc, #496]	; (100047dc <ESP32_Map_Data+0x3f8>)
100045ea:	54d1      	strb	r1, [r2, r3]
	buffer[offset+26] = ((unsigned char*)&dataGroup->iAC_inv)[1];
100045ec:	230f      	movs	r3, #15
100045ee:	18fb      	adds	r3, r7, r3
100045f0:	781b      	ldrb	r3, [r3, #0]
100045f2:	331a      	adds	r3, #26
100045f4:	687a      	ldr	r2, [r7, #4]
100045f6:	321c      	adds	r2, #28
100045f8:	3201      	adds	r2, #1
100045fa:	7811      	ldrb	r1, [r2, #0]
100045fc:	4a77      	ldr	r2, [pc, #476]	; (100047dc <ESP32_Map_Data+0x3f8>)
100045fe:	54d1      	strb	r1, [r2, r3]
	buffer[offset+27] = ((unsigned char*)&dataGroup->iAC_inv)[2];
10004600:	230f      	movs	r3, #15
10004602:	18fb      	adds	r3, r7, r3
10004604:	781b      	ldrb	r3, [r3, #0]
10004606:	331b      	adds	r3, #27
10004608:	687a      	ldr	r2, [r7, #4]
1000460a:	321c      	adds	r2, #28
1000460c:	3202      	adds	r2, #2
1000460e:	7811      	ldrb	r1, [r2, #0]
10004610:	4a72      	ldr	r2, [pc, #456]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004612:	54d1      	strb	r1, [r2, r3]
	buffer[offset+28] = ((unsigned char*)&dataGroup->iAC_inv)[3];
10004614:	230f      	movs	r3, #15
10004616:	18fb      	adds	r3, r7, r3
10004618:	781b      	ldrb	r3, [r3, #0]
1000461a:	331c      	adds	r3, #28
1000461c:	687a      	ldr	r2, [r7, #4]
1000461e:	321c      	adds	r2, #28
10004620:	3203      	adds	r2, #3
10004622:	7811      	ldrb	r1, [r2, #0]
10004624:	4a6d      	ldr	r2, [pc, #436]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004626:	54d1      	strb	r1, [r2, r3]
	buffer[offset+29] = ((unsigned char*)&dataGroup->iPv_conv)[0];
10004628:	230f      	movs	r3, #15
1000462a:	18fb      	adds	r3, r7, r3
1000462c:	781b      	ldrb	r3, [r3, #0]
1000462e:	331d      	adds	r3, #29
10004630:	687a      	ldr	r2, [r7, #4]
10004632:	3220      	adds	r2, #32
10004634:	7811      	ldrb	r1, [r2, #0]
10004636:	4a69      	ldr	r2, [pc, #420]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004638:	54d1      	strb	r1, [r2, r3]
	buffer[offset+30] = ((unsigned char*)&dataGroup->iPv_conv)[1];
1000463a:	230f      	movs	r3, #15
1000463c:	18fb      	adds	r3, r7, r3
1000463e:	781b      	ldrb	r3, [r3, #0]
10004640:	331e      	adds	r3, #30
10004642:	687a      	ldr	r2, [r7, #4]
10004644:	3220      	adds	r2, #32
10004646:	3201      	adds	r2, #1
10004648:	7811      	ldrb	r1, [r2, #0]
1000464a:	4a64      	ldr	r2, [pc, #400]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000464c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+31] = ((unsigned char*)&dataGroup->iPv_conv)[2];
1000464e:	230f      	movs	r3, #15
10004650:	18fb      	adds	r3, r7, r3
10004652:	781b      	ldrb	r3, [r3, #0]
10004654:	331f      	adds	r3, #31
10004656:	687a      	ldr	r2, [r7, #4]
10004658:	3220      	adds	r2, #32
1000465a:	3202      	adds	r2, #2
1000465c:	7811      	ldrb	r1, [r2, #0]
1000465e:	4a5f      	ldr	r2, [pc, #380]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004660:	54d1      	strb	r1, [r2, r3]
	buffer[offset+32] = ((unsigned char*)&dataGroup->iPv_conv)[3];
10004662:	230f      	movs	r3, #15
10004664:	18fb      	adds	r3, r7, r3
10004666:	781b      	ldrb	r3, [r3, #0]
10004668:	3320      	adds	r3, #32
1000466a:	687a      	ldr	r2, [r7, #4]
1000466c:	3220      	adds	r2, #32
1000466e:	3203      	adds	r2, #3
10004670:	7811      	ldrb	r1, [r2, #0]
10004672:	4a5a      	ldr	r2, [pc, #360]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004674:	54d1      	strb	r1, [r2, r3]
	buffer[offset+33] = ((unsigned char*)&dataGroup->iBat_conv)[0];
10004676:	230f      	movs	r3, #15
10004678:	18fb      	adds	r3, r7, r3
1000467a:	781b      	ldrb	r3, [r3, #0]
1000467c:	3321      	adds	r3, #33	; 0x21
1000467e:	687a      	ldr	r2, [r7, #4]
10004680:	3224      	adds	r2, #36	; 0x24
10004682:	7811      	ldrb	r1, [r2, #0]
10004684:	4a55      	ldr	r2, [pc, #340]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004686:	54d1      	strb	r1, [r2, r3]
	buffer[offset+34] = ((unsigned char*)&dataGroup->iBat_conv)[1];
10004688:	230f      	movs	r3, #15
1000468a:	18fb      	adds	r3, r7, r3
1000468c:	781b      	ldrb	r3, [r3, #0]
1000468e:	3322      	adds	r3, #34	; 0x22
10004690:	687a      	ldr	r2, [r7, #4]
10004692:	3224      	adds	r2, #36	; 0x24
10004694:	3201      	adds	r2, #1
10004696:	7811      	ldrb	r1, [r2, #0]
10004698:	4a50      	ldr	r2, [pc, #320]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000469a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+35] = ((unsigned char*)&dataGroup->iBat_conv)[2];
1000469c:	230f      	movs	r3, #15
1000469e:	18fb      	adds	r3, r7, r3
100046a0:	781b      	ldrb	r3, [r3, #0]
100046a2:	3323      	adds	r3, #35	; 0x23
100046a4:	687a      	ldr	r2, [r7, #4]
100046a6:	3224      	adds	r2, #36	; 0x24
100046a8:	3202      	adds	r2, #2
100046aa:	7811      	ldrb	r1, [r2, #0]
100046ac:	4a4b      	ldr	r2, [pc, #300]	; (100047dc <ESP32_Map_Data+0x3f8>)
100046ae:	54d1      	strb	r1, [r2, r3]
	buffer[offset+36] = ((unsigned char*)&dataGroup->iBat_conv)[3];
100046b0:	230f      	movs	r3, #15
100046b2:	18fb      	adds	r3, r7, r3
100046b4:	781b      	ldrb	r3, [r3, #0]
100046b6:	3324      	adds	r3, #36	; 0x24
100046b8:	687a      	ldr	r2, [r7, #4]
100046ba:	3224      	adds	r2, #36	; 0x24
100046bc:	3203      	adds	r2, #3
100046be:	7811      	ldrb	r1, [r2, #0]
100046c0:	4a46      	ldr	r2, [pc, #280]	; (100047dc <ESP32_Map_Data+0x3f8>)
100046c2:	54d1      	strb	r1, [r2, r3]
	buffer[offset+37] = (dataGroup->pDC_grid) >> 8;
100046c4:	230f      	movs	r3, #15
100046c6:	18fb      	adds	r3, r7, r3
100046c8:	781b      	ldrb	r3, [r3, #0]
100046ca:	3325      	adds	r3, #37	; 0x25
100046cc:	687a      	ldr	r2, [r7, #4]
100046ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
100046d0:	b212      	sxth	r2, r2
100046d2:	1212      	asrs	r2, r2, #8
100046d4:	b292      	uxth	r2, r2
100046d6:	b2d1      	uxtb	r1, r2
100046d8:	4a40      	ldr	r2, [pc, #256]	; (100047dc <ESP32_Map_Data+0x3f8>)
100046da:	54d1      	strb	r1, [r2, r3]
	buffer[offset+38] = (dataGroup->pDC_grid);
100046dc:	230f      	movs	r3, #15
100046de:	18fb      	adds	r3, r7, r3
100046e0:	781b      	ldrb	r3, [r3, #0]
100046e2:	3326      	adds	r3, #38	; 0x26
100046e4:	687a      	ldr	r2, [r7, #4]
100046e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
100046e8:	b2d1      	uxtb	r1, r2
100046ea:	4a3c      	ldr	r2, [pc, #240]	; (100047dc <ESP32_Map_Data+0x3f8>)
100046ec:	54d1      	strb	r1, [r2, r3]
	buffer[offset+39] = (dataGroup->pAC_inv) >> 8;
100046ee:	230f      	movs	r3, #15
100046f0:	18fb      	adds	r3, r7, r3
100046f2:	781b      	ldrb	r3, [r3, #0]
100046f4:	3327      	adds	r3, #39	; 0x27
100046f6:	687a      	ldr	r2, [r7, #4]
100046f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
100046fa:	0a12      	lsrs	r2, r2, #8
100046fc:	b292      	uxth	r2, r2
100046fe:	b2d1      	uxtb	r1, r2
10004700:	4a36      	ldr	r2, [pc, #216]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004702:	54d1      	strb	r1, [r2, r3]
	buffer[offset+40] = (dataGroup->pAC_inv);
10004704:	230f      	movs	r3, #15
10004706:	18fb      	adds	r3, r7, r3
10004708:	781b      	ldrb	r3, [r3, #0]
1000470a:	3328      	adds	r3, #40	; 0x28
1000470c:	687a      	ldr	r2, [r7, #4]
1000470e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
10004710:	b2d1      	uxtb	r1, r2
10004712:	4a32      	ldr	r2, [pc, #200]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004714:	54d1      	strb	r1, [r2, r3]
	buffer[offset+41] = (dataGroup->pPv_conv) >> 8;
10004716:	230f      	movs	r3, #15
10004718:	18fb      	adds	r3, r7, r3
1000471a:	781b      	ldrb	r3, [r3, #0]
1000471c:	3329      	adds	r3, #41	; 0x29
1000471e:	687a      	ldr	r2, [r7, #4]
10004720:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
10004722:	0a12      	lsrs	r2, r2, #8
10004724:	b292      	uxth	r2, r2
10004726:	b2d1      	uxtb	r1, r2
10004728:	4a2c      	ldr	r2, [pc, #176]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000472a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+42] = (dataGroup->pPv_conv);
1000472c:	230f      	movs	r3, #15
1000472e:	18fb      	adds	r3, r7, r3
10004730:	781b      	ldrb	r3, [r3, #0]
10004732:	332a      	adds	r3, #42	; 0x2a
10004734:	687a      	ldr	r2, [r7, #4]
10004736:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
10004738:	b2d1      	uxtb	r1, r2
1000473a:	4a28      	ldr	r2, [pc, #160]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000473c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+43] = (dataGroup->pBat_conv) >> 8;
1000473e:	230f      	movs	r3, #15
10004740:	18fb      	adds	r3, r7, r3
10004742:	781b      	ldrb	r3, [r3, #0]
10004744:	332b      	adds	r3, #43	; 0x2b
10004746:	687a      	ldr	r2, [r7, #4]
10004748:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
1000474a:	b212      	sxth	r2, r2
1000474c:	1212      	asrs	r2, r2, #8
1000474e:	b292      	uxth	r2, r2
10004750:	b2d1      	uxtb	r1, r2
10004752:	4a22      	ldr	r2, [pc, #136]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004754:	54d1      	strb	r1, [r2, r3]
	buffer[offset+44] = (dataGroup->pBat_conv);
10004756:	230f      	movs	r3, #15
10004758:	18fb      	adds	r3, r7, r3
1000475a:	781b      	ldrb	r3, [r3, #0]
1000475c:	332c      	adds	r3, #44	; 0x2c
1000475e:	687a      	ldr	r2, [r7, #4]
10004760:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
10004762:	b2d1      	uxtb	r1, r2
10004764:	4a1d      	ldr	r2, [pc, #116]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004766:	54d1      	strb	r1, [r2, r3]
	buffer[offset+45] = ((unsigned char*)&dataGroup->temp_sensor)[0];
10004768:	230f      	movs	r3, #15
1000476a:	18fb      	adds	r3, r7, r3
1000476c:	781b      	ldrb	r3, [r3, #0]
1000476e:	332d      	adds	r3, #45	; 0x2d
10004770:	687a      	ldr	r2, [r7, #4]
10004772:	3230      	adds	r2, #48	; 0x30
10004774:	7811      	ldrb	r1, [r2, #0]
10004776:	4a19      	ldr	r2, [pc, #100]	; (100047dc <ESP32_Map_Data+0x3f8>)
10004778:	54d1      	strb	r1, [r2, r3]
	buffer[offset+46] = ((unsigned char*)&dataGroup->temp_sensor)[1];
1000477a:	230f      	movs	r3, #15
1000477c:	18fb      	adds	r3, r7, r3
1000477e:	781b      	ldrb	r3, [r3, #0]
10004780:	332e      	adds	r3, #46	; 0x2e
10004782:	687a      	ldr	r2, [r7, #4]
10004784:	3230      	adds	r2, #48	; 0x30
10004786:	3201      	adds	r2, #1
10004788:	7811      	ldrb	r1, [r2, #0]
1000478a:	4a14      	ldr	r2, [pc, #80]	; (100047dc <ESP32_Map_Data+0x3f8>)
1000478c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+47] = ((unsigned char*)&dataGroup->temp_sensor)[2];
1000478e:	230f      	movs	r3, #15
10004790:	18fb      	adds	r3, r7, r3
10004792:	781b      	ldrb	r3, [r3, #0]
10004794:	332f      	adds	r3, #47	; 0x2f
10004796:	687a      	ldr	r2, [r7, #4]
10004798:	3230      	adds	r2, #48	; 0x30
1000479a:	3202      	adds	r2, #2
1000479c:	7811      	ldrb	r1, [r2, #0]
1000479e:	4a0f      	ldr	r2, [pc, #60]	; (100047dc <ESP32_Map_Data+0x3f8>)
100047a0:	54d1      	strb	r1, [r2, r3]
	buffer[offset+48] = ((unsigned char*)&dataGroup->temp_sensor)[3];
100047a2:	230f      	movs	r3, #15
100047a4:	18fb      	adds	r3, r7, r3
100047a6:	781b      	ldrb	r3, [r3, #0]
100047a8:	3330      	adds	r3, #48	; 0x30
100047aa:	687a      	ldr	r2, [r7, #4]
100047ac:	3230      	adds	r2, #48	; 0x30
100047ae:	3203      	adds	r2, #3
100047b0:	7811      	ldrb	r1, [r2, #0]
100047b2:	4a0a      	ldr	r2, [pc, #40]	; (100047dc <ESP32_Map_Data+0x3f8>)
100047b4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+49] = ((unsigned char*)&dataGroup->frequency)[0];
100047b6:	230f      	movs	r3, #15
100047b8:	18fb      	adds	r3, r7, r3
100047ba:	781b      	ldrb	r3, [r3, #0]
100047bc:	3331      	adds	r3, #49	; 0x31
100047be:	687a      	ldr	r2, [r7, #4]
100047c0:	3234      	adds	r2, #52	; 0x34
100047c2:	7811      	ldrb	r1, [r2, #0]
100047c4:	4a05      	ldr	r2, [pc, #20]	; (100047dc <ESP32_Map_Data+0x3f8>)
100047c6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+50] = ((unsigned char*)&dataGroup->frequency)[1];
100047c8:	230f      	movs	r3, #15
100047ca:	18fb      	adds	r3, r7, r3
100047cc:	781b      	ldrb	r3, [r3, #0]
100047ce:	3332      	adds	r3, #50	; 0x32
100047d0:	687a      	ldr	r2, [r7, #4]
100047d2:	3234      	adds	r2, #52	; 0x34
100047d4:	3201      	adds	r2, #1
100047d6:	7811      	ldrb	r1, [r2, #0]
100047d8:	e002      	b.n	100047e0 <ESP32_Map_Data+0x3fc>
100047da:	46c0      	nop			; (mov r8, r8)
100047dc:	200009d0 	.word	0x200009d0
100047e0:	4a6f      	ldr	r2, [pc, #444]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100047e2:	54d1      	strb	r1, [r2, r3]
	buffer[offset+51] = ((unsigned char*)&dataGroup->frequency)[2];
100047e4:	230f      	movs	r3, #15
100047e6:	18fb      	adds	r3, r7, r3
100047e8:	781b      	ldrb	r3, [r3, #0]
100047ea:	3333      	adds	r3, #51	; 0x33
100047ec:	687a      	ldr	r2, [r7, #4]
100047ee:	3234      	adds	r2, #52	; 0x34
100047f0:	3202      	adds	r2, #2
100047f2:	7811      	ldrb	r1, [r2, #0]
100047f4:	4a6a      	ldr	r2, [pc, #424]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100047f6:	54d1      	strb	r1, [r2, r3]
	buffer[offset+52] = ((unsigned char*)&dataGroup->frequency)[3];
100047f8:	230f      	movs	r3, #15
100047fa:	18fb      	adds	r3, r7, r3
100047fc:	781b      	ldrb	r3, [r3, #0]
100047fe:	3334      	adds	r3, #52	; 0x34
10004800:	687a      	ldr	r2, [r7, #4]
10004802:	3234      	adds	r2, #52	; 0x34
10004804:	3203      	adds	r2, #3
10004806:	7811      	ldrb	r1, [r2, #0]
10004808:	4a65      	ldr	r2, [pc, #404]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000480a:	54d1      	strb	r1, [r2, r3]
	/* bmc status */
	buffer[offset+53] = dataGroup->bmc_system;
1000480c:	230f      	movs	r3, #15
1000480e:	18fb      	adds	r3, r7, r3
10004810:	781b      	ldrb	r3, [r3, #0]
10004812:	3335      	adds	r3, #53	; 0x35
10004814:	687a      	ldr	r2, [r7, #4]
10004816:	2138      	movs	r1, #56	; 0x38
10004818:	5c51      	ldrb	r1, [r2, r1]
1000481a:	4a61      	ldr	r2, [pc, #388]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000481c:	54d1      	strb	r1, [r2, r3]

	/* battery information */
	buffer[offset+54] = dataGroup->soC;
1000481e:	230f      	movs	r3, #15
10004820:	18fb      	adds	r3, r7, r3
10004822:	781b      	ldrb	r3, [r3, #0]
10004824:	3336      	adds	r3, #54	; 0x36
10004826:	687a      	ldr	r2, [r7, #4]
10004828:	213a      	movs	r1, #58	; 0x3a
1000482a:	5c51      	ldrb	r1, [r2, r1]
1000482c:	4a5c      	ldr	r2, [pc, #368]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000482e:	54d1      	strb	r1, [r2, r3]
	buffer[offset+55] = (dataGroup->vBat_genix) >> 8;
10004830:	230f      	movs	r3, #15
10004832:	18fb      	adds	r3, r7, r3
10004834:	781b      	ldrb	r3, [r3, #0]
10004836:	3337      	adds	r3, #55	; 0x37
10004838:	687a      	ldr	r2, [r7, #4]
1000483a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
1000483c:	0a12      	lsrs	r2, r2, #8
1000483e:	b292      	uxth	r2, r2
10004840:	b2d1      	uxtb	r1, r2
10004842:	4a57      	ldr	r2, [pc, #348]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004844:	54d1      	strb	r1, [r2, r3]
	buffer[offset+56] = (dataGroup->vBat_genix);
10004846:	230f      	movs	r3, #15
10004848:	18fb      	adds	r3, r7, r3
1000484a:	781b      	ldrb	r3, [r3, #0]
1000484c:	3338      	adds	r3, #56	; 0x38
1000484e:	687a      	ldr	r2, [r7, #4]
10004850:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
10004852:	b2d1      	uxtb	r1, r2
10004854:	4a52      	ldr	r2, [pc, #328]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004856:	54d1      	strb	r1, [r2, r3]
	buffer[offset+57] = ((unsigned char*)&dataGroup->iBat_genix)[0];
10004858:	230f      	movs	r3, #15
1000485a:	18fb      	adds	r3, r7, r3
1000485c:	781b      	ldrb	r3, [r3, #0]
1000485e:	3339      	adds	r3, #57	; 0x39
10004860:	687a      	ldr	r2, [r7, #4]
10004862:	3240      	adds	r2, #64	; 0x40
10004864:	7811      	ldrb	r1, [r2, #0]
10004866:	4a4e      	ldr	r2, [pc, #312]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004868:	54d1      	strb	r1, [r2, r3]
	buffer[offset+58] = ((unsigned char*)&dataGroup->iBat_genix)[1];
1000486a:	230f      	movs	r3, #15
1000486c:	18fb      	adds	r3, r7, r3
1000486e:	781b      	ldrb	r3, [r3, #0]
10004870:	333a      	adds	r3, #58	; 0x3a
10004872:	687a      	ldr	r2, [r7, #4]
10004874:	3240      	adds	r2, #64	; 0x40
10004876:	3201      	adds	r2, #1
10004878:	7811      	ldrb	r1, [r2, #0]
1000487a:	4a49      	ldr	r2, [pc, #292]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000487c:	54d1      	strb	r1, [r2, r3]
	buffer[offset+59] = ((unsigned char*)&dataGroup->iBat_genix)[2];
1000487e:	230f      	movs	r3, #15
10004880:	18fb      	adds	r3, r7, r3
10004882:	781b      	ldrb	r3, [r3, #0]
10004884:	333b      	adds	r3, #59	; 0x3b
10004886:	687a      	ldr	r2, [r7, #4]
10004888:	3240      	adds	r2, #64	; 0x40
1000488a:	3202      	adds	r2, #2
1000488c:	7811      	ldrb	r1, [r2, #0]
1000488e:	4a44      	ldr	r2, [pc, #272]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004890:	54d1      	strb	r1, [r2, r3]
	buffer[offset+60] = ((unsigned char*)&dataGroup->iBat_genix)[3];
10004892:	230f      	movs	r3, #15
10004894:	18fb      	adds	r3, r7, r3
10004896:	781b      	ldrb	r3, [r3, #0]
10004898:	333c      	adds	r3, #60	; 0x3c
1000489a:	687a      	ldr	r2, [r7, #4]
1000489c:	3240      	adds	r2, #64	; 0x40
1000489e:	3203      	adds	r2, #3
100048a0:	7811      	ldrb	r1, [r2, #0]
100048a2:	4a3f      	ldr	r2, [pc, #252]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100048a4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+61] = dataGroup->temp_genix;
100048a6:	230f      	movs	r3, #15
100048a8:	18fb      	adds	r3, r7, r3
100048aa:	781b      	ldrb	r3, [r3, #0]
100048ac:	333d      	adds	r3, #61	; 0x3d
100048ae:	687a      	ldr	r2, [r7, #4]
100048b0:	2144      	movs	r1, #68	; 0x44
100048b2:	5c51      	ldrb	r1, [r2, r1]
100048b4:	4a3a      	ldr	r2, [pc, #232]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100048b6:	54d1      	strb	r1, [r2, r3]

	/* rtc information */
	buffer[offset+62] = dataGroup->year >> 8;
100048b8:	230f      	movs	r3, #15
100048ba:	18fb      	adds	r3, r7, r3
100048bc:	781b      	ldrb	r3, [r3, #0]
100048be:	333e      	adds	r3, #62	; 0x3e
100048c0:	687a      	ldr	r2, [r7, #4]
100048c2:	2146      	movs	r1, #70	; 0x46
100048c4:	5a52      	ldrh	r2, [r2, r1]
100048c6:	0a12      	lsrs	r2, r2, #8
100048c8:	b292      	uxth	r2, r2
100048ca:	b2d1      	uxtb	r1, r2
100048cc:	4a34      	ldr	r2, [pc, #208]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100048ce:	54d1      	strb	r1, [r2, r3]
	buffer[offset+63] = dataGroup->year;
100048d0:	230f      	movs	r3, #15
100048d2:	18fb      	adds	r3, r7, r3
100048d4:	781b      	ldrb	r3, [r3, #0]
100048d6:	333f      	adds	r3, #63	; 0x3f
100048d8:	687a      	ldr	r2, [r7, #4]
100048da:	2146      	movs	r1, #70	; 0x46
100048dc:	5a52      	ldrh	r2, [r2, r1]
100048de:	b2d1      	uxtb	r1, r2
100048e0:	4a2f      	ldr	r2, [pc, #188]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100048e2:	54d1      	strb	r1, [r2, r3]
	buffer[offset+64] = dataGroup->month;
100048e4:	230f      	movs	r3, #15
100048e6:	18fb      	adds	r3, r7, r3
100048e8:	781b      	ldrb	r3, [r3, #0]
100048ea:	3340      	adds	r3, #64	; 0x40
100048ec:	687a      	ldr	r2, [r7, #4]
100048ee:	2148      	movs	r1, #72	; 0x48
100048f0:	5c51      	ldrb	r1, [r2, r1]
100048f2:	4a2b      	ldr	r2, [pc, #172]	; (100049a0 <ESP32_Map_Data+0x5bc>)
100048f4:	54d1      	strb	r1, [r2, r3]
	buffer[offset+65] = dataGroup->date;
100048f6:	230f      	movs	r3, #15
100048f8:	18fb      	adds	r3, r7, r3
100048fa:	781b      	ldrb	r3, [r3, #0]
100048fc:	3341      	adds	r3, #65	; 0x41
100048fe:	687a      	ldr	r2, [r7, #4]
10004900:	2149      	movs	r1, #73	; 0x49
10004902:	5c51      	ldrb	r1, [r2, r1]
10004904:	4a26      	ldr	r2, [pc, #152]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004906:	54d1      	strb	r1, [r2, r3]
	buffer[offset+66] = dataGroup->hour;
10004908:	230f      	movs	r3, #15
1000490a:	18fb      	adds	r3, r7, r3
1000490c:	781b      	ldrb	r3, [r3, #0]
1000490e:	3342      	adds	r3, #66	; 0x42
10004910:	687a      	ldr	r2, [r7, #4]
10004912:	214a      	movs	r1, #74	; 0x4a
10004914:	5c51      	ldrb	r1, [r2, r1]
10004916:	4a22      	ldr	r2, [pc, #136]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004918:	54d1      	strb	r1, [r2, r3]
//	buffer[offset+67] = dataGroup->minute;
	buffer[offset+67] = dataGroup->bmc_operation_state;
1000491a:	230f      	movs	r3, #15
1000491c:	18fb      	adds	r3, r7, r3
1000491e:	781b      	ldrb	r3, [r3, #0]
10004920:	3343      	adds	r3, #67	; 0x43
10004922:	687a      	ldr	r2, [r7, #4]
10004924:	2139      	movs	r1, #57	; 0x39
10004926:	5c51      	ldrb	r1, [r2, r1]
10004928:	4a1d      	ldr	r2, [pc, #116]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000492a:	54d1      	strb	r1, [r2, r3]
	buffer[offset+68] = dataGroup->second;
1000492c:	230f      	movs	r3, #15
1000492e:	18fb      	adds	r3, r7, r3
10004930:	781b      	ldrb	r3, [r3, #0]
10004932:	3344      	adds	r3, #68	; 0x44
10004934:	687a      	ldr	r2, [r7, #4]
10004936:	214c      	movs	r1, #76	; 0x4c
10004938:	5c51      	ldrb	r1, [r2, r1]
1000493a:	4a19      	ldr	r2, [pc, #100]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000493c:	54d1      	strb	r1, [r2, r3]

	crc	= ESP32_CRC16_Operation((unsigned char *) &buffer[offset], buffer[2]);
1000493e:	230f      	movs	r3, #15
10004940:	18fb      	adds	r3, r7, r3
10004942:	781a      	ldrb	r2, [r3, #0]
10004944:	4b16      	ldr	r3, [pc, #88]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004946:	18d2      	adds	r2, r2, r3
10004948:	4b15      	ldr	r3, [pc, #84]	; (100049a0 <ESP32_Map_Data+0x5bc>)
1000494a:	789b      	ldrb	r3, [r3, #2]
1000494c:	210c      	movs	r1, #12
1000494e:	187c      	adds	r4, r7, r1
10004950:	1c10      	adds	r0, r2, #0
10004952:	1c19      	adds	r1, r3, #0
10004954:	f000 f87a 	bl	10004a4c <ESP32_CRC16_Operation>
10004958:	1c03      	adds	r3, r0, #0
1000495a:	8023      	strh	r3, [r4, #0]
	buffer[offset+69] = crc >> 8;
1000495c:	230f      	movs	r3, #15
1000495e:	18fb      	adds	r3, r7, r3
10004960:	781b      	ldrb	r3, [r3, #0]
10004962:	3345      	adds	r3, #69	; 0x45
10004964:	220c      	movs	r2, #12
10004966:	18ba      	adds	r2, r7, r2
10004968:	8812      	ldrh	r2, [r2, #0]
1000496a:	0a12      	lsrs	r2, r2, #8
1000496c:	b292      	uxth	r2, r2
1000496e:	b2d1      	uxtb	r1, r2
10004970:	4a0b      	ldr	r2, [pc, #44]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004972:	54d1      	strb	r1, [r2, r3]
	buffer[offset+70] = crc;
10004974:	230f      	movs	r3, #15
10004976:	18fb      	adds	r3, r7, r3
10004978:	781b      	ldrb	r3, [r3, #0]
1000497a:	3346      	adds	r3, #70	; 0x46
1000497c:	220c      	movs	r2, #12
1000497e:	18ba      	adds	r2, r7, r2
10004980:	8812      	ldrh	r2, [r2, #0]
10004982:	b2d1      	uxtb	r1, r2
10004984:	4a06      	ldr	r2, [pc, #24]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004986:	54d1      	strb	r1, [r2, r3]
	buffer[offset+71] = EoF;
10004988:	230f      	movs	r3, #15
1000498a:	18fb      	adds	r3, r7, r3
1000498c:	781b      	ldrb	r3, [r3, #0]
1000498e:	3347      	adds	r3, #71	; 0x47
10004990:	4a03      	ldr	r2, [pc, #12]	; (100049a0 <ESP32_Map_Data+0x5bc>)
10004992:	210a      	movs	r1, #10
10004994:	54d1      	strb	r1, [r2, r3]

	return buffer;
10004996:	4b02      	ldr	r3, [pc, #8]	; (100049a0 <ESP32_Map_Data+0x5bc>)
}
10004998:	1c18      	adds	r0, r3, #0
1000499a:	46bd      	mov	sp, r7
1000499c:	b005      	add	sp, #20
1000499e:	bd90      	pop	{r4, r7, pc}
100049a0:	200009d0 	.word	0x200009d0

100049a4 <ESP32_CRC16_table_init>:

void ESP32_CRC16_table_init(void)
{
100049a4:	b580      	push	{r7, lr}
100049a6:	b082      	sub	sp, #8
100049a8:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
100049aa:	1dbb      	adds	r3, r7, #6
100049ac:	2200      	movs	r2, #0
100049ae:	801a      	strh	r2, [r3, #0]
100049b0:	e03c      	b.n	10004a2c <ESP32_CRC16_table_init+0x88>

		crc = 0;
100049b2:	1cbb      	adds	r3, r7, #2
100049b4:	2200      	movs	r2, #0
100049b6:	801a      	strh	r2, [r3, #0]
		c   = i;
100049b8:	1c3b      	adds	r3, r7, #0
100049ba:	1dba      	adds	r2, r7, #6
100049bc:	8812      	ldrh	r2, [r2, #0]
100049be:	801a      	strh	r2, [r3, #0]

		for (j=0; j<8; j++) {
100049c0:	1d3b      	adds	r3, r7, #4
100049c2:	2200      	movs	r2, #0
100049c4:	801a      	strh	r2, [r3, #0]
100049c6:	e021      	b.n	10004a0c <ESP32_CRC16_table_init+0x68>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
100049c8:	1cba      	adds	r2, r7, #2
100049ca:	1c3b      	adds	r3, r7, #0
100049cc:	8812      	ldrh	r2, [r2, #0]
100049ce:	881b      	ldrh	r3, [r3, #0]
100049d0:	4053      	eors	r3, r2
100049d2:	b29b      	uxth	r3, r3
100049d4:	1c1a      	adds	r2, r3, #0
100049d6:	2301      	movs	r3, #1
100049d8:	4013      	ands	r3, r2
100049da:	d008      	beq.n	100049ee <ESP32_CRC16_table_init+0x4a>
100049dc:	1cbb      	adds	r3, r7, #2
100049de:	881b      	ldrh	r3, [r3, #0]
100049e0:	085b      	lsrs	r3, r3, #1
100049e2:	b29a      	uxth	r2, r3
100049e4:	1cbb      	adds	r3, r7, #2
100049e6:	4916      	ldr	r1, [pc, #88]	; (10004a40 <ESP32_CRC16_table_init+0x9c>)
100049e8:	404a      	eors	r2, r1
100049ea:	801a      	strh	r2, [r3, #0]
100049ec:	e004      	b.n	100049f8 <ESP32_CRC16_table_init+0x54>
			else                      crc =   crc >> 1;
100049ee:	1cbb      	adds	r3, r7, #2
100049f0:	1cba      	adds	r2, r7, #2
100049f2:	8812      	ldrh	r2, [r2, #0]
100049f4:	0852      	lsrs	r2, r2, #1
100049f6:	801a      	strh	r2, [r3, #0]

			c = c >> 1;
100049f8:	1c3b      	adds	r3, r7, #0
100049fa:	1c3a      	adds	r2, r7, #0
100049fc:	8812      	ldrh	r2, [r2, #0]
100049fe:	0852      	lsrs	r2, r2, #1
10004a00:	801a      	strh	r2, [r3, #0]
	for (i=0; i<256; i++) {

		crc = 0;
		c   = i;

		for (j=0; j<8; j++) {
10004a02:	1d3b      	adds	r3, r7, #4
10004a04:	881a      	ldrh	r2, [r3, #0]
10004a06:	1d3b      	adds	r3, r7, #4
10004a08:	3201      	adds	r2, #1
10004a0a:	801a      	strh	r2, [r3, #0]
10004a0c:	1d3b      	adds	r3, r7, #4
10004a0e:	881b      	ldrh	r3, [r3, #0]
10004a10:	2b07      	cmp	r3, #7
10004a12:	d9d9      	bls.n	100049c8 <ESP32_CRC16_table_init+0x24>
			else                      crc =   crc >> 1;

			c = c >> 1;
		}

		crc_tab16[i] = crc;
10004a14:	1dbb      	adds	r3, r7, #6
10004a16:	881a      	ldrh	r2, [r3, #0]
10004a18:	4b0a      	ldr	r3, [pc, #40]	; (10004a44 <ESP32_CRC16_table_init+0xa0>)
10004a1a:	0052      	lsls	r2, r2, #1
10004a1c:	1cb9      	adds	r1, r7, #2
10004a1e:	8809      	ldrh	r1, [r1, #0]
10004a20:	52d1      	strh	r1, [r2, r3]
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
10004a22:	1dbb      	adds	r3, r7, #6
10004a24:	881a      	ldrh	r2, [r3, #0]
10004a26:	1dbb      	adds	r3, r7, #6
10004a28:	3201      	adds	r2, #1
10004a2a:	801a      	strh	r2, [r3, #0]
10004a2c:	1dbb      	adds	r3, r7, #6
10004a2e:	881b      	ldrh	r3, [r3, #0]
10004a30:	2bff      	cmp	r3, #255	; 0xff
10004a32:	d9be      	bls.n	100049b2 <ESP32_CRC16_table_init+0xe>
		}

		crc_tab16[i] = crc;
	}

	crc_tab16_init = true;
10004a34:	4b04      	ldr	r3, [pc, #16]	; (10004a48 <ESP32_CRC16_table_init+0xa4>)
10004a36:	2201      	movs	r2, #1
10004a38:	701a      	strb	r2, [r3, #0]
}
10004a3a:	46bd      	mov	sp, r7
10004a3c:	b002      	add	sp, #8
10004a3e:	bd80      	pop	{r7, pc}
10004a40:	ffffa001 	.word	0xffffa001
10004a44:	200007d0 	.word	0x200007d0
10004a48:	200007cc 	.word	0x200007cc

10004a4c <ESP32_CRC16_Operation>:

uint16_t ESP32_CRC16_Operation(const unsigned char *input_str, unsigned char num_bytes)
{
10004a4c:	b580      	push	{r7, lr}
10004a4e:	b086      	sub	sp, #24
10004a50:	af00      	add	r7, sp, #0
10004a52:	6078      	str	r0, [r7, #4]
10004a54:	1c0a      	adds	r2, r1, #0
10004a56:	1cfb      	adds	r3, r7, #3
10004a58:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;
	uint16_t short_c;
	const unsigned char *ptr;
	unsigned char a;

	if (!crc_tab16_init) ESP32_CRC16_table_init();
10004a5a:	4b27      	ldr	r3, [pc, #156]	; (10004af8 <ESP32_CRC16_Operation+0xac>)
10004a5c:	781b      	ldrb	r3, [r3, #0]
10004a5e:	2201      	movs	r2, #1
10004a60:	4053      	eors	r3, r2
10004a62:	b2db      	uxtb	r3, r3
10004a64:	2b00      	cmp	r3, #0
10004a66:	d001      	beq.n	10004a6c <ESP32_CRC16_Operation+0x20>
10004a68:	f7ff ff9c 	bl	100049a4 <ESP32_CRC16_table_init>

	crc = CRC_START_16;
10004a6c:	2316      	movs	r3, #22
10004a6e:	18fb      	adds	r3, r7, r3
10004a70:	2200      	movs	r2, #0
10004a72:	801a      	strh	r2, [r3, #0]
	ptr = input_str;
10004a74:	687b      	ldr	r3, [r7, #4]
10004a76:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
10004a78:	693b      	ldr	r3, [r7, #16]
10004a7a:	2b00      	cmp	r3, #0
10004a7c:	d035      	beq.n	10004aea <ESP32_CRC16_Operation+0x9e>
10004a7e:	230f      	movs	r3, #15
10004a80:	18fb      	adds	r3, r7, r3
10004a82:	2200      	movs	r2, #0
10004a84:	701a      	strb	r2, [r3, #0]
10004a86:	e029      	b.n	10004adc <ESP32_CRC16_Operation+0x90>

		short_c = 0x00ff & (uint16_t) *ptr;
10004a88:	693b      	ldr	r3, [r7, #16]
10004a8a:	781a      	ldrb	r2, [r3, #0]
10004a8c:	230c      	movs	r3, #12
10004a8e:	18fb      	adds	r3, r7, r3
10004a90:	801a      	strh	r2, [r3, #0]
		tmp     =  crc       ^ short_c;
10004a92:	230a      	movs	r3, #10
10004a94:	18fb      	adds	r3, r7, r3
10004a96:	2216      	movs	r2, #22
10004a98:	18b9      	adds	r1, r7, r2
10004a9a:	220c      	movs	r2, #12
10004a9c:	18ba      	adds	r2, r7, r2
10004a9e:	8809      	ldrh	r1, [r1, #0]
10004aa0:	8812      	ldrh	r2, [r2, #0]
10004aa2:	404a      	eors	r2, r1
10004aa4:	801a      	strh	r2, [r3, #0]
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
10004aa6:	2316      	movs	r3, #22
10004aa8:	18fb      	adds	r3, r7, r3
10004aaa:	881b      	ldrh	r3, [r3, #0]
10004aac:	0a1b      	lsrs	r3, r3, #8
10004aae:	b299      	uxth	r1, r3
10004ab0:	230a      	movs	r3, #10
10004ab2:	18fb      	adds	r3, r7, r3
10004ab4:	881b      	ldrh	r3, [r3, #0]
10004ab6:	22ff      	movs	r2, #255	; 0xff
10004ab8:	401a      	ands	r2, r3
10004aba:	4b10      	ldr	r3, [pc, #64]	; (10004afc <ESP32_CRC16_Operation+0xb0>)
10004abc:	0052      	lsls	r2, r2, #1
10004abe:	5ad2      	ldrh	r2, [r2, r3]
10004ac0:	2316      	movs	r3, #22
10004ac2:	18fb      	adds	r3, r7, r3
10004ac4:	404a      	eors	r2, r1
10004ac6:	801a      	strh	r2, [r3, #0]

		ptr++;
10004ac8:	693b      	ldr	r3, [r7, #16]
10004aca:	3301      	adds	r3, #1
10004acc:	613b      	str	r3, [r7, #16]
	if (!crc_tab16_init) ESP32_CRC16_table_init();

	crc = CRC_START_16;
	ptr = input_str;

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
10004ace:	230f      	movs	r3, #15
10004ad0:	18fb      	adds	r3, r7, r3
10004ad2:	781a      	ldrb	r2, [r3, #0]
10004ad4:	230f      	movs	r3, #15
10004ad6:	18fb      	adds	r3, r7, r3
10004ad8:	3201      	adds	r2, #1
10004ada:	701a      	strb	r2, [r3, #0]
10004adc:	230f      	movs	r3, #15
10004ade:	18fa      	adds	r2, r7, r3
10004ae0:	1cfb      	adds	r3, r7, #3
10004ae2:	7812      	ldrb	r2, [r2, #0]
10004ae4:	781b      	ldrb	r3, [r3, #0]
10004ae6:	429a      	cmp	r2, r3
10004ae8:	d3ce      	bcc.n	10004a88 <ESP32_CRC16_Operation+0x3c>
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];

		ptr++;
	}

	return crc;
10004aea:	2316      	movs	r3, #22
10004aec:	18fb      	adds	r3, r7, r3
10004aee:	881b      	ldrh	r3, [r3, #0]
}
10004af0:	1c18      	adds	r0, r3, #0
10004af2:	46bd      	mov	sp, r7
10004af4:	b006      	add	sp, #24
10004af6:	bd80      	pop	{r7, pc}
10004af8:	200007cc 	.word	0x200007cc
10004afc:	200007d0 	.word	0x200007d0

10004b00 <ESP32_CRC8_maxim>:

uint8_t ESP32_CRC8_maxim(uint8_t *data, int length)
{
10004b00:	b580      	push	{r7, lr}
10004b02:	b086      	sub	sp, #24
10004b04:	af00      	add	r7, sp, #0
10004b06:	6078      	str	r0, [r7, #4]
10004b08:	6039      	str	r1, [r7, #0]
   uint8_t crc = 0x00;
10004b0a:	2317      	movs	r3, #23
10004b0c:	18fb      	adds	r3, r7, r3
10004b0e:	2200      	movs	r2, #0
10004b10:	701a      	strb	r2, [r3, #0]
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
10004b12:	2300      	movs	r3, #0
10004b14:	613b      	str	r3, [r7, #16]
10004b16:	e044      	b.n	10004ba2 <ESP32_CRC8_maxim+0xa2>
   {
      extract = *data;
10004b18:	2316      	movs	r3, #22
10004b1a:	18fb      	adds	r3, r7, r3
10004b1c:	687a      	ldr	r2, [r7, #4]
10004b1e:	7812      	ldrb	r2, [r2, #0]
10004b20:	701a      	strb	r2, [r3, #0]
      for (uint8_t tempI = 8; tempI; tempI--)
10004b22:	230f      	movs	r3, #15
10004b24:	18fb      	adds	r3, r7, r3
10004b26:	2208      	movs	r2, #8
10004b28:	701a      	strb	r2, [r3, #0]
10004b2a:	e02f      	b.n	10004b8c <ESP32_CRC8_maxim+0x8c>
      {
         sum = (crc ^ extract) & 0x01;
10004b2c:	2317      	movs	r3, #23
10004b2e:	18fa      	adds	r2, r7, r3
10004b30:	2316      	movs	r3, #22
10004b32:	18fb      	adds	r3, r7, r3
10004b34:	7812      	ldrb	r2, [r2, #0]
10004b36:	781b      	ldrb	r3, [r3, #0]
10004b38:	4053      	eors	r3, r2
10004b3a:	b2da      	uxtb	r2, r3
10004b3c:	230e      	movs	r3, #14
10004b3e:	18fb      	adds	r3, r7, r3
10004b40:	2101      	movs	r1, #1
10004b42:	400a      	ands	r2, r1
10004b44:	701a      	strb	r2, [r3, #0]
         crc >>= 1;
10004b46:	2317      	movs	r3, #23
10004b48:	18fb      	adds	r3, r7, r3
10004b4a:	2217      	movs	r2, #23
10004b4c:	18ba      	adds	r2, r7, r2
10004b4e:	7812      	ldrb	r2, [r2, #0]
10004b50:	0852      	lsrs	r2, r2, #1
10004b52:	701a      	strb	r2, [r3, #0]
         if (sum)
10004b54:	230e      	movs	r3, #14
10004b56:	18fb      	adds	r3, r7, r3
10004b58:	781b      	ldrb	r3, [r3, #0]
10004b5a:	2b00      	cmp	r3, #0
10004b5c:	d008      	beq.n	10004b70 <ESP32_CRC8_maxim+0x70>
            crc ^= 0x8C;
10004b5e:	2317      	movs	r3, #23
10004b60:	18fb      	adds	r3, r7, r3
10004b62:	2217      	movs	r2, #23
10004b64:	18ba      	adds	r2, r7, r2
10004b66:	7812      	ldrb	r2, [r2, #0]
10004b68:	2174      	movs	r1, #116	; 0x74
10004b6a:	4249      	negs	r1, r1
10004b6c:	404a      	eors	r2, r1
10004b6e:	701a      	strb	r2, [r3, #0]
         extract >>= 1;
10004b70:	2316      	movs	r3, #22
10004b72:	18fb      	adds	r3, r7, r3
10004b74:	2216      	movs	r2, #22
10004b76:	18ba      	adds	r2, r7, r2
10004b78:	7812      	ldrb	r2, [r2, #0]
10004b7a:	0852      	lsrs	r2, r2, #1
10004b7c:	701a      	strb	r2, [r3, #0]
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
   {
      extract = *data;
      for (uint8_t tempI = 8; tempI; tempI--)
10004b7e:	230f      	movs	r3, #15
10004b80:	18fb      	adds	r3, r7, r3
10004b82:	781a      	ldrb	r2, [r3, #0]
10004b84:	230f      	movs	r3, #15
10004b86:	18fb      	adds	r3, r7, r3
10004b88:	3a01      	subs	r2, #1
10004b8a:	701a      	strb	r2, [r3, #0]
10004b8c:	230f      	movs	r3, #15
10004b8e:	18fb      	adds	r3, r7, r3
10004b90:	781b      	ldrb	r3, [r3, #0]
10004b92:	2b00      	cmp	r3, #0
10004b94:	d1ca      	bne.n	10004b2c <ESP32_CRC8_maxim+0x2c>
         crc >>= 1;
         if (sum)
            crc ^= 0x8C;
         extract >>= 1;
      }
      data++;
10004b96:	687b      	ldr	r3, [r7, #4]
10004b98:	3301      	adds	r3, #1
10004b9a:	607b      	str	r3, [r7, #4]
uint8_t ESP32_CRC8_maxim(uint8_t *data, int length)
{
   uint8_t crc = 0x00;
   uint8_t extract;
   uint8_t sum;
   for(int i=0;i<length;i++)
10004b9c:	693b      	ldr	r3, [r7, #16]
10004b9e:	3301      	adds	r3, #1
10004ba0:	613b      	str	r3, [r7, #16]
10004ba2:	693a      	ldr	r2, [r7, #16]
10004ba4:	683b      	ldr	r3, [r7, #0]
10004ba6:	429a      	cmp	r2, r3
10004ba8:	dbb6      	blt.n	10004b18 <ESP32_CRC8_maxim+0x18>
            crc ^= 0x8C;
         extract >>= 1;
      }
      data++;
   }
   return crc;
10004baa:	2317      	movs	r3, #23
10004bac:	18fb      	adds	r3, r7, r3
10004bae:	781b      	ldrb	r3, [r3, #0]
}
10004bb0:	1c18      	adds	r0, r3, #0
10004bb2:	46bd      	mov	sp, r7
10004bb4:	b006      	add	sp, #24
10004bb6:	bd80      	pop	{r7, pc}

10004bb8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
10004bb8:	b580      	push	{r7, lr}
10004bba:	af00      	add	r7, sp, #0
  SystemCoreSetup();
10004bbc:	f000 f804 	bl	10004bc8 <SystemCoreSetup>
  SystemCoreClockSetup();
10004bc0:	f000 f80e 	bl	10004be0 <SystemCoreClockSetup>
}
10004bc4:	46bd      	mov	sp, r7
10004bc6:	bd80      	pop	{r7, pc}

10004bc8 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
10004bc8:	b580      	push	{r7, lr}
10004bca:	af00      	add	r7, sp, #0
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10004bcc:	4b03      	ldr	r3, [pc, #12]	; (10004bdc <SystemCoreSetup+0x14>)
10004bce:	4a03      	ldr	r2, [pc, #12]	; (10004bdc <SystemCoreSetup+0x14>)
10004bd0:	6e92      	ldr	r2, [r2, #104]	; 0x68
10004bd2:	2101      	movs	r1, #1
10004bd4:	438a      	bics	r2, r1
10004bd6:	669a      	str	r2, [r3, #104]	; 0x68
}
10004bd8:	46bd      	mov	sp, r7
10004bda:	bd80      	pop	{r7, pc}
10004bdc:	40010000 	.word	0x40010000

10004be0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
10004be0:	b580      	push	{r7, lr}
10004be2:	af00      	add	r7, sp, #0
  /* Clock setup done during SSW using the CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */

  /* disable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C0UL;
10004be4:	4b09      	ldr	r3, [pc, #36]	; (10004c0c <SystemCoreClockSetup+0x2c>)
10004be6:	22c0      	movs	r2, #192	; 0xc0
10004be8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->CLKCR1 |= SCU_CLK_CLKCR1_DCLKSEL_Msk;
  
#else
    
  /* DCLK source using DCO1 */
  SCU_CLK->CLKCR1 &= ~SCU_CLK_CLKCR1_DCLKSEL_Msk;
10004bea:	4b09      	ldr	r3, [pc, #36]	; (10004c10 <SystemCoreClockSetup+0x30>)
10004bec:	4a08      	ldr	r2, [pc, #32]	; (10004c10 <SystemCoreClockSetup+0x30>)
10004bee:	69d2      	ldr	r2, [r2, #28]
10004bf0:	4908      	ldr	r1, [pc, #32]	; (10004c14 <SystemCoreClockSetup+0x34>)
10004bf2:	400a      	ands	r2, r1
10004bf4:	61da      	str	r2, [r3, #28]
#endif  
#endif  

  /* Update PCLK selection mux. */
  /* Fractional divider enabled, MCLK frequency equal DCO1 frequency or external crystal frequency */
  SCU_CLK->CLKCR = (1023UL <<SCU_CLK_CLKCR_CNTADJ_Pos) |
10004bf6:	4b06      	ldr	r3, [pc, #24]	; (10004c10 <SystemCoreClockSetup+0x30>)
10004bf8:	4a07      	ldr	r2, [pc, #28]	; (10004c18 <SystemCoreClockSetup+0x38>)
10004bfa:	601a      	str	r2, [r3, #0]
                    (RTC_CLOCK_SRC << SCU_CLK_CLKCR_RTCCLKSEL_Pos) |
                    (PCLK_CLOCK_SRC << SCU_CLK_CLKCR_PCLKSEL_Pos) |
                    0x100U; /* IDIV = 1 */

  /* enable bit protection */
  SCU_GENERAL->PASSWD = 0x000000C3UL;
10004bfc:	4b03      	ldr	r3, [pc, #12]	; (10004c0c <SystemCoreClockSetup+0x2c>)
10004bfe:	22c3      	movs	r2, #195	; 0xc3
10004c00:	625a      	str	r2, [r3, #36]	; 0x24

  SystemCoreClockUpdate();
10004c02:	f000 f80b 	bl	10004c1c <SystemCoreClockUpdate>
}
10004c06:	46bd      	mov	sp, r7
10004c08:	bd80      	pop	{r7, pc}
10004c0a:	46c0      	nop			; (mov r8, r8)
10004c0c:	40010000 	.word	0x40010000
10004c10:	40010300 	.word	0x40010300
10004c14:	fffffdff 	.word	0xfffffdff
10004c18:	3ff10100 	.word	0x3ff10100

10004c1c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
10004c1c:	b580      	push	{r7, lr}
10004c1e:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10004c20:	4b2a      	ldr	r3, [pc, #168]	; (10004ccc <SystemCoreClockUpdate+0xb0>)
10004c22:	681a      	ldr	r2, [r3, #0]
10004c24:	23ff      	movs	r3, #255	; 0xff
10004c26:	021b      	lsls	r3, r3, #8
10004c28:	4013      	ands	r3, r2
10004c2a:	0a1a      	lsrs	r2, r3, #8
10004c2c:	4b28      	ldr	r3, [pc, #160]	; (10004cd0 <SystemCoreClockUpdate+0xb4>)
10004c2e:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
10004c30:	4b27      	ldr	r3, [pc, #156]	; (10004cd0 <SystemCoreClockUpdate+0xb4>)
10004c32:	681b      	ldr	r3, [r3, #0]
10004c34:	2b00      	cmp	r3, #0
10004c36:	d037      	beq.n	10004ca8 <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
10004c38:	4b24      	ldr	r3, [pc, #144]	; (10004ccc <SystemCoreClockUpdate+0xb0>)
10004c3a:	681b      	ldr	r3, [r3, #0]
10004c3c:	22ff      	movs	r2, #255	; 0xff
10004c3e:	401a      	ands	r2, r3
10004c40:	4b24      	ldr	r3, [pc, #144]	; (10004cd4 <SystemCoreClockUpdate+0xb8>)
10004c42:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
10004c44:	4b21      	ldr	r3, [pc, #132]	; (10004ccc <SystemCoreClockUpdate+0xb0>)
10004c46:	69db      	ldr	r3, [r3, #28]
10004c48:	2203      	movs	r2, #3
10004c4a:	4013      	ands	r3, r2
10004c4c:	021a      	lsls	r2, r3, #8
10004c4e:	4b21      	ldr	r3, [pc, #132]	; (10004cd4 <SystemCoreClockUpdate+0xb8>)
10004c50:	681b      	ldr	r3, [r3, #0]
10004c52:	431a      	orrs	r2, r3
10004c54:	4b1f      	ldr	r3, [pc, #124]	; (10004cd4 <SystemCoreClockUpdate+0xb8>)
10004c56:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10004c58:	4b1c      	ldr	r3, [pc, #112]	; (10004ccc <SystemCoreClockUpdate+0xb0>)
10004c5a:	69da      	ldr	r2, [r3, #28]
10004c5c:	2380      	movs	r3, #128	; 0x80
10004c5e:	009b      	lsls	r3, r3, #2
10004c60:	4013      	ands	r3, r2
10004c62:	d10e      	bne.n	10004c82 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10004c64:	4b1a      	ldr	r3, [pc, #104]	; (10004cd0 <SystemCoreClockUpdate+0xb4>)
10004c66:	681b      	ldr	r3, [r3, #0]
10004c68:	029a      	lsls	r2, r3, #10
10004c6a:	4b1a      	ldr	r3, [pc, #104]	; (10004cd4 <SystemCoreClockUpdate+0xb8>)
10004c6c:	681b      	ldr	r3, [r3, #0]
10004c6e:	18d3      	adds	r3, r2, r3
10004c70:	4819      	ldr	r0, [pc, #100]	; (10004cd8 <SystemCoreClockUpdate+0xbc>)
10004c72:	1c19      	adds	r1, r3, #0
10004c74:	f001 fd7e 	bl	10006774 <__aeabi_uidiv>
10004c78:	1c03      	adds	r3, r0, #0
10004c7a:	011a      	lsls	r2, r3, #4
10004c7c:	4b17      	ldr	r3, [pc, #92]	; (10004cdc <SystemCoreClockUpdate+0xc0>)
10004c7e:	601a      	str	r2, [r3, #0]
10004c80:	e021      	b.n	10004cc6 <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10004c82:	f000 f82f 	bl	10004ce4 <OSCHP_GetFrequency>
10004c86:	1c03      	adds	r3, r0, #0
10004c88:	0199      	lsls	r1, r3, #6
10004c8a:	4b11      	ldr	r3, [pc, #68]	; (10004cd0 <SystemCoreClockUpdate+0xb4>)
10004c8c:	681b      	ldr	r3, [r3, #0]
10004c8e:	029a      	lsls	r2, r3, #10
10004c90:	4b10      	ldr	r3, [pc, #64]	; (10004cd4 <SystemCoreClockUpdate+0xb8>)
10004c92:	681b      	ldr	r3, [r3, #0]
10004c94:	18d3      	adds	r3, r2, r3
10004c96:	1c08      	adds	r0, r1, #0
10004c98:	1c19      	adds	r1, r3, #0
10004c9a:	f001 fd6b 	bl	10006774 <__aeabi_uidiv>
10004c9e:	1c03      	adds	r3, r0, #0
10004ca0:	011a      	lsls	r2, r3, #4
10004ca2:	4b0e      	ldr	r3, [pc, #56]	; (10004cdc <SystemCoreClockUpdate+0xc0>)
10004ca4:	601a      	str	r2, [r3, #0]
10004ca6:	e00e      	b.n	10004cc6 <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
10004ca8:	4b08      	ldr	r3, [pc, #32]	; (10004ccc <SystemCoreClockUpdate+0xb0>)
10004caa:	69da      	ldr	r2, [r3, #28]
10004cac:	2380      	movs	r3, #128	; 0x80
10004cae:	009b      	lsls	r3, r3, #2
10004cb0:	4013      	ands	r3, r2
10004cb2:	d103      	bne.n	10004cbc <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10004cb4:	4b09      	ldr	r3, [pc, #36]	; (10004cdc <SystemCoreClockUpdate+0xc0>)
10004cb6:	4a0a      	ldr	r2, [pc, #40]	; (10004ce0 <SystemCoreClockUpdate+0xc4>)
10004cb8:	601a      	str	r2, [r3, #0]
10004cba:	e004      	b.n	10004cc6 <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10004cbc:	f000 f812 	bl	10004ce4 <OSCHP_GetFrequency>
10004cc0:	1c02      	adds	r2, r0, #0
10004cc2:	4b06      	ldr	r3, [pc, #24]	; (10004cdc <SystemCoreClockUpdate+0xc0>)
10004cc4:	601a      	str	r2, [r3, #0]
    }
  }
}
10004cc6:	46bd      	mov	sp, r7
10004cc8:	bd80      	pop	{r7, pc}
10004cca:	46c0      	nop			; (mov r8, r8)
10004ccc:	40010300 	.word	0x40010300
10004cd0:	20000a20 	.word	0x20000a20
10004cd4:	20000a24 	.word	0x20000a24
10004cd8:	b71b0000 	.word	0xb71b0000
10004cdc:	20003ffc 	.word	0x20003ffc
10004ce0:	02dc6c00 	.word	0x02dc6c00

10004ce4 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10004ce4:	b580      	push	{r7, lr}
10004ce6:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
10004ce8:	4b01      	ldr	r3, [pc, #4]	; (10004cf0 <OSCHP_GetFrequency+0xc>)
}
10004cea:	1c18      	adds	r0, r3, #0
10004cec:	46bd      	mov	sp, r7
10004cee:	bd80      	pop	{r7, pc}
10004cf0:	01312d00 	.word	0x01312d00

10004cf4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10004cf4:	b590      	push	{r4, r7, lr}
10004cf6:	b085      	sub	sp, #20
10004cf8:	af00      	add	r7, sp, #0
10004cfa:	60f8      	str	r0, [r7, #12]
10004cfc:	607a      	str	r2, [r7, #4]
10004cfe:	230b      	movs	r3, #11
10004d00:	18fb      	adds	r3, r7, r3
10004d02:	1c0a      	adds	r2, r1, #0
10004d04:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10004d06:	230b      	movs	r3, #11
10004d08:	18fb      	adds	r3, r7, r3
10004d0a:	781b      	ldrb	r3, [r3, #0]
10004d0c:	089b      	lsrs	r3, r3, #2
10004d0e:	b2db      	uxtb	r3, r3
10004d10:	1c18      	adds	r0, r3, #0
10004d12:	230b      	movs	r3, #11
10004d14:	18fb      	adds	r3, r7, r3
10004d16:	781b      	ldrb	r3, [r3, #0]
10004d18:	089b      	lsrs	r3, r3, #2
10004d1a:	b2db      	uxtb	r3, r3
10004d1c:	1c1a      	adds	r2, r3, #0
10004d1e:	68fb      	ldr	r3, [r7, #12]
10004d20:	3204      	adds	r2, #4
10004d22:	0092      	lsls	r2, r2, #2
10004d24:	58d3      	ldr	r3, [r2, r3]
10004d26:	220b      	movs	r2, #11
10004d28:	18ba      	adds	r2, r7, r2
10004d2a:	7812      	ldrb	r2, [r2, #0]
10004d2c:	2103      	movs	r1, #3
10004d2e:	400a      	ands	r2, r1
10004d30:	00d2      	lsls	r2, r2, #3
10004d32:	1c11      	adds	r1, r2, #0
10004d34:	22fc      	movs	r2, #252	; 0xfc
10004d36:	408a      	lsls	r2, r1
10004d38:	43d2      	mvns	r2, r2
10004d3a:	401a      	ands	r2, r3
10004d3c:	1c11      	adds	r1, r2, #0
10004d3e:	68fb      	ldr	r3, [r7, #12]
10004d40:	1d02      	adds	r2, r0, #4
10004d42:	0092      	lsls	r2, r2, #2
10004d44:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10004d46:	68fb      	ldr	r3, [r7, #12]
10004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10004d4a:	220b      	movs	r2, #11
10004d4c:	18ba      	adds	r2, r7, r2
10004d4e:	7812      	ldrb	r2, [r2, #0]
10004d50:	0052      	lsls	r2, r2, #1
10004d52:	1c11      	adds	r1, r2, #0
10004d54:	2203      	movs	r2, #3
10004d56:	408a      	lsls	r2, r1
10004d58:	43d2      	mvns	r2, r2
10004d5a:	401a      	ands	r2, r3
10004d5c:	68fb      	ldr	r3, [r7, #12]
10004d5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10004d60:	230b      	movs	r3, #11
10004d62:	18fb      	adds	r3, r7, r3
10004d64:	781b      	ldrb	r3, [r3, #0]
10004d66:	08db      	lsrs	r3, r3, #3
10004d68:	b2db      	uxtb	r3, r3
10004d6a:	1c18      	adds	r0, r3, #0
10004d6c:	230b      	movs	r3, #11
10004d6e:	18fb      	adds	r3, r7, r3
10004d70:	781b      	ldrb	r3, [r3, #0]
10004d72:	08db      	lsrs	r3, r3, #3
10004d74:	b2db      	uxtb	r3, r3
10004d76:	1c1a      	adds	r2, r3, #0
10004d78:	68fb      	ldr	r3, [r7, #12]
10004d7a:	3210      	adds	r2, #16
10004d7c:	0092      	lsls	r2, r2, #2
10004d7e:	58d3      	ldr	r3, [r2, r3]
10004d80:	220b      	movs	r2, #11
10004d82:	18ba      	adds	r2, r7, r2
10004d84:	7812      	ldrb	r2, [r2, #0]
10004d86:	2107      	movs	r1, #7
10004d88:	400a      	ands	r2, r1
10004d8a:	0092      	lsls	r2, r2, #2
10004d8c:	1c11      	adds	r1, r2, #0
10004d8e:	2204      	movs	r2, #4
10004d90:	408a      	lsls	r2, r1
10004d92:	43d2      	mvns	r2, r2
10004d94:	401a      	ands	r2, r3
10004d96:	1c11      	adds	r1, r2, #0
10004d98:	68fb      	ldr	r3, [r7, #12]
10004d9a:	1c02      	adds	r2, r0, #0
10004d9c:	3210      	adds	r2, #16
10004d9e:	0092      	lsls	r2, r2, #2
10004da0:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10004da2:	230b      	movs	r3, #11
10004da4:	18fb      	adds	r3, r7, r3
10004da6:	781b      	ldrb	r3, [r3, #0]
10004da8:	08db      	lsrs	r3, r3, #3
10004daa:	b2db      	uxtb	r3, r3
10004dac:	1c18      	adds	r0, r3, #0
10004dae:	230b      	movs	r3, #11
10004db0:	18fb      	adds	r3, r7, r3
10004db2:	781b      	ldrb	r3, [r3, #0]
10004db4:	08db      	lsrs	r3, r3, #3
10004db6:	b2db      	uxtb	r3, r3
10004db8:	1c1a      	adds	r2, r3, #0
10004dba:	68fb      	ldr	r3, [r7, #12]
10004dbc:	3210      	adds	r2, #16
10004dbe:	0092      	lsls	r2, r2, #2
10004dc0:	58d2      	ldr	r2, [r2, r3]
10004dc2:	687b      	ldr	r3, [r7, #4]
10004dc4:	785b      	ldrb	r3, [r3, #1]
10004dc6:	1c1c      	adds	r4, r3, #0
10004dc8:	230b      	movs	r3, #11
10004dca:	18fb      	adds	r3, r7, r3
10004dcc:	781b      	ldrb	r3, [r3, #0]
10004dce:	2107      	movs	r1, #7
10004dd0:	400b      	ands	r3, r1
10004dd2:	009b      	lsls	r3, r3, #2
10004dd4:	409c      	lsls	r4, r3
10004dd6:	1c23      	adds	r3, r4, #0
10004dd8:	431a      	orrs	r2, r3
10004dda:	1c11      	adds	r1, r2, #0
10004ddc:	68fb      	ldr	r3, [r7, #12]
10004dde:	1c02      	adds	r2, r0, #0
10004de0:	3210      	adds	r2, #16
10004de2:	0092      	lsls	r2, r2, #2
10004de4:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10004de6:	68fb      	ldr	r3, [r7, #12]
10004de8:	4a20      	ldr	r2, [pc, #128]	; (10004e6c <XMC_GPIO_Init+0x178>)
10004dea:	4293      	cmp	r3, r2
10004dec:	d10b      	bne.n	10004e06 <XMC_GPIO_Init+0x112>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10004dee:	68fb      	ldr	r3, [r7, #12]
10004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10004df2:	220b      	movs	r2, #11
10004df4:	18ba      	adds	r2, r7, r2
10004df6:	7812      	ldrb	r2, [r2, #0]
10004df8:	2101      	movs	r1, #1
10004dfa:	4091      	lsls	r1, r2
10004dfc:	1c0a      	adds	r2, r1, #0
10004dfe:	43d2      	mvns	r2, r2
10004e00:	401a      	ands	r2, r3
10004e02:	68fb      	ldr	r3, [r7, #12]
10004e04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
10004e06:	687b      	ldr	r3, [r7, #4]
10004e08:	781b      	ldrb	r3, [r3, #0]
10004e0a:	b2db      	uxtb	r3, r3
10004e0c:	b25b      	sxtb	r3, r3
10004e0e:	2b00      	cmp	r3, #0
10004e10:	da07      	bge.n	10004e22 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10004e12:	687b      	ldr	r3, [r7, #4]
10004e14:	685a      	ldr	r2, [r3, #4]
10004e16:	230b      	movs	r3, #11
10004e18:	18fb      	adds	r3, r7, r3
10004e1a:	781b      	ldrb	r3, [r3, #0]
10004e1c:	409a      	lsls	r2, r3
10004e1e:	68fb      	ldr	r3, [r7, #12]
10004e20:	605a      	str	r2, [r3, #4]
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10004e22:	230b      	movs	r3, #11
10004e24:	18fb      	adds	r3, r7, r3
10004e26:	781b      	ldrb	r3, [r3, #0]
10004e28:	089b      	lsrs	r3, r3, #2
10004e2a:	b2db      	uxtb	r3, r3
10004e2c:	1c18      	adds	r0, r3, #0
10004e2e:	230b      	movs	r3, #11
10004e30:	18fb      	adds	r3, r7, r3
10004e32:	781b      	ldrb	r3, [r3, #0]
10004e34:	089b      	lsrs	r3, r3, #2
10004e36:	b2db      	uxtb	r3, r3
10004e38:	1c1a      	adds	r2, r3, #0
10004e3a:	68fb      	ldr	r3, [r7, #12]
10004e3c:	3204      	adds	r2, #4
10004e3e:	0092      	lsls	r2, r2, #2
10004e40:	58d2      	ldr	r2, [r2, r3]
10004e42:	687b      	ldr	r3, [r7, #4]
10004e44:	781b      	ldrb	r3, [r3, #0]
10004e46:	1c1c      	adds	r4, r3, #0
10004e48:	230b      	movs	r3, #11
10004e4a:	18fb      	adds	r3, r7, r3
10004e4c:	781b      	ldrb	r3, [r3, #0]
10004e4e:	2103      	movs	r1, #3
10004e50:	400b      	ands	r3, r1
10004e52:	00db      	lsls	r3, r3, #3
10004e54:	409c      	lsls	r4, r3
10004e56:	1c23      	adds	r3, r4, #0
10004e58:	431a      	orrs	r2, r3
10004e5a:	1c11      	adds	r1, r2, #0
10004e5c:	68fb      	ldr	r3, [r7, #12]
10004e5e:	1d02      	adds	r2, r0, #4
10004e60:	0092      	lsls	r2, r2, #2
10004e62:	50d1      	str	r1, [r2, r3]
}
10004e64:	46bd      	mov	sp, r7
10004e66:	b005      	add	sp, #20
10004e68:	bd90      	pop	{r4, r7, pc}
10004e6a:	46c0      	nop			; (mov r8, r8)
10004e6c:	40040200 	.word	0x40040200

10004e70 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10004e70:	b580      	push	{r7, lr}
10004e72:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10004e74:	4b02      	ldr	r3, [pc, #8]	; (10004e80 <XMC_SCU_LockProtectedBits+0x10>)
10004e76:	22c3      	movs	r2, #195	; 0xc3
10004e78:	625a      	str	r2, [r3, #36]	; 0x24
}
10004e7a:	46bd      	mov	sp, r7
10004e7c:	bd80      	pop	{r7, pc}
10004e7e:	46c0      	nop			; (mov r8, r8)
10004e80:	40010000 	.word	0x40010000

10004e84 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10004e84:	b580      	push	{r7, lr}
10004e86:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10004e88:	4b05      	ldr	r3, [pc, #20]	; (10004ea0 <XMC_SCU_UnlockProtectedBits+0x1c>)
10004e8a:	22c0      	movs	r2, #192	; 0xc0
10004e8c:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10004e8e:	46c0      	nop			; (mov r8, r8)
10004e90:	4b03      	ldr	r3, [pc, #12]	; (10004ea0 <XMC_SCU_UnlockProtectedBits+0x1c>)
10004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e94:	2204      	movs	r2, #4
10004e96:	4013      	ands	r3, r2
10004e98:	d1fa      	bne.n	10004e90 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
10004e9a:	46bd      	mov	sp, r7
10004e9c:	bd80      	pop	{r7, pc}
10004e9e:	46c0      	nop			; (mov r8, r8)
10004ea0:	40010000 	.word	0x40010000

10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10004ea4:	b580      	push	{r7, lr}
10004ea6:	b082      	sub	sp, #8
10004ea8:	af00      	add	r7, sp, #0
10004eaa:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10004eac:	f7ff ffea 	bl	10004e84 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10004eb0:	4b08      	ldr	r3, [pc, #32]	; (10004ed4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004eb2:	4a08      	ldr	r2, [pc, #32]	; (10004ed4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004eb4:	6911      	ldr	r1, [r2, #16]
10004eb6:	687a      	ldr	r2, [r7, #4]
10004eb8:	430a      	orrs	r2, r1
10004eba:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10004ebc:	46c0      	nop			; (mov r8, r8)
10004ebe:	4b05      	ldr	r3, [pc, #20]	; (10004ed4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
10004ec0:	681a      	ldr	r2, [r3, #0]
10004ec2:	2380      	movs	r3, #128	; 0x80
10004ec4:	05db      	lsls	r3, r3, #23
10004ec6:	4013      	ands	r3, r2
10004ec8:	d1f9      	bne.n	10004ebe <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
10004eca:	f7ff ffd1 	bl	10004e70 <XMC_SCU_LockProtectedBits>
}
10004ece:	46bd      	mov	sp, r7
10004ed0:	b002      	add	sp, #8
10004ed2:	bd80      	pop	{r7, pc}
10004ed4:	40010300 	.word	0x40010300

10004ed8 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10004ed8:	b580      	push	{r7, lr}
10004eda:	b082      	sub	sp, #8
10004edc:	af00      	add	r7, sp, #0
10004ede:	6078      	str	r0, [r7, #4]
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
10004ee0:	4b05      	ldr	r3, [pc, #20]	; (10004ef8 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x20>)
10004ee2:	689b      	ldr	r3, [r3, #8]
10004ee4:	687a      	ldr	r2, [r7, #4]
10004ee6:	4013      	ands	r3, r2
10004ee8:	1e5a      	subs	r2, r3, #1
10004eea:	4193      	sbcs	r3, r2
10004eec:	b2db      	uxtb	r3, r3
}
10004eee:	1c18      	adds	r0, r3, #0
10004ef0:	46bd      	mov	sp, r7
10004ef2:	b002      	add	sp, #8
10004ef4:	bd80      	pop	{r7, pc}
10004ef6:	46c0      	nop			; (mov r8, r8)
10004ef8:	40010300 	.word	0x40010300

10004efc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
10004efc:	b580      	push	{r7, lr}
10004efe:	af00      	add	r7, sp, #0
  return (SystemCoreClock);
10004f00:	4b02      	ldr	r3, [pc, #8]	; (10004f0c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
10004f02:	681b      	ldr	r3, [r3, #0]
}
10004f04:	1c18      	adds	r0, r3, #0
10004f06:	46bd      	mov	sp, r7
10004f08:	bd80      	pop	{r7, pc}
10004f0a:	46c0      	nop			; (mov r8, r8)
10004f0c:	20003ffc 	.word	0x20003ffc

10004f10 <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
10004f10:	b580      	push	{r7, lr}
10004f12:	b082      	sub	sp, #8
10004f14:	af00      	add	r7, sp, #0
10004f16:	1c02      	adds	r2, r0, #0
10004f18:	1dfb      	adds	r3, r7, #7
10004f1a:	701a      	strb	r2, [r3, #0]
10004f1c:	1d3b      	adds	r3, r7, #4
10004f1e:	1c0a      	adds	r2, r1, #0
10004f20:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
10004f22:	1d3b      	adds	r3, r7, #4
10004f24:	1d3a      	adds	r2, r7, #4
10004f26:	8812      	ldrh	r2, [r2, #0]
10004f28:	2103      	movs	r1, #3
10004f2a:	400a      	ands	r2, r1
10004f2c:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
10004f2e:	1dfb      	adds	r3, r7, #7
10004f30:	781b      	ldrb	r3, [r3, #0]
10004f32:	2b0f      	cmp	r3, #15
10004f34:	d813      	bhi.n	10004f5e <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004f36:	4b18      	ldr	r3, [pc, #96]	; (10004f98 <XMC_SCU_SetInterruptControl+0x88>)
10004f38:	4a17      	ldr	r2, [pc, #92]	; (10004f98 <XMC_SCU_SetInterruptControl+0x88>)
10004f3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10004f3c:	1df9      	adds	r1, r7, #7
10004f3e:	7809      	ldrb	r1, [r1, #0]
10004f40:	0049      	lsls	r1, r1, #1
10004f42:	1c08      	adds	r0, r1, #0
10004f44:	2103      	movs	r1, #3
10004f46:	4081      	lsls	r1, r0
10004f48:	43c9      	mvns	r1, r1
10004f4a:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10004f4c:	1d39      	adds	r1, r7, #4
10004f4e:	8809      	ldrh	r1, [r1, #0]
10004f50:	1df8      	adds	r0, r7, #7
10004f52:	7800      	ldrb	r0, [r0, #0]
10004f54:	0040      	lsls	r0, r0, #1
10004f56:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004f58:	430a      	orrs	r2, r1
10004f5a:	66da      	str	r2, [r3, #108]	; 0x6c
10004f5c:	e018      	b.n	10004f90 <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
10004f5e:	1dfb      	adds	r3, r7, #7
10004f60:	1dfa      	adds	r2, r7, #7
10004f62:	7812      	ldrb	r2, [r2, #0]
10004f64:	210f      	movs	r1, #15
10004f66:	400a      	ands	r2, r1
10004f68:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004f6a:	4b0b      	ldr	r3, [pc, #44]	; (10004f98 <XMC_SCU_SetInterruptControl+0x88>)
10004f6c:	4a0a      	ldr	r2, [pc, #40]	; (10004f98 <XMC_SCU_SetInterruptControl+0x88>)
10004f6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
10004f70:	1df9      	adds	r1, r7, #7
10004f72:	7809      	ldrb	r1, [r1, #0]
10004f74:	0049      	lsls	r1, r1, #1
10004f76:	1c08      	adds	r0, r1, #0
10004f78:	2103      	movs	r1, #3
10004f7a:	4081      	lsls	r1, r0
10004f7c:	43c9      	mvns	r1, r1
10004f7e:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
10004f80:	1d39      	adds	r1, r7, #4
10004f82:	8809      	ldrh	r1, [r1, #0]
10004f84:	1df8      	adds	r0, r7, #7
10004f86:	7800      	ldrb	r0, [r0, #0]
10004f88:	0040      	lsls	r0, r0, #1
10004f8a:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10004f8c:	430a      	orrs	r2, r1
10004f8e:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
10004f90:	46bd      	mov	sp, r7
10004f92:	b002      	add	sp, #8
10004f94:	bd80      	pop	{r7, pc}
10004f96:	46c0      	nop			; (mov r8, r8)
10004f98:	40010000 	.word	0x40010000

10004f9c <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
10004f9c:	b580      	push	{r7, lr}
10004f9e:	b082      	sub	sp, #8
10004fa0:	af00      	add	r7, sp, #0
10004fa2:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
10004fa4:	687a      	ldr	r2, [r7, #4]
10004fa6:	23e2      	movs	r3, #226	; 0xe2
10004fa8:	005b      	lsls	r3, r3, #1
10004faa:	58d2      	ldr	r2, [r2, r3]
10004fac:	23c0      	movs	r3, #192	; 0xc0
10004fae:	009b      	lsls	r3, r3, #2
10004fb0:	4013      	ands	r3, r2
10004fb2:	425a      	negs	r2, r3
10004fb4:	4153      	adcs	r3, r2
10004fb6:	b2db      	uxtb	r3, r3
}
10004fb8:	1c18      	adds	r0, r3, #0
10004fba:	46bd      	mov	sp, r7
10004fbc:	b002      	add	sp, #8
10004fbe:	bd80      	pop	{r7, pc}

10004fc0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
10004fc0:	b590      	push	{r4, r7, lr}
10004fc2:	b083      	sub	sp, #12
10004fc4:	af00      	add	r7, sp, #0
10004fc6:	6078      	str	r0, [r7, #4]
10004fc8:	1c0c      	adds	r4, r1, #0
10004fca:	1c10      	adds	r0, r2, #0
10004fcc:	1c19      	adds	r1, r3, #0
10004fce:	1cfb      	adds	r3, r7, #3
10004fd0:	1c22      	adds	r2, r4, #0
10004fd2:	701a      	strb	r2, [r3, #0]
10004fd4:	1cbb      	adds	r3, r7, #2
10004fd6:	1c02      	adds	r2, r0, #0
10004fd8:	701a      	strb	r2, [r3, #0]
10004fda:	1c7b      	adds	r3, r7, #1
10004fdc:	1c0a      	adds	r2, r1, #0
10004fde:	701a      	strb	r2, [r3, #0]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004fe0:	1cfb      	adds	r3, r7, #3
10004fe2:	781a      	ldrb	r2, [r3, #0]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10004fe4:	1cbb      	adds	r3, r7, #2
10004fe6:	781b      	ldrb	r3, [r3, #0]
10004fe8:	0419      	lsls	r1, r3, #16
10004fea:	23ff      	movs	r3, #255	; 0xff
10004fec:	041b      	lsls	r3, r3, #16
10004fee:	400b      	ands	r3, r1
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004ff0:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
10004ff2:	1c7b      	adds	r3, r7, #1
10004ff4:	781b      	ldrb	r3, [r3, #0]
10004ff6:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
10004ff8:	431a      	orrs	r2, r3
10004ffa:	1c11      	adds	r1, r2, #0
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
10004ffc:	687a      	ldr	r2, [r7, #4]
10004ffe:	23e2      	movs	r3, #226	; 0xe2
10005000:	005b      	lsls	r3, r3, #1
10005002:	50d1      	str	r1, [r2, r3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
10005004:	46bd      	mov	sp, r7
10005006:	b003      	add	sp, #12
10005008:	bd90      	pop	{r4, r7, pc}
1000500a:	46c0      	nop			; (mov r8, r8)

1000500c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
1000500c:	b580      	push	{r7, lr}
1000500e:	b082      	sub	sp, #8
10005010:	af00      	add	r7, sp, #0
10005012:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
10005014:	687b      	ldr	r3, [r7, #4]
10005016:	681b      	ldr	r3, [r3, #0]
10005018:	2240      	movs	r2, #64	; 0x40
1000501a:	431a      	orrs	r2, r3
1000501c:	687b      	ldr	r3, [r7, #4]
1000501e:	601a      	str	r2, [r3, #0]
}
10005020:	46bd      	mov	sp, r7
10005022:	b002      	add	sp, #8
10005024:	bd80      	pop	{r7, pc}
10005026:	46c0      	nop			; (mov r8, r8)

10005028 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
10005028:	b580      	push	{r7, lr}
1000502a:	b082      	sub	sp, #8
1000502c:	af00      	add	r7, sp, #0
1000502e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
10005030:	687b      	ldr	r3, [r7, #4]
10005032:	681b      	ldr	r3, [r3, #0]
10005034:	2240      	movs	r2, #64	; 0x40
10005036:	4393      	bics	r3, r2
10005038:	1c1a      	adds	r2, r3, #0
1000503a:	687b      	ldr	r3, [r7, #4]
1000503c:	601a      	str	r2, [r3, #0]
}
1000503e:	46bd      	mov	sp, r7
10005040:	b002      	add	sp, #8
10005042:	bd80      	pop	{r7, pc}

10005044 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
10005044:	b580      	push	{r7, lr}
10005046:	b082      	sub	sp, #8
10005048:	af00      	add	r7, sp, #0
1000504a:	6078      	str	r0, [r7, #4]
1000504c:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
1000504e:	687a      	ldr	r2, [r7, #4]
10005050:	683b      	ldr	r3, [r7, #0]
10005052:	4293      	cmp	r3, r2
10005054:	d200      	bcs.n	10005058 <max+0x14>
10005056:	1c13      	adds	r3, r2, #0
}
10005058:	1c18      	adds	r0, r3, #0
1000505a:	46bd      	mov	sp, r7
1000505c:	b002      	add	sp, #8
1000505e:	bd80      	pop	{r7, pc}

10005060 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
10005060:	b580      	push	{r7, lr}
10005062:	b082      	sub	sp, #8
10005064:	af00      	add	r7, sp, #0
10005066:	6078      	str	r0, [r7, #4]
10005068:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
1000506a:	687a      	ldr	r2, [r7, #4]
1000506c:	683b      	ldr	r3, [r7, #0]
1000506e:	4293      	cmp	r3, r2
10005070:	d900      	bls.n	10005074 <min+0x14>
10005072:	1c13      	adds	r3, r2, #0
}
10005074:	1c18      	adds	r0, r3, #0
10005076:	46bd      	mov	sp, r7
10005078:	b002      	add	sp, #8
1000507a:	bd80      	pop	{r7, pc}

1000507c <XMC_CAN_NODE_NominalBitTimeConfigure>:
}

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
1000507c:	b580      	push	{r7, lr}
1000507e:	b090      	sub	sp, #64	; 0x40
10005080:	af00      	add	r7, sp, #0
10005082:	6078      	str	r0, [r7, #4]
10005084:	6039      	str	r1, [r7, #0]
  uint32_t temp_brp = 12U ;
10005086:	230c      	movs	r3, #12
10005088:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t temp_tseg1 = 12U;
1000508a:	230c      	movs	r3, #12
1000508c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t best_brp = 0U;
1000508e:	2300      	movs	r3, #0
10005090:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t best_tseg1 = 1U;
10005092:	2301      	movs	r3, #1
10005094:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t best_tseg2 = 0U;
10005096:	2300      	movs	r3, #0
10005098:	617b      	str	r3, [r7, #20]
  uint32_t best_tbaud = 0U;
1000509a:	2300      	movs	r3, #0
1000509c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t best_error = 10000U;
1000509e:	4b6a      	ldr	r3, [pc, #424]	; (10005248 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
100050a0:	62bb      	str	r3, [r7, #40]	; 0x28
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
100050a2:	2301      	movs	r3, #1
100050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
100050a6:	e06a      	b.n	1000517e <XMC_CAN_NODE_NominalBitTimeConfigure+0x102>
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
100050a8:	683b      	ldr	r3, [r7, #0]
100050aa:	681a      	ldr	r2, [r3, #0]
100050ac:	1c13      	adds	r3, r2, #0
100050ae:	009b      	lsls	r3, r3, #2
100050b0:	189b      	adds	r3, r3, r2
100050b2:	005b      	lsls	r3, r3, #1
100050b4:	1c18      	adds	r0, r3, #0
100050b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
100050b8:	f001 fb5c 	bl	10006774 <__aeabi_uidiv>
100050bc:	1c03      	adds	r3, r0, #0
100050be:	613b      	str	r3, [r7, #16]
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
100050c0:	683b      	ldr	r3, [r7, #0]
100050c2:	685b      	ldr	r3, [r3, #4]
100050c4:	6938      	ldr	r0, [r7, #16]
100050c6:	1c19      	adds	r1, r3, #0
100050c8:	f001 fb54 	bl	10006774 <__aeabi_uidiv>
100050cc:	1c03      	adds	r3, r0, #0
100050ce:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
100050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050d2:	1c18      	adds	r0, r3, #0
100050d4:	210a      	movs	r1, #10
100050d6:	f001 fbd3 	bl	10006880 <__aeabi_uidivmod>
100050da:	1e0b      	subs	r3, r1, #0
100050dc:	2b05      	cmp	r3, #5
100050de:	d90a      	bls.n	100050f6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7a>
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
100050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050e2:	1c18      	adds	r0, r3, #0
100050e4:	210a      	movs	r1, #10
100050e6:	f001 fb45 	bl	10006774 <__aeabi_uidiv>
100050ea:	1c03      	adds	r3, r0, #0
100050ec:	627b      	str	r3, [r7, #36]	; 0x24
  temp_tbaud++;
100050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050f0:	3301      	adds	r3, #1
100050f2:	627b      	str	r3, [r7, #36]	; 0x24
100050f4:	e006      	b.n	10005104 <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
  }
  else
  {
  temp_tbaud = (uint32_t)(temp_tbaud / 10U);
100050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100050f8:	1c18      	adds	r0, r3, #0
100050fa:	210a      	movs	r1, #10
100050fc:	f001 fb3a 	bl	10006774 <__aeabi_uidiv>
10005100:	1c03      	adds	r3, r0, #0
10005102:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_tbaud > 0U)
10005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005106:	2b00      	cmp	r3, #0
10005108:	d00b      	beq.n	10005122 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa6>
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
1000510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000510c:	1c13      	adds	r3, r2, #0
1000510e:	009b      	lsls	r3, r3, #2
10005110:	189b      	adds	r3, r3, r2
10005112:	005b      	lsls	r3, r3, #1
10005114:	6938      	ldr	r0, [r7, #16]
10005116:	1c19      	adds	r1, r3, #0
10005118:	f001 fb2c 	bl	10006774 <__aeabi_uidiv>
1000511c:	1c03      	adds	r3, r0, #0
1000511e:	623b      	str	r3, [r7, #32]
10005120:	e008      	b.n	10005134 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb8>
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
10005122:	693b      	ldr	r3, [r7, #16]
10005124:	1c18      	adds	r0, r3, #0
10005126:	210a      	movs	r1, #10
10005128:	f001 fb24 	bl	10006774 <__aeabi_uidiv>
1000512c:	1c03      	adds	r3, r0, #0
1000512e:	623b      	str	r3, [r7, #32]
  temp_tbaud = 1;
10005130:	2301      	movs	r3, #1
10005132:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(temp_baudrate >= can_bit_time->baudrate)
10005134:	683b      	ldr	r3, [r7, #0]
10005136:	685a      	ldr	r2, [r3, #4]
10005138:	6a3b      	ldr	r3, [r7, #32]
1000513a:	429a      	cmp	r2, r3
1000513c:	d805      	bhi.n	1000514a <XMC_CAN_NODE_NominalBitTimeConfigure+0xce>
  {
  error = temp_baudrate - can_bit_time->baudrate;
1000513e:	683b      	ldr	r3, [r7, #0]
10005140:	685b      	ldr	r3, [r3, #4]
10005142:	6a3a      	ldr	r2, [r7, #32]
10005144:	1ad3      	subs	r3, r2, r3
10005146:	61fb      	str	r3, [r7, #28]
10005148:	e004      	b.n	10005154 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd8>
  }
  else
  {
  error = can_bit_time->baudrate - temp_baudrate;
1000514a:	683b      	ldr	r3, [r7, #0]
1000514c:	685a      	ldr	r2, [r3, #4]
1000514e:	6a3b      	ldr	r3, [r7, #32]
10005150:	1ad3      	subs	r3, r2, r3
10005152:	61fb      	str	r3, [r7, #28]
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
10005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005156:	2b14      	cmp	r3, #20
10005158:	d80e      	bhi.n	10005178 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
1000515a:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000515c:	69fb      	ldr	r3, [r7, #28]
1000515e:	429a      	cmp	r2, r3
10005160:	d90a      	bls.n	10005178 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
  {
    best_brp = temp_brp;
10005162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10005164:	637b      	str	r3, [r7, #52]	; 0x34
    best_tbaud = temp_tbaud;
10005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005168:	62fb      	str	r3, [r7, #44]	; 0x2c
    best_error = (error);
1000516a:	69fb      	ldr	r3, [r7, #28]
1000516c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (error < 1000U)
1000516e:	69fb      	ldr	r3, [r7, #28]
10005170:	4a36      	ldr	r2, [pc, #216]	; (1000524c <XMC_CAN_NODE_NominalBitTimeConfigure+0x1d0>)
10005172:	4293      	cmp	r3, r2
10005174:	d800      	bhi.n	10005178 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
    {
      break;
10005176:	e005      	b.n	10005184 <XMC_CAN_NODE_NominalBitTimeConfigure+0x108>
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
10005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
1000517a:	3301      	adds	r3, #1
1000517c:	63fb      	str	r3, [r7, #60]	; 0x3c
1000517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
10005180:	2b40      	cmp	r3, #64	; 0x40
10005182:	d991      	bls.n	100050a8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2c>
      break;
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
10005184:	4b30      	ldr	r3, [pc, #192]	; (10005248 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
10005186:	62bb      	str	r3, [r7, #40]	; 0x28

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
10005188:	2340      	movs	r3, #64	; 0x40
1000518a:	63bb      	str	r3, [r7, #56]	; 0x38
1000518c:	e02e      	b.n	100051ec <XMC_CAN_NODE_NominalBitTimeConfigure+0x170>
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
1000518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10005190:	3301      	adds	r3, #1
10005192:	4a2d      	ldr	r2, [pc, #180]	; (10005248 <XMC_CAN_NODE_NominalBitTimeConfigure+0x1cc>)
10005194:	4353      	muls	r3, r2
10005196:	1c18      	adds	r0, r3, #0
10005198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000519a:	f001 faeb 	bl	10006774 <__aeabi_uidiv>
1000519e:	1c03      	adds	r3, r0, #0
100051a0:	60fb      	str	r3, [r7, #12]
  uint32_t error;
  if (tempSamplePoint >= can_bit_time->sample_point)
100051a2:	683b      	ldr	r3, [r7, #0]
100051a4:	891b      	ldrh	r3, [r3, #8]
100051a6:	1e1a      	subs	r2, r3, #0
100051a8:	68fb      	ldr	r3, [r7, #12]
100051aa:	429a      	cmp	r2, r3
100051ac:	d806      	bhi.n	100051bc <XMC_CAN_NODE_NominalBitTimeConfigure+0x140>
  {
      error = tempSamplePoint  - can_bit_time->sample_point;
100051ae:	683b      	ldr	r3, [r7, #0]
100051b0:	891b      	ldrh	r3, [r3, #8]
100051b2:	1c1a      	adds	r2, r3, #0
100051b4:	68fb      	ldr	r3, [r7, #12]
100051b6:	1a9b      	subs	r3, r3, r2
100051b8:	61bb      	str	r3, [r7, #24]
100051ba:	e005      	b.n	100051c8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x14c>
  }
  else
  {
    error = can_bit_time->sample_point  - tempSamplePoint;
100051bc:	683b      	ldr	r3, [r7, #0]
100051be:	891b      	ldrh	r3, [r3, #8]
100051c0:	1c1a      	adds	r2, r3, #0
100051c2:	68fb      	ldr	r3, [r7, #12]
100051c4:	1ad3      	subs	r3, r2, r3
100051c6:	61bb      	str	r3, [r7, #24]
  }
    if (best_error > error)
100051c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
100051ca:	69bb      	ldr	r3, [r7, #24]
100051cc:	429a      	cmp	r2, r3
100051ce:	d903      	bls.n	100051d8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x15c>
    {
      best_tseg1 = temp_tseg1;
100051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100051d2:	633b      	str	r3, [r7, #48]	; 0x30
      best_error = error;
100051d4:	69bb      	ldr	r3, [r7, #24]
100051d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
100051d8:	683b      	ldr	r3, [r7, #0]
100051da:	891b      	ldrh	r3, [r3, #8]
100051dc:	1e1a      	subs	r2, r3, #0
100051de:	68fb      	ldr	r3, [r7, #12]
100051e0:	429a      	cmp	r2, r3
100051e2:	d900      	bls.n	100051e6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16a>
    {
      break;
100051e4:	e005      	b.n	100051f2 <XMC_CAN_NODE_NominalBitTimeConfigure+0x176>
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
100051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100051e8:	3b01      	subs	r3, #1
100051ea:	63bb      	str	r3, [r7, #56]	; 0x38
100051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100051ee:	2b02      	cmp	r3, #2
100051f0:	d8cd      	bhi.n	1000518e <XMC_CAN_NODE_NominalBitTimeConfigure+0x112>
    {
      break;
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
100051f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100051f6:	1ad3      	subs	r3, r2, r3
100051f8:	3b01      	subs	r3, #1
100051fa:	617b      	str	r3, [r7, #20]

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
100051fc:	687b      	ldr	r3, [r7, #4]
100051fe:	1c18      	adds	r0, r3, #0
10005200:	f7ff ff04 	bl	1000500c <XMC_CAN_NODE_EnableConfigurationChange>
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10005204:	697b      	ldr	r3, [r7, #20]
10005206:	3b01      	subs	r3, #1
10005208:	031a      	lsls	r2, r3, #12
1000520a:	23e0      	movs	r3, #224	; 0xe0
1000520c:	01db      	lsls	r3, r3, #7
1000520e:	401a      	ands	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
10005210:	683b      	ldr	r3, [r7, #0]
10005212:	895b      	ldrh	r3, [r3, #10]
10005214:	3b01      	subs	r3, #1
10005216:	019b      	lsls	r3, r3, #6
10005218:	21ff      	movs	r1, #255	; 0xff
1000521a:	400b      	ands	r3, r1

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
1000521c:	431a      	orrs	r2, r3
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
1000521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005220:	3b01      	subs	r3, #1
10005222:	0219      	lsls	r1, r3, #8
10005224:	23f0      	movs	r3, #240	; 0xf0
10005226:	011b      	lsls	r3, r3, #4
10005228:	400b      	ands	r3, r1
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
1000522a:	431a      	orrs	r2, r3
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
1000522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000522e:	3b01      	subs	r3, #1
10005230:	213f      	movs	r1, #63	; 0x3f
10005232:	400b      	ands	r3, r1
10005234:	431a      	orrs	r2, r3

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
10005236:	687b      	ldr	r3, [r7, #4]
10005238:	611a      	str	r2, [r3, #16]
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
1000523a:	687b      	ldr	r3, [r7, #4]
1000523c:	1c18      	adds	r0, r3, #0
1000523e:	f7ff fef3 	bl	10005028 <XMC_CAN_NODE_DisableConfigurationChange>
}
10005242:	46bd      	mov	sp, r7
10005244:	b010      	add	sp, #64	; 0x40
10005246:	bd80      	pop	{r7, pc}
10005248:	00002710 	.word	0x00002710
1000524c:	000003e7 	.word	0x000003e7

10005250 <XMC_CAN_AllocateMOtoNodeList>:
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
10005250:	b590      	push	{r4, r7, lr}
10005252:	b083      	sub	sp, #12
10005254:	af00      	add	r7, sp, #0
10005256:	6078      	str	r0, [r7, #4]
10005258:	1c08      	adds	r0, r1, #0
1000525a:	1c11      	adds	r1, r2, #0
1000525c:	1cfb      	adds	r3, r7, #3
1000525e:	1c02      	adds	r2, r0, #0
10005260:	701a      	strb	r2, [r3, #0]
10005262:	1cbb      	adds	r3, r7, #2
10005264:	1c0a      	adds	r2, r1, #0
10005266:	701a      	strb	r2, [r3, #0]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
10005268:	46c0      	nop			; (mov r8, r8)
1000526a:	687b      	ldr	r3, [r7, #4]
1000526c:	1c18      	adds	r0, r3, #0
1000526e:	f7ff fe95 	bl	10004f9c <XMC_CAN_IsPanelControlReady>
10005272:	1c03      	adds	r3, r0, #0
10005274:	1c1a      	adds	r2, r3, #0
10005276:	2301      	movs	r3, #1
10005278:	4053      	eors	r3, r2
1000527a:	b2db      	uxtb	r3, r3
1000527c:	2b00      	cmp	r3, #0
1000527e:	d1f4      	bne.n	1000526a <XMC_CAN_AllocateMOtoNodeList+0x1a>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
10005280:	1cfb      	adds	r3, r7, #3
10005282:	781b      	ldrb	r3, [r3, #0]
10005284:	3301      	adds	r3, #1
10005286:	b2dc      	uxtb	r4, r3
10005288:	687a      	ldr	r2, [r7, #4]
1000528a:	1cbb      	adds	r3, r7, #2
1000528c:	781b      	ldrb	r3, [r3, #0]
1000528e:	1c10      	adds	r0, r2, #0
10005290:	2102      	movs	r1, #2
10005292:	1c1a      	adds	r2, r3, #0
10005294:	1c23      	adds	r3, r4, #0
10005296:	f7ff fe93 	bl	10004fc0 <XMC_CAN_PanelControl>
}
1000529a:	46bd      	mov	sp, r7
1000529c:	b003      	add	sp, #12
1000529e:	bd90      	pop	{r4, r7, pc}

100052a0 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
100052a0:	b580      	push	{r7, lr}
100052a2:	b082      	sub	sp, #8
100052a4:	af00      	add	r7, sp, #0
100052a6:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
100052a8:	2380      	movs	r3, #128	; 0x80
100052aa:	039b      	lsls	r3, r3, #14
100052ac:	1c18      	adds	r0, r3, #0
100052ae:	f7ff fdf9 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
100052b2:	687b      	ldr	r3, [r7, #4]
100052b4:	681b      	ldr	r3, [r3, #0]
100052b6:	2201      	movs	r2, #1
100052b8:	4393      	bics	r3, r2
100052ba:	1c1a      	adds	r2, r3, #0
100052bc:	687b      	ldr	r3, [r7, #4]
100052be:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
100052c0:	46c0      	nop			; (mov r8, r8)
100052c2:	687b      	ldr	r3, [r7, #4]
100052c4:	681b      	ldr	r3, [r3, #0]
100052c6:	2202      	movs	r2, #2
100052c8:	4013      	ands	r3, r2
100052ca:	d1fa      	bne.n	100052c2 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
100052cc:	46bd      	mov	sp, r7
100052ce:	b002      	add	sp, #8
100052d0:	bd80      	pop	{r7, pc}
100052d2:	46c0      	nop			; (mov r8, r8)

100052d4 <XMC_CAN_Init>:

#if defined(MULTICAN_PLUS)
void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
100052d4:	b580      	push	{r7, lr}
100052d6:	b08e      	sub	sp, #56	; 0x38
100052d8:	af00      	add	r7, sp, #0
100052da:	60f8      	str	r0, [r7, #12]
100052dc:	607a      	str	r2, [r7, #4]
100052de:	230b      	movs	r3, #11
100052e0:	18fb      	adds	r3, r7, r3
100052e2:	1c0a      	adds	r2, r1, #0
100052e4:	701a      	strb	r2, [r3, #0]
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency;
  /*Enabling the module*/
  XMC_CAN_Enable(obj);
100052e6:	68fb      	ldr	r3, [r7, #12]
100052e8:	1c18      	adds	r0, r3, #0
100052ea:	f7ff ffd9 	bl	100052a0 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
100052ee:	68fa      	ldr	r2, [r7, #12]
100052f0:	230b      	movs	r3, #11
100052f2:	18fb      	adds	r3, r7, r3
100052f4:	781b      	ldrb	r3, [r3, #0]
100052f6:	1c10      	adds	r0, r2, #0
100052f8:	1c19      	adds	r1, r3, #0
100052fa:	f000 f87b 	bl	100053f4 <XMC_CAN_SetBaudrateClockSource>

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
100052fe:	68fb      	ldr	r3, [r7, #12]
10005300:	1c18      	adds	r0, r3, #0
10005302:	f000 f8a1 	bl	10005448 <XMC_CAN_GetBaudrateClockFrequency>
10005306:	1c03      	adds	r3, r0, #0
10005308:	637b      	str	r3, [r7, #52]	; 0x34

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
1000530a:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000530c:	6879      	ldr	r1, [r7, #4]
1000530e:	f001 fa31 	bl	10006774 <__aeabi_uidiv>
10005312:	1c03      	adds	r3, r0, #0
10005314:	1c1a      	adds	r2, r3, #0
10005316:	2380      	movs	r3, #128	; 0x80
10005318:	00db      	lsls	r3, r3, #3
1000531a:	1a9b      	subs	r3, r3, r2
1000531c:	2000      	movs	r0, #0
1000531e:	1c19      	adds	r1, r3, #0
10005320:	f7ff fe90 	bl	10005044 <max>
10005324:	1c02      	adds	r2, r0, #0
10005326:	4b31      	ldr	r3, [pc, #196]	; (100053ec <XMC_CAN_Init+0x118>)
10005328:	1c10      	adds	r0, r2, #0
1000532a:	1c19      	adds	r1, r3, #0
1000532c:	f7ff fe98 	bl	10005060 <min>
10005330:	1c03      	adds	r3, r0, #0
10005332:	633b      	str	r3, [r7, #48]	; 0x30
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
10005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005336:	2280      	movs	r2, #128	; 0x80
10005338:	00d2      	lsls	r2, r2, #3
1000533a:	1ad3      	subs	r3, r2, r3
1000533c:	6b78      	ldr	r0, [r7, #52]	; 0x34
1000533e:	1c19      	adds	r1, r3, #0
10005340:	f001 fa18 	bl	10006774 <__aeabi_uidiv>
10005344:	1c03      	adds	r3, r0, #0
10005346:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
10005348:	687b      	ldr	r3, [r7, #4]
1000534a:	099b      	lsrs	r3, r3, #6
1000534c:	62bb      	str	r3, [r7, #40]	; 0x28
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
1000534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10005350:	099b      	lsrs	r3, r3, #6
10005352:	627b      	str	r3, [r7, #36]	; 0x24

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
10005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005356:	029b      	lsls	r3, r3, #10
10005358:	1c18      	adds	r0, r3, #0
1000535a:	6a79      	ldr	r1, [r7, #36]	; 0x24
1000535c:	f001 fa0a 	bl	10006774 <__aeabi_uidiv>
10005360:	1c03      	adds	r3, r0, #0
10005362:	1c1a      	adds	r2, r3, #0
10005364:	4b21      	ldr	r3, [pc, #132]	; (100053ec <XMC_CAN_Init+0x118>)
10005366:	1c10      	adds	r0, r2, #0
10005368:	1c19      	adds	r1, r3, #0
1000536a:	f7ff fe79 	bl	10005060 <min>
1000536e:	1c03      	adds	r3, r0, #0
10005370:	623b      	str	r3, [r7, #32]
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
10005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005374:	6a3a      	ldr	r2, [r7, #32]
10005376:	4353      	muls	r3, r2
10005378:	0a9b      	lsrs	r3, r3, #10
1000537a:	61fb      	str	r3, [r7, #28]
  freq_f = freq_f << 6;
1000537c:	69fb      	ldr	r3, [r7, #28]
1000537e:	019b      	lsls	r3, r3, #6
10005380:	61fb      	str	r3, [r7, #28]

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
10005382:	687a      	ldr	r2, [r7, #4]
10005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005386:	1ad1      	subs	r1, r2, r3
10005388:	687a      	ldr	r2, [r7, #4]
1000538a:	69fb      	ldr	r3, [r7, #28]
1000538c:	1ad0      	subs	r0, r2, r3
1000538e:	231b      	movs	r3, #27
10005390:	18fa      	adds	r2, r7, r3
10005392:	2300      	movs	r3, #0
10005394:	4288      	cmp	r0, r1
10005396:	415b      	adcs	r3, r3
10005398:	7013      	strb	r3, [r2, #0]

  step   = (normal_divider != 0U) ? step_n : step_f;
1000539a:	231b      	movs	r3, #27
1000539c:	18fb      	adds	r3, r7, r3
1000539e:	781b      	ldrb	r3, [r3, #0]
100053a0:	2b00      	cmp	r3, #0
100053a2:	d001      	beq.n	100053a8 <XMC_CAN_Init+0xd4>
100053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100053a6:	e000      	b.n	100053aa <XMC_CAN_Init+0xd6>
100053a8:	6a3b      	ldr	r3, [r7, #32]
100053aa:	617b      	str	r3, [r7, #20]
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
100053ac:	231b      	movs	r3, #27
100053ae:	18fb      	adds	r3, r7, r3
100053b0:	781b      	ldrb	r3, [r3, #0]
100053b2:	2b00      	cmp	r3, #0
100053b4:	d001      	beq.n	100053ba <XMC_CAN_Init+0xe6>
100053b6:	2201      	movs	r2, #1
100053b8:	e000      	b.n	100053bc <XMC_CAN_Init+0xe8>
100053ba:	2202      	movs	r2, #2
100053bc:	2313      	movs	r3, #19
100053be:	18fb      	adds	r3, r7, r3
100053c0:	701a      	strb	r2, [r3, #0]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
100053c2:	68fb      	ldr	r3, [r7, #12]
100053c4:	68db      	ldr	r3, [r3, #12]
100053c6:	4a0a      	ldr	r2, [pc, #40]	; (100053f0 <XMC_CAN_Init+0x11c>)
100053c8:	401a      	ands	r2, r3
100053ca:	68fb      	ldr	r3, [r7, #12]
100053cc:	60da      	str	r2, [r3, #12]
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
100053ce:	68fb      	ldr	r3, [r7, #12]
100053d0:	68da      	ldr	r2, [r3, #12]
100053d2:	2313      	movs	r3, #19
100053d4:	18fb      	adds	r3, r7, r3
100053d6:	781b      	ldrb	r3, [r3, #0]
100053d8:	0399      	lsls	r1, r3, #14
100053da:	697b      	ldr	r3, [r7, #20]
100053dc:	430b      	orrs	r3, r1
100053de:	431a      	orrs	r2, r3
100053e0:	68fb      	ldr	r3, [r7, #12]
100053e2:	60da      	str	r2, [r3, #12]

}
100053e4:	46bd      	mov	sp, r7
100053e6:	b00e      	add	sp, #56	; 0x38
100053e8:	bd80      	pop	{r7, pc}
100053ea:	46c0      	nop			; (mov r8, r8)
100053ec:	000003ff 	.word	0x000003ff
100053f0:	ffff3c00 	.word	0xffff3c00

100053f4 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
100053f4:	b580      	push	{r7, lr}
100053f6:	b082      	sub	sp, #8
100053f8:	af00      	add	r7, sp, #0
100053fa:	6078      	str	r0, [r7, #4]
100053fc:	1c0a      	adds	r2, r1, #0
100053fe:	1cfb      	adds	r3, r7, #3
10005400:	701a      	strb	r2, [r3, #0]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
10005402:	687a      	ldr	r2, [r7, #4]
10005404:	23e4      	movs	r3, #228	; 0xe4
10005406:	005b      	lsls	r3, r3, #1
10005408:	58d3      	ldr	r3, [r2, r3]
1000540a:	220f      	movs	r2, #15
1000540c:	4393      	bics	r3, r2
1000540e:	1c1a      	adds	r2, r3, #0
10005410:	1cfb      	adds	r3, r7, #3
10005412:	781b      	ldrb	r3, [r3, #0]
10005414:	431a      	orrs	r2, r3
10005416:	1c11      	adds	r1, r2, #0
10005418:	687a      	ldr	r2, [r7, #4]
1000541a:	23e4      	movs	r3, #228	; 0xe4
1000541c:	005b      	lsls	r3, r3, #1
1000541e:	50d1      	str	r1, [r2, r3]
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
10005420:	46bd      	mov	sp, r7
10005422:	b002      	add	sp, #8
10005424:	bd80      	pop	{r7, pc}
10005426:	46c0      	nop			; (mov r8, r8)

10005428 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
10005428:	b580      	push	{r7, lr}
1000542a:	b082      	sub	sp, #8
1000542c:	af00      	add	r7, sp, #0
1000542e:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
10005430:	687a      	ldr	r2, [r7, #4]
10005432:	23e4      	movs	r3, #228	; 0xe4
10005434:	005b      	lsls	r3, r3, #1
10005436:	58d3      	ldr	r3, [r2, r3]
10005438:	b2db      	uxtb	r3, r3
1000543a:	220f      	movs	r2, #15
1000543c:	4013      	ands	r3, r2
1000543e:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4) 
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}
10005440:	1c18      	adds	r0, r3, #0
10005442:	46bd      	mov	sp, r7
10005444:	b002      	add	sp, #8
10005446:	bd80      	pop	{r7, pc}

10005448 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
10005448:	b580      	push	{r7, lr}
1000544a:	b084      	sub	sp, #16
1000544c:	af00      	add	r7, sp, #0
1000544e:	6078      	str	r0, [r7, #4]
  uint32_t frequency;

#if defined(MULTICAN_PLUS)
  switch(XMC_CAN_GetBaudrateClockSource(obj))
10005450:	687b      	ldr	r3, [r7, #4]
10005452:	1c18      	adds	r0, r3, #0
10005454:	f7ff ffe8 	bl	10005428 <XMC_CAN_GetBaudrateClockSource>
10005458:	1e03      	subs	r3, r0, #0
1000545a:	2b01      	cmp	r3, #1
1000545c:	d002      	beq.n	10005464 <XMC_CAN_GetBaudrateClockFrequency+0x1c>
1000545e:	2b02      	cmp	r3, #2
10005460:	d005      	beq.n	1000546e <XMC_CAN_GetBaudrateClockFrequency+0x26>
10005462:	e009      	b.n	10005478 <XMC_CAN_GetBaudrateClockFrequency+0x30>
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#else
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10005464:	f7ff fd4a 	bl	10004efc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10005468:	1c03      	adds	r3, r0, #0
1000546a:	60fb      	str	r3, [r7, #12]
      break;
1000546c:	e007      	b.n	1000547e <XMC_CAN_GetBaudrateClockFrequency+0x36>
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
1000546e:	f7ff fc39 	bl	10004ce4 <OSCHP_GetFrequency>
10005472:	1c03      	adds	r3, r0, #0
10005474:	60fb      	str	r3, [r7, #12]
      break;
10005476:	e002      	b.n	1000547e <XMC_CAN_GetBaudrateClockFrequency+0x36>

    default:
      frequency = 0;
10005478:	2300      	movs	r3, #0
1000547a:	60fb      	str	r3, [r7, #12]
      break;
1000547c:	46c0      	nop			; (mov r8, r8)
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif  

  return frequency;
1000547e:	68fb      	ldr	r3, [r7, #12]
}
10005480:	1c18      	adds	r0, r3, #0
10005482:	46bd      	mov	sp, r7
10005484:	b004      	add	sp, #16
10005486:	bd80      	pop	{r7, pc}

10005488 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
10005488:	b580      	push	{r7, lr}
1000548a:	b086      	sub	sp, #24
1000548c:	af00      	add	r7, sp, #0
1000548e:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
10005490:	687b      	ldr	r3, [r7, #4]
10005492:	681b      	ldr	r3, [r3, #0]
10005494:	4a48      	ldr	r2, [pc, #288]	; (100055b8 <XMC_CAN_MO_Config+0x130>)
10005496:	4694      	mov	ip, r2
10005498:	4463      	add	r3, ip
1000549a:	095b      	lsrs	r3, r3, #5
1000549c:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
1000549e:	697b      	ldr	r3, [r7, #20]
100054a0:	095b      	lsrs	r3, r3, #5
100054a2:	035a      	lsls	r2, r3, #13
100054a4:	697b      	ldr	r3, [r7, #20]
100054a6:	211f      	movs	r1, #31
100054a8:	400b      	ands	r3, r1
100054aa:	021b      	lsls	r3, r3, #8
100054ac:	4313      	orrs	r3, r2
100054ae:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
100054b0:	687b      	ldr	r3, [r7, #4]
100054b2:	681b      	ldr	r3, [r3, #0]
100054b4:	687a      	ldr	r2, [r7, #4]
100054b6:	6812      	ldr	r2, [r2, #0]
100054b8:	6892      	ldr	r2, [r2, #8]
100054ba:	4940      	ldr	r1, [pc, #256]	; (100055bc <XMC_CAN_MO_Config+0x134>)
100054bc:	400a      	ands	r2, r1
100054be:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
100054c0:	687b      	ldr	r3, [r7, #4]
100054c2:	681b      	ldr	r3, [r3, #0]
100054c4:	687a      	ldr	r2, [r7, #4]
100054c6:	6812      	ldr	r2, [r2, #0]
100054c8:	6891      	ldr	r1, [r2, #8]
100054ca:	693a      	ldr	r2, [r7, #16]
100054cc:	430a      	orrs	r2, r1
100054ce:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
100054d0:	687b      	ldr	r3, [r7, #4]
100054d2:	79db      	ldrb	r3, [r3, #7]
100054d4:	2220      	movs	r2, #32
100054d6:	4013      	ands	r3, r2
100054d8:	b2db      	uxtb	r3, r3
100054da:	2b00      	cmp	r3, #0
100054dc:	d007      	beq.n	100054ee <XMC_CAN_MO_Config+0x66>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
100054de:	687b      	ldr	r3, [r7, #4]
100054e0:	79db      	ldrb	r3, [r3, #7]
100054e2:	2220      	movs	r2, #32
100054e4:	4013      	ands	r3, r2
100054e6:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
100054e8:	2b00      	cmp	r3, #0
100054ea:	d100      	bne.n	100054ee <XMC_CAN_MO_Config+0x66>
100054ec:	e061      	b.n	100055b2 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
100054ee:	687b      	ldr	r3, [r7, #4]
100054f0:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
100054f2:	2b00      	cmp	r3, #0
100054f4:	d004      	beq.n	10005500 <XMC_CAN_MO_Config+0x78>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
100054f6:	687b      	ldr	r3, [r7, #4]
100054f8:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
100054fa:	2b01      	cmp	r3, #1
100054fc:	d000      	beq.n	10005500 <XMC_CAN_MO_Config+0x78>
100054fe:	e058      	b.n	100055b2 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
10005500:	687b      	ldr	r3, [r7, #4]
10005502:	681b      	ldr	r3, [r3, #0]
10005504:	2220      	movs	r2, #32
10005506:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
10005508:	687b      	ldr	r3, [r7, #4]
1000550a:	79db      	ldrb	r3, [r3, #7]
1000550c:	2220      	movs	r2, #32
1000550e:	4013      	ands	r3, r2
10005510:	b2db      	uxtb	r3, r3
10005512:	2b00      	cmp	r3, #0
10005514:	d128      	bne.n	10005568 <XMC_CAN_MO_Config+0xe0>
    {
      reg = can_mo->mo_ar;
10005516:	687b      	ldr	r3, [r7, #4]
10005518:	685b      	ldr	r3, [r3, #4]
1000551a:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
1000551c:	68fb      	ldr	r3, [r7, #12]
1000551e:	0f5b      	lsrs	r3, r3, #29
10005520:	075b      	lsls	r3, r3, #29
10005522:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
10005524:	687b      	ldr	r3, [r7, #4]
10005526:	685b      	ldr	r3, [r3, #4]
10005528:	00db      	lsls	r3, r3, #3
1000552a:	08db      	lsrs	r3, r3, #3
1000552c:	049b      	lsls	r3, r3, #18
1000552e:	1c1a      	adds	r2, r3, #0
10005530:	68fb      	ldr	r3, [r7, #12]
10005532:	4313      	orrs	r3, r2
10005534:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
10005536:	687b      	ldr	r3, [r7, #4]
10005538:	681b      	ldr	r3, [r3, #0]
1000553a:	68fa      	ldr	r2, [r7, #12]
1000553c:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
1000553e:	687b      	ldr	r3, [r7, #4]
10005540:	689b      	ldr	r3, [r3, #8]
10005542:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
10005544:	68fb      	ldr	r3, [r7, #12]
10005546:	0f5b      	lsrs	r3, r3, #29
10005548:	075b      	lsls	r3, r3, #29
1000554a:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
1000554c:	687b      	ldr	r3, [r7, #4]
1000554e:	689b      	ldr	r3, [r3, #8]
10005550:	00db      	lsls	r3, r3, #3
10005552:	08db      	lsrs	r3, r3, #3
10005554:	049b      	lsls	r3, r3, #18
10005556:	1c1a      	adds	r2, r3, #0
10005558:	68fb      	ldr	r3, [r7, #12]
1000555a:	4313      	orrs	r3, r2
1000555c:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
1000555e:	687b      	ldr	r3, [r7, #4]
10005560:	681b      	ldr	r3, [r3, #0]
10005562:	68fa      	ldr	r2, [r7, #12]
10005564:	60da      	str	r2, [r3, #12]
10005566:	e009      	b.n	1000557c <XMC_CAN_MO_Config+0xf4>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
10005568:	687b      	ldr	r3, [r7, #4]
1000556a:	681b      	ldr	r3, [r3, #0]
1000556c:	687a      	ldr	r2, [r7, #4]
1000556e:	6852      	ldr	r2, [r2, #4]
10005570:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	681b      	ldr	r3, [r3, #0]
10005576:	687a      	ldr	r2, [r7, #4]
10005578:	6892      	ldr	r2, [r2, #8]
1000557a:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
1000557c:	687b      	ldr	r3, [r7, #4]
1000557e:	7e1b      	ldrb	r3, [r3, #24]
10005580:	2b01      	cmp	r3, #1
10005582:	d10d      	bne.n	100055a0 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
10005584:	687b      	ldr	r3, [r7, #4]
10005586:	1c18      	adds	r0, r3, #0
10005588:	f000 f81e 	bl	100055c8 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
1000558c:	687b      	ldr	r3, [r7, #4]
1000558e:	681b      	ldr	r3, [r3, #0]
10005590:	2280      	movs	r2, #128	; 0x80
10005592:	0512      	lsls	r2, r2, #20
10005594:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
10005596:	687b      	ldr	r3, [r7, #4]
10005598:	681b      	ldr	r3, [r3, #0]
1000559a:	4a09      	ldr	r2, [pc, #36]	; (100055c0 <XMC_CAN_MO_Config+0x138>)
1000559c:	61da      	str	r2, [r3, #28]
1000559e:	e008      	b.n	100055b2 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
100055a0:	687b      	ldr	r3, [r7, #4]
100055a2:	681b      	ldr	r3, [r3, #0]
100055a4:	2280      	movs	r2, #128	; 0x80
100055a6:	0112      	lsls	r2, r2, #4
100055a8:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
100055aa:	687b      	ldr	r3, [r7, #4]
100055ac:	681b      	ldr	r3, [r3, #0]
100055ae:	4a05      	ldr	r2, [pc, #20]	; (100055c4 <XMC_CAN_MO_Config+0x13c>)
100055b0:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
100055b2:	46bd      	mov	sp, r7
100055b4:	b006      	add	sp, #24
100055b6:	bd80      	pop	{r7, pc}
100055b8:	affbf000 	.word	0xaffbf000
100055bc:	ffff00ff 	.word	0xffff00ff
100055c0:	062000c0 	.word	0x062000c0
100055c4:	00a00640 	.word	0x00a00640

100055c8 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
100055c8:	b580      	push	{r7, lr}
100055ca:	b084      	sub	sp, #16
100055cc:	af00      	add	r7, sp, #0
100055ce:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
100055d0:	230f      	movs	r3, #15
100055d2:	18fb      	adds	r3, r7, r3
100055d4:	2203      	movs	r2, #3
100055d6:	701a      	strb	r2, [r3, #0]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
100055d8:	687b      	ldr	r3, [r7, #4]
100055da:	7e1b      	ldrb	r3, [r3, #24]
100055dc:	2b01      	cmp	r3, #1
100055de:	d125      	bne.n	1000562c <XMC_CAN_MO_UpdateData+0x64>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
100055e0:	687b      	ldr	r3, [r7, #4]
100055e2:	681b      	ldr	r3, [r3, #0]
100055e4:	2220      	movs	r2, #32
100055e6:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
100055e8:	687b      	ldr	r3, [r7, #4]
100055ea:	681b      	ldr	r3, [r3, #0]
100055ec:	687a      	ldr	r2, [r7, #4]
100055ee:	6812      	ldr	r2, [r2, #0]
100055f0:	6812      	ldr	r2, [r2, #0]
100055f2:	4914      	ldr	r1, [pc, #80]	; (10005644 <XMC_CAN_MO_UpdateData+0x7c>)
100055f4:	4011      	ands	r1, r2
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
100055f6:	687a      	ldr	r2, [r7, #4]
100055f8:	7b12      	ldrb	r2, [r2, #12]
100055fa:	0610      	lsls	r0, r2, #24
100055fc:	22f0      	movs	r2, #240	; 0xf0
100055fe:	0512      	lsls	r2, r2, #20
10005600:	4002      	ands	r2, r0
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
10005602:	430a      	orrs	r2, r1
10005604:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
10005606:	687b      	ldr	r3, [r7, #4]
10005608:	681b      	ldr	r3, [r3, #0]
1000560a:	687a      	ldr	r2, [r7, #4]
1000560c:	6912      	ldr	r2, [r2, #16]
1000560e:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
10005610:	687b      	ldr	r3, [r7, #4]
10005612:	681b      	ldr	r3, [r3, #0]
10005614:	687a      	ldr	r2, [r7, #4]
10005616:	6952      	ldr	r2, [r2, #20]
10005618:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
1000561a:	687b      	ldr	r3, [r7, #4]
1000561c:	681b      	ldr	r3, [r3, #0]
1000561e:	4a0a      	ldr	r2, [pc, #40]	; (10005648 <XMC_CAN_MO_UpdateData+0x80>)
10005620:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
10005622:	230f      	movs	r3, #15
10005624:	18fb      	adds	r3, r7, r3
10005626:	2200      	movs	r2, #0
10005628:	701a      	strb	r2, [r3, #0]
1000562a:	e003      	b.n	10005634 <XMC_CAN_MO_UpdateData+0x6c>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
1000562c:	230f      	movs	r3, #15
1000562e:	18fb      	adds	r3, r7, r3
10005630:	2203      	movs	r2, #3
10005632:	701a      	strb	r2, [r3, #0]
  }
  return error;
10005634:	230f      	movs	r3, #15
10005636:	18fb      	adds	r3, r7, r3
10005638:	781b      	ldrb	r3, [r3, #0]
}
1000563a:	1c18      	adds	r0, r3, #0
1000563c:	46bd      	mov	sp, r7
1000563e:	b004      	add	sp, #16
10005640:	bd80      	pop	{r7, pc}
10005642:	46c0      	nop			; (mov r8, r8)
10005644:	f0ffffff 	.word	0xf0ffffff
10005648:	00280040 	.word	0x00280040

1000564c <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
1000564c:	b580      	push	{r7, lr}
1000564e:	b086      	sub	sp, #24
10005650:	af00      	add	r7, sp, #0
10005652:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
10005654:	2317      	movs	r3, #23
10005656:	18fb      	adds	r3, r7, r3
10005658:	2201      	movs	r2, #1
1000565a:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
1000565c:	687b      	ldr	r3, [r7, #4]
1000565e:	681b      	ldr	r3, [r3, #0]
10005660:	69db      	ldr	r3, [r3, #28]
10005662:	2220      	movs	r2, #32
10005664:	4013      	ands	r3, r2
10005666:	095b      	lsrs	r3, r3, #5
10005668:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
1000566a:	687b      	ldr	r3, [r7, #4]
1000566c:	681b      	ldr	r3, [r3, #0]
1000566e:	69da      	ldr	r2, [r3, #28]
10005670:	2380      	movs	r3, #128	; 0x80
10005672:	005b      	lsls	r3, r3, #1
10005674:	4013      	ands	r3, r2
10005676:	0a1b      	lsrs	r3, r3, #8
10005678:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
1000567a:	693b      	ldr	r3, [r7, #16]
1000567c:	2b00      	cmp	r3, #0
1000567e:	d104      	bne.n	1000568a <XMC_CAN_MO_Transmit+0x3e>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
10005680:	2317      	movs	r3, #23
10005682:	18fb      	adds	r3, r7, r3
10005684:	2204      	movs	r2, #4
10005686:	701a      	strb	r2, [r3, #0]
10005688:	e010      	b.n	100056ac <XMC_CAN_MO_Transmit+0x60>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
1000568a:	68fb      	ldr	r3, [r7, #12]
1000568c:	2b01      	cmp	r3, #1
1000568e:	d104      	bne.n	1000569a <XMC_CAN_MO_Transmit+0x4e>
  {
    error = XMC_CAN_STATUS_BUSY;
10005690:	2317      	movs	r3, #23
10005692:	18fb      	adds	r3, r7, r3
10005694:	2202      	movs	r2, #2
10005696:	701a      	strb	r2, [r3, #0]
10005698:	e008      	b.n	100056ac <XMC_CAN_MO_Transmit+0x60>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
1000569a:	687b      	ldr	r3, [r7, #4]
1000569c:	681b      	ldr	r3, [r3, #0]
1000569e:	22e0      	movs	r2, #224	; 0xe0
100056a0:	04d2      	lsls	r2, r2, #19
100056a2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
100056a4:	2317      	movs	r3, #23
100056a6:	18fb      	adds	r3, r7, r3
100056a8:	2200      	movs	r2, #0
100056aa:	701a      	strb	r2, [r3, #0]
  }
  return error;
100056ac:	2317      	movs	r3, #23
100056ae:	18fb      	adds	r3, r7, r3
100056b0:	781b      	ldrb	r3, [r3, #0]
}
100056b2:	1c18      	adds	r0, r3, #0
100056b4:	46bd      	mov	sp, r7
100056b6:	b006      	add	sp, #24
100056b8:	bd80      	pop	{r7, pc}
100056ba:	46c0      	nop			; (mov r8, r8)

100056bc <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
100056bc:	b580      	push	{r7, lr}
100056be:	b086      	sub	sp, #24
100056c0:	af00      	add	r7, sp, #0
100056c2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
100056c4:	2317      	movs	r3, #23
100056c6:	18fb      	adds	r3, r7, r3
100056c8:	2201      	movs	r2, #1
100056ca:	701a      	strb	r2, [r3, #0]
  uint8_t rx_pnd = 0U;
100056cc:	2316      	movs	r3, #22
100056ce:	18fb      	adds	r3, r7, r3
100056d0:	2200      	movs	r2, #0
100056d2:	701a      	strb	r2, [r3, #0]
  uint8_t new_data = 0U;
100056d4:	2315      	movs	r3, #21
100056d6:	18fb      	adds	r3, r7, r3
100056d8:	2200      	movs	r2, #0
100056da:	701a      	strb	r2, [r3, #0]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
100056dc:	687b      	ldr	r3, [r7, #4]
100056de:	681b      	ldr	r3, [r3, #0]
100056e0:	69da      	ldr	r2, [r3, #28]
100056e2:	2380      	movs	r3, #128	; 0x80
100056e4:	011b      	lsls	r3, r3, #4
100056e6:	4013      	ands	r3, r2
100056e8:	0adb      	lsrs	r3, r3, #11
100056ea:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
100056ec:	687b      	ldr	r3, [r7, #4]
100056ee:	681b      	ldr	r3, [r3, #0]
100056f0:	69db      	ldr	r3, [r3, #28]
100056f2:	2204      	movs	r2, #4
100056f4:	4013      	ands	r3, r2
100056f6:	089b      	lsrs	r3, r3, #2
100056f8:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
100056fa:	693b      	ldr	r3, [r7, #16]
100056fc:	2b00      	cmp	r3, #0
100056fe:	d004      	beq.n	1000570a <XMC_CAN_MO_Receive+0x4e>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
10005700:	2317      	movs	r3, #23
10005702:	18fb      	adds	r3, r7, r3
10005704:	2203      	movs	r2, #3
10005706:	701a      	strb	r2, [r3, #0]
10005708:	e0d3      	b.n	100058b2 <XMC_CAN_MO_Receive+0x1f6>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
1000570a:	68fb      	ldr	r3, [r7, #12]
1000570c:	2b01      	cmp	r3, #1
1000570e:	d104      	bne.n	1000571a <XMC_CAN_MO_Receive+0x5e>
  {
    error = XMC_CAN_STATUS_BUSY;
10005710:	2317      	movs	r3, #23
10005712:	18fb      	adds	r3, r7, r3
10005714:	2202      	movs	r2, #2
10005716:	701a      	strb	r2, [r3, #0]
10005718:	e0cb      	b.n	100058b2 <XMC_CAN_MO_Receive+0x1f6>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
1000571a:	687b      	ldr	r3, [r7, #4]
1000571c:	681b      	ldr	r3, [r3, #0]
1000571e:	2208      	movs	r2, #8
10005720:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
10005722:	687b      	ldr	r3, [r7, #4]
10005724:	681b      	ldr	r3, [r3, #0]
10005726:	699a      	ldr	r2, [r3, #24]
10005728:	2380      	movs	r3, #128	; 0x80
1000572a:	059b      	lsls	r3, r3, #22
1000572c:	4013      	ands	r3, r2
1000572e:	0f5b      	lsrs	r3, r3, #29
10005730:	d151      	bne.n	100057d6 <XMC_CAN_MO_Receive+0x11a>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
10005732:	687b      	ldr	r3, [r7, #4]
10005734:	79da      	ldrb	r2, [r3, #7]
10005736:	2120      	movs	r1, #32
10005738:	438a      	bics	r2, r1
1000573a:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
1000573c:	687b      	ldr	r3, [r7, #4]
1000573e:	681b      	ldr	r3, [r3, #0]
10005740:	699b      	ldr	r3, [r3, #24]
10005742:	4a5f      	ldr	r2, [pc, #380]	; (100058c0 <XMC_CAN_MO_Receive+0x204>)
10005744:	4013      	ands	r3, r2
10005746:	0c9b      	lsrs	r3, r3, #18
10005748:	00db      	lsls	r3, r3, #3
1000574a:	08da      	lsrs	r2, r3, #3
1000574c:	687b      	ldr	r3, [r7, #4]
1000574e:	00d2      	lsls	r2, r2, #3
10005750:	08d2      	lsrs	r2, r2, #3
10005752:	6859      	ldr	r1, [r3, #4]
10005754:	0f49      	lsrs	r1, r1, #29
10005756:	0749      	lsls	r1, r1, #29
10005758:	430a      	orrs	r2, r1
1000575a:	605a      	str	r2, [r3, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
1000575c:	687b      	ldr	r3, [r7, #4]
1000575e:	681b      	ldr	r3, [r3, #0]
10005760:	68da      	ldr	r2, [r3, #12]
10005762:	2380      	movs	r3, #128	; 0x80
10005764:	059b      	lsls	r3, r3, #22
10005766:	4013      	ands	r3, r2
10005768:	0f5b      	lsrs	r3, r3, #29
1000576a:	b2db      	uxtb	r3, r3
1000576c:	1c1a      	adds	r2, r3, #0
1000576e:	2301      	movs	r3, #1
10005770:	4013      	ands	r3, r2
10005772:	b2da      	uxtb	r2, r3
10005774:	687b      	ldr	r3, [r7, #4]
10005776:	2101      	movs	r1, #1
10005778:	400a      	ands	r2, r1
1000577a:	0150      	lsls	r0, r2, #5
1000577c:	7ada      	ldrb	r2, [r3, #11]
1000577e:	2120      	movs	r1, #32
10005780:	438a      	bics	r2, r1
10005782:	1c11      	adds	r1, r2, #0
10005784:	1c02      	adds	r2, r0, #0
10005786:	430a      	orrs	r2, r1
10005788:	72da      	strb	r2, [r3, #11]
        if(can_mo->can_ide_mask == 1U)
1000578a:	687b      	ldr	r3, [r7, #4]
1000578c:	7adb      	ldrb	r3, [r3, #11]
1000578e:	2220      	movs	r2, #32
10005790:	4013      	ands	r3, r2
10005792:	b2db      	uxtb	r3, r3
10005794:	2b00      	cmp	r3, #0
10005796:	d010      	beq.n	100057ba <XMC_CAN_MO_Receive+0xfe>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
10005798:	687b      	ldr	r3, [r7, #4]
1000579a:	681b      	ldr	r3, [r3, #0]
1000579c:	68db      	ldr	r3, [r3, #12]
1000579e:	4a48      	ldr	r2, [pc, #288]	; (100058c0 <XMC_CAN_MO_Receive+0x204>)
100057a0:	4013      	ands	r3, r2
100057a2:	0c9b      	lsrs	r3, r3, #18
100057a4:	00db      	lsls	r3, r3, #3
100057a6:	08da      	lsrs	r2, r3, #3
100057a8:	687b      	ldr	r3, [r7, #4]
100057aa:	00d2      	lsls	r2, r2, #3
100057ac:	08d2      	lsrs	r2, r2, #3
100057ae:	6899      	ldr	r1, [r3, #8]
100057b0:	0f49      	lsrs	r1, r1, #29
100057b2:	0749      	lsls	r1, r1, #29
100057b4:	430a      	orrs	r2, r1
100057b6:	609a      	str	r2, [r3, #8]
100057b8:	e043      	b.n	10005842 <XMC_CAN_MO_Receive+0x186>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
100057ba:	687b      	ldr	r3, [r7, #4]
100057bc:	681b      	ldr	r3, [r3, #0]
100057be:	68db      	ldr	r3, [r3, #12]
100057c0:	00db      	lsls	r3, r3, #3
100057c2:	08da      	lsrs	r2, r3, #3
100057c4:	687b      	ldr	r3, [r7, #4]
100057c6:	00d2      	lsls	r2, r2, #3
100057c8:	08d2      	lsrs	r2, r2, #3
100057ca:	6899      	ldr	r1, [r3, #8]
100057cc:	0f49      	lsrs	r1, r1, #29
100057ce:	0749      	lsls	r1, r1, #29
100057d0:	430a      	orrs	r2, r1
100057d2:	609a      	str	r2, [r3, #8]
100057d4:	e035      	b.n	10005842 <XMC_CAN_MO_Receive+0x186>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
100057d6:	687b      	ldr	r3, [r7, #4]
100057d8:	79da      	ldrb	r2, [r3, #7]
100057da:	2120      	movs	r1, #32
100057dc:	430a      	orrs	r2, r1
100057de:	71da      	strb	r2, [r3, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
100057e0:	687b      	ldr	r3, [r7, #4]
100057e2:	681b      	ldr	r3, [r3, #0]
100057e4:	699b      	ldr	r3, [r3, #24]
100057e6:	00db      	lsls	r3, r3, #3
100057e8:	08da      	lsrs	r2, r3, #3
100057ea:	687b      	ldr	r3, [r7, #4]
100057ec:	00d2      	lsls	r2, r2, #3
100057ee:	08d2      	lsrs	r2, r2, #3
100057f0:	6859      	ldr	r1, [r3, #4]
100057f2:	0f49      	lsrs	r1, r1, #29
100057f4:	0749      	lsls	r1, r1, #29
100057f6:	430a      	orrs	r2, r1
100057f8:	605a      	str	r2, [r3, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
100057fa:	687b      	ldr	r3, [r7, #4]
100057fc:	681b      	ldr	r3, [r3, #0]
100057fe:	68db      	ldr	r3, [r3, #12]
10005800:	00db      	lsls	r3, r3, #3
10005802:	08da      	lsrs	r2, r3, #3
10005804:	687b      	ldr	r3, [r7, #4]
10005806:	00d2      	lsls	r2, r2, #3
10005808:	08d2      	lsrs	r2, r2, #3
1000580a:	6899      	ldr	r1, [r3, #8]
1000580c:	0f49      	lsrs	r1, r1, #29
1000580e:	0749      	lsls	r1, r1, #29
10005810:	430a      	orrs	r2, r1
10005812:	609a      	str	r2, [r3, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
10005814:	687b      	ldr	r3, [r7, #4]
10005816:	681b      	ldr	r3, [r3, #0]
10005818:	68da      	ldr	r2, [r3, #12]
1000581a:	2380      	movs	r3, #128	; 0x80
1000581c:	059b      	lsls	r3, r3, #22
1000581e:	4013      	ands	r3, r2
10005820:	0f5b      	lsrs	r3, r3, #29
10005822:	b2db      	uxtb	r3, r3
10005824:	1c1a      	adds	r2, r3, #0
10005826:	2301      	movs	r3, #1
10005828:	4013      	ands	r3, r2
1000582a:	b2da      	uxtb	r2, r3
1000582c:	687b      	ldr	r3, [r7, #4]
1000582e:	2101      	movs	r1, #1
10005830:	400a      	ands	r2, r1
10005832:	0150      	lsls	r0, r2, #5
10005834:	7ada      	ldrb	r2, [r3, #11]
10005836:	2120      	movs	r1, #32
10005838:	438a      	bics	r2, r1
1000583a:	1c11      	adds	r1, r2, #0
1000583c:	1c02      	adds	r2, r0, #0
1000583e:	430a      	orrs	r2, r1
10005840:	72da      	strb	r2, [r3, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
10005842:	687b      	ldr	r3, [r7, #4]
10005844:	681b      	ldr	r3, [r3, #0]
10005846:	681a      	ldr	r2, [r3, #0]
10005848:	23f0      	movs	r3, #240	; 0xf0
1000584a:	051b      	lsls	r3, r3, #20
1000584c:	4013      	ands	r3, r2
1000584e:	0e1b      	lsrs	r3, r3, #24
10005850:	b2da      	uxtb	r2, r3
10005852:	687b      	ldr	r3, [r7, #4]
10005854:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
10005856:	687b      	ldr	r3, [r7, #4]
10005858:	681b      	ldr	r3, [r3, #0]
1000585a:	691a      	ldr	r2, [r3, #16]
1000585c:	687b      	ldr	r3, [r7, #4]
1000585e:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
10005860:	687b      	ldr	r3, [r7, #4]
10005862:	681b      	ldr	r3, [r3, #0]
10005864:	695a      	ldr	r2, [r3, #20]
10005866:	687b      	ldr	r3, [r7, #4]
10005868:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
1000586a:	687b      	ldr	r3, [r7, #4]
1000586c:	681b      	ldr	r3, [r3, #0]
1000586e:	69db      	ldr	r3, [r3, #28]
10005870:	2204      	movs	r2, #4
10005872:	4013      	ands	r3, r2
10005874:	089a      	lsrs	r2, r3, #2
10005876:	2316      	movs	r3, #22
10005878:	18fb      	adds	r3, r7, r3
1000587a:	701a      	strb	r2, [r3, #0]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
1000587c:	687b      	ldr	r3, [r7, #4]
1000587e:	681b      	ldr	r3, [r3, #0]
10005880:	69db      	ldr	r3, [r3, #28]
10005882:	2208      	movs	r2, #8
10005884:	4013      	ands	r3, r2
10005886:	08da      	lsrs	r2, r3, #3
10005888:	2315      	movs	r3, #21
1000588a:	18fb      	adds	r3, r7, r3
1000588c:	701a      	strb	r2, [r3, #0]
    } while ((rx_pnd != 0U) && (new_data != 0U));
1000588e:	2316      	movs	r3, #22
10005890:	18fb      	adds	r3, r7, r3
10005892:	781b      	ldrb	r3, [r3, #0]
10005894:	2b00      	cmp	r3, #0
10005896:	d005      	beq.n	100058a4 <XMC_CAN_MO_Receive+0x1e8>
10005898:	2315      	movs	r3, #21
1000589a:	18fb      	adds	r3, r7, r3
1000589c:	781b      	ldrb	r3, [r3, #0]
1000589e:	2b00      	cmp	r3, #0
100058a0:	d000      	beq.n	100058a4 <XMC_CAN_MO_Receive+0x1e8>
100058a2:	e73a      	b.n	1000571a <XMC_CAN_MO_Receive+0x5e>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
100058a4:	687b      	ldr	r3, [r7, #4]
100058a6:	2200      	movs	r2, #0
100058a8:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
100058aa:	2317      	movs	r3, #23
100058ac:	18fb      	adds	r3, r7, r3
100058ae:	2200      	movs	r2, #0
100058b0:	701a      	strb	r2, [r3, #0]
  }
  return error;
100058b2:	2317      	movs	r3, #23
100058b4:	18fb      	adds	r3, r7, r3
100058b6:	781b      	ldrb	r3, [r3, #0]
}
100058b8:	1c18      	adds	r0, r3, #0
100058ba:	46bd      	mov	sp, r7
100058bc:	b006      	add	sp, #24
100058be:	bd80      	pop	{r7, pc}
100058c0:	1ffc0000 	.word	0x1ffc0000

100058c4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100058c4:	b580      	push	{r7, lr}
100058c6:	b082      	sub	sp, #8
100058c8:	af00      	add	r7, sp, #0
100058ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
100058cc:	687b      	ldr	r3, [r7, #4]
100058ce:	2280      	movs	r2, #128	; 0x80
100058d0:	0052      	lsls	r2, r2, #1
100058d2:	60da      	str	r2, [r3, #12]
}
100058d4:	46bd      	mov	sp, r7
100058d6:	b002      	add	sp, #8
100058d8:	bd80      	pop	{r7, pc}
100058da:	46c0      	nop			; (mov r8, r8)

100058dc <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100058dc:	b580      	push	{r7, lr}
100058de:	b082      	sub	sp, #8
100058e0:	af00      	add	r7, sp, #0
100058e2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100058e4:	687b      	ldr	r3, [r7, #4]
100058e6:	4a09      	ldr	r2, [pc, #36]	; (1000590c <XMC_CCU4_lUngateClock+0x30>)
100058e8:	4293      	cmp	r3, r2
100058ea:	d103      	bne.n	100058f4 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100058ec:	2004      	movs	r0, #4
100058ee:	f7ff fad9 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>
100058f2:	e008      	b.n	10005906 <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
100058f4:	687b      	ldr	r3, [r7, #4]
100058f6:	4a06      	ldr	r2, [pc, #24]	; (10005910 <XMC_CCU4_lUngateClock+0x34>)
100058f8:	4293      	cmp	r3, r2
100058fa:	d104      	bne.n	10005906 <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
100058fc:	2380      	movs	r3, #128	; 0x80
100058fe:	029b      	lsls	r3, r3, #10
10005900:	1c18      	adds	r0, r3, #0
10005902:	f7ff facf 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
10005906:	46bd      	mov	sp, r7
10005908:	b002      	add	sp, #8
1000590a:	bd80      	pop	{r7, pc}
1000590c:	48040000 	.word	0x48040000
10005910:	48044000 	.word	0x48044000

10005914 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
10005914:	b580      	push	{r7, lr}
10005916:	b082      	sub	sp, #8
10005918:	af00      	add	r7, sp, #0
1000591a:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
1000591c:	687b      	ldr	r3, [r7, #4]
1000591e:	1c18      	adds	r0, r3, #0
10005920:	f7ff ffdc 	bl	100058dc <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
10005924:	46bd      	mov	sp, r7
10005926:	b002      	add	sp, #8
10005928:	bd80      	pop	{r7, pc}
1000592a:	46c0      	nop			; (mov r8, r8)

1000592c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
1000592c:	b580      	push	{r7, lr}
1000592e:	b084      	sub	sp, #16
10005930:	af00      	add	r7, sp, #0
10005932:	6078      	str	r0, [r7, #4]
10005934:	1c0a      	adds	r2, r1, #0
10005936:	1cfb      	adds	r3, r7, #3
10005938:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
1000593a:	687b      	ldr	r3, [r7, #4]
1000593c:	1c18      	adds	r0, r3, #0
1000593e:	f7ff ffe9 	bl	10005914 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
10005942:	687b      	ldr	r3, [r7, #4]
10005944:	1c18      	adds	r0, r3, #0
10005946:	f7ff ffbd 	bl	100058c4 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
1000594a:	687b      	ldr	r3, [r7, #4]
1000594c:	681b      	ldr	r3, [r3, #0]
1000594e:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10005950:	68fb      	ldr	r3, [r7, #12]
10005952:	4a07      	ldr	r2, [pc, #28]	; (10005970 <XMC_CCU4_Init+0x44>)
10005954:	4013      	ands	r3, r2
10005956:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10005958:	1cfb      	adds	r3, r7, #3
1000595a:	781b      	ldrb	r3, [r3, #0]
1000595c:	039b      	lsls	r3, r3, #14
1000595e:	68fa      	ldr	r2, [r7, #12]
10005960:	4313      	orrs	r3, r2
10005962:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
10005964:	687b      	ldr	r3, [r7, #4]
10005966:	68fa      	ldr	r2, [r7, #12]
10005968:	601a      	str	r2, [r3, #0]
}
1000596a:	46bd      	mov	sp, r7
1000596c:	b004      	add	sp, #16
1000596e:	bd80      	pop	{r7, pc}
10005970:	ffff3fff 	.word	0xffff3fff

10005974 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
10005974:	b580      	push	{r7, lr}
10005976:	b084      	sub	sp, #16
10005978:	af00      	add	r7, sp, #0
1000597a:	6078      	str	r0, [r7, #4]
1000597c:	1c0a      	adds	r2, r1, #0
1000597e:	1cfb      	adds	r3, r7, #3
10005980:	701a      	strb	r2, [r3, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
10005982:	687b      	ldr	r3, [r7, #4]
10005984:	681b      	ldr	r3, [r3, #0]
10005986:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
10005988:	68fb      	ldr	r3, [r7, #12]
1000598a:	2230      	movs	r2, #48	; 0x30
1000598c:	4393      	bics	r3, r2
1000598e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
10005990:	1cfb      	adds	r3, r7, #3
10005992:	781b      	ldrb	r3, [r3, #0]
10005994:	011b      	lsls	r3, r3, #4
10005996:	68fa      	ldr	r2, [r7, #12]
10005998:	4313      	orrs	r3, r2
1000599a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
1000599c:	687b      	ldr	r3, [r7, #4]
1000599e:	68fa      	ldr	r2, [r7, #12]
100059a0:	601a      	str	r2, [r3, #0]
}
100059a2:	46bd      	mov	sp, r7
100059a4:	b004      	add	sp, #16
100059a6:	bd80      	pop	{r7, pc}

100059a8 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
100059a8:	b580      	push	{r7, lr}
100059aa:	b082      	sub	sp, #8
100059ac:	af00      	add	r7, sp, #0
100059ae:	6078      	str	r0, [r7, #4]
100059b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
100059b2:	683b      	ldr	r3, [r7, #0]
100059b4:	681a      	ldr	r2, [r3, #0]
100059b6:	687b      	ldr	r3, [r7, #4]
100059b8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
100059ba:	683b      	ldr	r3, [r7, #0]
100059bc:	795b      	ldrb	r3, [r3, #5]
100059be:	069b      	lsls	r3, r3, #26
100059c0:	0fdb      	lsrs	r3, r3, #31
100059c2:	b2db      	uxtb	r3, r3
100059c4:	051a      	lsls	r2, r3, #20
100059c6:	687b      	ldr	r3, [r7, #4]
100059c8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
100059ca:	683b      	ldr	r3, [r7, #0]
100059cc:	791b      	ldrb	r3, [r3, #4]
100059ce:	071b      	lsls	r3, r3, #28
100059d0:	0f1b      	lsrs	r3, r3, #28
100059d2:	b2db      	uxtb	r3, r3
100059d4:	1c1a      	adds	r2, r3, #0
100059d6:	687b      	ldr	r3, [r7, #4]
100059d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
100059da:	683b      	ldr	r3, [r7, #0]
100059dc:	795b      	ldrb	r3, [r3, #5]
100059de:	071b      	lsls	r3, r3, #28
100059e0:	0f1b      	lsrs	r3, r3, #28
100059e2:	b2db      	uxtb	r3, r3
100059e4:	1c1a      	adds	r2, r3, #0
100059e6:	687b      	ldr	r3, [r7, #4]
100059e8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100059ea:	683b      	ldr	r3, [r7, #0]
100059ec:	795b      	ldrb	r3, [r3, #5]
100059ee:	06db      	lsls	r3, r3, #27
100059f0:	0fdb      	lsrs	r3, r3, #31
100059f2:	b2db      	uxtb	r3, r3
100059f4:	1c1a      	adds	r2, r3, #0
100059f6:	687b      	ldr	r3, [r7, #4]
100059f8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100059fa:	683b      	ldr	r3, [r7, #0]
100059fc:	791b      	ldrb	r3, [r3, #4]
100059fe:	061b      	lsls	r3, r3, #24
10005a00:	0f1b      	lsrs	r3, r3, #28
10005a02:	b2db      	uxtb	r3, r3
10005a04:	1c1a      	adds	r2, r3, #0
10005a06:	687b      	ldr	r3, [r7, #4]
10005a08:	62da      	str	r2, [r3, #44]	; 0x2c
}
10005a0a:	46bd      	mov	sp, r7
10005a0c:	b002      	add	sp, #8
10005a0e:	bd80      	pop	{r7, pc}

10005a10 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10005a10:	b580      	push	{r7, lr}
10005a12:	b086      	sub	sp, #24
10005a14:	af00      	add	r7, sp, #0
10005a16:	6078      	str	r0, [r7, #4]
10005a18:	1c08      	adds	r0, r1, #0
10005a1a:	1c11      	adds	r1, r2, #0
10005a1c:	1cfb      	adds	r3, r7, #3
10005a1e:	1c02      	adds	r2, r0, #0
10005a20:	701a      	strb	r2, [r3, #0]
10005a22:	1cbb      	adds	r3, r7, #2
10005a24:	1c0a      	adds	r2, r1, #0
10005a26:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10005a28:	687b      	ldr	r3, [r7, #4]
10005a2a:	22a8      	movs	r2, #168	; 0xa8
10005a2c:	589b      	ldr	r3, [r3, r2]
10005a2e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
10005a30:	1cfb      	adds	r3, r7, #3
10005a32:	781b      	ldrb	r3, [r3, #0]
10005a34:	2b09      	cmp	r3, #9
10005a36:	d81a      	bhi.n	10005a6e <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
10005a38:	009a      	lsls	r2, r3, #2
10005a3a:	4b1a      	ldr	r3, [pc, #104]	; (10005aa4 <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10005a3c:	18d3      	adds	r3, r2, r3
10005a3e:	681b      	ldr	r3, [r3, #0]
10005a40:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10005a42:	2303      	movs	r3, #3
10005a44:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
10005a46:	2300      	movs	r3, #0
10005a48:	617b      	str	r3, [r7, #20]
      break;
10005a4a:	e016      	b.n	10005a7a <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10005a4c:	230c      	movs	r3, #12
10005a4e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10005a50:	2302      	movs	r3, #2
10005a52:	617b      	str	r3, [r7, #20]
      break;
10005a54:	e011      	b.n	10005a7a <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
10005a56:	23c0      	movs	r3, #192	; 0xc0
10005a58:	009b      	lsls	r3, r3, #2
10005a5a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10005a5c:	2308      	movs	r3, #8
10005a5e:	617b      	str	r3, [r7, #20]
      break;
10005a60:	e00b      	b.n	10005a7a <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10005a62:	23c0      	movs	r3, #192	; 0xc0
10005a64:	011b      	lsls	r3, r3, #4
10005a66:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
10005a68:	230a      	movs	r3, #10
10005a6a:	617b      	str	r3, [r7, #20]
      break;
10005a6c:	e005      	b.n	10005a7a <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10005a6e:	23c0      	movs	r3, #192	; 0xc0
10005a70:	019b      	lsls	r3, r3, #6
10005a72:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10005a74:	230c      	movs	r3, #12
10005a76:	617b      	str	r3, [r7, #20]
      break;
10005a78:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
10005a7a:	693b      	ldr	r3, [r7, #16]
10005a7c:	43da      	mvns	r2, r3
10005a7e:	68fb      	ldr	r3, [r7, #12]
10005a80:	4013      	ands	r3, r2
10005a82:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10005a84:	1cbb      	adds	r3, r7, #2
10005a86:	781a      	ldrb	r2, [r3, #0]
10005a88:	697b      	ldr	r3, [r7, #20]
10005a8a:	409a      	lsls	r2, r3
10005a8c:	1c13      	adds	r3, r2, #0
10005a8e:	68fa      	ldr	r2, [r7, #12]
10005a90:	4313      	orrs	r3, r2
10005a92:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10005a94:	687b      	ldr	r3, [r7, #4]
10005a96:	21a8      	movs	r1, #168	; 0xa8
10005a98:	68fa      	ldr	r2, [r7, #12]
10005a9a:	505a      	str	r2, [r3, r1]
}
10005a9c:	46bd      	mov	sp, r7
10005a9e:	b006      	add	sp, #24
10005aa0:	bd80      	pop	{r7, pc}
10005aa2:	46c0      	nop			; (mov r8, r8)
10005aa4:	1000cdb8 	.word	0x1000cdb8

10005aa8 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
10005aa8:	b580      	push	{r7, lr}
10005aaa:	b084      	sub	sp, #16
10005aac:	af00      	add	r7, sp, #0
10005aae:	6078      	str	r0, [r7, #4]
10005ab0:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
10005ab2:	2310      	movs	r3, #16
10005ab4:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
10005ab6:	687b      	ldr	r3, [r7, #4]
10005ab8:	1c18      	adds	r0, r3, #0
10005aba:	f000 f897 	bl	10005bec <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
10005abe:	683b      	ldr	r3, [r7, #0]
10005ac0:	7a1b      	ldrb	r3, [r3, #8]
10005ac2:	2b00      	cmp	r3, #0
10005ac4:	d002      	beq.n	10005acc <XMC_UART_CH_Init+0x24>
  {
    oversampling = (uint32_t)config->oversampling;
10005ac6:	683b      	ldr	r3, [r7, #0]
10005ac8:	7a1b      	ldrb	r3, [r3, #8]
10005aca:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  if (config->normal_divider_mode)
10005acc:	683b      	ldr	r3, [r7, #0]
10005ace:	791b      	ldrb	r3, [r3, #4]
10005ad0:	2b00      	cmp	r3, #0
10005ad2:	d009      	beq.n	10005ae8 <XMC_UART_CH_Init+0x40>
  {
    /* Normal divider mode */
    (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
10005ad4:	683b      	ldr	r3, [r7, #0]
10005ad6:	681b      	ldr	r3, [r3, #0]
10005ad8:	1c19      	adds	r1, r3, #0
10005ada:	68fb      	ldr	r3, [r7, #12]
10005adc:	687a      	ldr	r2, [r7, #4]
10005ade:	1c10      	adds	r0, r2, #0
10005ae0:	1c1a      	adds	r2, r3, #0
10005ae2:	f000 f935 	bl	10005d50 <XMC_USIC_CH_SetBaudrateEx>
10005ae6:	e008      	b.n	10005afa <XMC_UART_CH_Init+0x52>
  }
  else
  {
    /* Fractional divider mode */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
10005ae8:	683b      	ldr	r3, [r7, #0]
10005aea:	681a      	ldr	r2, [r3, #0]
10005aec:	6879      	ldr	r1, [r7, #4]
10005aee:	68fb      	ldr	r3, [r7, #12]
10005af0:	1c08      	adds	r0, r1, #0
10005af2:	1c11      	adds	r1, r2, #0
10005af4:	1c1a      	adds	r2, r3, #0
10005af6:	f000 f8b5 	bl	10005c64 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10005afa:	683b      	ldr	r3, [r7, #0]
10005afc:	79db      	ldrb	r3, [r3, #7]
10005afe:	3b01      	subs	r3, #1
10005b00:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
10005b02:	68fb      	ldr	r3, [r7, #12]
10005b04:	085b      	lsrs	r3, r3, #1
10005b06:	3301      	adds	r3, #1
10005b08:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
10005b0a:	4313      	orrs	r3, r2
10005b0c:	4a19      	ldr	r2, [pc, #100]	; (10005b74 <XMC_UART_CH_Init+0xcc>)
10005b0e:	431a      	orrs	r2, r3
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
10005b14:	683b      	ldr	r3, [r7, #0]
10005b16:	795b      	ldrb	r3, [r3, #5]
10005b18:	3b01      	subs	r3, #1
10005b1a:	061b      	lsls	r3, r3, #24
10005b1c:	2281      	movs	r2, #129	; 0x81
10005b1e:	0052      	lsls	r2, r2, #1
10005b20:	431a      	orrs	r2, r3
10005b22:	687b      	ldr	r3, [r7, #4]
10005b24:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
10005b26:	683b      	ldr	r3, [r7, #0]
10005b28:	799b      	ldrb	r3, [r3, #6]
10005b2a:	2b00      	cmp	r3, #0
10005b2c:	d009      	beq.n	10005b42 <XMC_UART_CH_Init+0x9a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
10005b2e:	687b      	ldr	r3, [r7, #4]
10005b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005b32:	683b      	ldr	r3, [r7, #0]
10005b34:	799b      	ldrb	r3, [r3, #6]
10005b36:	3b01      	subs	r3, #1
10005b38:	041b      	lsls	r3, r3, #16
10005b3a:	431a      	orrs	r2, r3
10005b3c:	687b      	ldr	r3, [r7, #4]
10005b3e:	635a      	str	r2, [r3, #52]	; 0x34
10005b40:	e008      	b.n	10005b54 <XMC_UART_CH_Init+0xac>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
10005b42:	687b      	ldr	r3, [r7, #4]
10005b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005b46:	683b      	ldr	r3, [r7, #0]
10005b48:	795b      	ldrb	r3, [r3, #5]
10005b4a:	3b01      	subs	r3, #1
10005b4c:	041b      	lsls	r3, r3, #16
10005b4e:	431a      	orrs	r2, r3
10005b50:	687b      	ldr	r3, [r7, #4]
10005b52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
10005b54:	687b      	ldr	r3, [r7, #4]
10005b56:	22a0      	movs	r2, #160	; 0xa0
10005b58:	00d2      	lsls	r2, r2, #3
10005b5a:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
10005b5c:	687b      	ldr	r3, [r7, #4]
10005b5e:	2201      	movs	r2, #1
10005b60:	4252      	negs	r2, r2
10005b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
10005b64:	683b      	ldr	r3, [r7, #0]
10005b66:	895b      	ldrh	r3, [r3, #10]
10005b68:	1c1a      	adds	r2, r3, #0
10005b6a:	687b      	ldr	r3, [r7, #4]
10005b6c:	641a      	str	r2, [r3, #64]	; 0x40
}
10005b6e:	46bd      	mov	sp, r7
10005b70:	b004      	add	sp, #16
10005b72:	bd80      	pop	{r7, pc}
10005b74:	00030001 	.word	0x00030001

10005b78 <XMC_UART_CH_GetReceivedData>:
    channel->IN[0U] = data;
  }
}

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
10005b78:	b580      	push	{r7, lr}
10005b7a:	b084      	sub	sp, #16
10005b7c:	af00      	add	r7, sp, #0
10005b7e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
10005b80:	687a      	ldr	r2, [r7, #4]
10005b82:	2386      	movs	r3, #134	; 0x86
10005b84:	005b      	lsls	r3, r3, #1
10005b86:	58d2      	ldr	r2, [r2, r3]
10005b88:	23e0      	movs	r3, #224	; 0xe0
10005b8a:	04db      	lsls	r3, r3, #19
10005b8c:	4013      	ands	r3, r2
10005b8e:	d105      	bne.n	10005b9c <XMC_UART_CH_GetReceivedData+0x24>
  {
    retval = (uint16_t)channel->RBUF;
10005b90:	687b      	ldr	r3, [r7, #4]
10005b92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10005b94:	230e      	movs	r3, #14
10005b96:	18fb      	adds	r3, r7, r3
10005b98:	801a      	strh	r2, [r3, #0]
10005b9a:	e006      	b.n	10005baa <XMC_UART_CH_GetReceivedData+0x32>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
10005b9c:	687a      	ldr	r2, [r7, #4]
10005b9e:	238e      	movs	r3, #142	; 0x8e
10005ba0:	005b      	lsls	r3, r3, #1
10005ba2:	58d2      	ldr	r2, [r2, r3]
10005ba4:	230e      	movs	r3, #14
10005ba6:	18fb      	adds	r3, r7, r3
10005ba8:	801a      	strh	r2, [r3, #0]
  }

  return retval;
10005baa:	230e      	movs	r3, #14
10005bac:	18fb      	adds	r3, r7, r3
10005bae:	881b      	ldrh	r3, [r3, #0]
}
10005bb0:	1c18      	adds	r0, r3, #0
10005bb2:	46bd      	mov	sp, r7
10005bb4:	b004      	add	sp, #16
10005bb6:	bd80      	pop	{r7, pc}

10005bb8 <XMC_UART_CH_EnableEvent>:
  }
  return status;
}

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
10005bb8:	b580      	push	{r7, lr}
10005bba:	b082      	sub	sp, #8
10005bbc:	af00      	add	r7, sp, #0
10005bbe:	6078      	str	r0, [r7, #4]
10005bc0:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
10005bc2:	687b      	ldr	r3, [r7, #4]
10005bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005bc6:	6839      	ldr	r1, [r7, #0]
10005bc8:	23fe      	movs	r3, #254	; 0xfe
10005bca:	025b      	lsls	r3, r3, #9
10005bcc:	400b      	ands	r3, r1
10005bce:	431a      	orrs	r2, r3
10005bd0:	687b      	ldr	r3, [r7, #4]
10005bd2:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_ASCMode |= (event&0xf8U);
10005bd4:	687b      	ldr	r3, [r7, #4]
10005bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005bd8:	683b      	ldr	r3, [r7, #0]
10005bda:	21f8      	movs	r1, #248	; 0xf8
10005bdc:	400b      	ands	r3, r1
10005bde:	431a      	orrs	r2, r3
10005be0:	687b      	ldr	r3, [r7, #4]
10005be2:	63da      	str	r2, [r3, #60]	; 0x3c
}
10005be4:	46bd      	mov	sp, r7
10005be6:	b002      	add	sp, #8
10005be8:	bd80      	pop	{r7, pc}
10005bea:	46c0      	nop			; (mov r8, r8)

10005bec <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
10005bec:	b580      	push	{r7, lr}
10005bee:	b082      	sub	sp, #8
10005bf0:	af00      	add	r7, sp, #0
10005bf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
10005bf4:	687a      	ldr	r2, [r7, #4]
10005bf6:	2390      	movs	r3, #144	; 0x90
10005bf8:	05db      	lsls	r3, r3, #23
10005bfa:	429a      	cmp	r2, r3
10005bfc:	d003      	beq.n	10005c06 <XMC_USIC_CH_Enable+0x1a>
10005bfe:	687b      	ldr	r3, [r7, #4]
10005c00:	4a13      	ldr	r2, [pc, #76]	; (10005c50 <XMC_USIC_CH_Enable+0x64>)
10005c02:	4293      	cmp	r3, r2
10005c04:	d104      	bne.n	10005c10 <XMC_USIC_CH_Enable+0x24>
  {
    XMC_USIC_Enable(XMC_USIC0);
10005c06:	4b13      	ldr	r3, [pc, #76]	; (10005c54 <XMC_USIC_CH_Enable+0x68>)
10005c08:	1c18      	adds	r0, r3, #0
10005c0a:	f000 f947 	bl	10005e9c <XMC_USIC_Enable>
10005c0e:	e00b      	b.n	10005c28 <XMC_USIC_CH_Enable+0x3c>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
10005c10:	687b      	ldr	r3, [r7, #4]
10005c12:	4a11      	ldr	r2, [pc, #68]	; (10005c58 <XMC_USIC_CH_Enable+0x6c>)
10005c14:	4293      	cmp	r3, r2
10005c16:	d003      	beq.n	10005c20 <XMC_USIC_CH_Enable+0x34>
10005c18:	687b      	ldr	r3, [r7, #4]
10005c1a:	4a10      	ldr	r2, [pc, #64]	; (10005c5c <XMC_USIC_CH_Enable+0x70>)
10005c1c:	4293      	cmp	r3, r2
10005c1e:	d103      	bne.n	10005c28 <XMC_USIC_CH_Enable+0x3c>
  {
    XMC_USIC_Enable(XMC_USIC1);
10005c20:	4b0f      	ldr	r3, [pc, #60]	; (10005c60 <XMC_USIC_CH_Enable+0x74>)
10005c22:	1c18      	adds	r0, r3, #0
10005c24:	f000 f93a 	bl	10005e9c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
10005c28:	687b      	ldr	r3, [r7, #4]
10005c2a:	2203      	movs	r2, #3
10005c2c:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
10005c2e:	46c0      	nop			; (mov r8, r8)
10005c30:	687b      	ldr	r3, [r7, #4]
10005c32:	68db      	ldr	r3, [r3, #12]
10005c34:	2201      	movs	r2, #1
10005c36:	4013      	ands	r3, r2
10005c38:	d0fa      	beq.n	10005c30 <XMC_USIC_CH_Enable+0x44>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
10005c3a:	687b      	ldr	r3, [r7, #4]
10005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10005c3e:	220f      	movs	r2, #15
10005c40:	4393      	bics	r3, r2
10005c42:	1c1a      	adds	r2, r3, #0
10005c44:	687b      	ldr	r3, [r7, #4]
10005c46:	641a      	str	r2, [r3, #64]	; 0x40
}
10005c48:	46bd      	mov	sp, r7
10005c4a:	b002      	add	sp, #8
10005c4c:	bd80      	pop	{r7, pc}
10005c4e:	46c0      	nop			; (mov r8, r8)
10005c50:	48000200 	.word	0x48000200
10005c54:	48000008 	.word	0x48000008
10005c58:	48004000 	.word	0x48004000
10005c5c:	48004200 	.word	0x48004200
10005c60:	48004008 	.word	0x48004008

10005c64 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
10005c64:	b580      	push	{r7, lr}
10005c66:	b08e      	sub	sp, #56	; 0x38
10005c68:	af00      	add	r7, sp, #0
10005c6a:	60f8      	str	r0, [r7, #12]
10005c6c:	60b9      	str	r1, [r7, #8]
10005c6e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
10005c70:	68bb      	ldr	r3, [r7, #8]
10005c72:	2b63      	cmp	r3, #99	; 0x63
10005c74:	d95c      	bls.n	10005d30 <XMC_USIC_CH_SetBaudrate+0xcc>
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	2b00      	cmp	r3, #0
10005c7a:	d059      	beq.n	10005d30 <XMC_USIC_CH_SetBaudrate+0xcc>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
10005c7c:	f7ff f93e 	bl	10004efc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10005c80:	1c03      	adds	r3, r0, #0
10005c82:	1c18      	adds	r0, r3, #0
10005c84:	2164      	movs	r1, #100	; 0x64
10005c86:	f000 fd75 	bl	10006774 <__aeabi_uidiv>
10005c8a:	1c03      	adds	r3, r0, #0
10005c8c:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
10005c8e:	68bb      	ldr	r3, [r7, #8]
10005c90:	1c18      	adds	r0, r3, #0
10005c92:	2164      	movs	r1, #100	; 0x64
10005c94:	f000 fd6e 	bl	10006774 <__aeabi_uidiv>
10005c98:	1c03      	adds	r3, r0, #0
10005c9a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
10005c9c:	2301      	movs	r3, #1
10005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
10005ca0:	2301      	movs	r3, #1
10005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
10005ca4:	4b28      	ldr	r3, [pc, #160]	; (10005d48 <XMC_USIC_CH_SetBaudrate+0xe4>)
10005ca6:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10005ca8:	4b27      	ldr	r3, [pc, #156]	; (10005d48 <XMC_USIC_CH_SetBaudrate+0xe4>)
10005caa:	633b      	str	r3, [r7, #48]	; 0x30
10005cac:	e024      	b.n	10005cf8 <XMC_USIC_CH_SetBaudrate+0x94>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
10005cae:	6a3b      	ldr	r3, [r7, #32]
10005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10005cb2:	435a      	muls	r2, r3
10005cb4:	1c11      	adds	r1, r2, #0
10005cb6:	68bb      	ldr	r3, [r7, #8]
10005cb8:	687a      	ldr	r2, [r7, #4]
10005cba:	4353      	muls	r3, r2
10005cbc:	1c08      	adds	r0, r1, #0
10005cbe:	1c19      	adds	r1, r3, #0
10005cc0:	f000 fd58 	bl	10006774 <__aeabi_uidiv>
10005cc4:	1c03      	adds	r3, r0, #0
10005cc6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
10005cc8:	69fb      	ldr	r3, [r7, #28]
10005cca:	0a9b      	lsrs	r3, r3, #10
10005ccc:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
10005cce:	69fb      	ldr	r3, [r7, #28]
10005cd0:	059b      	lsls	r3, r3, #22
10005cd2:	0d9b      	lsrs	r3, r3, #22
10005cd4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
10005cd6:	69bb      	ldr	r3, [r7, #24]
10005cd8:	4a1b      	ldr	r2, [pc, #108]	; (10005d48 <XMC_USIC_CH_SetBaudrate+0xe4>)
10005cda:	4293      	cmp	r3, r2
10005cdc:	d809      	bhi.n	10005cf2 <XMC_USIC_CH_SetBaudrate+0x8e>
10005cde:	697a      	ldr	r2, [r7, #20]
10005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10005ce2:	429a      	cmp	r2, r3
10005ce4:	d205      	bcs.n	10005cf2 <XMC_USIC_CH_SetBaudrate+0x8e>
      {
        pdiv_frac_min = pdiv_frac;
10005ce6:	697b      	ldr	r3, [r7, #20]
10005ce8:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
10005cea:	69bb      	ldr	r3, [r7, #24]
10005cec:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
10005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
10005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005cf4:	3b01      	subs	r3, #1
10005cf6:	633b      	str	r3, [r7, #48]	; 0x30
10005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005cfa:	2b00      	cmp	r3, #0
10005cfc:	d1d7      	bne.n	10005cae <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
10005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005d00:	2280      	movs	r2, #128	; 0x80
10005d02:	0212      	lsls	r2, r2, #8
10005d04:	431a      	orrs	r2, r3
10005d06:	68fb      	ldr	r3, [r7, #12]
10005d08:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005d0a:	68fb      	ldr	r3, [r7, #12]
10005d0c:	695b      	ldr	r3, [r3, #20]
10005d0e:	4a0f      	ldr	r2, [pc, #60]	; (10005d4c <XMC_USIC_CH_SetBaudrate+0xe8>)
10005d10:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005d12:	687b      	ldr	r3, [r7, #4]
10005d14:	3b01      	subs	r3, #1
10005d16:	029b      	lsls	r3, r3, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10005d18:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
10005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005d1c:	3b01      	subs	r3, #1
10005d1e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005d20:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005d22:	68fb      	ldr	r3, [r7, #12]
10005d24:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
10005d26:	2337      	movs	r3, #55	; 0x37
10005d28:	18fb      	adds	r3, r7, r3
10005d2a:	2200      	movs	r2, #0
10005d2c:	701a      	strb	r2, [r3, #0]
10005d2e:	e003      	b.n	10005d38 <XMC_USIC_CH_SetBaudrate+0xd4>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10005d30:	2337      	movs	r3, #55	; 0x37
10005d32:	18fb      	adds	r3, r7, r3
10005d34:	2201      	movs	r2, #1
10005d36:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
10005d38:	2337      	movs	r3, #55	; 0x37
10005d3a:	18fb      	adds	r3, r7, r3
10005d3c:	781b      	ldrb	r3, [r3, #0]
}
10005d3e:	1c18      	adds	r0, r3, #0
10005d40:	46bd      	mov	sp, r7
10005d42:	b00e      	add	sp, #56	; 0x38
10005d44:	bd80      	pop	{r7, pc}
10005d46:	46c0      	nop			; (mov r8, r8)
10005d48:	000003ff 	.word	0x000003ff
10005d4c:	fc0080ef 	.word	0xfc0080ef

10005d50 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
10005d50:	b580      	push	{r7, lr}
10005d52:	b08c      	sub	sp, #48	; 0x30
10005d54:	af00      	add	r7, sp, #0
10005d56:	60f8      	str	r0, [r7, #12]
10005d58:	60b9      	str	r1, [r7, #8]
10005d5a:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
10005d5c:	f7ff f8ce 	bl	10004efc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
10005d60:	1c03      	adds	r3, r0, #0
10005d62:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
10005d64:	68bb      	ldr	r3, [r7, #8]
10005d66:	687a      	ldr	r2, [r7, #4]
10005d68:	4353      	muls	r3, r2
10005d6a:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
10005d6c:	2301      	movs	r3, #1
10005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
10005d70:	6a3a      	ldr	r2, [r7, #32]
10005d72:	69fb      	ldr	r3, [r7, #28]
10005d74:	429a      	cmp	r2, r3
10005d76:	dd62      	ble.n	10005e3e <XMC_USIC_CH_SetBaudrateEx+0xee>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10005d78:	6a38      	ldr	r0, [r7, #32]
10005d7a:	69f9      	ldr	r1, [r7, #28]
10005d7c:	f000 fd8a 	bl	10006894 <__aeabi_idiv>
10005d80:	1c03      	adds	r3, r0, #0
10005d82:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
10005d84:	e00f      	b.n	10005da6 <XMC_USIC_CH_SetBaudrateEx+0x56>
    {
      pdiv++;
10005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005d88:	3301      	adds	r3, #1
10005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
10005d8c:	68bb      	ldr	r3, [r7, #8]
10005d8e:	687a      	ldr	r2, [r7, #4]
10005d90:	4353      	muls	r3, r2
10005d92:	1c1a      	adds	r2, r3, #0
10005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005d96:	4353      	muls	r3, r2
10005d98:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
10005d9a:	6a38      	ldr	r0, [r7, #32]
10005d9c:	69f9      	ldr	r1, [r7, #28]
10005d9e:	f000 fd79 	bl	10006894 <__aeabi_idiv>
10005da2:	1c03      	adds	r3, r0, #0
10005da4:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
10005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005da8:	4a2a      	ldr	r2, [pc, #168]	; (10005e54 <XMC_USIC_CH_SetBaudrateEx+0x104>)
10005daa:	4293      	cmp	r3, r2
10005dac:	d8eb      	bhi.n	10005d86 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
10005dae:	6a39      	ldr	r1, [r7, #32]
10005db0:	687b      	ldr	r3, [r7, #4]
10005db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
10005db4:	4353      	muls	r3, r2
10005db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005db8:	4353      	muls	r3, r2
10005dba:	1c08      	adds	r0, r1, #0
10005dbc:	1c19      	adds	r1, r3, #0
10005dbe:	f000 fcd9 	bl	10006774 <__aeabi_uidiv>
10005dc2:	1c03      	adds	r3, r0, #0
10005dc4:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
10005dc6:	6a39      	ldr	r1, [r7, #32]
10005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005dca:	3301      	adds	r3, #1
10005dcc:	687a      	ldr	r2, [r7, #4]
10005dce:	4353      	muls	r3, r2
10005dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10005dd2:	4353      	muls	r3, r2
10005dd4:	1c08      	adds	r0, r1, #0
10005dd6:	1c19      	adds	r1, r3, #0
10005dd8:	f000 fccc 	bl	10006774 <__aeabi_uidiv>
10005ddc:	1c03      	adds	r3, r0, #0
10005dde:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
10005de0:	68ba      	ldr	r2, [r7, #8]
10005de2:	697b      	ldr	r3, [r7, #20]
10005de4:	1ad3      	subs	r3, r2, r3
10005de6:	17d9      	asrs	r1, r3, #31
10005de8:	185a      	adds	r2, r3, r1
10005dea:	404a      	eors	r2, r1
10005dec:	68b9      	ldr	r1, [r7, #8]
10005dee:	69bb      	ldr	r3, [r7, #24]
10005df0:	1acb      	subs	r3, r1, r3
10005df2:	17d9      	asrs	r1, r3, #31
10005df4:	185b      	adds	r3, r3, r1
10005df6:	404b      	eors	r3, r1
10005df8:	429a      	cmp	r2, r3
10005dfa:	da02      	bge.n	10005e02 <XMC_USIC_CH_SetBaudrateEx+0xb2>
    {
      divider_step += 1;
10005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005dfe:	3301      	adds	r3, #1
10005e00:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
10005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005e04:	2280      	movs	r2, #128	; 0x80
10005e06:	00d2      	lsls	r2, r2, #3
10005e08:	1ad3      	subs	r3, r2, r3
10005e0a:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
10005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
10005e0e:	2280      	movs	r2, #128	; 0x80
10005e10:	01d2      	lsls	r2, r2, #7
10005e12:	431a      	orrs	r2, r3
10005e14:	68fb      	ldr	r3, [r7, #12]
10005e16:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005e18:	68fb      	ldr	r3, [r7, #12]
10005e1a:	695b      	ldr	r3, [r3, #20]
10005e1c:	4a0e      	ldr	r2, [pc, #56]	; (10005e58 <XMC_USIC_CH_SetBaudrateEx+0x108>)
10005e1e:	401a      	ands	r2, r3
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005e20:	687b      	ldr	r3, [r7, #4]
10005e22:	3b01      	subs	r3, #1
10005e24:	029b      	lsls	r3, r3, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
10005e26:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
10005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10005e2a:	3b01      	subs	r3, #1
10005e2c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
10005e2e:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
10005e30:	68fb      	ldr	r3, [r7, #12]
10005e32:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
10005e34:	2327      	movs	r3, #39	; 0x27
10005e36:	18fb      	adds	r3, r7, r3
10005e38:	2200      	movs	r2, #0
10005e3a:	701a      	strb	r2, [r3, #0]
10005e3c:	e003      	b.n	10005e46 <XMC_USIC_CH_SetBaudrateEx+0xf6>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
10005e3e:	2327      	movs	r3, #39	; 0x27
10005e40:	18fb      	adds	r3, r7, r3
10005e42:	2201      	movs	r2, #1
10005e44:	701a      	strb	r2, [r3, #0]
  }

  return status;
10005e46:	2327      	movs	r3, #39	; 0x27
10005e48:	18fb      	adds	r3, r7, r3
10005e4a:	781b      	ldrb	r3, [r3, #0]
}
10005e4c:	1c18      	adds	r0, r3, #0
10005e4e:	46bd      	mov	sp, r7
10005e50:	b00c      	add	sp, #48	; 0x30
10005e52:	bd80      	pop	{r7, pc}
10005e54:	000003fe 	.word	0x000003fe
10005e58:	fc0080ef 	.word	0xfc0080ef

10005e5c <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
10005e5c:	b580      	push	{r7, lr}
10005e5e:	b084      	sub	sp, #16
10005e60:	af00      	add	r7, sp, #0
10005e62:	60f8      	str	r0, [r7, #12]
10005e64:	607a      	str	r2, [r7, #4]
10005e66:	230b      	movs	r3, #11
10005e68:	18fb      	adds	r3, r7, r3
10005e6a:	1c0a      	adds	r2, r1, #0
10005e6c:	701a      	strb	r2, [r3, #0]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10005e6e:	68fb      	ldr	r3, [r7, #12]
10005e70:	699b      	ldr	r3, [r3, #24]
10005e72:	220b      	movs	r2, #11
10005e74:	18ba      	adds	r2, r7, r2
10005e76:	7812      	ldrb	r2, [r2, #0]
10005e78:	2107      	movs	r1, #7
10005e7a:	4091      	lsls	r1, r2
10005e7c:	1c0a      	adds	r2, r1, #0
10005e7e:	43d2      	mvns	r2, r2
10005e80:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
10005e82:	230b      	movs	r3, #11
10005e84:	18fb      	adds	r3, r7, r3
10005e86:	781b      	ldrb	r3, [r3, #0]
10005e88:	6879      	ldr	r1, [r7, #4]
10005e8a:	4099      	lsls	r1, r3
10005e8c:	1c0b      	adds	r3, r1, #0

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
10005e8e:	431a      	orrs	r2, r3
10005e90:	68fb      	ldr	r3, [r7, #12]
10005e92:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
10005e94:	46bd      	mov	sp, r7
10005e96:	b004      	add	sp, #16
10005e98:	bd80      	pop	{r7, pc}
10005e9a:	46c0      	nop			; (mov r8, r8)

10005e9c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
10005e9c:	b580      	push	{r7, lr}
10005e9e:	b082      	sub	sp, #8
10005ea0:	af00      	add	r7, sp, #0
10005ea2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
10005ea4:	687b      	ldr	r3, [r7, #4]
10005ea6:	4a10      	ldr	r2, [pc, #64]	; (10005ee8 <XMC_USIC_Enable+0x4c>)
10005ea8:	4293      	cmp	r3, r2
10005eaa:	d109      	bne.n	10005ec0 <XMC_USIC_Enable+0x24>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
10005eac:	2008      	movs	r0, #8
10005eae:	f7fe fff9 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
10005eb2:	46c0      	nop			; (mov r8, r8)
10005eb4:	2008      	movs	r0, #8
10005eb6:	f7ff f80f 	bl	10004ed8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10005eba:	1e03      	subs	r3, r0, #0
10005ebc:	d1fa      	bne.n	10005eb4 <XMC_USIC_Enable+0x18>
10005ebe:	e010      	b.n	10005ee2 <XMC_USIC_Enable+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
10005ec0:	687b      	ldr	r3, [r7, #4]
10005ec2:	4a0a      	ldr	r2, [pc, #40]	; (10005eec <XMC_USIC_Enable+0x50>)
10005ec4:	4293      	cmp	r3, r2
10005ec6:	d10c      	bne.n	10005ee2 <XMC_USIC_Enable+0x46>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
10005ec8:	2380      	movs	r3, #128	; 0x80
10005eca:	02db      	lsls	r3, r3, #11
10005ecc:	1c18      	adds	r0, r3, #0
10005ece:	f7fe ffe9 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
10005ed2:	46c0      	nop			; (mov r8, r8)
10005ed4:	2380      	movs	r3, #128	; 0x80
10005ed6:	02db      	lsls	r3, r3, #11
10005ed8:	1c18      	adds	r0, r3, #0
10005eda:	f7fe fffd 	bl	10004ed8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
10005ede:	1e03      	subs	r3, r0, #0
10005ee0:	d1f8      	bne.n	10005ed4 <XMC_USIC_Enable+0x38>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
10005ee2:	46bd      	mov	sp, r7
10005ee4:	b002      	add	sp, #8
10005ee6:	bd80      	pop	{r7, pc}
10005ee8:	48000008 	.word	0x48000008
10005eec:	48004008 	.word	0x48004008

10005ef0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
10005ef0:	b580      	push	{r7, lr}
10005ef2:	b084      	sub	sp, #16
10005ef4:	af00      	add	r7, sp, #0
10005ef6:	6078      	str	r0, [r7, #4]
10005ef8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10005efa:	1c3b      	adds	r3, r7, #0
10005efc:	781b      	ldrb	r3, [r3, #0]
10005efe:	075b      	lsls	r3, r3, #29
10005f00:	0f5b      	lsrs	r3, r3, #29
10005f02:	b2db      	uxtb	r3, r3
10005f04:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
10005f06:	1cbb      	adds	r3, r7, #2
10005f08:	881b      	ldrh	r3, [r3, #0]
10005f0a:	059b      	lsls	r3, r3, #22
10005f0c:	0d9b      	lsrs	r3, r3, #22
10005f0e:	b29b      	uxth	r3, r3
10005f10:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
10005f12:	4313      	orrs	r3, r2
10005f14:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
10005f16:	687a      	ldr	r2, [r7, #4]
10005f18:	23f8      	movs	r3, #248	; 0xf8
10005f1a:	005b      	lsls	r3, r3, #1
10005f1c:	68f9      	ldr	r1, [r7, #12]
10005f1e:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005f20:	1cfb      	adds	r3, r7, #3
10005f22:	781b      	ldrb	r3, [r3, #0]
10005f24:	06db      	lsls	r3, r3, #27
10005f26:	0fdb      	lsrs	r3, r3, #31
10005f28:	b2db      	uxtb	r3, r3
10005f2a:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
10005f2c:	1cfb      	adds	r3, r7, #3
10005f2e:	781b      	ldrb	r3, [r3, #0]
10005f30:	071b      	lsls	r3, r3, #28
10005f32:	0f9b      	lsrs	r3, r3, #30
10005f34:	b2db      	uxtb	r3, r3
10005f36:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005f38:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
10005f3a:	1cfb      	adds	r3, r7, #3
10005f3c:	781b      	ldrb	r3, [r3, #0]
10005f3e:	069b      	lsls	r3, r3, #26
10005f40:	0fdb      	lsrs	r3, r3, #31
10005f42:	b2db      	uxtb	r3, r3
10005f44:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10005f46:	4313      	orrs	r3, r2
10005f48:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
10005f4a:	1cfb      	adds	r3, r7, #3
10005f4c:	781b      	ldrb	r3, [r3, #0]
10005f4e:	065b      	lsls	r3, r3, #25
10005f50:	0fdb      	lsrs	r3, r3, #31
10005f52:	b2db      	uxtb	r3, r3
10005f54:	079b      	lsls	r3, r3, #30
10005f56:	68fa      	ldr	r2, [r7, #12]
10005f58:	4313      	orrs	r3, r2
10005f5a:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10005f5c:	687a      	ldr	r2, [r7, #4]
10005f5e:	23f8      	movs	r3, #248	; 0xf8
10005f60:	005b      	lsls	r3, r3, #1
10005f62:	58d2      	ldr	r2, [r2, r3]
10005f64:	68fb      	ldr	r3, [r7, #12]
10005f66:	4313      	orrs	r3, r2
10005f68:	2280      	movs	r2, #128	; 0x80
10005f6a:	0612      	lsls	r2, r2, #24
10005f6c:	431a      	orrs	r2, r3
10005f6e:	1c11      	adds	r1, r2, #0
10005f70:	687a      	ldr	r2, [r7, #4]
10005f72:	23f8      	movs	r3, #248	; 0xf8
10005f74:	005b      	lsls	r3, r3, #1
10005f76:	50d1      	str	r1, [r2, r3]
}
10005f78:	46bd      	mov	sp, r7
10005f7a:	b004      	add	sp, #16
10005f7c:	bd80      	pop	{r7, pc}
10005f7e:	46c0      	nop			; (mov r8, r8)

10005f80 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10005f80:	b580      	push	{r7, lr}
10005f82:	b082      	sub	sp, #8
10005f84:	af00      	add	r7, sp, #0
10005f86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
10005f88:	687b      	ldr	r3, [r7, #4]
10005f8a:	2284      	movs	r2, #132	; 0x84
10005f8c:	589b      	ldr	r3, [r3, r2]
10005f8e:	2280      	movs	r2, #128	; 0x80
10005f90:	0452      	lsls	r2, r2, #17
10005f92:	431a      	orrs	r2, r3
10005f94:	687b      	ldr	r3, [r7, #4]
10005f96:	2184      	movs	r1, #132	; 0x84
10005f98:	505a      	str	r2, [r3, r1]
}
10005f9a:	46bd      	mov	sp, r7
10005f9c:	b002      	add	sp, #8
10005f9e:	bd80      	pop	{r7, pc}

10005fa0 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10005fa0:	b580      	push	{r7, lr}
10005fa2:	b082      	sub	sp, #8
10005fa4:	af00      	add	r7, sp, #0
10005fa6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
10005fa8:	687b      	ldr	r3, [r7, #4]
10005faa:	2284      	movs	r2, #132	; 0x84
10005fac:	589b      	ldr	r3, [r3, r2]
10005fae:	4a04      	ldr	r2, [pc, #16]	; (10005fc0 <XMC_VADC_GROUP_QueueDisableArbitrationSlot+0x20>)
10005fb0:	401a      	ands	r2, r3
10005fb2:	687b      	ldr	r3, [r7, #4]
10005fb4:	2184      	movs	r1, #132	; 0x84
10005fb6:	505a      	str	r2, [r3, r1]
}
10005fb8:	46bd      	mov	sp, r7
10005fba:	b002      	add	sp, #8
10005fbc:	bd80      	pop	{r7, pc}
10005fbe:	46c0      	nop			; (mov r8, r8)
10005fc0:	feffffff 	.word	0xfeffffff

10005fc4 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10005fc4:	b580      	push	{r7, lr}
10005fc6:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10005fc8:	2001      	movs	r0, #1
10005fca:	f7fe ff6b 	bl	10004ea4 <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10005fce:	46bd      	mov	sp, r7
10005fd0:	bd80      	pop	{r7, pc}
10005fd2:	46c0      	nop			; (mov r8, r8)

10005fd4 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10005fd4:	b580      	push	{r7, lr}
10005fd6:	b082      	sub	sp, #8
10005fd8:	af00      	add	r7, sp, #0
10005fda:	6078      	str	r0, [r7, #4]
10005fdc:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10005fde:	f7ff fff1 	bl	10005fc4 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10005fe2:	683b      	ldr	r3, [r7, #0]
10005fe4:	695a      	ldr	r2, [r3, #20]
10005fe6:	687b      	ldr	r3, [r7, #4]
10005fe8:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10005fea:	683b      	ldr	r3, [r7, #0]
10005fec:	685b      	ldr	r3, [r3, #4]
10005fee:	2280      	movs	r2, #128	; 0x80
10005ff0:	0212      	lsls	r2, r2, #8
10005ff2:	431a      	orrs	r2, r3
10005ff4:	687b      	ldr	r3, [r7, #4]
10005ff6:	2180      	movs	r1, #128	; 0x80
10005ff8:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10005ffa:	683b      	ldr	r3, [r7, #0]
10005ffc:	689a      	ldr	r2, [r3, #8]
10005ffe:	687b      	ldr	r3, [r7, #4]
10006000:	21a0      	movs	r1, #160	; 0xa0
10006002:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10006004:	683b      	ldr	r3, [r7, #0]
10006006:	68da      	ldr	r2, [r3, #12]
10006008:	687b      	ldr	r3, [r7, #4]
1000600a:	21a4      	movs	r1, #164	; 0xa4
1000600c:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
1000600e:	683b      	ldr	r3, [r7, #0]
10006010:	6919      	ldr	r1, [r3, #16]
10006012:	687a      	ldr	r2, [r7, #4]
10006014:	23a0      	movs	r3, #160	; 0xa0
10006016:	009b      	lsls	r3, r3, #2
10006018:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
1000601a:	683b      	ldr	r3, [r7, #0]
1000601c:	681a      	ldr	r2, [r3, #0]
1000601e:	687b      	ldr	r3, [r7, #4]
10006020:	21b8      	movs	r1, #184	; 0xb8
10006022:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10006024:	46bd      	mov	sp, r7
10006026:	b002      	add	sp, #8
10006028:	bd80      	pop	{r7, pc}
1000602a:	46c0      	nop			; (mov r8, r8)

1000602c <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
1000602c:	b580      	push	{r7, lr}
1000602e:	b084      	sub	sp, #16
10006030:	af00      	add	r7, sp, #0
10006032:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10006034:	687b      	ldr	r3, [r7, #4]
10006036:	2280      	movs	r2, #128	; 0x80
10006038:	589b      	ldr	r3, [r3, r2]
1000603a:	2280      	movs	r2, #128	; 0x80
1000603c:	0612      	lsls	r2, r2, #24
1000603e:	431a      	orrs	r2, r3
10006040:	687b      	ldr	r3, [r7, #4]
10006042:	2180      	movs	r1, #128	; 0x80
10006044:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10006046:	230f      	movs	r3, #15
10006048:	18fb      	adds	r3, r7, r3
1000604a:	2200      	movs	r2, #0
1000604c:	701a      	strb	r2, [r3, #0]
1000604e:	e01d      	b.n	1000608c <XMC_VADC_GLOBAL_StartupCalibration+0x60>
  {
    group_ptr = g_xmc_vadc_group_array[i];
10006050:	230f      	movs	r3, #15
10006052:	18fb      	adds	r3, r7, r3
10006054:	781a      	ldrb	r2, [r3, #0]
10006056:	4b11      	ldr	r3, [pc, #68]	; (1000609c <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
10006058:	0092      	lsls	r2, r2, #2
1000605a:	58d3      	ldr	r3, [r2, r3]
1000605c:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
1000605e:	68bb      	ldr	r3, [r7, #8]
10006060:	2280      	movs	r2, #128	; 0x80
10006062:	589a      	ldr	r2, [r3, r2]
10006064:	23c0      	movs	r3, #192	; 0xc0
10006066:	029b      	lsls	r3, r3, #10
10006068:	4013      	ands	r3, r2
1000606a:	d008      	beq.n	1000607e <XMC_VADC_GLOBAL_StartupCalibration+0x52>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
1000606c:	e000      	b.n	10006070 <XMC_VADC_GLOBAL_StartupCalibration+0x44>
      {
        __NOP();
1000606e:	46c0      	nop			; (mov r8, r8)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10006070:	68bb      	ldr	r3, [r7, #8]
10006072:	2280      	movs	r2, #128	; 0x80
10006074:	589a      	ldr	r2, [r3, r2]
10006076:	2380      	movs	r3, #128	; 0x80
10006078:	055b      	lsls	r3, r3, #21
1000607a:	4013      	ands	r3, r2
1000607c:	d1f7      	bne.n	1000606e <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
1000607e:	230f      	movs	r3, #15
10006080:	18fb      	adds	r3, r7, r3
10006082:	781a      	ldrb	r2, [r3, #0]
10006084:	230f      	movs	r3, #15
10006086:	18fb      	adds	r3, r7, r3
10006088:	3201      	adds	r2, #1
1000608a:	701a      	strb	r2, [r3, #0]
1000608c:	230f      	movs	r3, #15
1000608e:	18fb      	adds	r3, r7, r3
10006090:	781b      	ldrb	r3, [r3, #0]
10006092:	2b01      	cmp	r3, #1
10006094:	d9dc      	bls.n	10006050 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10006096:	46bd      	mov	sp, r7
10006098:	b004      	add	sp, #16
1000609a:	bd80      	pop	{r7, pc}
1000609c:	1000cde0 	.word	0x1000cde0

100060a0 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
100060a0:	b580      	push	{r7, lr}
100060a2:	b082      	sub	sp, #8
100060a4:	af00      	add	r7, sp, #0
100060a6:	6078      	str	r0, [r7, #4]
100060a8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
100060aa:	687a      	ldr	r2, [r7, #4]
100060ac:	683b      	ldr	r3, [r7, #0]
100060ae:	685b      	ldr	r3, [r3, #4]
100060b0:	1c10      	adds	r0, r2, #0
100060b2:	1c19      	adds	r1, r3, #0
100060b4:	2200      	movs	r2, #0
100060b6:	2300      	movs	r3, #0
100060b8:	f000 f830 	bl	1000611c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
100060bc:	687a      	ldr	r2, [r7, #4]
100060be:	683b      	ldr	r3, [r7, #0]
100060c0:	685b      	ldr	r3, [r3, #4]
100060c2:	1c10      	adds	r0, r2, #0
100060c4:	1c19      	adds	r1, r3, #0
100060c6:	2201      	movs	r2, #1
100060c8:	2300      	movs	r3, #0
100060ca:	f000 f827 	bl	1000611c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
100060ce:	687a      	ldr	r2, [r7, #4]
100060d0:	683b      	ldr	r3, [r7, #0]
100060d2:	689b      	ldr	r3, [r3, #8]
100060d4:	1c10      	adds	r0, r2, #0
100060d6:	1c19      	adds	r1, r3, #0
100060d8:	2200      	movs	r2, #0
100060da:	2301      	movs	r3, #1
100060dc:	f000 f81e 	bl	1000611c <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
100060e0:	687a      	ldr	r2, [r7, #4]
100060e2:	683b      	ldr	r3, [r7, #0]
100060e4:	689b      	ldr	r3, [r3, #8]
100060e6:	1c10      	adds	r0, r2, #0
100060e8:	1c19      	adds	r1, r3, #0
100060ea:	2201      	movs	r2, #1
100060ec:	2301      	movs	r3, #1
100060ee:	f000 f815 	bl	1000611c <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
100060f2:	683b      	ldr	r3, [r7, #0]
100060f4:	691a      	ldr	r2, [r3, #16]
100060f6:	687b      	ldr	r3, [r7, #4]
100060f8:	2180      	movs	r1, #128	; 0x80
100060fa:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
100060fc:	683b      	ldr	r3, [r7, #0]
100060fe:	68da      	ldr	r2, [r3, #12]
10006100:	687b      	ldr	r3, [r7, #4]
10006102:	21b8      	movs	r1, #184	; 0xb8
10006104:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
10006106:	687a      	ldr	r2, [r7, #4]
10006108:	683b      	ldr	r3, [r7, #0]
1000610a:	681b      	ldr	r3, [r3, #0]
1000610c:	1c10      	adds	r0, r2, #0
1000610e:	1c19      	adds	r1, r3, #0
10006110:	f7ff feee 	bl	10005ef0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10006114:	46bd      	mov	sp, r7
10006116:	b002      	add	sp, #8
10006118:	bd80      	pop	{r7, pc}
1000611a:	46c0      	nop			; (mov r8, r8)

1000611c <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
1000611c:	b580      	push	{r7, lr}
1000611e:	b08c      	sub	sp, #48	; 0x30
10006120:	af00      	add	r7, sp, #0
10006122:	60f8      	str	r0, [r7, #12]
10006124:	60b9      	str	r1, [r7, #8]
10006126:	603b      	str	r3, [r7, #0]
10006128:	1dfb      	adds	r3, r7, #7
1000612a:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
1000612c:	1dfb      	adds	r3, r7, #7
1000612e:	781b      	ldrb	r3, [r3, #0]
10006130:	2b00      	cmp	r3, #0
10006132:	d119      	bne.n	10006168 <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10006134:	2308      	movs	r3, #8
10006136:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10006138:	23e0      	movs	r3, #224	; 0xe0
1000613a:	00db      	lsls	r3, r3, #3
1000613c:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
1000613e:	2300      	movs	r3, #0
10006140:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
10006142:	231f      	movs	r3, #31
10006144:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10006146:	2308      	movs	r3, #8
10006148:	18fb      	adds	r3, r7, r3
1000614a:	781b      	ldrb	r3, [r3, #0]
1000614c:	06db      	lsls	r3, r3, #27
1000614e:	0edb      	lsrs	r3, r3, #27
10006150:	b2db      	uxtb	r3, r3
10006152:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10006154:	2309      	movs	r3, #9
10006156:	18fb      	adds	r3, r7, r3
10006158:	781b      	ldrb	r3, [r3, #0]
1000615a:	075b      	lsls	r3, r3, #29
1000615c:	0f5b      	lsrs	r3, r3, #29
1000615e:	b2da      	uxtb	r2, r3
10006160:	231b      	movs	r3, #27
10006162:	18fb      	adds	r3, r7, r3
10006164:	701a      	strb	r2, [r3, #0]
10006166:	e019      	b.n	1000619c <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10006168:	2318      	movs	r3, #24
1000616a:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
1000616c:	23e0      	movs	r3, #224	; 0xe0
1000616e:	04db      	lsls	r3, r3, #19
10006170:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
10006172:	2310      	movs	r3, #16
10006174:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10006176:	23f8      	movs	r3, #248	; 0xf8
10006178:	035b      	lsls	r3, r3, #13
1000617a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
1000617c:	230a      	movs	r3, #10
1000617e:	18fb      	adds	r3, r7, r3
10006180:	781b      	ldrb	r3, [r3, #0]
10006182:	06db      	lsls	r3, r3, #27
10006184:	0edb      	lsrs	r3, r3, #27
10006186:	b2db      	uxtb	r3, r3
10006188:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
1000618a:	230b      	movs	r3, #11
1000618c:	18fb      	adds	r3, r7, r3
1000618e:	781b      	ldrb	r3, [r3, #0]
10006190:	075b      	lsls	r3, r3, #29
10006192:	0f5b      	lsrs	r3, r3, #29
10006194:	b2da      	uxtb	r2, r3
10006196:	231b      	movs	r3, #27
10006198:	18fb      	adds	r3, r7, r3
1000619a:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
1000619c:	68fb      	ldr	r3, [r7, #12]
1000619e:	683a      	ldr	r2, [r7, #0]
100061a0:	3228      	adds	r2, #40	; 0x28
100061a2:	0092      	lsls	r2, r2, #2
100061a4:	58d3      	ldr	r3, [r2, r3]
100061a6:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
100061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100061aa:	43da      	mvns	r2, r3
100061ac:	697b      	ldr	r3, [r7, #20]
100061ae:	4013      	ands	r3, r2
100061b0:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
100061b2:	231b      	movs	r3, #27
100061b4:	18fb      	adds	r3, r7, r3
100061b6:	781a      	ldrb	r2, [r3, #0]
100061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100061ba:	409a      	lsls	r2, r3
100061bc:	1c13      	adds	r3, r2, #0
100061be:	697a      	ldr	r2, [r7, #20]
100061c0:	4313      	orrs	r3, r2
100061c2:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
100061c4:	6a3b      	ldr	r3, [r7, #32]
100061c6:	43da      	mvns	r2, r3
100061c8:	697b      	ldr	r3, [r7, #20]
100061ca:	4013      	ands	r3, r2
100061cc:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
100061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
100061d0:	69fa      	ldr	r2, [r7, #28]
100061d2:	409a      	lsls	r2, r3
100061d4:	1c13      	adds	r3, r2, #0
100061d6:	697a      	ldr	r2, [r7, #20]
100061d8:	4313      	orrs	r3, r2
100061da:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
100061dc:	68fb      	ldr	r3, [r7, #12]
100061de:	683a      	ldr	r2, [r7, #0]
100061e0:	3228      	adds	r2, #40	; 0x28
100061e2:	0092      	lsls	r2, r2, #2
100061e4:	6979      	ldr	r1, [r7, #20]
100061e6:	50d1      	str	r1, [r2, r3]
}
100061e8:	46bd      	mov	sp, r7
100061ea:	b00c      	add	sp, #48	; 0x30
100061ec:	bd80      	pop	{r7, pc}
100061ee:	46c0      	nop			; (mov r8, r8)

100061f0 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
100061f0:	b580      	push	{r7, lr}
100061f2:	b084      	sub	sp, #16
100061f4:	af00      	add	r7, sp, #0
100061f6:	6078      	str	r0, [r7, #4]
100061f8:	1c0a      	adds	r2, r1, #0
100061fa:	1cfb      	adds	r3, r7, #3
100061fc:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
100061fe:	687b      	ldr	r3, [r7, #4]
10006200:	2280      	movs	r2, #128	; 0x80
10006202:	589b      	ldr	r3, [r3, r2]
10006204:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10006206:	68fb      	ldr	r3, [r7, #12]
10006208:	2203      	movs	r2, #3
1000620a:	4393      	bics	r3, r2
1000620c:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
1000620e:	1cfb      	adds	r3, r7, #3
10006210:	781b      	ldrb	r3, [r3, #0]
10006212:	68fa      	ldr	r2, [r7, #12]
10006214:	4313      	orrs	r3, r2
10006216:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
10006218:	687b      	ldr	r3, [r7, #4]
1000621a:	2180      	movs	r1, #128	; 0x80
1000621c:	68fa      	ldr	r2, [r7, #12]
1000621e:	505a      	str	r2, [r3, r1]
}
10006220:	46bd      	mov	sp, r7
10006222:	b004      	add	sp, #16
10006224:	bd80      	pop	{r7, pc}
10006226:	46c0      	nop			; (mov r8, r8)

10006228 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
10006228:	b580      	push	{r7, lr}
1000622a:	b084      	sub	sp, #16
1000622c:	af00      	add	r7, sp, #0
1000622e:	6078      	str	r0, [r7, #4]
10006230:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
10006232:	687b      	ldr	r3, [r7, #4]
10006234:	1c18      	adds	r0, r3, #0
10006236:	f7ff feb3 	bl	10005fa0 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
1000623a:	687b      	ldr	r3, [r7, #4]
1000623c:	2284      	movs	r2, #132	; 0x84
1000623e:	589b      	ldr	r3, [r3, r2]
10006240:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
10006242:	68fb      	ldr	r3, [r7, #12]
10006244:	2203      	movs	r2, #3
10006246:	4393      	bics	r3, r2
10006248:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
1000624a:	683b      	ldr	r3, [r7, #0]
1000624c:	781b      	ldrb	r3, [r3, #0]
1000624e:	071b      	lsls	r3, r3, #28
10006250:	0f9b      	lsrs	r3, r3, #30
10006252:	b2db      	uxtb	r3, r3
10006254:	1c1a      	adds	r2, r3, #0
10006256:	68fb      	ldr	r3, [r7, #12]
10006258:	4313      	orrs	r3, r2
1000625a:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
1000625c:	683b      	ldr	r3, [r7, #0]
1000625e:	781b      	ldrb	r3, [r3, #0]
10006260:	2203      	movs	r2, #3
10006262:	4013      	ands	r3, r2
10006264:	b2db      	uxtb	r3, r3
10006266:	2b00      	cmp	r3, #0
10006268:	d003      	beq.n	10006272 <XMC_VADC_GROUP_QueueInit+0x4a>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
1000626a:	68fb      	ldr	r3, [r7, #12]
1000626c:	2208      	movs	r2, #8
1000626e:	4313      	orrs	r3, r2
10006270:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
10006272:	687b      	ldr	r3, [r7, #4]
10006274:	2184      	movs	r1, #132	; 0x84
10006276:	68fa      	ldr	r2, [r7, #12]
10006278:	505a      	str	r2, [r3, r1]


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
1000627a:	683b      	ldr	r3, [r7, #0]
1000627c:	685b      	ldr	r3, [r3, #4]
1000627e:	4a15      	ldr	r2, [pc, #84]	; (100062d4 <XMC_VADC_GROUP_QueueInit+0xac>)
10006280:	431a      	orrs	r2, r3
10006282:	1c11      	adds	r1, r2, #0
10006284:	687a      	ldr	r2, [r7, #4]
10006286:	2380      	movs	r3, #128	; 0x80
10006288:	005b      	lsls	r3, r3, #1
1000628a:	50d1      	str	r1, [r2, r3]
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
1000628c:	683b      	ldr	r3, [r7, #0]
1000628e:	689b      	ldr	r3, [r3, #8]
10006290:	2201      	movs	r2, #1
10006292:	431a      	orrs	r2, r3
10006294:	1c11      	adds	r1, r2, #0
10006296:	687a      	ldr	r2, [r7, #4]
10006298:	2382      	movs	r3, #130	; 0x82
1000629a:	005b      	lsls	r3, r3, #1
1000629c:	50d1      	str	r1, [r2, r3]

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
1000629e:	683b      	ldr	r3, [r7, #0]
100062a0:	781b      	ldrb	r3, [r3, #0]
100062a2:	2203      	movs	r2, #3
100062a4:	4013      	ands	r3, r2
100062a6:	b2db      	uxtb	r3, r3
100062a8:	2b02      	cmp	r3, #2
100062aa:	d10b      	bne.n	100062c4 <XMC_VADC_GROUP_QueueInit+0x9c>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
100062ac:	687a      	ldr	r2, [r7, #4]
100062ae:	2382      	movs	r3, #130	; 0x82
100062b0:	005b      	lsls	r3, r3, #1
100062b2:	58d3      	ldr	r3, [r2, r3]
100062b4:	2280      	movs	r2, #128	; 0x80
100062b6:	0252      	lsls	r2, r2, #9
100062b8:	431a      	orrs	r2, r3
100062ba:	1c11      	adds	r1, r2, #0
100062bc:	687a      	ldr	r2, [r7, #4]
100062be:	2382      	movs	r3, #130	; 0x82
100062c0:	005b      	lsls	r3, r3, #1
100062c2:	50d1      	str	r1, [r2, r3]
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
100062c4:	687b      	ldr	r3, [r7, #4]
100062c6:	1c18      	adds	r0, r3, #0
100062c8:	f7ff fe5a 	bl	10005f80 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
100062cc:	46bd      	mov	sp, r7
100062ce:	b004      	add	sp, #16
100062d0:	bd80      	pop	{r7, pc}
100062d2:	46c0      	nop			; (mov r8, r8)
100062d4:	80808000 	.word	0x80808000

100062d8 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
100062d8:	b580      	push	{r7, lr}
100062da:	b088      	sub	sp, #32
100062dc:	af00      	add	r7, sp, #0
100062de:	60f8      	str	r0, [r7, #12]
100062e0:	60b9      	str	r1, [r7, #8]
100062e2:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
100062e4:	687b      	ldr	r3, [r7, #4]
100062e6:	7b1b      	ldrb	r3, [r3, #12]
100062e8:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
100062ea:	68fb      	ldr	r3, [r7, #12]
100062ec:	2288      	movs	r2, #136	; 0x88
100062ee:	589b      	ldr	r3, [r3, r2]
100062f0:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
100062f2:	68bb      	ldr	r3, [r7, #8]
100062f4:	2201      	movs	r2, #1
100062f6:	409a      	lsls	r2, r3
100062f8:	1c13      	adds	r3, r2, #0
100062fa:	43da      	mvns	r2, r3
100062fc:	697b      	ldr	r3, [r7, #20]
100062fe:	4013      	ands	r3, r2
10006300:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10006302:	68bb      	ldr	r3, [r7, #8]
10006304:	69ba      	ldr	r2, [r7, #24]
10006306:	409a      	lsls	r2, r3
10006308:	1c13      	adds	r3, r2, #0
1000630a:	697a      	ldr	r2, [r7, #20]
1000630c:	4313      	orrs	r3, r2
1000630e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10006310:	68fb      	ldr	r3, [r7, #12]
10006312:	2188      	movs	r1, #136	; 0x88
10006314:	697a      	ldr	r2, [r7, #20]
10006316:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10006318:	687b      	ldr	r3, [r7, #4]
1000631a:	7b5b      	ldrb	r3, [r3, #13]
1000631c:	b25b      	sxtb	r3, r3
1000631e:	2b00      	cmp	r3, #0
10006320:	db2a      	blt.n	10006378 <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10006322:	2300      	movs	r3, #0
10006324:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10006326:	68bb      	ldr	r3, [r7, #8]
10006328:	2b01      	cmp	r3, #1
1000632a:	d10a      	bne.n	10006342 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
1000632c:	2308      	movs	r3, #8
1000632e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10006330:	68fb      	ldr	r3, [r7, #12]
10006332:	22b0      	movs	r2, #176	; 0xb0
10006334:	589b      	ldr	r3, [r3, r2]
10006336:	4a1e      	ldr	r2, [pc, #120]	; (100063b0 <XMC_VADC_GROUP_ChannelInit+0xd8>)
10006338:	401a      	ands	r2, r3
1000633a:	68fb      	ldr	r3, [r7, #12]
1000633c:	21b0      	movs	r1, #176	; 0xb0
1000633e:	505a      	str	r2, [r3, r1]
10006340:	e00d      	b.n	1000635e <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10006342:	68bb      	ldr	r3, [r7, #8]
10006344:	2b00      	cmp	r3, #0
10006346:	d10a      	bne.n	1000635e <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10006348:	2300      	movs	r3, #0
1000634a:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
1000634c:	68fb      	ldr	r3, [r7, #12]
1000634e:	22b0      	movs	r2, #176	; 0xb0
10006350:	589b      	ldr	r3, [r3, r2]
10006352:	221f      	movs	r2, #31
10006354:	4393      	bics	r3, r2
10006356:	1c1a      	adds	r2, r3, #0
10006358:	68fb      	ldr	r3, [r7, #12]
1000635a:	21b0      	movs	r1, #176	; 0xb0
1000635c:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
1000635e:	68fb      	ldr	r3, [r7, #12]
10006360:	22b0      	movs	r2, #176	; 0xb0
10006362:	589b      	ldr	r3, [r3, r2]
10006364:	687a      	ldr	r2, [r7, #4]
10006366:	7b52      	ldrb	r2, [r2, #13]
10006368:	b251      	sxtb	r1, r2
1000636a:	69fa      	ldr	r2, [r7, #28]
1000636c:	4091      	lsls	r1, r2
1000636e:	1c0a      	adds	r2, r1, #0
10006370:	431a      	orrs	r2, r3
10006372:	68fb      	ldr	r3, [r7, #12]
10006374:	21b0      	movs	r1, #176	; 0xb0
10006376:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10006378:	68fb      	ldr	r3, [r7, #12]
1000637a:	22c8      	movs	r2, #200	; 0xc8
1000637c:	589a      	ldr	r2, [r3, r2]
1000637e:	687b      	ldr	r3, [r7, #4]
10006380:	685b      	ldr	r3, [r3, #4]
10006382:	431a      	orrs	r2, r3
10006384:	68fb      	ldr	r3, [r7, #12]
10006386:	21c8      	movs	r1, #200	; 0xc8
10006388:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
1000638a:	68fb      	ldr	r3, [r7, #12]
1000638c:	22d0      	movs	r2, #208	; 0xd0
1000638e:	589a      	ldr	r2, [r3, r2]
10006390:	687b      	ldr	r3, [r7, #4]
10006392:	689b      	ldr	r3, [r3, #8]
10006394:	431a      	orrs	r2, r3
10006396:	68fb      	ldr	r3, [r7, #12]
10006398:	21d0      	movs	r1, #208	; 0xd0
1000639a:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
1000639c:	687b      	ldr	r3, [r7, #4]
1000639e:	6819      	ldr	r1, [r3, #0]
100063a0:	68fb      	ldr	r3, [r7, #12]
100063a2:	68ba      	ldr	r2, [r7, #8]
100063a4:	3280      	adds	r2, #128	; 0x80
100063a6:	0092      	lsls	r2, r2, #2
100063a8:	50d1      	str	r1, [r2, r3]

}
100063aa:	46bd      	mov	sp, r7
100063ac:	b008      	add	sp, #32
100063ae:	bd80      	pop	{r7, pc}
100063b0:	ffffe0ff 	.word	0xffffe0ff

100063b4 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
100063b4:	b580      	push	{r7, lr}
100063b6:	b086      	sub	sp, #24
100063b8:	af00      	add	r7, sp, #0
100063ba:	60f8      	str	r0, [r7, #12]
100063bc:	60b9      	str	r1, [r7, #8]
100063be:	1dfb      	adds	r3, r7, #7
100063c0:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
100063c2:	68bb      	ldr	r3, [r7, #8]
100063c4:	2b07      	cmp	r3, #7
100063c6:	d81b      	bhi.n	10006400 <XMC_VADC_GROUP_SetResultInterruptNode+0x4c>
  {
    route_mask  = group_ptr->REVNP0;
100063c8:	68fa      	ldr	r2, [r7, #12]
100063ca:	23d8      	movs	r3, #216	; 0xd8
100063cc:	005b      	lsls	r3, r3, #1
100063ce:	58d3      	ldr	r3, [r2, r3]
100063d0:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
100063d2:	68bb      	ldr	r3, [r7, #8]
100063d4:	009b      	lsls	r3, r3, #2
100063d6:	1c1a      	adds	r2, r3, #0
100063d8:	230f      	movs	r3, #15
100063da:	4093      	lsls	r3, r2
100063dc:	43da      	mvns	r2, r3
100063de:	697b      	ldr	r3, [r7, #20]
100063e0:	4013      	ands	r3, r2
100063e2:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
100063e4:	1dfb      	adds	r3, r7, #7
100063e6:	781b      	ldrb	r3, [r3, #0]
100063e8:	68ba      	ldr	r2, [r7, #8]
100063ea:	0092      	lsls	r2, r2, #2
100063ec:	4093      	lsls	r3, r2
100063ee:	697a      	ldr	r2, [r7, #20]
100063f0:	4313      	orrs	r3, r2
100063f2:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
100063f4:	68fa      	ldr	r2, [r7, #12]
100063f6:	23d8      	movs	r3, #216	; 0xd8
100063f8:	005b      	lsls	r3, r3, #1
100063fa:	6979      	ldr	r1, [r7, #20]
100063fc:	50d1      	str	r1, [r2, r3]
100063fe:	e020      	b.n	10006442 <XMC_VADC_GROUP_SetResultInterruptNode+0x8e>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
10006400:	68fa      	ldr	r2, [r7, #12]
10006402:	23da      	movs	r3, #218	; 0xda
10006404:	005b      	lsls	r3, r3, #1
10006406:	58d3      	ldr	r3, [r2, r3]
10006408:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
1000640a:	68bb      	ldr	r3, [r7, #8]
1000640c:	4a0e      	ldr	r2, [pc, #56]	; (10006448 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
1000640e:	4694      	mov	ip, r2
10006410:	4463      	add	r3, ip
10006412:	009b      	lsls	r3, r3, #2
10006414:	1c1a      	adds	r2, r3, #0
10006416:	230f      	movs	r3, #15
10006418:	4093      	lsls	r3, r2
1000641a:	43da      	mvns	r2, r3
1000641c:	697b      	ldr	r3, [r7, #20]
1000641e:	4013      	ands	r3, r2
10006420:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
10006422:	1dfb      	adds	r3, r7, #7
10006424:	781b      	ldrb	r3, [r3, #0]
10006426:	68ba      	ldr	r2, [r7, #8]
10006428:	4907      	ldr	r1, [pc, #28]	; (10006448 <XMC_VADC_GROUP_SetResultInterruptNode+0x94>)
1000642a:	468c      	mov	ip, r1
1000642c:	4462      	add	r2, ip
1000642e:	0092      	lsls	r2, r2, #2
10006430:	4093      	lsls	r3, r2
10006432:	697a      	ldr	r2, [r7, #20]
10006434:	4313      	orrs	r3, r2
10006436:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
10006438:	68fa      	ldr	r2, [r7, #12]
1000643a:	23da      	movs	r3, #218	; 0xda
1000643c:	005b      	lsls	r3, r3, #1
1000643e:	6979      	ldr	r1, [r7, #20]
10006440:	50d1      	str	r1, [r2, r3]
  }
}
10006442:	46bd      	mov	sp, r7
10006444:	b006      	add	sp, #24
10006446:	bd80      	pop	{r7, pc}
10006448:	3ffffff8 	.word	0x3ffffff8

1000644c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
1000644c:	b580      	push	{r7, lr}
1000644e:	b084      	sub	sp, #16
10006450:	af00      	add	r7, sp, #0
10006452:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
10006454:	4b14      	ldr	r3, [pc, #80]	; (100064a8 <_sbrk+0x5c>)
10006456:	681b      	ldr	r3, [r3, #0]
10006458:	2b00      	cmp	r3, #0
1000645a:	d102      	bne.n	10006462 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
1000645c:	4b12      	ldr	r3, [pc, #72]	; (100064a8 <_sbrk+0x5c>)
1000645e:	4a13      	ldr	r2, [pc, #76]	; (100064ac <_sbrk+0x60>)
10006460:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
10006462:	4b11      	ldr	r3, [pc, #68]	; (100064a8 <_sbrk+0x5c>)
10006464:	681b      	ldr	r3, [r3, #0]
10006466:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
10006468:	687b      	ldr	r3, [r7, #4]
1000646a:	3303      	adds	r3, #3
1000646c:	2203      	movs	r2, #3
1000646e:	4393      	bics	r3, r2
10006470:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
10006472:	4b0d      	ldr	r3, [pc, #52]	; (100064a8 <_sbrk+0x5c>)
10006474:	681a      	ldr	r2, [r3, #0]
10006476:	687b      	ldr	r3, [r7, #4]
10006478:	18d2      	adds	r2, r2, r3
1000647a:	4b0d      	ldr	r3, [pc, #52]	; (100064b0 <_sbrk+0x64>)
1000647c:	429a      	cmp	r2, r3
1000647e:	d207      	bcs.n	10006490 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
10006480:	4b09      	ldr	r3, [pc, #36]	; (100064a8 <_sbrk+0x5c>)
10006482:	681a      	ldr	r2, [r3, #0]
10006484:	687b      	ldr	r3, [r7, #4]
10006486:	18d2      	adds	r2, r2, r3
10006488:	4b07      	ldr	r3, [pc, #28]	; (100064a8 <_sbrk+0x5c>)
1000648a:	601a      	str	r2, [r3, #0]
    return (base);
1000648c:	68fb      	ldr	r3, [r7, #12]
1000648e:	e006      	b.n	1000649e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
10006490:	f002 fb1a 	bl	10008ac8 <__errno>
10006494:	1c03      	adds	r3, r0, #0
10006496:	220c      	movs	r2, #12
10006498:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
1000649a:	2301      	movs	r3, #1
1000649c:	425b      	negs	r3, r3
  }
}
1000649e:	1c18      	adds	r0, r3, #0
100064a0:	46bd      	mov	sp, r7
100064a2:	b004      	add	sp, #16
100064a4:	bd80      	pop	{r7, pc}
100064a6:	46c0      	nop			; (mov r8, r8)
100064a8:	20000a28 	.word	0x20000a28
100064ac:	20000b60 	.word	0x20000b60
100064b0:	20003ffc 	.word	0x20003ffc

100064b4 <_init>:

/* Init */
void _init(void)
{}
100064b4:	b580      	push	{r7, lr}
100064b6:	af00      	add	r7, sp, #0
100064b8:	46bd      	mov	sp, r7
100064ba:	bd80      	pop	{r7, pc}

100064bc <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
100064bc:	b580      	push	{r7, lr}
100064be:	b084      	sub	sp, #16
100064c0:	af00      	add	r7, sp, #0
100064c2:	60f8      	str	r0, [r7, #12]
100064c4:	607a      	str	r2, [r7, #4]
100064c6:	230b      	movs	r3, #11
100064c8:	18fb      	adds	r3, r7, r3
100064ca:	1c0a      	adds	r2, r1, #0
100064cc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
100064ce:	230b      	movs	r3, #11
100064d0:	18fb      	adds	r3, r7, r3
100064d2:	781b      	ldrb	r3, [r3, #0]
100064d4:	687a      	ldr	r2, [r7, #4]
100064d6:	409a      	lsls	r2, r3
100064d8:	68fb      	ldr	r3, [r7, #12]
100064da:	605a      	str	r2, [r3, #4]
}
100064dc:	46bd      	mov	sp, r7
100064de:	b004      	add	sp, #16
100064e0:	bd80      	pop	{r7, pc}
100064e2:	46c0      	nop			; (mov r8, r8)

100064e4 <main>:
 * <b>Details of function</b><br>
 * This routine is the application entry point. It is invoked by the device startup code. 
 */

int main(void)
{
100064e4:	b590      	push	{r4, r7, lr}
100064e6:	b083      	sub	sp, #12
100064e8:	af02      	add	r7, sp, #8
  /* Create 1 kHz tick and Initialize systick handler variable */
  sysTickParamHandle.enable 	= false;
100064ea:	4b94      	ldr	r3, [pc, #592]	; (1000673c <main+0x258>)
100064ec:	2200      	movs	r2, #0
100064ee:	701a      	strb	r2, [r3, #0]
  sysTickParamHandle.isTimeOut 	= false;
100064f0:	4b92      	ldr	r3, [pc, #584]	; (1000673c <main+0x258>)
100064f2:	2200      	movs	r2, #0
100064f4:	711a      	strb	r2, [r3, #4]
  sysTickParamHandle.count		= 0;
100064f6:	4b91      	ldr	r3, [pc, #580]	; (1000673c <main+0x258>)
100064f8:	2200      	movs	r2, #0
100064fa:	805a      	strh	r2, [r3, #2]

  /* Initialize Button, LED, and Dipswitches */
  GPIO_Init();
100064fc:	f7fd fb7e 	bl	10003bfc <GPIO_Init>

  /* Initialize ESP32 */
  ESP32_ConnectionInit();
10006500:	f7fd fee6 	bl	100042d0 <ESP32_ConnectionInit>

  /* Initialization for PCS Communication */
  PCS_ConnectionInit();
10006504:	f7fc fe46 	bl	10003194 <PCS_ConnectionInit>

  /* Initialization for Battery Communication */
  GENIX_ConnectionInit();
10006508:	f7fd fce0 	bl	10003ecc <GENIX_ConnectionInit>

  /* Initialization for Power Distribution Control Peripheral */
  PDU_Relay_Init();
1000650c:	f7fc fcac 	bl	10002e68 <PDU_Relay_Init>
  PDU_SensorADC_Init();
10006510:	f7fc fbee 	bl	10002cf0 <PDU_SensorADC_Init>

  /* Setup Timer */
  TIMING_TimerInit();
10006514:	f7fc fa5e 	bl	100029d4 <TIMING_TimerInit>

  /* PCS Command Initialization */
  mcu_state = OP_POWERUP;
10006518:	4b89      	ldr	r3, [pc, #548]	; (10006740 <main+0x25c>)
1000651a:	2200      	movs	r2, #0
1000651c:	701a      	strb	r2, [r3, #0]

  controlFlag.isAuto_mode 			 = false;
1000651e:	4b89      	ldr	r3, [pc, #548]	; (10006744 <main+0x260>)
10006520:	2200      	movs	r2, #0
10006522:	709a      	strb	r2, [r3, #2]
  controlFlag.isBypass_power_mode 	 = false;
10006524:	4b87      	ldr	r3, [pc, #540]	; (10006744 <main+0x260>)
10006526:	2200      	movs	r2, #0
10006528:	70da      	strb	r2, [r3, #3]
  controlFlag.isChecking_peripheral  = false;
1000652a:	4b86      	ldr	r3, [pc, #536]	; (10006744 <main+0x260>)
1000652c:	2200      	movs	r2, #0
1000652e:	715a      	strb	r2, [r3, #5]
  controlFlag.isForced_shutting_down = false;
10006530:	4b84      	ldr	r3, [pc, #528]	; (10006744 <main+0x260>)
10006532:	2200      	movs	r2, #0
10006534:	711a      	strb	r2, [r3, #4]
  controlFlag.isPerforming_Precharge = false;
10006536:	4b83      	ldr	r3, [pc, #524]	; (10006744 <main+0x260>)
10006538:	2200      	movs	r2, #0
1000653a:	701a      	strb	r2, [r3, #0]
  controlFlag.isStandby 			 = false;
1000653c:	4b81      	ldr	r3, [pc, #516]	; (10006744 <main+0x260>)
1000653e:	2200      	movs	r2, #0
10006540:	705a      	strb	r2, [r3, #1]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  /* Continuously Checking Mode and Error */
  	  OP_CheckingError(&controlFlag, &pcsSystemStatus, &pcsDCgridStatus,
10006542:	4880      	ldr	r0, [pc, #512]	; (10006744 <main+0x260>)
10006544:	4980      	ldr	r1, [pc, #512]	; (10006748 <main+0x264>)
10006546:	4a81      	ldr	r2, [pc, #516]	; (1000674c <main+0x268>)
10006548:	4c81      	ldr	r4, [pc, #516]	; (10006750 <main+0x26c>)
1000654a:	4b82      	ldr	r3, [pc, #520]	; (10006754 <main+0x270>)
1000654c:	9300      	str	r3, [sp, #0]
1000654e:	4b82      	ldr	r3, [pc, #520]	; (10006758 <main+0x274>)
10006550:	9301      	str	r3, [sp, #4]
10006552:	1c23      	adds	r3, r4, #0
10006554:	f7fb f870 	bl	10001638 <OP_CheckingError>
  			  	  	   &pcsACinvStatus, &pcsPVconvStatus, &pcsBatconvStatus);
  	  OP_CheckingMode(&controlFlag);
10006558:	4b7a      	ldr	r3, [pc, #488]	; (10006744 <main+0x260>)
1000655a:	1c18      	adds	r0, r3, #0
1000655c:	f7fb f826 	bl	100015ac <OP_CheckingMode>


  	  /* Run operational state */
  	  switch (mcu_state)
10006560:	4b77      	ldr	r3, [pc, #476]	; (10006740 <main+0x25c>)
10006562:	781b      	ldrb	r3, [r3, #0]
10006564:	2b05      	cmp	r3, #5
10006566:	d900      	bls.n	1000656a <main+0x86>
10006568:	e0e6      	b.n	10006738 <main+0x254>
1000656a:	009a      	lsls	r2, r3, #2
1000656c:	4b7b      	ldr	r3, [pc, #492]	; (1000675c <main+0x278>)
1000656e:	18d3      	adds	r3, r2, r3
10006570:	681b      	ldr	r3, [r3, #0]
10006572:	469f      	mov	pc, r3
  	  {
  	  	  case OP_POWERUP 	:
  	  		  mcu_state	= OP_POWERUP;
10006574:	4b72      	ldr	r3, [pc, #456]	; (10006740 <main+0x25c>)
10006576:	2200      	movs	r2, #0
10006578:	701a      	strb	r2, [r3, #0]
  	  		  data_group.bmc_operation_state = 0x01;
1000657a:	4b79      	ldr	r3, [pc, #484]	; (10006760 <main+0x27c>)
1000657c:	2239      	movs	r2, #57	; 0x39
1000657e:	2101      	movs	r1, #1
10006580:	5499      	strb	r1, [r3, r2]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
10006582:	4a78      	ldr	r2, [pc, #480]	; (10006764 <main+0x280>)
10006584:	2380      	movs	r3, #128	; 0x80
10006586:	025b      	lsls	r3, r3, #9
10006588:	1c10      	adds	r0, r2, #0
1000658a:	210b      	movs	r1, #11
1000658c:	1c1a      	adds	r2, r3, #0
1000658e:	f7ff ff95 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006592:	4b74      	ldr	r3, [pc, #464]	; (10006764 <main+0x280>)
10006594:	1c18      	adds	r0, r3, #0
10006596:	210c      	movs	r1, #12
10006598:	2201      	movs	r2, #1
1000659a:	f7ff ff8f 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
1000659e:	4b71      	ldr	r3, [pc, #452]	; (10006764 <main+0x280>)
100065a0:	1c18      	adds	r0, r3, #0
100065a2:	210d      	movs	r1, #13
100065a4:	2201      	movs	r2, #1
100065a6:	f7ff ff89 	bl	100064bc <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_SetupConnection(&mcu_state, &sysTickParamHandle, &controlFlag,
100065aa:	4b6f      	ldr	r3, [pc, #444]	; (10006768 <main+0x284>)
100065ac:	681c      	ldr	r4, [r3, #0]
100065ae:	4864      	ldr	r0, [pc, #400]	; (10006740 <main+0x25c>)
100065b0:	4962      	ldr	r1, [pc, #392]	; (1000673c <main+0x258>)
100065b2:	4a64      	ldr	r2, [pc, #400]	; (10006744 <main+0x260>)
100065b4:	4b6d      	ldr	r3, [pc, #436]	; (1000676c <main+0x288>)
100065b6:	9300      	str	r3, [sp, #0]
100065b8:	4b63      	ldr	r3, [pc, #396]	; (10006748 <main+0x264>)
100065ba:	9301      	str	r3, [sp, #4]
100065bc:	1c23      	adds	r3, r4, #0
100065be:	f7fa fd83 	bl	100010c8 <OP_SetupConnection>
					  	  	  	  pduSensor.mPVPT, &pcsBmsStatus, &pcsSystemStatus);
			  break;
100065c2:	e0ba      	b.n	1000673a <main+0x256>
  	  	  case OP_TURN_ON 	:
  	  		  mcu_state	= OP_TURN_ON;
100065c4:	4b5e      	ldr	r3, [pc, #376]	; (10006740 <main+0x25c>)
100065c6:	2201      	movs	r2, #1
100065c8:	701a      	strb	r2, [r3, #0]
  	  		  data_group.bmc_operation_state = 0x02;
100065ca:	4b65      	ldr	r3, [pc, #404]	; (10006760 <main+0x27c>)
100065cc:	2239      	movs	r2, #57	; 0x39
100065ce:	2102      	movs	r1, #2
100065d0:	5499      	strb	r1, [r3, r2]

  	  		  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100065d2:	4b64      	ldr	r3, [pc, #400]	; (10006764 <main+0x280>)
100065d4:	1c18      	adds	r0, r3, #0
100065d6:	210b      	movs	r1, #11
100065d8:	2201      	movs	r2, #1
100065da:	f7ff ff6f 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
100065de:	4a61      	ldr	r2, [pc, #388]	; (10006764 <main+0x280>)
100065e0:	2380      	movs	r3, #128	; 0x80
100065e2:	025b      	lsls	r3, r3, #9
100065e4:	1c10      	adds	r0, r2, #0
100065e6:	210c      	movs	r1, #12
100065e8:	1c1a      	adds	r2, r3, #0
100065ea:	f7ff ff67 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100065ee:	4b5d      	ldr	r3, [pc, #372]	; (10006764 <main+0x280>)
100065f0:	1c18      	adds	r0, r3, #0
100065f2:	210d      	movs	r1, #13
100065f4:	2201      	movs	r2, #1
100065f6:	f7ff ff61 	bl	100064bc <XMC_GPIO_SetOutputLevel>

	  		  /* Perform actions for this state */
	  		  OP_TurnOnPCS(&mcu_state, &sysTickParamHandle, &controlFlag, &pcsBmsStatus,
100065fa:	4851      	ldr	r0, [pc, #324]	; (10006740 <main+0x25c>)
100065fc:	494f      	ldr	r1, [pc, #316]	; (1000673c <main+0x258>)
100065fe:	4a51      	ldr	r2, [pc, #324]	; (10006744 <main+0x260>)
10006600:	4c5a      	ldr	r4, [pc, #360]	; (1000676c <main+0x288>)
10006602:	4b51      	ldr	r3, [pc, #324]	; (10006748 <main+0x264>)
10006604:	9300      	str	r3, [sp, #0]
10006606:	1c23      	adds	r3, r4, #0
10006608:	f7fa fde4 	bl	100011d4 <OP_TurnOnPCS>
	  				  	   &pcsSystemStatus);
	  		  break;
1000660c:	e095      	b.n	1000673a <main+0x256>
  	  	  case OP_RUNNING 	:
  	  		  mcu_state	= OP_RUNNING;
1000660e:	4b4c      	ldr	r3, [pc, #304]	; (10006740 <main+0x25c>)
10006610:	2202      	movs	r2, #2
10006612:	701a      	strb	r2, [r3, #0]
  	  		  data_group.bmc_operation_state = 0x03;
10006614:	4b52      	ldr	r3, [pc, #328]	; (10006760 <main+0x27c>)
10006616:	2239      	movs	r2, #57	; 0x39
10006618:	2103      	movs	r1, #3
1000661a:	5499      	strb	r1, [r3, r2]
			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000661c:	4a51      	ldr	r2, [pc, #324]	; (10006764 <main+0x280>)
1000661e:	2380      	movs	r3, #128	; 0x80
10006620:	025b      	lsls	r3, r3, #9
10006622:	1c10      	adds	r0, r2, #0
10006624:	210b      	movs	r1, #11
10006626:	1c1a      	adds	r2, r3, #0
10006628:	f7ff ff48 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000662c:	4a4d      	ldr	r2, [pc, #308]	; (10006764 <main+0x280>)
1000662e:	2380      	movs	r3, #128	; 0x80
10006630:	025b      	lsls	r3, r3, #9
10006632:	1c10      	adds	r0, r2, #0
10006634:	210c      	movs	r1, #12
10006636:	1c1a      	adds	r2, r3, #0
10006638:	f7ff ff40 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_HIGH);
1000663c:	4b49      	ldr	r3, [pc, #292]	; (10006764 <main+0x280>)
1000663e:	1c18      	adds	r0, r3, #0
10006640:	210d      	movs	r1, #13
10006642:	2201      	movs	r2, #1
10006644:	f7ff ff3a 	bl	100064bc <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_CheckingPCSStatus(&mcu_state, &pcsSystemStatus, &sysTickParamHandle,
10006648:	483d      	ldr	r0, [pc, #244]	; (10006740 <main+0x25c>)
1000664a:	493f      	ldr	r1, [pc, #252]	; (10006748 <main+0x264>)
1000664c:	4a3b      	ldr	r2, [pc, #236]	; (1000673c <main+0x258>)
1000664e:	4b3d      	ldr	r3, [pc, #244]	; (10006744 <main+0x260>)
10006650:	f7fa fe70 	bl	10001334 <OP_CheckingPCSStatus>
								   &controlFlag);
			  break;
10006654:	e071      	b.n	1000673a <main+0x256>
		  case OP_STANDBY	:
			  mcu_state	= OP_STANDBY;
10006656:	4b3a      	ldr	r3, [pc, #232]	; (10006740 <main+0x25c>)
10006658:	2203      	movs	r2, #3
1000665a:	701a      	strb	r2, [r3, #0]
			  data_group.bmc_operation_state = 0x04;
1000665c:	4b40      	ldr	r3, [pc, #256]	; (10006760 <main+0x27c>)
1000665e:	2239      	movs	r2, #57	; 0x39
10006660:	2104      	movs	r1, #4
10006662:	5499      	strb	r1, [r3, r2]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006664:	4b3f      	ldr	r3, [pc, #252]	; (10006764 <main+0x280>)
10006666:	1c18      	adds	r0, r3, #0
10006668:	210b      	movs	r1, #11
1000666a:	2201      	movs	r2, #1
1000666c:	f7ff ff26 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
10006670:	4b3c      	ldr	r3, [pc, #240]	; (10006764 <main+0x280>)
10006672:	1c18      	adds	r0, r3, #0
10006674:	210c      	movs	r1, #12
10006676:	2201      	movs	r2, #1
10006678:	f7ff ff20 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000667c:	4a39      	ldr	r2, [pc, #228]	; (10006764 <main+0x280>)
1000667e:	2380      	movs	r3, #128	; 0x80
10006680:	025b      	lsls	r3, r3, #9
10006682:	1c10      	adds	r0, r2, #0
10006684:	210d      	movs	r1, #13
10006686:	1c1a      	adds	r2, r3, #0
10006688:	f7ff ff18 	bl	100064bc <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_PutSystemStandby(&mcu_state, &pcsSystemStatus, &controlFlag,
1000668c:	482c      	ldr	r0, [pc, #176]	; (10006740 <main+0x25c>)
1000668e:	492e      	ldr	r1, [pc, #184]	; (10006748 <main+0x264>)
10006690:	4a2c      	ldr	r2, [pc, #176]	; (10006744 <main+0x260>)
10006692:	4b36      	ldr	r3, [pc, #216]	; (1000676c <main+0x288>)
10006694:	f7fa fee2 	bl	1000145c <OP_PutSystemStandby>
					  	  	  	  &pcsBmsStatus);
			  break;
10006698:	e04f      	b.n	1000673a <main+0x256>
		  case OP_ERROR		:
			  mcu_state	= OP_ERROR;
1000669a:	4b29      	ldr	r3, [pc, #164]	; (10006740 <main+0x25c>)
1000669c:	2204      	movs	r2, #4
1000669e:	701a      	strb	r2, [r3, #0]
			  data_group.bmc_operation_state = 0x05;
100066a0:	4b2f      	ldr	r3, [pc, #188]	; (10006760 <main+0x27c>)
100066a2:	2239      	movs	r2, #57	; 0x39
100066a4:	2105      	movs	r1, #5
100066a6:	5499      	strb	r1, [r3, r2]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066a8:	4a2e      	ldr	r2, [pc, #184]	; (10006764 <main+0x280>)
100066aa:	2380      	movs	r3, #128	; 0x80
100066ac:	025b      	lsls	r3, r3, #9
100066ae:	1c10      	adds	r0, r2, #0
100066b0:	210b      	movs	r1, #11
100066b2:	1c1a      	adds	r2, r3, #0
100066b4:	f7ff ff02 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_HIGH);
100066b8:	4b2a      	ldr	r3, [pc, #168]	; (10006764 <main+0x280>)
100066ba:	1c18      	adds	r0, r3, #0
100066bc:	210c      	movs	r1, #12
100066be:	2201      	movs	r2, #1
100066c0:	f7ff fefc 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066c4:	4a27      	ldr	r2, [pc, #156]	; (10006764 <main+0x280>)
100066c6:	2380      	movs	r3, #128	; 0x80
100066c8:	025b      	lsls	r3, r3, #9
100066ca:	1c10      	adds	r0, r2, #0
100066cc:	210d      	movs	r1, #13
100066ce:	1c1a      	adds	r2, r3, #0
100066d0:	f7ff fef4 	bl	100064bc <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_HandlingPCSWarning(&mcu_state, &pcsSystemStatus, &sysTickParamHandle,
100066d4:	481a      	ldr	r0, [pc, #104]	; (10006740 <main+0x25c>)
100066d6:	491c      	ldr	r1, [pc, #112]	; (10006748 <main+0x264>)
100066d8:	4a18      	ldr	r2, [pc, #96]	; (1000673c <main+0x258>)
100066da:	4c1a      	ldr	r4, [pc, #104]	; (10006744 <main+0x260>)
100066dc:	4b24      	ldr	r3, [pc, #144]	; (10006770 <main+0x28c>)
100066de:	9300      	str	r3, [sp, #0]
100066e0:	4b22      	ldr	r3, [pc, #136]	; (1000676c <main+0x288>)
100066e2:	9301      	str	r3, [sp, #4]
100066e4:	1c23      	adds	r3, r4, #0
100066e6:	f7fa fef1 	bl	100014cc <OP_HandlingPCSWarning>
									&controlFlag, &bmsSensor, &pcsBmsStatus);
			  break;
100066ea:	e026      	b.n	1000673a <main+0x256>
		  case OP_SHUTDOWN	:
			  mcu_state 	= OP_SHUTDOWN;
100066ec:	4b14      	ldr	r3, [pc, #80]	; (10006740 <main+0x25c>)
100066ee:	2205      	movs	r2, #5
100066f0:	701a      	strb	r2, [r3, #0]
			  data_group.bmc_operation_state = 0x07;
100066f2:	4b1b      	ldr	r3, [pc, #108]	; (10006760 <main+0x27c>)
100066f4:	2239      	movs	r2, #57	; 0x39
100066f6:	2107      	movs	r1, #7
100066f8:	5499      	strb	r1, [r3, r2]

			  /* Set LED Indicator for this state */
	  		  XMC_GPIO_SetOutputLevel(P2_11, XMC_GPIO_OUTPUT_LEVEL_LOW);
100066fa:	4a1a      	ldr	r2, [pc, #104]	; (10006764 <main+0x280>)
100066fc:	2380      	movs	r3, #128	; 0x80
100066fe:	025b      	lsls	r3, r3, #9
10006700:	1c10      	adds	r0, r2, #0
10006702:	210b      	movs	r1, #11
10006704:	1c1a      	adds	r2, r3, #0
10006706:	f7ff fed9 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_12, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000670a:	4a16      	ldr	r2, [pc, #88]	; (10006764 <main+0x280>)
1000670c:	2380      	movs	r3, #128	; 0x80
1000670e:	025b      	lsls	r3, r3, #9
10006710:	1c10      	adds	r0, r2, #0
10006712:	210c      	movs	r1, #12
10006714:	1c1a      	adds	r2, r3, #0
10006716:	f7ff fed1 	bl	100064bc <XMC_GPIO_SetOutputLevel>
	  		  XMC_GPIO_SetOutputLevel(P2_13, XMC_GPIO_OUTPUT_LEVEL_LOW);
1000671a:	4a12      	ldr	r2, [pc, #72]	; (10006764 <main+0x280>)
1000671c:	2380      	movs	r3, #128	; 0x80
1000671e:	025b      	lsls	r3, r3, #9
10006720:	1c10      	adds	r0, r2, #0
10006722:	210d      	movs	r1, #13
10006724:	1c1a      	adds	r2, r3, #0
10006726:	f7ff fec9 	bl	100064bc <XMC_GPIO_SetOutputLevel>

			  /* Perform actions for this state */
			  OP_PutSystemShutDown(&mcu_state, &sysTickParamHandle, &controlFlag, &pcsBmsStatus);
1000672a:	4805      	ldr	r0, [pc, #20]	; (10006740 <main+0x25c>)
1000672c:	4903      	ldr	r1, [pc, #12]	; (1000673c <main+0x258>)
1000672e:	4a05      	ldr	r2, [pc, #20]	; (10006744 <main+0x260>)
10006730:	4b0e      	ldr	r3, [pc, #56]	; (1000676c <main+0x288>)
10006732:	f7fa fef9 	bl	10001528 <OP_PutSystemShutDown>
			  break;
10006736:	e000      	b.n	1000673a <main+0x256>
		  default			: break;
10006738:	46c0      	nop			; (mov r8, r8)
	  }
  }
1000673a:	e702      	b.n	10006542 <main+0x5e>
1000673c:	20000a98 	.word	0x20000a98
10006740:	20000b5a 	.word	0x20000b5a
10006744:	20000b54 	.word	0x20000b54
10006748:	20000b48 	.word	0x20000b48
1000674c:	20000adc 	.word	0x20000adc
10006750:	20000aa0 	.word	0x20000aa0
10006754:	20000a44 	.word	0x20000a44
10006758:	20000ab8 	.word	0x20000ab8
1000675c:	1000cde8 	.word	0x1000cde8
10006760:	20000a48 	.word	0x20000a48
10006764:	40040200 	.word	0x40040200
10006768:	20000b38 	.word	0x20000b38
1000676c:	20000b50 	.word	0x20000b50
10006770:	20000a3c 	.word	0x20000a3c

10006774 <__aeabi_uidiv>:
10006774:	2200      	movs	r2, #0
10006776:	0843      	lsrs	r3, r0, #1
10006778:	428b      	cmp	r3, r1
1000677a:	d374      	bcc.n	10006866 <__aeabi_uidiv+0xf2>
1000677c:	0903      	lsrs	r3, r0, #4
1000677e:	428b      	cmp	r3, r1
10006780:	d35f      	bcc.n	10006842 <__aeabi_uidiv+0xce>
10006782:	0a03      	lsrs	r3, r0, #8
10006784:	428b      	cmp	r3, r1
10006786:	d344      	bcc.n	10006812 <__aeabi_uidiv+0x9e>
10006788:	0b03      	lsrs	r3, r0, #12
1000678a:	428b      	cmp	r3, r1
1000678c:	d328      	bcc.n	100067e0 <__aeabi_uidiv+0x6c>
1000678e:	0c03      	lsrs	r3, r0, #16
10006790:	428b      	cmp	r3, r1
10006792:	d30d      	bcc.n	100067b0 <__aeabi_uidiv+0x3c>
10006794:	22ff      	movs	r2, #255	; 0xff
10006796:	0209      	lsls	r1, r1, #8
10006798:	ba12      	rev	r2, r2
1000679a:	0c03      	lsrs	r3, r0, #16
1000679c:	428b      	cmp	r3, r1
1000679e:	d302      	bcc.n	100067a6 <__aeabi_uidiv+0x32>
100067a0:	1212      	asrs	r2, r2, #8
100067a2:	0209      	lsls	r1, r1, #8
100067a4:	d065      	beq.n	10006872 <__aeabi_uidiv+0xfe>
100067a6:	0b03      	lsrs	r3, r0, #12
100067a8:	428b      	cmp	r3, r1
100067aa:	d319      	bcc.n	100067e0 <__aeabi_uidiv+0x6c>
100067ac:	e000      	b.n	100067b0 <__aeabi_uidiv+0x3c>
100067ae:	0a09      	lsrs	r1, r1, #8
100067b0:	0bc3      	lsrs	r3, r0, #15
100067b2:	428b      	cmp	r3, r1
100067b4:	d301      	bcc.n	100067ba <__aeabi_uidiv+0x46>
100067b6:	03cb      	lsls	r3, r1, #15
100067b8:	1ac0      	subs	r0, r0, r3
100067ba:	4152      	adcs	r2, r2
100067bc:	0b83      	lsrs	r3, r0, #14
100067be:	428b      	cmp	r3, r1
100067c0:	d301      	bcc.n	100067c6 <__aeabi_uidiv+0x52>
100067c2:	038b      	lsls	r3, r1, #14
100067c4:	1ac0      	subs	r0, r0, r3
100067c6:	4152      	adcs	r2, r2
100067c8:	0b43      	lsrs	r3, r0, #13
100067ca:	428b      	cmp	r3, r1
100067cc:	d301      	bcc.n	100067d2 <__aeabi_uidiv+0x5e>
100067ce:	034b      	lsls	r3, r1, #13
100067d0:	1ac0      	subs	r0, r0, r3
100067d2:	4152      	adcs	r2, r2
100067d4:	0b03      	lsrs	r3, r0, #12
100067d6:	428b      	cmp	r3, r1
100067d8:	d301      	bcc.n	100067de <__aeabi_uidiv+0x6a>
100067da:	030b      	lsls	r3, r1, #12
100067dc:	1ac0      	subs	r0, r0, r3
100067de:	4152      	adcs	r2, r2
100067e0:	0ac3      	lsrs	r3, r0, #11
100067e2:	428b      	cmp	r3, r1
100067e4:	d301      	bcc.n	100067ea <__aeabi_uidiv+0x76>
100067e6:	02cb      	lsls	r3, r1, #11
100067e8:	1ac0      	subs	r0, r0, r3
100067ea:	4152      	adcs	r2, r2
100067ec:	0a83      	lsrs	r3, r0, #10
100067ee:	428b      	cmp	r3, r1
100067f0:	d301      	bcc.n	100067f6 <__aeabi_uidiv+0x82>
100067f2:	028b      	lsls	r3, r1, #10
100067f4:	1ac0      	subs	r0, r0, r3
100067f6:	4152      	adcs	r2, r2
100067f8:	0a43      	lsrs	r3, r0, #9
100067fa:	428b      	cmp	r3, r1
100067fc:	d301      	bcc.n	10006802 <__aeabi_uidiv+0x8e>
100067fe:	024b      	lsls	r3, r1, #9
10006800:	1ac0      	subs	r0, r0, r3
10006802:	4152      	adcs	r2, r2
10006804:	0a03      	lsrs	r3, r0, #8
10006806:	428b      	cmp	r3, r1
10006808:	d301      	bcc.n	1000680e <__aeabi_uidiv+0x9a>
1000680a:	020b      	lsls	r3, r1, #8
1000680c:	1ac0      	subs	r0, r0, r3
1000680e:	4152      	adcs	r2, r2
10006810:	d2cd      	bcs.n	100067ae <__aeabi_uidiv+0x3a>
10006812:	09c3      	lsrs	r3, r0, #7
10006814:	428b      	cmp	r3, r1
10006816:	d301      	bcc.n	1000681c <__aeabi_uidiv+0xa8>
10006818:	01cb      	lsls	r3, r1, #7
1000681a:	1ac0      	subs	r0, r0, r3
1000681c:	4152      	adcs	r2, r2
1000681e:	0983      	lsrs	r3, r0, #6
10006820:	428b      	cmp	r3, r1
10006822:	d301      	bcc.n	10006828 <__aeabi_uidiv+0xb4>
10006824:	018b      	lsls	r3, r1, #6
10006826:	1ac0      	subs	r0, r0, r3
10006828:	4152      	adcs	r2, r2
1000682a:	0943      	lsrs	r3, r0, #5
1000682c:	428b      	cmp	r3, r1
1000682e:	d301      	bcc.n	10006834 <__aeabi_uidiv+0xc0>
10006830:	014b      	lsls	r3, r1, #5
10006832:	1ac0      	subs	r0, r0, r3
10006834:	4152      	adcs	r2, r2
10006836:	0903      	lsrs	r3, r0, #4
10006838:	428b      	cmp	r3, r1
1000683a:	d301      	bcc.n	10006840 <__aeabi_uidiv+0xcc>
1000683c:	010b      	lsls	r3, r1, #4
1000683e:	1ac0      	subs	r0, r0, r3
10006840:	4152      	adcs	r2, r2
10006842:	08c3      	lsrs	r3, r0, #3
10006844:	428b      	cmp	r3, r1
10006846:	d301      	bcc.n	1000684c <__aeabi_uidiv+0xd8>
10006848:	00cb      	lsls	r3, r1, #3
1000684a:	1ac0      	subs	r0, r0, r3
1000684c:	4152      	adcs	r2, r2
1000684e:	0883      	lsrs	r3, r0, #2
10006850:	428b      	cmp	r3, r1
10006852:	d301      	bcc.n	10006858 <__aeabi_uidiv+0xe4>
10006854:	008b      	lsls	r3, r1, #2
10006856:	1ac0      	subs	r0, r0, r3
10006858:	4152      	adcs	r2, r2
1000685a:	0843      	lsrs	r3, r0, #1
1000685c:	428b      	cmp	r3, r1
1000685e:	d301      	bcc.n	10006864 <__aeabi_uidiv+0xf0>
10006860:	004b      	lsls	r3, r1, #1
10006862:	1ac0      	subs	r0, r0, r3
10006864:	4152      	adcs	r2, r2
10006866:	1a41      	subs	r1, r0, r1
10006868:	d200      	bcs.n	1000686c <__aeabi_uidiv+0xf8>
1000686a:	4601      	mov	r1, r0
1000686c:	4152      	adcs	r2, r2
1000686e:	4610      	mov	r0, r2
10006870:	4770      	bx	lr
10006872:	e7ff      	b.n	10006874 <__aeabi_uidiv+0x100>
10006874:	b501      	push	{r0, lr}
10006876:	2000      	movs	r0, #0
10006878:	f000 f8fc 	bl	10006a74 <__aeabi_idiv0>
1000687c:	bd02      	pop	{r1, pc}
1000687e:	46c0      	nop			; (mov r8, r8)

10006880 <__aeabi_uidivmod>:
10006880:	2900      	cmp	r1, #0
10006882:	d0f7      	beq.n	10006874 <__aeabi_uidiv+0x100>
10006884:	b503      	push	{r0, r1, lr}
10006886:	f7ff ff75 	bl	10006774 <__aeabi_uidiv>
1000688a:	bc0e      	pop	{r1, r2, r3}
1000688c:	4342      	muls	r2, r0
1000688e:	1a89      	subs	r1, r1, r2
10006890:	4718      	bx	r3
10006892:	46c0      	nop			; (mov r8, r8)

10006894 <__aeabi_idiv>:
10006894:	4603      	mov	r3, r0
10006896:	430b      	orrs	r3, r1
10006898:	d47f      	bmi.n	1000699a <__aeabi_idiv+0x106>
1000689a:	2200      	movs	r2, #0
1000689c:	0843      	lsrs	r3, r0, #1
1000689e:	428b      	cmp	r3, r1
100068a0:	d374      	bcc.n	1000698c <__aeabi_idiv+0xf8>
100068a2:	0903      	lsrs	r3, r0, #4
100068a4:	428b      	cmp	r3, r1
100068a6:	d35f      	bcc.n	10006968 <__aeabi_idiv+0xd4>
100068a8:	0a03      	lsrs	r3, r0, #8
100068aa:	428b      	cmp	r3, r1
100068ac:	d344      	bcc.n	10006938 <__aeabi_idiv+0xa4>
100068ae:	0b03      	lsrs	r3, r0, #12
100068b0:	428b      	cmp	r3, r1
100068b2:	d328      	bcc.n	10006906 <__aeabi_idiv+0x72>
100068b4:	0c03      	lsrs	r3, r0, #16
100068b6:	428b      	cmp	r3, r1
100068b8:	d30d      	bcc.n	100068d6 <__aeabi_idiv+0x42>
100068ba:	22ff      	movs	r2, #255	; 0xff
100068bc:	0209      	lsls	r1, r1, #8
100068be:	ba12      	rev	r2, r2
100068c0:	0c03      	lsrs	r3, r0, #16
100068c2:	428b      	cmp	r3, r1
100068c4:	d302      	bcc.n	100068cc <__aeabi_idiv+0x38>
100068c6:	1212      	asrs	r2, r2, #8
100068c8:	0209      	lsls	r1, r1, #8
100068ca:	d065      	beq.n	10006998 <__aeabi_idiv+0x104>
100068cc:	0b03      	lsrs	r3, r0, #12
100068ce:	428b      	cmp	r3, r1
100068d0:	d319      	bcc.n	10006906 <__aeabi_idiv+0x72>
100068d2:	e000      	b.n	100068d6 <__aeabi_idiv+0x42>
100068d4:	0a09      	lsrs	r1, r1, #8
100068d6:	0bc3      	lsrs	r3, r0, #15
100068d8:	428b      	cmp	r3, r1
100068da:	d301      	bcc.n	100068e0 <__aeabi_idiv+0x4c>
100068dc:	03cb      	lsls	r3, r1, #15
100068de:	1ac0      	subs	r0, r0, r3
100068e0:	4152      	adcs	r2, r2
100068e2:	0b83      	lsrs	r3, r0, #14
100068e4:	428b      	cmp	r3, r1
100068e6:	d301      	bcc.n	100068ec <__aeabi_idiv+0x58>
100068e8:	038b      	lsls	r3, r1, #14
100068ea:	1ac0      	subs	r0, r0, r3
100068ec:	4152      	adcs	r2, r2
100068ee:	0b43      	lsrs	r3, r0, #13
100068f0:	428b      	cmp	r3, r1
100068f2:	d301      	bcc.n	100068f8 <__aeabi_idiv+0x64>
100068f4:	034b      	lsls	r3, r1, #13
100068f6:	1ac0      	subs	r0, r0, r3
100068f8:	4152      	adcs	r2, r2
100068fa:	0b03      	lsrs	r3, r0, #12
100068fc:	428b      	cmp	r3, r1
100068fe:	d301      	bcc.n	10006904 <__aeabi_idiv+0x70>
10006900:	030b      	lsls	r3, r1, #12
10006902:	1ac0      	subs	r0, r0, r3
10006904:	4152      	adcs	r2, r2
10006906:	0ac3      	lsrs	r3, r0, #11
10006908:	428b      	cmp	r3, r1
1000690a:	d301      	bcc.n	10006910 <__aeabi_idiv+0x7c>
1000690c:	02cb      	lsls	r3, r1, #11
1000690e:	1ac0      	subs	r0, r0, r3
10006910:	4152      	adcs	r2, r2
10006912:	0a83      	lsrs	r3, r0, #10
10006914:	428b      	cmp	r3, r1
10006916:	d301      	bcc.n	1000691c <__aeabi_idiv+0x88>
10006918:	028b      	lsls	r3, r1, #10
1000691a:	1ac0      	subs	r0, r0, r3
1000691c:	4152      	adcs	r2, r2
1000691e:	0a43      	lsrs	r3, r0, #9
10006920:	428b      	cmp	r3, r1
10006922:	d301      	bcc.n	10006928 <__aeabi_idiv+0x94>
10006924:	024b      	lsls	r3, r1, #9
10006926:	1ac0      	subs	r0, r0, r3
10006928:	4152      	adcs	r2, r2
1000692a:	0a03      	lsrs	r3, r0, #8
1000692c:	428b      	cmp	r3, r1
1000692e:	d301      	bcc.n	10006934 <__aeabi_idiv+0xa0>
10006930:	020b      	lsls	r3, r1, #8
10006932:	1ac0      	subs	r0, r0, r3
10006934:	4152      	adcs	r2, r2
10006936:	d2cd      	bcs.n	100068d4 <__aeabi_idiv+0x40>
10006938:	09c3      	lsrs	r3, r0, #7
1000693a:	428b      	cmp	r3, r1
1000693c:	d301      	bcc.n	10006942 <__aeabi_idiv+0xae>
1000693e:	01cb      	lsls	r3, r1, #7
10006940:	1ac0      	subs	r0, r0, r3
10006942:	4152      	adcs	r2, r2
10006944:	0983      	lsrs	r3, r0, #6
10006946:	428b      	cmp	r3, r1
10006948:	d301      	bcc.n	1000694e <__aeabi_idiv+0xba>
1000694a:	018b      	lsls	r3, r1, #6
1000694c:	1ac0      	subs	r0, r0, r3
1000694e:	4152      	adcs	r2, r2
10006950:	0943      	lsrs	r3, r0, #5
10006952:	428b      	cmp	r3, r1
10006954:	d301      	bcc.n	1000695a <__aeabi_idiv+0xc6>
10006956:	014b      	lsls	r3, r1, #5
10006958:	1ac0      	subs	r0, r0, r3
1000695a:	4152      	adcs	r2, r2
1000695c:	0903      	lsrs	r3, r0, #4
1000695e:	428b      	cmp	r3, r1
10006960:	d301      	bcc.n	10006966 <__aeabi_idiv+0xd2>
10006962:	010b      	lsls	r3, r1, #4
10006964:	1ac0      	subs	r0, r0, r3
10006966:	4152      	adcs	r2, r2
10006968:	08c3      	lsrs	r3, r0, #3
1000696a:	428b      	cmp	r3, r1
1000696c:	d301      	bcc.n	10006972 <__aeabi_idiv+0xde>
1000696e:	00cb      	lsls	r3, r1, #3
10006970:	1ac0      	subs	r0, r0, r3
10006972:	4152      	adcs	r2, r2
10006974:	0883      	lsrs	r3, r0, #2
10006976:	428b      	cmp	r3, r1
10006978:	d301      	bcc.n	1000697e <__aeabi_idiv+0xea>
1000697a:	008b      	lsls	r3, r1, #2
1000697c:	1ac0      	subs	r0, r0, r3
1000697e:	4152      	adcs	r2, r2
10006980:	0843      	lsrs	r3, r0, #1
10006982:	428b      	cmp	r3, r1
10006984:	d301      	bcc.n	1000698a <__aeabi_idiv+0xf6>
10006986:	004b      	lsls	r3, r1, #1
10006988:	1ac0      	subs	r0, r0, r3
1000698a:	4152      	adcs	r2, r2
1000698c:	1a41      	subs	r1, r0, r1
1000698e:	d200      	bcs.n	10006992 <__aeabi_idiv+0xfe>
10006990:	4601      	mov	r1, r0
10006992:	4152      	adcs	r2, r2
10006994:	4610      	mov	r0, r2
10006996:	4770      	bx	lr
10006998:	e05d      	b.n	10006a56 <__aeabi_idiv+0x1c2>
1000699a:	0fca      	lsrs	r2, r1, #31
1000699c:	d000      	beq.n	100069a0 <__aeabi_idiv+0x10c>
1000699e:	4249      	negs	r1, r1
100069a0:	1003      	asrs	r3, r0, #32
100069a2:	d300      	bcc.n	100069a6 <__aeabi_idiv+0x112>
100069a4:	4240      	negs	r0, r0
100069a6:	4053      	eors	r3, r2
100069a8:	2200      	movs	r2, #0
100069aa:	469c      	mov	ip, r3
100069ac:	0903      	lsrs	r3, r0, #4
100069ae:	428b      	cmp	r3, r1
100069b0:	d32d      	bcc.n	10006a0e <__aeabi_idiv+0x17a>
100069b2:	0a03      	lsrs	r3, r0, #8
100069b4:	428b      	cmp	r3, r1
100069b6:	d312      	bcc.n	100069de <__aeabi_idiv+0x14a>
100069b8:	22fc      	movs	r2, #252	; 0xfc
100069ba:	0189      	lsls	r1, r1, #6
100069bc:	ba12      	rev	r2, r2
100069be:	0a03      	lsrs	r3, r0, #8
100069c0:	428b      	cmp	r3, r1
100069c2:	d30c      	bcc.n	100069de <__aeabi_idiv+0x14a>
100069c4:	0189      	lsls	r1, r1, #6
100069c6:	1192      	asrs	r2, r2, #6
100069c8:	428b      	cmp	r3, r1
100069ca:	d308      	bcc.n	100069de <__aeabi_idiv+0x14a>
100069cc:	0189      	lsls	r1, r1, #6
100069ce:	1192      	asrs	r2, r2, #6
100069d0:	428b      	cmp	r3, r1
100069d2:	d304      	bcc.n	100069de <__aeabi_idiv+0x14a>
100069d4:	0189      	lsls	r1, r1, #6
100069d6:	d03a      	beq.n	10006a4e <__aeabi_idiv+0x1ba>
100069d8:	1192      	asrs	r2, r2, #6
100069da:	e000      	b.n	100069de <__aeabi_idiv+0x14a>
100069dc:	0989      	lsrs	r1, r1, #6
100069de:	09c3      	lsrs	r3, r0, #7
100069e0:	428b      	cmp	r3, r1
100069e2:	d301      	bcc.n	100069e8 <__aeabi_idiv+0x154>
100069e4:	01cb      	lsls	r3, r1, #7
100069e6:	1ac0      	subs	r0, r0, r3
100069e8:	4152      	adcs	r2, r2
100069ea:	0983      	lsrs	r3, r0, #6
100069ec:	428b      	cmp	r3, r1
100069ee:	d301      	bcc.n	100069f4 <__aeabi_idiv+0x160>
100069f0:	018b      	lsls	r3, r1, #6
100069f2:	1ac0      	subs	r0, r0, r3
100069f4:	4152      	adcs	r2, r2
100069f6:	0943      	lsrs	r3, r0, #5
100069f8:	428b      	cmp	r3, r1
100069fa:	d301      	bcc.n	10006a00 <__aeabi_idiv+0x16c>
100069fc:	014b      	lsls	r3, r1, #5
100069fe:	1ac0      	subs	r0, r0, r3
10006a00:	4152      	adcs	r2, r2
10006a02:	0903      	lsrs	r3, r0, #4
10006a04:	428b      	cmp	r3, r1
10006a06:	d301      	bcc.n	10006a0c <__aeabi_idiv+0x178>
10006a08:	010b      	lsls	r3, r1, #4
10006a0a:	1ac0      	subs	r0, r0, r3
10006a0c:	4152      	adcs	r2, r2
10006a0e:	08c3      	lsrs	r3, r0, #3
10006a10:	428b      	cmp	r3, r1
10006a12:	d301      	bcc.n	10006a18 <__aeabi_idiv+0x184>
10006a14:	00cb      	lsls	r3, r1, #3
10006a16:	1ac0      	subs	r0, r0, r3
10006a18:	4152      	adcs	r2, r2
10006a1a:	0883      	lsrs	r3, r0, #2
10006a1c:	428b      	cmp	r3, r1
10006a1e:	d301      	bcc.n	10006a24 <__aeabi_idiv+0x190>
10006a20:	008b      	lsls	r3, r1, #2
10006a22:	1ac0      	subs	r0, r0, r3
10006a24:	4152      	adcs	r2, r2
10006a26:	d2d9      	bcs.n	100069dc <__aeabi_idiv+0x148>
10006a28:	0843      	lsrs	r3, r0, #1
10006a2a:	428b      	cmp	r3, r1
10006a2c:	d301      	bcc.n	10006a32 <__aeabi_idiv+0x19e>
10006a2e:	004b      	lsls	r3, r1, #1
10006a30:	1ac0      	subs	r0, r0, r3
10006a32:	4152      	adcs	r2, r2
10006a34:	1a41      	subs	r1, r0, r1
10006a36:	d200      	bcs.n	10006a3a <__aeabi_idiv+0x1a6>
10006a38:	4601      	mov	r1, r0
10006a3a:	4663      	mov	r3, ip
10006a3c:	4152      	adcs	r2, r2
10006a3e:	105b      	asrs	r3, r3, #1
10006a40:	4610      	mov	r0, r2
10006a42:	d301      	bcc.n	10006a48 <__aeabi_idiv+0x1b4>
10006a44:	4240      	negs	r0, r0
10006a46:	2b00      	cmp	r3, #0
10006a48:	d500      	bpl.n	10006a4c <__aeabi_idiv+0x1b8>
10006a4a:	4249      	negs	r1, r1
10006a4c:	4770      	bx	lr
10006a4e:	4663      	mov	r3, ip
10006a50:	105b      	asrs	r3, r3, #1
10006a52:	d300      	bcc.n	10006a56 <__aeabi_idiv+0x1c2>
10006a54:	4240      	negs	r0, r0
10006a56:	b501      	push	{r0, lr}
10006a58:	2000      	movs	r0, #0
10006a5a:	f000 f80b 	bl	10006a74 <__aeabi_idiv0>
10006a5e:	bd02      	pop	{r1, pc}

10006a60 <__aeabi_idivmod>:
10006a60:	2900      	cmp	r1, #0
10006a62:	d0f8      	beq.n	10006a56 <__aeabi_idiv+0x1c2>
10006a64:	b503      	push	{r0, r1, lr}
10006a66:	f7ff ff15 	bl	10006894 <__aeabi_idiv>
10006a6a:	bc0e      	pop	{r1, r2, r3}
10006a6c:	4342      	muls	r2, r0
10006a6e:	1a89      	subs	r1, r1, r2
10006a70:	4718      	bx	r3
10006a72:	46c0      	nop			; (mov r8, r8)

10006a74 <__aeabi_idiv0>:
10006a74:	4770      	bx	lr
10006a76:	46c0      	nop			; (mov r8, r8)

10006a78 <__aeabi_cdrcmple>:
10006a78:	4684      	mov	ip, r0
10006a7a:	1c10      	adds	r0, r2, #0
10006a7c:	4662      	mov	r2, ip
10006a7e:	468c      	mov	ip, r1
10006a80:	1c19      	adds	r1, r3, #0
10006a82:	4663      	mov	r3, ip
10006a84:	e000      	b.n	10006a88 <__aeabi_cdcmpeq>
10006a86:	46c0      	nop			; (mov r8, r8)

10006a88 <__aeabi_cdcmpeq>:
10006a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006a8a:	f001 f833 	bl	10007af4 <__ledf2>
10006a8e:	2800      	cmp	r0, #0
10006a90:	d401      	bmi.n	10006a96 <__aeabi_cdcmpeq+0xe>
10006a92:	2100      	movs	r1, #0
10006a94:	42c8      	cmn	r0, r1
10006a96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10006a98 <__aeabi_dcmpeq>:
10006a98:	b510      	push	{r4, lr}
10006a9a:	f000 ff77 	bl	1000798c <__eqdf2>
10006a9e:	4240      	negs	r0, r0
10006aa0:	3001      	adds	r0, #1
10006aa2:	bd10      	pop	{r4, pc}

10006aa4 <__aeabi_dcmplt>:
10006aa4:	b510      	push	{r4, lr}
10006aa6:	f001 f825 	bl	10007af4 <__ledf2>
10006aaa:	2800      	cmp	r0, #0
10006aac:	db01      	blt.n	10006ab2 <__aeabi_dcmplt+0xe>
10006aae:	2000      	movs	r0, #0
10006ab0:	bd10      	pop	{r4, pc}
10006ab2:	2001      	movs	r0, #1
10006ab4:	bd10      	pop	{r4, pc}
10006ab6:	46c0      	nop			; (mov r8, r8)

10006ab8 <__aeabi_dcmple>:
10006ab8:	b510      	push	{r4, lr}
10006aba:	f001 f81b 	bl	10007af4 <__ledf2>
10006abe:	2800      	cmp	r0, #0
10006ac0:	dd01      	ble.n	10006ac6 <__aeabi_dcmple+0xe>
10006ac2:	2000      	movs	r0, #0
10006ac4:	bd10      	pop	{r4, pc}
10006ac6:	2001      	movs	r0, #1
10006ac8:	bd10      	pop	{r4, pc}
10006aca:	46c0      	nop			; (mov r8, r8)

10006acc <__aeabi_dcmpgt>:
10006acc:	b510      	push	{r4, lr}
10006ace:	f000 ffa1 	bl	10007a14 <__gedf2>
10006ad2:	2800      	cmp	r0, #0
10006ad4:	dc01      	bgt.n	10006ada <__aeabi_dcmpgt+0xe>
10006ad6:	2000      	movs	r0, #0
10006ad8:	bd10      	pop	{r4, pc}
10006ada:	2001      	movs	r0, #1
10006adc:	bd10      	pop	{r4, pc}
10006ade:	46c0      	nop			; (mov r8, r8)

10006ae0 <__aeabi_dcmpge>:
10006ae0:	b510      	push	{r4, lr}
10006ae2:	f000 ff97 	bl	10007a14 <__gedf2>
10006ae6:	2800      	cmp	r0, #0
10006ae8:	da01      	bge.n	10006aee <__aeabi_dcmpge+0xe>
10006aea:	2000      	movs	r0, #0
10006aec:	bd10      	pop	{r4, pc}
10006aee:	2001      	movs	r0, #1
10006af0:	bd10      	pop	{r4, pc}
10006af2:	46c0      	nop			; (mov r8, r8)

10006af4 <__aeabi_cfrcmple>:
10006af4:	4684      	mov	ip, r0
10006af6:	1c08      	adds	r0, r1, #0
10006af8:	4661      	mov	r1, ip
10006afa:	e7ff      	b.n	10006afc <__aeabi_cfcmpeq>

10006afc <__aeabi_cfcmpeq>:
10006afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10006afe:	f000 f8bf 	bl	10006c80 <__lesf2>
10006b02:	2800      	cmp	r0, #0
10006b04:	d401      	bmi.n	10006b0a <__aeabi_cfcmpeq+0xe>
10006b06:	2100      	movs	r1, #0
10006b08:	42c8      	cmn	r0, r1
10006b0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10006b0c <__aeabi_fcmpeq>:
10006b0c:	b510      	push	{r4, lr}
10006b0e:	f000 f843 	bl	10006b98 <__eqsf2>
10006b12:	4240      	negs	r0, r0
10006b14:	3001      	adds	r0, #1
10006b16:	bd10      	pop	{r4, pc}

10006b18 <__aeabi_fcmplt>:
10006b18:	b510      	push	{r4, lr}
10006b1a:	f000 f8b1 	bl	10006c80 <__lesf2>
10006b1e:	2800      	cmp	r0, #0
10006b20:	db01      	blt.n	10006b26 <__aeabi_fcmplt+0xe>
10006b22:	2000      	movs	r0, #0
10006b24:	bd10      	pop	{r4, pc}
10006b26:	2001      	movs	r0, #1
10006b28:	bd10      	pop	{r4, pc}
10006b2a:	46c0      	nop			; (mov r8, r8)

10006b2c <__aeabi_fcmple>:
10006b2c:	b510      	push	{r4, lr}
10006b2e:	f000 f8a7 	bl	10006c80 <__lesf2>
10006b32:	2800      	cmp	r0, #0
10006b34:	dd01      	ble.n	10006b3a <__aeabi_fcmple+0xe>
10006b36:	2000      	movs	r0, #0
10006b38:	bd10      	pop	{r4, pc}
10006b3a:	2001      	movs	r0, #1
10006b3c:	bd10      	pop	{r4, pc}
10006b3e:	46c0      	nop			; (mov r8, r8)

10006b40 <__aeabi_fcmpgt>:
10006b40:	b510      	push	{r4, lr}
10006b42:	f000 f853 	bl	10006bec <__gesf2>
10006b46:	2800      	cmp	r0, #0
10006b48:	dc01      	bgt.n	10006b4e <__aeabi_fcmpgt+0xe>
10006b4a:	2000      	movs	r0, #0
10006b4c:	bd10      	pop	{r4, pc}
10006b4e:	2001      	movs	r0, #1
10006b50:	bd10      	pop	{r4, pc}
10006b52:	46c0      	nop			; (mov r8, r8)

10006b54 <__aeabi_fcmpge>:
10006b54:	b510      	push	{r4, lr}
10006b56:	f000 f849 	bl	10006bec <__gesf2>
10006b5a:	2800      	cmp	r0, #0
10006b5c:	da01      	bge.n	10006b62 <__aeabi_fcmpge+0xe>
10006b5e:	2000      	movs	r0, #0
10006b60:	bd10      	pop	{r4, pc}
10006b62:	2001      	movs	r0, #1
10006b64:	bd10      	pop	{r4, pc}
10006b66:	46c0      	nop			; (mov r8, r8)

10006b68 <__aeabi_f2uiz>:
10006b68:	219e      	movs	r1, #158	; 0x9e
10006b6a:	b510      	push	{r4, lr}
10006b6c:	05c9      	lsls	r1, r1, #23
10006b6e:	1c04      	adds	r4, r0, #0
10006b70:	f7ff fff0 	bl	10006b54 <__aeabi_fcmpge>
10006b74:	2800      	cmp	r0, #0
10006b76:	d103      	bne.n	10006b80 <__aeabi_f2uiz+0x18>
10006b78:	1c20      	adds	r0, r4, #0
10006b7a:	f000 fb77 	bl	1000726c <__aeabi_f2iz>
10006b7e:	bd10      	pop	{r4, pc}
10006b80:	219e      	movs	r1, #158	; 0x9e
10006b82:	1c20      	adds	r0, r4, #0
10006b84:	05c9      	lsls	r1, r1, #23
10006b86:	f000 f9f3 	bl	10006f70 <__aeabi_fsub>
10006b8a:	f000 fb6f 	bl	1000726c <__aeabi_f2iz>
10006b8e:	2380      	movs	r3, #128	; 0x80
10006b90:	061b      	lsls	r3, r3, #24
10006b92:	469c      	mov	ip, r3
10006b94:	4460      	add	r0, ip
10006b96:	e7f2      	b.n	10006b7e <__aeabi_f2uiz+0x16>

10006b98 <__eqsf2>:
10006b98:	0243      	lsls	r3, r0, #9
10006b9a:	b570      	push	{r4, r5, r6, lr}
10006b9c:	0042      	lsls	r2, r0, #1
10006b9e:	004c      	lsls	r4, r1, #1
10006ba0:	0a5d      	lsrs	r5, r3, #9
10006ba2:	0fc3      	lsrs	r3, r0, #31
10006ba4:	0248      	lsls	r0, r1, #9
10006ba6:	0e12      	lsrs	r2, r2, #24
10006ba8:	0a46      	lsrs	r6, r0, #9
10006baa:	0e24      	lsrs	r4, r4, #24
10006bac:	0fc9      	lsrs	r1, r1, #31
10006bae:	2aff      	cmp	r2, #255	; 0xff
10006bb0:	d005      	beq.n	10006bbe <__eqsf2+0x26>
10006bb2:	2cff      	cmp	r4, #255	; 0xff
10006bb4:	d008      	beq.n	10006bc8 <__eqsf2+0x30>
10006bb6:	2001      	movs	r0, #1
10006bb8:	42a2      	cmp	r2, r4
10006bba:	d00b      	beq.n	10006bd4 <__eqsf2+0x3c>
10006bbc:	bd70      	pop	{r4, r5, r6, pc}
10006bbe:	2001      	movs	r0, #1
10006bc0:	2d00      	cmp	r5, #0
10006bc2:	d1fb      	bne.n	10006bbc <__eqsf2+0x24>
10006bc4:	2cff      	cmp	r4, #255	; 0xff
10006bc6:	d1f6      	bne.n	10006bb6 <__eqsf2+0x1e>
10006bc8:	2001      	movs	r0, #1
10006bca:	2e00      	cmp	r6, #0
10006bcc:	d1f6      	bne.n	10006bbc <__eqsf2+0x24>
10006bce:	2001      	movs	r0, #1
10006bd0:	42a2      	cmp	r2, r4
10006bd2:	d1f3      	bne.n	10006bbc <__eqsf2+0x24>
10006bd4:	42b5      	cmp	r5, r6
10006bd6:	d1f1      	bne.n	10006bbc <__eqsf2+0x24>
10006bd8:	428b      	cmp	r3, r1
10006bda:	d005      	beq.n	10006be8 <__eqsf2+0x50>
10006bdc:	2a00      	cmp	r2, #0
10006bde:	d1ed      	bne.n	10006bbc <__eqsf2+0x24>
10006be0:	1c28      	adds	r0, r5, #0
10006be2:	1e43      	subs	r3, r0, #1
10006be4:	4198      	sbcs	r0, r3
10006be6:	e7e9      	b.n	10006bbc <__eqsf2+0x24>
10006be8:	2000      	movs	r0, #0
10006bea:	e7e7      	b.n	10006bbc <__eqsf2+0x24>

10006bec <__gesf2>:
10006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10006bee:	0243      	lsls	r3, r0, #9
10006bf0:	024d      	lsls	r5, r1, #9
10006bf2:	004a      	lsls	r2, r1, #1
10006bf4:	0044      	lsls	r4, r0, #1
10006bf6:	0a5e      	lsrs	r6, r3, #9
10006bf8:	0e24      	lsrs	r4, r4, #24
10006bfa:	0fc3      	lsrs	r3, r0, #31
10006bfc:	0a6d      	lsrs	r5, r5, #9
10006bfe:	0e12      	lsrs	r2, r2, #24
10006c00:	0fc9      	lsrs	r1, r1, #31
10006c02:	2cff      	cmp	r4, #255	; 0xff
10006c04:	d00d      	beq.n	10006c22 <__gesf2+0x36>
10006c06:	2aff      	cmp	r2, #255	; 0xff
10006c08:	d031      	beq.n	10006c6e <__gesf2+0x82>
10006c0a:	2c00      	cmp	r4, #0
10006c0c:	d10d      	bne.n	10006c2a <__gesf2+0x3e>
10006c0e:	4277      	negs	r7, r6
10006c10:	4177      	adcs	r7, r6
10006c12:	2a00      	cmp	r2, #0
10006c14:	d123      	bne.n	10006c5e <__gesf2+0x72>
10006c16:	2d00      	cmp	r5, #0
10006c18:	d121      	bne.n	10006c5e <__gesf2+0x72>
10006c1a:	2000      	movs	r0, #0
10006c1c:	2f00      	cmp	r7, #0
10006c1e:	d10b      	bne.n	10006c38 <__gesf2+0x4c>
10006c20:	e007      	b.n	10006c32 <__gesf2+0x46>
10006c22:	2e00      	cmp	r6, #0
10006c24:	d128      	bne.n	10006c78 <__gesf2+0x8c>
10006c26:	2aff      	cmp	r2, #255	; 0xff
10006c28:	d021      	beq.n	10006c6e <__gesf2+0x82>
10006c2a:	2a00      	cmp	r2, #0
10006c2c:	d005      	beq.n	10006c3a <__gesf2+0x4e>
10006c2e:	428b      	cmp	r3, r1
10006c30:	d007      	beq.n	10006c42 <__gesf2+0x56>
10006c32:	4258      	negs	r0, r3
10006c34:	2301      	movs	r3, #1
10006c36:	4318      	orrs	r0, r3
10006c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006c3a:	2d00      	cmp	r5, #0
10006c3c:	d0f9      	beq.n	10006c32 <__gesf2+0x46>
10006c3e:	428b      	cmp	r3, r1
10006c40:	d1f7      	bne.n	10006c32 <__gesf2+0x46>
10006c42:	4294      	cmp	r4, r2
10006c44:	dcf5      	bgt.n	10006c32 <__gesf2+0x46>
10006c46:	db04      	blt.n	10006c52 <__gesf2+0x66>
10006c48:	42ae      	cmp	r6, r5
10006c4a:	d8f2      	bhi.n	10006c32 <__gesf2+0x46>
10006c4c:	2000      	movs	r0, #0
10006c4e:	42ae      	cmp	r6, r5
10006c50:	d2f2      	bcs.n	10006c38 <__gesf2+0x4c>
10006c52:	4258      	negs	r0, r3
10006c54:	4143      	adcs	r3, r0
10006c56:	2001      	movs	r0, #1
10006c58:	425b      	negs	r3, r3
10006c5a:	4318      	orrs	r0, r3
10006c5c:	e7ec      	b.n	10006c38 <__gesf2+0x4c>
10006c5e:	2f00      	cmp	r7, #0
10006c60:	d0e5      	beq.n	10006c2e <__gesf2+0x42>
10006c62:	4248      	negs	r0, r1
10006c64:	4141      	adcs	r1, r0
10006c66:	2001      	movs	r0, #1
10006c68:	4249      	negs	r1, r1
10006c6a:	4308      	orrs	r0, r1
10006c6c:	e7e4      	b.n	10006c38 <__gesf2+0x4c>
10006c6e:	2d00      	cmp	r5, #0
10006c70:	d102      	bne.n	10006c78 <__gesf2+0x8c>
10006c72:	2c00      	cmp	r4, #0
10006c74:	d0cb      	beq.n	10006c0e <__gesf2+0x22>
10006c76:	e7da      	b.n	10006c2e <__gesf2+0x42>
10006c78:	2002      	movs	r0, #2
10006c7a:	4240      	negs	r0, r0
10006c7c:	e7dc      	b.n	10006c38 <__gesf2+0x4c>
10006c7e:	46c0      	nop			; (mov r8, r8)

10006c80 <__lesf2>:
10006c80:	0243      	lsls	r3, r0, #9
10006c82:	b5f0      	push	{r4, r5, r6, r7, lr}
10006c84:	0042      	lsls	r2, r0, #1
10006c86:	004c      	lsls	r4, r1, #1
10006c88:	0a5e      	lsrs	r6, r3, #9
10006c8a:	0fc3      	lsrs	r3, r0, #31
10006c8c:	0248      	lsls	r0, r1, #9
10006c8e:	0e12      	lsrs	r2, r2, #24
10006c90:	0a45      	lsrs	r5, r0, #9
10006c92:	0e24      	lsrs	r4, r4, #24
10006c94:	0fc9      	lsrs	r1, r1, #31
10006c96:	2aff      	cmp	r2, #255	; 0xff
10006c98:	d00f      	beq.n	10006cba <__lesf2+0x3a>
10006c9a:	2cff      	cmp	r4, #255	; 0xff
10006c9c:	d01a      	beq.n	10006cd4 <__lesf2+0x54>
10006c9e:	2a00      	cmp	r2, #0
10006ca0:	d110      	bne.n	10006cc4 <__lesf2+0x44>
10006ca2:	4277      	negs	r7, r6
10006ca4:	4177      	adcs	r7, r6
10006ca6:	2c00      	cmp	r4, #0
10006ca8:	d029      	beq.n	10006cfe <__lesf2+0x7e>
10006caa:	2f00      	cmp	r7, #0
10006cac:	d017      	beq.n	10006cde <__lesf2+0x5e>
10006cae:	4248      	negs	r0, r1
10006cb0:	4141      	adcs	r1, r0
10006cb2:	2001      	movs	r0, #1
10006cb4:	4249      	negs	r1, r1
10006cb6:	4308      	orrs	r0, r1
10006cb8:	e00b      	b.n	10006cd2 <__lesf2+0x52>
10006cba:	2002      	movs	r0, #2
10006cbc:	2e00      	cmp	r6, #0
10006cbe:	d108      	bne.n	10006cd2 <__lesf2+0x52>
10006cc0:	2cff      	cmp	r4, #255	; 0xff
10006cc2:	d007      	beq.n	10006cd4 <__lesf2+0x54>
10006cc4:	2c00      	cmp	r4, #0
10006cc6:	d10a      	bne.n	10006cde <__lesf2+0x5e>
10006cc8:	2d00      	cmp	r5, #0
10006cca:	d108      	bne.n	10006cde <__lesf2+0x5e>
10006ccc:	4258      	negs	r0, r3
10006cce:	2301      	movs	r3, #1
10006cd0:	4318      	orrs	r0, r3
10006cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006cd4:	2002      	movs	r0, #2
10006cd6:	2d00      	cmp	r5, #0
10006cd8:	d1fb      	bne.n	10006cd2 <__lesf2+0x52>
10006cda:	2a00      	cmp	r2, #0
10006cdc:	d0e1      	beq.n	10006ca2 <__lesf2+0x22>
10006cde:	428b      	cmp	r3, r1
10006ce0:	d1f4      	bne.n	10006ccc <__lesf2+0x4c>
10006ce2:	42a2      	cmp	r2, r4
10006ce4:	dcf2      	bgt.n	10006ccc <__lesf2+0x4c>
10006ce6:	db04      	blt.n	10006cf2 <__lesf2+0x72>
10006ce8:	42ae      	cmp	r6, r5
10006cea:	d8ef      	bhi.n	10006ccc <__lesf2+0x4c>
10006cec:	2000      	movs	r0, #0
10006cee:	42ae      	cmp	r6, r5
10006cf0:	d2ef      	bcs.n	10006cd2 <__lesf2+0x52>
10006cf2:	4258      	negs	r0, r3
10006cf4:	4143      	adcs	r3, r0
10006cf6:	2001      	movs	r0, #1
10006cf8:	425b      	negs	r3, r3
10006cfa:	4318      	orrs	r0, r3
10006cfc:	e7e9      	b.n	10006cd2 <__lesf2+0x52>
10006cfe:	2d00      	cmp	r5, #0
10006d00:	d1d3      	bne.n	10006caa <__lesf2+0x2a>
10006d02:	2000      	movs	r0, #0
10006d04:	2f00      	cmp	r7, #0
10006d06:	d1e4      	bne.n	10006cd2 <__lesf2+0x52>
10006d08:	e7e0      	b.n	10006ccc <__lesf2+0x4c>
10006d0a:	46c0      	nop			; (mov r8, r8)

10006d0c <__aeabi_fmul>:
10006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10006d0e:	465f      	mov	r7, fp
10006d10:	4656      	mov	r6, sl
10006d12:	464d      	mov	r5, r9
10006d14:	4644      	mov	r4, r8
10006d16:	b4f0      	push	{r4, r5, r6, r7}
10006d18:	0245      	lsls	r5, r0, #9
10006d1a:	0046      	lsls	r6, r0, #1
10006d1c:	0fc4      	lsrs	r4, r0, #31
10006d1e:	b083      	sub	sp, #12
10006d20:	1c0f      	adds	r7, r1, #0
10006d22:	0a6d      	lsrs	r5, r5, #9
10006d24:	0e36      	lsrs	r6, r6, #24
10006d26:	46a3      	mov	fp, r4
10006d28:	d045      	beq.n	10006db6 <__aeabi_fmul+0xaa>
10006d2a:	2eff      	cmp	r6, #255	; 0xff
10006d2c:	d025      	beq.n	10006d7a <__aeabi_fmul+0x6e>
10006d2e:	2380      	movs	r3, #128	; 0x80
10006d30:	041b      	lsls	r3, r3, #16
10006d32:	431d      	orrs	r5, r3
10006d34:	2300      	movs	r3, #0
10006d36:	469a      	mov	sl, r3
10006d38:	00ed      	lsls	r5, r5, #3
10006d3a:	3e7f      	subs	r6, #127	; 0x7f
10006d3c:	9301      	str	r3, [sp, #4]
10006d3e:	027b      	lsls	r3, r7, #9
10006d40:	0a5b      	lsrs	r3, r3, #9
10006d42:	4698      	mov	r8, r3
10006d44:	0078      	lsls	r0, r7, #1
10006d46:	0ffb      	lsrs	r3, r7, #31
10006d48:	0e00      	lsrs	r0, r0, #24
10006d4a:	4699      	mov	r9, r3
10006d4c:	d040      	beq.n	10006dd0 <__aeabi_fmul+0xc4>
10006d4e:	28ff      	cmp	r0, #255	; 0xff
10006d50:	d038      	beq.n	10006dc4 <__aeabi_fmul+0xb8>
10006d52:	2380      	movs	r3, #128	; 0x80
10006d54:	4642      	mov	r2, r8
10006d56:	041b      	lsls	r3, r3, #16
10006d58:	4313      	orrs	r3, r2
10006d5a:	00db      	lsls	r3, r3, #3
10006d5c:	4698      	mov	r8, r3
10006d5e:	2300      	movs	r3, #0
10006d60:	387f      	subs	r0, #127	; 0x7f
10006d62:	464a      	mov	r2, r9
10006d64:	9f01      	ldr	r7, [sp, #4]
10006d66:	1830      	adds	r0, r6, r0
10006d68:	4062      	eors	r2, r4
10006d6a:	1c41      	adds	r1, r0, #1
10006d6c:	431f      	orrs	r7, r3
10006d6e:	2f0f      	cmp	r7, #15
10006d70:	d869      	bhi.n	10006e46 <__aeabi_fmul+0x13a>
10006d72:	4e7d      	ldr	r6, [pc, #500]	; (10006f68 <__aeabi_fmul+0x25c>)
10006d74:	00bf      	lsls	r7, r7, #2
10006d76:	59f6      	ldr	r6, [r6, r7]
10006d78:	46b7      	mov	pc, r6
10006d7a:	2d00      	cmp	r5, #0
10006d7c:	d145      	bne.n	10006e0a <__aeabi_fmul+0xfe>
10006d7e:	2308      	movs	r3, #8
10006d80:	9301      	str	r3, [sp, #4]
10006d82:	3b06      	subs	r3, #6
10006d84:	469a      	mov	sl, r3
10006d86:	e7da      	b.n	10006d3e <__aeabi_fmul+0x32>
10006d88:	4693      	mov	fp, r2
10006d8a:	4653      	mov	r3, sl
10006d8c:	2b02      	cmp	r3, #2
10006d8e:	d12f      	bne.n	10006df0 <__aeabi_fmul+0xe4>
10006d90:	465b      	mov	r3, fp
10006d92:	2401      	movs	r4, #1
10006d94:	2500      	movs	r5, #0
10006d96:	401c      	ands	r4, r3
10006d98:	23ff      	movs	r3, #255	; 0xff
10006d9a:	026d      	lsls	r5, r5, #9
10006d9c:	05db      	lsls	r3, r3, #23
10006d9e:	0a6d      	lsrs	r5, r5, #9
10006da0:	07e4      	lsls	r4, r4, #31
10006da2:	431d      	orrs	r5, r3
10006da4:	4325      	orrs	r5, r4
10006da6:	1c28      	adds	r0, r5, #0
10006da8:	b003      	add	sp, #12
10006daa:	bc3c      	pop	{r2, r3, r4, r5}
10006dac:	4690      	mov	r8, r2
10006dae:	4699      	mov	r9, r3
10006db0:	46a2      	mov	sl, r4
10006db2:	46ab      	mov	fp, r5
10006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006db6:	2d00      	cmp	r5, #0
10006db8:	d12c      	bne.n	10006e14 <__aeabi_fmul+0x108>
10006dba:	2304      	movs	r3, #4
10006dbc:	9301      	str	r3, [sp, #4]
10006dbe:	3b03      	subs	r3, #3
10006dc0:	469a      	mov	sl, r3
10006dc2:	e7bc      	b.n	10006d3e <__aeabi_fmul+0x32>
10006dc4:	4643      	mov	r3, r8
10006dc6:	425a      	negs	r2, r3
10006dc8:	4153      	adcs	r3, r2
10006dca:	2203      	movs	r2, #3
10006dcc:	1ad3      	subs	r3, r2, r3
10006dce:	e7c8      	b.n	10006d62 <__aeabi_fmul+0x56>
10006dd0:	4642      	mov	r2, r8
10006dd2:	2301      	movs	r3, #1
10006dd4:	2a00      	cmp	r2, #0
10006dd6:	d0c4      	beq.n	10006d62 <__aeabi_fmul+0x56>
10006dd8:	4640      	mov	r0, r8
10006dda:	f001 fe57 	bl	10008a8c <__clzsi2>
10006dde:	4642      	mov	r2, r8
10006de0:	1f43      	subs	r3, r0, #5
10006de2:	409a      	lsls	r2, r3
10006de4:	2376      	movs	r3, #118	; 0x76
10006de6:	425b      	negs	r3, r3
10006de8:	1a18      	subs	r0, r3, r0
10006dea:	4690      	mov	r8, r2
10006dec:	2300      	movs	r3, #0
10006dee:	e7b8      	b.n	10006d62 <__aeabi_fmul+0x56>
10006df0:	2b03      	cmp	r3, #3
10006df2:	d100      	bne.n	10006df6 <__aeabi_fmul+0xea>
10006df4:	e0ad      	b.n	10006f52 <__aeabi_fmul+0x246>
10006df6:	2b01      	cmp	r3, #1
10006df8:	d000      	beq.n	10006dfc <__aeabi_fmul+0xf0>
10006dfa:	e08c      	b.n	10006f16 <__aeabi_fmul+0x20a>
10006dfc:	465b      	mov	r3, fp
10006dfe:	4654      	mov	r4, sl
10006e00:	401c      	ands	r4, r3
10006e02:	b2e4      	uxtb	r4, r4
10006e04:	2300      	movs	r3, #0
10006e06:	2500      	movs	r5, #0
10006e08:	e7c7      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006e0a:	230c      	movs	r3, #12
10006e0c:	9301      	str	r3, [sp, #4]
10006e0e:	3b09      	subs	r3, #9
10006e10:	469a      	mov	sl, r3
10006e12:	e794      	b.n	10006d3e <__aeabi_fmul+0x32>
10006e14:	1c28      	adds	r0, r5, #0
10006e16:	f001 fe39 	bl	10008a8c <__clzsi2>
10006e1a:	2676      	movs	r6, #118	; 0x76
10006e1c:	1f43      	subs	r3, r0, #5
10006e1e:	409d      	lsls	r5, r3
10006e20:	2300      	movs	r3, #0
10006e22:	4276      	negs	r6, r6
10006e24:	1a36      	subs	r6, r6, r0
10006e26:	9301      	str	r3, [sp, #4]
10006e28:	469a      	mov	sl, r3
10006e2a:	e788      	b.n	10006d3e <__aeabi_fmul+0x32>
10006e2c:	2580      	movs	r5, #128	; 0x80
10006e2e:	2400      	movs	r4, #0
10006e30:	03ed      	lsls	r5, r5, #15
10006e32:	23ff      	movs	r3, #255	; 0xff
10006e34:	e7b1      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006e36:	4645      	mov	r5, r8
10006e38:	46cb      	mov	fp, r9
10006e3a:	469a      	mov	sl, r3
10006e3c:	e7a5      	b.n	10006d8a <__aeabi_fmul+0x7e>
10006e3e:	4645      	mov	r5, r8
10006e40:	4693      	mov	fp, r2
10006e42:	469a      	mov	sl, r3
10006e44:	e7a1      	b.n	10006d8a <__aeabi_fmul+0x7e>
10006e46:	4643      	mov	r3, r8
10006e48:	042c      	lsls	r4, r5, #16
10006e4a:	0c1b      	lsrs	r3, r3, #16
10006e4c:	469c      	mov	ip, r3
10006e4e:	0c23      	lsrs	r3, r4, #16
10006e50:	4644      	mov	r4, r8
10006e52:	0426      	lsls	r6, r4, #16
10006e54:	1c1c      	adds	r4, r3, #0
10006e56:	0c36      	lsrs	r6, r6, #16
10006e58:	0c2f      	lsrs	r7, r5, #16
10006e5a:	4374      	muls	r4, r6
10006e5c:	1c35      	adds	r5, r6, #0
10006e5e:	4666      	mov	r6, ip
10006e60:	437d      	muls	r5, r7
10006e62:	4373      	muls	r3, r6
10006e64:	4377      	muls	r7, r6
10006e66:	18eb      	adds	r3, r5, r3
10006e68:	0c26      	lsrs	r6, r4, #16
10006e6a:	199e      	adds	r6, r3, r6
10006e6c:	42b5      	cmp	r5, r6
10006e6e:	d903      	bls.n	10006e78 <__aeabi_fmul+0x16c>
10006e70:	2380      	movs	r3, #128	; 0x80
10006e72:	025b      	lsls	r3, r3, #9
10006e74:	469c      	mov	ip, r3
10006e76:	4467      	add	r7, ip
10006e78:	0424      	lsls	r4, r4, #16
10006e7a:	0433      	lsls	r3, r6, #16
10006e7c:	0c24      	lsrs	r4, r4, #16
10006e7e:	191b      	adds	r3, r3, r4
10006e80:	019d      	lsls	r5, r3, #6
10006e82:	1e6c      	subs	r4, r5, #1
10006e84:	41a5      	sbcs	r5, r4
10006e86:	0e9b      	lsrs	r3, r3, #26
10006e88:	0c36      	lsrs	r6, r6, #16
10006e8a:	432b      	orrs	r3, r5
10006e8c:	19bd      	adds	r5, r7, r6
10006e8e:	01ad      	lsls	r5, r5, #6
10006e90:	431d      	orrs	r5, r3
10006e92:	012b      	lsls	r3, r5, #4
10006e94:	d504      	bpl.n	10006ea0 <__aeabi_fmul+0x194>
10006e96:	2301      	movs	r3, #1
10006e98:	0868      	lsrs	r0, r5, #1
10006e9a:	401d      	ands	r5, r3
10006e9c:	4305      	orrs	r5, r0
10006e9e:	1c08      	adds	r0, r1, #0
10006ea0:	1c03      	adds	r3, r0, #0
10006ea2:	337f      	adds	r3, #127	; 0x7f
10006ea4:	2b00      	cmp	r3, #0
10006ea6:	dd2c      	ble.n	10006f02 <__aeabi_fmul+0x1f6>
10006ea8:	0769      	lsls	r1, r5, #29
10006eaa:	d004      	beq.n	10006eb6 <__aeabi_fmul+0x1aa>
10006eac:	210f      	movs	r1, #15
10006eae:	4029      	ands	r1, r5
10006eb0:	2904      	cmp	r1, #4
10006eb2:	d000      	beq.n	10006eb6 <__aeabi_fmul+0x1aa>
10006eb4:	3504      	adds	r5, #4
10006eb6:	0129      	lsls	r1, r5, #4
10006eb8:	d503      	bpl.n	10006ec2 <__aeabi_fmul+0x1b6>
10006eba:	4b2c      	ldr	r3, [pc, #176]	; (10006f6c <__aeabi_fmul+0x260>)
10006ebc:	401d      	ands	r5, r3
10006ebe:	1c03      	adds	r3, r0, #0
10006ec0:	3380      	adds	r3, #128	; 0x80
10006ec2:	2bfe      	cmp	r3, #254	; 0xfe
10006ec4:	dd17      	ble.n	10006ef6 <__aeabi_fmul+0x1ea>
10006ec6:	2401      	movs	r4, #1
10006ec8:	23ff      	movs	r3, #255	; 0xff
10006eca:	4014      	ands	r4, r2
10006ecc:	2500      	movs	r5, #0
10006ece:	e764      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006ed0:	2080      	movs	r0, #128	; 0x80
10006ed2:	03c0      	lsls	r0, r0, #15
10006ed4:	4205      	tst	r5, r0
10006ed6:	d009      	beq.n	10006eec <__aeabi_fmul+0x1e0>
10006ed8:	4643      	mov	r3, r8
10006eda:	4203      	tst	r3, r0
10006edc:	d106      	bne.n	10006eec <__aeabi_fmul+0x1e0>
10006ede:	4645      	mov	r5, r8
10006ee0:	4305      	orrs	r5, r0
10006ee2:	026d      	lsls	r5, r5, #9
10006ee4:	0a6d      	lsrs	r5, r5, #9
10006ee6:	464c      	mov	r4, r9
10006ee8:	23ff      	movs	r3, #255	; 0xff
10006eea:	e756      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006eec:	4305      	orrs	r5, r0
10006eee:	026d      	lsls	r5, r5, #9
10006ef0:	0a6d      	lsrs	r5, r5, #9
10006ef2:	23ff      	movs	r3, #255	; 0xff
10006ef4:	e751      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006ef6:	2401      	movs	r4, #1
10006ef8:	01ad      	lsls	r5, r5, #6
10006efa:	0a6d      	lsrs	r5, r5, #9
10006efc:	b2db      	uxtb	r3, r3
10006efe:	4014      	ands	r4, r2
10006f00:	e74b      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006f02:	237e      	movs	r3, #126	; 0x7e
10006f04:	425b      	negs	r3, r3
10006f06:	1a1b      	subs	r3, r3, r0
10006f08:	2b1b      	cmp	r3, #27
10006f0a:	dd07      	ble.n	10006f1c <__aeabi_fmul+0x210>
10006f0c:	2401      	movs	r4, #1
10006f0e:	2300      	movs	r3, #0
10006f10:	4014      	ands	r4, r2
10006f12:	2500      	movs	r5, #0
10006f14:	e741      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006f16:	1c08      	adds	r0, r1, #0
10006f18:	465a      	mov	r2, fp
10006f1a:	e7c1      	b.n	10006ea0 <__aeabi_fmul+0x194>
10006f1c:	309e      	adds	r0, #158	; 0x9e
10006f1e:	1c29      	adds	r1, r5, #0
10006f20:	4085      	lsls	r5, r0
10006f22:	40d9      	lsrs	r1, r3
10006f24:	1e68      	subs	r0, r5, #1
10006f26:	4185      	sbcs	r5, r0
10006f28:	430d      	orrs	r5, r1
10006f2a:	076b      	lsls	r3, r5, #29
10006f2c:	d004      	beq.n	10006f38 <__aeabi_fmul+0x22c>
10006f2e:	230f      	movs	r3, #15
10006f30:	402b      	ands	r3, r5
10006f32:	2b04      	cmp	r3, #4
10006f34:	d000      	beq.n	10006f38 <__aeabi_fmul+0x22c>
10006f36:	3504      	adds	r5, #4
10006f38:	016b      	lsls	r3, r5, #5
10006f3a:	d504      	bpl.n	10006f46 <__aeabi_fmul+0x23a>
10006f3c:	2401      	movs	r4, #1
10006f3e:	2301      	movs	r3, #1
10006f40:	4014      	ands	r4, r2
10006f42:	2500      	movs	r5, #0
10006f44:	e729      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006f46:	2401      	movs	r4, #1
10006f48:	01ad      	lsls	r5, r5, #6
10006f4a:	0a6d      	lsrs	r5, r5, #9
10006f4c:	4014      	ands	r4, r2
10006f4e:	2300      	movs	r3, #0
10006f50:	e723      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006f52:	2380      	movs	r3, #128	; 0x80
10006f54:	03db      	lsls	r3, r3, #15
10006f56:	431d      	orrs	r5, r3
10006f58:	2401      	movs	r4, #1
10006f5a:	465b      	mov	r3, fp
10006f5c:	026d      	lsls	r5, r5, #9
10006f5e:	4023      	ands	r3, r4
10006f60:	1c1c      	adds	r4, r3, #0
10006f62:	0a6d      	lsrs	r5, r5, #9
10006f64:	23ff      	movs	r3, #255	; 0xff
10006f66:	e718      	b.n	10006d9a <__aeabi_fmul+0x8e>
10006f68:	1000ce00 	.word	0x1000ce00
10006f6c:	f7ffffff 	.word	0xf7ffffff

10006f70 <__aeabi_fsub>:
10006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006f72:	004a      	lsls	r2, r1, #1
10006f74:	0243      	lsls	r3, r0, #9
10006f76:	0044      	lsls	r4, r0, #1
10006f78:	024d      	lsls	r5, r1, #9
10006f7a:	0fc0      	lsrs	r0, r0, #31
10006f7c:	0e24      	lsrs	r4, r4, #24
10006f7e:	1c06      	adds	r6, r0, #0
10006f80:	099b      	lsrs	r3, r3, #6
10006f82:	0e12      	lsrs	r2, r2, #24
10006f84:	0fc9      	lsrs	r1, r1, #31
10006f86:	09ad      	lsrs	r5, r5, #6
10006f88:	2aff      	cmp	r2, #255	; 0xff
10006f8a:	d100      	bne.n	10006f8e <__aeabi_fsub+0x1e>
10006f8c:	e075      	b.n	1000707a <__aeabi_fsub+0x10a>
10006f8e:	2701      	movs	r7, #1
10006f90:	4079      	eors	r1, r7
10006f92:	4288      	cmp	r0, r1
10006f94:	d050      	beq.n	10007038 <__aeabi_fsub+0xc8>
10006f96:	1aa0      	subs	r0, r4, r2
10006f98:	2800      	cmp	r0, #0
10006f9a:	dc00      	bgt.n	10006f9e <__aeabi_fsub+0x2e>
10006f9c:	e08f      	b.n	100070be <__aeabi_fsub+0x14e>
10006f9e:	2a00      	cmp	r2, #0
10006fa0:	d11e      	bne.n	10006fe0 <__aeabi_fsub+0x70>
10006fa2:	2d00      	cmp	r5, #0
10006fa4:	d000      	beq.n	10006fa8 <__aeabi_fsub+0x38>
10006fa6:	e075      	b.n	10007094 <__aeabi_fsub+0x124>
10006fa8:	075a      	lsls	r2, r3, #29
10006faa:	d004      	beq.n	10006fb6 <__aeabi_fsub+0x46>
10006fac:	220f      	movs	r2, #15
10006fae:	401a      	ands	r2, r3
10006fb0:	2a04      	cmp	r2, #4
10006fb2:	d000      	beq.n	10006fb6 <__aeabi_fsub+0x46>
10006fb4:	3304      	adds	r3, #4
10006fb6:	2280      	movs	r2, #128	; 0x80
10006fb8:	2001      	movs	r0, #1
10006fba:	04d2      	lsls	r2, r2, #19
10006fbc:	401a      	ands	r2, r3
10006fbe:	4030      	ands	r0, r6
10006fc0:	2a00      	cmp	r2, #0
10006fc2:	d032      	beq.n	1000702a <__aeabi_fsub+0xba>
10006fc4:	3401      	adds	r4, #1
10006fc6:	2cff      	cmp	r4, #255	; 0xff
10006fc8:	d100      	bne.n	10006fcc <__aeabi_fsub+0x5c>
10006fca:	e084      	b.n	100070d6 <__aeabi_fsub+0x166>
10006fcc:	019b      	lsls	r3, r3, #6
10006fce:	0a5b      	lsrs	r3, r3, #9
10006fd0:	b2e4      	uxtb	r4, r4
10006fd2:	025b      	lsls	r3, r3, #9
10006fd4:	05e4      	lsls	r4, r4, #23
10006fd6:	0a5b      	lsrs	r3, r3, #9
10006fd8:	4323      	orrs	r3, r4
10006fda:	07c0      	lsls	r0, r0, #31
10006fdc:	4318      	orrs	r0, r3
10006fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10006fe0:	2cff      	cmp	r4, #255	; 0xff
10006fe2:	d0e1      	beq.n	10006fa8 <__aeabi_fsub+0x38>
10006fe4:	2280      	movs	r2, #128	; 0x80
10006fe6:	04d2      	lsls	r2, r2, #19
10006fe8:	4315      	orrs	r5, r2
10006fea:	281b      	cmp	r0, #27
10006fec:	dd7a      	ble.n	100070e4 <__aeabi_fsub+0x174>
10006fee:	2501      	movs	r5, #1
10006ff0:	1b5b      	subs	r3, r3, r5
10006ff2:	015a      	lsls	r2, r3, #5
10006ff4:	d55d      	bpl.n	100070b2 <__aeabi_fsub+0x142>
10006ff6:	019b      	lsls	r3, r3, #6
10006ff8:	099f      	lsrs	r7, r3, #6
10006ffa:	1c38      	adds	r0, r7, #0
10006ffc:	f001 fd46 	bl	10008a8c <__clzsi2>
10007000:	3805      	subs	r0, #5
10007002:	4087      	lsls	r7, r0
10007004:	4284      	cmp	r4, r0
10007006:	dc69      	bgt.n	100070dc <__aeabi_fsub+0x16c>
10007008:	1b00      	subs	r0, r0, r4
1000700a:	241f      	movs	r4, #31
1000700c:	1c3a      	adds	r2, r7, #0
1000700e:	1c43      	adds	r3, r0, #1
10007010:	1a20      	subs	r0, r4, r0
10007012:	40da      	lsrs	r2, r3
10007014:	4087      	lsls	r7, r0
10007016:	1c13      	adds	r3, r2, #0
10007018:	1e7c      	subs	r4, r7, #1
1000701a:	41a7      	sbcs	r7, r4
1000701c:	2400      	movs	r4, #0
1000701e:	433b      	orrs	r3, r7
10007020:	e7c2      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007022:	1e13      	subs	r3, r2, #0
10007024:	d145      	bne.n	100070b2 <__aeabi_fsub+0x142>
10007026:	2300      	movs	r3, #0
10007028:	2000      	movs	r0, #0
1000702a:	08db      	lsrs	r3, r3, #3
1000702c:	2cff      	cmp	r4, #255	; 0xff
1000702e:	d028      	beq.n	10007082 <__aeabi_fsub+0x112>
10007030:	025b      	lsls	r3, r3, #9
10007032:	0a5b      	lsrs	r3, r3, #9
10007034:	b2e4      	uxtb	r4, r4
10007036:	e7cc      	b.n	10006fd2 <__aeabi_fsub+0x62>
10007038:	1aa1      	subs	r1, r4, r2
1000703a:	2900      	cmp	r1, #0
1000703c:	dd5b      	ble.n	100070f6 <__aeabi_fsub+0x186>
1000703e:	2a00      	cmp	r2, #0
10007040:	d02e      	beq.n	100070a0 <__aeabi_fsub+0x130>
10007042:	2cff      	cmp	r4, #255	; 0xff
10007044:	d0b0      	beq.n	10006fa8 <__aeabi_fsub+0x38>
10007046:	2280      	movs	r2, #128	; 0x80
10007048:	04d2      	lsls	r2, r2, #19
1000704a:	4315      	orrs	r5, r2
1000704c:	291b      	cmp	r1, #27
1000704e:	dc74      	bgt.n	1000713a <__aeabi_fsub+0x1ca>
10007050:	1c2f      	adds	r7, r5, #0
10007052:	2220      	movs	r2, #32
10007054:	40cf      	lsrs	r7, r1
10007056:	1a51      	subs	r1, r2, r1
10007058:	408d      	lsls	r5, r1
1000705a:	1e69      	subs	r1, r5, #1
1000705c:	418d      	sbcs	r5, r1
1000705e:	433d      	orrs	r5, r7
10007060:	195b      	adds	r3, r3, r5
10007062:	015a      	lsls	r2, r3, #5
10007064:	d525      	bpl.n	100070b2 <__aeabi_fsub+0x142>
10007066:	3401      	adds	r4, #1
10007068:	2cff      	cmp	r4, #255	; 0xff
1000706a:	d074      	beq.n	10007156 <__aeabi_fsub+0x1e6>
1000706c:	2101      	movs	r1, #1
1000706e:	4a7e      	ldr	r2, [pc, #504]	; (10007268 <__aeabi_fsub+0x2f8>)
10007070:	4019      	ands	r1, r3
10007072:	4013      	ands	r3, r2
10007074:	085b      	lsrs	r3, r3, #1
10007076:	430b      	orrs	r3, r1
10007078:	e796      	b.n	10006fa8 <__aeabi_fsub+0x38>
1000707a:	2d00      	cmp	r5, #0
1000707c:	d000      	beq.n	10007080 <__aeabi_fsub+0x110>
1000707e:	e788      	b.n	10006f92 <__aeabi_fsub+0x22>
10007080:	e785      	b.n	10006f8e <__aeabi_fsub+0x1e>
10007082:	2b00      	cmp	r3, #0
10007084:	d027      	beq.n	100070d6 <__aeabi_fsub+0x166>
10007086:	2280      	movs	r2, #128	; 0x80
10007088:	03d2      	lsls	r2, r2, #15
1000708a:	4313      	orrs	r3, r2
1000708c:	025b      	lsls	r3, r3, #9
1000708e:	0a5b      	lsrs	r3, r3, #9
10007090:	24ff      	movs	r4, #255	; 0xff
10007092:	e79e      	b.n	10006fd2 <__aeabi_fsub+0x62>
10007094:	3801      	subs	r0, #1
10007096:	2800      	cmp	r0, #0
10007098:	d0aa      	beq.n	10006ff0 <__aeabi_fsub+0x80>
1000709a:	2cff      	cmp	r4, #255	; 0xff
1000709c:	d1a5      	bne.n	10006fea <__aeabi_fsub+0x7a>
1000709e:	e783      	b.n	10006fa8 <__aeabi_fsub+0x38>
100070a0:	2d00      	cmp	r5, #0
100070a2:	d100      	bne.n	100070a6 <__aeabi_fsub+0x136>
100070a4:	e780      	b.n	10006fa8 <__aeabi_fsub+0x38>
100070a6:	3901      	subs	r1, #1
100070a8:	2900      	cmp	r1, #0
100070aa:	d0d9      	beq.n	10007060 <__aeabi_fsub+0xf0>
100070ac:	2cff      	cmp	r4, #255	; 0xff
100070ae:	d1cd      	bne.n	1000704c <__aeabi_fsub+0xdc>
100070b0:	e77a      	b.n	10006fa8 <__aeabi_fsub+0x38>
100070b2:	075a      	lsls	r2, r3, #29
100070b4:	d000      	beq.n	100070b8 <__aeabi_fsub+0x148>
100070b6:	e779      	b.n	10006fac <__aeabi_fsub+0x3c>
100070b8:	2001      	movs	r0, #1
100070ba:	4030      	ands	r0, r6
100070bc:	e7b5      	b.n	1000702a <__aeabi_fsub+0xba>
100070be:	2800      	cmp	r0, #0
100070c0:	d125      	bne.n	1000710e <__aeabi_fsub+0x19e>
100070c2:	1c62      	adds	r2, r4, #1
100070c4:	b2d2      	uxtb	r2, r2
100070c6:	2a01      	cmp	r2, #1
100070c8:	dd55      	ble.n	10007176 <__aeabi_fsub+0x206>
100070ca:	1b5f      	subs	r7, r3, r5
100070cc:	017a      	lsls	r2, r7, #5
100070ce:	d52d      	bpl.n	1000712c <__aeabi_fsub+0x1bc>
100070d0:	1aef      	subs	r7, r5, r3
100070d2:	1c0e      	adds	r6, r1, #0
100070d4:	e791      	b.n	10006ffa <__aeabi_fsub+0x8a>
100070d6:	24ff      	movs	r4, #255	; 0xff
100070d8:	2300      	movs	r3, #0
100070da:	e77a      	b.n	10006fd2 <__aeabi_fsub+0x62>
100070dc:	4b62      	ldr	r3, [pc, #392]	; (10007268 <__aeabi_fsub+0x2f8>)
100070de:	1a24      	subs	r4, r4, r0
100070e0:	403b      	ands	r3, r7
100070e2:	e761      	b.n	10006fa8 <__aeabi_fsub+0x38>
100070e4:	1c29      	adds	r1, r5, #0
100070e6:	2220      	movs	r2, #32
100070e8:	40c1      	lsrs	r1, r0
100070ea:	1a10      	subs	r0, r2, r0
100070ec:	4085      	lsls	r5, r0
100070ee:	1e68      	subs	r0, r5, #1
100070f0:	4185      	sbcs	r5, r0
100070f2:	430d      	orrs	r5, r1
100070f4:	e77c      	b.n	10006ff0 <__aeabi_fsub+0x80>
100070f6:	2900      	cmp	r1, #0
100070f8:	d146      	bne.n	10007188 <__aeabi_fsub+0x218>
100070fa:	1c62      	adds	r2, r4, #1
100070fc:	b2d1      	uxtb	r1, r2
100070fe:	2901      	cmp	r1, #1
10007100:	dd2b      	ble.n	1000715a <__aeabi_fsub+0x1ea>
10007102:	2aff      	cmp	r2, #255	; 0xff
10007104:	d026      	beq.n	10007154 <__aeabi_fsub+0x1e4>
10007106:	18eb      	adds	r3, r5, r3
10007108:	085b      	lsrs	r3, r3, #1
1000710a:	1c14      	adds	r4, r2, #0
1000710c:	e74c      	b.n	10006fa8 <__aeabi_fsub+0x38>
1000710e:	2c00      	cmp	r4, #0
10007110:	d015      	beq.n	1000713e <__aeabi_fsub+0x1ce>
10007112:	2aff      	cmp	r2, #255	; 0xff
10007114:	d01a      	beq.n	1000714c <__aeabi_fsub+0x1dc>
10007116:	2480      	movs	r4, #128	; 0x80
10007118:	04e4      	lsls	r4, r4, #19
1000711a:	4240      	negs	r0, r0
1000711c:	4323      	orrs	r3, r4
1000711e:	281b      	cmp	r0, #27
10007120:	dd4d      	ble.n	100071be <__aeabi_fsub+0x24e>
10007122:	2301      	movs	r3, #1
10007124:	1aeb      	subs	r3, r5, r3
10007126:	1c14      	adds	r4, r2, #0
10007128:	1c0e      	adds	r6, r1, #0
1000712a:	e762      	b.n	10006ff2 <__aeabi_fsub+0x82>
1000712c:	2f00      	cmp	r7, #0
1000712e:	d000      	beq.n	10007132 <__aeabi_fsub+0x1c2>
10007130:	e763      	b.n	10006ffa <__aeabi_fsub+0x8a>
10007132:	2300      	movs	r3, #0
10007134:	2000      	movs	r0, #0
10007136:	2400      	movs	r4, #0
10007138:	e777      	b.n	1000702a <__aeabi_fsub+0xba>
1000713a:	2501      	movs	r5, #1
1000713c:	e790      	b.n	10007060 <__aeabi_fsub+0xf0>
1000713e:	2b00      	cmp	r3, #0
10007140:	d039      	beq.n	100071b6 <__aeabi_fsub+0x246>
10007142:	43c0      	mvns	r0, r0
10007144:	2800      	cmp	r0, #0
10007146:	d0ed      	beq.n	10007124 <__aeabi_fsub+0x1b4>
10007148:	2aff      	cmp	r2, #255	; 0xff
1000714a:	d1e8      	bne.n	1000711e <__aeabi_fsub+0x1ae>
1000714c:	1c2b      	adds	r3, r5, #0
1000714e:	24ff      	movs	r4, #255	; 0xff
10007150:	1c0e      	adds	r6, r1, #0
10007152:	e729      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007154:	24ff      	movs	r4, #255	; 0xff
10007156:	2300      	movs	r3, #0
10007158:	e767      	b.n	1000702a <__aeabi_fsub+0xba>
1000715a:	2c00      	cmp	r4, #0
1000715c:	d15a      	bne.n	10007214 <__aeabi_fsub+0x2a4>
1000715e:	2b00      	cmp	r3, #0
10007160:	d07f      	beq.n	10007262 <__aeabi_fsub+0x2f2>
10007162:	2d00      	cmp	r5, #0
10007164:	d100      	bne.n	10007168 <__aeabi_fsub+0x1f8>
10007166:	e71f      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007168:	195b      	adds	r3, r3, r5
1000716a:	015a      	lsls	r2, r3, #5
1000716c:	d5a1      	bpl.n	100070b2 <__aeabi_fsub+0x142>
1000716e:	4a3e      	ldr	r2, [pc, #248]	; (10007268 <__aeabi_fsub+0x2f8>)
10007170:	3401      	adds	r4, #1
10007172:	4013      	ands	r3, r2
10007174:	e718      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007176:	2c00      	cmp	r4, #0
10007178:	d115      	bne.n	100071a6 <__aeabi_fsub+0x236>
1000717a:	2b00      	cmp	r3, #0
1000717c:	d12f      	bne.n	100071de <__aeabi_fsub+0x26e>
1000717e:	2d00      	cmp	r5, #0
10007180:	d05e      	beq.n	10007240 <__aeabi_fsub+0x2d0>
10007182:	1c2b      	adds	r3, r5, #0
10007184:	1c0e      	adds	r6, r1, #0
10007186:	e70f      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007188:	2c00      	cmp	r4, #0
1000718a:	d121      	bne.n	100071d0 <__aeabi_fsub+0x260>
1000718c:	2b00      	cmp	r3, #0
1000718e:	d054      	beq.n	1000723a <__aeabi_fsub+0x2ca>
10007190:	43c9      	mvns	r1, r1
10007192:	2900      	cmp	r1, #0
10007194:	d004      	beq.n	100071a0 <__aeabi_fsub+0x230>
10007196:	2aff      	cmp	r2, #255	; 0xff
10007198:	d04c      	beq.n	10007234 <__aeabi_fsub+0x2c4>
1000719a:	291b      	cmp	r1, #27
1000719c:	dd58      	ble.n	10007250 <__aeabi_fsub+0x2e0>
1000719e:	2301      	movs	r3, #1
100071a0:	195b      	adds	r3, r3, r5
100071a2:	1c14      	adds	r4, r2, #0
100071a4:	e75d      	b.n	10007062 <__aeabi_fsub+0xf2>
100071a6:	2b00      	cmp	r3, #0
100071a8:	d123      	bne.n	100071f2 <__aeabi_fsub+0x282>
100071aa:	2d00      	cmp	r5, #0
100071ac:	d04b      	beq.n	10007246 <__aeabi_fsub+0x2d6>
100071ae:	1c2b      	adds	r3, r5, #0
100071b0:	1c0e      	adds	r6, r1, #0
100071b2:	24ff      	movs	r4, #255	; 0xff
100071b4:	e6f8      	b.n	10006fa8 <__aeabi_fsub+0x38>
100071b6:	1c2b      	adds	r3, r5, #0
100071b8:	1c14      	adds	r4, r2, #0
100071ba:	1c0e      	adds	r6, r1, #0
100071bc:	e6f4      	b.n	10006fa8 <__aeabi_fsub+0x38>
100071be:	1c1e      	adds	r6, r3, #0
100071c0:	2420      	movs	r4, #32
100071c2:	40c6      	lsrs	r6, r0
100071c4:	1a20      	subs	r0, r4, r0
100071c6:	4083      	lsls	r3, r0
100071c8:	1e58      	subs	r0, r3, #1
100071ca:	4183      	sbcs	r3, r0
100071cc:	4333      	orrs	r3, r6
100071ce:	e7a9      	b.n	10007124 <__aeabi_fsub+0x1b4>
100071d0:	2aff      	cmp	r2, #255	; 0xff
100071d2:	d02f      	beq.n	10007234 <__aeabi_fsub+0x2c4>
100071d4:	2480      	movs	r4, #128	; 0x80
100071d6:	04e4      	lsls	r4, r4, #19
100071d8:	4249      	negs	r1, r1
100071da:	4323      	orrs	r3, r4
100071dc:	e7dd      	b.n	1000719a <__aeabi_fsub+0x22a>
100071de:	2d00      	cmp	r5, #0
100071e0:	d100      	bne.n	100071e4 <__aeabi_fsub+0x274>
100071e2:	e6e1      	b.n	10006fa8 <__aeabi_fsub+0x38>
100071e4:	1b5a      	subs	r2, r3, r5
100071e6:	0150      	lsls	r0, r2, #5
100071e8:	d400      	bmi.n	100071ec <__aeabi_fsub+0x27c>
100071ea:	e71a      	b.n	10007022 <__aeabi_fsub+0xb2>
100071ec:	1aeb      	subs	r3, r5, r3
100071ee:	1c0e      	adds	r6, r1, #0
100071f0:	e6da      	b.n	10006fa8 <__aeabi_fsub+0x38>
100071f2:	24ff      	movs	r4, #255	; 0xff
100071f4:	2d00      	cmp	r5, #0
100071f6:	d100      	bne.n	100071fa <__aeabi_fsub+0x28a>
100071f8:	e6d6      	b.n	10006fa8 <__aeabi_fsub+0x38>
100071fa:	2280      	movs	r2, #128	; 0x80
100071fc:	08db      	lsrs	r3, r3, #3
100071fe:	03d2      	lsls	r2, r2, #15
10007200:	4213      	tst	r3, r2
10007202:	d004      	beq.n	1000720e <__aeabi_fsub+0x29e>
10007204:	08ed      	lsrs	r5, r5, #3
10007206:	4215      	tst	r5, r2
10007208:	d101      	bne.n	1000720e <__aeabi_fsub+0x29e>
1000720a:	1c2b      	adds	r3, r5, #0
1000720c:	1c0e      	adds	r6, r1, #0
1000720e:	00db      	lsls	r3, r3, #3
10007210:	24ff      	movs	r4, #255	; 0xff
10007212:	e6c9      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007214:	2b00      	cmp	r3, #0
10007216:	d00d      	beq.n	10007234 <__aeabi_fsub+0x2c4>
10007218:	24ff      	movs	r4, #255	; 0xff
1000721a:	2d00      	cmp	r5, #0
1000721c:	d100      	bne.n	10007220 <__aeabi_fsub+0x2b0>
1000721e:	e6c3      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007220:	2280      	movs	r2, #128	; 0x80
10007222:	08db      	lsrs	r3, r3, #3
10007224:	03d2      	lsls	r2, r2, #15
10007226:	4213      	tst	r3, r2
10007228:	d0f1      	beq.n	1000720e <__aeabi_fsub+0x29e>
1000722a:	08ed      	lsrs	r5, r5, #3
1000722c:	4215      	tst	r5, r2
1000722e:	d1ee      	bne.n	1000720e <__aeabi_fsub+0x29e>
10007230:	1c2b      	adds	r3, r5, #0
10007232:	e7ec      	b.n	1000720e <__aeabi_fsub+0x29e>
10007234:	1c2b      	adds	r3, r5, #0
10007236:	24ff      	movs	r4, #255	; 0xff
10007238:	e6b6      	b.n	10006fa8 <__aeabi_fsub+0x38>
1000723a:	1c2b      	adds	r3, r5, #0
1000723c:	1c14      	adds	r4, r2, #0
1000723e:	e6b3      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007240:	1c23      	adds	r3, r4, #0
10007242:	2000      	movs	r0, #0
10007244:	e6f1      	b.n	1000702a <__aeabi_fsub+0xba>
10007246:	2380      	movs	r3, #128	; 0x80
10007248:	2000      	movs	r0, #0
1000724a:	049b      	lsls	r3, r3, #18
1000724c:	24ff      	movs	r4, #255	; 0xff
1000724e:	e6ec      	b.n	1000702a <__aeabi_fsub+0xba>
10007250:	1c1f      	adds	r7, r3, #0
10007252:	2420      	movs	r4, #32
10007254:	40cf      	lsrs	r7, r1
10007256:	1a61      	subs	r1, r4, r1
10007258:	408b      	lsls	r3, r1
1000725a:	1e59      	subs	r1, r3, #1
1000725c:	418b      	sbcs	r3, r1
1000725e:	433b      	orrs	r3, r7
10007260:	e79e      	b.n	100071a0 <__aeabi_fsub+0x230>
10007262:	1c2b      	adds	r3, r5, #0
10007264:	e6a0      	b.n	10006fa8 <__aeabi_fsub+0x38>
10007266:	46c0      	nop			; (mov r8, r8)
10007268:	fbffffff 	.word	0xfbffffff

1000726c <__aeabi_f2iz>:
1000726c:	0242      	lsls	r2, r0, #9
1000726e:	0a51      	lsrs	r1, r2, #9
10007270:	0042      	lsls	r2, r0, #1
10007272:	0fc3      	lsrs	r3, r0, #31
10007274:	0e12      	lsrs	r2, r2, #24
10007276:	2000      	movs	r0, #0
10007278:	2a7e      	cmp	r2, #126	; 0x7e
1000727a:	dd0d      	ble.n	10007298 <__aeabi_f2iz+0x2c>
1000727c:	2a9d      	cmp	r2, #157	; 0x9d
1000727e:	dc0c      	bgt.n	1000729a <__aeabi_f2iz+0x2e>
10007280:	2080      	movs	r0, #128	; 0x80
10007282:	0400      	lsls	r0, r0, #16
10007284:	4301      	orrs	r1, r0
10007286:	2a95      	cmp	r2, #149	; 0x95
10007288:	dc0a      	bgt.n	100072a0 <__aeabi_f2iz+0x34>
1000728a:	2096      	movs	r0, #150	; 0x96
1000728c:	1a82      	subs	r2, r0, r2
1000728e:	40d1      	lsrs	r1, r2
10007290:	1c0a      	adds	r2, r1, #0
10007292:	4258      	negs	r0, r3
10007294:	4042      	eors	r2, r0
10007296:	18d0      	adds	r0, r2, r3
10007298:	4770      	bx	lr
1000729a:	4a03      	ldr	r2, [pc, #12]	; (100072a8 <__aeabi_f2iz+0x3c>)
1000729c:	1898      	adds	r0, r3, r2
1000729e:	e7fb      	b.n	10007298 <__aeabi_f2iz+0x2c>
100072a0:	3a96      	subs	r2, #150	; 0x96
100072a2:	4091      	lsls	r1, r2
100072a4:	1c0a      	adds	r2, r1, #0
100072a6:	e7f4      	b.n	10007292 <__aeabi_f2iz+0x26>
100072a8:	7fffffff 	.word	0x7fffffff

100072ac <__aeabi_i2f>:
100072ac:	b570      	push	{r4, r5, r6, lr}
100072ae:	1e04      	subs	r4, r0, #0
100072b0:	d039      	beq.n	10007326 <__aeabi_i2f+0x7a>
100072b2:	0fc5      	lsrs	r5, r0, #31
100072b4:	d000      	beq.n	100072b8 <__aeabi_i2f+0xc>
100072b6:	4244      	negs	r4, r0
100072b8:	1c20      	adds	r0, r4, #0
100072ba:	f001 fbe7 	bl	10008a8c <__clzsi2>
100072be:	239e      	movs	r3, #158	; 0x9e
100072c0:	1c26      	adds	r6, r4, #0
100072c2:	1a1b      	subs	r3, r3, r0
100072c4:	2b96      	cmp	r3, #150	; 0x96
100072c6:	dc07      	bgt.n	100072d8 <__aeabi_i2f+0x2c>
100072c8:	2808      	cmp	r0, #8
100072ca:	dd01      	ble.n	100072d0 <__aeabi_i2f+0x24>
100072cc:	3808      	subs	r0, #8
100072ce:	4084      	lsls	r4, r0
100072d0:	0264      	lsls	r4, r4, #9
100072d2:	0a64      	lsrs	r4, r4, #9
100072d4:	b2d8      	uxtb	r0, r3
100072d6:	e01e      	b.n	10007316 <__aeabi_i2f+0x6a>
100072d8:	2b99      	cmp	r3, #153	; 0x99
100072da:	dd0a      	ble.n	100072f2 <__aeabi_i2f+0x46>
100072dc:	2205      	movs	r2, #5
100072de:	1c21      	adds	r1, r4, #0
100072e0:	1a12      	subs	r2, r2, r0
100072e2:	40d1      	lsrs	r1, r2
100072e4:	1c0a      	adds	r2, r1, #0
100072e6:	1c01      	adds	r1, r0, #0
100072e8:	311b      	adds	r1, #27
100072ea:	408e      	lsls	r6, r1
100072ec:	1e71      	subs	r1, r6, #1
100072ee:	418e      	sbcs	r6, r1
100072f0:	4316      	orrs	r6, r2
100072f2:	2805      	cmp	r0, #5
100072f4:	dd01      	ble.n	100072fa <__aeabi_i2f+0x4e>
100072f6:	1f42      	subs	r2, r0, #5
100072f8:	4096      	lsls	r6, r2
100072fa:	4c0f      	ldr	r4, [pc, #60]	; (10007338 <__aeabi_i2f+0x8c>)
100072fc:	4034      	ands	r4, r6
100072fe:	0772      	lsls	r2, r6, #29
10007300:	d004      	beq.n	1000730c <__aeabi_i2f+0x60>
10007302:	220f      	movs	r2, #15
10007304:	4016      	ands	r6, r2
10007306:	2e04      	cmp	r6, #4
10007308:	d000      	beq.n	1000730c <__aeabi_i2f+0x60>
1000730a:	3404      	adds	r4, #4
1000730c:	0162      	lsls	r2, r4, #5
1000730e:	d40e      	bmi.n	1000732e <__aeabi_i2f+0x82>
10007310:	01a4      	lsls	r4, r4, #6
10007312:	0a64      	lsrs	r4, r4, #9
10007314:	b2d8      	uxtb	r0, r3
10007316:	0264      	lsls	r4, r4, #9
10007318:	05c0      	lsls	r0, r0, #23
1000731a:	0a64      	lsrs	r4, r4, #9
1000731c:	07ed      	lsls	r5, r5, #31
1000731e:	4304      	orrs	r4, r0
10007320:	432c      	orrs	r4, r5
10007322:	1c20      	adds	r0, r4, #0
10007324:	bd70      	pop	{r4, r5, r6, pc}
10007326:	2500      	movs	r5, #0
10007328:	2000      	movs	r0, #0
1000732a:	2400      	movs	r4, #0
1000732c:	e7f3      	b.n	10007316 <__aeabi_i2f+0x6a>
1000732e:	4b02      	ldr	r3, [pc, #8]	; (10007338 <__aeabi_i2f+0x8c>)
10007330:	401c      	ands	r4, r3
10007332:	239f      	movs	r3, #159	; 0x9f
10007334:	1a1b      	subs	r3, r3, r0
10007336:	e7eb      	b.n	10007310 <__aeabi_i2f+0x64>
10007338:	fbffffff 	.word	0xfbffffff

1000733c <__aeabi_dadd>:
1000733c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000733e:	4645      	mov	r5, r8
10007340:	4657      	mov	r7, sl
10007342:	464e      	mov	r6, r9
10007344:	4694      	mov	ip, r2
10007346:	004c      	lsls	r4, r1, #1
10007348:	030a      	lsls	r2, r1, #12
1000734a:	0fc9      	lsrs	r1, r1, #31
1000734c:	b4e0      	push	{r5, r6, r7}
1000734e:	4688      	mov	r8, r1
10007350:	1c0e      	adds	r6, r1, #0
10007352:	0319      	lsls	r1, r3, #12
10007354:	0f47      	lsrs	r7, r0, #29
10007356:	00c5      	lsls	r5, r0, #3
10007358:	0a48      	lsrs	r0, r1, #9
1000735a:	4661      	mov	r1, ip
1000735c:	0f49      	lsrs	r1, r1, #29
1000735e:	4301      	orrs	r1, r0
10007360:	4660      	mov	r0, ip
10007362:	0a52      	lsrs	r2, r2, #9
10007364:	4317      	orrs	r7, r2
10007366:	00c0      	lsls	r0, r0, #3
10007368:	005a      	lsls	r2, r3, #1
1000736a:	0d64      	lsrs	r4, r4, #21
1000736c:	0d52      	lsrs	r2, r2, #21
1000736e:	0fdb      	lsrs	r3, r3, #31
10007370:	4684      	mov	ip, r0
10007372:	4598      	cmp	r8, r3
10007374:	d100      	bne.n	10007378 <__aeabi_dadd+0x3c>
10007376:	e0a7      	b.n	100074c8 <__aeabi_dadd+0x18c>
10007378:	1aa0      	subs	r0, r4, r2
1000737a:	2800      	cmp	r0, #0
1000737c:	dc00      	bgt.n	10007380 <__aeabi_dadd+0x44>
1000737e:	e101      	b.n	10007584 <__aeabi_dadd+0x248>
10007380:	2a00      	cmp	r2, #0
10007382:	d13d      	bne.n	10007400 <__aeabi_dadd+0xc4>
10007384:	4663      	mov	r3, ip
10007386:	430b      	orrs	r3, r1
10007388:	d000      	beq.n	1000738c <__aeabi_dadd+0x50>
1000738a:	e0d4      	b.n	10007536 <__aeabi_dadd+0x1fa>
1000738c:	076b      	lsls	r3, r5, #29
1000738e:	d100      	bne.n	10007392 <__aeabi_dadd+0x56>
10007390:	e088      	b.n	100074a4 <__aeabi_dadd+0x168>
10007392:	230f      	movs	r3, #15
10007394:	402b      	ands	r3, r5
10007396:	2b04      	cmp	r3, #4
10007398:	d100      	bne.n	1000739c <__aeabi_dadd+0x60>
1000739a:	e083      	b.n	100074a4 <__aeabi_dadd+0x168>
1000739c:	1d2a      	adds	r2, r5, #4
1000739e:	42aa      	cmp	r2, r5
100073a0:	41ad      	sbcs	r5, r5
100073a2:	2380      	movs	r3, #128	; 0x80
100073a4:	426d      	negs	r5, r5
100073a6:	197f      	adds	r7, r7, r5
100073a8:	041b      	lsls	r3, r3, #16
100073aa:	403b      	ands	r3, r7
100073ac:	4646      	mov	r6, r8
100073ae:	1c15      	adds	r5, r2, #0
100073b0:	2b00      	cmp	r3, #0
100073b2:	d100      	bne.n	100073b6 <__aeabi_dadd+0x7a>
100073b4:	e07c      	b.n	100074b0 <__aeabi_dadd+0x174>
100073b6:	4bcc      	ldr	r3, [pc, #816]	; (100076e8 <__aeabi_dadd+0x3ac>)
100073b8:	3401      	adds	r4, #1
100073ba:	429c      	cmp	r4, r3
100073bc:	d100      	bne.n	100073c0 <__aeabi_dadd+0x84>
100073be:	e0fd      	b.n	100075bc <__aeabi_dadd+0x280>
100073c0:	1c3a      	adds	r2, r7, #0
100073c2:	4bca      	ldr	r3, [pc, #808]	; (100076ec <__aeabi_dadd+0x3b0>)
100073c4:	08ed      	lsrs	r5, r5, #3
100073c6:	401a      	ands	r2, r3
100073c8:	0750      	lsls	r0, r2, #29
100073ca:	0564      	lsls	r4, r4, #21
100073cc:	0252      	lsls	r2, r2, #9
100073ce:	4305      	orrs	r5, r0
100073d0:	0b12      	lsrs	r2, r2, #12
100073d2:	0d64      	lsrs	r4, r4, #21
100073d4:	2100      	movs	r1, #0
100073d6:	0312      	lsls	r2, r2, #12
100073d8:	0d0b      	lsrs	r3, r1, #20
100073da:	051b      	lsls	r3, r3, #20
100073dc:	0564      	lsls	r4, r4, #21
100073de:	0b12      	lsrs	r2, r2, #12
100073e0:	431a      	orrs	r2, r3
100073e2:	0863      	lsrs	r3, r4, #1
100073e4:	4cc2      	ldr	r4, [pc, #776]	; (100076f0 <__aeabi_dadd+0x3b4>)
100073e6:	07f6      	lsls	r6, r6, #31
100073e8:	4014      	ands	r4, r2
100073ea:	431c      	orrs	r4, r3
100073ec:	0064      	lsls	r4, r4, #1
100073ee:	0864      	lsrs	r4, r4, #1
100073f0:	4334      	orrs	r4, r6
100073f2:	1c28      	adds	r0, r5, #0
100073f4:	1c21      	adds	r1, r4, #0
100073f6:	bc1c      	pop	{r2, r3, r4}
100073f8:	4690      	mov	r8, r2
100073fa:	4699      	mov	r9, r3
100073fc:	46a2      	mov	sl, r4
100073fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007400:	4bb9      	ldr	r3, [pc, #740]	; (100076e8 <__aeabi_dadd+0x3ac>)
10007402:	429c      	cmp	r4, r3
10007404:	d0c2      	beq.n	1000738c <__aeabi_dadd+0x50>
10007406:	2380      	movs	r3, #128	; 0x80
10007408:	041b      	lsls	r3, r3, #16
1000740a:	4319      	orrs	r1, r3
1000740c:	2838      	cmp	r0, #56	; 0x38
1000740e:	dd00      	ble.n	10007412 <__aeabi_dadd+0xd6>
10007410:	e0ec      	b.n	100075ec <__aeabi_dadd+0x2b0>
10007412:	281f      	cmp	r0, #31
10007414:	dd00      	ble.n	10007418 <__aeabi_dadd+0xdc>
10007416:	e121      	b.n	1000765c <__aeabi_dadd+0x320>
10007418:	2220      	movs	r2, #32
1000741a:	1c0e      	adds	r6, r1, #0
1000741c:	4663      	mov	r3, ip
1000741e:	1a12      	subs	r2, r2, r0
10007420:	4096      	lsls	r6, r2
10007422:	40c3      	lsrs	r3, r0
10007424:	4333      	orrs	r3, r6
10007426:	4666      	mov	r6, ip
10007428:	4096      	lsls	r6, r2
1000742a:	1c32      	adds	r2, r6, #0
1000742c:	1e56      	subs	r6, r2, #1
1000742e:	41b2      	sbcs	r2, r6
10007430:	4313      	orrs	r3, r2
10007432:	1c0a      	adds	r2, r1, #0
10007434:	40c2      	lsrs	r2, r0
10007436:	1aeb      	subs	r3, r5, r3
10007438:	429d      	cmp	r5, r3
1000743a:	41b6      	sbcs	r6, r6
1000743c:	1c1d      	adds	r5, r3, #0
1000743e:	1aba      	subs	r2, r7, r2
10007440:	4276      	negs	r6, r6
10007442:	1b97      	subs	r7, r2, r6
10007444:	023b      	lsls	r3, r7, #8
10007446:	d400      	bmi.n	1000744a <__aeabi_dadd+0x10e>
10007448:	e097      	b.n	1000757a <__aeabi_dadd+0x23e>
1000744a:	027a      	lsls	r2, r7, #9
1000744c:	0a56      	lsrs	r6, r2, #9
1000744e:	2e00      	cmp	r6, #0
10007450:	d100      	bne.n	10007454 <__aeabi_dadd+0x118>
10007452:	e0b6      	b.n	100075c2 <__aeabi_dadd+0x286>
10007454:	1c30      	adds	r0, r6, #0
10007456:	f001 fb19 	bl	10008a8c <__clzsi2>
1000745a:	1c03      	adds	r3, r0, #0
1000745c:	3b08      	subs	r3, #8
1000745e:	2b1f      	cmp	r3, #31
10007460:	dd00      	ble.n	10007464 <__aeabi_dadd+0x128>
10007462:	e0b7      	b.n	100075d4 <__aeabi_dadd+0x298>
10007464:	409e      	lsls	r6, r3
10007466:	1c37      	adds	r7, r6, #0
10007468:	2628      	movs	r6, #40	; 0x28
1000746a:	1c2a      	adds	r2, r5, #0
1000746c:	1a36      	subs	r6, r6, r0
1000746e:	40f2      	lsrs	r2, r6
10007470:	1c16      	adds	r6, r2, #0
10007472:	409d      	lsls	r5, r3
10007474:	433e      	orrs	r6, r7
10007476:	429c      	cmp	r4, r3
10007478:	dd00      	ble.n	1000747c <__aeabi_dadd+0x140>
1000747a:	e0b2      	b.n	100075e2 <__aeabi_dadd+0x2a6>
1000747c:	1b1c      	subs	r4, r3, r4
1000747e:	1c62      	adds	r2, r4, #1
10007480:	2a1f      	cmp	r2, #31
10007482:	dd00      	ble.n	10007486 <__aeabi_dadd+0x14a>
10007484:	e0d8      	b.n	10007638 <__aeabi_dadd+0x2fc>
10007486:	231f      	movs	r3, #31
10007488:	1c29      	adds	r1, r5, #0
1000748a:	1b1c      	subs	r4, r3, r4
1000748c:	1c33      	adds	r3, r6, #0
1000748e:	40a5      	lsls	r5, r4
10007490:	40a3      	lsls	r3, r4
10007492:	40d1      	lsrs	r1, r2
10007494:	1e6c      	subs	r4, r5, #1
10007496:	41a5      	sbcs	r5, r4
10007498:	40d6      	lsrs	r6, r2
1000749a:	4319      	orrs	r1, r3
1000749c:	430d      	orrs	r5, r1
1000749e:	1c37      	adds	r7, r6, #0
100074a0:	2400      	movs	r4, #0
100074a2:	e773      	b.n	1000738c <__aeabi_dadd+0x50>
100074a4:	2380      	movs	r3, #128	; 0x80
100074a6:	041b      	lsls	r3, r3, #16
100074a8:	403b      	ands	r3, r7
100074aa:	4646      	mov	r6, r8
100074ac:	d000      	beq.n	100074b0 <__aeabi_dadd+0x174>
100074ae:	e782      	b.n	100073b6 <__aeabi_dadd+0x7a>
100074b0:	4b8d      	ldr	r3, [pc, #564]	; (100076e8 <__aeabi_dadd+0x3ac>)
100074b2:	08ed      	lsrs	r5, r5, #3
100074b4:	0778      	lsls	r0, r7, #29
100074b6:	4305      	orrs	r5, r0
100074b8:	08fa      	lsrs	r2, r7, #3
100074ba:	429c      	cmp	r4, r3
100074bc:	d032      	beq.n	10007524 <__aeabi_dadd+0x1e8>
100074be:	0312      	lsls	r2, r2, #12
100074c0:	0564      	lsls	r4, r4, #21
100074c2:	0b12      	lsrs	r2, r2, #12
100074c4:	0d64      	lsrs	r4, r4, #21
100074c6:	e785      	b.n	100073d4 <__aeabi_dadd+0x98>
100074c8:	1aa3      	subs	r3, r4, r2
100074ca:	2b00      	cmp	r3, #0
100074cc:	dc00      	bgt.n	100074d0 <__aeabi_dadd+0x194>
100074ce:	e094      	b.n	100075fa <__aeabi_dadd+0x2be>
100074d0:	2a00      	cmp	r2, #0
100074d2:	d03c      	beq.n	1000754e <__aeabi_dadd+0x212>
100074d4:	4a84      	ldr	r2, [pc, #528]	; (100076e8 <__aeabi_dadd+0x3ac>)
100074d6:	4294      	cmp	r4, r2
100074d8:	d100      	bne.n	100074dc <__aeabi_dadd+0x1a0>
100074da:	e757      	b.n	1000738c <__aeabi_dadd+0x50>
100074dc:	2280      	movs	r2, #128	; 0x80
100074de:	0412      	lsls	r2, r2, #16
100074e0:	4311      	orrs	r1, r2
100074e2:	2b38      	cmp	r3, #56	; 0x38
100074e4:	dc00      	bgt.n	100074e8 <__aeabi_dadd+0x1ac>
100074e6:	e105      	b.n	100076f4 <__aeabi_dadd+0x3b8>
100074e8:	4663      	mov	r3, ip
100074ea:	4319      	orrs	r1, r3
100074ec:	1e48      	subs	r0, r1, #1
100074ee:	4181      	sbcs	r1, r0
100074f0:	2200      	movs	r2, #0
100074f2:	b2c8      	uxtb	r0, r1
100074f4:	1940      	adds	r0, r0, r5
100074f6:	42a8      	cmp	r0, r5
100074f8:	419b      	sbcs	r3, r3
100074fa:	1c05      	adds	r5, r0, #0
100074fc:	19d2      	adds	r2, r2, r7
100074fe:	425b      	negs	r3, r3
10007500:	18d7      	adds	r7, r2, r3
10007502:	023b      	lsls	r3, r7, #8
10007504:	d539      	bpl.n	1000757a <__aeabi_dadd+0x23e>
10007506:	4b78      	ldr	r3, [pc, #480]	; (100076e8 <__aeabi_dadd+0x3ac>)
10007508:	3401      	adds	r4, #1
1000750a:	429c      	cmp	r4, r3
1000750c:	d100      	bne.n	10007510 <__aeabi_dadd+0x1d4>
1000750e:	e14c      	b.n	100077aa <__aeabi_dadd+0x46e>
10007510:	2001      	movs	r0, #1
10007512:	4a76      	ldr	r2, [pc, #472]	; (100076ec <__aeabi_dadd+0x3b0>)
10007514:	086b      	lsrs	r3, r5, #1
10007516:	403a      	ands	r2, r7
10007518:	4028      	ands	r0, r5
1000751a:	4318      	orrs	r0, r3
1000751c:	07d5      	lsls	r5, r2, #31
1000751e:	4305      	orrs	r5, r0
10007520:	0857      	lsrs	r7, r2, #1
10007522:	e733      	b.n	1000738c <__aeabi_dadd+0x50>
10007524:	1c2b      	adds	r3, r5, #0
10007526:	4313      	orrs	r3, r2
10007528:	d048      	beq.n	100075bc <__aeabi_dadd+0x280>
1000752a:	2380      	movs	r3, #128	; 0x80
1000752c:	031b      	lsls	r3, r3, #12
1000752e:	431a      	orrs	r2, r3
10007530:	0312      	lsls	r2, r2, #12
10007532:	0b12      	lsrs	r2, r2, #12
10007534:	e74e      	b.n	100073d4 <__aeabi_dadd+0x98>
10007536:	3801      	subs	r0, #1
10007538:	2800      	cmp	r0, #0
1000753a:	d178      	bne.n	1000762e <__aeabi_dadd+0x2f2>
1000753c:	4663      	mov	r3, ip
1000753e:	1aee      	subs	r6, r5, r3
10007540:	42b5      	cmp	r5, r6
10007542:	419b      	sbcs	r3, r3
10007544:	1a7a      	subs	r2, r7, r1
10007546:	425b      	negs	r3, r3
10007548:	1ad7      	subs	r7, r2, r3
1000754a:	1c35      	adds	r5, r6, #0
1000754c:	e77a      	b.n	10007444 <__aeabi_dadd+0x108>
1000754e:	1c02      	adds	r2, r0, #0
10007550:	430a      	orrs	r2, r1
10007552:	d100      	bne.n	10007556 <__aeabi_dadd+0x21a>
10007554:	e71a      	b.n	1000738c <__aeabi_dadd+0x50>
10007556:	3b01      	subs	r3, #1
10007558:	2b00      	cmp	r3, #0
1000755a:	d000      	beq.n	1000755e <__aeabi_dadd+0x222>
1000755c:	e0f2      	b.n	10007744 <__aeabi_dadd+0x408>
1000755e:	1940      	adds	r0, r0, r5
10007560:	42a8      	cmp	r0, r5
10007562:	419b      	sbcs	r3, r3
10007564:	19ca      	adds	r2, r1, r7
10007566:	425b      	negs	r3, r3
10007568:	18d7      	adds	r7, r2, r3
1000756a:	1c05      	adds	r5, r0, #0
1000756c:	e7c9      	b.n	10007502 <__aeabi_dadd+0x1c6>
1000756e:	1c13      	adds	r3, r2, #0
10007570:	4333      	orrs	r3, r6
10007572:	d100      	bne.n	10007576 <__aeabi_dadd+0x23a>
10007574:	e118      	b.n	100077a8 <__aeabi_dadd+0x46c>
10007576:	1c17      	adds	r7, r2, #0
10007578:	1c35      	adds	r5, r6, #0
1000757a:	4646      	mov	r6, r8
1000757c:	076b      	lsls	r3, r5, #29
1000757e:	d000      	beq.n	10007582 <__aeabi_dadd+0x246>
10007580:	e707      	b.n	10007392 <__aeabi_dadd+0x56>
10007582:	e795      	b.n	100074b0 <__aeabi_dadd+0x174>
10007584:	2800      	cmp	r0, #0
10007586:	d17a      	bne.n	1000767e <__aeabi_dadd+0x342>
10007588:	1c62      	adds	r2, r4, #1
1000758a:	0552      	lsls	r2, r2, #21
1000758c:	0d52      	lsrs	r2, r2, #21
1000758e:	2a01      	cmp	r2, #1
10007590:	dc00      	bgt.n	10007594 <__aeabi_dadd+0x258>
10007592:	e0fb      	b.n	1000778c <__aeabi_dadd+0x450>
10007594:	4662      	mov	r2, ip
10007596:	1aaa      	subs	r2, r5, r2
10007598:	4295      	cmp	r5, r2
1000759a:	41b6      	sbcs	r6, r6
1000759c:	4691      	mov	r9, r2
1000759e:	1a78      	subs	r0, r7, r1
100075a0:	4272      	negs	r2, r6
100075a2:	1a86      	subs	r6, r0, r2
100075a4:	0232      	lsls	r2, r6, #8
100075a6:	d400      	bmi.n	100075aa <__aeabi_dadd+0x26e>
100075a8:	e093      	b.n	100076d2 <__aeabi_dadd+0x396>
100075aa:	4662      	mov	r2, ip
100075ac:	1b55      	subs	r5, r2, r5
100075ae:	45ac      	cmp	ip, r5
100075b0:	4180      	sbcs	r0, r0
100075b2:	1bcf      	subs	r7, r1, r7
100075b4:	4240      	negs	r0, r0
100075b6:	1a3e      	subs	r6, r7, r0
100075b8:	4698      	mov	r8, r3
100075ba:	e748      	b.n	1000744e <__aeabi_dadd+0x112>
100075bc:	2200      	movs	r2, #0
100075be:	2500      	movs	r5, #0
100075c0:	e708      	b.n	100073d4 <__aeabi_dadd+0x98>
100075c2:	1c28      	adds	r0, r5, #0
100075c4:	f001 fa62 	bl	10008a8c <__clzsi2>
100075c8:	3020      	adds	r0, #32
100075ca:	1c03      	adds	r3, r0, #0
100075cc:	3b08      	subs	r3, #8
100075ce:	2b1f      	cmp	r3, #31
100075d0:	dc00      	bgt.n	100075d4 <__aeabi_dadd+0x298>
100075d2:	e747      	b.n	10007464 <__aeabi_dadd+0x128>
100075d4:	3828      	subs	r0, #40	; 0x28
100075d6:	4085      	lsls	r5, r0
100075d8:	1c2e      	adds	r6, r5, #0
100075da:	2500      	movs	r5, #0
100075dc:	429c      	cmp	r4, r3
100075de:	dc00      	bgt.n	100075e2 <__aeabi_dadd+0x2a6>
100075e0:	e74c      	b.n	1000747c <__aeabi_dadd+0x140>
100075e2:	4a42      	ldr	r2, [pc, #264]	; (100076ec <__aeabi_dadd+0x3b0>)
100075e4:	1ae4      	subs	r4, r4, r3
100075e6:	4016      	ands	r6, r2
100075e8:	1c37      	adds	r7, r6, #0
100075ea:	e6cf      	b.n	1000738c <__aeabi_dadd+0x50>
100075ec:	4663      	mov	r3, ip
100075ee:	4319      	orrs	r1, r3
100075f0:	1e4b      	subs	r3, r1, #1
100075f2:	4199      	sbcs	r1, r3
100075f4:	2200      	movs	r2, #0
100075f6:	b2cb      	uxtb	r3, r1
100075f8:	e71d      	b.n	10007436 <__aeabi_dadd+0xfa>
100075fa:	2b00      	cmp	r3, #0
100075fc:	d000      	beq.n	10007600 <__aeabi_dadd+0x2c4>
100075fe:	e0f2      	b.n	100077e6 <__aeabi_dadd+0x4aa>
10007600:	1c60      	adds	r0, r4, #1
10007602:	0543      	lsls	r3, r0, #21
10007604:	0d5b      	lsrs	r3, r3, #21
10007606:	2b01      	cmp	r3, #1
10007608:	dc00      	bgt.n	1000760c <__aeabi_dadd+0x2d0>
1000760a:	e0a4      	b.n	10007756 <__aeabi_dadd+0x41a>
1000760c:	4b36      	ldr	r3, [pc, #216]	; (100076e8 <__aeabi_dadd+0x3ac>)
1000760e:	4298      	cmp	r0, r3
10007610:	d100      	bne.n	10007614 <__aeabi_dadd+0x2d8>
10007612:	e121      	b.n	10007858 <__aeabi_dadd+0x51c>
10007614:	4663      	mov	r3, ip
10007616:	195c      	adds	r4, r3, r5
10007618:	42ac      	cmp	r4, r5
1000761a:	419b      	sbcs	r3, r3
1000761c:	19cf      	adds	r7, r1, r7
1000761e:	425b      	negs	r3, r3
10007620:	18fa      	adds	r2, r7, r3
10007622:	0864      	lsrs	r4, r4, #1
10007624:	07d5      	lsls	r5, r2, #31
10007626:	4325      	orrs	r5, r4
10007628:	0857      	lsrs	r7, r2, #1
1000762a:	1c04      	adds	r4, r0, #0
1000762c:	e6ae      	b.n	1000738c <__aeabi_dadd+0x50>
1000762e:	4b2e      	ldr	r3, [pc, #184]	; (100076e8 <__aeabi_dadd+0x3ac>)
10007630:	429c      	cmp	r4, r3
10007632:	d000      	beq.n	10007636 <__aeabi_dadd+0x2fa>
10007634:	e6ea      	b.n	1000740c <__aeabi_dadd+0xd0>
10007636:	e6a9      	b.n	1000738c <__aeabi_dadd+0x50>
10007638:	1c21      	adds	r1, r4, #0
1000763a:	1c33      	adds	r3, r6, #0
1000763c:	391f      	subs	r1, #31
1000763e:	40cb      	lsrs	r3, r1
10007640:	1c19      	adds	r1, r3, #0
10007642:	2a20      	cmp	r2, #32
10007644:	d100      	bne.n	10007648 <__aeabi_dadd+0x30c>
10007646:	e082      	b.n	1000774e <__aeabi_dadd+0x412>
10007648:	233f      	movs	r3, #63	; 0x3f
1000764a:	1b1c      	subs	r4, r3, r4
1000764c:	40a6      	lsls	r6, r4
1000764e:	4335      	orrs	r5, r6
10007650:	1e6e      	subs	r6, r5, #1
10007652:	41b5      	sbcs	r5, r6
10007654:	2700      	movs	r7, #0
10007656:	430d      	orrs	r5, r1
10007658:	2400      	movs	r4, #0
1000765a:	e78e      	b.n	1000757a <__aeabi_dadd+0x23e>
1000765c:	1c03      	adds	r3, r0, #0
1000765e:	1c0e      	adds	r6, r1, #0
10007660:	3b20      	subs	r3, #32
10007662:	40de      	lsrs	r6, r3
10007664:	2820      	cmp	r0, #32
10007666:	d074      	beq.n	10007752 <__aeabi_dadd+0x416>
10007668:	2340      	movs	r3, #64	; 0x40
1000766a:	1a1b      	subs	r3, r3, r0
1000766c:	4099      	lsls	r1, r3
1000766e:	1c0b      	adds	r3, r1, #0
10007670:	4662      	mov	r2, ip
10007672:	4313      	orrs	r3, r2
10007674:	1e59      	subs	r1, r3, #1
10007676:	418b      	sbcs	r3, r1
10007678:	2200      	movs	r2, #0
1000767a:	4333      	orrs	r3, r6
1000767c:	e6db      	b.n	10007436 <__aeabi_dadd+0xfa>
1000767e:	2c00      	cmp	r4, #0
10007680:	d050      	beq.n	10007724 <__aeabi_dadd+0x3e8>
10007682:	4c19      	ldr	r4, [pc, #100]	; (100076e8 <__aeabi_dadd+0x3ac>)
10007684:	42a2      	cmp	r2, r4
10007686:	d100      	bne.n	1000768a <__aeabi_dadd+0x34e>
10007688:	e0a8      	b.n	100077dc <__aeabi_dadd+0x4a0>
1000768a:	2480      	movs	r4, #128	; 0x80
1000768c:	0424      	lsls	r4, r4, #16
1000768e:	4240      	negs	r0, r0
10007690:	4327      	orrs	r7, r4
10007692:	2838      	cmp	r0, #56	; 0x38
10007694:	dd00      	ble.n	10007698 <__aeabi_dadd+0x35c>
10007696:	e0d9      	b.n	1000784c <__aeabi_dadd+0x510>
10007698:	281f      	cmp	r0, #31
1000769a:	dd00      	ble.n	1000769e <__aeabi_dadd+0x362>
1000769c:	e139      	b.n	10007912 <__aeabi_dadd+0x5d6>
1000769e:	2420      	movs	r4, #32
100076a0:	1c3e      	adds	r6, r7, #0
100076a2:	1a24      	subs	r4, r4, r0
100076a4:	40a6      	lsls	r6, r4
100076a6:	46b0      	mov	r8, r6
100076a8:	1c2e      	adds	r6, r5, #0
100076aa:	46a1      	mov	r9, r4
100076ac:	40c6      	lsrs	r6, r0
100076ae:	4644      	mov	r4, r8
100076b0:	4326      	orrs	r6, r4
100076b2:	464c      	mov	r4, r9
100076b4:	40a5      	lsls	r5, r4
100076b6:	1e6c      	subs	r4, r5, #1
100076b8:	41a5      	sbcs	r5, r4
100076ba:	40c7      	lsrs	r7, r0
100076bc:	4335      	orrs	r5, r6
100076be:	4660      	mov	r0, ip
100076c0:	1b45      	subs	r5, r0, r5
100076c2:	1bcf      	subs	r7, r1, r7
100076c4:	45ac      	cmp	ip, r5
100076c6:	4189      	sbcs	r1, r1
100076c8:	4249      	negs	r1, r1
100076ca:	1a7f      	subs	r7, r7, r1
100076cc:	1c14      	adds	r4, r2, #0
100076ce:	4698      	mov	r8, r3
100076d0:	e6b8      	b.n	10007444 <__aeabi_dadd+0x108>
100076d2:	464b      	mov	r3, r9
100076d4:	464d      	mov	r5, r9
100076d6:	4333      	orrs	r3, r6
100076d8:	d000      	beq.n	100076dc <__aeabi_dadd+0x3a0>
100076da:	e6b8      	b.n	1000744e <__aeabi_dadd+0x112>
100076dc:	2600      	movs	r6, #0
100076de:	2700      	movs	r7, #0
100076e0:	2400      	movs	r4, #0
100076e2:	2500      	movs	r5, #0
100076e4:	e6e4      	b.n	100074b0 <__aeabi_dadd+0x174>
100076e6:	46c0      	nop			; (mov r8, r8)
100076e8:	000007ff 	.word	0x000007ff
100076ec:	ff7fffff 	.word	0xff7fffff
100076f0:	800fffff 	.word	0x800fffff
100076f4:	2b1f      	cmp	r3, #31
100076f6:	dc5b      	bgt.n	100077b0 <__aeabi_dadd+0x474>
100076f8:	2220      	movs	r2, #32
100076fa:	1c08      	adds	r0, r1, #0
100076fc:	1ad2      	subs	r2, r2, r3
100076fe:	4090      	lsls	r0, r2
10007700:	4681      	mov	r9, r0
10007702:	4660      	mov	r0, ip
10007704:	4692      	mov	sl, r2
10007706:	40d8      	lsrs	r0, r3
10007708:	464a      	mov	r2, r9
1000770a:	4310      	orrs	r0, r2
1000770c:	4681      	mov	r9, r0
1000770e:	4652      	mov	r2, sl
10007710:	4660      	mov	r0, ip
10007712:	4090      	lsls	r0, r2
10007714:	1c02      	adds	r2, r0, #0
10007716:	1e50      	subs	r0, r2, #1
10007718:	4182      	sbcs	r2, r0
1000771a:	4648      	mov	r0, r9
1000771c:	4310      	orrs	r0, r2
1000771e:	1c0a      	adds	r2, r1, #0
10007720:	40da      	lsrs	r2, r3
10007722:	e6e7      	b.n	100074f4 <__aeabi_dadd+0x1b8>
10007724:	1c3c      	adds	r4, r7, #0
10007726:	432c      	orrs	r4, r5
10007728:	d058      	beq.n	100077dc <__aeabi_dadd+0x4a0>
1000772a:	43c0      	mvns	r0, r0
1000772c:	2800      	cmp	r0, #0
1000772e:	d151      	bne.n	100077d4 <__aeabi_dadd+0x498>
10007730:	4660      	mov	r0, ip
10007732:	1b45      	subs	r5, r0, r5
10007734:	45ac      	cmp	ip, r5
10007736:	4180      	sbcs	r0, r0
10007738:	1bcf      	subs	r7, r1, r7
1000773a:	4240      	negs	r0, r0
1000773c:	1a3f      	subs	r7, r7, r0
1000773e:	1c14      	adds	r4, r2, #0
10007740:	4698      	mov	r8, r3
10007742:	e67f      	b.n	10007444 <__aeabi_dadd+0x108>
10007744:	4a8f      	ldr	r2, [pc, #572]	; (10007984 <__aeabi_dadd+0x648>)
10007746:	4294      	cmp	r4, r2
10007748:	d000      	beq.n	1000774c <__aeabi_dadd+0x410>
1000774a:	e6ca      	b.n	100074e2 <__aeabi_dadd+0x1a6>
1000774c:	e61e      	b.n	1000738c <__aeabi_dadd+0x50>
1000774e:	2600      	movs	r6, #0
10007750:	e77d      	b.n	1000764e <__aeabi_dadd+0x312>
10007752:	2300      	movs	r3, #0
10007754:	e78c      	b.n	10007670 <__aeabi_dadd+0x334>
10007756:	1c3b      	adds	r3, r7, #0
10007758:	432b      	orrs	r3, r5
1000775a:	2c00      	cmp	r4, #0
1000775c:	d000      	beq.n	10007760 <__aeabi_dadd+0x424>
1000775e:	e0bd      	b.n	100078dc <__aeabi_dadd+0x5a0>
10007760:	2b00      	cmp	r3, #0
10007762:	d100      	bne.n	10007766 <__aeabi_dadd+0x42a>
10007764:	e0f5      	b.n	10007952 <__aeabi_dadd+0x616>
10007766:	4663      	mov	r3, ip
10007768:	430b      	orrs	r3, r1
1000776a:	d100      	bne.n	1000776e <__aeabi_dadd+0x432>
1000776c:	e60e      	b.n	1000738c <__aeabi_dadd+0x50>
1000776e:	4663      	mov	r3, ip
10007770:	195b      	adds	r3, r3, r5
10007772:	42ab      	cmp	r3, r5
10007774:	4180      	sbcs	r0, r0
10007776:	19ca      	adds	r2, r1, r7
10007778:	4240      	negs	r0, r0
1000777a:	1817      	adds	r7, r2, r0
1000777c:	023a      	lsls	r2, r7, #8
1000777e:	d400      	bmi.n	10007782 <__aeabi_dadd+0x446>
10007780:	e0fc      	b.n	1000797c <__aeabi_dadd+0x640>
10007782:	4a81      	ldr	r2, [pc, #516]	; (10007988 <__aeabi_dadd+0x64c>)
10007784:	1c1d      	adds	r5, r3, #0
10007786:	4017      	ands	r7, r2
10007788:	3401      	adds	r4, #1
1000778a:	e5ff      	b.n	1000738c <__aeabi_dadd+0x50>
1000778c:	1c3a      	adds	r2, r7, #0
1000778e:	432a      	orrs	r2, r5
10007790:	2c00      	cmp	r4, #0
10007792:	d151      	bne.n	10007838 <__aeabi_dadd+0x4fc>
10007794:	2a00      	cmp	r2, #0
10007796:	d000      	beq.n	1000779a <__aeabi_dadd+0x45e>
10007798:	e085      	b.n	100078a6 <__aeabi_dadd+0x56a>
1000779a:	4662      	mov	r2, ip
1000779c:	430a      	orrs	r2, r1
1000779e:	d003      	beq.n	100077a8 <__aeabi_dadd+0x46c>
100077a0:	1c0f      	adds	r7, r1, #0
100077a2:	4665      	mov	r5, ip
100077a4:	4698      	mov	r8, r3
100077a6:	e5f1      	b.n	1000738c <__aeabi_dadd+0x50>
100077a8:	2600      	movs	r6, #0
100077aa:	2700      	movs	r7, #0
100077ac:	2500      	movs	r5, #0
100077ae:	e67f      	b.n	100074b0 <__aeabi_dadd+0x174>
100077b0:	1c18      	adds	r0, r3, #0
100077b2:	1c0a      	adds	r2, r1, #0
100077b4:	3820      	subs	r0, #32
100077b6:	40c2      	lsrs	r2, r0
100077b8:	2b20      	cmp	r3, #32
100077ba:	d100      	bne.n	100077be <__aeabi_dadd+0x482>
100077bc:	e0a7      	b.n	1000790e <__aeabi_dadd+0x5d2>
100077be:	2040      	movs	r0, #64	; 0x40
100077c0:	1ac0      	subs	r0, r0, r3
100077c2:	4081      	lsls	r1, r0
100077c4:	1c08      	adds	r0, r1, #0
100077c6:	4663      	mov	r3, ip
100077c8:	4318      	orrs	r0, r3
100077ca:	1e41      	subs	r1, r0, #1
100077cc:	4188      	sbcs	r0, r1
100077ce:	4310      	orrs	r0, r2
100077d0:	2200      	movs	r2, #0
100077d2:	e68f      	b.n	100074f4 <__aeabi_dadd+0x1b8>
100077d4:	4c6b      	ldr	r4, [pc, #428]	; (10007984 <__aeabi_dadd+0x648>)
100077d6:	42a2      	cmp	r2, r4
100077d8:	d000      	beq.n	100077dc <__aeabi_dadd+0x4a0>
100077da:	e75a      	b.n	10007692 <__aeabi_dadd+0x356>
100077dc:	1c0f      	adds	r7, r1, #0
100077de:	4665      	mov	r5, ip
100077e0:	1c14      	adds	r4, r2, #0
100077e2:	4698      	mov	r8, r3
100077e4:	e5d2      	b.n	1000738c <__aeabi_dadd+0x50>
100077e6:	2c00      	cmp	r4, #0
100077e8:	d13a      	bne.n	10007860 <__aeabi_dadd+0x524>
100077ea:	1c38      	adds	r0, r7, #0
100077ec:	4328      	orrs	r0, r5
100077ee:	d071      	beq.n	100078d4 <__aeabi_dadd+0x598>
100077f0:	43db      	mvns	r3, r3
100077f2:	2b00      	cmp	r3, #0
100077f4:	d018      	beq.n	10007828 <__aeabi_dadd+0x4ec>
100077f6:	4863      	ldr	r0, [pc, #396]	; (10007984 <__aeabi_dadd+0x648>)
100077f8:	4282      	cmp	r2, r0
100077fa:	d06b      	beq.n	100078d4 <__aeabi_dadd+0x598>
100077fc:	2b38      	cmp	r3, #56	; 0x38
100077fe:	dd00      	ble.n	10007802 <__aeabi_dadd+0x4c6>
10007800:	e09d      	b.n	1000793e <__aeabi_dadd+0x602>
10007802:	2b1f      	cmp	r3, #31
10007804:	dd00      	ble.n	10007808 <__aeabi_dadd+0x4cc>
10007806:	e0a7      	b.n	10007958 <__aeabi_dadd+0x61c>
10007808:	2020      	movs	r0, #32
1000780a:	1c3c      	adds	r4, r7, #0
1000780c:	1ac0      	subs	r0, r0, r3
1000780e:	4084      	lsls	r4, r0
10007810:	46a1      	mov	r9, r4
10007812:	1c2c      	adds	r4, r5, #0
10007814:	4682      	mov	sl, r0
10007816:	40dc      	lsrs	r4, r3
10007818:	4648      	mov	r0, r9
1000781a:	4304      	orrs	r4, r0
1000781c:	4650      	mov	r0, sl
1000781e:	4085      	lsls	r5, r0
10007820:	1e68      	subs	r0, r5, #1
10007822:	4185      	sbcs	r5, r0
10007824:	40df      	lsrs	r7, r3
10007826:	4325      	orrs	r5, r4
10007828:	4465      	add	r5, ip
1000782a:	4565      	cmp	r5, ip
1000782c:	419b      	sbcs	r3, r3
1000782e:	187f      	adds	r7, r7, r1
10007830:	425b      	negs	r3, r3
10007832:	18ff      	adds	r7, r7, r3
10007834:	1c14      	adds	r4, r2, #0
10007836:	e664      	b.n	10007502 <__aeabi_dadd+0x1c6>
10007838:	2a00      	cmp	r2, #0
1000783a:	d119      	bne.n	10007870 <__aeabi_dadd+0x534>
1000783c:	4662      	mov	r2, ip
1000783e:	430a      	orrs	r2, r1
10007840:	d077      	beq.n	10007932 <__aeabi_dadd+0x5f6>
10007842:	1c0f      	adds	r7, r1, #0
10007844:	4665      	mov	r5, ip
10007846:	4698      	mov	r8, r3
10007848:	4c4e      	ldr	r4, [pc, #312]	; (10007984 <__aeabi_dadd+0x648>)
1000784a:	e59f      	b.n	1000738c <__aeabi_dadd+0x50>
1000784c:	433d      	orrs	r5, r7
1000784e:	1e6f      	subs	r7, r5, #1
10007850:	41bd      	sbcs	r5, r7
10007852:	2700      	movs	r7, #0
10007854:	b2ed      	uxtb	r5, r5
10007856:	e732      	b.n	100076be <__aeabi_dadd+0x382>
10007858:	1c04      	adds	r4, r0, #0
1000785a:	2700      	movs	r7, #0
1000785c:	2500      	movs	r5, #0
1000785e:	e627      	b.n	100074b0 <__aeabi_dadd+0x174>
10007860:	4848      	ldr	r0, [pc, #288]	; (10007984 <__aeabi_dadd+0x648>)
10007862:	4282      	cmp	r2, r0
10007864:	d036      	beq.n	100078d4 <__aeabi_dadd+0x598>
10007866:	2080      	movs	r0, #128	; 0x80
10007868:	0400      	lsls	r0, r0, #16
1000786a:	425b      	negs	r3, r3
1000786c:	4307      	orrs	r7, r0
1000786e:	e7c5      	b.n	100077fc <__aeabi_dadd+0x4c0>
10007870:	4662      	mov	r2, ip
10007872:	430a      	orrs	r2, r1
10007874:	d049      	beq.n	1000790a <__aeabi_dadd+0x5ce>
10007876:	2480      	movs	r4, #128	; 0x80
10007878:	08ed      	lsrs	r5, r5, #3
1000787a:	0778      	lsls	r0, r7, #29
1000787c:	08fa      	lsrs	r2, r7, #3
1000787e:	0324      	lsls	r4, r4, #12
10007880:	4328      	orrs	r0, r5
10007882:	4222      	tst	r2, r4
10007884:	d009      	beq.n	1000789a <__aeabi_dadd+0x55e>
10007886:	08ce      	lsrs	r6, r1, #3
10007888:	4226      	tst	r6, r4
1000788a:	d106      	bne.n	1000789a <__aeabi_dadd+0x55e>
1000788c:	4662      	mov	r2, ip
1000788e:	074f      	lsls	r7, r1, #29
10007890:	1c38      	adds	r0, r7, #0
10007892:	08d2      	lsrs	r2, r2, #3
10007894:	4310      	orrs	r0, r2
10007896:	4698      	mov	r8, r3
10007898:	1c32      	adds	r2, r6, #0
1000789a:	00d2      	lsls	r2, r2, #3
1000789c:	0f47      	lsrs	r7, r0, #29
1000789e:	4317      	orrs	r7, r2
100078a0:	00c5      	lsls	r5, r0, #3
100078a2:	4c38      	ldr	r4, [pc, #224]	; (10007984 <__aeabi_dadd+0x648>)
100078a4:	e572      	b.n	1000738c <__aeabi_dadd+0x50>
100078a6:	4662      	mov	r2, ip
100078a8:	430a      	orrs	r2, r1
100078aa:	d100      	bne.n	100078ae <__aeabi_dadd+0x572>
100078ac:	e56e      	b.n	1000738c <__aeabi_dadd+0x50>
100078ae:	4662      	mov	r2, ip
100078b0:	1aae      	subs	r6, r5, r2
100078b2:	42b5      	cmp	r5, r6
100078b4:	4192      	sbcs	r2, r2
100078b6:	1a78      	subs	r0, r7, r1
100078b8:	4252      	negs	r2, r2
100078ba:	1a82      	subs	r2, r0, r2
100078bc:	0210      	lsls	r0, r2, #8
100078be:	d400      	bmi.n	100078c2 <__aeabi_dadd+0x586>
100078c0:	e655      	b.n	1000756e <__aeabi_dadd+0x232>
100078c2:	4662      	mov	r2, ip
100078c4:	1b55      	subs	r5, r2, r5
100078c6:	45ac      	cmp	ip, r5
100078c8:	4180      	sbcs	r0, r0
100078ca:	1bca      	subs	r2, r1, r7
100078cc:	4240      	negs	r0, r0
100078ce:	1a17      	subs	r7, r2, r0
100078d0:	4698      	mov	r8, r3
100078d2:	e55b      	b.n	1000738c <__aeabi_dadd+0x50>
100078d4:	1c0f      	adds	r7, r1, #0
100078d6:	4665      	mov	r5, ip
100078d8:	1c14      	adds	r4, r2, #0
100078da:	e557      	b.n	1000738c <__aeabi_dadd+0x50>
100078dc:	2b00      	cmp	r3, #0
100078de:	d034      	beq.n	1000794a <__aeabi_dadd+0x60e>
100078e0:	4663      	mov	r3, ip
100078e2:	430b      	orrs	r3, r1
100078e4:	d011      	beq.n	1000790a <__aeabi_dadd+0x5ce>
100078e6:	2480      	movs	r4, #128	; 0x80
100078e8:	08ed      	lsrs	r5, r5, #3
100078ea:	0778      	lsls	r0, r7, #29
100078ec:	08fa      	lsrs	r2, r7, #3
100078ee:	0324      	lsls	r4, r4, #12
100078f0:	4328      	orrs	r0, r5
100078f2:	4222      	tst	r2, r4
100078f4:	d0d1      	beq.n	1000789a <__aeabi_dadd+0x55e>
100078f6:	08cb      	lsrs	r3, r1, #3
100078f8:	4223      	tst	r3, r4
100078fa:	d1ce      	bne.n	1000789a <__aeabi_dadd+0x55e>
100078fc:	4662      	mov	r2, ip
100078fe:	074f      	lsls	r7, r1, #29
10007900:	1c38      	adds	r0, r7, #0
10007902:	08d2      	lsrs	r2, r2, #3
10007904:	4310      	orrs	r0, r2
10007906:	1c1a      	adds	r2, r3, #0
10007908:	e7c7      	b.n	1000789a <__aeabi_dadd+0x55e>
1000790a:	4c1e      	ldr	r4, [pc, #120]	; (10007984 <__aeabi_dadd+0x648>)
1000790c:	e53e      	b.n	1000738c <__aeabi_dadd+0x50>
1000790e:	2000      	movs	r0, #0
10007910:	e759      	b.n	100077c6 <__aeabi_dadd+0x48a>
10007912:	1c04      	adds	r4, r0, #0
10007914:	1c3e      	adds	r6, r7, #0
10007916:	3c20      	subs	r4, #32
10007918:	40e6      	lsrs	r6, r4
1000791a:	1c34      	adds	r4, r6, #0
1000791c:	2820      	cmp	r0, #32
1000791e:	d02b      	beq.n	10007978 <__aeabi_dadd+0x63c>
10007920:	2640      	movs	r6, #64	; 0x40
10007922:	1a30      	subs	r0, r6, r0
10007924:	4087      	lsls	r7, r0
10007926:	433d      	orrs	r5, r7
10007928:	1e6f      	subs	r7, r5, #1
1000792a:	41bd      	sbcs	r5, r7
1000792c:	2700      	movs	r7, #0
1000792e:	4325      	orrs	r5, r4
10007930:	e6c5      	b.n	100076be <__aeabi_dadd+0x382>
10007932:	2780      	movs	r7, #128	; 0x80
10007934:	2600      	movs	r6, #0
10007936:	03ff      	lsls	r7, r7, #15
10007938:	4c12      	ldr	r4, [pc, #72]	; (10007984 <__aeabi_dadd+0x648>)
1000793a:	2500      	movs	r5, #0
1000793c:	e5b8      	b.n	100074b0 <__aeabi_dadd+0x174>
1000793e:	433d      	orrs	r5, r7
10007940:	1e6f      	subs	r7, r5, #1
10007942:	41bd      	sbcs	r5, r7
10007944:	2700      	movs	r7, #0
10007946:	b2ed      	uxtb	r5, r5
10007948:	e76e      	b.n	10007828 <__aeabi_dadd+0x4ec>
1000794a:	1c0f      	adds	r7, r1, #0
1000794c:	4665      	mov	r5, ip
1000794e:	4c0d      	ldr	r4, [pc, #52]	; (10007984 <__aeabi_dadd+0x648>)
10007950:	e51c      	b.n	1000738c <__aeabi_dadd+0x50>
10007952:	1c0f      	adds	r7, r1, #0
10007954:	4665      	mov	r5, ip
10007956:	e519      	b.n	1000738c <__aeabi_dadd+0x50>
10007958:	1c1c      	adds	r4, r3, #0
1000795a:	1c38      	adds	r0, r7, #0
1000795c:	3c20      	subs	r4, #32
1000795e:	40e0      	lsrs	r0, r4
10007960:	1c04      	adds	r4, r0, #0
10007962:	2b20      	cmp	r3, #32
10007964:	d00c      	beq.n	10007980 <__aeabi_dadd+0x644>
10007966:	2040      	movs	r0, #64	; 0x40
10007968:	1ac3      	subs	r3, r0, r3
1000796a:	409f      	lsls	r7, r3
1000796c:	433d      	orrs	r5, r7
1000796e:	1e6f      	subs	r7, r5, #1
10007970:	41bd      	sbcs	r5, r7
10007972:	2700      	movs	r7, #0
10007974:	4325      	orrs	r5, r4
10007976:	e757      	b.n	10007828 <__aeabi_dadd+0x4ec>
10007978:	2700      	movs	r7, #0
1000797a:	e7d4      	b.n	10007926 <__aeabi_dadd+0x5ea>
1000797c:	1c1d      	adds	r5, r3, #0
1000797e:	e5fc      	b.n	1000757a <__aeabi_dadd+0x23e>
10007980:	2700      	movs	r7, #0
10007982:	e7f3      	b.n	1000796c <__aeabi_dadd+0x630>
10007984:	000007ff 	.word	0x000007ff
10007988:	ff7fffff 	.word	0xff7fffff

1000798c <__eqdf2>:
1000798c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000798e:	465f      	mov	r7, fp
10007990:	464d      	mov	r5, r9
10007992:	4644      	mov	r4, r8
10007994:	4656      	mov	r6, sl
10007996:	b4f0      	push	{r4, r5, r6, r7}
10007998:	031f      	lsls	r7, r3, #12
1000799a:	005c      	lsls	r4, r3, #1
1000799c:	0fdb      	lsrs	r3, r3, #31
1000799e:	4699      	mov	r9, r3
100079a0:	4b1b      	ldr	r3, [pc, #108]	; (10007a10 <__eqdf2+0x84>)
100079a2:	030e      	lsls	r6, r1, #12
100079a4:	004d      	lsls	r5, r1, #1
100079a6:	0fc9      	lsrs	r1, r1, #31
100079a8:	4684      	mov	ip, r0
100079aa:	0b36      	lsrs	r6, r6, #12
100079ac:	0d6d      	lsrs	r5, r5, #21
100079ae:	468b      	mov	fp, r1
100079b0:	4690      	mov	r8, r2
100079b2:	0b3f      	lsrs	r7, r7, #12
100079b4:	0d64      	lsrs	r4, r4, #21
100079b6:	429d      	cmp	r5, r3
100079b8:	d00c      	beq.n	100079d4 <__eqdf2+0x48>
100079ba:	4b15      	ldr	r3, [pc, #84]	; (10007a10 <__eqdf2+0x84>)
100079bc:	429c      	cmp	r4, r3
100079be:	d010      	beq.n	100079e2 <__eqdf2+0x56>
100079c0:	2301      	movs	r3, #1
100079c2:	42a5      	cmp	r5, r4
100079c4:	d014      	beq.n	100079f0 <__eqdf2+0x64>
100079c6:	1c18      	adds	r0, r3, #0
100079c8:	bc3c      	pop	{r2, r3, r4, r5}
100079ca:	4690      	mov	r8, r2
100079cc:	4699      	mov	r9, r3
100079ce:	46a2      	mov	sl, r4
100079d0:	46ab      	mov	fp, r5
100079d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100079d4:	1c31      	adds	r1, r6, #0
100079d6:	2301      	movs	r3, #1
100079d8:	4301      	orrs	r1, r0
100079da:	d1f4      	bne.n	100079c6 <__eqdf2+0x3a>
100079dc:	4b0c      	ldr	r3, [pc, #48]	; (10007a10 <__eqdf2+0x84>)
100079de:	429c      	cmp	r4, r3
100079e0:	d1ee      	bne.n	100079c0 <__eqdf2+0x34>
100079e2:	433a      	orrs	r2, r7
100079e4:	2301      	movs	r3, #1
100079e6:	2a00      	cmp	r2, #0
100079e8:	d1ed      	bne.n	100079c6 <__eqdf2+0x3a>
100079ea:	2301      	movs	r3, #1
100079ec:	42a5      	cmp	r5, r4
100079ee:	d1ea      	bne.n	100079c6 <__eqdf2+0x3a>
100079f0:	42be      	cmp	r6, r7
100079f2:	d1e8      	bne.n	100079c6 <__eqdf2+0x3a>
100079f4:	45c4      	cmp	ip, r8
100079f6:	d1e6      	bne.n	100079c6 <__eqdf2+0x3a>
100079f8:	45cb      	cmp	fp, r9
100079fa:	d006      	beq.n	10007a0a <__eqdf2+0x7e>
100079fc:	2d00      	cmp	r5, #0
100079fe:	d1e2      	bne.n	100079c6 <__eqdf2+0x3a>
10007a00:	4330      	orrs	r0, r6
10007a02:	1c03      	adds	r3, r0, #0
10007a04:	1e58      	subs	r0, r3, #1
10007a06:	4183      	sbcs	r3, r0
10007a08:	e7dd      	b.n	100079c6 <__eqdf2+0x3a>
10007a0a:	2300      	movs	r3, #0
10007a0c:	e7db      	b.n	100079c6 <__eqdf2+0x3a>
10007a0e:	46c0      	nop			; (mov r8, r8)
10007a10:	000007ff 	.word	0x000007ff

10007a14 <__gedf2>:
10007a14:	b5f0      	push	{r4, r5, r6, r7, lr}
10007a16:	4657      	mov	r7, sl
10007a18:	4645      	mov	r5, r8
10007a1a:	464e      	mov	r6, r9
10007a1c:	b4e0      	push	{r5, r6, r7}
10007a1e:	030f      	lsls	r7, r1, #12
10007a20:	004e      	lsls	r6, r1, #1
10007a22:	0fc9      	lsrs	r1, r1, #31
10007a24:	468a      	mov	sl, r1
10007a26:	4932      	ldr	r1, [pc, #200]	; (10007af0 <__gedf2+0xdc>)
10007a28:	031d      	lsls	r5, r3, #12
10007a2a:	005c      	lsls	r4, r3, #1
10007a2c:	4684      	mov	ip, r0
10007a2e:	0b3f      	lsrs	r7, r7, #12
10007a30:	0d76      	lsrs	r6, r6, #21
10007a32:	4690      	mov	r8, r2
10007a34:	0b2d      	lsrs	r5, r5, #12
10007a36:	0d64      	lsrs	r4, r4, #21
10007a38:	0fdb      	lsrs	r3, r3, #31
10007a3a:	428e      	cmp	r6, r1
10007a3c:	d00f      	beq.n	10007a5e <__gedf2+0x4a>
10007a3e:	428c      	cmp	r4, r1
10007a40:	d039      	beq.n	10007ab6 <__gedf2+0xa2>
10007a42:	2e00      	cmp	r6, #0
10007a44:	d110      	bne.n	10007a68 <__gedf2+0x54>
10007a46:	4338      	orrs	r0, r7
10007a48:	4241      	negs	r1, r0
10007a4a:	4141      	adcs	r1, r0
10007a4c:	4689      	mov	r9, r1
10007a4e:	2c00      	cmp	r4, #0
10007a50:	d127      	bne.n	10007aa2 <__gedf2+0x8e>
10007a52:	432a      	orrs	r2, r5
10007a54:	d125      	bne.n	10007aa2 <__gedf2+0x8e>
10007a56:	2000      	movs	r0, #0
10007a58:	2900      	cmp	r1, #0
10007a5a:	d10e      	bne.n	10007a7a <__gedf2+0x66>
10007a5c:	e008      	b.n	10007a70 <__gedf2+0x5c>
10007a5e:	1c39      	adds	r1, r7, #0
10007a60:	4301      	orrs	r1, r0
10007a62:	d12e      	bne.n	10007ac2 <__gedf2+0xae>
10007a64:	42b4      	cmp	r4, r6
10007a66:	d026      	beq.n	10007ab6 <__gedf2+0xa2>
10007a68:	2c00      	cmp	r4, #0
10007a6a:	d00b      	beq.n	10007a84 <__gedf2+0x70>
10007a6c:	459a      	cmp	sl, r3
10007a6e:	d00d      	beq.n	10007a8c <__gedf2+0x78>
10007a70:	4653      	mov	r3, sl
10007a72:	4259      	negs	r1, r3
10007a74:	2301      	movs	r3, #1
10007a76:	4319      	orrs	r1, r3
10007a78:	1c08      	adds	r0, r1, #0
10007a7a:	bc1c      	pop	{r2, r3, r4}
10007a7c:	4690      	mov	r8, r2
10007a7e:	4699      	mov	r9, r3
10007a80:	46a2      	mov	sl, r4
10007a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007a84:	432a      	orrs	r2, r5
10007a86:	d0f3      	beq.n	10007a70 <__gedf2+0x5c>
10007a88:	459a      	cmp	sl, r3
10007a8a:	d1f1      	bne.n	10007a70 <__gedf2+0x5c>
10007a8c:	42a6      	cmp	r6, r4
10007a8e:	dcef      	bgt.n	10007a70 <__gedf2+0x5c>
10007a90:	da1a      	bge.n	10007ac8 <__gedf2+0xb4>
10007a92:	4650      	mov	r0, sl
10007a94:	4241      	negs	r1, r0
10007a96:	4148      	adcs	r0, r1
10007a98:	2301      	movs	r3, #1
10007a9a:	4241      	negs	r1, r0
10007a9c:	4319      	orrs	r1, r3
10007a9e:	1c08      	adds	r0, r1, #0
10007aa0:	e7eb      	b.n	10007a7a <__gedf2+0x66>
10007aa2:	464a      	mov	r2, r9
10007aa4:	2a00      	cmp	r2, #0
10007aa6:	d0e1      	beq.n	10007a6c <__gedf2+0x58>
10007aa8:	4258      	negs	r0, r3
10007aaa:	4158      	adcs	r0, r3
10007aac:	2201      	movs	r2, #1
10007aae:	4241      	negs	r1, r0
10007ab0:	4311      	orrs	r1, r2
10007ab2:	1c08      	adds	r0, r1, #0
10007ab4:	e7e1      	b.n	10007a7a <__gedf2+0x66>
10007ab6:	1c29      	adds	r1, r5, #0
10007ab8:	4311      	orrs	r1, r2
10007aba:	d102      	bne.n	10007ac2 <__gedf2+0xae>
10007abc:	2e00      	cmp	r6, #0
10007abe:	d0c2      	beq.n	10007a46 <__gedf2+0x32>
10007ac0:	e7d4      	b.n	10007a6c <__gedf2+0x58>
10007ac2:	2002      	movs	r0, #2
10007ac4:	4240      	negs	r0, r0
10007ac6:	e7d8      	b.n	10007a7a <__gedf2+0x66>
10007ac8:	42af      	cmp	r7, r5
10007aca:	d8d1      	bhi.n	10007a70 <__gedf2+0x5c>
10007acc:	d009      	beq.n	10007ae2 <__gedf2+0xce>
10007ace:	2000      	movs	r0, #0
10007ad0:	42af      	cmp	r7, r5
10007ad2:	d2d2      	bcs.n	10007a7a <__gedf2+0x66>
10007ad4:	4650      	mov	r0, sl
10007ad6:	4241      	negs	r1, r0
10007ad8:	4148      	adcs	r0, r1
10007ada:	2301      	movs	r3, #1
10007adc:	4240      	negs	r0, r0
10007ade:	4318      	orrs	r0, r3
10007ae0:	e7cb      	b.n	10007a7a <__gedf2+0x66>
10007ae2:	45c4      	cmp	ip, r8
10007ae4:	d8c4      	bhi.n	10007a70 <__gedf2+0x5c>
10007ae6:	2000      	movs	r0, #0
10007ae8:	45c4      	cmp	ip, r8
10007aea:	d3f3      	bcc.n	10007ad4 <__gedf2+0xc0>
10007aec:	e7c5      	b.n	10007a7a <__gedf2+0x66>
10007aee:	46c0      	nop			; (mov r8, r8)
10007af0:	000007ff 	.word	0x000007ff

10007af4 <__ledf2>:
10007af4:	b5f0      	push	{r4, r5, r6, r7, lr}
10007af6:	465f      	mov	r7, fp
10007af8:	464d      	mov	r5, r9
10007afa:	4644      	mov	r4, r8
10007afc:	4656      	mov	r6, sl
10007afe:	4680      	mov	r8, r0
10007b00:	b4f0      	push	{r4, r5, r6, r7}
10007b02:	1c06      	adds	r6, r0, #0
10007b04:	0308      	lsls	r0, r1, #12
10007b06:	0b00      	lsrs	r0, r0, #12
10007b08:	4684      	mov	ip, r0
10007b0a:	482c      	ldr	r0, [pc, #176]	; (10007bbc <__ledf2+0xc8>)
10007b0c:	004c      	lsls	r4, r1, #1
10007b0e:	031f      	lsls	r7, r3, #12
10007b10:	005d      	lsls	r5, r3, #1
10007b12:	0fc9      	lsrs	r1, r1, #31
10007b14:	0d64      	lsrs	r4, r4, #21
10007b16:	468b      	mov	fp, r1
10007b18:	4691      	mov	r9, r2
10007b1a:	0b3f      	lsrs	r7, r7, #12
10007b1c:	0d6d      	lsrs	r5, r5, #21
10007b1e:	0fdb      	lsrs	r3, r3, #31
10007b20:	4284      	cmp	r4, r0
10007b22:	d012      	beq.n	10007b4a <__ledf2+0x56>
10007b24:	4285      	cmp	r5, r0
10007b26:	d025      	beq.n	10007b74 <__ledf2+0x80>
10007b28:	2c00      	cmp	r4, #0
10007b2a:	d114      	bne.n	10007b56 <__ledf2+0x62>
10007b2c:	4661      	mov	r1, ip
10007b2e:	430e      	orrs	r6, r1
10007b30:	4270      	negs	r0, r6
10007b32:	4146      	adcs	r6, r0
10007b34:	2d00      	cmp	r5, #0
10007b36:	d035      	beq.n	10007ba4 <__ledf2+0xb0>
10007b38:	2e00      	cmp	r6, #0
10007b3a:	d021      	beq.n	10007b80 <__ledf2+0x8c>
10007b3c:	4258      	negs	r0, r3
10007b3e:	4158      	adcs	r0, r3
10007b40:	2101      	movs	r1, #1
10007b42:	4243      	negs	r3, r0
10007b44:	430b      	orrs	r3, r1
10007b46:	1c18      	adds	r0, r3, #0
10007b48:	e00e      	b.n	10007b68 <__ledf2+0x74>
10007b4a:	4661      	mov	r1, ip
10007b4c:	2002      	movs	r0, #2
10007b4e:	4331      	orrs	r1, r6
10007b50:	d10a      	bne.n	10007b68 <__ledf2+0x74>
10007b52:	42a5      	cmp	r5, r4
10007b54:	d00e      	beq.n	10007b74 <__ledf2+0x80>
10007b56:	2d00      	cmp	r5, #0
10007b58:	d112      	bne.n	10007b80 <__ledf2+0x8c>
10007b5a:	433a      	orrs	r2, r7
10007b5c:	d110      	bne.n	10007b80 <__ledf2+0x8c>
10007b5e:	465b      	mov	r3, fp
10007b60:	4259      	negs	r1, r3
10007b62:	2301      	movs	r3, #1
10007b64:	4319      	orrs	r1, r3
10007b66:	1c08      	adds	r0, r1, #0
10007b68:	bc3c      	pop	{r2, r3, r4, r5}
10007b6a:	4690      	mov	r8, r2
10007b6c:	4699      	mov	r9, r3
10007b6e:	46a2      	mov	sl, r4
10007b70:	46ab      	mov	fp, r5
10007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007b74:	1c39      	adds	r1, r7, #0
10007b76:	2002      	movs	r0, #2
10007b78:	4311      	orrs	r1, r2
10007b7a:	d1f5      	bne.n	10007b68 <__ledf2+0x74>
10007b7c:	2c00      	cmp	r4, #0
10007b7e:	d0d5      	beq.n	10007b2c <__ledf2+0x38>
10007b80:	459b      	cmp	fp, r3
10007b82:	d1ec      	bne.n	10007b5e <__ledf2+0x6a>
10007b84:	42ac      	cmp	r4, r5
10007b86:	dcea      	bgt.n	10007b5e <__ledf2+0x6a>
10007b88:	db05      	blt.n	10007b96 <__ledf2+0xa2>
10007b8a:	45bc      	cmp	ip, r7
10007b8c:	d8e7      	bhi.n	10007b5e <__ledf2+0x6a>
10007b8e:	d00f      	beq.n	10007bb0 <__ledf2+0xbc>
10007b90:	2000      	movs	r0, #0
10007b92:	45bc      	cmp	ip, r7
10007b94:	d2e8      	bcs.n	10007b68 <__ledf2+0x74>
10007b96:	4658      	mov	r0, fp
10007b98:	4241      	negs	r1, r0
10007b9a:	4148      	adcs	r0, r1
10007b9c:	4241      	negs	r1, r0
10007b9e:	2001      	movs	r0, #1
10007ba0:	4308      	orrs	r0, r1
10007ba2:	e7e1      	b.n	10007b68 <__ledf2+0x74>
10007ba4:	433a      	orrs	r2, r7
10007ba6:	d1c7      	bne.n	10007b38 <__ledf2+0x44>
10007ba8:	2000      	movs	r0, #0
10007baa:	2e00      	cmp	r6, #0
10007bac:	d1dc      	bne.n	10007b68 <__ledf2+0x74>
10007bae:	e7d6      	b.n	10007b5e <__ledf2+0x6a>
10007bb0:	45c8      	cmp	r8, r9
10007bb2:	d8d4      	bhi.n	10007b5e <__ledf2+0x6a>
10007bb4:	2000      	movs	r0, #0
10007bb6:	45c8      	cmp	r8, r9
10007bb8:	d3ed      	bcc.n	10007b96 <__ledf2+0xa2>
10007bba:	e7d5      	b.n	10007b68 <__ledf2+0x74>
10007bbc:	000007ff 	.word	0x000007ff

10007bc0 <__aeabi_dmul>:
10007bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10007bc2:	465f      	mov	r7, fp
10007bc4:	4656      	mov	r6, sl
10007bc6:	464d      	mov	r5, r9
10007bc8:	4644      	mov	r4, r8
10007bca:	b4f0      	push	{r4, r5, r6, r7}
10007bcc:	1c05      	adds	r5, r0, #0
10007bce:	1c06      	adds	r6, r0, #0
10007bd0:	0308      	lsls	r0, r1, #12
10007bd2:	b087      	sub	sp, #28
10007bd4:	4699      	mov	r9, r3
10007bd6:	004f      	lsls	r7, r1, #1
10007bd8:	0b03      	lsrs	r3, r0, #12
10007bda:	0fcc      	lsrs	r4, r1, #31
10007bdc:	4692      	mov	sl, r2
10007bde:	469b      	mov	fp, r3
10007be0:	0d7f      	lsrs	r7, r7, #21
10007be2:	9401      	str	r4, [sp, #4]
10007be4:	d067      	beq.n	10007cb6 <__aeabi_dmul+0xf6>
10007be6:	4b6c      	ldr	r3, [pc, #432]	; (10007d98 <__aeabi_dmul+0x1d8>)
10007be8:	429f      	cmp	r7, r3
10007bea:	d036      	beq.n	10007c5a <__aeabi_dmul+0x9a>
10007bec:	2080      	movs	r0, #128	; 0x80
10007bee:	465b      	mov	r3, fp
10007bf0:	0340      	lsls	r0, r0, #13
10007bf2:	4318      	orrs	r0, r3
10007bf4:	00c0      	lsls	r0, r0, #3
10007bf6:	0f6b      	lsrs	r3, r5, #29
10007bf8:	4318      	orrs	r0, r3
10007bfa:	4b68      	ldr	r3, [pc, #416]	; (10007d9c <__aeabi_dmul+0x1dc>)
10007bfc:	4683      	mov	fp, r0
10007bfe:	469c      	mov	ip, r3
10007c00:	2300      	movs	r3, #0
10007c02:	4698      	mov	r8, r3
10007c04:	00ee      	lsls	r6, r5, #3
10007c06:	4467      	add	r7, ip
10007c08:	9300      	str	r3, [sp, #0]
10007c0a:	464b      	mov	r3, r9
10007c0c:	4649      	mov	r1, r9
10007c0e:	031d      	lsls	r5, r3, #12
10007c10:	0fc9      	lsrs	r1, r1, #31
10007c12:	005b      	lsls	r3, r3, #1
10007c14:	4652      	mov	r2, sl
10007c16:	0b2d      	lsrs	r5, r5, #12
10007c18:	0d5b      	lsrs	r3, r3, #21
10007c1a:	4689      	mov	r9, r1
10007c1c:	d100      	bne.n	10007c20 <__aeabi_dmul+0x60>
10007c1e:	e06e      	b.n	10007cfe <__aeabi_dmul+0x13e>
10007c20:	495d      	ldr	r1, [pc, #372]	; (10007d98 <__aeabi_dmul+0x1d8>)
10007c22:	428b      	cmp	r3, r1
10007c24:	d064      	beq.n	10007cf0 <__aeabi_dmul+0x130>
10007c26:	2080      	movs	r0, #128	; 0x80
10007c28:	495c      	ldr	r1, [pc, #368]	; (10007d9c <__aeabi_dmul+0x1dc>)
10007c2a:	0340      	lsls	r0, r0, #13
10007c2c:	468c      	mov	ip, r1
10007c2e:	2100      	movs	r1, #0
10007c30:	4305      	orrs	r5, r0
10007c32:	00ed      	lsls	r5, r5, #3
10007c34:	0f50      	lsrs	r0, r2, #29
10007c36:	4305      	orrs	r5, r0
10007c38:	00d2      	lsls	r2, r2, #3
10007c3a:	4463      	add	r3, ip
10007c3c:	4648      	mov	r0, r9
10007c3e:	18ff      	adds	r7, r7, r3
10007c40:	1c7b      	adds	r3, r7, #1
10007c42:	469a      	mov	sl, r3
10007c44:	9b00      	ldr	r3, [sp, #0]
10007c46:	4060      	eors	r0, r4
10007c48:	9002      	str	r0, [sp, #8]
10007c4a:	430b      	orrs	r3, r1
10007c4c:	2b0f      	cmp	r3, #15
10007c4e:	d900      	bls.n	10007c52 <__aeabi_dmul+0x92>
10007c50:	e0ac      	b.n	10007dac <__aeabi_dmul+0x1ec>
10007c52:	4853      	ldr	r0, [pc, #332]	; (10007da0 <__aeabi_dmul+0x1e0>)
10007c54:	009b      	lsls	r3, r3, #2
10007c56:	58c3      	ldr	r3, [r0, r3]
10007c58:	469f      	mov	pc, r3
10007c5a:	465b      	mov	r3, fp
10007c5c:	431d      	orrs	r5, r3
10007c5e:	d000      	beq.n	10007c62 <__aeabi_dmul+0xa2>
10007c60:	e082      	b.n	10007d68 <__aeabi_dmul+0x1a8>
10007c62:	2308      	movs	r3, #8
10007c64:	9300      	str	r3, [sp, #0]
10007c66:	2300      	movs	r3, #0
10007c68:	469b      	mov	fp, r3
10007c6a:	3302      	adds	r3, #2
10007c6c:	2600      	movs	r6, #0
10007c6e:	4698      	mov	r8, r3
10007c70:	e7cb      	b.n	10007c0a <__aeabi_dmul+0x4a>
10007c72:	9b02      	ldr	r3, [sp, #8]
10007c74:	9301      	str	r3, [sp, #4]
10007c76:	4643      	mov	r3, r8
10007c78:	2b02      	cmp	r3, #2
10007c7a:	d159      	bne.n	10007d30 <__aeabi_dmul+0x170>
10007c7c:	2401      	movs	r4, #1
10007c7e:	2500      	movs	r5, #0
10007c80:	2600      	movs	r6, #0
10007c82:	9b01      	ldr	r3, [sp, #4]
10007c84:	401c      	ands	r4, r3
10007c86:	4b44      	ldr	r3, [pc, #272]	; (10007d98 <__aeabi_dmul+0x1d8>)
10007c88:	2100      	movs	r1, #0
10007c8a:	032d      	lsls	r5, r5, #12
10007c8c:	0d0a      	lsrs	r2, r1, #20
10007c8e:	0512      	lsls	r2, r2, #20
10007c90:	0b2d      	lsrs	r5, r5, #12
10007c92:	4315      	orrs	r5, r2
10007c94:	4a43      	ldr	r2, [pc, #268]	; (10007da4 <__aeabi_dmul+0x1e4>)
10007c96:	051b      	lsls	r3, r3, #20
10007c98:	4015      	ands	r5, r2
10007c9a:	431d      	orrs	r5, r3
10007c9c:	006d      	lsls	r5, r5, #1
10007c9e:	07e4      	lsls	r4, r4, #31
10007ca0:	086d      	lsrs	r5, r5, #1
10007ca2:	4325      	orrs	r5, r4
10007ca4:	1c30      	adds	r0, r6, #0
10007ca6:	1c29      	adds	r1, r5, #0
10007ca8:	b007      	add	sp, #28
10007caa:	bc3c      	pop	{r2, r3, r4, r5}
10007cac:	4690      	mov	r8, r2
10007cae:	4699      	mov	r9, r3
10007cb0:	46a2      	mov	sl, r4
10007cb2:	46ab      	mov	fp, r5
10007cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007cb6:	432b      	orrs	r3, r5
10007cb8:	d04e      	beq.n	10007d58 <__aeabi_dmul+0x198>
10007cba:	465b      	mov	r3, fp
10007cbc:	2b00      	cmp	r3, #0
10007cbe:	d100      	bne.n	10007cc2 <__aeabi_dmul+0x102>
10007cc0:	e185      	b.n	10007fce <__aeabi_dmul+0x40e>
10007cc2:	4658      	mov	r0, fp
10007cc4:	f000 fee2 	bl	10008a8c <__clzsi2>
10007cc8:	1c02      	adds	r2, r0, #0
10007cca:	2328      	movs	r3, #40	; 0x28
10007ccc:	1c29      	adds	r1, r5, #0
10007cce:	1a9b      	subs	r3, r3, r2
10007cd0:	1c16      	adds	r6, r2, #0
10007cd2:	4658      	mov	r0, fp
10007cd4:	40d9      	lsrs	r1, r3
10007cd6:	3e08      	subs	r6, #8
10007cd8:	40b0      	lsls	r0, r6
10007cda:	1c0b      	adds	r3, r1, #0
10007cdc:	40b5      	lsls	r5, r6
10007cde:	4303      	orrs	r3, r0
10007ce0:	469b      	mov	fp, r3
10007ce2:	1c2e      	adds	r6, r5, #0
10007ce4:	2300      	movs	r3, #0
10007ce6:	4f30      	ldr	r7, [pc, #192]	; (10007da8 <__aeabi_dmul+0x1e8>)
10007ce8:	9300      	str	r3, [sp, #0]
10007cea:	1abf      	subs	r7, r7, r2
10007cec:	4698      	mov	r8, r3
10007cee:	e78c      	b.n	10007c0a <__aeabi_dmul+0x4a>
10007cf0:	4651      	mov	r1, sl
10007cf2:	4329      	orrs	r1, r5
10007cf4:	d12e      	bne.n	10007d54 <__aeabi_dmul+0x194>
10007cf6:	2500      	movs	r5, #0
10007cf8:	2200      	movs	r2, #0
10007cfa:	2102      	movs	r1, #2
10007cfc:	e79e      	b.n	10007c3c <__aeabi_dmul+0x7c>
10007cfe:	4651      	mov	r1, sl
10007d00:	4329      	orrs	r1, r5
10007d02:	d023      	beq.n	10007d4c <__aeabi_dmul+0x18c>
10007d04:	2d00      	cmp	r5, #0
10007d06:	d100      	bne.n	10007d0a <__aeabi_dmul+0x14a>
10007d08:	e154      	b.n	10007fb4 <__aeabi_dmul+0x3f4>
10007d0a:	1c28      	adds	r0, r5, #0
10007d0c:	f000 febe 	bl	10008a8c <__clzsi2>
10007d10:	1c03      	adds	r3, r0, #0
10007d12:	2128      	movs	r1, #40	; 0x28
10007d14:	4650      	mov	r0, sl
10007d16:	1ac9      	subs	r1, r1, r3
10007d18:	1c1a      	adds	r2, r3, #0
10007d1a:	40c8      	lsrs	r0, r1
10007d1c:	4651      	mov	r1, sl
10007d1e:	3a08      	subs	r2, #8
10007d20:	4091      	lsls	r1, r2
10007d22:	4095      	lsls	r5, r2
10007d24:	1c0a      	adds	r2, r1, #0
10007d26:	4305      	orrs	r5, r0
10007d28:	481f      	ldr	r0, [pc, #124]	; (10007da8 <__aeabi_dmul+0x1e8>)
10007d2a:	2100      	movs	r1, #0
10007d2c:	1ac3      	subs	r3, r0, r3
10007d2e:	e785      	b.n	10007c3c <__aeabi_dmul+0x7c>
10007d30:	2b03      	cmp	r3, #3
10007d32:	d100      	bne.n	10007d36 <__aeabi_dmul+0x176>
10007d34:	e1c2      	b.n	100080bc <__aeabi_dmul+0x4fc>
10007d36:	2b01      	cmp	r3, #1
10007d38:	d000      	beq.n	10007d3c <__aeabi_dmul+0x17c>
10007d3a:	e16d      	b.n	10008018 <__aeabi_dmul+0x458>
10007d3c:	4644      	mov	r4, r8
10007d3e:	9b01      	ldr	r3, [sp, #4]
10007d40:	2500      	movs	r5, #0
10007d42:	401c      	ands	r4, r3
10007d44:	b2e4      	uxtb	r4, r4
10007d46:	2300      	movs	r3, #0
10007d48:	2600      	movs	r6, #0
10007d4a:	e79d      	b.n	10007c88 <__aeabi_dmul+0xc8>
10007d4c:	2500      	movs	r5, #0
10007d4e:	2200      	movs	r2, #0
10007d50:	2101      	movs	r1, #1
10007d52:	e773      	b.n	10007c3c <__aeabi_dmul+0x7c>
10007d54:	2103      	movs	r1, #3
10007d56:	e771      	b.n	10007c3c <__aeabi_dmul+0x7c>
10007d58:	2304      	movs	r3, #4
10007d5a:	9300      	str	r3, [sp, #0]
10007d5c:	2300      	movs	r3, #0
10007d5e:	469b      	mov	fp, r3
10007d60:	3301      	adds	r3, #1
10007d62:	2600      	movs	r6, #0
10007d64:	4698      	mov	r8, r3
10007d66:	e750      	b.n	10007c0a <__aeabi_dmul+0x4a>
10007d68:	230c      	movs	r3, #12
10007d6a:	9300      	str	r3, [sp, #0]
10007d6c:	3b09      	subs	r3, #9
10007d6e:	4698      	mov	r8, r3
10007d70:	e74b      	b.n	10007c0a <__aeabi_dmul+0x4a>
10007d72:	2580      	movs	r5, #128	; 0x80
10007d74:	2400      	movs	r4, #0
10007d76:	032d      	lsls	r5, r5, #12
10007d78:	2600      	movs	r6, #0
10007d7a:	4b07      	ldr	r3, [pc, #28]	; (10007d98 <__aeabi_dmul+0x1d8>)
10007d7c:	e784      	b.n	10007c88 <__aeabi_dmul+0xc8>
10007d7e:	464b      	mov	r3, r9
10007d80:	46ab      	mov	fp, r5
10007d82:	1c16      	adds	r6, r2, #0
10007d84:	9301      	str	r3, [sp, #4]
10007d86:	4688      	mov	r8, r1
10007d88:	e775      	b.n	10007c76 <__aeabi_dmul+0xb6>
10007d8a:	9b02      	ldr	r3, [sp, #8]
10007d8c:	46ab      	mov	fp, r5
10007d8e:	1c16      	adds	r6, r2, #0
10007d90:	9301      	str	r3, [sp, #4]
10007d92:	4688      	mov	r8, r1
10007d94:	e76f      	b.n	10007c76 <__aeabi_dmul+0xb6>
10007d96:	46c0      	nop			; (mov r8, r8)
10007d98:	000007ff 	.word	0x000007ff
10007d9c:	fffffc01 	.word	0xfffffc01
10007da0:	1000ce40 	.word	0x1000ce40
10007da4:	800fffff 	.word	0x800fffff
10007da8:	fffffc0d 	.word	0xfffffc0d
10007dac:	0c33      	lsrs	r3, r6, #16
10007dae:	0436      	lsls	r6, r6, #16
10007db0:	0c36      	lsrs	r6, r6, #16
10007db2:	469c      	mov	ip, r3
10007db4:	1c33      	adds	r3, r6, #0
10007db6:	0c14      	lsrs	r4, r2, #16
10007db8:	0412      	lsls	r2, r2, #16
10007dba:	0c12      	lsrs	r2, r2, #16
10007dbc:	4353      	muls	r3, r2
10007dbe:	4698      	mov	r8, r3
10007dc0:	4663      	mov	r3, ip
10007dc2:	4353      	muls	r3, r2
10007dc4:	4699      	mov	r9, r3
10007dc6:	4663      	mov	r3, ip
10007dc8:	4363      	muls	r3, r4
10007dca:	9301      	str	r3, [sp, #4]
10007dcc:	1c33      	adds	r3, r6, #0
10007dce:	4641      	mov	r1, r8
10007dd0:	4363      	muls	r3, r4
10007dd2:	0c09      	lsrs	r1, r1, #16
10007dd4:	444b      	add	r3, r9
10007dd6:	185b      	adds	r3, r3, r1
10007dd8:	4599      	cmp	r9, r3
10007dda:	d905      	bls.n	10007de8 <__aeabi_dmul+0x228>
10007ddc:	2080      	movs	r0, #128	; 0x80
10007dde:	0240      	lsls	r0, r0, #9
10007de0:	4681      	mov	r9, r0
10007de2:	9901      	ldr	r1, [sp, #4]
10007de4:	4449      	add	r1, r9
10007de6:	9101      	str	r1, [sp, #4]
10007de8:	0c19      	lsrs	r1, r3, #16
10007dea:	9103      	str	r1, [sp, #12]
10007dec:	4641      	mov	r1, r8
10007dee:	0409      	lsls	r1, r1, #16
10007df0:	0c09      	lsrs	r1, r1, #16
10007df2:	041b      	lsls	r3, r3, #16
10007df4:	185b      	adds	r3, r3, r1
10007df6:	9304      	str	r3, [sp, #16]
10007df8:	0c2b      	lsrs	r3, r5, #16
10007dfa:	4698      	mov	r8, r3
10007dfc:	1c33      	adds	r3, r6, #0
10007dfe:	042d      	lsls	r5, r5, #16
10007e00:	0c29      	lsrs	r1, r5, #16
10007e02:	434b      	muls	r3, r1
10007e04:	4660      	mov	r0, ip
10007e06:	9300      	str	r3, [sp, #0]
10007e08:	4643      	mov	r3, r8
10007e0a:	4665      	mov	r5, ip
10007e0c:	4358      	muls	r0, r3
10007e0e:	435e      	muls	r6, r3
10007e10:	9b00      	ldr	r3, [sp, #0]
10007e12:	434d      	muls	r5, r1
10007e14:	0c1b      	lsrs	r3, r3, #16
10007e16:	4699      	mov	r9, r3
10007e18:	19ae      	adds	r6, r5, r6
10007e1a:	444e      	add	r6, r9
10007e1c:	4684      	mov	ip, r0
10007e1e:	42b5      	cmp	r5, r6
10007e20:	d903      	bls.n	10007e2a <__aeabi_dmul+0x26a>
10007e22:	2380      	movs	r3, #128	; 0x80
10007e24:	025b      	lsls	r3, r3, #9
10007e26:	4699      	mov	r9, r3
10007e28:	44cc      	add	ip, r9
10007e2a:	0c35      	lsrs	r5, r6, #16
10007e2c:	1c2b      	adds	r3, r5, #0
10007e2e:	9803      	ldr	r0, [sp, #12]
10007e30:	4463      	add	r3, ip
10007e32:	4684      	mov	ip, r0
10007e34:	9305      	str	r3, [sp, #20]
10007e36:	9b00      	ldr	r3, [sp, #0]
10007e38:	0436      	lsls	r6, r6, #16
10007e3a:	041b      	lsls	r3, r3, #16
10007e3c:	0c1b      	lsrs	r3, r3, #16
10007e3e:	18f3      	adds	r3, r6, r3
10007e40:	449c      	add	ip, r3
10007e42:	4660      	mov	r0, ip
10007e44:	9003      	str	r0, [sp, #12]
10007e46:	4658      	mov	r0, fp
10007e48:	0405      	lsls	r5, r0, #16
10007e4a:	0c06      	lsrs	r6, r0, #16
10007e4c:	0c28      	lsrs	r0, r5, #16
10007e4e:	4684      	mov	ip, r0
10007e50:	4350      	muls	r0, r2
10007e52:	1c35      	adds	r5, r6, #0
10007e54:	4681      	mov	r9, r0
10007e56:	4660      	mov	r0, ip
10007e58:	4365      	muls	r5, r4
10007e5a:	4344      	muls	r4, r0
10007e5c:	4648      	mov	r0, r9
10007e5e:	0c00      	lsrs	r0, r0, #16
10007e60:	4683      	mov	fp, r0
10007e62:	4372      	muls	r2, r6
10007e64:	1914      	adds	r4, r2, r4
10007e66:	445c      	add	r4, fp
10007e68:	42a2      	cmp	r2, r4
10007e6a:	d903      	bls.n	10007e74 <__aeabi_dmul+0x2b4>
10007e6c:	2280      	movs	r2, #128	; 0x80
10007e6e:	0252      	lsls	r2, r2, #9
10007e70:	4693      	mov	fp, r2
10007e72:	445d      	add	r5, fp
10007e74:	0c22      	lsrs	r2, r4, #16
10007e76:	18ad      	adds	r5, r5, r2
10007e78:	464a      	mov	r2, r9
10007e7a:	0412      	lsls	r2, r2, #16
10007e7c:	0c12      	lsrs	r2, r2, #16
10007e7e:	0424      	lsls	r4, r4, #16
10007e80:	4640      	mov	r0, r8
10007e82:	18a4      	adds	r4, r4, r2
10007e84:	4662      	mov	r2, ip
10007e86:	434a      	muls	r2, r1
10007e88:	4371      	muls	r1, r6
10007e8a:	4346      	muls	r6, r0
10007e8c:	4660      	mov	r0, ip
10007e8e:	9600      	str	r6, [sp, #0]
10007e90:	4646      	mov	r6, r8
10007e92:	4370      	muls	r0, r6
10007e94:	4680      	mov	r8, r0
10007e96:	0c10      	lsrs	r0, r2, #16
10007e98:	4684      	mov	ip, r0
10007e9a:	4488      	add	r8, r1
10007e9c:	44e0      	add	r8, ip
10007e9e:	4541      	cmp	r1, r8
10007ea0:	d905      	bls.n	10007eae <__aeabi_dmul+0x2ee>
10007ea2:	2180      	movs	r1, #128	; 0x80
10007ea4:	0249      	lsls	r1, r1, #9
10007ea6:	468c      	mov	ip, r1
10007ea8:	9900      	ldr	r1, [sp, #0]
10007eaa:	4461      	add	r1, ip
10007eac:	9100      	str	r1, [sp, #0]
10007eae:	9801      	ldr	r0, [sp, #4]
10007eb0:	9903      	ldr	r1, [sp, #12]
10007eb2:	4684      	mov	ip, r0
10007eb4:	4461      	add	r1, ip
10007eb6:	4299      	cmp	r1, r3
10007eb8:	419b      	sbcs	r3, r3
10007eba:	425b      	negs	r3, r3
10007ebc:	4699      	mov	r9, r3
10007ebe:	9805      	ldr	r0, [sp, #20]
10007ec0:	4643      	mov	r3, r8
10007ec2:	4684      	mov	ip, r0
10007ec4:	0412      	lsls	r2, r2, #16
10007ec6:	0c12      	lsrs	r2, r2, #16
10007ec8:	041b      	lsls	r3, r3, #16
10007eca:	189b      	adds	r3, r3, r2
10007ecc:	4463      	add	r3, ip
10007ece:	469c      	mov	ip, r3
10007ed0:	46ab      	mov	fp, r5
10007ed2:	4283      	cmp	r3, r0
10007ed4:	419b      	sbcs	r3, r3
10007ed6:	4640      	mov	r0, r8
10007ed8:	190a      	adds	r2, r1, r4
10007eda:	44cc      	add	ip, r9
10007edc:	42a2      	cmp	r2, r4
10007ede:	4189      	sbcs	r1, r1
10007ee0:	44e3      	add	fp, ip
10007ee2:	45cc      	cmp	ip, r9
10007ee4:	41b6      	sbcs	r6, r6
10007ee6:	465c      	mov	r4, fp
10007ee8:	0c00      	lsrs	r0, r0, #16
10007eea:	4680      	mov	r8, r0
10007eec:	4249      	negs	r1, r1
10007eee:	4276      	negs	r6, r6
10007ef0:	425b      	negs	r3, r3
10007ef2:	1864      	adds	r4, r4, r1
10007ef4:	4333      	orrs	r3, r6
10007ef6:	4498      	add	r8, r3
10007ef8:	428c      	cmp	r4, r1
10007efa:	4189      	sbcs	r1, r1
10007efc:	45ab      	cmp	fp, r5
10007efe:	419b      	sbcs	r3, r3
10007f00:	4249      	negs	r1, r1
10007f02:	425b      	negs	r3, r3
10007f04:	4319      	orrs	r1, r3
10007f06:	1c0d      	adds	r5, r1, #0
10007f08:	9b00      	ldr	r3, [sp, #0]
10007f0a:	4445      	add	r5, r8
10007f0c:	18ee      	adds	r6, r5, r3
10007f0e:	0276      	lsls	r6, r6, #9
10007f10:	0de5      	lsrs	r5, r4, #23
10007f12:	432e      	orrs	r6, r5
10007f14:	46b3      	mov	fp, r6
10007f16:	9b04      	ldr	r3, [sp, #16]
10007f18:	0256      	lsls	r6, r2, #9
10007f1a:	431e      	orrs	r6, r3
10007f1c:	1e73      	subs	r3, r6, #1
10007f1e:	419e      	sbcs	r6, r3
10007f20:	465b      	mov	r3, fp
10007f22:	0dd2      	lsrs	r2, r2, #23
10007f24:	4332      	orrs	r2, r6
10007f26:	0266      	lsls	r6, r4, #9
10007f28:	4316      	orrs	r6, r2
10007f2a:	01db      	lsls	r3, r3, #7
10007f2c:	d50a      	bpl.n	10007f44 <__aeabi_dmul+0x384>
10007f2e:	2301      	movs	r3, #1
10007f30:	4033      	ands	r3, r6
10007f32:	0876      	lsrs	r6, r6, #1
10007f34:	431e      	orrs	r6, r3
10007f36:	465b      	mov	r3, fp
10007f38:	07db      	lsls	r3, r3, #31
10007f3a:	431e      	orrs	r6, r3
10007f3c:	465b      	mov	r3, fp
10007f3e:	085b      	lsrs	r3, r3, #1
10007f40:	469b      	mov	fp, r3
10007f42:	4657      	mov	r7, sl
10007f44:	4b63      	ldr	r3, [pc, #396]	; (100080d4 <__aeabi_dmul+0x514>)
10007f46:	18fb      	adds	r3, r7, r3
10007f48:	2b00      	cmp	r3, #0
10007f4a:	dd5a      	ble.n	10008002 <__aeabi_dmul+0x442>
10007f4c:	0772      	lsls	r2, r6, #29
10007f4e:	d009      	beq.n	10007f64 <__aeabi_dmul+0x3a4>
10007f50:	220f      	movs	r2, #15
10007f52:	4032      	ands	r2, r6
10007f54:	2a04      	cmp	r2, #4
10007f56:	d005      	beq.n	10007f64 <__aeabi_dmul+0x3a4>
10007f58:	1d32      	adds	r2, r6, #4
10007f5a:	42b2      	cmp	r2, r6
10007f5c:	41b6      	sbcs	r6, r6
10007f5e:	4276      	negs	r6, r6
10007f60:	44b3      	add	fp, r6
10007f62:	1c16      	adds	r6, r2, #0
10007f64:	465a      	mov	r2, fp
10007f66:	01d2      	lsls	r2, r2, #7
10007f68:	d506      	bpl.n	10007f78 <__aeabi_dmul+0x3b8>
10007f6a:	465a      	mov	r2, fp
10007f6c:	4b5a      	ldr	r3, [pc, #360]	; (100080d8 <__aeabi_dmul+0x518>)
10007f6e:	401a      	ands	r2, r3
10007f70:	2380      	movs	r3, #128	; 0x80
10007f72:	4693      	mov	fp, r2
10007f74:	00db      	lsls	r3, r3, #3
10007f76:	18fb      	adds	r3, r7, r3
10007f78:	4a58      	ldr	r2, [pc, #352]	; (100080dc <__aeabi_dmul+0x51c>)
10007f7a:	4293      	cmp	r3, r2
10007f7c:	dd34      	ble.n	10007fe8 <__aeabi_dmul+0x428>
10007f7e:	2401      	movs	r4, #1
10007f80:	9b02      	ldr	r3, [sp, #8]
10007f82:	2500      	movs	r5, #0
10007f84:	401c      	ands	r4, r3
10007f86:	2600      	movs	r6, #0
10007f88:	4b55      	ldr	r3, [pc, #340]	; (100080e0 <__aeabi_dmul+0x520>)
10007f8a:	e67d      	b.n	10007c88 <__aeabi_dmul+0xc8>
10007f8c:	2080      	movs	r0, #128	; 0x80
10007f8e:	465b      	mov	r3, fp
10007f90:	0300      	lsls	r0, r0, #12
10007f92:	4203      	tst	r3, r0
10007f94:	d008      	beq.n	10007fa8 <__aeabi_dmul+0x3e8>
10007f96:	4205      	tst	r5, r0
10007f98:	d106      	bne.n	10007fa8 <__aeabi_dmul+0x3e8>
10007f9a:	4305      	orrs	r5, r0
10007f9c:	032d      	lsls	r5, r5, #12
10007f9e:	0b2d      	lsrs	r5, r5, #12
10007fa0:	464c      	mov	r4, r9
10007fa2:	1c16      	adds	r6, r2, #0
10007fa4:	4b4e      	ldr	r3, [pc, #312]	; (100080e0 <__aeabi_dmul+0x520>)
10007fa6:	e66f      	b.n	10007c88 <__aeabi_dmul+0xc8>
10007fa8:	465d      	mov	r5, fp
10007faa:	4305      	orrs	r5, r0
10007fac:	032d      	lsls	r5, r5, #12
10007fae:	0b2d      	lsrs	r5, r5, #12
10007fb0:	4b4b      	ldr	r3, [pc, #300]	; (100080e0 <__aeabi_dmul+0x520>)
10007fb2:	e669      	b.n	10007c88 <__aeabi_dmul+0xc8>
10007fb4:	4650      	mov	r0, sl
10007fb6:	f000 fd69 	bl	10008a8c <__clzsi2>
10007fba:	1c03      	adds	r3, r0, #0
10007fbc:	3320      	adds	r3, #32
10007fbe:	2b27      	cmp	r3, #39	; 0x27
10007fc0:	dc00      	bgt.n	10007fc4 <__aeabi_dmul+0x404>
10007fc2:	e6a6      	b.n	10007d12 <__aeabi_dmul+0x152>
10007fc4:	4655      	mov	r5, sl
10007fc6:	3808      	subs	r0, #8
10007fc8:	4085      	lsls	r5, r0
10007fca:	2200      	movs	r2, #0
10007fcc:	e6ac      	b.n	10007d28 <__aeabi_dmul+0x168>
10007fce:	1c28      	adds	r0, r5, #0
10007fd0:	f000 fd5c 	bl	10008a8c <__clzsi2>
10007fd4:	1c02      	adds	r2, r0, #0
10007fd6:	3220      	adds	r2, #32
10007fd8:	2a27      	cmp	r2, #39	; 0x27
10007fda:	dc00      	bgt.n	10007fde <__aeabi_dmul+0x41e>
10007fdc:	e675      	b.n	10007cca <__aeabi_dmul+0x10a>
10007fde:	3808      	subs	r0, #8
10007fe0:	4085      	lsls	r5, r0
10007fe2:	2600      	movs	r6, #0
10007fe4:	46ab      	mov	fp, r5
10007fe6:	e67d      	b.n	10007ce4 <__aeabi_dmul+0x124>
10007fe8:	465a      	mov	r2, fp
10007fea:	08f6      	lsrs	r6, r6, #3
10007fec:	0752      	lsls	r2, r2, #29
10007fee:	4316      	orrs	r6, r2
10007ff0:	465a      	mov	r2, fp
10007ff2:	2401      	movs	r4, #1
10007ff4:	0255      	lsls	r5, r2, #9
10007ff6:	9a02      	ldr	r2, [sp, #8]
10007ff8:	055b      	lsls	r3, r3, #21
10007ffa:	0b2d      	lsrs	r5, r5, #12
10007ffc:	0d5b      	lsrs	r3, r3, #21
10007ffe:	4014      	ands	r4, r2
10008000:	e642      	b.n	10007c88 <__aeabi_dmul+0xc8>
10008002:	4d38      	ldr	r5, [pc, #224]	; (100080e4 <__aeabi_dmul+0x524>)
10008004:	1bed      	subs	r5, r5, r7
10008006:	2d38      	cmp	r5, #56	; 0x38
10008008:	dd0a      	ble.n	10008020 <__aeabi_dmul+0x460>
1000800a:	2401      	movs	r4, #1
1000800c:	9b02      	ldr	r3, [sp, #8]
1000800e:	2500      	movs	r5, #0
10008010:	401c      	ands	r4, r3
10008012:	2600      	movs	r6, #0
10008014:	2300      	movs	r3, #0
10008016:	e637      	b.n	10007c88 <__aeabi_dmul+0xc8>
10008018:	9b01      	ldr	r3, [sp, #4]
1000801a:	4657      	mov	r7, sl
1000801c:	9302      	str	r3, [sp, #8]
1000801e:	e791      	b.n	10007f44 <__aeabi_dmul+0x384>
10008020:	2d1f      	cmp	r5, #31
10008022:	dc25      	bgt.n	10008070 <__aeabi_dmul+0x4b0>
10008024:	4b30      	ldr	r3, [pc, #192]	; (100080e8 <__aeabi_dmul+0x528>)
10008026:	1c32      	adds	r2, r6, #0
10008028:	469c      	mov	ip, r3
1000802a:	4467      	add	r7, ip
1000802c:	40be      	lsls	r6, r7
1000802e:	465b      	mov	r3, fp
10008030:	40bb      	lsls	r3, r7
10008032:	1c37      	adds	r7, r6, #0
10008034:	40ea      	lsrs	r2, r5
10008036:	1e7e      	subs	r6, r7, #1
10008038:	41b7      	sbcs	r7, r6
1000803a:	4313      	orrs	r3, r2
1000803c:	433b      	orrs	r3, r7
1000803e:	1c1e      	adds	r6, r3, #0
10008040:	465b      	mov	r3, fp
10008042:	40eb      	lsrs	r3, r5
10008044:	1c1d      	adds	r5, r3, #0
10008046:	0773      	lsls	r3, r6, #29
10008048:	d009      	beq.n	1000805e <__aeabi_dmul+0x49e>
1000804a:	230f      	movs	r3, #15
1000804c:	4033      	ands	r3, r6
1000804e:	2b04      	cmp	r3, #4
10008050:	d005      	beq.n	1000805e <__aeabi_dmul+0x49e>
10008052:	1d33      	adds	r3, r6, #4
10008054:	42b3      	cmp	r3, r6
10008056:	41b6      	sbcs	r6, r6
10008058:	4276      	negs	r6, r6
1000805a:	19ad      	adds	r5, r5, r6
1000805c:	1c1e      	adds	r6, r3, #0
1000805e:	022b      	lsls	r3, r5, #8
10008060:	d520      	bpl.n	100080a4 <__aeabi_dmul+0x4e4>
10008062:	2401      	movs	r4, #1
10008064:	9b02      	ldr	r3, [sp, #8]
10008066:	2500      	movs	r5, #0
10008068:	401c      	ands	r4, r3
1000806a:	2600      	movs	r6, #0
1000806c:	2301      	movs	r3, #1
1000806e:	e60b      	b.n	10007c88 <__aeabi_dmul+0xc8>
10008070:	465a      	mov	r2, fp
10008072:	4b1e      	ldr	r3, [pc, #120]	; (100080ec <__aeabi_dmul+0x52c>)
10008074:	1bdb      	subs	r3, r3, r7
10008076:	40da      	lsrs	r2, r3
10008078:	1c13      	adds	r3, r2, #0
1000807a:	2d20      	cmp	r5, #32
1000807c:	d01c      	beq.n	100080b8 <__aeabi_dmul+0x4f8>
1000807e:	4a1c      	ldr	r2, [pc, #112]	; (100080f0 <__aeabi_dmul+0x530>)
10008080:	4694      	mov	ip, r2
10008082:	465a      	mov	r2, fp
10008084:	4467      	add	r7, ip
10008086:	40ba      	lsls	r2, r7
10008088:	1c17      	adds	r7, r2, #0
1000808a:	433e      	orrs	r6, r7
1000808c:	1e72      	subs	r2, r6, #1
1000808e:	4196      	sbcs	r6, r2
10008090:	431e      	orrs	r6, r3
10008092:	2307      	movs	r3, #7
10008094:	2500      	movs	r5, #0
10008096:	4033      	ands	r3, r6
10008098:	d007      	beq.n	100080aa <__aeabi_dmul+0x4ea>
1000809a:	230f      	movs	r3, #15
1000809c:	2500      	movs	r5, #0
1000809e:	4033      	ands	r3, r6
100080a0:	2b04      	cmp	r3, #4
100080a2:	d1d6      	bne.n	10008052 <__aeabi_dmul+0x492>
100080a4:	076b      	lsls	r3, r5, #29
100080a6:	026d      	lsls	r5, r5, #9
100080a8:	0b2d      	lsrs	r5, r5, #12
100080aa:	2401      	movs	r4, #1
100080ac:	08f6      	lsrs	r6, r6, #3
100080ae:	431e      	orrs	r6, r3
100080b0:	9b02      	ldr	r3, [sp, #8]
100080b2:	401c      	ands	r4, r3
100080b4:	2300      	movs	r3, #0
100080b6:	e5e7      	b.n	10007c88 <__aeabi_dmul+0xc8>
100080b8:	2700      	movs	r7, #0
100080ba:	e7e6      	b.n	1000808a <__aeabi_dmul+0x4ca>
100080bc:	2580      	movs	r5, #128	; 0x80
100080be:	465b      	mov	r3, fp
100080c0:	2401      	movs	r4, #1
100080c2:	032d      	lsls	r5, r5, #12
100080c4:	431d      	orrs	r5, r3
100080c6:	9b01      	ldr	r3, [sp, #4]
100080c8:	032d      	lsls	r5, r5, #12
100080ca:	4023      	ands	r3, r4
100080cc:	1c1c      	adds	r4, r3, #0
100080ce:	0b2d      	lsrs	r5, r5, #12
100080d0:	4b03      	ldr	r3, [pc, #12]	; (100080e0 <__aeabi_dmul+0x520>)
100080d2:	e5d9      	b.n	10007c88 <__aeabi_dmul+0xc8>
100080d4:	000003ff 	.word	0x000003ff
100080d8:	feffffff 	.word	0xfeffffff
100080dc:	000007fe 	.word	0x000007fe
100080e0:	000007ff 	.word	0x000007ff
100080e4:	fffffc02 	.word	0xfffffc02
100080e8:	0000041e 	.word	0x0000041e
100080ec:	fffffbe2 	.word	0xfffffbe2
100080f0:	0000043e 	.word	0x0000043e

100080f4 <__aeabi_dsub>:
100080f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100080f6:	464d      	mov	r5, r9
100080f8:	4644      	mov	r4, r8
100080fa:	465f      	mov	r7, fp
100080fc:	4656      	mov	r6, sl
100080fe:	b4f0      	push	{r4, r5, r6, r7}
10008100:	1c0e      	adds	r6, r1, #0
10008102:	1c11      	adds	r1, r2, #0
10008104:	0332      	lsls	r2, r6, #12
10008106:	0a52      	lsrs	r2, r2, #9
10008108:	0f47      	lsrs	r7, r0, #29
1000810a:	4317      	orrs	r7, r2
1000810c:	00c5      	lsls	r5, r0, #3
1000810e:	031a      	lsls	r2, r3, #12
10008110:	0058      	lsls	r0, r3, #1
10008112:	0fdb      	lsrs	r3, r3, #31
10008114:	4699      	mov	r9, r3
10008116:	0a52      	lsrs	r2, r2, #9
10008118:	0f4b      	lsrs	r3, r1, #29
1000811a:	b083      	sub	sp, #12
1000811c:	431a      	orrs	r2, r3
1000811e:	00cb      	lsls	r3, r1, #3
10008120:	9301      	str	r3, [sp, #4]
10008122:	4bcf      	ldr	r3, [pc, #828]	; (10008460 <__aeabi_dsub+0x36c>)
10008124:	0074      	lsls	r4, r6, #1
10008126:	0ff6      	lsrs	r6, r6, #31
10008128:	0d64      	lsrs	r4, r4, #21
1000812a:	46b0      	mov	r8, r6
1000812c:	0d40      	lsrs	r0, r0, #21
1000812e:	4298      	cmp	r0, r3
10008130:	d100      	bne.n	10008134 <__aeabi_dsub+0x40>
10008132:	e0e8      	b.n	10008306 <__aeabi_dsub+0x212>
10008134:	2301      	movs	r3, #1
10008136:	4649      	mov	r1, r9
10008138:	4059      	eors	r1, r3
1000813a:	1c0b      	adds	r3, r1, #0
1000813c:	429e      	cmp	r6, r3
1000813e:	d100      	bne.n	10008142 <__aeabi_dsub+0x4e>
10008140:	e0b1      	b.n	100082a6 <__aeabi_dsub+0x1b2>
10008142:	1a26      	subs	r6, r4, r0
10008144:	2e00      	cmp	r6, #0
10008146:	dc00      	bgt.n	1000814a <__aeabi_dsub+0x56>
10008148:	e11c      	b.n	10008384 <__aeabi_dsub+0x290>
1000814a:	2800      	cmp	r0, #0
1000814c:	d142      	bne.n	100081d4 <__aeabi_dsub+0xe0>
1000814e:	1c13      	adds	r3, r2, #0
10008150:	9901      	ldr	r1, [sp, #4]
10008152:	430b      	orrs	r3, r1
10008154:	d000      	beq.n	10008158 <__aeabi_dsub+0x64>
10008156:	e0e6      	b.n	10008326 <__aeabi_dsub+0x232>
10008158:	076b      	lsls	r3, r5, #29
1000815a:	d100      	bne.n	1000815e <__aeabi_dsub+0x6a>
1000815c:	e08e      	b.n	1000827c <__aeabi_dsub+0x188>
1000815e:	230f      	movs	r3, #15
10008160:	402b      	ands	r3, r5
10008162:	2b04      	cmp	r3, #4
10008164:	d100      	bne.n	10008168 <__aeabi_dsub+0x74>
10008166:	e089      	b.n	1000827c <__aeabi_dsub+0x188>
10008168:	1d2a      	adds	r2, r5, #4
1000816a:	42aa      	cmp	r2, r5
1000816c:	41ad      	sbcs	r5, r5
1000816e:	2380      	movs	r3, #128	; 0x80
10008170:	2601      	movs	r6, #1
10008172:	4641      	mov	r1, r8
10008174:	426d      	negs	r5, r5
10008176:	197f      	adds	r7, r7, r5
10008178:	041b      	lsls	r3, r3, #16
1000817a:	403b      	ands	r3, r7
1000817c:	400e      	ands	r6, r1
1000817e:	1c15      	adds	r5, r2, #0
10008180:	2b00      	cmp	r3, #0
10008182:	d100      	bne.n	10008186 <__aeabi_dsub+0x92>
10008184:	e083      	b.n	1000828e <__aeabi_dsub+0x19a>
10008186:	4bb6      	ldr	r3, [pc, #728]	; (10008460 <__aeabi_dsub+0x36c>)
10008188:	3401      	adds	r4, #1
1000818a:	429c      	cmp	r4, r3
1000818c:	d100      	bne.n	10008190 <__aeabi_dsub+0x9c>
1000818e:	e116      	b.n	100083be <__aeabi_dsub+0x2ca>
10008190:	1c3a      	adds	r2, r7, #0
10008192:	4bb4      	ldr	r3, [pc, #720]	; (10008464 <__aeabi_dsub+0x370>)
10008194:	08ed      	lsrs	r5, r5, #3
10008196:	401a      	ands	r2, r3
10008198:	0750      	lsls	r0, r2, #29
1000819a:	0564      	lsls	r4, r4, #21
1000819c:	0252      	lsls	r2, r2, #9
1000819e:	4305      	orrs	r5, r0
100081a0:	0b12      	lsrs	r2, r2, #12
100081a2:	0d64      	lsrs	r4, r4, #21
100081a4:	2100      	movs	r1, #0
100081a6:	0312      	lsls	r2, r2, #12
100081a8:	0d0b      	lsrs	r3, r1, #20
100081aa:	051b      	lsls	r3, r3, #20
100081ac:	0564      	lsls	r4, r4, #21
100081ae:	0b12      	lsrs	r2, r2, #12
100081b0:	431a      	orrs	r2, r3
100081b2:	0863      	lsrs	r3, r4, #1
100081b4:	4cac      	ldr	r4, [pc, #688]	; (10008468 <__aeabi_dsub+0x374>)
100081b6:	07f6      	lsls	r6, r6, #31
100081b8:	4014      	ands	r4, r2
100081ba:	431c      	orrs	r4, r3
100081bc:	0064      	lsls	r4, r4, #1
100081be:	0864      	lsrs	r4, r4, #1
100081c0:	4334      	orrs	r4, r6
100081c2:	1c28      	adds	r0, r5, #0
100081c4:	1c21      	adds	r1, r4, #0
100081c6:	b003      	add	sp, #12
100081c8:	bc3c      	pop	{r2, r3, r4, r5}
100081ca:	4690      	mov	r8, r2
100081cc:	4699      	mov	r9, r3
100081ce:	46a2      	mov	sl, r4
100081d0:	46ab      	mov	fp, r5
100081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081d4:	4ba2      	ldr	r3, [pc, #648]	; (10008460 <__aeabi_dsub+0x36c>)
100081d6:	429c      	cmp	r4, r3
100081d8:	d0be      	beq.n	10008158 <__aeabi_dsub+0x64>
100081da:	2380      	movs	r3, #128	; 0x80
100081dc:	041b      	lsls	r3, r3, #16
100081de:	431a      	orrs	r2, r3
100081e0:	2e38      	cmp	r6, #56	; 0x38
100081e2:	dd00      	ble.n	100081e6 <__aeabi_dsub+0xf2>
100081e4:	e103      	b.n	100083ee <__aeabi_dsub+0x2fa>
100081e6:	2e1f      	cmp	r6, #31
100081e8:	dd00      	ble.n	100081ec <__aeabi_dsub+0xf8>
100081ea:	e13f      	b.n	1000846c <__aeabi_dsub+0x378>
100081ec:	2020      	movs	r0, #32
100081ee:	1b83      	subs	r3, r0, r6
100081f0:	4699      	mov	r9, r3
100081f2:	1c13      	adds	r3, r2, #0
100081f4:	4649      	mov	r1, r9
100081f6:	408b      	lsls	r3, r1
100081f8:	469c      	mov	ip, r3
100081fa:	9b01      	ldr	r3, [sp, #4]
100081fc:	4660      	mov	r0, ip
100081fe:	40f3      	lsrs	r3, r6
10008200:	4303      	orrs	r3, r0
10008202:	9801      	ldr	r0, [sp, #4]
10008204:	40f2      	lsrs	r2, r6
10008206:	4088      	lsls	r0, r1
10008208:	1c01      	adds	r1, r0, #0
1000820a:	1e48      	subs	r0, r1, #1
1000820c:	4181      	sbcs	r1, r0
1000820e:	430b      	orrs	r3, r1
10008210:	1aeb      	subs	r3, r5, r3
10008212:	429d      	cmp	r5, r3
10008214:	4180      	sbcs	r0, r0
10008216:	1c1d      	adds	r5, r3, #0
10008218:	1aba      	subs	r2, r7, r2
1000821a:	4240      	negs	r0, r0
1000821c:	1a17      	subs	r7, r2, r0
1000821e:	023b      	lsls	r3, r7, #8
10008220:	d400      	bmi.n	10008224 <__aeabi_dsub+0x130>
10008222:	e0a8      	b.n	10008376 <__aeabi_dsub+0x282>
10008224:	027a      	lsls	r2, r7, #9
10008226:	0a56      	lsrs	r6, r2, #9
10008228:	2e00      	cmp	r6, #0
1000822a:	d100      	bne.n	1000822e <__aeabi_dsub+0x13a>
1000822c:	e0ca      	b.n	100083c4 <__aeabi_dsub+0x2d0>
1000822e:	1c30      	adds	r0, r6, #0
10008230:	f000 fc2c 	bl	10008a8c <__clzsi2>
10008234:	1c03      	adds	r3, r0, #0
10008236:	3b08      	subs	r3, #8
10008238:	2b1f      	cmp	r3, #31
1000823a:	dd00      	ble.n	1000823e <__aeabi_dsub+0x14a>
1000823c:	e0cb      	b.n	100083d6 <__aeabi_dsub+0x2e2>
1000823e:	2228      	movs	r2, #40	; 0x28
10008240:	1c29      	adds	r1, r5, #0
10008242:	1a12      	subs	r2, r2, r0
10008244:	40d1      	lsrs	r1, r2
10008246:	409e      	lsls	r6, r3
10008248:	1c0a      	adds	r2, r1, #0
1000824a:	409d      	lsls	r5, r3
1000824c:	4332      	orrs	r2, r6
1000824e:	429c      	cmp	r4, r3
10008250:	dd00      	ble.n	10008254 <__aeabi_dsub+0x160>
10008252:	e0c8      	b.n	100083e6 <__aeabi_dsub+0x2f2>
10008254:	1b1c      	subs	r4, r3, r4
10008256:	1c67      	adds	r7, r4, #1
10008258:	2f1f      	cmp	r7, #31
1000825a:	dd00      	ble.n	1000825e <__aeabi_dsub+0x16a>
1000825c:	e0ed      	b.n	1000843a <__aeabi_dsub+0x346>
1000825e:	231f      	movs	r3, #31
10008260:	1c29      	adds	r1, r5, #0
10008262:	1b1c      	subs	r4, r3, r4
10008264:	1c13      	adds	r3, r2, #0
10008266:	40a5      	lsls	r5, r4
10008268:	40a3      	lsls	r3, r4
1000826a:	40f9      	lsrs	r1, r7
1000826c:	1e6c      	subs	r4, r5, #1
1000826e:	41a5      	sbcs	r5, r4
10008270:	40fa      	lsrs	r2, r7
10008272:	4319      	orrs	r1, r3
10008274:	430d      	orrs	r5, r1
10008276:	1c17      	adds	r7, r2, #0
10008278:	2400      	movs	r4, #0
1000827a:	e76d      	b.n	10008158 <__aeabi_dsub+0x64>
1000827c:	2380      	movs	r3, #128	; 0x80
1000827e:	2601      	movs	r6, #1
10008280:	4642      	mov	r2, r8
10008282:	041b      	lsls	r3, r3, #16
10008284:	403b      	ands	r3, r7
10008286:	4016      	ands	r6, r2
10008288:	2b00      	cmp	r3, #0
1000828a:	d000      	beq.n	1000828e <__aeabi_dsub+0x19a>
1000828c:	e77b      	b.n	10008186 <__aeabi_dsub+0x92>
1000828e:	4b74      	ldr	r3, [pc, #464]	; (10008460 <__aeabi_dsub+0x36c>)
10008290:	08ed      	lsrs	r5, r5, #3
10008292:	0778      	lsls	r0, r7, #29
10008294:	4305      	orrs	r5, r0
10008296:	08fa      	lsrs	r2, r7, #3
10008298:	429c      	cmp	r4, r3
1000829a:	d03b      	beq.n	10008314 <__aeabi_dsub+0x220>
1000829c:	0312      	lsls	r2, r2, #12
1000829e:	0564      	lsls	r4, r4, #21
100082a0:	0b12      	lsrs	r2, r2, #12
100082a2:	0d64      	lsrs	r4, r4, #21
100082a4:	e77e      	b.n	100081a4 <__aeabi_dsub+0xb0>
100082a6:	1a23      	subs	r3, r4, r0
100082a8:	469a      	mov	sl, r3
100082aa:	2b00      	cmp	r3, #0
100082ac:	dc00      	bgt.n	100082b0 <__aeabi_dsub+0x1bc>
100082ae:	e0a5      	b.n	100083fc <__aeabi_dsub+0x308>
100082b0:	2800      	cmp	r0, #0
100082b2:	d044      	beq.n	1000833e <__aeabi_dsub+0x24a>
100082b4:	486a      	ldr	r0, [pc, #424]	; (10008460 <__aeabi_dsub+0x36c>)
100082b6:	4284      	cmp	r4, r0
100082b8:	d100      	bne.n	100082bc <__aeabi_dsub+0x1c8>
100082ba:	e74d      	b.n	10008158 <__aeabi_dsub+0x64>
100082bc:	2080      	movs	r0, #128	; 0x80
100082be:	0400      	lsls	r0, r0, #16
100082c0:	4302      	orrs	r2, r0
100082c2:	4653      	mov	r3, sl
100082c4:	2b38      	cmp	r3, #56	; 0x38
100082c6:	dc00      	bgt.n	100082ca <__aeabi_dsub+0x1d6>
100082c8:	e11c      	b.n	10008504 <__aeabi_dsub+0x410>
100082ca:	9b01      	ldr	r3, [sp, #4]
100082cc:	431a      	orrs	r2, r3
100082ce:	1e51      	subs	r1, r2, #1
100082d0:	418a      	sbcs	r2, r1
100082d2:	b2d1      	uxtb	r1, r2
100082d4:	2200      	movs	r2, #0
100082d6:	1949      	adds	r1, r1, r5
100082d8:	42a9      	cmp	r1, r5
100082da:	4180      	sbcs	r0, r0
100082dc:	1c0d      	adds	r5, r1, #0
100082de:	19d2      	adds	r2, r2, r7
100082e0:	4240      	negs	r0, r0
100082e2:	1817      	adds	r7, r2, r0
100082e4:	023b      	lsls	r3, r7, #8
100082e6:	d546      	bpl.n	10008376 <__aeabi_dsub+0x282>
100082e8:	4b5d      	ldr	r3, [pc, #372]	; (10008460 <__aeabi_dsub+0x36c>)
100082ea:	3401      	adds	r4, #1
100082ec:	429c      	cmp	r4, r3
100082ee:	d100      	bne.n	100082f2 <__aeabi_dsub+0x1fe>
100082f0:	e169      	b.n	100085c6 <__aeabi_dsub+0x4d2>
100082f2:	2001      	movs	r0, #1
100082f4:	4a5b      	ldr	r2, [pc, #364]	; (10008464 <__aeabi_dsub+0x370>)
100082f6:	086b      	lsrs	r3, r5, #1
100082f8:	403a      	ands	r2, r7
100082fa:	4028      	ands	r0, r5
100082fc:	4318      	orrs	r0, r3
100082fe:	07d5      	lsls	r5, r2, #31
10008300:	4305      	orrs	r5, r0
10008302:	0857      	lsrs	r7, r2, #1
10008304:	e728      	b.n	10008158 <__aeabi_dsub+0x64>
10008306:	1c13      	adds	r3, r2, #0
10008308:	9901      	ldr	r1, [sp, #4]
1000830a:	430b      	orrs	r3, r1
1000830c:	d100      	bne.n	10008310 <__aeabi_dsub+0x21c>
1000830e:	e711      	b.n	10008134 <__aeabi_dsub+0x40>
10008310:	464b      	mov	r3, r9
10008312:	e713      	b.n	1000813c <__aeabi_dsub+0x48>
10008314:	1c2b      	adds	r3, r5, #0
10008316:	4313      	orrs	r3, r2
10008318:	d051      	beq.n	100083be <__aeabi_dsub+0x2ca>
1000831a:	2380      	movs	r3, #128	; 0x80
1000831c:	031b      	lsls	r3, r3, #12
1000831e:	431a      	orrs	r2, r3
10008320:	0312      	lsls	r2, r2, #12
10008322:	0b12      	lsrs	r2, r2, #12
10008324:	e73e      	b.n	100081a4 <__aeabi_dsub+0xb0>
10008326:	3e01      	subs	r6, #1
10008328:	2e00      	cmp	r6, #0
1000832a:	d000      	beq.n	1000832e <__aeabi_dsub+0x23a>
1000832c:	e080      	b.n	10008430 <__aeabi_dsub+0x33c>
1000832e:	1a69      	subs	r1, r5, r1
10008330:	428d      	cmp	r5, r1
10008332:	419b      	sbcs	r3, r3
10008334:	1aba      	subs	r2, r7, r2
10008336:	425b      	negs	r3, r3
10008338:	1ad7      	subs	r7, r2, r3
1000833a:	1c0d      	adds	r5, r1, #0
1000833c:	e76f      	b.n	1000821e <__aeabi_dsub+0x12a>
1000833e:	1c10      	adds	r0, r2, #0
10008340:	9b01      	ldr	r3, [sp, #4]
10008342:	4318      	orrs	r0, r3
10008344:	d100      	bne.n	10008348 <__aeabi_dsub+0x254>
10008346:	e707      	b.n	10008158 <__aeabi_dsub+0x64>
10008348:	2301      	movs	r3, #1
1000834a:	425b      	negs	r3, r3
1000834c:	469c      	mov	ip, r3
1000834e:	44e2      	add	sl, ip
10008350:	4653      	mov	r3, sl
10008352:	2b00      	cmp	r3, #0
10008354:	d000      	beq.n	10008358 <__aeabi_dsub+0x264>
10008356:	e102      	b.n	1000855e <__aeabi_dsub+0x46a>
10008358:	9b01      	ldr	r3, [sp, #4]
1000835a:	19d2      	adds	r2, r2, r7
1000835c:	1959      	adds	r1, r3, r5
1000835e:	42a9      	cmp	r1, r5
10008360:	419b      	sbcs	r3, r3
10008362:	425b      	negs	r3, r3
10008364:	18d7      	adds	r7, r2, r3
10008366:	1c0d      	adds	r5, r1, #0
10008368:	e7bc      	b.n	100082e4 <__aeabi_dsub+0x1f0>
1000836a:	4663      	mov	r3, ip
1000836c:	4303      	orrs	r3, r0
1000836e:	d100      	bne.n	10008372 <__aeabi_dsub+0x27e>
10008370:	e128      	b.n	100085c4 <__aeabi_dsub+0x4d0>
10008372:	1c07      	adds	r7, r0, #0
10008374:	4665      	mov	r5, ip
10008376:	076b      	lsls	r3, r5, #29
10008378:	d000      	beq.n	1000837c <__aeabi_dsub+0x288>
1000837a:	e6f0      	b.n	1000815e <__aeabi_dsub+0x6a>
1000837c:	2601      	movs	r6, #1
1000837e:	4643      	mov	r3, r8
10008380:	401e      	ands	r6, r3
10008382:	e784      	b.n	1000828e <__aeabi_dsub+0x19a>
10008384:	2e00      	cmp	r6, #0
10008386:	d000      	beq.n	1000838a <__aeabi_dsub+0x296>
10008388:	e081      	b.n	1000848e <__aeabi_dsub+0x39a>
1000838a:	1c60      	adds	r0, r4, #1
1000838c:	0540      	lsls	r0, r0, #21
1000838e:	0d40      	lsrs	r0, r0, #21
10008390:	2801      	cmp	r0, #1
10008392:	dc00      	bgt.n	10008396 <__aeabi_dsub+0x2a2>
10008394:	e107      	b.n	100085a6 <__aeabi_dsub+0x4b2>
10008396:	9901      	ldr	r1, [sp, #4]
10008398:	1a68      	subs	r0, r5, r1
1000839a:	4684      	mov	ip, r0
1000839c:	4565      	cmp	r5, ip
1000839e:	41b6      	sbcs	r6, r6
100083a0:	1ab8      	subs	r0, r7, r2
100083a2:	4276      	negs	r6, r6
100083a4:	1b86      	subs	r6, r0, r6
100083a6:	0230      	lsls	r0, r6, #8
100083a8:	d400      	bmi.n	100083ac <__aeabi_dsub+0x2b8>
100083aa:	e0a1      	b.n	100084f0 <__aeabi_dsub+0x3fc>
100083ac:	468c      	mov	ip, r1
100083ae:	1b4d      	subs	r5, r1, r5
100083b0:	45ac      	cmp	ip, r5
100083b2:	4189      	sbcs	r1, r1
100083b4:	1bd2      	subs	r2, r2, r7
100083b6:	4249      	negs	r1, r1
100083b8:	1a56      	subs	r6, r2, r1
100083ba:	4698      	mov	r8, r3
100083bc:	e734      	b.n	10008228 <__aeabi_dsub+0x134>
100083be:	2200      	movs	r2, #0
100083c0:	2500      	movs	r5, #0
100083c2:	e6ef      	b.n	100081a4 <__aeabi_dsub+0xb0>
100083c4:	1c28      	adds	r0, r5, #0
100083c6:	f000 fb61 	bl	10008a8c <__clzsi2>
100083ca:	3020      	adds	r0, #32
100083cc:	1c03      	adds	r3, r0, #0
100083ce:	3b08      	subs	r3, #8
100083d0:	2b1f      	cmp	r3, #31
100083d2:	dc00      	bgt.n	100083d6 <__aeabi_dsub+0x2e2>
100083d4:	e733      	b.n	1000823e <__aeabi_dsub+0x14a>
100083d6:	1c02      	adds	r2, r0, #0
100083d8:	3a28      	subs	r2, #40	; 0x28
100083da:	4095      	lsls	r5, r2
100083dc:	1c2a      	adds	r2, r5, #0
100083de:	2500      	movs	r5, #0
100083e0:	429c      	cmp	r4, r3
100083e2:	dc00      	bgt.n	100083e6 <__aeabi_dsub+0x2f2>
100083e4:	e736      	b.n	10008254 <__aeabi_dsub+0x160>
100083e6:	4f1f      	ldr	r7, [pc, #124]	; (10008464 <__aeabi_dsub+0x370>)
100083e8:	1ae4      	subs	r4, r4, r3
100083ea:	4017      	ands	r7, r2
100083ec:	e6b4      	b.n	10008158 <__aeabi_dsub+0x64>
100083ee:	9b01      	ldr	r3, [sp, #4]
100083f0:	431a      	orrs	r2, r3
100083f2:	1e51      	subs	r1, r2, #1
100083f4:	418a      	sbcs	r2, r1
100083f6:	b2d3      	uxtb	r3, r2
100083f8:	2200      	movs	r2, #0
100083fa:	e709      	b.n	10008210 <__aeabi_dsub+0x11c>
100083fc:	2b00      	cmp	r3, #0
100083fe:	d000      	beq.n	10008402 <__aeabi_dsub+0x30e>
10008400:	e101      	b.n	10008606 <__aeabi_dsub+0x512>
10008402:	1c60      	adds	r0, r4, #1
10008404:	0543      	lsls	r3, r0, #21
10008406:	0d5b      	lsrs	r3, r3, #21
10008408:	2b01      	cmp	r3, #1
1000840a:	dc00      	bgt.n	1000840e <__aeabi_dsub+0x31a>
1000840c:	e0b0      	b.n	10008570 <__aeabi_dsub+0x47c>
1000840e:	4b14      	ldr	r3, [pc, #80]	; (10008460 <__aeabi_dsub+0x36c>)
10008410:	4298      	cmp	r0, r3
10008412:	d100      	bne.n	10008416 <__aeabi_dsub+0x322>
10008414:	e11e      	b.n	10008654 <__aeabi_dsub+0x560>
10008416:	9b01      	ldr	r3, [sp, #4]
10008418:	19d2      	adds	r2, r2, r7
1000841a:	1959      	adds	r1, r3, r5
1000841c:	42a9      	cmp	r1, r5
1000841e:	419b      	sbcs	r3, r3
10008420:	425b      	negs	r3, r3
10008422:	18d2      	adds	r2, r2, r3
10008424:	0849      	lsrs	r1, r1, #1
10008426:	07d5      	lsls	r5, r2, #31
10008428:	430d      	orrs	r5, r1
1000842a:	0857      	lsrs	r7, r2, #1
1000842c:	1c04      	adds	r4, r0, #0
1000842e:	e693      	b.n	10008158 <__aeabi_dsub+0x64>
10008430:	4b0b      	ldr	r3, [pc, #44]	; (10008460 <__aeabi_dsub+0x36c>)
10008432:	429c      	cmp	r4, r3
10008434:	d000      	beq.n	10008438 <__aeabi_dsub+0x344>
10008436:	e6d3      	b.n	100081e0 <__aeabi_dsub+0xec>
10008438:	e68e      	b.n	10008158 <__aeabi_dsub+0x64>
1000843a:	1c21      	adds	r1, r4, #0
1000843c:	1c13      	adds	r3, r2, #0
1000843e:	391f      	subs	r1, #31
10008440:	40cb      	lsrs	r3, r1
10008442:	1c19      	adds	r1, r3, #0
10008444:	2f20      	cmp	r7, #32
10008446:	d100      	bne.n	1000844a <__aeabi_dsub+0x356>
10008448:	e08e      	b.n	10008568 <__aeabi_dsub+0x474>
1000844a:	233f      	movs	r3, #63	; 0x3f
1000844c:	1b1c      	subs	r4, r3, r4
1000844e:	40a2      	lsls	r2, r4
10008450:	4315      	orrs	r5, r2
10008452:	1e6a      	subs	r2, r5, #1
10008454:	4195      	sbcs	r5, r2
10008456:	2700      	movs	r7, #0
10008458:	430d      	orrs	r5, r1
1000845a:	2400      	movs	r4, #0
1000845c:	e78b      	b.n	10008376 <__aeabi_dsub+0x282>
1000845e:	46c0      	nop			; (mov r8, r8)
10008460:	000007ff 	.word	0x000007ff
10008464:	ff7fffff 	.word	0xff7fffff
10008468:	800fffff 	.word	0x800fffff
1000846c:	1c33      	adds	r3, r6, #0
1000846e:	1c10      	adds	r0, r2, #0
10008470:	3b20      	subs	r3, #32
10008472:	40d8      	lsrs	r0, r3
10008474:	2e20      	cmp	r6, #32
10008476:	d079      	beq.n	1000856c <__aeabi_dsub+0x478>
10008478:	2340      	movs	r3, #64	; 0x40
1000847a:	1b9b      	subs	r3, r3, r6
1000847c:	409a      	lsls	r2, r3
1000847e:	1c13      	adds	r3, r2, #0
10008480:	9a01      	ldr	r2, [sp, #4]
10008482:	4313      	orrs	r3, r2
10008484:	1e59      	subs	r1, r3, #1
10008486:	418b      	sbcs	r3, r1
10008488:	2200      	movs	r2, #0
1000848a:	4303      	orrs	r3, r0
1000848c:	e6c0      	b.n	10008210 <__aeabi_dsub+0x11c>
1000848e:	2c00      	cmp	r4, #0
10008490:	d053      	beq.n	1000853a <__aeabi_dsub+0x446>
10008492:	4cc7      	ldr	r4, [pc, #796]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008494:	42a0      	cmp	r0, r4
10008496:	d100      	bne.n	1000849a <__aeabi_dsub+0x3a6>
10008498:	e0b0      	b.n	100085fc <__aeabi_dsub+0x508>
1000849a:	2480      	movs	r4, #128	; 0x80
1000849c:	4271      	negs	r1, r6
1000849e:	4689      	mov	r9, r1
100084a0:	0424      	lsls	r4, r4, #16
100084a2:	4327      	orrs	r7, r4
100084a4:	4649      	mov	r1, r9
100084a6:	2938      	cmp	r1, #56	; 0x38
100084a8:	dd00      	ble.n	100084ac <__aeabi_dsub+0x3b8>
100084aa:	e0cd      	b.n	10008648 <__aeabi_dsub+0x554>
100084ac:	291f      	cmp	r1, #31
100084ae:	dd00      	ble.n	100084b2 <__aeabi_dsub+0x3be>
100084b0:	e159      	b.n	10008766 <__aeabi_dsub+0x672>
100084b2:	2420      	movs	r4, #32
100084b4:	1c3e      	adds	r6, r7, #0
100084b6:	1a61      	subs	r1, r4, r1
100084b8:	408e      	lsls	r6, r1
100084ba:	468a      	mov	sl, r1
100084bc:	46b0      	mov	r8, r6
100084be:	4649      	mov	r1, r9
100084c0:	1c2e      	adds	r6, r5, #0
100084c2:	40ce      	lsrs	r6, r1
100084c4:	4651      	mov	r1, sl
100084c6:	46b4      	mov	ip, r6
100084c8:	408d      	lsls	r5, r1
100084ca:	4664      	mov	r4, ip
100084cc:	4646      	mov	r6, r8
100084ce:	4649      	mov	r1, r9
100084d0:	4326      	orrs	r6, r4
100084d2:	1e6c      	subs	r4, r5, #1
100084d4:	41a5      	sbcs	r5, r4
100084d6:	40cf      	lsrs	r7, r1
100084d8:	4335      	orrs	r5, r6
100084da:	9901      	ldr	r1, [sp, #4]
100084dc:	1bd7      	subs	r7, r2, r7
100084de:	468c      	mov	ip, r1
100084e0:	1b4d      	subs	r5, r1, r5
100084e2:	45ac      	cmp	ip, r5
100084e4:	4192      	sbcs	r2, r2
100084e6:	4252      	negs	r2, r2
100084e8:	1abf      	subs	r7, r7, r2
100084ea:	1c04      	adds	r4, r0, #0
100084ec:	4698      	mov	r8, r3
100084ee:	e696      	b.n	1000821e <__aeabi_dsub+0x12a>
100084f0:	4663      	mov	r3, ip
100084f2:	4665      	mov	r5, ip
100084f4:	4333      	orrs	r3, r6
100084f6:	d000      	beq.n	100084fa <__aeabi_dsub+0x406>
100084f8:	e696      	b.n	10008228 <__aeabi_dsub+0x134>
100084fa:	2600      	movs	r6, #0
100084fc:	2700      	movs	r7, #0
100084fe:	2400      	movs	r4, #0
10008500:	2500      	movs	r5, #0
10008502:	e6c4      	b.n	1000828e <__aeabi_dsub+0x19a>
10008504:	2b1f      	cmp	r3, #31
10008506:	dc61      	bgt.n	100085cc <__aeabi_dsub+0x4d8>
10008508:	2020      	movs	r0, #32
1000850a:	1ac3      	subs	r3, r0, r3
1000850c:	469b      	mov	fp, r3
1000850e:	1c13      	adds	r3, r2, #0
10008510:	4659      	mov	r1, fp
10008512:	408b      	lsls	r3, r1
10008514:	4651      	mov	r1, sl
10008516:	4699      	mov	r9, r3
10008518:	9b01      	ldr	r3, [sp, #4]
1000851a:	40cb      	lsrs	r3, r1
1000851c:	469c      	mov	ip, r3
1000851e:	464b      	mov	r3, r9
10008520:	4660      	mov	r0, ip
10008522:	4303      	orrs	r3, r0
10008524:	469c      	mov	ip, r3
10008526:	465b      	mov	r3, fp
10008528:	9901      	ldr	r1, [sp, #4]
1000852a:	4099      	lsls	r1, r3
1000852c:	4663      	mov	r3, ip
1000852e:	1e48      	subs	r0, r1, #1
10008530:	4181      	sbcs	r1, r0
10008532:	4319      	orrs	r1, r3
10008534:	4653      	mov	r3, sl
10008536:	40da      	lsrs	r2, r3
10008538:	e6cd      	b.n	100082d6 <__aeabi_dsub+0x1e2>
1000853a:	1c3c      	adds	r4, r7, #0
1000853c:	432c      	orrs	r4, r5
1000853e:	d05d      	beq.n	100085fc <__aeabi_dsub+0x508>
10008540:	43f1      	mvns	r1, r6
10008542:	4689      	mov	r9, r1
10008544:	2900      	cmp	r1, #0
10008546:	d155      	bne.n	100085f4 <__aeabi_dsub+0x500>
10008548:	9901      	ldr	r1, [sp, #4]
1000854a:	1bd2      	subs	r2, r2, r7
1000854c:	468c      	mov	ip, r1
1000854e:	1b4d      	subs	r5, r1, r5
10008550:	45ac      	cmp	ip, r5
10008552:	4189      	sbcs	r1, r1
10008554:	4249      	negs	r1, r1
10008556:	1a57      	subs	r7, r2, r1
10008558:	1c04      	adds	r4, r0, #0
1000855a:	4698      	mov	r8, r3
1000855c:	e65f      	b.n	1000821e <__aeabi_dsub+0x12a>
1000855e:	4894      	ldr	r0, [pc, #592]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008560:	4284      	cmp	r4, r0
10008562:	d000      	beq.n	10008566 <__aeabi_dsub+0x472>
10008564:	e6ad      	b.n	100082c2 <__aeabi_dsub+0x1ce>
10008566:	e5f7      	b.n	10008158 <__aeabi_dsub+0x64>
10008568:	2200      	movs	r2, #0
1000856a:	e771      	b.n	10008450 <__aeabi_dsub+0x35c>
1000856c:	2300      	movs	r3, #0
1000856e:	e787      	b.n	10008480 <__aeabi_dsub+0x38c>
10008570:	1c3b      	adds	r3, r7, #0
10008572:	432b      	orrs	r3, r5
10008574:	2c00      	cmp	r4, #0
10008576:	d000      	beq.n	1000857a <__aeabi_dsub+0x486>
10008578:	e0da      	b.n	10008730 <__aeabi_dsub+0x63c>
1000857a:	2b00      	cmp	r3, #0
1000857c:	d100      	bne.n	10008580 <__aeabi_dsub+0x48c>
1000857e:	e113      	b.n	100087a8 <__aeabi_dsub+0x6b4>
10008580:	1c13      	adds	r3, r2, #0
10008582:	9901      	ldr	r1, [sp, #4]
10008584:	430b      	orrs	r3, r1
10008586:	d100      	bne.n	1000858a <__aeabi_dsub+0x496>
10008588:	e5e6      	b.n	10008158 <__aeabi_dsub+0x64>
1000858a:	1949      	adds	r1, r1, r5
1000858c:	42a9      	cmp	r1, r5
1000858e:	419b      	sbcs	r3, r3
10008590:	19d2      	adds	r2, r2, r7
10008592:	425b      	negs	r3, r3
10008594:	18d7      	adds	r7, r2, r3
10008596:	023b      	lsls	r3, r7, #8
10008598:	d400      	bmi.n	1000859c <__aeabi_dsub+0x4a8>
1000859a:	e121      	b.n	100087e0 <__aeabi_dsub+0x6ec>
1000859c:	4b85      	ldr	r3, [pc, #532]	; (100087b4 <__aeabi_dsub+0x6c0>)
1000859e:	1c0d      	adds	r5, r1, #0
100085a0:	401f      	ands	r7, r3
100085a2:	1c04      	adds	r4, r0, #0
100085a4:	e5d8      	b.n	10008158 <__aeabi_dsub+0x64>
100085a6:	1c38      	adds	r0, r7, #0
100085a8:	4328      	orrs	r0, r5
100085aa:	2c00      	cmp	r4, #0
100085ac:	d140      	bne.n	10008630 <__aeabi_dsub+0x53c>
100085ae:	2800      	cmp	r0, #0
100085b0:	d000      	beq.n	100085b4 <__aeabi_dsub+0x4c0>
100085b2:	e083      	b.n	100086bc <__aeabi_dsub+0x5c8>
100085b4:	1c10      	adds	r0, r2, #0
100085b6:	9901      	ldr	r1, [sp, #4]
100085b8:	4308      	orrs	r0, r1
100085ba:	d003      	beq.n	100085c4 <__aeabi_dsub+0x4d0>
100085bc:	1c17      	adds	r7, r2, #0
100085be:	1c0d      	adds	r5, r1, #0
100085c0:	4698      	mov	r8, r3
100085c2:	e5c9      	b.n	10008158 <__aeabi_dsub+0x64>
100085c4:	2600      	movs	r6, #0
100085c6:	2700      	movs	r7, #0
100085c8:	2500      	movs	r5, #0
100085ca:	e660      	b.n	1000828e <__aeabi_dsub+0x19a>
100085cc:	4650      	mov	r0, sl
100085ce:	1c13      	adds	r3, r2, #0
100085d0:	3820      	subs	r0, #32
100085d2:	40c3      	lsrs	r3, r0
100085d4:	1c18      	adds	r0, r3, #0
100085d6:	4653      	mov	r3, sl
100085d8:	2b20      	cmp	r3, #32
100085da:	d100      	bne.n	100085de <__aeabi_dsub+0x4ea>
100085dc:	e0c1      	b.n	10008762 <__aeabi_dsub+0x66e>
100085de:	2340      	movs	r3, #64	; 0x40
100085e0:	4651      	mov	r1, sl
100085e2:	1a5b      	subs	r3, r3, r1
100085e4:	409a      	lsls	r2, r3
100085e6:	9901      	ldr	r1, [sp, #4]
100085e8:	4311      	orrs	r1, r2
100085ea:	1e4a      	subs	r2, r1, #1
100085ec:	4191      	sbcs	r1, r2
100085ee:	2200      	movs	r2, #0
100085f0:	4301      	orrs	r1, r0
100085f2:	e670      	b.n	100082d6 <__aeabi_dsub+0x1e2>
100085f4:	4c6e      	ldr	r4, [pc, #440]	; (100087b0 <__aeabi_dsub+0x6bc>)
100085f6:	42a0      	cmp	r0, r4
100085f8:	d000      	beq.n	100085fc <__aeabi_dsub+0x508>
100085fa:	e753      	b.n	100084a4 <__aeabi_dsub+0x3b0>
100085fc:	1c17      	adds	r7, r2, #0
100085fe:	9d01      	ldr	r5, [sp, #4]
10008600:	1c04      	adds	r4, r0, #0
10008602:	4698      	mov	r8, r3
10008604:	e5a8      	b.n	10008158 <__aeabi_dsub+0x64>
10008606:	2c00      	cmp	r4, #0
10008608:	d128      	bne.n	1000865c <__aeabi_dsub+0x568>
1000860a:	1c3c      	adds	r4, r7, #0
1000860c:	432c      	orrs	r4, r5
1000860e:	d100      	bne.n	10008612 <__aeabi_dsub+0x51e>
10008610:	e08a      	b.n	10008728 <__aeabi_dsub+0x634>
10008612:	43db      	mvns	r3, r3
10008614:	469a      	mov	sl, r3
10008616:	2b00      	cmp	r3, #0
10008618:	d000      	beq.n	1000861c <__aeabi_dsub+0x528>
1000861a:	e082      	b.n	10008722 <__aeabi_dsub+0x62e>
1000861c:	9b01      	ldr	r3, [sp, #4]
1000861e:	19d2      	adds	r2, r2, r7
10008620:	469c      	mov	ip, r3
10008622:	4465      	add	r5, ip
10008624:	429d      	cmp	r5, r3
10008626:	4189      	sbcs	r1, r1
10008628:	4249      	negs	r1, r1
1000862a:	1857      	adds	r7, r2, r1
1000862c:	1c04      	adds	r4, r0, #0
1000862e:	e659      	b.n	100082e4 <__aeabi_dsub+0x1f0>
10008630:	2800      	cmp	r0, #0
10008632:	d15b      	bne.n	100086ec <__aeabi_dsub+0x5f8>
10008634:	1c10      	adds	r0, r2, #0
10008636:	9901      	ldr	r1, [sp, #4]
10008638:	4308      	orrs	r0, r1
1000863a:	d100      	bne.n	1000863e <__aeabi_dsub+0x54a>
1000863c:	e0a4      	b.n	10008788 <__aeabi_dsub+0x694>
1000863e:	1c17      	adds	r7, r2, #0
10008640:	1c0d      	adds	r5, r1, #0
10008642:	4698      	mov	r8, r3
10008644:	4c5a      	ldr	r4, [pc, #360]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008646:	e587      	b.n	10008158 <__aeabi_dsub+0x64>
10008648:	433d      	orrs	r5, r7
1000864a:	1e6f      	subs	r7, r5, #1
1000864c:	41bd      	sbcs	r5, r7
1000864e:	2700      	movs	r7, #0
10008650:	b2ed      	uxtb	r5, r5
10008652:	e742      	b.n	100084da <__aeabi_dsub+0x3e6>
10008654:	1c04      	adds	r4, r0, #0
10008656:	2700      	movs	r7, #0
10008658:	2500      	movs	r5, #0
1000865a:	e618      	b.n	1000828e <__aeabi_dsub+0x19a>
1000865c:	4c54      	ldr	r4, [pc, #336]	; (100087b0 <__aeabi_dsub+0x6bc>)
1000865e:	42a0      	cmp	r0, r4
10008660:	d062      	beq.n	10008728 <__aeabi_dsub+0x634>
10008662:	4653      	mov	r3, sl
10008664:	2480      	movs	r4, #128	; 0x80
10008666:	425b      	negs	r3, r3
10008668:	469a      	mov	sl, r3
1000866a:	0424      	lsls	r4, r4, #16
1000866c:	4327      	orrs	r7, r4
1000866e:	4653      	mov	r3, sl
10008670:	2b38      	cmp	r3, #56	; 0x38
10008672:	dd00      	ble.n	10008676 <__aeabi_dsub+0x582>
10008674:	e08e      	b.n	10008794 <__aeabi_dsub+0x6a0>
10008676:	2b1f      	cmp	r3, #31
10008678:	dd00      	ble.n	1000867c <__aeabi_dsub+0x588>
1000867a:	e09d      	b.n	100087b8 <__aeabi_dsub+0x6c4>
1000867c:	2420      	movs	r4, #32
1000867e:	1ae3      	subs	r3, r4, r3
10008680:	469b      	mov	fp, r3
10008682:	1c3b      	adds	r3, r7, #0
10008684:	4659      	mov	r1, fp
10008686:	408b      	lsls	r3, r1
10008688:	4651      	mov	r1, sl
1000868a:	4699      	mov	r9, r3
1000868c:	1c2b      	adds	r3, r5, #0
1000868e:	40cb      	lsrs	r3, r1
10008690:	469c      	mov	ip, r3
10008692:	464b      	mov	r3, r9
10008694:	4664      	mov	r4, ip
10008696:	4323      	orrs	r3, r4
10008698:	469c      	mov	ip, r3
1000869a:	465b      	mov	r3, fp
1000869c:	409d      	lsls	r5, r3
1000869e:	4663      	mov	r3, ip
100086a0:	1e6c      	subs	r4, r5, #1
100086a2:	41a5      	sbcs	r5, r4
100086a4:	40cf      	lsrs	r7, r1
100086a6:	431d      	orrs	r5, r3
100086a8:	9b01      	ldr	r3, [sp, #4]
100086aa:	18bf      	adds	r7, r7, r2
100086ac:	469c      	mov	ip, r3
100086ae:	4465      	add	r5, ip
100086b0:	429d      	cmp	r5, r3
100086b2:	4192      	sbcs	r2, r2
100086b4:	4252      	negs	r2, r2
100086b6:	18bf      	adds	r7, r7, r2
100086b8:	1c04      	adds	r4, r0, #0
100086ba:	e613      	b.n	100082e4 <__aeabi_dsub+0x1f0>
100086bc:	1c10      	adds	r0, r2, #0
100086be:	9901      	ldr	r1, [sp, #4]
100086c0:	4308      	orrs	r0, r1
100086c2:	d100      	bne.n	100086c6 <__aeabi_dsub+0x5d2>
100086c4:	e548      	b.n	10008158 <__aeabi_dsub+0x64>
100086c6:	1a68      	subs	r0, r5, r1
100086c8:	4684      	mov	ip, r0
100086ca:	4285      	cmp	r5, r0
100086cc:	4180      	sbcs	r0, r0
100086ce:	1abe      	subs	r6, r7, r2
100086d0:	4240      	negs	r0, r0
100086d2:	1a30      	subs	r0, r6, r0
100086d4:	0206      	lsls	r6, r0, #8
100086d6:	d400      	bmi.n	100086da <__aeabi_dsub+0x5e6>
100086d8:	e647      	b.n	1000836a <__aeabi_dsub+0x276>
100086da:	468c      	mov	ip, r1
100086dc:	1b4d      	subs	r5, r1, r5
100086de:	45ac      	cmp	ip, r5
100086e0:	4189      	sbcs	r1, r1
100086e2:	1bd2      	subs	r2, r2, r7
100086e4:	4249      	negs	r1, r1
100086e6:	1a57      	subs	r7, r2, r1
100086e8:	4698      	mov	r8, r3
100086ea:	e535      	b.n	10008158 <__aeabi_dsub+0x64>
100086ec:	1c10      	adds	r0, r2, #0
100086ee:	9901      	ldr	r1, [sp, #4]
100086f0:	4308      	orrs	r0, r1
100086f2:	d034      	beq.n	1000875e <__aeabi_dsub+0x66a>
100086f4:	2480      	movs	r4, #128	; 0x80
100086f6:	0778      	lsls	r0, r7, #29
100086f8:	08ed      	lsrs	r5, r5, #3
100086fa:	08ff      	lsrs	r7, r7, #3
100086fc:	0324      	lsls	r4, r4, #12
100086fe:	4328      	orrs	r0, r5
10008700:	4227      	tst	r7, r4
10008702:	d008      	beq.n	10008716 <__aeabi_dsub+0x622>
10008704:	08d6      	lsrs	r6, r2, #3
10008706:	4226      	tst	r6, r4
10008708:	d105      	bne.n	10008716 <__aeabi_dsub+0x622>
1000870a:	08c9      	lsrs	r1, r1, #3
1000870c:	0752      	lsls	r2, r2, #29
1000870e:	430a      	orrs	r2, r1
10008710:	1c10      	adds	r0, r2, #0
10008712:	1c37      	adds	r7, r6, #0
10008714:	4698      	mov	r8, r3
10008716:	00ff      	lsls	r7, r7, #3
10008718:	0f42      	lsrs	r2, r0, #29
1000871a:	4317      	orrs	r7, r2
1000871c:	00c5      	lsls	r5, r0, #3
1000871e:	4c24      	ldr	r4, [pc, #144]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008720:	e51a      	b.n	10008158 <__aeabi_dsub+0x64>
10008722:	4c23      	ldr	r4, [pc, #140]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008724:	42a0      	cmp	r0, r4
10008726:	d1a2      	bne.n	1000866e <__aeabi_dsub+0x57a>
10008728:	1c17      	adds	r7, r2, #0
1000872a:	9d01      	ldr	r5, [sp, #4]
1000872c:	1c04      	adds	r4, r0, #0
1000872e:	e513      	b.n	10008158 <__aeabi_dsub+0x64>
10008730:	2b00      	cmp	r3, #0
10008732:	d035      	beq.n	100087a0 <__aeabi_dsub+0x6ac>
10008734:	1c13      	adds	r3, r2, #0
10008736:	9901      	ldr	r1, [sp, #4]
10008738:	430b      	orrs	r3, r1
1000873a:	d010      	beq.n	1000875e <__aeabi_dsub+0x66a>
1000873c:	2480      	movs	r4, #128	; 0x80
1000873e:	0778      	lsls	r0, r7, #29
10008740:	08ed      	lsrs	r5, r5, #3
10008742:	08ff      	lsrs	r7, r7, #3
10008744:	0324      	lsls	r4, r4, #12
10008746:	4328      	orrs	r0, r5
10008748:	4227      	tst	r7, r4
1000874a:	d0e4      	beq.n	10008716 <__aeabi_dsub+0x622>
1000874c:	08d3      	lsrs	r3, r2, #3
1000874e:	4223      	tst	r3, r4
10008750:	d1e1      	bne.n	10008716 <__aeabi_dsub+0x622>
10008752:	08c9      	lsrs	r1, r1, #3
10008754:	0752      	lsls	r2, r2, #29
10008756:	430a      	orrs	r2, r1
10008758:	1c10      	adds	r0, r2, #0
1000875a:	1c1f      	adds	r7, r3, #0
1000875c:	e7db      	b.n	10008716 <__aeabi_dsub+0x622>
1000875e:	4c14      	ldr	r4, [pc, #80]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008760:	e4fa      	b.n	10008158 <__aeabi_dsub+0x64>
10008762:	2200      	movs	r2, #0
10008764:	e73f      	b.n	100085e6 <__aeabi_dsub+0x4f2>
10008766:	464c      	mov	r4, r9
10008768:	1c3e      	adds	r6, r7, #0
1000876a:	3c20      	subs	r4, #32
1000876c:	40e6      	lsrs	r6, r4
1000876e:	4649      	mov	r1, r9
10008770:	1c34      	adds	r4, r6, #0
10008772:	2920      	cmp	r1, #32
10008774:	d032      	beq.n	100087dc <__aeabi_dsub+0x6e8>
10008776:	2640      	movs	r6, #64	; 0x40
10008778:	1a76      	subs	r6, r6, r1
1000877a:	40b7      	lsls	r7, r6
1000877c:	433d      	orrs	r5, r7
1000877e:	1e6f      	subs	r7, r5, #1
10008780:	41bd      	sbcs	r5, r7
10008782:	2700      	movs	r7, #0
10008784:	4325      	orrs	r5, r4
10008786:	e6a8      	b.n	100084da <__aeabi_dsub+0x3e6>
10008788:	2780      	movs	r7, #128	; 0x80
1000878a:	2600      	movs	r6, #0
1000878c:	03ff      	lsls	r7, r7, #15
1000878e:	4c08      	ldr	r4, [pc, #32]	; (100087b0 <__aeabi_dsub+0x6bc>)
10008790:	2500      	movs	r5, #0
10008792:	e57c      	b.n	1000828e <__aeabi_dsub+0x19a>
10008794:	433d      	orrs	r5, r7
10008796:	1e6f      	subs	r7, r5, #1
10008798:	41bd      	sbcs	r5, r7
1000879a:	2700      	movs	r7, #0
1000879c:	b2ed      	uxtb	r5, r5
1000879e:	e783      	b.n	100086a8 <__aeabi_dsub+0x5b4>
100087a0:	1c17      	adds	r7, r2, #0
100087a2:	9d01      	ldr	r5, [sp, #4]
100087a4:	4c02      	ldr	r4, [pc, #8]	; (100087b0 <__aeabi_dsub+0x6bc>)
100087a6:	e4d7      	b.n	10008158 <__aeabi_dsub+0x64>
100087a8:	1c17      	adds	r7, r2, #0
100087aa:	9d01      	ldr	r5, [sp, #4]
100087ac:	e4d4      	b.n	10008158 <__aeabi_dsub+0x64>
100087ae:	46c0      	nop			; (mov r8, r8)
100087b0:	000007ff 	.word	0x000007ff
100087b4:	ff7fffff 	.word	0xff7fffff
100087b8:	4654      	mov	r4, sl
100087ba:	1c3b      	adds	r3, r7, #0
100087bc:	3c20      	subs	r4, #32
100087be:	40e3      	lsrs	r3, r4
100087c0:	1c1c      	adds	r4, r3, #0
100087c2:	4653      	mov	r3, sl
100087c4:	2b20      	cmp	r3, #32
100087c6:	d00d      	beq.n	100087e4 <__aeabi_dsub+0x6f0>
100087c8:	2340      	movs	r3, #64	; 0x40
100087ca:	4651      	mov	r1, sl
100087cc:	1a5b      	subs	r3, r3, r1
100087ce:	409f      	lsls	r7, r3
100087d0:	433d      	orrs	r5, r7
100087d2:	1e6f      	subs	r7, r5, #1
100087d4:	41bd      	sbcs	r5, r7
100087d6:	2700      	movs	r7, #0
100087d8:	4325      	orrs	r5, r4
100087da:	e765      	b.n	100086a8 <__aeabi_dsub+0x5b4>
100087dc:	2700      	movs	r7, #0
100087de:	e7cd      	b.n	1000877c <__aeabi_dsub+0x688>
100087e0:	1c0d      	adds	r5, r1, #0
100087e2:	e5c8      	b.n	10008376 <__aeabi_dsub+0x282>
100087e4:	2700      	movs	r7, #0
100087e6:	e7f3      	b.n	100087d0 <__aeabi_dsub+0x6dc>

100087e8 <__aeabi_i2d>:
100087e8:	b538      	push	{r3, r4, r5, lr}
100087ea:	1e04      	subs	r4, r0, #0
100087ec:	d016      	beq.n	1000881c <__aeabi_i2d+0x34>
100087ee:	0fc5      	lsrs	r5, r0, #31
100087f0:	d000      	beq.n	100087f4 <__aeabi_i2d+0xc>
100087f2:	4244      	negs	r4, r0
100087f4:	1c20      	adds	r0, r4, #0
100087f6:	f000 f949 	bl	10008a8c <__clzsi2>
100087fa:	4b17      	ldr	r3, [pc, #92]	; (10008858 <__aeabi_i2d+0x70>)
100087fc:	1a1b      	subs	r3, r3, r0
100087fe:	280a      	cmp	r0, #10
10008800:	dc21      	bgt.n	10008846 <__aeabi_i2d+0x5e>
10008802:	1c02      	adds	r2, r0, #0
10008804:	1c21      	adds	r1, r4, #0
10008806:	3215      	adds	r2, #21
10008808:	4091      	lsls	r1, r2
1000880a:	1c0a      	adds	r2, r1, #0
1000880c:	210b      	movs	r1, #11
1000880e:	1a08      	subs	r0, r1, r0
10008810:	40c4      	lsrs	r4, r0
10008812:	055b      	lsls	r3, r3, #21
10008814:	0324      	lsls	r4, r4, #12
10008816:	0b24      	lsrs	r4, r4, #12
10008818:	0d5b      	lsrs	r3, r3, #21
1000881a:	e003      	b.n	10008824 <__aeabi_i2d+0x3c>
1000881c:	2500      	movs	r5, #0
1000881e:	2300      	movs	r3, #0
10008820:	2400      	movs	r4, #0
10008822:	2200      	movs	r2, #0
10008824:	2100      	movs	r1, #0
10008826:	1c10      	adds	r0, r2, #0
10008828:	0324      	lsls	r4, r4, #12
1000882a:	0d0a      	lsrs	r2, r1, #20
1000882c:	0512      	lsls	r2, r2, #20
1000882e:	0b24      	lsrs	r4, r4, #12
10008830:	4314      	orrs	r4, r2
10008832:	4a0a      	ldr	r2, [pc, #40]	; (1000885c <__aeabi_i2d+0x74>)
10008834:	051b      	lsls	r3, r3, #20
10008836:	4014      	ands	r4, r2
10008838:	431c      	orrs	r4, r3
1000883a:	0064      	lsls	r4, r4, #1
1000883c:	07ed      	lsls	r5, r5, #31
1000883e:	0864      	lsrs	r4, r4, #1
10008840:	432c      	orrs	r4, r5
10008842:	1c21      	adds	r1, r4, #0
10008844:	bd38      	pop	{r3, r4, r5, pc}
10008846:	380b      	subs	r0, #11
10008848:	4084      	lsls	r4, r0
1000884a:	055b      	lsls	r3, r3, #21
1000884c:	0324      	lsls	r4, r4, #12
1000884e:	0b24      	lsrs	r4, r4, #12
10008850:	0d5b      	lsrs	r3, r3, #21
10008852:	2200      	movs	r2, #0
10008854:	e7e6      	b.n	10008824 <__aeabi_i2d+0x3c>
10008856:	46c0      	nop			; (mov r8, r8)
10008858:	0000041e 	.word	0x0000041e
1000885c:	800fffff 	.word	0x800fffff

10008860 <__aeabi_ui2d>:
10008860:	b510      	push	{r4, lr}
10008862:	1e04      	subs	r4, r0, #0
10008864:	d010      	beq.n	10008888 <__aeabi_ui2d+0x28>
10008866:	f000 f911 	bl	10008a8c <__clzsi2>
1000886a:	4a14      	ldr	r2, [pc, #80]	; (100088bc <__aeabi_ui2d+0x5c>)
1000886c:	1a12      	subs	r2, r2, r0
1000886e:	280a      	cmp	r0, #10
10008870:	dc1a      	bgt.n	100088a8 <__aeabi_ui2d+0x48>
10008872:	230b      	movs	r3, #11
10008874:	1c21      	adds	r1, r4, #0
10008876:	1a1b      	subs	r3, r3, r0
10008878:	40d9      	lsrs	r1, r3
1000887a:	3015      	adds	r0, #21
1000887c:	030b      	lsls	r3, r1, #12
1000887e:	0552      	lsls	r2, r2, #21
10008880:	4084      	lsls	r4, r0
10008882:	0b1b      	lsrs	r3, r3, #12
10008884:	0d52      	lsrs	r2, r2, #21
10008886:	e001      	b.n	1000888c <__aeabi_ui2d+0x2c>
10008888:	2200      	movs	r2, #0
1000888a:	2300      	movs	r3, #0
1000888c:	2100      	movs	r1, #0
1000888e:	031b      	lsls	r3, r3, #12
10008890:	1c20      	adds	r0, r4, #0
10008892:	0b1c      	lsrs	r4, r3, #12
10008894:	0d0b      	lsrs	r3, r1, #20
10008896:	051b      	lsls	r3, r3, #20
10008898:	4323      	orrs	r3, r4
1000889a:	4c09      	ldr	r4, [pc, #36]	; (100088c0 <__aeabi_ui2d+0x60>)
1000889c:	0512      	lsls	r2, r2, #20
1000889e:	4023      	ands	r3, r4
100088a0:	4313      	orrs	r3, r2
100088a2:	005b      	lsls	r3, r3, #1
100088a4:	0859      	lsrs	r1, r3, #1
100088a6:	bd10      	pop	{r4, pc}
100088a8:	1c03      	adds	r3, r0, #0
100088aa:	3b0b      	subs	r3, #11
100088ac:	409c      	lsls	r4, r3
100088ae:	0552      	lsls	r2, r2, #21
100088b0:	0323      	lsls	r3, r4, #12
100088b2:	0b1b      	lsrs	r3, r3, #12
100088b4:	0d52      	lsrs	r2, r2, #21
100088b6:	2400      	movs	r4, #0
100088b8:	e7e8      	b.n	1000888c <__aeabi_ui2d+0x2c>
100088ba:	46c0      	nop			; (mov r8, r8)
100088bc:	0000041e 	.word	0x0000041e
100088c0:	800fffff 	.word	0x800fffff

100088c4 <__aeabi_f2d>:
100088c4:	0042      	lsls	r2, r0, #1
100088c6:	0e12      	lsrs	r2, r2, #24
100088c8:	1c51      	adds	r1, r2, #1
100088ca:	b538      	push	{r3, r4, r5, lr}
100088cc:	b2c9      	uxtb	r1, r1
100088ce:	0243      	lsls	r3, r0, #9
100088d0:	0a5d      	lsrs	r5, r3, #9
100088d2:	0fc4      	lsrs	r4, r0, #31
100088d4:	2901      	cmp	r1, #1
100088d6:	dd15      	ble.n	10008904 <__aeabi_f2d+0x40>
100088d8:	21e0      	movs	r1, #224	; 0xe0
100088da:	0089      	lsls	r1, r1, #2
100088dc:	468c      	mov	ip, r1
100088de:	076d      	lsls	r5, r5, #29
100088e0:	0b1b      	lsrs	r3, r3, #12
100088e2:	4462      	add	r2, ip
100088e4:	2100      	movs	r1, #0
100088e6:	1c28      	adds	r0, r5, #0
100088e8:	0d0d      	lsrs	r5, r1, #20
100088ea:	052d      	lsls	r5, r5, #20
100088ec:	432b      	orrs	r3, r5
100088ee:	4d1c      	ldr	r5, [pc, #112]	; (10008960 <__aeabi_f2d+0x9c>)
100088f0:	0552      	lsls	r2, r2, #21
100088f2:	402b      	ands	r3, r5
100088f4:	0852      	lsrs	r2, r2, #1
100088f6:	4313      	orrs	r3, r2
100088f8:	005b      	lsls	r3, r3, #1
100088fa:	07e4      	lsls	r4, r4, #31
100088fc:	085b      	lsrs	r3, r3, #1
100088fe:	4323      	orrs	r3, r4
10008900:	1c19      	adds	r1, r3, #0
10008902:	bd38      	pop	{r3, r4, r5, pc}
10008904:	2a00      	cmp	r2, #0
10008906:	d115      	bne.n	10008934 <__aeabi_f2d+0x70>
10008908:	2d00      	cmp	r5, #0
1000890a:	d01f      	beq.n	1000894c <__aeabi_f2d+0x88>
1000890c:	1c28      	adds	r0, r5, #0
1000890e:	f000 f8bd 	bl	10008a8c <__clzsi2>
10008912:	280a      	cmp	r0, #10
10008914:	dc1d      	bgt.n	10008952 <__aeabi_f2d+0x8e>
10008916:	230b      	movs	r3, #11
10008918:	1c2a      	adds	r2, r5, #0
1000891a:	1a1b      	subs	r3, r3, r0
1000891c:	40da      	lsrs	r2, r3
1000891e:	1c13      	adds	r3, r2, #0
10008920:	1c02      	adds	r2, r0, #0
10008922:	3215      	adds	r2, #21
10008924:	4095      	lsls	r5, r2
10008926:	4a0f      	ldr	r2, [pc, #60]	; (10008964 <__aeabi_f2d+0xa0>)
10008928:	031b      	lsls	r3, r3, #12
1000892a:	1a12      	subs	r2, r2, r0
1000892c:	0552      	lsls	r2, r2, #21
1000892e:	0b1b      	lsrs	r3, r3, #12
10008930:	0d52      	lsrs	r2, r2, #21
10008932:	e7d7      	b.n	100088e4 <__aeabi_f2d+0x20>
10008934:	2d00      	cmp	r5, #0
10008936:	d006      	beq.n	10008946 <__aeabi_f2d+0x82>
10008938:	2280      	movs	r2, #128	; 0x80
1000893a:	0b1b      	lsrs	r3, r3, #12
1000893c:	0312      	lsls	r2, r2, #12
1000893e:	4313      	orrs	r3, r2
10008940:	076d      	lsls	r5, r5, #29
10008942:	4a09      	ldr	r2, [pc, #36]	; (10008968 <__aeabi_f2d+0xa4>)
10008944:	e7ce      	b.n	100088e4 <__aeabi_f2d+0x20>
10008946:	4a08      	ldr	r2, [pc, #32]	; (10008968 <__aeabi_f2d+0xa4>)
10008948:	2300      	movs	r3, #0
1000894a:	e7cb      	b.n	100088e4 <__aeabi_f2d+0x20>
1000894c:	2200      	movs	r2, #0
1000894e:	2300      	movs	r3, #0
10008950:	e7c8      	b.n	100088e4 <__aeabi_f2d+0x20>
10008952:	1c03      	adds	r3, r0, #0
10008954:	3b0b      	subs	r3, #11
10008956:	409d      	lsls	r5, r3
10008958:	1c2b      	adds	r3, r5, #0
1000895a:	2500      	movs	r5, #0
1000895c:	e7e3      	b.n	10008926 <__aeabi_f2d+0x62>
1000895e:	46c0      	nop			; (mov r8, r8)
10008960:	800fffff 	.word	0x800fffff
10008964:	00000389 	.word	0x00000389
10008968:	000007ff 	.word	0x000007ff

1000896c <__aeabi_d2f>:
1000896c:	b570      	push	{r4, r5, r6, lr}
1000896e:	030b      	lsls	r3, r1, #12
10008970:	004d      	lsls	r5, r1, #1
10008972:	0f44      	lsrs	r4, r0, #29
10008974:	0d6d      	lsrs	r5, r5, #21
10008976:	0a5b      	lsrs	r3, r3, #9
10008978:	4323      	orrs	r3, r4
1000897a:	1c6c      	adds	r4, r5, #1
1000897c:	0564      	lsls	r4, r4, #21
1000897e:	0fc9      	lsrs	r1, r1, #31
10008980:	00c2      	lsls	r2, r0, #3
10008982:	0d64      	lsrs	r4, r4, #21
10008984:	2c01      	cmp	r4, #1
10008986:	dd2a      	ble.n	100089de <__aeabi_d2f+0x72>
10008988:	4c3b      	ldr	r4, [pc, #236]	; (10008a78 <__aeabi_d2f+0x10c>)
1000898a:	192c      	adds	r4, r5, r4
1000898c:	2cfe      	cmp	r4, #254	; 0xfe
1000898e:	dc1a      	bgt.n	100089c6 <__aeabi_d2f+0x5a>
10008990:	2c00      	cmp	r4, #0
10008992:	dd35      	ble.n	10008a00 <__aeabi_d2f+0x94>
10008994:	0180      	lsls	r0, r0, #6
10008996:	1e45      	subs	r5, r0, #1
10008998:	41a8      	sbcs	r0, r5
1000899a:	00db      	lsls	r3, r3, #3
1000899c:	4303      	orrs	r3, r0
1000899e:	0f52      	lsrs	r2, r2, #29
100089a0:	4313      	orrs	r3, r2
100089a2:	075a      	lsls	r2, r3, #29
100089a4:	d004      	beq.n	100089b0 <__aeabi_d2f+0x44>
100089a6:	220f      	movs	r2, #15
100089a8:	401a      	ands	r2, r3
100089aa:	2a04      	cmp	r2, #4
100089ac:	d000      	beq.n	100089b0 <__aeabi_d2f+0x44>
100089ae:	3304      	adds	r3, #4
100089b0:	2280      	movs	r2, #128	; 0x80
100089b2:	04d2      	lsls	r2, r2, #19
100089b4:	401a      	ands	r2, r3
100089b6:	d027      	beq.n	10008a08 <__aeabi_d2f+0x9c>
100089b8:	3401      	adds	r4, #1
100089ba:	2cff      	cmp	r4, #255	; 0xff
100089bc:	d003      	beq.n	100089c6 <__aeabi_d2f+0x5a>
100089be:	019b      	lsls	r3, r3, #6
100089c0:	0a5b      	lsrs	r3, r3, #9
100089c2:	b2e4      	uxtb	r4, r4
100089c4:	e001      	b.n	100089ca <__aeabi_d2f+0x5e>
100089c6:	24ff      	movs	r4, #255	; 0xff
100089c8:	2300      	movs	r3, #0
100089ca:	025b      	lsls	r3, r3, #9
100089cc:	05e4      	lsls	r4, r4, #23
100089ce:	0a5b      	lsrs	r3, r3, #9
100089d0:	4323      	orrs	r3, r4
100089d2:	005b      	lsls	r3, r3, #1
100089d4:	07c9      	lsls	r1, r1, #31
100089d6:	085b      	lsrs	r3, r3, #1
100089d8:	430b      	orrs	r3, r1
100089da:	1c18      	adds	r0, r3, #0
100089dc:	bd70      	pop	{r4, r5, r6, pc}
100089de:	2d00      	cmp	r5, #0
100089e0:	d106      	bne.n	100089f0 <__aeabi_d2f+0x84>
100089e2:	4313      	orrs	r3, r2
100089e4:	d10e      	bne.n	10008a04 <__aeabi_d2f+0x98>
100089e6:	2400      	movs	r4, #0
100089e8:	025b      	lsls	r3, r3, #9
100089ea:	0a5b      	lsrs	r3, r3, #9
100089ec:	b2e4      	uxtb	r4, r4
100089ee:	e7ec      	b.n	100089ca <__aeabi_d2f+0x5e>
100089f0:	431a      	orrs	r2, r3
100089f2:	d0e8      	beq.n	100089c6 <__aeabi_d2f+0x5a>
100089f4:	2080      	movs	r0, #128	; 0x80
100089f6:	00db      	lsls	r3, r3, #3
100089f8:	0480      	lsls	r0, r0, #18
100089fa:	4303      	orrs	r3, r0
100089fc:	24ff      	movs	r4, #255	; 0xff
100089fe:	e7d0      	b.n	100089a2 <__aeabi_d2f+0x36>
10008a00:	3417      	adds	r4, #23
10008a02:	da0c      	bge.n	10008a1e <__aeabi_d2f+0xb2>
10008a04:	2305      	movs	r3, #5
10008a06:	2400      	movs	r4, #0
10008a08:	08db      	lsrs	r3, r3, #3
10008a0a:	2cff      	cmp	r4, #255	; 0xff
10008a0c:	d1ec      	bne.n	100089e8 <__aeabi_d2f+0x7c>
10008a0e:	2b00      	cmp	r3, #0
10008a10:	d02d      	beq.n	10008a6e <__aeabi_d2f+0x102>
10008a12:	2280      	movs	r2, #128	; 0x80
10008a14:	03d2      	lsls	r2, r2, #15
10008a16:	4313      	orrs	r3, r2
10008a18:	025b      	lsls	r3, r3, #9
10008a1a:	0a5b      	lsrs	r3, r3, #9
10008a1c:	e7d5      	b.n	100089ca <__aeabi_d2f+0x5e>
10008a1e:	2480      	movs	r4, #128	; 0x80
10008a20:	4816      	ldr	r0, [pc, #88]	; (10008a7c <__aeabi_d2f+0x110>)
10008a22:	0424      	lsls	r4, r4, #16
10008a24:	4323      	orrs	r3, r4
10008a26:	1b40      	subs	r0, r0, r5
10008a28:	281f      	cmp	r0, #31
10008a2a:	dc0d      	bgt.n	10008a48 <__aeabi_d2f+0xdc>
10008a2c:	4c14      	ldr	r4, [pc, #80]	; (10008a80 <__aeabi_d2f+0x114>)
10008a2e:	46a4      	mov	ip, r4
10008a30:	4465      	add	r5, ip
10008a32:	40ab      	lsls	r3, r5
10008a34:	1c1c      	adds	r4, r3, #0
10008a36:	1c13      	adds	r3, r2, #0
10008a38:	40ab      	lsls	r3, r5
10008a3a:	1e5d      	subs	r5, r3, #1
10008a3c:	41ab      	sbcs	r3, r5
10008a3e:	40c2      	lsrs	r2, r0
10008a40:	4323      	orrs	r3, r4
10008a42:	4313      	orrs	r3, r2
10008a44:	2400      	movs	r4, #0
10008a46:	e7ac      	b.n	100089a2 <__aeabi_d2f+0x36>
10008a48:	1c1e      	adds	r6, r3, #0
10008a4a:	4c0e      	ldr	r4, [pc, #56]	; (10008a84 <__aeabi_d2f+0x118>)
10008a4c:	1b64      	subs	r4, r4, r5
10008a4e:	40e6      	lsrs	r6, r4
10008a50:	1c34      	adds	r4, r6, #0
10008a52:	2820      	cmp	r0, #32
10008a54:	d00d      	beq.n	10008a72 <__aeabi_d2f+0x106>
10008a56:	480c      	ldr	r0, [pc, #48]	; (10008a88 <__aeabi_d2f+0x11c>)
10008a58:	4684      	mov	ip, r0
10008a5a:	4465      	add	r5, ip
10008a5c:	40ab      	lsls	r3, r5
10008a5e:	1c1d      	adds	r5, r3, #0
10008a60:	432a      	orrs	r2, r5
10008a62:	1e53      	subs	r3, r2, #1
10008a64:	419a      	sbcs	r2, r3
10008a66:	1c13      	adds	r3, r2, #0
10008a68:	4323      	orrs	r3, r4
10008a6a:	2400      	movs	r4, #0
10008a6c:	e799      	b.n	100089a2 <__aeabi_d2f+0x36>
10008a6e:	2300      	movs	r3, #0
10008a70:	e7ab      	b.n	100089ca <__aeabi_d2f+0x5e>
10008a72:	2500      	movs	r5, #0
10008a74:	e7f4      	b.n	10008a60 <__aeabi_d2f+0xf4>
10008a76:	46c0      	nop			; (mov r8, r8)
10008a78:	fffffc80 	.word	0xfffffc80
10008a7c:	0000039e 	.word	0x0000039e
10008a80:	fffffc82 	.word	0xfffffc82
10008a84:	0000037e 	.word	0x0000037e
10008a88:	fffffca2 	.word	0xfffffca2

10008a8c <__clzsi2>:
10008a8c:	211c      	movs	r1, #28
10008a8e:	2301      	movs	r3, #1
10008a90:	041b      	lsls	r3, r3, #16
10008a92:	4298      	cmp	r0, r3
10008a94:	d301      	bcc.n	10008a9a <__clzsi2+0xe>
10008a96:	0c00      	lsrs	r0, r0, #16
10008a98:	3910      	subs	r1, #16
10008a9a:	0a1b      	lsrs	r3, r3, #8
10008a9c:	4298      	cmp	r0, r3
10008a9e:	d301      	bcc.n	10008aa4 <__clzsi2+0x18>
10008aa0:	0a00      	lsrs	r0, r0, #8
10008aa2:	3908      	subs	r1, #8
10008aa4:	091b      	lsrs	r3, r3, #4
10008aa6:	4298      	cmp	r0, r3
10008aa8:	d301      	bcc.n	10008aae <__clzsi2+0x22>
10008aaa:	0900      	lsrs	r0, r0, #4
10008aac:	3904      	subs	r1, #4
10008aae:	a202      	add	r2, pc, #8	; (adr r2, 10008ab8 <__clzsi2+0x2c>)
10008ab0:	5c10      	ldrb	r0, [r2, r0]
10008ab2:	1840      	adds	r0, r0, r1
10008ab4:	4770      	bx	lr
10008ab6:	46c0      	nop			; (mov r8, r8)
10008ab8:	02020304 	.word	0x02020304
10008abc:	01010101 	.word	0x01010101
	...

10008ac8 <__errno>:
10008ac8:	4b01      	ldr	r3, [pc, #4]	; (10008ad0 <__errno+0x8>)
10008aca:	6818      	ldr	r0, [r3, #0]
10008acc:	4770      	bx	lr
10008ace:	46c0      	nop			; (mov r8, r8)
10008ad0:	20000710 	.word	0x20000710

10008ad4 <__libc_init_array>:
10008ad4:	4b0e      	ldr	r3, [pc, #56]	; (10008b10 <__libc_init_array+0x3c>)
10008ad6:	b570      	push	{r4, r5, r6, lr}
10008ad8:	2500      	movs	r5, #0
10008ada:	1c1e      	adds	r6, r3, #0
10008adc:	4c0d      	ldr	r4, [pc, #52]	; (10008b14 <__libc_init_array+0x40>)
10008ade:	1ae4      	subs	r4, r4, r3
10008ae0:	10a4      	asrs	r4, r4, #2
10008ae2:	42a5      	cmp	r5, r4
10008ae4:	d004      	beq.n	10008af0 <__libc_init_array+0x1c>
10008ae6:	00ab      	lsls	r3, r5, #2
10008ae8:	58f3      	ldr	r3, [r6, r3]
10008aea:	4798      	blx	r3
10008aec:	3501      	adds	r5, #1
10008aee:	e7f8      	b.n	10008ae2 <__libc_init_array+0xe>
10008af0:	f7fd fce0 	bl	100064b4 <_init>
10008af4:	4b08      	ldr	r3, [pc, #32]	; (10008b18 <__libc_init_array+0x44>)
10008af6:	2500      	movs	r5, #0
10008af8:	1c1e      	adds	r6, r3, #0
10008afa:	4c08      	ldr	r4, [pc, #32]	; (10008b1c <__libc_init_array+0x48>)
10008afc:	1ae4      	subs	r4, r4, r3
10008afe:	10a4      	asrs	r4, r4, #2
10008b00:	42a5      	cmp	r5, r4
10008b02:	d004      	beq.n	10008b0e <__libc_init_array+0x3a>
10008b04:	00ab      	lsls	r3, r5, #2
10008b06:	58f3      	ldr	r3, [r6, r3]
10008b08:	4798      	blx	r3
10008b0a:	3501      	adds	r5, #1
10008b0c:	e7f8      	b.n	10008b00 <__libc_init_array+0x2c>
10008b0e:	bd70      	pop	{r4, r5, r6, pc}
10008b10:	20000750 	.word	0x20000750
10008b14:	20000750 	.word	0x20000750
10008b18:	20000750 	.word	0x20000750
10008b1c:	20000750 	.word	0x20000750

10008b20 <memcpy>:
10008b20:	2300      	movs	r3, #0
10008b22:	b510      	push	{r4, lr}
10008b24:	4293      	cmp	r3, r2
10008b26:	d003      	beq.n	10008b30 <memcpy+0x10>
10008b28:	5ccc      	ldrb	r4, [r1, r3]
10008b2a:	54c4      	strb	r4, [r0, r3]
10008b2c:	3301      	adds	r3, #1
10008b2e:	e7f9      	b.n	10008b24 <memcpy+0x4>
10008b30:	bd10      	pop	{r4, pc}

10008b32 <__cvt>:
10008b32:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b34:	b08b      	sub	sp, #44	; 0x2c
10008b36:	1c14      	adds	r4, r2, #0
10008b38:	1e1d      	subs	r5, r3, #0
10008b3a:	9912      	ldr	r1, [sp, #72]	; 0x48
10008b3c:	da06      	bge.n	10008b4c <__cvt+0x1a>
10008b3e:	2480      	movs	r4, #128	; 0x80
10008b40:	0624      	lsls	r4, r4, #24
10008b42:	192b      	adds	r3, r5, r4
10008b44:	1c1d      	adds	r5, r3, #0
10008b46:	1c14      	adds	r4, r2, #0
10008b48:	232d      	movs	r3, #45	; 0x2d
10008b4a:	e000      	b.n	10008b4e <__cvt+0x1c>
10008b4c:	2300      	movs	r3, #0
10008b4e:	700b      	strb	r3, [r1, #0]
10008b50:	2320      	movs	r3, #32
10008b52:	9e14      	ldr	r6, [sp, #80]	; 0x50
10008b54:	2203      	movs	r2, #3
10008b56:	439e      	bics	r6, r3
10008b58:	2e46      	cmp	r6, #70	; 0x46
10008b5a:	d007      	beq.n	10008b6c <__cvt+0x3a>
10008b5c:	1c33      	adds	r3, r6, #0
10008b5e:	3b45      	subs	r3, #69	; 0x45
10008b60:	4259      	negs	r1, r3
10008b62:	414b      	adcs	r3, r1
10008b64:	9910      	ldr	r1, [sp, #64]	; 0x40
10008b66:	3a01      	subs	r2, #1
10008b68:	18cb      	adds	r3, r1, r3
10008b6a:	9310      	str	r3, [sp, #64]	; 0x40
10008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008b6e:	9200      	str	r2, [sp, #0]
10008b70:	9301      	str	r3, [sp, #4]
10008b72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008b74:	1c22      	adds	r2, r4, #0
10008b76:	9302      	str	r3, [sp, #8]
10008b78:	ab08      	add	r3, sp, #32
10008b7a:	9303      	str	r3, [sp, #12]
10008b7c:	ab09      	add	r3, sp, #36	; 0x24
10008b7e:	9304      	str	r3, [sp, #16]
10008b80:	1c2b      	adds	r3, r5, #0
10008b82:	f001 fdc5 	bl	1000a710 <_dtoa_r>
10008b86:	1c07      	adds	r7, r0, #0
10008b88:	2e47      	cmp	r6, #71	; 0x47
10008b8a:	d102      	bne.n	10008b92 <__cvt+0x60>
10008b8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008b8e:	07db      	lsls	r3, r3, #31
10008b90:	d52c      	bpl.n	10008bec <__cvt+0xba>
10008b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008b94:	18fb      	adds	r3, r7, r3
10008b96:	9307      	str	r3, [sp, #28]
10008b98:	2e46      	cmp	r6, #70	; 0x46
10008b9a:	d114      	bne.n	10008bc6 <__cvt+0x94>
10008b9c:	783b      	ldrb	r3, [r7, #0]
10008b9e:	2b30      	cmp	r3, #48	; 0x30
10008ba0:	d10c      	bne.n	10008bbc <__cvt+0x8a>
10008ba2:	1c20      	adds	r0, r4, #0
10008ba4:	1c29      	adds	r1, r5, #0
10008ba6:	2200      	movs	r2, #0
10008ba8:	2300      	movs	r3, #0
10008baa:	f7fd ff75 	bl	10006a98 <__aeabi_dcmpeq>
10008bae:	2800      	cmp	r0, #0
10008bb0:	d104      	bne.n	10008bbc <__cvt+0x8a>
10008bb2:	2301      	movs	r3, #1
10008bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008bb6:	1a9b      	subs	r3, r3, r2
10008bb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10008bba:	6013      	str	r3, [r2, #0]
10008bbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10008bbe:	9a07      	ldr	r2, [sp, #28]
10008bc0:	681b      	ldr	r3, [r3, #0]
10008bc2:	18d3      	adds	r3, r2, r3
10008bc4:	9307      	str	r3, [sp, #28]
10008bc6:	1c20      	adds	r0, r4, #0
10008bc8:	1c29      	adds	r1, r5, #0
10008bca:	2200      	movs	r2, #0
10008bcc:	2300      	movs	r3, #0
10008bce:	f7fd ff63 	bl	10006a98 <__aeabi_dcmpeq>
10008bd2:	2800      	cmp	r0, #0
10008bd4:	d001      	beq.n	10008bda <__cvt+0xa8>
10008bd6:	9b07      	ldr	r3, [sp, #28]
10008bd8:	9309      	str	r3, [sp, #36]	; 0x24
10008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008bdc:	9a07      	ldr	r2, [sp, #28]
10008bde:	4293      	cmp	r3, r2
10008be0:	d204      	bcs.n	10008bec <__cvt+0xba>
10008be2:	1c5a      	adds	r2, r3, #1
10008be4:	9209      	str	r2, [sp, #36]	; 0x24
10008be6:	2230      	movs	r2, #48	; 0x30
10008be8:	701a      	strb	r2, [r3, #0]
10008bea:	e7f6      	b.n	10008bda <__cvt+0xa8>
10008bec:	1c38      	adds	r0, r7, #0
10008bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008bf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
10008bf2:	1bdb      	subs	r3, r3, r7
10008bf4:	6013      	str	r3, [r2, #0]
10008bf6:	b00b      	add	sp, #44	; 0x2c
10008bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008bfa <__exponent>:
10008bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10008bfc:	232b      	movs	r3, #43	; 0x2b
10008bfe:	1c07      	adds	r7, r0, #0
10008c00:	1c0c      	adds	r4, r1, #0
10008c02:	7002      	strb	r2, [r0, #0]
10008c04:	1c86      	adds	r6, r0, #2
10008c06:	2900      	cmp	r1, #0
10008c08:	da01      	bge.n	10008c0e <__exponent+0x14>
10008c0a:	232d      	movs	r3, #45	; 0x2d
10008c0c:	424c      	negs	r4, r1
10008c0e:	707b      	strb	r3, [r7, #1]
10008c10:	2c09      	cmp	r4, #9
10008c12:	dd1c      	ble.n	10008c4e <__exponent+0x54>
10008c14:	466b      	mov	r3, sp
10008c16:	1ddd      	adds	r5, r3, #7
10008c18:	1c20      	adds	r0, r4, #0
10008c1a:	210a      	movs	r1, #10
10008c1c:	f7fd ff20 	bl	10006a60 <__aeabi_idivmod>
10008c20:	3d01      	subs	r5, #1
10008c22:	3130      	adds	r1, #48	; 0x30
10008c24:	7029      	strb	r1, [r5, #0]
10008c26:	1c20      	adds	r0, r4, #0
10008c28:	210a      	movs	r1, #10
10008c2a:	f7fd fe33 	bl	10006894 <__aeabi_idiv>
10008c2e:	1e04      	subs	r4, r0, #0
10008c30:	2c09      	cmp	r4, #9
10008c32:	dcf1      	bgt.n	10008c18 <__exponent+0x1e>
10008c34:	3d01      	subs	r5, #1
10008c36:	3430      	adds	r4, #48	; 0x30
10008c38:	702c      	strb	r4, [r5, #0]
10008c3a:	466b      	mov	r3, sp
10008c3c:	3307      	adds	r3, #7
10008c3e:	1c30      	adds	r0, r6, #0
10008c40:	42ab      	cmp	r3, r5
10008c42:	d909      	bls.n	10008c58 <__exponent+0x5e>
10008c44:	782b      	ldrb	r3, [r5, #0]
10008c46:	3501      	adds	r5, #1
10008c48:	7033      	strb	r3, [r6, #0]
10008c4a:	3601      	adds	r6, #1
10008c4c:	e7f5      	b.n	10008c3a <__exponent+0x40>
10008c4e:	2330      	movs	r3, #48	; 0x30
10008c50:	18e4      	adds	r4, r4, r3
10008c52:	7033      	strb	r3, [r6, #0]
10008c54:	1cb0      	adds	r0, r6, #2
10008c56:	7074      	strb	r4, [r6, #1]
10008c58:	1bc0      	subs	r0, r0, r7
10008c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10008c5c <_printf_float>:
10008c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008c5e:	b093      	sub	sp, #76	; 0x4c
10008c60:	1c0c      	adds	r4, r1, #0
10008c62:	9208      	str	r2, [sp, #32]
10008c64:	9e18      	ldr	r6, [sp, #96]	; 0x60
10008c66:	9309      	str	r3, [sp, #36]	; 0x24
10008c68:	1c05      	adds	r5, r0, #0
10008c6a:	f002 fe69 	bl	1000b940 <_localeconv_r>
10008c6e:	6803      	ldr	r3, [r0, #0]
10008c70:	1c18      	adds	r0, r3, #0
10008c72:	930b      	str	r3, [sp, #44]	; 0x2c
10008c74:	f000 fde8 	bl	10009848 <strlen>
10008c78:	2300      	movs	r3, #0
10008c7a:	2207      	movs	r2, #7
10008c7c:	9310      	str	r3, [sp, #64]	; 0x40
10008c7e:	6833      	ldr	r3, [r6, #0]
10008c80:	900c      	str	r0, [sp, #48]	; 0x30
10008c82:	3307      	adds	r3, #7
10008c84:	4393      	bics	r3, r2
10008c86:	1c1a      	adds	r2, r3, #0
10008c88:	6818      	ldr	r0, [r3, #0]
10008c8a:	6859      	ldr	r1, [r3, #4]
10008c8c:	3208      	adds	r2, #8
10008c8e:	7e27      	ldrb	r7, [r4, #24]
10008c90:	6032      	str	r2, [r6, #0]
10008c92:	64a0      	str	r0, [r4, #72]	; 0x48
10008c94:	64e1      	str	r1, [r4, #76]	; 0x4c
10008c96:	f000 fd89 	bl	100097ac <__fpclassifyd>
10008c9a:	2801      	cmp	r0, #1
10008c9c:	d118      	bne.n	10008cd0 <_printf_float+0x74>
10008c9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008ca0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008ca2:	2200      	movs	r2, #0
10008ca4:	2300      	movs	r3, #0
10008ca6:	f7fd fefd 	bl	10006aa4 <__aeabi_dcmplt>
10008caa:	2800      	cmp	r0, #0
10008cac:	d003      	beq.n	10008cb6 <_printf_float+0x5a>
10008cae:	1c23      	adds	r3, r4, #0
10008cb0:	222d      	movs	r2, #45	; 0x2d
10008cb2:	3343      	adds	r3, #67	; 0x43
10008cb4:	701a      	strb	r2, [r3, #0]
10008cb6:	4bb7      	ldr	r3, [pc, #732]	; (10008f94 <_printf_float+0x338>)
10008cb8:	930a      	str	r3, [sp, #40]	; 0x28
10008cba:	2f47      	cmp	r7, #71	; 0x47
10008cbc:	d901      	bls.n	10008cc2 <_printf_float+0x66>
10008cbe:	4bb6      	ldr	r3, [pc, #728]	; (10008f98 <_printf_float+0x33c>)
10008cc0:	930a      	str	r3, [sp, #40]	; 0x28
10008cc2:	2303      	movs	r3, #3
10008cc4:	6822      	ldr	r2, [r4, #0]
10008cc6:	6123      	str	r3, [r4, #16]
10008cc8:	3301      	adds	r3, #1
10008cca:	439a      	bics	r2, r3
10008ccc:	6022      	str	r2, [r4, #0]
10008cce:	e012      	b.n	10008cf6 <_printf_float+0x9a>
10008cd0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008cd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008cd4:	f000 fd6a 	bl	100097ac <__fpclassifyd>
10008cd8:	6826      	ldr	r6, [r4, #0]
10008cda:	2800      	cmp	r0, #0
10008cdc:	d10d      	bne.n	10008cfa <_printf_float+0x9e>
10008cde:	4baf      	ldr	r3, [pc, #700]	; (10008f9c <_printf_float+0x340>)
10008ce0:	930a      	str	r3, [sp, #40]	; 0x28
10008ce2:	2f47      	cmp	r7, #71	; 0x47
10008ce4:	d901      	bls.n	10008cea <_printf_float+0x8e>
10008ce6:	4bae      	ldr	r3, [pc, #696]	; (10008fa0 <_printf_float+0x344>)
10008ce8:	930a      	str	r3, [sp, #40]	; 0x28
10008cea:	2303      	movs	r3, #3
10008cec:	1c31      	adds	r1, r6, #0
10008cee:	6123      	str	r3, [r4, #16]
10008cf0:	3301      	adds	r3, #1
10008cf2:	4399      	bics	r1, r3
10008cf4:	6021      	str	r1, [r4, #0]
10008cf6:	2600      	movs	r6, #0
10008cf8:	e080      	b.n	10008dfc <_printf_float+0x1a0>
10008cfa:	2180      	movs	r1, #128	; 0x80
10008cfc:	6860      	ldr	r0, [r4, #4]
10008cfe:	00c9      	lsls	r1, r1, #3
10008d00:	1c43      	adds	r3, r0, #1
10008d02:	d101      	bne.n	10008d08 <_printf_float+0xac>
10008d04:	2306      	movs	r3, #6
10008d06:	e009      	b.n	10008d1c <_printf_float+0xc0>
10008d08:	6ca2      	ldr	r2, [r4, #72]	; 0x48
10008d0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10008d0c:	2f67      	cmp	r7, #103	; 0x67
10008d0e:	d001      	beq.n	10008d14 <_printf_float+0xb8>
10008d10:	2f47      	cmp	r7, #71	; 0x47
10008d12:	d104      	bne.n	10008d1e <_printf_float+0xc2>
10008d14:	2800      	cmp	r0, #0
10008d16:	d000      	beq.n	10008d1a <_printf_float+0xbe>
10008d18:	e1c1      	b.n	1000909e <_printf_float+0x442>
10008d1a:	2301      	movs	r3, #1
10008d1c:	6063      	str	r3, [r4, #4]
10008d1e:	6863      	ldr	r3, [r4, #4]
10008d20:	4331      	orrs	r1, r6
10008d22:	9300      	str	r3, [sp, #0]
10008d24:	2323      	movs	r3, #35	; 0x23
10008d26:	6021      	str	r1, [r4, #0]
10008d28:	9101      	str	r1, [sp, #4]
10008d2a:	2100      	movs	r1, #0
10008d2c:	aa06      	add	r2, sp, #24
10008d2e:	189b      	adds	r3, r3, r2
10008d30:	9302      	str	r3, [sp, #8]
10008d32:	ab0f      	add	r3, sp, #60	; 0x3c
10008d34:	9303      	str	r3, [sp, #12]
10008d36:	ab10      	add	r3, sp, #64	; 0x40
10008d38:	9305      	str	r3, [sp, #20]
10008d3a:	9704      	str	r7, [sp, #16]
10008d3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
10008d3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
10008d40:	9106      	str	r1, [sp, #24]
10008d42:	1c28      	adds	r0, r5, #0
10008d44:	f7ff fef5 	bl	10008b32 <__cvt>
10008d48:	2320      	movs	r3, #32
10008d4a:	1c3a      	adds	r2, r7, #0
10008d4c:	900a      	str	r0, [sp, #40]	; 0x28
10008d4e:	439a      	bics	r2, r3
10008d50:	2a47      	cmp	r2, #71	; 0x47
10008d52:	d107      	bne.n	10008d64 <_printf_float+0x108>
10008d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008d56:	1cda      	adds	r2, r3, #3
10008d58:	db02      	blt.n	10008d60 <_printf_float+0x104>
10008d5a:	6862      	ldr	r2, [r4, #4]
10008d5c:	4293      	cmp	r3, r2
10008d5e:	dd2d      	ble.n	10008dbc <_printf_float+0x160>
10008d60:	3f02      	subs	r7, #2
10008d62:	b2ff      	uxtb	r7, r7
10008d64:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008d66:	2f65      	cmp	r7, #101	; 0x65
10008d68:	d812      	bhi.n	10008d90 <_printf_float+0x134>
10008d6a:	1c20      	adds	r0, r4, #0
10008d6c:	3901      	subs	r1, #1
10008d6e:	1c3a      	adds	r2, r7, #0
10008d70:	3050      	adds	r0, #80	; 0x50
10008d72:	910f      	str	r1, [sp, #60]	; 0x3c
10008d74:	f7ff ff41 	bl	10008bfa <__exponent>
10008d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008d7a:	1c06      	adds	r6, r0, #0
10008d7c:	1883      	adds	r3, r0, r2
10008d7e:	6123      	str	r3, [r4, #16]
10008d80:	2a01      	cmp	r2, #1
10008d82:	dc02      	bgt.n	10008d8a <_printf_float+0x12e>
10008d84:	6822      	ldr	r2, [r4, #0]
10008d86:	07d2      	lsls	r2, r2, #31
10008d88:	d52e      	bpl.n	10008de8 <_printf_float+0x18c>
10008d8a:	3301      	adds	r3, #1
10008d8c:	6123      	str	r3, [r4, #16]
10008d8e:	e02b      	b.n	10008de8 <_printf_float+0x18c>
10008d90:	2f66      	cmp	r7, #102	; 0x66
10008d92:	d114      	bne.n	10008dbe <_printf_float+0x162>
10008d94:	6863      	ldr	r3, [r4, #4]
10008d96:	2900      	cmp	r1, #0
10008d98:	dd08      	ble.n	10008dac <_printf_float+0x150>
10008d9a:	6121      	str	r1, [r4, #16]
10008d9c:	2b00      	cmp	r3, #0
10008d9e:	d102      	bne.n	10008da6 <_printf_float+0x14a>
10008da0:	6822      	ldr	r2, [r4, #0]
10008da2:	07d2      	lsls	r2, r2, #31
10008da4:	d51d      	bpl.n	10008de2 <_printf_float+0x186>
10008da6:	3301      	adds	r3, #1
10008da8:	18cb      	adds	r3, r1, r3
10008daa:	e011      	b.n	10008dd0 <_printf_float+0x174>
10008dac:	2b00      	cmp	r3, #0
10008dae:	d103      	bne.n	10008db8 <_printf_float+0x15c>
10008db0:	2201      	movs	r2, #1
10008db2:	6821      	ldr	r1, [r4, #0]
10008db4:	4211      	tst	r1, r2
10008db6:	d013      	beq.n	10008de0 <_printf_float+0x184>
10008db8:	1c9a      	adds	r2, r3, #2
10008dba:	e011      	b.n	10008de0 <_printf_float+0x184>
10008dbc:	2767      	movs	r7, #103	; 0x67
10008dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008dc0:	9810      	ldr	r0, [sp, #64]	; 0x40
10008dc2:	4283      	cmp	r3, r0
10008dc4:	db06      	blt.n	10008dd4 <_printf_float+0x178>
10008dc6:	6822      	ldr	r2, [r4, #0]
10008dc8:	6123      	str	r3, [r4, #16]
10008dca:	07d2      	lsls	r2, r2, #31
10008dcc:	d509      	bpl.n	10008de2 <_printf_float+0x186>
10008dce:	3301      	adds	r3, #1
10008dd0:	6123      	str	r3, [r4, #16]
10008dd2:	e006      	b.n	10008de2 <_printf_float+0x186>
10008dd4:	2201      	movs	r2, #1
10008dd6:	2b00      	cmp	r3, #0
10008dd8:	dc01      	bgt.n	10008dde <_printf_float+0x182>
10008dda:	2102      	movs	r1, #2
10008ddc:	1aca      	subs	r2, r1, r3
10008dde:	1882      	adds	r2, r0, r2
10008de0:	6122      	str	r2, [r4, #16]
10008de2:	2600      	movs	r6, #0
10008de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008de6:	65a3      	str	r3, [r4, #88]	; 0x58
10008de8:	2323      	movs	r3, #35	; 0x23
10008dea:	aa06      	add	r2, sp, #24
10008dec:	189b      	adds	r3, r3, r2
10008dee:	781b      	ldrb	r3, [r3, #0]
10008df0:	2b00      	cmp	r3, #0
10008df2:	d003      	beq.n	10008dfc <_printf_float+0x1a0>
10008df4:	1c23      	adds	r3, r4, #0
10008df6:	222d      	movs	r2, #45	; 0x2d
10008df8:	3343      	adds	r3, #67	; 0x43
10008dfa:	701a      	strb	r2, [r3, #0]
10008dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008dfe:	1c28      	adds	r0, r5, #0
10008e00:	9300      	str	r3, [sp, #0]
10008e02:	1c21      	adds	r1, r4, #0
10008e04:	9b08      	ldr	r3, [sp, #32]
10008e06:	aa11      	add	r2, sp, #68	; 0x44
10008e08:	f000 f960 	bl	100090cc <_printf_common>
10008e0c:	1c43      	adds	r3, r0, #1
10008e0e:	d102      	bne.n	10008e16 <_printf_float+0x1ba>
10008e10:	2001      	movs	r0, #1
10008e12:	4240      	negs	r0, r0
10008e14:	e157      	b.n	100090c6 <_printf_float+0x46a>
10008e16:	6822      	ldr	r2, [r4, #0]
10008e18:	0553      	lsls	r3, r2, #21
10008e1a:	d404      	bmi.n	10008e26 <_printf_float+0x1ca>
10008e1c:	1c28      	adds	r0, r5, #0
10008e1e:	9908      	ldr	r1, [sp, #32]
10008e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008e22:	6923      	ldr	r3, [r4, #16]
10008e24:	e117      	b.n	10009056 <_printf_float+0x3fa>
10008e26:	2f65      	cmp	r7, #101	; 0x65
10008e28:	d800      	bhi.n	10008e2c <_printf_float+0x1d0>
10008e2a:	e0d5      	b.n	10008fd8 <_printf_float+0x37c>
10008e2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
10008e2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
10008e30:	2200      	movs	r2, #0
10008e32:	2300      	movs	r3, #0
10008e34:	f7fd fe30 	bl	10006a98 <__aeabi_dcmpeq>
10008e38:	2800      	cmp	r0, #0
10008e3a:	d02b      	beq.n	10008e94 <_printf_float+0x238>
10008e3c:	2301      	movs	r3, #1
10008e3e:	1c28      	adds	r0, r5, #0
10008e40:	9908      	ldr	r1, [sp, #32]
10008e42:	4a58      	ldr	r2, [pc, #352]	; (10008fa4 <_printf_float+0x348>)
10008e44:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008e46:	47b0      	blx	r6
10008e48:	1c43      	adds	r3, r0, #1
10008e4a:	d0e1      	beq.n	10008e10 <_printf_float+0x1b4>
10008e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008e50:	4293      	cmp	r3, r2
10008e52:	db07      	blt.n	10008e64 <_printf_float+0x208>
10008e54:	6823      	ldr	r3, [r4, #0]
10008e56:	07db      	lsls	r3, r3, #31
10008e58:	d404      	bmi.n	10008e64 <_printf_float+0x208>
10008e5a:	6823      	ldr	r3, [r4, #0]
10008e5c:	079b      	lsls	r3, r3, #30
10008e5e:	d500      	bpl.n	10008e62 <_printf_float+0x206>
10008e60:	e11b      	b.n	1000909a <_printf_float+0x43e>
10008e62:	e114      	b.n	1000908e <_printf_float+0x432>
10008e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008e66:	1c28      	adds	r0, r5, #0
10008e68:	9908      	ldr	r1, [sp, #32]
10008e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008e6e:	47b0      	blx	r6
10008e70:	2600      	movs	r6, #0
10008e72:	1c43      	adds	r3, r0, #1
10008e74:	d0cc      	beq.n	10008e10 <_printf_float+0x1b4>
10008e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008e78:	3b01      	subs	r3, #1
10008e7a:	429e      	cmp	r6, r3
10008e7c:	daed      	bge.n	10008e5a <_printf_float+0x1fe>
10008e7e:	1c22      	adds	r2, r4, #0
10008e80:	2301      	movs	r3, #1
10008e82:	1c28      	adds	r0, r5, #0
10008e84:	9908      	ldr	r1, [sp, #32]
10008e86:	321a      	adds	r2, #26
10008e88:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008e8a:	47b8      	blx	r7
10008e8c:	1c43      	adds	r3, r0, #1
10008e8e:	d0bf      	beq.n	10008e10 <_printf_float+0x1b4>
10008e90:	3601      	adds	r6, #1
10008e92:	e7f0      	b.n	10008e76 <_printf_float+0x21a>
10008e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008e96:	2b00      	cmp	r3, #0
10008e98:	dc2b      	bgt.n	10008ef2 <_printf_float+0x296>
10008e9a:	2301      	movs	r3, #1
10008e9c:	1c28      	adds	r0, r5, #0
10008e9e:	9908      	ldr	r1, [sp, #32]
10008ea0:	4a40      	ldr	r2, [pc, #256]	; (10008fa4 <_printf_float+0x348>)
10008ea2:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008ea4:	47b0      	blx	r6
10008ea6:	1c43      	adds	r3, r0, #1
10008ea8:	d0b2      	beq.n	10008e10 <_printf_float+0x1b4>
10008eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008eac:	2b00      	cmp	r3, #0
10008eae:	d105      	bne.n	10008ebc <_printf_float+0x260>
10008eb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008eb2:	2b00      	cmp	r3, #0
10008eb4:	d102      	bne.n	10008ebc <_printf_float+0x260>
10008eb6:	6823      	ldr	r3, [r4, #0]
10008eb8:	07db      	lsls	r3, r3, #31
10008eba:	d5ce      	bpl.n	10008e5a <_printf_float+0x1fe>
10008ebc:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008ebe:	1c28      	adds	r0, r5, #0
10008ec0:	9908      	ldr	r1, [sp, #32]
10008ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008ec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008ec6:	47b0      	blx	r6
10008ec8:	2600      	movs	r6, #0
10008eca:	1c43      	adds	r3, r0, #1
10008ecc:	d0a0      	beq.n	10008e10 <_printf_float+0x1b4>
10008ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008ed0:	1c28      	adds	r0, r5, #0
10008ed2:	425b      	negs	r3, r3
10008ed4:	9908      	ldr	r1, [sp, #32]
10008ed6:	429e      	cmp	r6, r3
10008ed8:	da08      	bge.n	10008eec <_printf_float+0x290>
10008eda:	1c22      	adds	r2, r4, #0
10008edc:	2301      	movs	r3, #1
10008ede:	321a      	adds	r2, #26
10008ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008ee2:	47b8      	blx	r7
10008ee4:	1c43      	adds	r3, r0, #1
10008ee6:	d093      	beq.n	10008e10 <_printf_float+0x1b4>
10008ee8:	3601      	adds	r6, #1
10008eea:	e7f0      	b.n	10008ece <_printf_float+0x272>
10008eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008ef0:	e0b1      	b.n	10009056 <_printf_float+0x3fa>
10008ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008ef4:	6da6      	ldr	r6, [r4, #88]	; 0x58
10008ef6:	429e      	cmp	r6, r3
10008ef8:	dd00      	ble.n	10008efc <_printf_float+0x2a0>
10008efa:	1c1e      	adds	r6, r3, #0
10008efc:	2e00      	cmp	r6, #0
10008efe:	dc01      	bgt.n	10008f04 <_printf_float+0x2a8>
10008f00:	2300      	movs	r3, #0
10008f02:	e014      	b.n	10008f2e <_printf_float+0x2d2>
10008f04:	1c33      	adds	r3, r6, #0
10008f06:	1c28      	adds	r0, r5, #0
10008f08:	9908      	ldr	r1, [sp, #32]
10008f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008f0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f0e:	47b8      	blx	r7
10008f10:	1c43      	adds	r3, r0, #1
10008f12:	d1f5      	bne.n	10008f00 <_printf_float+0x2a4>
10008f14:	e77c      	b.n	10008e10 <_printf_float+0x1b4>
10008f16:	1c22      	adds	r2, r4, #0
10008f18:	2301      	movs	r3, #1
10008f1a:	1c28      	adds	r0, r5, #0
10008f1c:	9908      	ldr	r1, [sp, #32]
10008f1e:	321a      	adds	r2, #26
10008f20:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f22:	47b8      	blx	r7
10008f24:	1c43      	adds	r3, r0, #1
10008f26:	d100      	bne.n	10008f2a <_printf_float+0x2ce>
10008f28:	e772      	b.n	10008e10 <_printf_float+0x1b4>
10008f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008f2c:	3301      	adds	r3, #1
10008f2e:	930d      	str	r3, [sp, #52]	; 0x34
10008f30:	43f3      	mvns	r3, r6
10008f32:	6da2      	ldr	r2, [r4, #88]	; 0x58
10008f34:	17db      	asrs	r3, r3, #31
10008f36:	990d      	ldr	r1, [sp, #52]	; 0x34
10008f38:	4033      	ands	r3, r6
10008f3a:	1ad3      	subs	r3, r2, r3
10008f3c:	4299      	cmp	r1, r3
10008f3e:	dbea      	blt.n	10008f16 <_printf_float+0x2ba>
10008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008f42:	189e      	adds	r6, r3, r2
10008f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008f46:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008f48:	4293      	cmp	r3, r2
10008f4a:	db0e      	blt.n	10008f6a <_printf_float+0x30e>
10008f4c:	6823      	ldr	r3, [r4, #0]
10008f4e:	07db      	lsls	r3, r3, #31
10008f50:	d40b      	bmi.n	10008f6a <_printf_float+0x30e>
10008f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008f56:	18d7      	adds	r7, r2, r3
10008f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008f5a:	1bbf      	subs	r7, r7, r6
10008f5c:	1a9b      	subs	r3, r3, r2
10008f5e:	429f      	cmp	r7, r3
10008f60:	dd00      	ble.n	10008f64 <_printf_float+0x308>
10008f62:	1c1f      	adds	r7, r3, #0
10008f64:	2f00      	cmp	r7, #0
10008f66:	dc09      	bgt.n	10008f7c <_printf_float+0x320>
10008f68:	e011      	b.n	10008f8e <_printf_float+0x332>
10008f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008f6c:	1c28      	adds	r0, r5, #0
10008f6e:	9908      	ldr	r1, [sp, #32]
10008f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008f72:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008f74:	47b8      	blx	r7
10008f76:	1c43      	adds	r3, r0, #1
10008f78:	d1eb      	bne.n	10008f52 <_printf_float+0x2f6>
10008f7a:	e749      	b.n	10008e10 <_printf_float+0x1b4>
10008f7c:	1c32      	adds	r2, r6, #0
10008f7e:	1c3b      	adds	r3, r7, #0
10008f80:	1c28      	adds	r0, r5, #0
10008f82:	9908      	ldr	r1, [sp, #32]
10008f84:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008f86:	47b0      	blx	r6
10008f88:	1c43      	adds	r3, r0, #1
10008f8a:	d100      	bne.n	10008f8e <_printf_float+0x332>
10008f8c:	e740      	b.n	10008e10 <_printf_float+0x1b4>
10008f8e:	2300      	movs	r3, #0
10008f90:	e016      	b.n	10008fc0 <_printf_float+0x364>
10008f92:	46c0      	nop			; (mov r8, r8)
10008f94:	1000ce82 	.word	0x1000ce82
10008f98:	1000ce86 	.word	0x1000ce86
10008f9c:	1000ce8a 	.word	0x1000ce8a
10008fa0:	1000ce8e 	.word	0x1000ce8e
10008fa4:	1000ce92 	.word	0x1000ce92
10008fa8:	1c22      	adds	r2, r4, #0
10008faa:	2301      	movs	r3, #1
10008fac:	1c28      	adds	r0, r5, #0
10008fae:	9908      	ldr	r1, [sp, #32]
10008fb0:	321a      	adds	r2, #26
10008fb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
10008fb4:	47b0      	blx	r6
10008fb6:	1c43      	adds	r3, r0, #1
10008fb8:	d100      	bne.n	10008fbc <_printf_float+0x360>
10008fba:	e729      	b.n	10008e10 <_printf_float+0x1b4>
10008fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008fbe:	3301      	adds	r3, #1
10008fc0:	930a      	str	r3, [sp, #40]	; 0x28
10008fc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10008fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008fc6:	1a9a      	subs	r2, r3, r2
10008fc8:	43fb      	mvns	r3, r7
10008fca:	17db      	asrs	r3, r3, #31
10008fcc:	403b      	ands	r3, r7
10008fce:	1ad3      	subs	r3, r2, r3
10008fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008fd2:	429a      	cmp	r2, r3
10008fd4:	dbe8      	blt.n	10008fa8 <_printf_float+0x34c>
10008fd6:	e740      	b.n	10008e5a <_printf_float+0x1fe>
10008fd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008fda:	1c28      	adds	r0, r5, #0
10008fdc:	9908      	ldr	r1, [sp, #32]
10008fde:	2b01      	cmp	r3, #1
10008fe0:	dc02      	bgt.n	10008fe8 <_printf_float+0x38c>
10008fe2:	2301      	movs	r3, #1
10008fe4:	421a      	tst	r2, r3
10008fe6:	d03c      	beq.n	10009062 <_printf_float+0x406>
10008fe8:	2301      	movs	r3, #1
10008fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008fec:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008fee:	47b8      	blx	r7
10008ff0:	1c43      	adds	r3, r0, #1
10008ff2:	d100      	bne.n	10008ff6 <_printf_float+0x39a>
10008ff4:	e70c      	b.n	10008e10 <_printf_float+0x1b4>
10008ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008ff8:	1c28      	adds	r0, r5, #0
10008ffa:	9908      	ldr	r1, [sp, #32]
10008ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10008ffe:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009000:	47b8      	blx	r7
10009002:	1c43      	adds	r3, r0, #1
10009004:	d100      	bne.n	10009008 <_printf_float+0x3ac>
10009006:	e703      	b.n	10008e10 <_printf_float+0x1b4>
10009008:	6ca0      	ldr	r0, [r4, #72]	; 0x48
1000900a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1000900c:	2300      	movs	r3, #0
1000900e:	2200      	movs	r2, #0
10009010:	f7fd fd42 	bl	10006a98 <__aeabi_dcmpeq>
10009014:	2300      	movs	r3, #0
10009016:	2800      	cmp	r0, #0
10009018:	d112      	bne.n	10009040 <_printf_float+0x3e4>
1000901a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000901c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000901e:	3201      	adds	r2, #1
10009020:	3b01      	subs	r3, #1
10009022:	1c28      	adds	r0, r5, #0
10009024:	9908      	ldr	r1, [sp, #32]
10009026:	e01d      	b.n	10009064 <_printf_float+0x408>
10009028:	1c22      	adds	r2, r4, #0
1000902a:	2301      	movs	r3, #1
1000902c:	1c28      	adds	r0, r5, #0
1000902e:	9908      	ldr	r1, [sp, #32]
10009030:	321a      	adds	r2, #26
10009032:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009034:	47b8      	blx	r7
10009036:	1c43      	adds	r3, r0, #1
10009038:	d100      	bne.n	1000903c <_printf_float+0x3e0>
1000903a:	e6e9      	b.n	10008e10 <_printf_float+0x1b4>
1000903c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000903e:	3301      	adds	r3, #1
10009040:	930a      	str	r3, [sp, #40]	; 0x28
10009042:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009046:	3b01      	subs	r3, #1
10009048:	429a      	cmp	r2, r3
1000904a:	dbed      	blt.n	10009028 <_printf_float+0x3cc>
1000904c:	1c22      	adds	r2, r4, #0
1000904e:	1c28      	adds	r0, r5, #0
10009050:	1c33      	adds	r3, r6, #0
10009052:	9908      	ldr	r1, [sp, #32]
10009054:	3250      	adds	r2, #80	; 0x50
10009056:	9e09      	ldr	r6, [sp, #36]	; 0x24
10009058:	47b0      	blx	r6
1000905a:	1c43      	adds	r3, r0, #1
1000905c:	d000      	beq.n	10009060 <_printf_float+0x404>
1000905e:	e6fc      	b.n	10008e5a <_printf_float+0x1fe>
10009060:	e6d6      	b.n	10008e10 <_printf_float+0x1b4>
10009062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009064:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009066:	47b8      	blx	r7
10009068:	1c43      	adds	r3, r0, #1
1000906a:	d1ef      	bne.n	1000904c <_printf_float+0x3f0>
1000906c:	e6d0      	b.n	10008e10 <_printf_float+0x1b4>
1000906e:	1c22      	adds	r2, r4, #0
10009070:	2301      	movs	r3, #1
10009072:	1c28      	adds	r0, r5, #0
10009074:	9908      	ldr	r1, [sp, #32]
10009076:	3219      	adds	r2, #25
10009078:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000907a:	47b8      	blx	r7
1000907c:	1c43      	adds	r3, r0, #1
1000907e:	d100      	bne.n	10009082 <_printf_float+0x426>
10009080:	e6c6      	b.n	10008e10 <_printf_float+0x1b4>
10009082:	3601      	adds	r6, #1
10009084:	68e3      	ldr	r3, [r4, #12]
10009086:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009088:	1a9b      	subs	r3, r3, r2
1000908a:	429e      	cmp	r6, r3
1000908c:	dbef      	blt.n	1000906e <_printf_float+0x412>
1000908e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009090:	68e0      	ldr	r0, [r4, #12]
10009092:	4298      	cmp	r0, r3
10009094:	da17      	bge.n	100090c6 <_printf_float+0x46a>
10009096:	1c18      	adds	r0, r3, #0
10009098:	e015      	b.n	100090c6 <_printf_float+0x46a>
1000909a:	2600      	movs	r6, #0
1000909c:	e7f2      	b.n	10009084 <_printf_float+0x428>
1000909e:	4331      	orrs	r1, r6
100090a0:	6021      	str	r1, [r4, #0]
100090a2:	9101      	str	r1, [sp, #4]
100090a4:	2123      	movs	r1, #35	; 0x23
100090a6:	9000      	str	r0, [sp, #0]
100090a8:	a806      	add	r0, sp, #24
100090aa:	1809      	adds	r1, r1, r0
100090ac:	9102      	str	r1, [sp, #8]
100090ae:	a90f      	add	r1, sp, #60	; 0x3c
100090b0:	9103      	str	r1, [sp, #12]
100090b2:	a910      	add	r1, sp, #64	; 0x40
100090b4:	9105      	str	r1, [sp, #20]
100090b6:	2100      	movs	r1, #0
100090b8:	9704      	str	r7, [sp, #16]
100090ba:	9106      	str	r1, [sp, #24]
100090bc:	1c28      	adds	r0, r5, #0
100090be:	f7ff fd38 	bl	10008b32 <__cvt>
100090c2:	900a      	str	r0, [sp, #40]	; 0x28
100090c4:	e646      	b.n	10008d54 <_printf_float+0xf8>
100090c6:	b013      	add	sp, #76	; 0x4c
100090c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090ca:	46c0      	nop			; (mov r8, r8)

100090cc <_printf_common>:
100090cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100090ce:	1c17      	adds	r7, r2, #0
100090d0:	9301      	str	r3, [sp, #4]
100090d2:	690a      	ldr	r2, [r1, #16]
100090d4:	688b      	ldr	r3, [r1, #8]
100090d6:	9000      	str	r0, [sp, #0]
100090d8:	1c0c      	adds	r4, r1, #0
100090da:	4293      	cmp	r3, r2
100090dc:	da00      	bge.n	100090e0 <_printf_common+0x14>
100090de:	1c13      	adds	r3, r2, #0
100090e0:	1c22      	adds	r2, r4, #0
100090e2:	603b      	str	r3, [r7, #0]
100090e4:	3243      	adds	r2, #67	; 0x43
100090e6:	7812      	ldrb	r2, [r2, #0]
100090e8:	2a00      	cmp	r2, #0
100090ea:	d001      	beq.n	100090f0 <_printf_common+0x24>
100090ec:	3301      	adds	r3, #1
100090ee:	603b      	str	r3, [r7, #0]
100090f0:	6823      	ldr	r3, [r4, #0]
100090f2:	069b      	lsls	r3, r3, #26
100090f4:	d502      	bpl.n	100090fc <_printf_common+0x30>
100090f6:	683b      	ldr	r3, [r7, #0]
100090f8:	3302      	adds	r3, #2
100090fa:	603b      	str	r3, [r7, #0]
100090fc:	2506      	movs	r5, #6
100090fe:	6823      	ldr	r3, [r4, #0]
10009100:	401d      	ands	r5, r3
10009102:	d01e      	beq.n	10009142 <_printf_common+0x76>
10009104:	1c23      	adds	r3, r4, #0
10009106:	3343      	adds	r3, #67	; 0x43
10009108:	781b      	ldrb	r3, [r3, #0]
1000910a:	1e5a      	subs	r2, r3, #1
1000910c:	4193      	sbcs	r3, r2
1000910e:	6822      	ldr	r2, [r4, #0]
10009110:	0692      	lsls	r2, r2, #26
10009112:	d51c      	bpl.n	1000914e <_printf_common+0x82>
10009114:	2030      	movs	r0, #48	; 0x30
10009116:	18e1      	adds	r1, r4, r3
10009118:	3140      	adds	r1, #64	; 0x40
1000911a:	70c8      	strb	r0, [r1, #3]
1000911c:	1c21      	adds	r1, r4, #0
1000911e:	1c5a      	adds	r2, r3, #1
10009120:	3145      	adds	r1, #69	; 0x45
10009122:	7809      	ldrb	r1, [r1, #0]
10009124:	18a2      	adds	r2, r4, r2
10009126:	3240      	adds	r2, #64	; 0x40
10009128:	3302      	adds	r3, #2
1000912a:	70d1      	strb	r1, [r2, #3]
1000912c:	e00f      	b.n	1000914e <_printf_common+0x82>
1000912e:	1c22      	adds	r2, r4, #0
10009130:	2301      	movs	r3, #1
10009132:	9800      	ldr	r0, [sp, #0]
10009134:	9901      	ldr	r1, [sp, #4]
10009136:	3219      	adds	r2, #25
10009138:	9e08      	ldr	r6, [sp, #32]
1000913a:	47b0      	blx	r6
1000913c:	1c43      	adds	r3, r0, #1
1000913e:	d00e      	beq.n	1000915e <_printf_common+0x92>
10009140:	3501      	adds	r5, #1
10009142:	68e3      	ldr	r3, [r4, #12]
10009144:	683a      	ldr	r2, [r7, #0]
10009146:	1a9b      	subs	r3, r3, r2
10009148:	429d      	cmp	r5, r3
1000914a:	dbf0      	blt.n	1000912e <_printf_common+0x62>
1000914c:	e7da      	b.n	10009104 <_printf_common+0x38>
1000914e:	1c22      	adds	r2, r4, #0
10009150:	9800      	ldr	r0, [sp, #0]
10009152:	9901      	ldr	r1, [sp, #4]
10009154:	3243      	adds	r2, #67	; 0x43
10009156:	9d08      	ldr	r5, [sp, #32]
10009158:	47a8      	blx	r5
1000915a:	1c43      	adds	r3, r0, #1
1000915c:	d102      	bne.n	10009164 <_printf_common+0x98>
1000915e:	2001      	movs	r0, #1
10009160:	4240      	negs	r0, r0
10009162:	e020      	b.n	100091a6 <_printf_common+0xda>
10009164:	2306      	movs	r3, #6
10009166:	6820      	ldr	r0, [r4, #0]
10009168:	68e1      	ldr	r1, [r4, #12]
1000916a:	683a      	ldr	r2, [r7, #0]
1000916c:	4003      	ands	r3, r0
1000916e:	2500      	movs	r5, #0
10009170:	2b04      	cmp	r3, #4
10009172:	d103      	bne.n	1000917c <_printf_common+0xb0>
10009174:	1a8d      	subs	r5, r1, r2
10009176:	43eb      	mvns	r3, r5
10009178:	17db      	asrs	r3, r3, #31
1000917a:	401d      	ands	r5, r3
1000917c:	68a3      	ldr	r3, [r4, #8]
1000917e:	6922      	ldr	r2, [r4, #16]
10009180:	4293      	cmp	r3, r2
10009182:	dd01      	ble.n	10009188 <_printf_common+0xbc>
10009184:	1a9b      	subs	r3, r3, r2
10009186:	18ed      	adds	r5, r5, r3
10009188:	2700      	movs	r7, #0
1000918a:	42af      	cmp	r7, r5
1000918c:	da0a      	bge.n	100091a4 <_printf_common+0xd8>
1000918e:	1c22      	adds	r2, r4, #0
10009190:	2301      	movs	r3, #1
10009192:	9800      	ldr	r0, [sp, #0]
10009194:	9901      	ldr	r1, [sp, #4]
10009196:	321a      	adds	r2, #26
10009198:	9e08      	ldr	r6, [sp, #32]
1000919a:	47b0      	blx	r6
1000919c:	1c43      	adds	r3, r0, #1
1000919e:	d0de      	beq.n	1000915e <_printf_common+0x92>
100091a0:	3701      	adds	r7, #1
100091a2:	e7f2      	b.n	1000918a <_printf_common+0xbe>
100091a4:	2000      	movs	r0, #0
100091a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100091a8 <_printf_i>:
100091a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100091aa:	b08b      	sub	sp, #44	; 0x2c
100091ac:	9206      	str	r2, [sp, #24]
100091ae:	1c0a      	adds	r2, r1, #0
100091b0:	3243      	adds	r2, #67	; 0x43
100091b2:	9307      	str	r3, [sp, #28]
100091b4:	9005      	str	r0, [sp, #20]
100091b6:	9204      	str	r2, [sp, #16]
100091b8:	7e0a      	ldrb	r2, [r1, #24]
100091ba:	1c0c      	adds	r4, r1, #0
100091bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
100091be:	2a6e      	cmp	r2, #110	; 0x6e
100091c0:	d100      	bne.n	100091c4 <_printf_i+0x1c>
100091c2:	e0a8      	b.n	10009316 <_printf_i+0x16e>
100091c4:	d811      	bhi.n	100091ea <_printf_i+0x42>
100091c6:	2a63      	cmp	r2, #99	; 0x63
100091c8:	d022      	beq.n	10009210 <_printf_i+0x68>
100091ca:	d809      	bhi.n	100091e0 <_printf_i+0x38>
100091cc:	2a00      	cmp	r2, #0
100091ce:	d100      	bne.n	100091d2 <_printf_i+0x2a>
100091d0:	e0b2      	b.n	10009338 <_printf_i+0x190>
100091d2:	2a58      	cmp	r2, #88	; 0x58
100091d4:	d000      	beq.n	100091d8 <_printf_i+0x30>
100091d6:	e0c2      	b.n	1000935e <_printf_i+0x1b6>
100091d8:	3145      	adds	r1, #69	; 0x45
100091da:	700a      	strb	r2, [r1, #0]
100091dc:	4a7c      	ldr	r2, [pc, #496]	; (100093d0 <_printf_i+0x228>)
100091de:	e04f      	b.n	10009280 <_printf_i+0xd8>
100091e0:	2a64      	cmp	r2, #100	; 0x64
100091e2:	d01d      	beq.n	10009220 <_printf_i+0x78>
100091e4:	2a69      	cmp	r2, #105	; 0x69
100091e6:	d01b      	beq.n	10009220 <_printf_i+0x78>
100091e8:	e0b9      	b.n	1000935e <_printf_i+0x1b6>
100091ea:	2a73      	cmp	r2, #115	; 0x73
100091ec:	d100      	bne.n	100091f0 <_printf_i+0x48>
100091ee:	e0a7      	b.n	10009340 <_printf_i+0x198>
100091f0:	d809      	bhi.n	10009206 <_printf_i+0x5e>
100091f2:	2a6f      	cmp	r2, #111	; 0x6f
100091f4:	d029      	beq.n	1000924a <_printf_i+0xa2>
100091f6:	2a70      	cmp	r2, #112	; 0x70
100091f8:	d000      	beq.n	100091fc <_printf_i+0x54>
100091fa:	e0b0      	b.n	1000935e <_printf_i+0x1b6>
100091fc:	2220      	movs	r2, #32
100091fe:	6809      	ldr	r1, [r1, #0]
10009200:	430a      	orrs	r2, r1
10009202:	6022      	str	r2, [r4, #0]
10009204:	e037      	b.n	10009276 <_printf_i+0xce>
10009206:	2a75      	cmp	r2, #117	; 0x75
10009208:	d01f      	beq.n	1000924a <_printf_i+0xa2>
1000920a:	2a78      	cmp	r2, #120	; 0x78
1000920c:	d033      	beq.n	10009276 <_printf_i+0xce>
1000920e:	e0a6      	b.n	1000935e <_printf_i+0x1b6>
10009210:	1c0d      	adds	r5, r1, #0
10009212:	681a      	ldr	r2, [r3, #0]
10009214:	3542      	adds	r5, #66	; 0x42
10009216:	1d11      	adds	r1, r2, #4
10009218:	6019      	str	r1, [r3, #0]
1000921a:	6813      	ldr	r3, [r2, #0]
1000921c:	702b      	strb	r3, [r5, #0]
1000921e:	e0a1      	b.n	10009364 <_printf_i+0x1bc>
10009220:	6821      	ldr	r1, [r4, #0]
10009222:	681a      	ldr	r2, [r3, #0]
10009224:	0608      	lsls	r0, r1, #24
10009226:	d503      	bpl.n	10009230 <_printf_i+0x88>
10009228:	1d11      	adds	r1, r2, #4
1000922a:	6019      	str	r1, [r3, #0]
1000922c:	6816      	ldr	r6, [r2, #0]
1000922e:	e005      	b.n	1000923c <_printf_i+0x94>
10009230:	0649      	lsls	r1, r1, #25
10009232:	d5f9      	bpl.n	10009228 <_printf_i+0x80>
10009234:	1d11      	adds	r1, r2, #4
10009236:	6019      	str	r1, [r3, #0]
10009238:	2300      	movs	r3, #0
1000923a:	5ed6      	ldrsh	r6, [r2, r3]
1000923c:	2e00      	cmp	r6, #0
1000923e:	da3b      	bge.n	100092b8 <_printf_i+0x110>
10009240:	232d      	movs	r3, #45	; 0x2d
10009242:	9a04      	ldr	r2, [sp, #16]
10009244:	4276      	negs	r6, r6
10009246:	7013      	strb	r3, [r2, #0]
10009248:	e036      	b.n	100092b8 <_printf_i+0x110>
1000924a:	6821      	ldr	r1, [r4, #0]
1000924c:	681a      	ldr	r2, [r3, #0]
1000924e:	0608      	lsls	r0, r1, #24
10009250:	d503      	bpl.n	1000925a <_printf_i+0xb2>
10009252:	1d11      	adds	r1, r2, #4
10009254:	6019      	str	r1, [r3, #0]
10009256:	6816      	ldr	r6, [r2, #0]
10009258:	e005      	b.n	10009266 <_printf_i+0xbe>
1000925a:	0649      	lsls	r1, r1, #25
1000925c:	d5f9      	bpl.n	10009252 <_printf_i+0xaa>
1000925e:	1d11      	adds	r1, r2, #4
10009260:	6019      	str	r1, [r3, #0]
10009262:	6816      	ldr	r6, [r2, #0]
10009264:	b2b6      	uxth	r6, r6
10009266:	4b5a      	ldr	r3, [pc, #360]	; (100093d0 <_printf_i+0x228>)
10009268:	7e22      	ldrb	r2, [r4, #24]
1000926a:	9303      	str	r3, [sp, #12]
1000926c:	270a      	movs	r7, #10
1000926e:	2a6f      	cmp	r2, #111	; 0x6f
10009270:	d11d      	bne.n	100092ae <_printf_i+0x106>
10009272:	2708      	movs	r7, #8
10009274:	e01b      	b.n	100092ae <_printf_i+0x106>
10009276:	1c22      	adds	r2, r4, #0
10009278:	2178      	movs	r1, #120	; 0x78
1000927a:	3245      	adds	r2, #69	; 0x45
1000927c:	7011      	strb	r1, [r2, #0]
1000927e:	4a55      	ldr	r2, [pc, #340]	; (100093d4 <_printf_i+0x22c>)
10009280:	6819      	ldr	r1, [r3, #0]
10009282:	9203      	str	r2, [sp, #12]
10009284:	1d08      	adds	r0, r1, #4
10009286:	6822      	ldr	r2, [r4, #0]
10009288:	6018      	str	r0, [r3, #0]
1000928a:	680e      	ldr	r6, [r1, #0]
1000928c:	0610      	lsls	r0, r2, #24
1000928e:	d402      	bmi.n	10009296 <_printf_i+0xee>
10009290:	0650      	lsls	r0, r2, #25
10009292:	d500      	bpl.n	10009296 <_printf_i+0xee>
10009294:	b2b6      	uxth	r6, r6
10009296:	07d3      	lsls	r3, r2, #31
10009298:	d502      	bpl.n	100092a0 <_printf_i+0xf8>
1000929a:	2320      	movs	r3, #32
1000929c:	431a      	orrs	r2, r3
1000929e:	6022      	str	r2, [r4, #0]
100092a0:	2710      	movs	r7, #16
100092a2:	2e00      	cmp	r6, #0
100092a4:	d103      	bne.n	100092ae <_printf_i+0x106>
100092a6:	2320      	movs	r3, #32
100092a8:	6822      	ldr	r2, [r4, #0]
100092aa:	439a      	bics	r2, r3
100092ac:	6022      	str	r2, [r4, #0]
100092ae:	1c23      	adds	r3, r4, #0
100092b0:	2200      	movs	r2, #0
100092b2:	3343      	adds	r3, #67	; 0x43
100092b4:	701a      	strb	r2, [r3, #0]
100092b6:	e002      	b.n	100092be <_printf_i+0x116>
100092b8:	270a      	movs	r7, #10
100092ba:	4b45      	ldr	r3, [pc, #276]	; (100093d0 <_printf_i+0x228>)
100092bc:	9303      	str	r3, [sp, #12]
100092be:	6863      	ldr	r3, [r4, #4]
100092c0:	60a3      	str	r3, [r4, #8]
100092c2:	2b00      	cmp	r3, #0
100092c4:	db03      	blt.n	100092ce <_printf_i+0x126>
100092c6:	2204      	movs	r2, #4
100092c8:	6821      	ldr	r1, [r4, #0]
100092ca:	4391      	bics	r1, r2
100092cc:	6021      	str	r1, [r4, #0]
100092ce:	2e00      	cmp	r6, #0
100092d0:	d102      	bne.n	100092d8 <_printf_i+0x130>
100092d2:	9d04      	ldr	r5, [sp, #16]
100092d4:	2b00      	cmp	r3, #0
100092d6:	d00e      	beq.n	100092f6 <_printf_i+0x14e>
100092d8:	9d04      	ldr	r5, [sp, #16]
100092da:	1c30      	adds	r0, r6, #0
100092dc:	1c39      	adds	r1, r7, #0
100092de:	f7fd facf 	bl	10006880 <__aeabi_uidivmod>
100092e2:	9b03      	ldr	r3, [sp, #12]
100092e4:	3d01      	subs	r5, #1
100092e6:	5c5b      	ldrb	r3, [r3, r1]
100092e8:	1c30      	adds	r0, r6, #0
100092ea:	702b      	strb	r3, [r5, #0]
100092ec:	1c39      	adds	r1, r7, #0
100092ee:	f7fd fa41 	bl	10006774 <__aeabi_uidiv>
100092f2:	1e06      	subs	r6, r0, #0
100092f4:	d1f1      	bne.n	100092da <_printf_i+0x132>
100092f6:	2f08      	cmp	r7, #8
100092f8:	d109      	bne.n	1000930e <_printf_i+0x166>
100092fa:	6823      	ldr	r3, [r4, #0]
100092fc:	07db      	lsls	r3, r3, #31
100092fe:	d506      	bpl.n	1000930e <_printf_i+0x166>
10009300:	6863      	ldr	r3, [r4, #4]
10009302:	6922      	ldr	r2, [r4, #16]
10009304:	4293      	cmp	r3, r2
10009306:	dc02      	bgt.n	1000930e <_printf_i+0x166>
10009308:	2330      	movs	r3, #48	; 0x30
1000930a:	3d01      	subs	r5, #1
1000930c:	702b      	strb	r3, [r5, #0]
1000930e:	9b04      	ldr	r3, [sp, #16]
10009310:	1b5b      	subs	r3, r3, r5
10009312:	6123      	str	r3, [r4, #16]
10009314:	e02b      	b.n	1000936e <_printf_i+0x1c6>
10009316:	6809      	ldr	r1, [r1, #0]
10009318:	681a      	ldr	r2, [r3, #0]
1000931a:	0608      	lsls	r0, r1, #24
1000931c:	d407      	bmi.n	1000932e <_printf_i+0x186>
1000931e:	0649      	lsls	r1, r1, #25
10009320:	d505      	bpl.n	1000932e <_printf_i+0x186>
10009322:	1d11      	adds	r1, r2, #4
10009324:	6019      	str	r1, [r3, #0]
10009326:	6813      	ldr	r3, [r2, #0]
10009328:	8aa2      	ldrh	r2, [r4, #20]
1000932a:	801a      	strh	r2, [r3, #0]
1000932c:	e004      	b.n	10009338 <_printf_i+0x190>
1000932e:	1d11      	adds	r1, r2, #4
10009330:	6019      	str	r1, [r3, #0]
10009332:	6813      	ldr	r3, [r2, #0]
10009334:	6962      	ldr	r2, [r4, #20]
10009336:	601a      	str	r2, [r3, #0]
10009338:	2300      	movs	r3, #0
1000933a:	9d04      	ldr	r5, [sp, #16]
1000933c:	6123      	str	r3, [r4, #16]
1000933e:	e016      	b.n	1000936e <_printf_i+0x1c6>
10009340:	681a      	ldr	r2, [r3, #0]
10009342:	1d11      	adds	r1, r2, #4
10009344:	6019      	str	r1, [r3, #0]
10009346:	6815      	ldr	r5, [r2, #0]
10009348:	2100      	movs	r1, #0
1000934a:	1c28      	adds	r0, r5, #0
1000934c:	6862      	ldr	r2, [r4, #4]
1000934e:	f002 fb05 	bl	1000b95c <memchr>
10009352:	2800      	cmp	r0, #0
10009354:	d001      	beq.n	1000935a <_printf_i+0x1b2>
10009356:	1b40      	subs	r0, r0, r5
10009358:	6060      	str	r0, [r4, #4]
1000935a:	6863      	ldr	r3, [r4, #4]
1000935c:	e003      	b.n	10009366 <_printf_i+0x1be>
1000935e:	1c25      	adds	r5, r4, #0
10009360:	3542      	adds	r5, #66	; 0x42
10009362:	702a      	strb	r2, [r5, #0]
10009364:	2301      	movs	r3, #1
10009366:	6123      	str	r3, [r4, #16]
10009368:	2300      	movs	r3, #0
1000936a:	9a04      	ldr	r2, [sp, #16]
1000936c:	7013      	strb	r3, [r2, #0]
1000936e:	9b07      	ldr	r3, [sp, #28]
10009370:	9805      	ldr	r0, [sp, #20]
10009372:	9300      	str	r3, [sp, #0]
10009374:	1c21      	adds	r1, r4, #0
10009376:	9b06      	ldr	r3, [sp, #24]
10009378:	aa09      	add	r2, sp, #36	; 0x24
1000937a:	f7ff fea7 	bl	100090cc <_printf_common>
1000937e:	1c43      	adds	r3, r0, #1
10009380:	d102      	bne.n	10009388 <_printf_i+0x1e0>
10009382:	2001      	movs	r0, #1
10009384:	4240      	negs	r0, r0
10009386:	e021      	b.n	100093cc <_printf_i+0x224>
10009388:	1c2a      	adds	r2, r5, #0
1000938a:	6923      	ldr	r3, [r4, #16]
1000938c:	9805      	ldr	r0, [sp, #20]
1000938e:	9906      	ldr	r1, [sp, #24]
10009390:	9d07      	ldr	r5, [sp, #28]
10009392:	47a8      	blx	r5
10009394:	1c43      	adds	r3, r0, #1
10009396:	d0f4      	beq.n	10009382 <_printf_i+0x1da>
10009398:	6823      	ldr	r3, [r4, #0]
1000939a:	079b      	lsls	r3, r3, #30
1000939c:	d405      	bmi.n	100093aa <_printf_i+0x202>
1000939e:	9b09      	ldr	r3, [sp, #36]	; 0x24
100093a0:	68e0      	ldr	r0, [r4, #12]
100093a2:	4298      	cmp	r0, r3
100093a4:	da12      	bge.n	100093cc <_printf_i+0x224>
100093a6:	1c18      	adds	r0, r3, #0
100093a8:	e010      	b.n	100093cc <_printf_i+0x224>
100093aa:	2500      	movs	r5, #0
100093ac:	68e3      	ldr	r3, [r4, #12]
100093ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
100093b0:	1a9b      	subs	r3, r3, r2
100093b2:	429d      	cmp	r5, r3
100093b4:	daf3      	bge.n	1000939e <_printf_i+0x1f6>
100093b6:	1c22      	adds	r2, r4, #0
100093b8:	2301      	movs	r3, #1
100093ba:	9805      	ldr	r0, [sp, #20]
100093bc:	9906      	ldr	r1, [sp, #24]
100093be:	3219      	adds	r2, #25
100093c0:	9e07      	ldr	r6, [sp, #28]
100093c2:	47b0      	blx	r6
100093c4:	1c43      	adds	r3, r0, #1
100093c6:	d0dc      	beq.n	10009382 <_printf_i+0x1da>
100093c8:	3501      	adds	r5, #1
100093ca:	e7ef      	b.n	100093ac <_printf_i+0x204>
100093cc:	b00b      	add	sp, #44	; 0x2c
100093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100093d0:	1000ce94 	.word	0x1000ce94
100093d4:	1000cea5 	.word	0x1000cea5

100093d8 <_scanf_float>:
100093d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100093da:	1c15      	adds	r5, r2, #0
100093dc:	2200      	movs	r2, #0
100093de:	b08b      	sub	sp, #44	; 0x2c
100093e0:	9306      	str	r3, [sp, #24]
100093e2:	688b      	ldr	r3, [r1, #8]
100093e4:	9205      	str	r2, [sp, #20]
100093e6:	325d      	adds	r2, #93	; 0x5d
100093e8:	1c0e      	adds	r6, r1, #0
100093ea:	32ff      	adds	r2, #255	; 0xff
100093ec:	1e59      	subs	r1, r3, #1
100093ee:	9002      	str	r0, [sp, #8]
100093f0:	4291      	cmp	r1, r2
100093f2:	d905      	bls.n	10009400 <_scanf_float+0x28>
100093f4:	3b5e      	subs	r3, #94	; 0x5e
100093f6:	3bff      	subs	r3, #255	; 0xff
100093f8:	9305      	str	r3, [sp, #20]
100093fa:	235e      	movs	r3, #94	; 0x5e
100093fc:	33ff      	adds	r3, #255	; 0xff
100093fe:	60b3      	str	r3, [r6, #8]
10009400:	23f0      	movs	r3, #240	; 0xf0
10009402:	6832      	ldr	r2, [r6, #0]
10009404:	00db      	lsls	r3, r3, #3
10009406:	4313      	orrs	r3, r2
10009408:	6033      	str	r3, [r6, #0]
1000940a:	1c33      	adds	r3, r6, #0
1000940c:	2400      	movs	r4, #0
1000940e:	331c      	adds	r3, #28
10009410:	1c1f      	adds	r7, r3, #0
10009412:	9304      	str	r3, [sp, #16]
10009414:	9403      	str	r4, [sp, #12]
10009416:	9409      	str	r4, [sp, #36]	; 0x24
10009418:	9408      	str	r4, [sp, #32]
1000941a:	9400      	str	r4, [sp, #0]
1000941c:	9407      	str	r4, [sp, #28]
1000941e:	68b2      	ldr	r2, [r6, #8]
10009420:	2a00      	cmp	r2, #0
10009422:	d100      	bne.n	10009426 <_scanf_float+0x4e>
10009424:	e0e1      	b.n	100095ea <_scanf_float+0x212>
10009426:	682b      	ldr	r3, [r5, #0]
10009428:	781b      	ldrb	r3, [r3, #0]
1000942a:	2b49      	cmp	r3, #73	; 0x49
1000942c:	d077      	beq.n	1000951e <_scanf_float+0x146>
1000942e:	d818      	bhi.n	10009462 <_scanf_float+0x8a>
10009430:	2b39      	cmp	r3, #57	; 0x39
10009432:	d80d      	bhi.n	10009450 <_scanf_float+0x78>
10009434:	2b31      	cmp	r3, #49	; 0x31
10009436:	d242      	bcs.n	100094be <_scanf_float+0xe6>
10009438:	2b2d      	cmp	r3, #45	; 0x2d
1000943a:	d049      	beq.n	100094d0 <_scanf_float+0xf8>
1000943c:	d802      	bhi.n	10009444 <_scanf_float+0x6c>
1000943e:	2b2b      	cmp	r3, #43	; 0x2b
10009440:	d046      	beq.n	100094d0 <_scanf_float+0xf8>
10009442:	e0d2      	b.n	100095ea <_scanf_float+0x212>
10009444:	2b2e      	cmp	r3, #46	; 0x2e
10009446:	d100      	bne.n	1000944a <_scanf_float+0x72>
10009448:	e08d      	b.n	10009566 <_scanf_float+0x18e>
1000944a:	2b30      	cmp	r3, #48	; 0x30
1000944c:	d025      	beq.n	1000949a <_scanf_float+0xc2>
1000944e:	e0cc      	b.n	100095ea <_scanf_float+0x212>
10009450:	2b45      	cmp	r3, #69	; 0x45
10009452:	d100      	bne.n	10009456 <_scanf_float+0x7e>
10009454:	e090      	b.n	10009578 <_scanf_float+0x1a0>
10009456:	2b46      	cmp	r3, #70	; 0x46
10009458:	d079      	beq.n	1000954e <_scanf_float+0x176>
1000945a:	2b41      	cmp	r3, #65	; 0x41
1000945c:	d000      	beq.n	10009460 <_scanf_float+0x88>
1000945e:	e0c4      	b.n	100095ea <_scanf_float+0x212>
10009460:	e058      	b.n	10009514 <_scanf_float+0x13c>
10009462:	2b65      	cmp	r3, #101	; 0x65
10009464:	d100      	bne.n	10009468 <_scanf_float+0x90>
10009466:	e087      	b.n	10009578 <_scanf_float+0x1a0>
10009468:	d80a      	bhi.n	10009480 <_scanf_float+0xa8>
1000946a:	2b54      	cmp	r3, #84	; 0x54
1000946c:	d073      	beq.n	10009556 <_scanf_float+0x17e>
1000946e:	d802      	bhi.n	10009476 <_scanf_float+0x9e>
10009470:	2b4e      	cmp	r3, #78	; 0x4e
10009472:	d035      	beq.n	100094e0 <_scanf_float+0x108>
10009474:	e0b9      	b.n	100095ea <_scanf_float+0x212>
10009476:	2b59      	cmp	r3, #89	; 0x59
10009478:	d071      	beq.n	1000955e <_scanf_float+0x186>
1000947a:	2b61      	cmp	r3, #97	; 0x61
1000947c:	d04a      	beq.n	10009514 <_scanf_float+0x13c>
1000947e:	e0b4      	b.n	100095ea <_scanf_float+0x212>
10009480:	2b6e      	cmp	r3, #110	; 0x6e
10009482:	d02d      	beq.n	100094e0 <_scanf_float+0x108>
10009484:	d804      	bhi.n	10009490 <_scanf_float+0xb8>
10009486:	2b66      	cmp	r3, #102	; 0x66
10009488:	d061      	beq.n	1000954e <_scanf_float+0x176>
1000948a:	2b69      	cmp	r3, #105	; 0x69
1000948c:	d047      	beq.n	1000951e <_scanf_float+0x146>
1000948e:	e0ac      	b.n	100095ea <_scanf_float+0x212>
10009490:	2b74      	cmp	r3, #116	; 0x74
10009492:	d060      	beq.n	10009556 <_scanf_float+0x17e>
10009494:	2b79      	cmp	r3, #121	; 0x79
10009496:	d062      	beq.n	1000955e <_scanf_float+0x186>
10009498:	e0a7      	b.n	100095ea <_scanf_float+0x212>
1000949a:	6831      	ldr	r1, [r6, #0]
1000949c:	05c8      	lsls	r0, r1, #23
1000949e:	d50e      	bpl.n	100094be <_scanf_float+0xe6>
100094a0:	2380      	movs	r3, #128	; 0x80
100094a2:	4399      	bics	r1, r3
100094a4:	9b00      	ldr	r3, [sp, #0]
100094a6:	6031      	str	r1, [r6, #0]
100094a8:	3301      	adds	r3, #1
100094aa:	9300      	str	r3, [sp, #0]
100094ac:	9b05      	ldr	r3, [sp, #20]
100094ae:	2b00      	cmp	r3, #0
100094b0:	d100      	bne.n	100094b4 <_scanf_float+0xdc>
100094b2:	e082      	b.n	100095ba <_scanf_float+0x1e2>
100094b4:	3b01      	subs	r3, #1
100094b6:	3201      	adds	r2, #1
100094b8:	9305      	str	r3, [sp, #20]
100094ba:	60b2      	str	r2, [r6, #8]
100094bc:	e07d      	b.n	100095ba <_scanf_float+0x1e2>
100094be:	9a03      	ldr	r2, [sp, #12]
100094c0:	1912      	adds	r2, r2, r4
100094c2:	2a00      	cmp	r2, #0
100094c4:	d000      	beq.n	100094c8 <_scanf_float+0xf0>
100094c6:	e090      	b.n	100095ea <_scanf_float+0x212>
100094c8:	4ab3      	ldr	r2, [pc, #716]	; (10009798 <_scanf_float+0x3c0>)
100094ca:	6831      	ldr	r1, [r6, #0]
100094cc:	400a      	ands	r2, r1
100094ce:	e005      	b.n	100094dc <_scanf_float+0x104>
100094d0:	2180      	movs	r1, #128	; 0x80
100094d2:	6832      	ldr	r2, [r6, #0]
100094d4:	420a      	tst	r2, r1
100094d6:	d100      	bne.n	100094da <_scanf_float+0x102>
100094d8:	e087      	b.n	100095ea <_scanf_float+0x212>
100094da:	438a      	bics	r2, r1
100094dc:	6032      	str	r2, [r6, #0]
100094de:	e06a      	b.n	100095b6 <_scanf_float+0x1de>
100094e0:	9a03      	ldr	r2, [sp, #12]
100094e2:	2a00      	cmp	r2, #0
100094e4:	d10e      	bne.n	10009504 <_scanf_float+0x12c>
100094e6:	9a00      	ldr	r2, [sp, #0]
100094e8:	2a00      	cmp	r2, #0
100094ea:	d10e      	bne.n	1000950a <_scanf_float+0x132>
100094ec:	6831      	ldr	r1, [r6, #0]
100094ee:	22e0      	movs	r2, #224	; 0xe0
100094f0:	1c08      	adds	r0, r1, #0
100094f2:	00d2      	lsls	r2, r2, #3
100094f4:	4010      	ands	r0, r2
100094f6:	4290      	cmp	r0, r2
100094f8:	d107      	bne.n	1000950a <_scanf_float+0x132>
100094fa:	4aa8      	ldr	r2, [pc, #672]	; (1000979c <_scanf_float+0x3c4>)
100094fc:	400a      	ands	r2, r1
100094fe:	6032      	str	r2, [r6, #0]
10009500:	2201      	movs	r2, #1
10009502:	e057      	b.n	100095b4 <_scanf_float+0x1dc>
10009504:	9a03      	ldr	r2, [sp, #12]
10009506:	2a02      	cmp	r2, #2
10009508:	d053      	beq.n	100095b2 <_scanf_float+0x1da>
1000950a:	2c01      	cmp	r4, #1
1000950c:	d01c      	beq.n	10009548 <_scanf_float+0x170>
1000950e:	2c04      	cmp	r4, #4
10009510:	d01a      	beq.n	10009548 <_scanf_float+0x170>
10009512:	e06a      	b.n	100095ea <_scanf_float+0x212>
10009514:	9a03      	ldr	r2, [sp, #12]
10009516:	2a01      	cmp	r2, #1
10009518:	d167      	bne.n	100095ea <_scanf_float+0x212>
1000951a:	2202      	movs	r2, #2
1000951c:	e04a      	b.n	100095b4 <_scanf_float+0x1dc>
1000951e:	2c00      	cmp	r4, #0
10009520:	d10e      	bne.n	10009540 <_scanf_float+0x168>
10009522:	9a00      	ldr	r2, [sp, #0]
10009524:	2a00      	cmp	r2, #0
10009526:	d163      	bne.n	100095f0 <_scanf_float+0x218>
10009528:	6831      	ldr	r1, [r6, #0]
1000952a:	22e0      	movs	r2, #224	; 0xe0
1000952c:	1c08      	adds	r0, r1, #0
1000952e:	00d2      	lsls	r2, r2, #3
10009530:	4010      	ands	r0, r2
10009532:	4290      	cmp	r0, r2
10009534:	d160      	bne.n	100095f8 <_scanf_float+0x220>
10009536:	4a99      	ldr	r2, [pc, #612]	; (1000979c <_scanf_float+0x3c4>)
10009538:	3401      	adds	r4, #1
1000953a:	400a      	ands	r2, r1
1000953c:	6032      	str	r2, [r6, #0]
1000953e:	e03a      	b.n	100095b6 <_scanf_float+0x1de>
10009540:	21fd      	movs	r1, #253	; 0xfd
10009542:	1ee2      	subs	r2, r4, #3
10009544:	420a      	tst	r2, r1
10009546:	d150      	bne.n	100095ea <_scanf_float+0x212>
10009548:	3401      	adds	r4, #1
1000954a:	b2e4      	uxtb	r4, r4
1000954c:	e033      	b.n	100095b6 <_scanf_float+0x1de>
1000954e:	2c02      	cmp	r4, #2
10009550:	d14b      	bne.n	100095ea <_scanf_float+0x212>
10009552:	2403      	movs	r4, #3
10009554:	e02f      	b.n	100095b6 <_scanf_float+0x1de>
10009556:	2c06      	cmp	r4, #6
10009558:	d147      	bne.n	100095ea <_scanf_float+0x212>
1000955a:	2407      	movs	r4, #7
1000955c:	e02b      	b.n	100095b6 <_scanf_float+0x1de>
1000955e:	2c07      	cmp	r4, #7
10009560:	d143      	bne.n	100095ea <_scanf_float+0x212>
10009562:	2408      	movs	r4, #8
10009564:	e027      	b.n	100095b6 <_scanf_float+0x1de>
10009566:	6831      	ldr	r1, [r6, #0]
10009568:	058a      	lsls	r2, r1, #22
1000956a:	d53e      	bpl.n	100095ea <_scanf_float+0x212>
1000956c:	4a8c      	ldr	r2, [pc, #560]	; (100097a0 <_scanf_float+0x3c8>)
1000956e:	400a      	ands	r2, r1
10009570:	6032      	str	r2, [r6, #0]
10009572:	9a00      	ldr	r2, [sp, #0]
10009574:	9207      	str	r2, [sp, #28]
10009576:	e01e      	b.n	100095b6 <_scanf_float+0x1de>
10009578:	22a0      	movs	r2, #160	; 0xa0
1000957a:	2080      	movs	r0, #128	; 0x80
1000957c:	6831      	ldr	r1, [r6, #0]
1000957e:	00d2      	lsls	r2, r2, #3
10009580:	400a      	ands	r2, r1
10009582:	00c0      	lsls	r0, r0, #3
10009584:	4282      	cmp	r2, r0
10009586:	d004      	beq.n	10009592 <_scanf_float+0x1ba>
10009588:	4201      	tst	r1, r0
1000958a:	d02e      	beq.n	100095ea <_scanf_float+0x212>
1000958c:	9a00      	ldr	r2, [sp, #0]
1000958e:	2a00      	cmp	r2, #0
10009590:	d032      	beq.n	100095f8 <_scanf_float+0x220>
10009592:	058a      	lsls	r2, r1, #22
10009594:	d404      	bmi.n	100095a0 <_scanf_float+0x1c8>
10009596:	9a00      	ldr	r2, [sp, #0]
10009598:	9807      	ldr	r0, [sp, #28]
1000959a:	9709      	str	r7, [sp, #36]	; 0x24
1000959c:	1a12      	subs	r2, r2, r0
1000959e:	9208      	str	r2, [sp, #32]
100095a0:	4a7e      	ldr	r2, [pc, #504]	; (1000979c <_scanf_float+0x3c4>)
100095a2:	400a      	ands	r2, r1
100095a4:	21c0      	movs	r1, #192	; 0xc0
100095a6:	0049      	lsls	r1, r1, #1
100095a8:	430a      	orrs	r2, r1
100095aa:	6032      	str	r2, [r6, #0]
100095ac:	2200      	movs	r2, #0
100095ae:	9200      	str	r2, [sp, #0]
100095b0:	e001      	b.n	100095b6 <_scanf_float+0x1de>
100095b2:	2203      	movs	r2, #3
100095b4:	9203      	str	r2, [sp, #12]
100095b6:	703b      	strb	r3, [r7, #0]
100095b8:	3701      	adds	r7, #1
100095ba:	68b3      	ldr	r3, [r6, #8]
100095bc:	3b01      	subs	r3, #1
100095be:	60b3      	str	r3, [r6, #8]
100095c0:	6933      	ldr	r3, [r6, #16]
100095c2:	3301      	adds	r3, #1
100095c4:	6133      	str	r3, [r6, #16]
100095c6:	686b      	ldr	r3, [r5, #4]
100095c8:	3b01      	subs	r3, #1
100095ca:	606b      	str	r3, [r5, #4]
100095cc:	2b00      	cmp	r3, #0
100095ce:	dd03      	ble.n	100095d8 <_scanf_float+0x200>
100095d0:	682b      	ldr	r3, [r5, #0]
100095d2:	3301      	adds	r3, #1
100095d4:	602b      	str	r3, [r5, #0]
100095d6:	e722      	b.n	1000941e <_scanf_float+0x46>
100095d8:	23c0      	movs	r3, #192	; 0xc0
100095da:	005b      	lsls	r3, r3, #1
100095dc:	58f3      	ldr	r3, [r6, r3]
100095de:	9802      	ldr	r0, [sp, #8]
100095e0:	1c29      	adds	r1, r5, #0
100095e2:	4798      	blx	r3
100095e4:	2800      	cmp	r0, #0
100095e6:	d100      	bne.n	100095ea <_scanf_float+0x212>
100095e8:	e719      	b.n	1000941e <_scanf_float+0x46>
100095ea:	9b00      	ldr	r3, [sp, #0]
100095ec:	2b00      	cmp	r3, #0
100095ee:	d003      	beq.n	100095f8 <_scanf_float+0x220>
100095f0:	6832      	ldr	r2, [r6, #0]
100095f2:	4b6c      	ldr	r3, [pc, #432]	; (100097a4 <_scanf_float+0x3cc>)
100095f4:	4013      	ands	r3, r2
100095f6:	6033      	str	r3, [r6, #0]
100095f8:	9b03      	ldr	r3, [sp, #12]
100095fa:	3b01      	subs	r3, #1
100095fc:	2b01      	cmp	r3, #1
100095fe:	d810      	bhi.n	10009622 <_scanf_float+0x24a>
10009600:	9b04      	ldr	r3, [sp, #16]
10009602:	429f      	cmp	r7, r3
10009604:	d90b      	bls.n	1000961e <_scanf_float+0x246>
10009606:	23be      	movs	r3, #190	; 0xbe
10009608:	3f01      	subs	r7, #1
1000960a:	005b      	lsls	r3, r3, #1
1000960c:	58f3      	ldr	r3, [r6, r3]
1000960e:	7839      	ldrb	r1, [r7, #0]
10009610:	9802      	ldr	r0, [sp, #8]
10009612:	1c2a      	adds	r2, r5, #0
10009614:	4798      	blx	r3
10009616:	6933      	ldr	r3, [r6, #16]
10009618:	3b01      	subs	r3, #1
1000961a:	6133      	str	r3, [r6, #16]
1000961c:	e7f0      	b.n	10009600 <_scanf_float+0x228>
1000961e:	2401      	movs	r4, #1
10009620:	e0b7      	b.n	10009792 <_scanf_float+0x3ba>
10009622:	1e63      	subs	r3, r4, #1
10009624:	2b06      	cmp	r3, #6
10009626:	d82a      	bhi.n	1000967e <_scanf_float+0x2a6>
10009628:	2c02      	cmp	r4, #2
1000962a:	d919      	bls.n	10009660 <_scanf_float+0x288>
1000962c:	9405      	str	r4, [sp, #20]
1000962e:	9703      	str	r7, [sp, #12]
10009630:	9b05      	ldr	r3, [sp, #20]
10009632:	3b01      	subs	r3, #1
10009634:	b2db      	uxtb	r3, r3
10009636:	9305      	str	r3, [sp, #20]
10009638:	2b02      	cmp	r3, #2
1000963a:	d00d      	beq.n	10009658 <_scanf_float+0x280>
1000963c:	9b03      	ldr	r3, [sp, #12]
1000963e:	9802      	ldr	r0, [sp, #8]
10009640:	3b01      	subs	r3, #1
10009642:	9303      	str	r3, [sp, #12]
10009644:	7819      	ldrb	r1, [r3, #0]
10009646:	23be      	movs	r3, #190	; 0xbe
10009648:	005b      	lsls	r3, r3, #1
1000964a:	58f3      	ldr	r3, [r6, r3]
1000964c:	1c2a      	adds	r2, r5, #0
1000964e:	4798      	blx	r3
10009650:	6933      	ldr	r3, [r6, #16]
10009652:	3b01      	subs	r3, #1
10009654:	6133      	str	r3, [r6, #16]
10009656:	e7eb      	b.n	10009630 <_scanf_float+0x258>
10009658:	3c03      	subs	r4, #3
1000965a:	b2e4      	uxtb	r4, r4
1000965c:	1b3f      	subs	r7, r7, r4
1000965e:	e00e      	b.n	1000967e <_scanf_float+0x2a6>
10009660:	9b04      	ldr	r3, [sp, #16]
10009662:	429f      	cmp	r7, r3
10009664:	d9db      	bls.n	1000961e <_scanf_float+0x246>
10009666:	23be      	movs	r3, #190	; 0xbe
10009668:	3f01      	subs	r7, #1
1000966a:	005b      	lsls	r3, r3, #1
1000966c:	58f3      	ldr	r3, [r6, r3]
1000966e:	7839      	ldrb	r1, [r7, #0]
10009670:	9802      	ldr	r0, [sp, #8]
10009672:	1c2a      	adds	r2, r5, #0
10009674:	4798      	blx	r3
10009676:	6933      	ldr	r3, [r6, #16]
10009678:	3b01      	subs	r3, #1
1000967a:	6133      	str	r3, [r6, #16]
1000967c:	e7f0      	b.n	10009660 <_scanf_float+0x288>
1000967e:	6833      	ldr	r3, [r6, #0]
10009680:	05da      	lsls	r2, r3, #23
10009682:	d52b      	bpl.n	100096dc <_scanf_float+0x304>
10009684:	055b      	lsls	r3, r3, #21
10009686:	d50e      	bpl.n	100096a6 <_scanf_float+0x2ce>
10009688:	9b04      	ldr	r3, [sp, #16]
1000968a:	429f      	cmp	r7, r3
1000968c:	d9c7      	bls.n	1000961e <_scanf_float+0x246>
1000968e:	23be      	movs	r3, #190	; 0xbe
10009690:	3f01      	subs	r7, #1
10009692:	005b      	lsls	r3, r3, #1
10009694:	58f3      	ldr	r3, [r6, r3]
10009696:	7839      	ldrb	r1, [r7, #0]
10009698:	9802      	ldr	r0, [sp, #8]
1000969a:	1c2a      	adds	r2, r5, #0
1000969c:	4798      	blx	r3
1000969e:	6933      	ldr	r3, [r6, #16]
100096a0:	3b01      	subs	r3, #1
100096a2:	6133      	str	r3, [r6, #16]
100096a4:	e7f0      	b.n	10009688 <_scanf_float+0x2b0>
100096a6:	6933      	ldr	r3, [r6, #16]
100096a8:	1e7c      	subs	r4, r7, #1
100096aa:	7821      	ldrb	r1, [r4, #0]
100096ac:	3b01      	subs	r3, #1
100096ae:	6133      	str	r3, [r6, #16]
100096b0:	2965      	cmp	r1, #101	; 0x65
100096b2:	d00c      	beq.n	100096ce <_scanf_float+0x2f6>
100096b4:	2945      	cmp	r1, #69	; 0x45
100096b6:	d00a      	beq.n	100096ce <_scanf_float+0x2f6>
100096b8:	23be      	movs	r3, #190	; 0xbe
100096ba:	005b      	lsls	r3, r3, #1
100096bc:	58f3      	ldr	r3, [r6, r3]
100096be:	9802      	ldr	r0, [sp, #8]
100096c0:	1c2a      	adds	r2, r5, #0
100096c2:	4798      	blx	r3
100096c4:	6933      	ldr	r3, [r6, #16]
100096c6:	1ebc      	subs	r4, r7, #2
100096c8:	3b01      	subs	r3, #1
100096ca:	7821      	ldrb	r1, [r4, #0]
100096cc:	6133      	str	r3, [r6, #16]
100096ce:	23be      	movs	r3, #190	; 0xbe
100096d0:	005b      	lsls	r3, r3, #1
100096d2:	58f3      	ldr	r3, [r6, r3]
100096d4:	9802      	ldr	r0, [sp, #8]
100096d6:	1c2a      	adds	r2, r5, #0
100096d8:	4798      	blx	r3
100096da:	1c27      	adds	r7, r4, #0
100096dc:	2410      	movs	r4, #16
100096de:	6833      	ldr	r3, [r6, #0]
100096e0:	401c      	ands	r4, r3
100096e2:	d155      	bne.n	10009790 <_scanf_float+0x3b8>
100096e4:	23c0      	movs	r3, #192	; 0xc0
100096e6:	703c      	strb	r4, [r7, #0]
100096e8:	6832      	ldr	r2, [r6, #0]
100096ea:	00db      	lsls	r3, r3, #3
100096ec:	4013      	ands	r3, r2
100096ee:	2280      	movs	r2, #128	; 0x80
100096f0:	00d2      	lsls	r2, r2, #3
100096f2:	4293      	cmp	r3, r2
100096f4:	d106      	bne.n	10009704 <_scanf_float+0x32c>
100096f6:	9a07      	ldr	r2, [sp, #28]
100096f8:	9b00      	ldr	r3, [sp, #0]
100096fa:	1a9b      	subs	r3, r3, r2
100096fc:	425a      	negs	r2, r3
100096fe:	2b00      	cmp	r3, #0
10009700:	d10d      	bne.n	1000971e <_scanf_float+0x346>
10009702:	e018      	b.n	10009736 <_scanf_float+0x35e>
10009704:	9b08      	ldr	r3, [sp, #32]
10009706:	2b00      	cmp	r3, #0
10009708:	d015      	beq.n	10009736 <_scanf_float+0x35e>
1000970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000970c:	1c22      	adds	r2, r4, #0
1000970e:	1c59      	adds	r1, r3, #1
10009710:	9802      	ldr	r0, [sp, #8]
10009712:	230a      	movs	r3, #10
10009714:	f000 fee4 	bl	1000a4e0 <_strtol_r>
10009718:	9b08      	ldr	r3, [sp, #32]
1000971a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000971c:	1ac2      	subs	r2, r0, r3
1000971e:	1c33      	adds	r3, r6, #0
10009720:	3370      	adds	r3, #112	; 0x70
10009722:	33ff      	adds	r3, #255	; 0xff
10009724:	429f      	cmp	r7, r3
10009726:	d302      	bcc.n	1000972e <_scanf_float+0x356>
10009728:	1c37      	adds	r7, r6, #0
1000972a:	376f      	adds	r7, #111	; 0x6f
1000972c:	37ff      	adds	r7, #255	; 0xff
1000972e:	1c38      	adds	r0, r7, #0
10009730:	491d      	ldr	r1, [pc, #116]	; (100097a8 <_scanf_float+0x3d0>)
10009732:	f000 f867 	bl	10009804 <siprintf>
10009736:	2200      	movs	r2, #0
10009738:	9802      	ldr	r0, [sp, #8]
1000973a:	9904      	ldr	r1, [sp, #16]
1000973c:	f000 f8b6 	bl	100098ac <_strtod_r>
10009740:	9b06      	ldr	r3, [sp, #24]
10009742:	6832      	ldr	r2, [r6, #0]
10009744:	9000      	str	r0, [sp, #0]
10009746:	9101      	str	r1, [sp, #4]
10009748:	681b      	ldr	r3, [r3, #0]
1000974a:	0791      	lsls	r1, r2, #30
1000974c:	d401      	bmi.n	10009752 <_scanf_float+0x37a>
1000974e:	0752      	lsls	r2, r2, #29
10009750:	d508      	bpl.n	10009764 <_scanf_float+0x38c>
10009752:	9906      	ldr	r1, [sp, #24]
10009754:	1d1a      	adds	r2, r3, #4
10009756:	600a      	str	r2, [r1, #0]
10009758:	681b      	ldr	r3, [r3, #0]
1000975a:	9900      	ldr	r1, [sp, #0]
1000975c:	9a01      	ldr	r2, [sp, #4]
1000975e:	6019      	str	r1, [r3, #0]
10009760:	605a      	str	r2, [r3, #4]
10009762:	e011      	b.n	10009788 <_scanf_float+0x3b0>
10009764:	9906      	ldr	r1, [sp, #24]
10009766:	1d1a      	adds	r2, r3, #4
10009768:	600a      	str	r2, [r1, #0]
1000976a:	9800      	ldr	r0, [sp, #0]
1000976c:	9901      	ldr	r1, [sp, #4]
1000976e:	681d      	ldr	r5, [r3, #0]
10009770:	f000 f81c 	bl	100097ac <__fpclassifyd>
10009774:	2800      	cmp	r0, #0
10009776:	d102      	bne.n	1000977e <_scanf_float+0x3a6>
10009778:	f000 f840 	bl	100097fc <nanf>
1000977c:	e003      	b.n	10009786 <_scanf_float+0x3ae>
1000977e:	9800      	ldr	r0, [sp, #0]
10009780:	9901      	ldr	r1, [sp, #4]
10009782:	f7ff f8f3 	bl	1000896c <__aeabi_d2f>
10009786:	6028      	str	r0, [r5, #0]
10009788:	68f3      	ldr	r3, [r6, #12]
1000978a:	3301      	adds	r3, #1
1000978c:	60f3      	str	r3, [r6, #12]
1000978e:	e000      	b.n	10009792 <_scanf_float+0x3ba>
10009790:	2400      	movs	r4, #0
10009792:	1c20      	adds	r0, r4, #0
10009794:	b00b      	add	sp, #44	; 0x2c
10009796:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009798:	fffffe7f 	.word	0xfffffe7f
1000979c:	fffff87f 	.word	0xfffff87f
100097a0:	fffffd7f 	.word	0xfffffd7f
100097a4:	fffffeff 	.word	0xfffffeff
100097a8:	1000ceb6 	.word	0x1000ceb6

100097ac <__fpclassifyd>:
100097ac:	b530      	push	{r4, r5, lr}
100097ae:	1c0c      	adds	r4, r1, #0
100097b0:	2302      	movs	r3, #2
100097b2:	4304      	orrs	r4, r0
100097b4:	d017      	beq.n	100097e6 <__fpclassifyd+0x3a>
100097b6:	2480      	movs	r4, #128	; 0x80
100097b8:	0624      	lsls	r4, r4, #24
100097ba:	42a1      	cmp	r1, r4
100097bc:	d101      	bne.n	100097c2 <__fpclassifyd+0x16>
100097be:	2800      	cmp	r0, #0
100097c0:	d011      	beq.n	100097e6 <__fpclassifyd+0x3a>
100097c2:	4b0a      	ldr	r3, [pc, #40]	; (100097ec <__fpclassifyd+0x40>)
100097c4:	0049      	lsls	r1, r1, #1
100097c6:	0849      	lsrs	r1, r1, #1
100097c8:	4a09      	ldr	r2, [pc, #36]	; (100097f0 <__fpclassifyd+0x44>)
100097ca:	18cc      	adds	r4, r1, r3
100097cc:	2304      	movs	r3, #4
100097ce:	4294      	cmp	r4, r2
100097d0:	d909      	bls.n	100097e6 <__fpclassifyd+0x3a>
100097d2:	4a08      	ldr	r2, [pc, #32]	; (100097f4 <__fpclassifyd+0x48>)
100097d4:	3b01      	subs	r3, #1
100097d6:	4291      	cmp	r1, r2
100097d8:	d905      	bls.n	100097e6 <__fpclassifyd+0x3a>
100097da:	4a07      	ldr	r2, [pc, #28]	; (100097f8 <__fpclassifyd+0x4c>)
100097dc:	2300      	movs	r3, #0
100097de:	4291      	cmp	r1, r2
100097e0:	d101      	bne.n	100097e6 <__fpclassifyd+0x3a>
100097e2:	4243      	negs	r3, r0
100097e4:	4143      	adcs	r3, r0
100097e6:	1c18      	adds	r0, r3, #0
100097e8:	bd30      	pop	{r4, r5, pc}
100097ea:	46c0      	nop			; (mov r8, r8)
100097ec:	fff00000 	.word	0xfff00000
100097f0:	7fdfffff 	.word	0x7fdfffff
100097f4:	000fffff 	.word	0x000fffff
100097f8:	7ff00000 	.word	0x7ff00000

100097fc <nanf>:
100097fc:	4800      	ldr	r0, [pc, #0]	; (10009800 <nanf+0x4>)
100097fe:	4770      	bx	lr
10009800:	7fc00000 	.word	0x7fc00000

10009804 <siprintf>:
10009804:	b40e      	push	{r1, r2, r3}
10009806:	b510      	push	{r4, lr}
10009808:	b09d      	sub	sp, #116	; 0x74
1000980a:	a902      	add	r1, sp, #8
1000980c:	9002      	str	r0, [sp, #8]
1000980e:	6108      	str	r0, [r1, #16]
10009810:	480b      	ldr	r0, [pc, #44]	; (10009840 <siprintf+0x3c>)
10009812:	2482      	movs	r4, #130	; 0x82
10009814:	6088      	str	r0, [r1, #8]
10009816:	6148      	str	r0, [r1, #20]
10009818:	2001      	movs	r0, #1
1000981a:	4240      	negs	r0, r0
1000981c:	ab1f      	add	r3, sp, #124	; 0x7c
1000981e:	81c8      	strh	r0, [r1, #14]
10009820:	4808      	ldr	r0, [pc, #32]	; (10009844 <siprintf+0x40>)
10009822:	cb04      	ldmia	r3!, {r2}
10009824:	00a4      	lsls	r4, r4, #2
10009826:	6800      	ldr	r0, [r0, #0]
10009828:	9301      	str	r3, [sp, #4]
1000982a:	818c      	strh	r4, [r1, #12]
1000982c:	f002 fdb0 	bl	1000c390 <_svfiprintf_r>
10009830:	2300      	movs	r3, #0
10009832:	9a02      	ldr	r2, [sp, #8]
10009834:	7013      	strb	r3, [r2, #0]
10009836:	b01d      	add	sp, #116	; 0x74
10009838:	bc10      	pop	{r4}
1000983a:	bc08      	pop	{r3}
1000983c:	b003      	add	sp, #12
1000983e:	4718      	bx	r3
10009840:	7fffffff 	.word	0x7fffffff
10009844:	20000710 	.word	0x20000710

10009848 <strlen>:
10009848:	2300      	movs	r3, #0
1000984a:	5cc2      	ldrb	r2, [r0, r3]
1000984c:	3301      	adds	r3, #1
1000984e:	2a00      	cmp	r2, #0
10009850:	d1fb      	bne.n	1000984a <strlen+0x2>
10009852:	1e58      	subs	r0, r3, #1
10009854:	4770      	bx	lr

10009856 <match>:
10009856:	b530      	push	{r4, r5, lr}
10009858:	6803      	ldr	r3, [r0, #0]
1000985a:	780c      	ldrb	r4, [r1, #0]
1000985c:	3301      	adds	r3, #1
1000985e:	2c00      	cmp	r4, #0
10009860:	d00a      	beq.n	10009878 <match+0x22>
10009862:	781a      	ldrb	r2, [r3, #0]
10009864:	1c15      	adds	r5, r2, #0
10009866:	3d41      	subs	r5, #65	; 0x41
10009868:	2d19      	cmp	r5, #25
1000986a:	d800      	bhi.n	1000986e <match+0x18>
1000986c:	3220      	adds	r2, #32
1000986e:	3101      	adds	r1, #1
10009870:	42a2      	cmp	r2, r4
10009872:	d0f2      	beq.n	1000985a <match+0x4>
10009874:	2000      	movs	r0, #0
10009876:	e001      	b.n	1000987c <match+0x26>
10009878:	6003      	str	r3, [r0, #0]
1000987a:	2001      	movs	r0, #1
1000987c:	bd30      	pop	{r4, r5, pc}
	...

10009880 <sulp>:
10009880:	b570      	push	{r4, r5, r6, lr}
10009882:	1c16      	adds	r6, r2, #0
10009884:	1c0d      	adds	r5, r1, #0
10009886:	f002 fb4b 	bl	1000bf20 <__ulp>
1000988a:	2e00      	cmp	r6, #0
1000988c:	d00b      	beq.n	100098a6 <sulp+0x26>
1000988e:	226b      	movs	r2, #107	; 0x6b
10009890:	006b      	lsls	r3, r5, #1
10009892:	0d5b      	lsrs	r3, r3, #21
10009894:	1ad3      	subs	r3, r2, r3
10009896:	2b00      	cmp	r3, #0
10009898:	dd05      	ble.n	100098a6 <sulp+0x26>
1000989a:	4d03      	ldr	r5, [pc, #12]	; (100098a8 <sulp+0x28>)
1000989c:	051c      	lsls	r4, r3, #20
1000989e:	2200      	movs	r2, #0
100098a0:	1963      	adds	r3, r4, r5
100098a2:	f7fe f98d 	bl	10007bc0 <__aeabi_dmul>
100098a6:	bd70      	pop	{r4, r5, r6, pc}
100098a8:	3ff00000 	.word	0x3ff00000

100098ac <_strtod_r>:
100098ac:	2300      	movs	r3, #0
100098ae:	b5f0      	push	{r4, r5, r6, r7, lr}
100098b0:	b0a3      	sub	sp, #140	; 0x8c
100098b2:	931e      	str	r3, [sp, #120]	; 0x78
100098b4:	2600      	movs	r6, #0
100098b6:	2700      	movs	r7, #0
100098b8:	1c0b      	adds	r3, r1, #0
100098ba:	9003      	str	r0, [sp, #12]
100098bc:	9106      	str	r1, [sp, #24]
100098be:	9219      	str	r2, [sp, #100]	; 0x64
100098c0:	931d      	str	r3, [sp, #116]	; 0x74
100098c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
100098c4:	781a      	ldrb	r2, [r3, #0]
100098c6:	2a0d      	cmp	r2, #13
100098c8:	d805      	bhi.n	100098d6 <_strtod_r+0x2a>
100098ca:	2a09      	cmp	r2, #9
100098cc:	d214      	bcs.n	100098f8 <_strtod_r+0x4c>
100098ce:	2a00      	cmp	r2, #0
100098d0:	d100      	bne.n	100098d4 <_strtod_r+0x28>
100098d2:	e1c3      	b.n	10009c5c <_strtod_r+0x3b0>
100098d4:	e012      	b.n	100098fc <_strtod_r+0x50>
100098d6:	2a2b      	cmp	r2, #43	; 0x2b
100098d8:	d006      	beq.n	100098e8 <_strtod_r+0x3c>
100098da:	2a2d      	cmp	r2, #45	; 0x2d
100098dc:	d002      	beq.n	100098e4 <_strtod_r+0x38>
100098de:	2a20      	cmp	r2, #32
100098e0:	d10c      	bne.n	100098fc <_strtod_r+0x50>
100098e2:	e009      	b.n	100098f8 <_strtod_r+0x4c>
100098e4:	2201      	movs	r2, #1
100098e6:	e000      	b.n	100098ea <_strtod_r+0x3e>
100098e8:	2200      	movs	r2, #0
100098ea:	920d      	str	r2, [sp, #52]	; 0x34
100098ec:	1c5a      	adds	r2, r3, #1
100098ee:	921d      	str	r2, [sp, #116]	; 0x74
100098f0:	785b      	ldrb	r3, [r3, #1]
100098f2:	2b00      	cmp	r3, #0
100098f4:	d104      	bne.n	10009900 <_strtod_r+0x54>
100098f6:	e1b1      	b.n	10009c5c <_strtod_r+0x3b0>
100098f8:	3301      	adds	r3, #1
100098fa:	e7e1      	b.n	100098c0 <_strtod_r+0x14>
100098fc:	2300      	movs	r3, #0
100098fe:	930d      	str	r3, [sp, #52]	; 0x34
10009900:	2200      	movs	r2, #0
10009902:	9d1d      	ldr	r5, [sp, #116]	; 0x74
10009904:	920a      	str	r2, [sp, #40]	; 0x28
10009906:	782b      	ldrb	r3, [r5, #0]
10009908:	2b30      	cmp	r3, #48	; 0x30
1000990a:	d15d      	bne.n	100099c8 <_strtod_r+0x11c>
1000990c:	786b      	ldrb	r3, [r5, #1]
1000990e:	2b58      	cmp	r3, #88	; 0x58
10009910:	d001      	beq.n	10009916 <_strtod_r+0x6a>
10009912:	2b78      	cmp	r3, #120	; 0x78
10009914:	d14c      	bne.n	100099b0 <_strtod_r+0x104>
10009916:	ab1e      	add	r3, sp, #120	; 0x78
10009918:	9300      	str	r3, [sp, #0]
1000991a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000991c:	9803      	ldr	r0, [sp, #12]
1000991e:	9301      	str	r3, [sp, #4]
10009920:	a91d      	add	r1, sp, #116	; 0x74
10009922:	4ac2      	ldr	r2, [pc, #776]	; (10009c2c <_strtod_r+0x380>)
10009924:	ab1f      	add	r3, sp, #124	; 0x7c
10009926:	f001 fd3c 	bl	1000b3a2 <__gethex>
1000992a:	2407      	movs	r4, #7
1000992c:	9004      	str	r0, [sp, #16]
1000992e:	4004      	ands	r4, r0
10009930:	d101      	bne.n	10009936 <_strtod_r+0x8a>
10009932:	f000 fda7 	bl	1000a484 <_strtod_r+0xbd8>
10009936:	2c06      	cmp	r4, #6
10009938:	d105      	bne.n	10009946 <_strtod_r+0x9a>
1000993a:	2300      	movs	r3, #0
1000993c:	3501      	adds	r5, #1
1000993e:	951d      	str	r5, [sp, #116]	; 0x74
10009940:	930d      	str	r3, [sp, #52]	; 0x34
10009942:	f000 fd9f 	bl	1000a484 <_strtod_r+0xbd8>
10009946:	9a1e      	ldr	r2, [sp, #120]	; 0x78
10009948:	2a00      	cmp	r2, #0
1000994a:	d007      	beq.n	1000995c <_strtod_r+0xb0>
1000994c:	a820      	add	r0, sp, #128	; 0x80
1000994e:	2135      	movs	r1, #53	; 0x35
10009950:	f002 fbda 	bl	1000c108 <__copybits>
10009954:	9803      	ldr	r0, [sp, #12]
10009956:	991e      	ldr	r1, [sp, #120]	; 0x78
10009958:	f002 f843 	bl	1000b9e2 <_Bfree>
1000995c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000995e:	2c06      	cmp	r4, #6
10009960:	d81c      	bhi.n	1000999c <_strtod_r+0xf0>
10009962:	1c20      	adds	r0, r4, #0
10009964:	f002 fe7e 	bl	1000c664 <__gnu_thumb1_case_uqi>
10009968:	14070a04 	.word	0x14070a04
1000996c:	0a17      	.short	0x0a17
1000996e:	04          	.byte	0x04
1000996f:	00          	.byte	0x00
10009970:	2700      	movs	r7, #0
10009972:	1c3e      	adds	r6, r7, #0
10009974:	e012      	b.n	1000999c <_strtod_r+0xf0>
10009976:	9e20      	ldr	r6, [sp, #128]	; 0x80
10009978:	9f21      	ldr	r7, [sp, #132]	; 0x84
1000997a:	e00f      	b.n	1000999c <_strtod_r+0xf0>
1000997c:	4aac      	ldr	r2, [pc, #688]	; (10009c30 <_strtod_r+0x384>)
1000997e:	9921      	ldr	r1, [sp, #132]	; 0x84
10009980:	189b      	adds	r3, r3, r2
10009982:	4aac      	ldr	r2, [pc, #688]	; (10009c34 <_strtod_r+0x388>)
10009984:	051b      	lsls	r3, r3, #20
10009986:	400a      	ands	r2, r1
10009988:	4313      	orrs	r3, r2
1000998a:	9e20      	ldr	r6, [sp, #128]	; 0x80
1000998c:	1c1f      	adds	r7, r3, #0
1000998e:	e005      	b.n	1000999c <_strtod_r+0xf0>
10009990:	4fa9      	ldr	r7, [pc, #676]	; (10009c38 <_strtod_r+0x38c>)
10009992:	2600      	movs	r6, #0
10009994:	e002      	b.n	1000999c <_strtod_r+0xf0>
10009996:	2601      	movs	r6, #1
10009998:	4fa8      	ldr	r7, [pc, #672]	; (10009c3c <_strtod_r+0x390>)
1000999a:	4276      	negs	r6, r6
1000999c:	9b04      	ldr	r3, [sp, #16]
1000999e:	071b      	lsls	r3, r3, #28
100099a0:	d401      	bmi.n	100099a6 <_strtod_r+0xfa>
100099a2:	f000 fd6f 	bl	1000a484 <_strtod_r+0xbd8>
100099a6:	2380      	movs	r3, #128	; 0x80
100099a8:	061b      	lsls	r3, r3, #24
100099aa:	431f      	orrs	r7, r3
100099ac:	f000 fd6a 	bl	1000a484 <_strtod_r+0xbd8>
100099b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
100099b2:	1c5a      	adds	r2, r3, #1
100099b4:	921d      	str	r2, [sp, #116]	; 0x74
100099b6:	785b      	ldrb	r3, [r3, #1]
100099b8:	2b30      	cmp	r3, #48	; 0x30
100099ba:	d0f9      	beq.n	100099b0 <_strtod_r+0x104>
100099bc:	2b00      	cmp	r3, #0
100099be:	d101      	bne.n	100099c4 <_strtod_r+0x118>
100099c0:	f000 fd60 	bl	1000a484 <_strtod_r+0xbd8>
100099c4:	2301      	movs	r3, #1
100099c6:	930a      	str	r3, [sp, #40]	; 0x28
100099c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
100099ca:	930c      	str	r3, [sp, #48]	; 0x30
100099cc:	2300      	movs	r3, #0
100099ce:	9305      	str	r3, [sp, #20]
100099d0:	9307      	str	r3, [sp, #28]
100099d2:	9304      	str	r3, [sp, #16]
100099d4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
100099d6:	7823      	ldrb	r3, [r4, #0]
100099d8:	1c1a      	adds	r2, r3, #0
100099da:	3a30      	subs	r2, #48	; 0x30
100099dc:	9308      	str	r3, [sp, #32]
100099de:	b2d3      	uxtb	r3, r2
100099e0:	2b09      	cmp	r3, #9
100099e2:	d812      	bhi.n	10009a0a <_strtod_r+0x15e>
100099e4:	9904      	ldr	r1, [sp, #16]
100099e6:	230a      	movs	r3, #10
100099e8:	2908      	cmp	r1, #8
100099ea:	dc04      	bgt.n	100099f6 <_strtod_r+0x14a>
100099ec:	9907      	ldr	r1, [sp, #28]
100099ee:	434b      	muls	r3, r1
100099f0:	18d3      	adds	r3, r2, r3
100099f2:	9307      	str	r3, [sp, #28]
100099f4:	e003      	b.n	100099fe <_strtod_r+0x152>
100099f6:	9905      	ldr	r1, [sp, #20]
100099f8:	434b      	muls	r3, r1
100099fa:	18d3      	adds	r3, r2, r3
100099fc:	9305      	str	r3, [sp, #20]
100099fe:	9b04      	ldr	r3, [sp, #16]
10009a00:	3401      	adds	r4, #1
10009a02:	3301      	adds	r3, #1
10009a04:	9304      	str	r3, [sp, #16]
10009a06:	941d      	str	r4, [sp, #116]	; 0x74
10009a08:	e7e4      	b.n	100099d4 <_strtod_r+0x128>
10009a0a:	9803      	ldr	r0, [sp, #12]
10009a0c:	f001 ff98 	bl	1000b940 <_localeconv_r>
10009a10:	6805      	ldr	r5, [r0, #0]
10009a12:	9803      	ldr	r0, [sp, #12]
10009a14:	f001 ff94 	bl	1000b940 <_localeconv_r>
10009a18:	6800      	ldr	r0, [r0, #0]
10009a1a:	f7ff ff15 	bl	10009848 <strlen>
10009a1e:	1c29      	adds	r1, r5, #0
10009a20:	1c02      	adds	r2, r0, #0
10009a22:	1c20      	adds	r0, r4, #0
10009a24:	f002 fdbc 	bl	1000c5a0 <strncmp>
10009a28:	1e05      	subs	r5, r0, #0
10009a2a:	d005      	beq.n	10009a38 <_strtod_r+0x18c>
10009a2c:	2000      	movs	r0, #0
10009a2e:	9b08      	ldr	r3, [sp, #32]
10009a30:	9c04      	ldr	r4, [sp, #16]
10009a32:	1c01      	adds	r1, r0, #0
10009a34:	9008      	str	r0, [sp, #32]
10009a36:	e05a      	b.n	10009aee <_strtod_r+0x242>
10009a38:	9803      	ldr	r0, [sp, #12]
10009a3a:	f001 ff81 	bl	1000b940 <_localeconv_r>
10009a3e:	6800      	ldr	r0, [r0, #0]
10009a40:	f7ff ff02 	bl	10009848 <strlen>
10009a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009a46:	9a04      	ldr	r2, [sp, #16]
10009a48:	1818      	adds	r0, r3, r0
10009a4a:	901d      	str	r0, [sp, #116]	; 0x74
10009a4c:	7803      	ldrb	r3, [r0, #0]
10009a4e:	1e10      	subs	r0, r2, #0
10009a50:	d141      	bne.n	10009ad6 <_strtod_r+0x22a>
10009a52:	2b30      	cmp	r3, #48	; 0x30
10009a54:	d105      	bne.n	10009a62 <_strtod_r+0x1b6>
10009a56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009a58:	3001      	adds	r0, #1
10009a5a:	1c5a      	adds	r2, r3, #1
10009a5c:	921d      	str	r2, [sp, #116]	; 0x74
10009a5e:	785b      	ldrb	r3, [r3, #1]
10009a60:	e7f7      	b.n	10009a52 <_strtod_r+0x1a6>
10009a62:	1c1a      	adds	r2, r3, #0
10009a64:	3a31      	subs	r2, #49	; 0x31
10009a66:	2a08      	cmp	r2, #8
10009a68:	d83d      	bhi.n	10009ae6 <_strtod_r+0x23a>
10009a6a:	1c01      	adds	r1, r0, #0
10009a6c:	2000      	movs	r0, #0
10009a6e:	1c04      	adds	r4, r0, #0
10009a70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
10009a72:	920c      	str	r2, [sp, #48]	; 0x30
10009a74:	3b30      	subs	r3, #48	; 0x30
10009a76:	1c42      	adds	r2, r0, #1
10009a78:	2b00      	cmp	r3, #0
10009a7a:	d026      	beq.n	10009aca <_strtod_r+0x21e>
10009a7c:	1889      	adds	r1, r1, r2
10009a7e:	1c22      	adds	r2, r4, #0
10009a80:	1900      	adds	r0, r0, r4
10009a82:	4282      	cmp	r2, r0
10009a84:	d00f      	beq.n	10009aa6 <_strtod_r+0x1fa>
10009a86:	3201      	adds	r2, #1
10009a88:	1e54      	subs	r4, r2, #1
10009a8a:	2c08      	cmp	r4, #8
10009a8c:	dc04      	bgt.n	10009a98 <_strtod_r+0x1ec>
10009a8e:	240a      	movs	r4, #10
10009a90:	9d07      	ldr	r5, [sp, #28]
10009a92:	4365      	muls	r5, r4
10009a94:	9507      	str	r5, [sp, #28]
10009a96:	e7f4      	b.n	10009a82 <_strtod_r+0x1d6>
10009a98:	2a10      	cmp	r2, #16
10009a9a:	dcf2      	bgt.n	10009a82 <_strtod_r+0x1d6>
10009a9c:	240a      	movs	r4, #10
10009a9e:	9d05      	ldr	r5, [sp, #20]
10009aa0:	4365      	muls	r5, r4
10009aa2:	9505      	str	r5, [sp, #20]
10009aa4:	e7ed      	b.n	10009a82 <_strtod_r+0x1d6>
10009aa6:	1c54      	adds	r4, r2, #1
10009aa8:	2a08      	cmp	r2, #8
10009aaa:	dc06      	bgt.n	10009aba <_strtod_r+0x20e>
10009aac:	220a      	movs	r2, #10
10009aae:	9807      	ldr	r0, [sp, #28]
10009ab0:	4342      	muls	r2, r0
10009ab2:	18d3      	adds	r3, r2, r3
10009ab4:	9307      	str	r3, [sp, #28]
10009ab6:	2200      	movs	r2, #0
10009ab8:	e007      	b.n	10009aca <_strtod_r+0x21e>
10009aba:	2200      	movs	r2, #0
10009abc:	2c10      	cmp	r4, #16
10009abe:	dc04      	bgt.n	10009aca <_strtod_r+0x21e>
10009ac0:	200a      	movs	r0, #10
10009ac2:	9d05      	ldr	r5, [sp, #20]
10009ac4:	4368      	muls	r0, r5
10009ac6:	18c3      	adds	r3, r0, r3
10009ac8:	9305      	str	r3, [sp, #20]
10009aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009acc:	1c58      	adds	r0, r3, #1
10009ace:	901d      	str	r0, [sp, #116]	; 0x74
10009ad0:	785b      	ldrb	r3, [r3, #1]
10009ad2:	1c10      	adds	r0, r2, #0
10009ad4:	e002      	b.n	10009adc <_strtod_r+0x230>
10009ad6:	1c28      	adds	r0, r5, #0
10009ad8:	1c29      	adds	r1, r5, #0
10009ada:	9c04      	ldr	r4, [sp, #16]
10009adc:	1c1a      	adds	r2, r3, #0
10009ade:	3a30      	subs	r2, #48	; 0x30
10009ae0:	2a09      	cmp	r2, #9
10009ae2:	d9c7      	bls.n	10009a74 <_strtod_r+0x1c8>
10009ae4:	e001      	b.n	10009aea <_strtod_r+0x23e>
10009ae6:	2400      	movs	r4, #0
10009ae8:	1c21      	adds	r1, r4, #0
10009aea:	2201      	movs	r2, #1
10009aec:	9208      	str	r2, [sp, #32]
10009aee:	2220      	movs	r2, #32
10009af0:	1c1d      	adds	r5, r3, #0
10009af2:	4395      	bics	r5, r2
10009af4:	2200      	movs	r2, #0
10009af6:	2d45      	cmp	r5, #69	; 0x45
10009af8:	d157      	bne.n	10009baa <_strtod_r+0x2fe>
10009afa:	1c23      	adds	r3, r4, #0
10009afc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10009afe:	4303      	orrs	r3, r0
10009b00:	432b      	orrs	r3, r5
10009b02:	4293      	cmp	r3, r2
10009b04:	d100      	bne.n	10009b08 <_strtod_r+0x25c>
10009b06:	e0a9      	b.n	10009c5c <_strtod_r+0x3b0>
10009b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b0a:	9306      	str	r3, [sp, #24]
10009b0c:	3301      	adds	r3, #1
10009b0e:	931d      	str	r3, [sp, #116]	; 0x74
10009b10:	9b06      	ldr	r3, [sp, #24]
10009b12:	785b      	ldrb	r3, [r3, #1]
10009b14:	2b2b      	cmp	r3, #43	; 0x2b
10009b16:	d006      	beq.n	10009b26 <_strtod_r+0x27a>
10009b18:	2b2d      	cmp	r3, #45	; 0x2d
10009b1a:	d001      	beq.n	10009b20 <_strtod_r+0x274>
10009b1c:	9209      	str	r2, [sp, #36]	; 0x24
10009b1e:	e008      	b.n	10009b32 <_strtod_r+0x286>
10009b20:	2301      	movs	r3, #1
10009b22:	9309      	str	r3, [sp, #36]	; 0x24
10009b24:	e000      	b.n	10009b28 <_strtod_r+0x27c>
10009b26:	9209      	str	r2, [sp, #36]	; 0x24
10009b28:	9b06      	ldr	r3, [sp, #24]
10009b2a:	3302      	adds	r3, #2
10009b2c:	931d      	str	r3, [sp, #116]	; 0x74
10009b2e:	9b06      	ldr	r3, [sp, #24]
10009b30:	789b      	ldrb	r3, [r3, #2]
10009b32:	1c1a      	adds	r2, r3, #0
10009b34:	3a30      	subs	r2, #48	; 0x30
10009b36:	2a09      	cmp	r2, #9
10009b38:	d834      	bhi.n	10009ba4 <_strtod_r+0x2f8>
10009b3a:	2b30      	cmp	r3, #48	; 0x30
10009b3c:	d104      	bne.n	10009b48 <_strtod_r+0x29c>
10009b3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b40:	1c5a      	adds	r2, r3, #1
10009b42:	921d      	str	r2, [sp, #116]	; 0x74
10009b44:	785b      	ldrb	r3, [r3, #1]
10009b46:	e7f8      	b.n	10009b3a <_strtod_r+0x28e>
10009b48:	2531      	movs	r5, #49	; 0x31
10009b4a:	426d      	negs	r5, r5
10009b4c:	46ac      	mov	ip, r5
10009b4e:	449c      	add	ip, r3
10009b50:	4665      	mov	r5, ip
10009b52:	2200      	movs	r2, #0
10009b54:	2d08      	cmp	r5, #8
10009b56:	d828      	bhi.n	10009baa <_strtod_r+0x2fe>
10009b58:	3b30      	subs	r3, #48	; 0x30
10009b5a:	930b      	str	r3, [sp, #44]	; 0x2c
10009b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b5e:	930e      	str	r3, [sp, #56]	; 0x38
10009b60:	2530      	movs	r5, #48	; 0x30
10009b62:	426d      	negs	r5, r5
10009b64:	46ac      	mov	ip, r5
10009b66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009b68:	1c5a      	adds	r2, r3, #1
10009b6a:	921d      	str	r2, [sp, #116]	; 0x74
10009b6c:	785b      	ldrb	r3, [r3, #1]
10009b6e:	449c      	add	ip, r3
10009b70:	4665      	mov	r5, ip
10009b72:	2d09      	cmp	r5, #9
10009b74:	d806      	bhi.n	10009b84 <_strtod_r+0x2d8>
10009b76:	220a      	movs	r2, #10
10009b78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10009b7a:	436a      	muls	r2, r5
10009b7c:	18d3      	adds	r3, r2, r3
10009b7e:	3b30      	subs	r3, #48	; 0x30
10009b80:	930b      	str	r3, [sp, #44]	; 0x2c
10009b82:	e7ed      	b.n	10009b60 <_strtod_r+0x2b4>
10009b84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
10009b86:	1b52      	subs	r2, r2, r5
10009b88:	1e15      	subs	r5, r2, #0
10009b8a:	4a2d      	ldr	r2, [pc, #180]	; (10009c40 <_strtod_r+0x394>)
10009b8c:	4694      	mov	ip, r2
10009b8e:	2d08      	cmp	r5, #8
10009b90:	dc03      	bgt.n	10009b9a <_strtod_r+0x2ee>
10009b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10009b94:	4562      	cmp	r2, ip
10009b96:	dd00      	ble.n	10009b9a <_strtod_r+0x2ee>
10009b98:	4662      	mov	r2, ip
10009b9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
10009b9c:	2d00      	cmp	r5, #0
10009b9e:	d004      	beq.n	10009baa <_strtod_r+0x2fe>
10009ba0:	4252      	negs	r2, r2
10009ba2:	e002      	b.n	10009baa <_strtod_r+0x2fe>
10009ba4:	9a06      	ldr	r2, [sp, #24]
10009ba6:	921d      	str	r2, [sp, #116]	; 0x74
10009ba8:	2200      	movs	r2, #0
10009baa:	2c00      	cmp	r4, #0
10009bac:	d161      	bne.n	10009c72 <_strtod_r+0x3c6>
10009bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10009bb0:	4310      	orrs	r0, r2
10009bb2:	d001      	beq.n	10009bb8 <_strtod_r+0x30c>
10009bb4:	f000 fc66 	bl	1000a484 <_strtod_r+0xbd8>
10009bb8:	9a08      	ldr	r2, [sp, #32]
10009bba:	2a00      	cmp	r2, #0
10009bbc:	d14e      	bne.n	10009c5c <_strtod_r+0x3b0>
10009bbe:	2b4e      	cmp	r3, #78	; 0x4e
10009bc0:	d01c      	beq.n	10009bfc <_strtod_r+0x350>
10009bc2:	dc02      	bgt.n	10009bca <_strtod_r+0x31e>
10009bc4:	2b49      	cmp	r3, #73	; 0x49
10009bc6:	d005      	beq.n	10009bd4 <_strtod_r+0x328>
10009bc8:	e048      	b.n	10009c5c <_strtod_r+0x3b0>
10009bca:	2b69      	cmp	r3, #105	; 0x69
10009bcc:	d002      	beq.n	10009bd4 <_strtod_r+0x328>
10009bce:	2b6e      	cmp	r3, #110	; 0x6e
10009bd0:	d014      	beq.n	10009bfc <_strtod_r+0x350>
10009bd2:	e043      	b.n	10009c5c <_strtod_r+0x3b0>
10009bd4:	a81d      	add	r0, sp, #116	; 0x74
10009bd6:	491b      	ldr	r1, [pc, #108]	; (10009c44 <_strtod_r+0x398>)
10009bd8:	f7ff fe3d 	bl	10009856 <match>
10009bdc:	2800      	cmp	r0, #0
10009bde:	d03d      	beq.n	10009c5c <_strtod_r+0x3b0>
10009be0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009be2:	a81d      	add	r0, sp, #116	; 0x74
10009be4:	3b01      	subs	r3, #1
10009be6:	4918      	ldr	r1, [pc, #96]	; (10009c48 <_strtod_r+0x39c>)
10009be8:	931d      	str	r3, [sp, #116]	; 0x74
10009bea:	f7ff fe34 	bl	10009856 <match>
10009bee:	2800      	cmp	r0, #0
10009bf0:	d102      	bne.n	10009bf8 <_strtod_r+0x34c>
10009bf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009bf4:	3301      	adds	r3, #1
10009bf6:	931d      	str	r3, [sp, #116]	; 0x74
10009bf8:	4f0f      	ldr	r7, [pc, #60]	; (10009c38 <_strtod_r+0x38c>)
10009bfa:	e02c      	b.n	10009c56 <_strtod_r+0x3aa>
10009bfc:	a81d      	add	r0, sp, #116	; 0x74
10009bfe:	4913      	ldr	r1, [pc, #76]	; (10009c4c <_strtod_r+0x3a0>)
10009c00:	f7ff fe29 	bl	10009856 <match>
10009c04:	2800      	cmp	r0, #0
10009c06:	d029      	beq.n	10009c5c <_strtod_r+0x3b0>
10009c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
10009c0a:	781b      	ldrb	r3, [r3, #0]
10009c0c:	2b28      	cmp	r3, #40	; 0x28
10009c0e:	d121      	bne.n	10009c54 <_strtod_r+0x3a8>
10009c10:	a81d      	add	r0, sp, #116	; 0x74
10009c12:	490f      	ldr	r1, [pc, #60]	; (10009c50 <_strtod_r+0x3a4>)
10009c14:	aa20      	add	r2, sp, #128	; 0x80
10009c16:	f001 fdfa 	bl	1000b80e <__hexnan>
10009c1a:	2805      	cmp	r0, #5
10009c1c:	d11a      	bne.n	10009c54 <_strtod_r+0x3a8>
10009c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
10009c20:	4a05      	ldr	r2, [pc, #20]	; (10009c38 <_strtod_r+0x38c>)
10009c22:	9e20      	ldr	r6, [sp, #128]	; 0x80
10009c24:	431a      	orrs	r2, r3
10009c26:	1c17      	adds	r7, r2, #0
10009c28:	f000 fc2c 	bl	1000a484 <_strtod_r+0xbd8>
10009c2c:	1000cebc 	.word	0x1000cebc
10009c30:	00000433 	.word	0x00000433
10009c34:	ffefffff 	.word	0xffefffff
10009c38:	7ff00000 	.word	0x7ff00000
10009c3c:	7fffffff 	.word	0x7fffffff
10009c40:	00004e1f 	.word	0x00004e1f
10009c44:	1000ce87 	.word	0x1000ce87
10009c48:	1000d010 	.word	0x1000d010
10009c4c:	1000ce8f 	.word	0x1000ce8f
10009c50:	1000cef8 	.word	0x1000cef8
10009c54:	4f92      	ldr	r7, [pc, #584]	; (10009ea0 <_strtod_r+0x5f4>)
10009c56:	2600      	movs	r6, #0
10009c58:	f000 fc14 	bl	1000a484 <_strtod_r+0xbd8>
10009c5c:	9b06      	ldr	r3, [sp, #24]
10009c5e:	931d      	str	r3, [sp, #116]	; 0x74
10009c60:	2300      	movs	r3, #0
10009c62:	930d      	str	r3, [sp, #52]	; 0x34
10009c64:	9b19      	ldr	r3, [sp, #100]	; 0x64
10009c66:	2b00      	cmp	r3, #0
10009c68:	d001      	beq.n	10009c6e <_strtod_r+0x3c2>
10009c6a:	f000 fc0e 	bl	1000a48a <_strtod_r+0xbde>
10009c6e:	f000 fc17 	bl	1000a4a0 <_strtod_r+0xbf4>
10009c72:	1a53      	subs	r3, r2, r1
10009c74:	9309      	str	r3, [sp, #36]	; 0x24
10009c76:	9b04      	ldr	r3, [sp, #16]
10009c78:	2b00      	cmp	r3, #0
10009c7a:	d100      	bne.n	10009c7e <_strtod_r+0x3d2>
10009c7c:	9404      	str	r4, [sp, #16]
10009c7e:	1e25      	subs	r5, r4, #0
10009c80:	2d10      	cmp	r5, #16
10009c82:	dd00      	ble.n	10009c86 <_strtod_r+0x3da>
10009c84:	2510      	movs	r5, #16
10009c86:	9807      	ldr	r0, [sp, #28]
10009c88:	f7fe fdea 	bl	10008860 <__aeabi_ui2d>
10009c8c:	1c06      	adds	r6, r0, #0
10009c8e:	1c0f      	adds	r7, r1, #0
10009c90:	2d09      	cmp	r5, #9
10009c92:	dd15      	ble.n	10009cc0 <_strtod_r+0x414>
10009c94:	1c2b      	adds	r3, r5, #0
10009c96:	4a83      	ldr	r2, [pc, #524]	; (10009ea4 <_strtod_r+0x5f8>)
10009c98:	3b09      	subs	r3, #9
10009c9a:	00db      	lsls	r3, r3, #3
10009c9c:	18d3      	adds	r3, r2, r3
10009c9e:	681a      	ldr	r2, [r3, #0]
10009ca0:	685b      	ldr	r3, [r3, #4]
10009ca2:	f7fd ff8d 	bl	10007bc0 <__aeabi_dmul>
10009ca6:	1c06      	adds	r6, r0, #0
10009ca8:	9805      	ldr	r0, [sp, #20]
10009caa:	1c0f      	adds	r7, r1, #0
10009cac:	f7fe fdd8 	bl	10008860 <__aeabi_ui2d>
10009cb0:	1c02      	adds	r2, r0, #0
10009cb2:	1c0b      	adds	r3, r1, #0
10009cb4:	1c30      	adds	r0, r6, #0
10009cb6:	1c39      	adds	r1, r7, #0
10009cb8:	f7fd fb40 	bl	1000733c <__aeabi_dadd>
10009cbc:	1c06      	adds	r6, r0, #0
10009cbe:	1c0f      	adds	r7, r1, #0
10009cc0:	2c0f      	cmp	r4, #15
10009cc2:	dc37      	bgt.n	10009d34 <_strtod_r+0x488>
10009cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009cc6:	2b00      	cmp	r3, #0
10009cc8:	d100      	bne.n	10009ccc <_strtod_r+0x420>
10009cca:	e3db      	b.n	1000a484 <_strtod_r+0xbd8>
10009ccc:	dd24      	ble.n	10009d18 <_strtod_r+0x46c>
10009cce:	2b16      	cmp	r3, #22
10009cd0:	dc07      	bgt.n	10009ce2 <_strtod_r+0x436>
10009cd2:	4974      	ldr	r1, [pc, #464]	; (10009ea4 <_strtod_r+0x5f8>)
10009cd4:	00da      	lsls	r2, r3, #3
10009cd6:	188a      	adds	r2, r1, r2
10009cd8:	6810      	ldr	r0, [r2, #0]
10009cda:	6851      	ldr	r1, [r2, #4]
10009cdc:	1c3b      	adds	r3, r7, #0
10009cde:	1c32      	adds	r2, r6, #0
10009ce0:	e015      	b.n	10009d0e <_strtod_r+0x462>
10009ce2:	2325      	movs	r3, #37	; 0x25
10009ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009ce6:	1b1b      	subs	r3, r3, r4
10009ce8:	429a      	cmp	r2, r3
10009cea:	dc23      	bgt.n	10009d34 <_strtod_r+0x488>
10009cec:	220f      	movs	r2, #15
10009cee:	4d6d      	ldr	r5, [pc, #436]	; (10009ea4 <_strtod_r+0x5f8>)
10009cf0:	1b14      	subs	r4, r2, r4
10009cf2:	00e3      	lsls	r3, r4, #3
10009cf4:	18eb      	adds	r3, r5, r3
10009cf6:	6818      	ldr	r0, [r3, #0]
10009cf8:	6859      	ldr	r1, [r3, #4]
10009cfa:	1c32      	adds	r2, r6, #0
10009cfc:	1c3b      	adds	r3, r7, #0
10009cfe:	f7fd ff5f 	bl	10007bc0 <__aeabi_dmul>
10009d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d04:	1b1c      	subs	r4, r3, r4
10009d06:	00e4      	lsls	r4, r4, #3
10009d08:	192d      	adds	r5, r5, r4
10009d0a:	682a      	ldr	r2, [r5, #0]
10009d0c:	686b      	ldr	r3, [r5, #4]
10009d0e:	f7fd ff57 	bl	10007bc0 <__aeabi_dmul>
10009d12:	1c06      	adds	r6, r0, #0
10009d14:	1c0f      	adds	r7, r1, #0
10009d16:	e3b5      	b.n	1000a484 <_strtod_r+0xbd8>
10009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d1a:	3316      	adds	r3, #22
10009d1c:	db0a      	blt.n	10009d34 <_strtod_r+0x488>
10009d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d20:	1c30      	adds	r0, r6, #0
10009d22:	00da      	lsls	r2, r3, #3
10009d24:	4b5f      	ldr	r3, [pc, #380]	; (10009ea4 <_strtod_r+0x5f8>)
10009d26:	1c39      	adds	r1, r7, #0
10009d28:	1a9a      	subs	r2, r3, r2
10009d2a:	6853      	ldr	r3, [r2, #4]
10009d2c:	6812      	ldr	r2, [r2, #0]
10009d2e:	f002 fcc1 	bl	1000c6b4 <__aeabi_ddiv>
10009d32:	e7ee      	b.n	10009d12 <_strtod_r+0x466>
10009d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009d36:	1b65      	subs	r5, r4, r5
10009d38:	195d      	adds	r5, r3, r5
10009d3a:	2d00      	cmp	r5, #0
10009d3c:	dd59      	ble.n	10009df2 <_strtod_r+0x546>
10009d3e:	230f      	movs	r3, #15
10009d40:	402b      	ands	r3, r5
10009d42:	d00a      	beq.n	10009d5a <_strtod_r+0x4ae>
10009d44:	4a57      	ldr	r2, [pc, #348]	; (10009ea4 <_strtod_r+0x5f8>)
10009d46:	00db      	lsls	r3, r3, #3
10009d48:	18d3      	adds	r3, r2, r3
10009d4a:	6818      	ldr	r0, [r3, #0]
10009d4c:	6859      	ldr	r1, [r3, #4]
10009d4e:	1c32      	adds	r2, r6, #0
10009d50:	1c3b      	adds	r3, r7, #0
10009d52:	f7fd ff35 	bl	10007bc0 <__aeabi_dmul>
10009d56:	1c06      	adds	r6, r0, #0
10009d58:	1c0f      	adds	r7, r1, #0
10009d5a:	230f      	movs	r3, #15
10009d5c:	439d      	bics	r5, r3
10009d5e:	d100      	bne.n	10009d62 <_strtod_r+0x4b6>
10009d60:	e0b0      	b.n	10009ec4 <_strtod_r+0x618>
10009d62:	3326      	adds	r3, #38	; 0x26
10009d64:	33ff      	adds	r3, #255	; 0xff
10009d66:	429d      	cmp	r5, r3
10009d68:	dd0e      	ble.n	10009d88 <_strtod_r+0x4dc>
10009d6a:	2300      	movs	r3, #0
10009d6c:	9304      	str	r3, [sp, #16]
10009d6e:	9305      	str	r3, [sp, #20]
10009d70:	930b      	str	r3, [sp, #44]	; 0x2c
10009d72:	9308      	str	r3, [sp, #32]
10009d74:	2322      	movs	r3, #34	; 0x22
10009d76:	2600      	movs	r6, #0
10009d78:	9a03      	ldr	r2, [sp, #12]
10009d7a:	4f4b      	ldr	r7, [pc, #300]	; (10009ea8 <_strtod_r+0x5fc>)
10009d7c:	6013      	str	r3, [r2, #0]
10009d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009d80:	42b3      	cmp	r3, r6
10009d82:	d000      	beq.n	10009d86 <_strtod_r+0x4da>
10009d84:	e36a      	b.n	1000a45c <_strtod_r+0xbb0>
10009d86:	e37d      	b.n	1000a484 <_strtod_r+0xbd8>
10009d88:	2300      	movs	r3, #0
10009d8a:	1c30      	adds	r0, r6, #0
10009d8c:	1c39      	adds	r1, r7, #0
10009d8e:	112d      	asrs	r5, r5, #4
10009d90:	9305      	str	r3, [sp, #20]
10009d92:	2d01      	cmp	r5, #1
10009d94:	dd0e      	ble.n	10009db4 <_strtod_r+0x508>
10009d96:	07eb      	lsls	r3, r5, #31
10009d98:	d507      	bpl.n	10009daa <_strtod_r+0x4fe>
10009d9a:	9b05      	ldr	r3, [sp, #20]
10009d9c:	00da      	lsls	r2, r3, #3
10009d9e:	4b43      	ldr	r3, [pc, #268]	; (10009eac <_strtod_r+0x600>)
10009da0:	18d3      	adds	r3, r2, r3
10009da2:	681a      	ldr	r2, [r3, #0]
10009da4:	685b      	ldr	r3, [r3, #4]
10009da6:	f7fd ff0b 	bl	10007bc0 <__aeabi_dmul>
10009daa:	9b05      	ldr	r3, [sp, #20]
10009dac:	106d      	asrs	r5, r5, #1
10009dae:	3301      	adds	r3, #1
10009db0:	9305      	str	r3, [sp, #20]
10009db2:	e7ee      	b.n	10009d92 <_strtod_r+0x4e6>
10009db4:	1c06      	adds	r6, r0, #0
10009db6:	4b3e      	ldr	r3, [pc, #248]	; (10009eb0 <_strtod_r+0x604>)
10009db8:	18cf      	adds	r7, r1, r3
10009dba:	9b05      	ldr	r3, [sp, #20]
10009dbc:	00da      	lsls	r2, r3, #3
10009dbe:	4b3b      	ldr	r3, [pc, #236]	; (10009eac <_strtod_r+0x600>)
10009dc0:	189b      	adds	r3, r3, r2
10009dc2:	6818      	ldr	r0, [r3, #0]
10009dc4:	6859      	ldr	r1, [r3, #4]
10009dc6:	1c32      	adds	r2, r6, #0
10009dc8:	1c3b      	adds	r3, r7, #0
10009dca:	f7fd fef9 	bl	10007bc0 <__aeabi_dmul>
10009dce:	4b36      	ldr	r3, [pc, #216]	; (10009ea8 <_strtod_r+0x5fc>)
10009dd0:	1c0f      	adds	r7, r1, #0
10009dd2:	400b      	ands	r3, r1
10009dd4:	4937      	ldr	r1, [pc, #220]	; (10009eb4 <_strtod_r+0x608>)
10009dd6:	1c06      	adds	r6, r0, #0
10009dd8:	428b      	cmp	r3, r1
10009dda:	d8c6      	bhi.n	10009d6a <_strtod_r+0x4be>
10009ddc:	4936      	ldr	r1, [pc, #216]	; (10009eb8 <_strtod_r+0x60c>)
10009dde:	428b      	cmp	r3, r1
10009de0:	d903      	bls.n	10009dea <_strtod_r+0x53e>
10009de2:	2601      	movs	r6, #1
10009de4:	4f35      	ldr	r7, [pc, #212]	; (10009ebc <_strtod_r+0x610>)
10009de6:	4276      	negs	r6, r6
10009de8:	e06c      	b.n	10009ec4 <_strtod_r+0x618>
10009dea:	23d4      	movs	r3, #212	; 0xd4
10009dec:	049b      	lsls	r3, r3, #18
10009dee:	18ff      	adds	r7, r7, r3
10009df0:	e068      	b.n	10009ec4 <_strtod_r+0x618>
10009df2:	2d00      	cmp	r5, #0
10009df4:	d066      	beq.n	10009ec4 <_strtod_r+0x618>
10009df6:	230f      	movs	r3, #15
10009df8:	426d      	negs	r5, r5
10009dfa:	402b      	ands	r3, r5
10009dfc:	d00a      	beq.n	10009e14 <_strtod_r+0x568>
10009dfe:	4a29      	ldr	r2, [pc, #164]	; (10009ea4 <_strtod_r+0x5f8>)
10009e00:	00db      	lsls	r3, r3, #3
10009e02:	18d3      	adds	r3, r2, r3
10009e04:	1c30      	adds	r0, r6, #0
10009e06:	681a      	ldr	r2, [r3, #0]
10009e08:	685b      	ldr	r3, [r3, #4]
10009e0a:	1c39      	adds	r1, r7, #0
10009e0c:	f002 fc52 	bl	1000c6b4 <__aeabi_ddiv>
10009e10:	1c06      	adds	r6, r0, #0
10009e12:	1c0f      	adds	r7, r1, #0
10009e14:	112d      	asrs	r5, r5, #4
10009e16:	d055      	beq.n	10009ec4 <_strtod_r+0x618>
10009e18:	2d1f      	cmp	r5, #31
10009e1a:	dd05      	ble.n	10009e28 <_strtod_r+0x57c>
10009e1c:	2300      	movs	r3, #0
10009e1e:	9304      	str	r3, [sp, #16]
10009e20:	9305      	str	r3, [sp, #20]
10009e22:	930b      	str	r3, [sp, #44]	; 0x2c
10009e24:	9308      	str	r3, [sp, #32]
10009e26:	e118      	b.n	1000a05a <_strtod_r+0x7ae>
10009e28:	2300      	movs	r3, #0
10009e2a:	9306      	str	r3, [sp, #24]
10009e2c:	06eb      	lsls	r3, r5, #27
10009e2e:	d501      	bpl.n	10009e34 <_strtod_r+0x588>
10009e30:	236a      	movs	r3, #106	; 0x6a
10009e32:	9306      	str	r3, [sp, #24]
10009e34:	1c39      	adds	r1, r7, #0
10009e36:	1c30      	adds	r0, r6, #0
10009e38:	4e21      	ldr	r6, [pc, #132]	; (10009ec0 <_strtod_r+0x614>)
10009e3a:	2d00      	cmp	r5, #0
10009e3c:	dd08      	ble.n	10009e50 <_strtod_r+0x5a4>
10009e3e:	07eb      	lsls	r3, r5, #31
10009e40:	d503      	bpl.n	10009e4a <_strtod_r+0x59e>
10009e42:	6832      	ldr	r2, [r6, #0]
10009e44:	6873      	ldr	r3, [r6, #4]
10009e46:	f7fd febb 	bl	10007bc0 <__aeabi_dmul>
10009e4a:	106d      	asrs	r5, r5, #1
10009e4c:	3608      	adds	r6, #8
10009e4e:	e7f4      	b.n	10009e3a <_strtod_r+0x58e>
10009e50:	9b06      	ldr	r3, [sp, #24]
10009e52:	1c06      	adds	r6, r0, #0
10009e54:	1c0f      	adds	r7, r1, #0
10009e56:	2b00      	cmp	r3, #0
10009e58:	d019      	beq.n	10009e8e <_strtod_r+0x5e2>
10009e5a:	226b      	movs	r2, #107	; 0x6b
10009e5c:	004b      	lsls	r3, r1, #1
10009e5e:	0d5b      	lsrs	r3, r3, #21
10009e60:	1c08      	adds	r0, r1, #0
10009e62:	1ad3      	subs	r3, r2, r3
10009e64:	2b00      	cmp	r3, #0
10009e66:	dd12      	ble.n	10009e8e <_strtod_r+0x5e2>
10009e68:	2b1f      	cmp	r3, #31
10009e6a:	dd0c      	ble.n	10009e86 <_strtod_r+0x5da>
10009e6c:	2600      	movs	r6, #0
10009e6e:	2b34      	cmp	r3, #52	; 0x34
10009e70:	dd02      	ble.n	10009e78 <_strtod_r+0x5cc>
10009e72:	27dc      	movs	r7, #220	; 0xdc
10009e74:	04bf      	lsls	r7, r7, #18
10009e76:	e00a      	b.n	10009e8e <_strtod_r+0x5e2>
10009e78:	2201      	movs	r2, #1
10009e7a:	3b20      	subs	r3, #32
10009e7c:	4252      	negs	r2, r2
10009e7e:	409a      	lsls	r2, r3
10009e80:	4010      	ands	r0, r2
10009e82:	1c07      	adds	r7, r0, #0
10009e84:	e003      	b.n	10009e8e <_strtod_r+0x5e2>
10009e86:	2201      	movs	r2, #1
10009e88:	4252      	negs	r2, r2
10009e8a:	409a      	lsls	r2, r3
10009e8c:	4016      	ands	r6, r2
10009e8e:	1c30      	adds	r0, r6, #0
10009e90:	1c39      	adds	r1, r7, #0
10009e92:	2200      	movs	r2, #0
10009e94:	2300      	movs	r3, #0
10009e96:	f7fc fdff 	bl	10006a98 <__aeabi_dcmpeq>
10009e9a:	2800      	cmp	r0, #0
10009e9c:	d1be      	bne.n	10009e1c <_strtod_r+0x570>
10009e9e:	e013      	b.n	10009ec8 <_strtod_r+0x61c>
10009ea0:	fff80000 	.word	0xfff80000
10009ea4:	1000d028 	.word	0x1000d028
10009ea8:	7ff00000 	.word	0x7ff00000
10009eac:	1000d0f0 	.word	0x1000d0f0
10009eb0:	fcb00000 	.word	0xfcb00000
10009eb4:	7ca00000 	.word	0x7ca00000
10009eb8:	7c900000 	.word	0x7c900000
10009ebc:	7fefffff 	.word	0x7fefffff
10009ec0:	1000ced0 	.word	0x1000ced0
10009ec4:	2300      	movs	r3, #0
10009ec6:	9306      	str	r3, [sp, #24]
10009ec8:	9b07      	ldr	r3, [sp, #28]
10009eca:	9803      	ldr	r0, [sp, #12]
10009ecc:	9300      	str	r3, [sp, #0]
10009ece:	990c      	ldr	r1, [sp, #48]	; 0x30
10009ed0:	9a04      	ldr	r2, [sp, #16]
10009ed2:	1c23      	adds	r3, r4, #0
10009ed4:	f001 fdda 	bl	1000ba8c <__s2b>
10009ed8:	900b      	str	r0, [sp, #44]	; 0x2c
10009eda:	2800      	cmp	r0, #0
10009edc:	d100      	bne.n	10009ee0 <_strtod_r+0x634>
10009ede:	e744      	b.n	10009d6a <_strtod_r+0x4be>
10009ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009ee4:	425b      	negs	r3, r3
10009ee6:	17d2      	asrs	r2, r2, #31
10009ee8:	4013      	ands	r3, r2
10009eea:	9313      	str	r3, [sp, #76]	; 0x4c
10009eec:	2300      	movs	r3, #0
10009eee:	9304      	str	r3, [sp, #16]
10009ef0:	9305      	str	r3, [sp, #20]
10009ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009ef4:	9803      	ldr	r0, [sp, #12]
10009ef6:	6859      	ldr	r1, [r3, #4]
10009ef8:	f001 fd3b 	bl	1000b972 <_Balloc>
10009efc:	9008      	str	r0, [sp, #32]
10009efe:	2800      	cmp	r0, #0
10009f00:	d100      	bne.n	10009f04 <_strtod_r+0x658>
10009f02:	e737      	b.n	10009d74 <_strtod_r+0x4c8>
10009f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10009f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
10009f08:	691b      	ldr	r3, [r3, #16]
10009f0a:	310c      	adds	r1, #12
10009f0c:	1c9a      	adds	r2, r3, #2
10009f0e:	0092      	lsls	r2, r2, #2
10009f10:	300c      	adds	r0, #12
10009f12:	9307      	str	r3, [sp, #28]
10009f14:	f7fe fe04 	bl	10008b20 <memcpy>
10009f18:	ab1f      	add	r3, sp, #124	; 0x7c
10009f1a:	9300      	str	r3, [sp, #0]
10009f1c:	ab20      	add	r3, sp, #128	; 0x80
10009f1e:	9301      	str	r3, [sp, #4]
10009f20:	9803      	ldr	r0, [sp, #12]
10009f22:	1c32      	adds	r2, r6, #0
10009f24:	1c3b      	adds	r3, r7, #0
10009f26:	960e      	str	r6, [sp, #56]	; 0x38
10009f28:	970f      	str	r7, [sp, #60]	; 0x3c
10009f2a:	f002 f86f 	bl	1000c00c <__d2b>
10009f2e:	901e      	str	r0, [sp, #120]	; 0x78
10009f30:	2800      	cmp	r0, #0
10009f32:	d100      	bne.n	10009f36 <_strtod_r+0x68a>
10009f34:	e71e      	b.n	10009d74 <_strtod_r+0x4c8>
10009f36:	9803      	ldr	r0, [sp, #12]
10009f38:	2101      	movs	r1, #1
10009f3a:	f001 fe31 	bl	1000bba0 <__i2b>
10009f3e:	9005      	str	r0, [sp, #20]
10009f40:	2800      	cmp	r0, #0
10009f42:	d100      	bne.n	10009f46 <_strtod_r+0x69a>
10009f44:	e716      	b.n	10009d74 <_strtod_r+0x4c8>
10009f46:	2300      	movs	r3, #0
10009f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
10009f4a:	930a      	str	r3, [sp, #40]	; 0x28
10009f4c:	4293      	cmp	r3, r2
10009f4e:	da00      	bge.n	10009f52 <_strtod_r+0x6a6>
10009f50:	920a      	str	r2, [sp, #40]	; 0x28
10009f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
10009f54:	2b00      	cmp	r3, #0
10009f56:	da00      	bge.n	10009f5a <_strtod_r+0x6ae>
10009f58:	e089      	b.n	1000a06e <_strtod_r+0x7c2>
10009f5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009f5e:	18d5      	adds	r5, r2, r3
10009f60:	9a06      	ldr	r2, [sp, #24]
10009f62:	9920      	ldr	r1, [sp, #128]	; 0x80
10009f64:	1a9b      	subs	r3, r3, r2
10009f66:	2236      	movs	r2, #54	; 0x36
10009f68:	185b      	adds	r3, r3, r1
10009f6a:	1a52      	subs	r2, r2, r1
10009f6c:	49c8      	ldr	r1, [pc, #800]	; (1000a290 <_strtod_r+0x9e4>)
10009f6e:	2001      	movs	r0, #1
10009f70:	428b      	cmp	r3, r1
10009f72:	db00      	blt.n	10009f76 <_strtod_r+0x6ca>
10009f74:	e085      	b.n	1000a082 <_strtod_r+0x7d6>
10009f76:	1ac9      	subs	r1, r1, r3
10009f78:	1a52      	subs	r2, r2, r1
10009f7a:	291f      	cmp	r1, #31
10009f7c:	dc7b      	bgt.n	1000a076 <_strtod_r+0x7ca>
10009f7e:	4088      	lsls	r0, r1
10009f80:	2300      	movs	r3, #0
10009f82:	9018      	str	r0, [sp, #96]	; 0x60
10009f84:	9312      	str	r3, [sp, #72]	; 0x48
10009f86:	18ab      	adds	r3, r5, r2
10009f88:	9307      	str	r3, [sp, #28]
10009f8a:	9b06      	ldr	r3, [sp, #24]
10009f8c:	18a4      	adds	r4, r4, r2
10009f8e:	18e4      	adds	r4, r4, r3
10009f90:	9b07      	ldr	r3, [sp, #28]
10009f92:	42ab      	cmp	r3, r5
10009f94:	dd00      	ble.n	10009f98 <_strtod_r+0x6ec>
10009f96:	1c2b      	adds	r3, r5, #0
10009f98:	42a3      	cmp	r3, r4
10009f9a:	dd00      	ble.n	10009f9e <_strtod_r+0x6f2>
10009f9c:	1c23      	adds	r3, r4, #0
10009f9e:	2b00      	cmp	r3, #0
10009fa0:	dd04      	ble.n	10009fac <_strtod_r+0x700>
10009fa2:	9a07      	ldr	r2, [sp, #28]
10009fa4:	1ae4      	subs	r4, r4, r3
10009fa6:	1ad2      	subs	r2, r2, r3
10009fa8:	9207      	str	r2, [sp, #28]
10009faa:	1aed      	subs	r5, r5, r3
10009fac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009fae:	2b00      	cmp	r3, #0
10009fb0:	d16b      	bne.n	1000a08a <_strtod_r+0x7de>
10009fb2:	9b07      	ldr	r3, [sp, #28]
10009fb4:	2b00      	cmp	r3, #0
10009fb6:	dd00      	ble.n	10009fba <_strtod_r+0x70e>
10009fb8:	e080      	b.n	1000a0bc <_strtod_r+0x810>
10009fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10009fbc:	2b00      	cmp	r3, #0
10009fbe:	d000      	beq.n	10009fc2 <_strtod_r+0x716>
10009fc0:	e086      	b.n	1000a0d0 <_strtod_r+0x824>
10009fc2:	2c00      	cmp	r4, #0
10009fc4:	dd00      	ble.n	10009fc8 <_strtod_r+0x71c>
10009fc6:	e08d      	b.n	1000a0e4 <_strtod_r+0x838>
10009fc8:	2d00      	cmp	r5, #0
10009fca:	dd00      	ble.n	10009fce <_strtod_r+0x722>
10009fcc:	e094      	b.n	1000a0f8 <_strtod_r+0x84c>
10009fce:	9803      	ldr	r0, [sp, #12]
10009fd0:	991e      	ldr	r1, [sp, #120]	; 0x78
10009fd2:	9a08      	ldr	r2, [sp, #32]
10009fd4:	f001 ff39 	bl	1000be4a <__mdiff>
10009fd8:	9004      	str	r0, [sp, #16]
10009fda:	2800      	cmp	r0, #0
10009fdc:	d100      	bne.n	10009fe0 <_strtod_r+0x734>
10009fde:	e6c9      	b.n	10009d74 <_strtod_r+0x4c8>
10009fe0:	2200      	movs	r2, #0
10009fe2:	68c3      	ldr	r3, [r0, #12]
10009fe4:	9905      	ldr	r1, [sp, #20]
10009fe6:	60c2      	str	r2, [r0, #12]
10009fe8:	930c      	str	r3, [sp, #48]	; 0x30
10009fea:	f001 ff13 	bl	1000be14 <__mcmp>
10009fee:	2800      	cmp	r0, #0
10009ff0:	db00      	blt.n	10009ff4 <_strtod_r+0x748>
10009ff2:	e091      	b.n	1000a118 <_strtod_r+0x86c>
10009ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009ff6:	2b00      	cmp	r3, #0
10009ff8:	d000      	beq.n	10009ffc <_strtod_r+0x750>
10009ffa:	e21a      	b.n	1000a432 <_strtod_r+0xb86>
10009ffc:	2e00      	cmp	r6, #0
10009ffe:	d000      	beq.n	1000a002 <_strtod_r+0x756>
1000a000:	e217      	b.n	1000a432 <_strtod_r+0xb86>
1000a002:	033b      	lsls	r3, r7, #12
1000a004:	d000      	beq.n	1000a008 <_strtod_r+0x75c>
1000a006:	e214      	b.n	1000a432 <_strtod_r+0xb86>
1000a008:	22d6      	movs	r2, #214	; 0xd6
1000a00a:	4ba2      	ldr	r3, [pc, #648]	; (1000a294 <_strtod_r+0x9e8>)
1000a00c:	04d2      	lsls	r2, r2, #19
1000a00e:	403b      	ands	r3, r7
1000a010:	4293      	cmp	r3, r2
1000a012:	d800      	bhi.n	1000a016 <_strtod_r+0x76a>
1000a014:	e20d      	b.n	1000a432 <_strtod_r+0xb86>
1000a016:	9b04      	ldr	r3, [sp, #16]
1000a018:	695b      	ldr	r3, [r3, #20]
1000a01a:	9307      	str	r3, [sp, #28]
1000a01c:	2b00      	cmp	r3, #0
1000a01e:	d075      	beq.n	1000a10c <_strtod_r+0x860>
1000a020:	9904      	ldr	r1, [sp, #16]
1000a022:	9803      	ldr	r0, [sp, #12]
1000a024:	2201      	movs	r2, #1
1000a026:	f001 fea3 	bl	1000bd70 <__lshift>
1000a02a:	9905      	ldr	r1, [sp, #20]
1000a02c:	9004      	str	r0, [sp, #16]
1000a02e:	f001 fef1 	bl	1000be14 <__mcmp>
1000a032:	2800      	cmp	r0, #0
1000a034:	dc00      	bgt.n	1000a038 <_strtod_r+0x78c>
1000a036:	e1fc      	b.n	1000a432 <_strtod_r+0xb86>
1000a038:	9a06      	ldr	r2, [sp, #24]
1000a03a:	4b96      	ldr	r3, [pc, #600]	; (1000a294 <_strtod_r+0x9e8>)
1000a03c:	2a00      	cmp	r2, #0
1000a03e:	d100      	bne.n	1000a042 <_strtod_r+0x796>
1000a040:	e09a      	b.n	1000a178 <_strtod_r+0x8cc>
1000a042:	1c1a      	adds	r2, r3, #0
1000a044:	21d6      	movs	r1, #214	; 0xd6
1000a046:	403a      	ands	r2, r7
1000a048:	04c9      	lsls	r1, r1, #19
1000a04a:	428a      	cmp	r2, r1
1000a04c:	dd00      	ble.n	1000a050 <_strtod_r+0x7a4>
1000a04e:	e093      	b.n	1000a178 <_strtod_r+0x8cc>
1000a050:	23dc      	movs	r3, #220	; 0xdc
1000a052:	049b      	lsls	r3, r3, #18
1000a054:	429a      	cmp	r2, r3
1000a056:	dd00      	ble.n	1000a05a <_strtod_r+0x7ae>
1000a058:	e1ee      	b.n	1000a438 <_strtod_r+0xb8c>
1000a05a:	2322      	movs	r3, #34	; 0x22
1000a05c:	9a03      	ldr	r2, [sp, #12]
1000a05e:	2600      	movs	r6, #0
1000a060:	6013      	str	r3, [r2, #0]
1000a062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a064:	2700      	movs	r7, #0
1000a066:	2b00      	cmp	r3, #0
1000a068:	d000      	beq.n	1000a06c <_strtod_r+0x7c0>
1000a06a:	e1f7      	b.n	1000a45c <_strtod_r+0xbb0>
1000a06c:	e20a      	b.n	1000a484 <_strtod_r+0xbd8>
1000a06e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a070:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000a072:	1ad4      	subs	r4, r2, r3
1000a074:	e774      	b.n	10009f60 <_strtod_r+0x6b4>
1000a076:	4988      	ldr	r1, [pc, #544]	; (1000a298 <_strtod_r+0x9ec>)
1000a078:	1acb      	subs	r3, r1, r3
1000a07a:	1c01      	adds	r1, r0, #0
1000a07c:	4099      	lsls	r1, r3
1000a07e:	9112      	str	r1, [sp, #72]	; 0x48
1000a080:	e001      	b.n	1000a086 <_strtod_r+0x7da>
1000a082:	2300      	movs	r3, #0
1000a084:	9312      	str	r3, [sp, #72]	; 0x48
1000a086:	9018      	str	r0, [sp, #96]	; 0x60
1000a088:	e77d      	b.n	10009f86 <_strtod_r+0x6da>
1000a08a:	1c1a      	adds	r2, r3, #0
1000a08c:	9803      	ldr	r0, [sp, #12]
1000a08e:	9905      	ldr	r1, [sp, #20]
1000a090:	f001 fe1c 	bl	1000bccc <__pow5mult>
1000a094:	9005      	str	r0, [sp, #20]
1000a096:	1e03      	subs	r3, r0, #0
1000a098:	d100      	bne.n	1000a09c <_strtod_r+0x7f0>
1000a09a:	e66b      	b.n	10009d74 <_strtod_r+0x4c8>
1000a09c:	9803      	ldr	r0, [sp, #12]
1000a09e:	1c19      	adds	r1, r3, #0
1000a0a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1000a0a2:	f001 fd86 	bl	1000bbb2 <__multiply>
1000a0a6:	900c      	str	r0, [sp, #48]	; 0x30
1000a0a8:	2800      	cmp	r0, #0
1000a0aa:	d100      	bne.n	1000a0ae <_strtod_r+0x802>
1000a0ac:	e662      	b.n	10009d74 <_strtod_r+0x4c8>
1000a0ae:	9803      	ldr	r0, [sp, #12]
1000a0b0:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a0b2:	f001 fc96 	bl	1000b9e2 <_Bfree>
1000a0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a0b8:	931e      	str	r3, [sp, #120]	; 0x78
1000a0ba:	e77a      	b.n	10009fb2 <_strtod_r+0x706>
1000a0bc:	9803      	ldr	r0, [sp, #12]
1000a0be:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a0c0:	9a07      	ldr	r2, [sp, #28]
1000a0c2:	f001 fe55 	bl	1000bd70 <__lshift>
1000a0c6:	901e      	str	r0, [sp, #120]	; 0x78
1000a0c8:	2800      	cmp	r0, #0
1000a0ca:	d000      	beq.n	1000a0ce <_strtod_r+0x822>
1000a0cc:	e775      	b.n	10009fba <_strtod_r+0x70e>
1000a0ce:	e651      	b.n	10009d74 <_strtod_r+0x4c8>
1000a0d0:	9803      	ldr	r0, [sp, #12]
1000a0d2:	9908      	ldr	r1, [sp, #32]
1000a0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a0d6:	f001 fdf9 	bl	1000bccc <__pow5mult>
1000a0da:	9008      	str	r0, [sp, #32]
1000a0dc:	2800      	cmp	r0, #0
1000a0de:	d000      	beq.n	1000a0e2 <_strtod_r+0x836>
1000a0e0:	e76f      	b.n	10009fc2 <_strtod_r+0x716>
1000a0e2:	e647      	b.n	10009d74 <_strtod_r+0x4c8>
1000a0e4:	9803      	ldr	r0, [sp, #12]
1000a0e6:	9908      	ldr	r1, [sp, #32]
1000a0e8:	1c22      	adds	r2, r4, #0
1000a0ea:	f001 fe41 	bl	1000bd70 <__lshift>
1000a0ee:	9008      	str	r0, [sp, #32]
1000a0f0:	2800      	cmp	r0, #0
1000a0f2:	d000      	beq.n	1000a0f6 <_strtod_r+0x84a>
1000a0f4:	e768      	b.n	10009fc8 <_strtod_r+0x71c>
1000a0f6:	e63d      	b.n	10009d74 <_strtod_r+0x4c8>
1000a0f8:	9803      	ldr	r0, [sp, #12]
1000a0fa:	9905      	ldr	r1, [sp, #20]
1000a0fc:	1c2a      	adds	r2, r5, #0
1000a0fe:	f001 fe37 	bl	1000bd70 <__lshift>
1000a102:	9005      	str	r0, [sp, #20]
1000a104:	2800      	cmp	r0, #0
1000a106:	d000      	beq.n	1000a10a <_strtod_r+0x85e>
1000a108:	e761      	b.n	10009fce <_strtod_r+0x722>
1000a10a:	e633      	b.n	10009d74 <_strtod_r+0x4c8>
1000a10c:	9b04      	ldr	r3, [sp, #16]
1000a10e:	691b      	ldr	r3, [r3, #16]
1000a110:	9307      	str	r3, [sp, #28]
1000a112:	2b01      	cmp	r3, #1
1000a114:	dc84      	bgt.n	1000a020 <_strtod_r+0x774>
1000a116:	e18c      	b.n	1000a432 <_strtod_r+0xb86>
1000a118:	2800      	cmp	r0, #0
1000a11a:	d164      	bne.n	1000a1e6 <_strtod_r+0x93a>
1000a11c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000a11e:	033b      	lsls	r3, r7, #12
1000a120:	2a00      	cmp	r2, #0
1000a122:	d024      	beq.n	1000a16e <_strtod_r+0x8c2>
1000a124:	4a5d      	ldr	r2, [pc, #372]	; (1000a29c <_strtod_r+0x9f0>)
1000a126:	1c39      	adds	r1, r7, #0
1000a128:	0b1b      	lsrs	r3, r3, #12
1000a12a:	4293      	cmp	r3, r2
1000a12c:	d12d      	bne.n	1000a18a <_strtod_r+0x8de>
1000a12e:	9a06      	ldr	r2, [sp, #24]
1000a130:	3801      	subs	r0, #1
1000a132:	1c34      	adds	r4, r6, #0
1000a134:	1c03      	adds	r3, r0, #0
1000a136:	2a00      	cmp	r2, #0
1000a138:	d00a      	beq.n	1000a150 <_strtod_r+0x8a4>
1000a13a:	25d4      	movs	r5, #212	; 0xd4
1000a13c:	4a55      	ldr	r2, [pc, #340]	; (1000a294 <_strtod_r+0x9e8>)
1000a13e:	04ed      	lsls	r5, r5, #19
1000a140:	403a      	ands	r2, r7
1000a142:	42aa      	cmp	r2, r5
1000a144:	d804      	bhi.n	1000a150 <_strtod_r+0x8a4>
1000a146:	336c      	adds	r3, #108	; 0x6c
1000a148:	0d12      	lsrs	r2, r2, #20
1000a14a:	1a9a      	subs	r2, r3, r2
1000a14c:	1c03      	adds	r3, r0, #0
1000a14e:	4093      	lsls	r3, r2
1000a150:	429c      	cmp	r4, r3
1000a152:	d11a      	bne.n	1000a18a <_strtod_r+0x8de>
1000a154:	4b52      	ldr	r3, [pc, #328]	; (1000a2a0 <_strtod_r+0x9f4>)
1000a156:	4299      	cmp	r1, r3
1000a158:	d102      	bne.n	1000a160 <_strtod_r+0x8b4>
1000a15a:	1c63      	adds	r3, r4, #1
1000a15c:	d100      	bne.n	1000a160 <_strtod_r+0x8b4>
1000a15e:	e609      	b.n	10009d74 <_strtod_r+0x4c8>
1000a160:	4b4c      	ldr	r3, [pc, #304]	; (1000a294 <_strtod_r+0x9e8>)
1000a162:	2600      	movs	r6, #0
1000a164:	4019      	ands	r1, r3
1000a166:	2380      	movs	r3, #128	; 0x80
1000a168:	035b      	lsls	r3, r3, #13
1000a16a:	18cf      	adds	r7, r1, r3
1000a16c:	e161      	b.n	1000a432 <_strtod_r+0xb86>
1000a16e:	2b00      	cmp	r3, #0
1000a170:	d10b      	bne.n	1000a18a <_strtod_r+0x8de>
1000a172:	2e00      	cmp	r6, #0
1000a174:	d109      	bne.n	1000a18a <_strtod_r+0x8de>
1000a176:	e75f      	b.n	1000a038 <_strtod_r+0x78c>
1000a178:	2601      	movs	r6, #1
1000a17a:	4a4a      	ldr	r2, [pc, #296]	; (1000a2a4 <_strtod_r+0x9f8>)
1000a17c:	403b      	ands	r3, r7
1000a17e:	189b      	adds	r3, r3, r2
1000a180:	4a46      	ldr	r2, [pc, #280]	; (1000a29c <_strtod_r+0x9f0>)
1000a182:	4276      	negs	r6, r6
1000a184:	431a      	orrs	r2, r3
1000a186:	1c17      	adds	r7, r2, #0
1000a188:	e153      	b.n	1000a432 <_strtod_r+0xb86>
1000a18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000a18c:	2b00      	cmp	r3, #0
1000a18e:	d003      	beq.n	1000a198 <_strtod_r+0x8ec>
1000a190:	423b      	tst	r3, r7
1000a192:	d100      	bne.n	1000a196 <_strtod_r+0x8ea>
1000a194:	e14d      	b.n	1000a432 <_strtod_r+0xb86>
1000a196:	e003      	b.n	1000a1a0 <_strtod_r+0x8f4>
1000a198:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a19a:	4233      	tst	r3, r6
1000a19c:	d100      	bne.n	1000a1a0 <_strtod_r+0x8f4>
1000a19e:	e148      	b.n	1000a432 <_strtod_r+0xb86>
1000a1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a1a2:	1c30      	adds	r0, r6, #0
1000a1a4:	1c39      	adds	r1, r7, #0
1000a1a6:	9a06      	ldr	r2, [sp, #24]
1000a1a8:	2b00      	cmp	r3, #0
1000a1aa:	d00a      	beq.n	1000a1c2 <_strtod_r+0x916>
1000a1ac:	f7ff fb68 	bl	10009880 <sulp>
1000a1b0:	1c02      	adds	r2, r0, #0
1000a1b2:	1c0b      	adds	r3, r1, #0
1000a1b4:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a1b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a1b8:	f7fd f8c0 	bl	1000733c <__aeabi_dadd>
1000a1bc:	1c06      	adds	r6, r0, #0
1000a1be:	1c0f      	adds	r7, r1, #0
1000a1c0:	e137      	b.n	1000a432 <_strtod_r+0xb86>
1000a1c2:	f7ff fb5d 	bl	10009880 <sulp>
1000a1c6:	1c02      	adds	r2, r0, #0
1000a1c8:	1c0b      	adds	r3, r1, #0
1000a1ca:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a1cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a1ce:	f7fd ff91 	bl	100080f4 <__aeabi_dsub>
1000a1d2:	2200      	movs	r2, #0
1000a1d4:	2300      	movs	r3, #0
1000a1d6:	1c06      	adds	r6, r0, #0
1000a1d8:	1c0f      	adds	r7, r1, #0
1000a1da:	f7fc fc5d 	bl	10006a98 <__aeabi_dcmpeq>
1000a1de:	2800      	cmp	r0, #0
1000a1e0:	d000      	beq.n	1000a1e4 <_strtod_r+0x938>
1000a1e2:	e73a      	b.n	1000a05a <_strtod_r+0x7ae>
1000a1e4:	e125      	b.n	1000a432 <_strtod_r+0xb86>
1000a1e6:	9804      	ldr	r0, [sp, #16]
1000a1e8:	9905      	ldr	r1, [sp, #20]
1000a1ea:	f001 ff63 	bl	1000c0b4 <__ratio>
1000a1ee:	2380      	movs	r3, #128	; 0x80
1000a1f0:	2200      	movs	r2, #0
1000a1f2:	05db      	lsls	r3, r3, #23
1000a1f4:	1c04      	adds	r4, r0, #0
1000a1f6:	1c0d      	adds	r5, r1, #0
1000a1f8:	f7fc fc5e 	bl	10006ab8 <__aeabi_dcmple>
1000a1fc:	2800      	cmp	r0, #0
1000a1fe:	d036      	beq.n	1000a26e <_strtod_r+0x9c2>
1000a200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a202:	2b00      	cmp	r3, #0
1000a204:	d002      	beq.n	1000a20c <_strtod_r+0x960>
1000a206:	2400      	movs	r4, #0
1000a208:	4d27      	ldr	r5, [pc, #156]	; (1000a2a8 <_strtod_r+0x9fc>)
1000a20a:	e00b      	b.n	1000a224 <_strtod_r+0x978>
1000a20c:	2e00      	cmp	r6, #0
1000a20e:	d102      	bne.n	1000a216 <_strtod_r+0x96a>
1000a210:	033b      	lsls	r3, r7, #12
1000a212:	d105      	bne.n	1000a220 <_strtod_r+0x974>
1000a214:	e00b      	b.n	1000a22e <_strtod_r+0x982>
1000a216:	2e01      	cmp	r6, #1
1000a218:	d102      	bne.n	1000a220 <_strtod_r+0x974>
1000a21a:	2f00      	cmp	r7, #0
1000a21c:	d100      	bne.n	1000a220 <_strtod_r+0x974>
1000a21e:	e71c      	b.n	1000a05a <_strtod_r+0x7ae>
1000a220:	2400      	movs	r4, #0
1000a222:	4d22      	ldr	r5, [pc, #136]	; (1000a2ac <_strtod_r+0xa00>)
1000a224:	2300      	movs	r3, #0
1000a226:	9307      	str	r3, [sp, #28]
1000a228:	4b1f      	ldr	r3, [pc, #124]	; (1000a2a8 <_strtod_r+0x9fc>)
1000a22a:	930a      	str	r3, [sp, #40]	; 0x28
1000a22c:	e048      	b.n	1000a2c0 <_strtod_r+0xa14>
1000a22e:	1c20      	adds	r0, r4, #0
1000a230:	1c29      	adds	r1, r5, #0
1000a232:	2200      	movs	r2, #0
1000a234:	4b1c      	ldr	r3, [pc, #112]	; (1000a2a8 <_strtod_r+0x9fc>)
1000a236:	f7fc fc35 	bl	10006aa4 <__aeabi_dcmplt>
1000a23a:	2800      	cmp	r0, #0
1000a23c:	d108      	bne.n	1000a250 <_strtod_r+0x9a4>
1000a23e:	1c20      	adds	r0, r4, #0
1000a240:	1c29      	adds	r1, r5, #0
1000a242:	2200      	movs	r2, #0
1000a244:	4b1a      	ldr	r3, [pc, #104]	; (1000a2b0 <_strtod_r+0xa04>)
1000a246:	f7fd fcbb 	bl	10007bc0 <__aeabi_dmul>
1000a24a:	9007      	str	r0, [sp, #28]
1000a24c:	910a      	str	r1, [sp, #40]	; 0x28
1000a24e:	e003      	b.n	1000a258 <_strtod_r+0x9ac>
1000a250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a252:	9307      	str	r3, [sp, #28]
1000a254:	4b16      	ldr	r3, [pc, #88]	; (1000a2b0 <_strtod_r+0xa04>)
1000a256:	930a      	str	r3, [sp, #40]	; 0x28
1000a258:	2280      	movs	r2, #128	; 0x80
1000a25a:	0612      	lsls	r2, r2, #24
1000a25c:	4694      	mov	ip, r2
1000a25e:	9b07      	ldr	r3, [sp, #28]
1000a260:	931a      	str	r3, [sp, #104]	; 0x68
1000a262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a264:	4463      	add	r3, ip
1000a266:	931b      	str	r3, [sp, #108]	; 0x6c
1000a268:	9c1a      	ldr	r4, [sp, #104]	; 0x68
1000a26a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1000a26c:	e028      	b.n	1000a2c0 <_strtod_r+0xa14>
1000a26e:	4b10      	ldr	r3, [pc, #64]	; (1000a2b0 <_strtod_r+0xa04>)
1000a270:	1c20      	adds	r0, r4, #0
1000a272:	1c29      	adds	r1, r5, #0
1000a274:	2200      	movs	r2, #0
1000a276:	f7fd fca3 	bl	10007bc0 <__aeabi_dmul>
1000a27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a27c:	9007      	str	r0, [sp, #28]
1000a27e:	910a      	str	r1, [sp, #40]	; 0x28
1000a280:	2b00      	cmp	r3, #0
1000a282:	d117      	bne.n	1000a2b4 <_strtod_r+0xa08>
1000a284:	2380      	movs	r3, #128	; 0x80
1000a286:	061b      	lsls	r3, r3, #24
1000a288:	18cb      	adds	r3, r1, r3
1000a28a:	9014      	str	r0, [sp, #80]	; 0x50
1000a28c:	9315      	str	r3, [sp, #84]	; 0x54
1000a28e:	e015      	b.n	1000a2bc <_strtod_r+0xa10>
1000a290:	fffffc03 	.word	0xfffffc03
1000a294:	7ff00000 	.word	0x7ff00000
1000a298:	fffffbe3 	.word	0xfffffbe3
1000a29c:	000fffff 	.word	0x000fffff
1000a2a0:	7fefffff 	.word	0x7fefffff
1000a2a4:	fff00000 	.word	0xfff00000
1000a2a8:	3ff00000 	.word	0x3ff00000
1000a2ac:	bff00000 	.word	0xbff00000
1000a2b0:	3fe00000 	.word	0x3fe00000
1000a2b4:	9a07      	ldr	r2, [sp, #28]
1000a2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a2b8:	9214      	str	r2, [sp, #80]	; 0x50
1000a2ba:	9315      	str	r3, [sp, #84]	; 0x54
1000a2bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
1000a2be:	9d15      	ldr	r5, [sp, #84]	; 0x54
1000a2c0:	4b7a      	ldr	r3, [pc, #488]	; (1000a4ac <_strtod_r+0xc00>)
1000a2c2:	403b      	ands	r3, r7
1000a2c4:	9312      	str	r3, [sp, #72]	; 0x48
1000a2c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a2c8:	4b79      	ldr	r3, [pc, #484]	; (1000a4b0 <_strtod_r+0xc04>)
1000a2ca:	429a      	cmp	r2, r3
1000a2cc:	d12b      	bne.n	1000a326 <_strtod_r+0xa7a>
1000a2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a2d2:	9210      	str	r2, [sp, #64]	; 0x40
1000a2d4:	9311      	str	r3, [sp, #68]	; 0x44
1000a2d6:	4b77      	ldr	r3, [pc, #476]	; (1000a4b4 <_strtod_r+0xc08>)
1000a2d8:	1c30      	adds	r0, r6, #0
1000a2da:	18ff      	adds	r7, r7, r3
1000a2dc:	1c39      	adds	r1, r7, #0
1000a2de:	f001 fe1f 	bl	1000bf20 <__ulp>
1000a2e2:	1c02      	adds	r2, r0, #0
1000a2e4:	1c0b      	adds	r3, r1, #0
1000a2e6:	1c20      	adds	r0, r4, #0
1000a2e8:	1c29      	adds	r1, r5, #0
1000a2ea:	f7fd fc69 	bl	10007bc0 <__aeabi_dmul>
1000a2ee:	1c02      	adds	r2, r0, #0
1000a2f0:	1c0b      	adds	r3, r1, #0
1000a2f2:	1c30      	adds	r0, r6, #0
1000a2f4:	1c39      	adds	r1, r7, #0
1000a2f6:	f7fd f821 	bl	1000733c <__aeabi_dadd>
1000a2fa:	4b6c      	ldr	r3, [pc, #432]	; (1000a4ac <_strtod_r+0xc00>)
1000a2fc:	4a6e      	ldr	r2, [pc, #440]	; (1000a4b8 <_strtod_r+0xc0c>)
1000a2fe:	1c06      	adds	r6, r0, #0
1000a300:	400b      	ands	r3, r1
1000a302:	4293      	cmp	r3, r2
1000a304:	d90b      	bls.n	1000a31e <_strtod_r+0xa72>
1000a306:	4b6d      	ldr	r3, [pc, #436]	; (1000a4bc <_strtod_r+0xc10>)
1000a308:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a30a:	429a      	cmp	r2, r3
1000a30c:	d103      	bne.n	1000a316 <_strtod_r+0xa6a>
1000a30e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000a310:	3301      	adds	r3, #1
1000a312:	d100      	bne.n	1000a316 <_strtod_r+0xa6a>
1000a314:	e52e      	b.n	10009d74 <_strtod_r+0x4c8>
1000a316:	2601      	movs	r6, #1
1000a318:	4f68      	ldr	r7, [pc, #416]	; (1000a4bc <_strtod_r+0xc10>)
1000a31a:	4276      	negs	r6, r6
1000a31c:	e078      	b.n	1000a410 <_strtod_r+0xb64>
1000a31e:	23d4      	movs	r3, #212	; 0xd4
1000a320:	049b      	lsls	r3, r3, #18
1000a322:	18cf      	adds	r7, r1, r3
1000a324:	e040      	b.n	1000a3a8 <_strtod_r+0xafc>
1000a326:	9b06      	ldr	r3, [sp, #24]
1000a328:	2b00      	cmp	r3, #0
1000a32a:	d02b      	beq.n	1000a384 <_strtod_r+0xad8>
1000a32c:	23d4      	movs	r3, #212	; 0xd4
1000a32e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a330:	04db      	lsls	r3, r3, #19
1000a332:	429a      	cmp	r2, r3
1000a334:	d826      	bhi.n	1000a384 <_strtod_r+0xad8>
1000a336:	9807      	ldr	r0, [sp, #28]
1000a338:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a33a:	4a61      	ldr	r2, [pc, #388]	; (1000a4c0 <_strtod_r+0xc14>)
1000a33c:	4b61      	ldr	r3, [pc, #388]	; (1000a4c4 <_strtod_r+0xc18>)
1000a33e:	f7fc fbbb 	bl	10006ab8 <__aeabi_dcmple>
1000a342:	2800      	cmp	r0, #0
1000a344:	d019      	beq.n	1000a37a <_strtod_r+0xace>
1000a346:	9807      	ldr	r0, [sp, #28]
1000a348:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a34a:	f002 f995 	bl	1000c678 <__aeabi_d2uiz>
1000a34e:	2800      	cmp	r0, #0
1000a350:	d100      	bne.n	1000a354 <_strtod_r+0xaa8>
1000a352:	3001      	adds	r0, #1
1000a354:	f7fe fa84 	bl	10008860 <__aeabi_ui2d>
1000a358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a35a:	9007      	str	r0, [sp, #28]
1000a35c:	910a      	str	r1, [sp, #40]	; 0x28
1000a35e:	2b00      	cmp	r3, #0
1000a360:	d105      	bne.n	1000a36e <_strtod_r+0xac2>
1000a362:	2380      	movs	r3, #128	; 0x80
1000a364:	061b      	lsls	r3, r3, #24
1000a366:	18cb      	adds	r3, r1, r3
1000a368:	9016      	str	r0, [sp, #88]	; 0x58
1000a36a:	9317      	str	r3, [sp, #92]	; 0x5c
1000a36c:	e003      	b.n	1000a376 <_strtod_r+0xaca>
1000a36e:	9a07      	ldr	r2, [sp, #28]
1000a370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a372:	9216      	str	r2, [sp, #88]	; 0x58
1000a374:	9317      	str	r3, [sp, #92]	; 0x5c
1000a376:	9c16      	ldr	r4, [sp, #88]	; 0x58
1000a378:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1000a37a:	23d6      	movs	r3, #214	; 0xd6
1000a37c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a37e:	04db      	lsls	r3, r3, #19
1000a380:	18eb      	adds	r3, r5, r3
1000a382:	1a9d      	subs	r5, r3, r2
1000a384:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a386:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a388:	f001 fdca 	bl	1000bf20 <__ulp>
1000a38c:	1c02      	adds	r2, r0, #0
1000a38e:	1c0b      	adds	r3, r1, #0
1000a390:	1c20      	adds	r0, r4, #0
1000a392:	1c29      	adds	r1, r5, #0
1000a394:	f7fd fc14 	bl	10007bc0 <__aeabi_dmul>
1000a398:	1c02      	adds	r2, r0, #0
1000a39a:	1c0b      	adds	r3, r1, #0
1000a39c:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a39e:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a3a0:	f7fc ffcc 	bl	1000733c <__aeabi_dadd>
1000a3a4:	1c06      	adds	r6, r0, #0
1000a3a6:	1c0f      	adds	r7, r1, #0
1000a3a8:	9b06      	ldr	r3, [sp, #24]
1000a3aa:	970e      	str	r7, [sp, #56]	; 0x38
1000a3ac:	2b00      	cmp	r3, #0
1000a3ae:	d12f      	bne.n	1000a410 <_strtod_r+0xb64>
1000a3b0:	4b3e      	ldr	r3, [pc, #248]	; (1000a4ac <_strtod_r+0xc00>)
1000a3b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a3b4:	403b      	ands	r3, r7
1000a3b6:	429a      	cmp	r2, r3
1000a3b8:	d12a      	bne.n	1000a410 <_strtod_r+0xb64>
1000a3ba:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a3bc:	9807      	ldr	r0, [sp, #28]
1000a3be:	f002 fc9d 	bl	1000ccfc <__aeabi_d2iz>
1000a3c2:	f7fe fa11 	bl	100087e8 <__aeabi_i2d>
1000a3c6:	1c0b      	adds	r3, r1, #0
1000a3c8:	1c02      	adds	r2, r0, #0
1000a3ca:	990a      	ldr	r1, [sp, #40]	; 0x28
1000a3cc:	9807      	ldr	r0, [sp, #28]
1000a3ce:	f7fd fe91 	bl	100080f4 <__aeabi_dsub>
1000a3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a3d4:	1c04      	adds	r4, r0, #0
1000a3d6:	1c0d      	adds	r5, r1, #0
1000a3d8:	2b00      	cmp	r3, #0
1000a3da:	d104      	bne.n	1000a3e6 <_strtod_r+0xb3a>
1000a3dc:	2e00      	cmp	r6, #0
1000a3de:	d102      	bne.n	1000a3e6 <_strtod_r+0xb3a>
1000a3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a3e2:	031b      	lsls	r3, r3, #12
1000a3e4:	d00e      	beq.n	1000a404 <_strtod_r+0xb58>
1000a3e6:	1c20      	adds	r0, r4, #0
1000a3e8:	1c29      	adds	r1, r5, #0
1000a3ea:	4a37      	ldr	r2, [pc, #220]	; (1000a4c8 <_strtod_r+0xc1c>)
1000a3ec:	4b37      	ldr	r3, [pc, #220]	; (1000a4cc <_strtod_r+0xc20>)
1000a3ee:	f7fc fb59 	bl	10006aa4 <__aeabi_dcmplt>
1000a3f2:	2800      	cmp	r0, #0
1000a3f4:	d132      	bne.n	1000a45c <_strtod_r+0xbb0>
1000a3f6:	1c20      	adds	r0, r4, #0
1000a3f8:	1c29      	adds	r1, r5, #0
1000a3fa:	4a35      	ldr	r2, [pc, #212]	; (1000a4d0 <_strtod_r+0xc24>)
1000a3fc:	4b35      	ldr	r3, [pc, #212]	; (1000a4d4 <_strtod_r+0xc28>)
1000a3fe:	f7fc fb65 	bl	10006acc <__aeabi_dcmpgt>
1000a402:	e003      	b.n	1000a40c <_strtod_r+0xb60>
1000a404:	4a30      	ldr	r2, [pc, #192]	; (1000a4c8 <_strtod_r+0xc1c>)
1000a406:	4b34      	ldr	r3, [pc, #208]	; (1000a4d8 <_strtod_r+0xc2c>)
1000a408:	f7fc fb4c 	bl	10006aa4 <__aeabi_dcmplt>
1000a40c:	2800      	cmp	r0, #0
1000a40e:	d125      	bne.n	1000a45c <_strtod_r+0xbb0>
1000a410:	9803      	ldr	r0, [sp, #12]
1000a412:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a414:	f001 fae5 	bl	1000b9e2 <_Bfree>
1000a418:	9803      	ldr	r0, [sp, #12]
1000a41a:	9908      	ldr	r1, [sp, #32]
1000a41c:	f001 fae1 	bl	1000b9e2 <_Bfree>
1000a420:	9803      	ldr	r0, [sp, #12]
1000a422:	9905      	ldr	r1, [sp, #20]
1000a424:	f001 fadd 	bl	1000b9e2 <_Bfree>
1000a428:	9803      	ldr	r0, [sp, #12]
1000a42a:	9904      	ldr	r1, [sp, #16]
1000a42c:	f001 fad9 	bl	1000b9e2 <_Bfree>
1000a430:	e55f      	b.n	10009ef2 <_strtod_r+0x646>
1000a432:	9b06      	ldr	r3, [sp, #24]
1000a434:	2b00      	cmp	r3, #0
1000a436:	d011      	beq.n	1000a45c <_strtod_r+0xbb0>
1000a438:	4b28      	ldr	r3, [pc, #160]	; (1000a4dc <_strtod_r+0xc30>)
1000a43a:	1c30      	adds	r0, r6, #0
1000a43c:	9311      	str	r3, [sp, #68]	; 0x44
1000a43e:	2300      	movs	r3, #0
1000a440:	9310      	str	r3, [sp, #64]	; 0x40
1000a442:	1c39      	adds	r1, r7, #0
1000a444:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000a446:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000a448:	f7fd fbba 	bl	10007bc0 <__aeabi_dmul>
1000a44c:	1c06      	adds	r6, r0, #0
1000a44e:	1e0f      	subs	r7, r1, #0
1000a450:	d104      	bne.n	1000a45c <_strtod_r+0xbb0>
1000a452:	2800      	cmp	r0, #0
1000a454:	d102      	bne.n	1000a45c <_strtod_r+0xbb0>
1000a456:	2322      	movs	r3, #34	; 0x22
1000a458:	9a03      	ldr	r2, [sp, #12]
1000a45a:	6013      	str	r3, [r2, #0]
1000a45c:	9803      	ldr	r0, [sp, #12]
1000a45e:	991e      	ldr	r1, [sp, #120]	; 0x78
1000a460:	f001 fabf 	bl	1000b9e2 <_Bfree>
1000a464:	9803      	ldr	r0, [sp, #12]
1000a466:	9908      	ldr	r1, [sp, #32]
1000a468:	f001 fabb 	bl	1000b9e2 <_Bfree>
1000a46c:	9803      	ldr	r0, [sp, #12]
1000a46e:	9905      	ldr	r1, [sp, #20]
1000a470:	f001 fab7 	bl	1000b9e2 <_Bfree>
1000a474:	9803      	ldr	r0, [sp, #12]
1000a476:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000a478:	f001 fab3 	bl	1000b9e2 <_Bfree>
1000a47c:	9803      	ldr	r0, [sp, #12]
1000a47e:	9904      	ldr	r1, [sp, #16]
1000a480:	f001 faaf 	bl	1000b9e2 <_Bfree>
1000a484:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000a486:	2b00      	cmp	r3, #0
1000a488:	d002      	beq.n	1000a490 <_strtod_r+0xbe4>
1000a48a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000a48c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
1000a48e:	601a      	str	r2, [r3, #0]
1000a490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a492:	2b00      	cmp	r3, #0
1000a494:	d004      	beq.n	1000a4a0 <_strtod_r+0xbf4>
1000a496:	2380      	movs	r3, #128	; 0x80
1000a498:	061b      	lsls	r3, r3, #24
1000a49a:	1c32      	adds	r2, r6, #0
1000a49c:	18fb      	adds	r3, r7, r3
1000a49e:	e001      	b.n	1000a4a4 <_strtod_r+0xbf8>
1000a4a0:	1c32      	adds	r2, r6, #0
1000a4a2:	1c3b      	adds	r3, r7, #0
1000a4a4:	1c10      	adds	r0, r2, #0
1000a4a6:	1c19      	adds	r1, r3, #0
1000a4a8:	b023      	add	sp, #140	; 0x8c
1000a4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4ac:	7ff00000 	.word	0x7ff00000
1000a4b0:	7fe00000 	.word	0x7fe00000
1000a4b4:	fcb00000 	.word	0xfcb00000
1000a4b8:	7c9fffff 	.word	0x7c9fffff
1000a4bc:	7fefffff 	.word	0x7fefffff
1000a4c0:	ffc00000 	.word	0xffc00000
1000a4c4:	41dfffff 	.word	0x41dfffff
1000a4c8:	94a03595 	.word	0x94a03595
1000a4cc:	3fdfffff 	.word	0x3fdfffff
1000a4d0:	35afe535 	.word	0x35afe535
1000a4d4:	3fe00000 	.word	0x3fe00000
1000a4d8:	3fcfffff 	.word	0x3fcfffff
1000a4dc:	39500000 	.word	0x39500000

1000a4e0 <_strtol_r>:
1000a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4e2:	1c1e      	adds	r6, r3, #0
1000a4e4:	4b44      	ldr	r3, [pc, #272]	; (1000a5f8 <_strtol_r+0x118>)
1000a4e6:	b087      	sub	sp, #28
1000a4e8:	681b      	ldr	r3, [r3, #0]
1000a4ea:	9005      	str	r0, [sp, #20]
1000a4ec:	9302      	str	r3, [sp, #8]
1000a4ee:	1c0b      	adds	r3, r1, #0
1000a4f0:	9103      	str	r1, [sp, #12]
1000a4f2:	9201      	str	r2, [sp, #4]
1000a4f4:	781c      	ldrb	r4, [r3, #0]
1000a4f6:	9a02      	ldr	r2, [sp, #8]
1000a4f8:	1c5d      	adds	r5, r3, #1
1000a4fa:	1912      	adds	r2, r2, r4
1000a4fc:	7850      	ldrb	r0, [r2, #1]
1000a4fe:	2208      	movs	r2, #8
1000a500:	4010      	ands	r0, r2
1000a502:	d001      	beq.n	1000a508 <_strtol_r+0x28>
1000a504:	1c2b      	adds	r3, r5, #0
1000a506:	e7f5      	b.n	1000a4f4 <_strtol_r+0x14>
1000a508:	2c2d      	cmp	r4, #45	; 0x2d
1000a50a:	d104      	bne.n	1000a516 <_strtol_r+0x36>
1000a50c:	1c9d      	adds	r5, r3, #2
1000a50e:	785c      	ldrb	r4, [r3, #1]
1000a510:	2301      	movs	r3, #1
1000a512:	9300      	str	r3, [sp, #0]
1000a514:	e004      	b.n	1000a520 <_strtol_r+0x40>
1000a516:	9000      	str	r0, [sp, #0]
1000a518:	2c2b      	cmp	r4, #43	; 0x2b
1000a51a:	d101      	bne.n	1000a520 <_strtol_r+0x40>
1000a51c:	785c      	ldrb	r4, [r3, #1]
1000a51e:	1c9d      	adds	r5, r3, #2
1000a520:	2e00      	cmp	r6, #0
1000a522:	d002      	beq.n	1000a52a <_strtol_r+0x4a>
1000a524:	2e10      	cmp	r6, #16
1000a526:	d10a      	bne.n	1000a53e <_strtol_r+0x5e>
1000a528:	e060      	b.n	1000a5ec <_strtol_r+0x10c>
1000a52a:	2c30      	cmp	r4, #48	; 0x30
1000a52c:	d15c      	bne.n	1000a5e8 <_strtol_r+0x108>
1000a52e:	2220      	movs	r2, #32
1000a530:	782b      	ldrb	r3, [r5, #0]
1000a532:	4393      	bics	r3, r2
1000a534:	2b58      	cmp	r3, #88	; 0x58
1000a536:	d152      	bne.n	1000a5de <_strtol_r+0xfe>
1000a538:	2610      	movs	r6, #16
1000a53a:	786c      	ldrb	r4, [r5, #1]
1000a53c:	3502      	adds	r5, #2
1000a53e:	9f00      	ldr	r7, [sp, #0]
1000a540:	1c31      	adds	r1, r6, #0
1000a542:	1e7b      	subs	r3, r7, #1
1000a544:	419f      	sbcs	r7, r3
1000a546:	4b2d      	ldr	r3, [pc, #180]	; (1000a5fc <_strtol_r+0x11c>)
1000a548:	18ff      	adds	r7, r7, r3
1000a54a:	1c38      	adds	r0, r7, #0
1000a54c:	f7fc f998 	bl	10006880 <__aeabi_uidivmod>
1000a550:	1c38      	adds	r0, r7, #0
1000a552:	9104      	str	r1, [sp, #16]
1000a554:	1c31      	adds	r1, r6, #0
1000a556:	f7fc f90d 	bl	10006774 <__aeabi_uidiv>
1000a55a:	2200      	movs	r2, #0
1000a55c:	1c07      	adds	r7, r0, #0
1000a55e:	1c13      	adds	r3, r2, #0
1000a560:	9902      	ldr	r1, [sp, #8]
1000a562:	1909      	adds	r1, r1, r4
1000a564:	7849      	ldrb	r1, [r1, #1]
1000a566:	0748      	lsls	r0, r1, #29
1000a568:	d501      	bpl.n	1000a56e <_strtol_r+0x8e>
1000a56a:	3c30      	subs	r4, #48	; 0x30
1000a56c:	e007      	b.n	1000a57e <_strtol_r+0x9e>
1000a56e:	2003      	movs	r0, #3
1000a570:	4008      	ands	r0, r1
1000a572:	d017      	beq.n	1000a5a4 <_strtol_r+0xc4>
1000a574:	2137      	movs	r1, #55	; 0x37
1000a576:	2801      	cmp	r0, #1
1000a578:	d000      	beq.n	1000a57c <_strtol_r+0x9c>
1000a57a:	3120      	adds	r1, #32
1000a57c:	1a64      	subs	r4, r4, r1
1000a57e:	42b4      	cmp	r4, r6
1000a580:	da10      	bge.n	1000a5a4 <_strtol_r+0xc4>
1000a582:	1c51      	adds	r1, r2, #1
1000a584:	d00b      	beq.n	1000a59e <_strtol_r+0xbe>
1000a586:	42bb      	cmp	r3, r7
1000a588:	d807      	bhi.n	1000a59a <_strtol_r+0xba>
1000a58a:	d102      	bne.n	1000a592 <_strtol_r+0xb2>
1000a58c:	9a04      	ldr	r2, [sp, #16]
1000a58e:	4294      	cmp	r4, r2
1000a590:	dc03      	bgt.n	1000a59a <_strtol_r+0xba>
1000a592:	4373      	muls	r3, r6
1000a594:	2201      	movs	r2, #1
1000a596:	18e3      	adds	r3, r4, r3
1000a598:	e001      	b.n	1000a59e <_strtol_r+0xbe>
1000a59a:	2201      	movs	r2, #1
1000a59c:	4252      	negs	r2, r2
1000a59e:	782c      	ldrb	r4, [r5, #0]
1000a5a0:	3501      	adds	r5, #1
1000a5a2:	e7dd      	b.n	1000a560 <_strtol_r+0x80>
1000a5a4:	1c18      	adds	r0, r3, #0
1000a5a6:	1c51      	adds	r1, r2, #1
1000a5a8:	d10b      	bne.n	1000a5c2 <_strtol_r+0xe2>
1000a5aa:	9800      	ldr	r0, [sp, #0]
1000a5ac:	9a05      	ldr	r2, [sp, #20]
1000a5ae:	1e43      	subs	r3, r0, #1
1000a5b0:	4198      	sbcs	r0, r3
1000a5b2:	4b12      	ldr	r3, [pc, #72]	; (1000a5fc <_strtol_r+0x11c>)
1000a5b4:	18c0      	adds	r0, r0, r3
1000a5b6:	2322      	movs	r3, #34	; 0x22
1000a5b8:	6013      	str	r3, [r2, #0]
1000a5ba:	9b01      	ldr	r3, [sp, #4]
1000a5bc:	2b00      	cmp	r3, #0
1000a5be:	d10a      	bne.n	1000a5d6 <_strtol_r+0xf6>
1000a5c0:	e017      	b.n	1000a5f2 <_strtol_r+0x112>
1000a5c2:	9900      	ldr	r1, [sp, #0]
1000a5c4:	2900      	cmp	r1, #0
1000a5c6:	d000      	beq.n	1000a5ca <_strtol_r+0xea>
1000a5c8:	4258      	negs	r0, r3
1000a5ca:	9b01      	ldr	r3, [sp, #4]
1000a5cc:	2b00      	cmp	r3, #0
1000a5ce:	d010      	beq.n	1000a5f2 <_strtol_r+0x112>
1000a5d0:	9b03      	ldr	r3, [sp, #12]
1000a5d2:	2a00      	cmp	r2, #0
1000a5d4:	d000      	beq.n	1000a5d8 <_strtol_r+0xf8>
1000a5d6:	1e6b      	subs	r3, r5, #1
1000a5d8:	9a01      	ldr	r2, [sp, #4]
1000a5da:	6013      	str	r3, [r2, #0]
1000a5dc:	e009      	b.n	1000a5f2 <_strtol_r+0x112>
1000a5de:	2430      	movs	r4, #48	; 0x30
1000a5e0:	2e00      	cmp	r6, #0
1000a5e2:	d1ac      	bne.n	1000a53e <_strtol_r+0x5e>
1000a5e4:	2608      	movs	r6, #8
1000a5e6:	e7aa      	b.n	1000a53e <_strtol_r+0x5e>
1000a5e8:	260a      	movs	r6, #10
1000a5ea:	e7a8      	b.n	1000a53e <_strtol_r+0x5e>
1000a5ec:	2c30      	cmp	r4, #48	; 0x30
1000a5ee:	d1a6      	bne.n	1000a53e <_strtol_r+0x5e>
1000a5f0:	e79d      	b.n	1000a52e <_strtol_r+0x4e>
1000a5f2:	b007      	add	sp, #28
1000a5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a5f6:	46c0      	nop			; (mov r8, r8)
1000a5f8:	20000714 	.word	0x20000714
1000a5fc:	7fffffff 	.word	0x7fffffff

1000a600 <quorem>:
1000a600:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a602:	6903      	ldr	r3, [r0, #16]
1000a604:	690c      	ldr	r4, [r1, #16]
1000a606:	b089      	sub	sp, #36	; 0x24
1000a608:	2600      	movs	r6, #0
1000a60a:	42a3      	cmp	r3, r4
1000a60c:	db7c      	blt.n	1000a708 <quorem+0x108>
1000a60e:	1c0b      	adds	r3, r1, #0
1000a610:	3c01      	subs	r4, #1
1000a612:	3314      	adds	r3, #20
1000a614:	00a5      	lsls	r5, r4, #2
1000a616:	9303      	str	r3, [sp, #12]
1000a618:	195b      	adds	r3, r3, r5
1000a61a:	9304      	str	r3, [sp, #16]
1000a61c:	1c03      	adds	r3, r0, #0
1000a61e:	3314      	adds	r3, #20
1000a620:	9301      	str	r3, [sp, #4]
1000a622:	195d      	adds	r5, r3, r5
1000a624:	9b04      	ldr	r3, [sp, #16]
1000a626:	9107      	str	r1, [sp, #28]
1000a628:	681b      	ldr	r3, [r3, #0]
1000a62a:	9002      	str	r0, [sp, #8]
1000a62c:	1c59      	adds	r1, r3, #1
1000a62e:	6828      	ldr	r0, [r5, #0]
1000a630:	9305      	str	r3, [sp, #20]
1000a632:	f7fc f89f 	bl	10006774 <__aeabi_uidiv>
1000a636:	1e07      	subs	r7, r0, #0
1000a638:	42b7      	cmp	r7, r6
1000a63a:	d035      	beq.n	1000a6a8 <quorem+0xa8>
1000a63c:	9b03      	ldr	r3, [sp, #12]
1000a63e:	9801      	ldr	r0, [sp, #4]
1000a640:	469c      	mov	ip, r3
1000a642:	9605      	str	r6, [sp, #20]
1000a644:	4663      	mov	r3, ip
1000a646:	cb04      	ldmia	r3!, {r2}
1000a648:	b291      	uxth	r1, r2
1000a64a:	4379      	muls	r1, r7
1000a64c:	0c12      	lsrs	r2, r2, #16
1000a64e:	437a      	muls	r2, r7
1000a650:	1871      	adds	r1, r6, r1
1000a652:	0c0e      	lsrs	r6, r1, #16
1000a654:	469c      	mov	ip, r3
1000a656:	18b3      	adds	r3, r6, r2
1000a658:	9306      	str	r3, [sp, #24]
1000a65a:	8802      	ldrh	r2, [r0, #0]
1000a65c:	0c1e      	lsrs	r6, r3, #16
1000a65e:	9b05      	ldr	r3, [sp, #20]
1000a660:	b289      	uxth	r1, r1
1000a662:	18d2      	adds	r2, r2, r3
1000a664:	6803      	ldr	r3, [r0, #0]
1000a666:	1a52      	subs	r2, r2, r1
1000a668:	0c19      	lsrs	r1, r3, #16
1000a66a:	466b      	mov	r3, sp
1000a66c:	8b1b      	ldrh	r3, [r3, #24]
1000a66e:	1acb      	subs	r3, r1, r3
1000a670:	1411      	asrs	r1, r2, #16
1000a672:	185b      	adds	r3, r3, r1
1000a674:	1419      	asrs	r1, r3, #16
1000a676:	b292      	uxth	r2, r2
1000a678:	041b      	lsls	r3, r3, #16
1000a67a:	431a      	orrs	r2, r3
1000a67c:	9b04      	ldr	r3, [sp, #16]
1000a67e:	9105      	str	r1, [sp, #20]
1000a680:	c004      	stmia	r0!, {r2}
1000a682:	4563      	cmp	r3, ip
1000a684:	d2de      	bcs.n	1000a644 <quorem+0x44>
1000a686:	682b      	ldr	r3, [r5, #0]
1000a688:	2b00      	cmp	r3, #0
1000a68a:	d10d      	bne.n	1000a6a8 <quorem+0xa8>
1000a68c:	1c23      	adds	r3, r4, #0
1000a68e:	9a01      	ldr	r2, [sp, #4]
1000a690:	3d04      	subs	r5, #4
1000a692:	4295      	cmp	r5, r2
1000a694:	d803      	bhi.n	1000a69e <quorem+0x9e>
1000a696:	9a02      	ldr	r2, [sp, #8]
1000a698:	1c1c      	adds	r4, r3, #0
1000a69a:	6113      	str	r3, [r2, #16]
1000a69c:	e004      	b.n	1000a6a8 <quorem+0xa8>
1000a69e:	682a      	ldr	r2, [r5, #0]
1000a6a0:	2a00      	cmp	r2, #0
1000a6a2:	d1f8      	bne.n	1000a696 <quorem+0x96>
1000a6a4:	3b01      	subs	r3, #1
1000a6a6:	e7f2      	b.n	1000a68e <quorem+0x8e>
1000a6a8:	9802      	ldr	r0, [sp, #8]
1000a6aa:	9907      	ldr	r1, [sp, #28]
1000a6ac:	f001 fbb2 	bl	1000be14 <__mcmp>
1000a6b0:	2800      	cmp	r0, #0
1000a6b2:	db28      	blt.n	1000a706 <quorem+0x106>
1000a6b4:	2000      	movs	r0, #0
1000a6b6:	9901      	ldr	r1, [sp, #4]
1000a6b8:	9a03      	ldr	r2, [sp, #12]
1000a6ba:	3701      	adds	r7, #1
1000a6bc:	ca20      	ldmia	r2!, {r5}
1000a6be:	880b      	ldrh	r3, [r1, #0]
1000a6c0:	1818      	adds	r0, r3, r0
1000a6c2:	b2ab      	uxth	r3, r5
1000a6c4:	1ac3      	subs	r3, r0, r3
1000a6c6:	6808      	ldr	r0, [r1, #0]
1000a6c8:	0c2d      	lsrs	r5, r5, #16
1000a6ca:	0c00      	lsrs	r0, r0, #16
1000a6cc:	1b45      	subs	r5, r0, r5
1000a6ce:	141e      	asrs	r6, r3, #16
1000a6d0:	19ad      	adds	r5, r5, r6
1000a6d2:	1428      	asrs	r0, r5, #16
1000a6d4:	b29b      	uxth	r3, r3
1000a6d6:	042d      	lsls	r5, r5, #16
1000a6d8:	432b      	orrs	r3, r5
1000a6da:	c108      	stmia	r1!, {r3}
1000a6dc:	9b04      	ldr	r3, [sp, #16]
1000a6de:	4293      	cmp	r3, r2
1000a6e0:	d2ec      	bcs.n	1000a6bc <quorem+0xbc>
1000a6e2:	9a01      	ldr	r2, [sp, #4]
1000a6e4:	00a3      	lsls	r3, r4, #2
1000a6e6:	18d3      	adds	r3, r2, r3
1000a6e8:	681a      	ldr	r2, [r3, #0]
1000a6ea:	2a00      	cmp	r2, #0
1000a6ec:	d10b      	bne.n	1000a706 <quorem+0x106>
1000a6ee:	9a01      	ldr	r2, [sp, #4]
1000a6f0:	3b04      	subs	r3, #4
1000a6f2:	4293      	cmp	r3, r2
1000a6f4:	d802      	bhi.n	1000a6fc <quorem+0xfc>
1000a6f6:	9b02      	ldr	r3, [sp, #8]
1000a6f8:	611c      	str	r4, [r3, #16]
1000a6fa:	e004      	b.n	1000a706 <quorem+0x106>
1000a6fc:	681a      	ldr	r2, [r3, #0]
1000a6fe:	2a00      	cmp	r2, #0
1000a700:	d1f9      	bne.n	1000a6f6 <quorem+0xf6>
1000a702:	3c01      	subs	r4, #1
1000a704:	e7f3      	b.n	1000a6ee <quorem+0xee>
1000a706:	1c3e      	adds	r6, r7, #0
1000a708:	1c30      	adds	r0, r6, #0
1000a70a:	b009      	add	sp, #36	; 0x24
1000a70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1000a710 <_dtoa_r>:
1000a710:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a712:	1c16      	adds	r6, r2, #0
1000a714:	1c1f      	adds	r7, r3, #0
1000a716:	6a44      	ldr	r4, [r0, #36]	; 0x24
1000a718:	b09b      	sub	sp, #108	; 0x6c
1000a71a:	9008      	str	r0, [sp, #32]
1000a71c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
1000a71e:	9606      	str	r6, [sp, #24]
1000a720:	9707      	str	r7, [sp, #28]
1000a722:	2c00      	cmp	r4, #0
1000a724:	d108      	bne.n	1000a738 <_dtoa_r+0x28>
1000a726:	2010      	movs	r0, #16
1000a728:	f001 f90e 	bl	1000b948 <malloc>
1000a72c:	9b08      	ldr	r3, [sp, #32]
1000a72e:	6258      	str	r0, [r3, #36]	; 0x24
1000a730:	6044      	str	r4, [r0, #4]
1000a732:	6084      	str	r4, [r0, #8]
1000a734:	6004      	str	r4, [r0, #0]
1000a736:	60c4      	str	r4, [r0, #12]
1000a738:	9b08      	ldr	r3, [sp, #32]
1000a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a73c:	6819      	ldr	r1, [r3, #0]
1000a73e:	2900      	cmp	r1, #0
1000a740:	d00b      	beq.n	1000a75a <_dtoa_r+0x4a>
1000a742:	685a      	ldr	r2, [r3, #4]
1000a744:	2301      	movs	r3, #1
1000a746:	4093      	lsls	r3, r2
1000a748:	604a      	str	r2, [r1, #4]
1000a74a:	608b      	str	r3, [r1, #8]
1000a74c:	9808      	ldr	r0, [sp, #32]
1000a74e:	f001 f948 	bl	1000b9e2 <_Bfree>
1000a752:	2200      	movs	r2, #0
1000a754:	9b08      	ldr	r3, [sp, #32]
1000a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a758:	601a      	str	r2, [r3, #0]
1000a75a:	9b07      	ldr	r3, [sp, #28]
1000a75c:	2b00      	cmp	r3, #0
1000a75e:	da05      	bge.n	1000a76c <_dtoa_r+0x5c>
1000a760:	2301      	movs	r3, #1
1000a762:	602b      	str	r3, [r5, #0]
1000a764:	007b      	lsls	r3, r7, #1
1000a766:	085b      	lsrs	r3, r3, #1
1000a768:	9307      	str	r3, [sp, #28]
1000a76a:	e001      	b.n	1000a770 <_dtoa_r+0x60>
1000a76c:	2300      	movs	r3, #0
1000a76e:	602b      	str	r3, [r5, #0]
1000a770:	9c07      	ldr	r4, [sp, #28]
1000a772:	4bc6      	ldr	r3, [pc, #792]	; (1000aa8c <_dtoa_r+0x37c>)
1000a774:	1c22      	adds	r2, r4, #0
1000a776:	9317      	str	r3, [sp, #92]	; 0x5c
1000a778:	401a      	ands	r2, r3
1000a77a:	429a      	cmp	r2, r3
1000a77c:	d119      	bne.n	1000a7b2 <_dtoa_r+0xa2>
1000a77e:	4bc4      	ldr	r3, [pc, #784]	; (1000aa90 <_dtoa_r+0x380>)
1000a780:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000a782:	6013      	str	r3, [r2, #0]
1000a784:	9a06      	ldr	r2, [sp, #24]
1000a786:	4bc3      	ldr	r3, [pc, #780]	; (1000aa94 <_dtoa_r+0x384>)
1000a788:	2a00      	cmp	r2, #0
1000a78a:	d102      	bne.n	1000a792 <_dtoa_r+0x82>
1000a78c:	0324      	lsls	r4, r4, #12
1000a78e:	d100      	bne.n	1000a792 <_dtoa_r+0x82>
1000a790:	4bc1      	ldr	r3, [pc, #772]	; (1000aa98 <_dtoa_r+0x388>)
1000a792:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000a794:	1c18      	adds	r0, r3, #0
1000a796:	2a00      	cmp	r2, #0
1000a798:	d101      	bne.n	1000a79e <_dtoa_r+0x8e>
1000a79a:	f000 fdb6 	bl	1000b30a <_dtoa_r+0xbfa>
1000a79e:	78d9      	ldrb	r1, [r3, #3]
1000a7a0:	1cda      	adds	r2, r3, #3
1000a7a2:	2900      	cmp	r1, #0
1000a7a4:	d000      	beq.n	1000a7a8 <_dtoa_r+0x98>
1000a7a6:	3205      	adds	r2, #5
1000a7a8:	9924      	ldr	r1, [sp, #144]	; 0x90
1000a7aa:	1c18      	adds	r0, r3, #0
1000a7ac:	600a      	str	r2, [r1, #0]
1000a7ae:	f000 fdac 	bl	1000b30a <_dtoa_r+0xbfa>
1000a7b2:	9e06      	ldr	r6, [sp, #24]
1000a7b4:	9f07      	ldr	r7, [sp, #28]
1000a7b6:	2200      	movs	r2, #0
1000a7b8:	1c30      	adds	r0, r6, #0
1000a7ba:	1c39      	adds	r1, r7, #0
1000a7bc:	2300      	movs	r3, #0
1000a7be:	f7fc f96b 	bl	10006a98 <__aeabi_dcmpeq>
1000a7c2:	1e05      	subs	r5, r0, #0
1000a7c4:	d00e      	beq.n	1000a7e4 <_dtoa_r+0xd4>
1000a7c6:	2301      	movs	r3, #1
1000a7c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000a7ca:	6013      	str	r3, [r2, #0]
1000a7cc:	4bb3      	ldr	r3, [pc, #716]	; (1000aa9c <_dtoa_r+0x38c>)
1000a7ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
1000a7d0:	1c18      	adds	r0, r3, #0
1000a7d2:	2a00      	cmp	r2, #0
1000a7d4:	d101      	bne.n	1000a7da <_dtoa_r+0xca>
1000a7d6:	f000 fd98 	bl	1000b30a <_dtoa_r+0xbfa>
1000a7da:	4ab1      	ldr	r2, [pc, #708]	; (1000aaa0 <_dtoa_r+0x390>)
1000a7dc:	9924      	ldr	r1, [sp, #144]	; 0x90
1000a7de:	600a      	str	r2, [r1, #0]
1000a7e0:	f000 fd93 	bl	1000b30a <_dtoa_r+0xbfa>
1000a7e4:	ab19      	add	r3, sp, #100	; 0x64
1000a7e6:	9300      	str	r3, [sp, #0]
1000a7e8:	ab18      	add	r3, sp, #96	; 0x60
1000a7ea:	9301      	str	r3, [sp, #4]
1000a7ec:	9808      	ldr	r0, [sp, #32]
1000a7ee:	1c32      	adds	r2, r6, #0
1000a7f0:	1c3b      	adds	r3, r7, #0
1000a7f2:	f001 fc0b 	bl	1000c00c <__d2b>
1000a7f6:	0061      	lsls	r1, r4, #1
1000a7f8:	900a      	str	r0, [sp, #40]	; 0x28
1000a7fa:	0d49      	lsrs	r1, r1, #21
1000a7fc:	d009      	beq.n	1000a812 <_dtoa_r+0x102>
1000a7fe:	0338      	lsls	r0, r7, #12
1000a800:	4ca8      	ldr	r4, [pc, #672]	; (1000aaa4 <_dtoa_r+0x394>)
1000a802:	0b00      	lsrs	r0, r0, #12
1000a804:	4304      	orrs	r4, r0
1000a806:	48a8      	ldr	r0, [pc, #672]	; (1000aaa8 <_dtoa_r+0x398>)
1000a808:	1c32      	adds	r2, r6, #0
1000a80a:	1c23      	adds	r3, r4, #0
1000a80c:	180e      	adds	r6, r1, r0
1000a80e:	9516      	str	r5, [sp, #88]	; 0x58
1000a810:	e01c      	b.n	1000a84c <_dtoa_r+0x13c>
1000a812:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a814:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000a816:	189e      	adds	r6, r3, r2
1000a818:	4ba4      	ldr	r3, [pc, #656]	; (1000aaac <_dtoa_r+0x39c>)
1000a81a:	429e      	cmp	r6, r3
1000a81c:	db09      	blt.n	1000a832 <_dtoa_r+0x122>
1000a81e:	4ba4      	ldr	r3, [pc, #656]	; (1000aab0 <_dtoa_r+0x3a0>)
1000a820:	18f0      	adds	r0, r6, r3
1000a822:	9b06      	ldr	r3, [sp, #24]
1000a824:	40c3      	lsrs	r3, r0
1000a826:	1c18      	adds	r0, r3, #0
1000a828:	4ba2      	ldr	r3, [pc, #648]	; (1000aab4 <_dtoa_r+0x3a4>)
1000a82a:	1b9b      	subs	r3, r3, r6
1000a82c:	409c      	lsls	r4, r3
1000a82e:	4320      	orrs	r0, r4
1000a830:	e004      	b.n	1000a83c <_dtoa_r+0x12c>
1000a832:	48a1      	ldr	r0, [pc, #644]	; (1000aab8 <_dtoa_r+0x3a8>)
1000a834:	9b06      	ldr	r3, [sp, #24]
1000a836:	1b80      	subs	r0, r0, r6
1000a838:	4083      	lsls	r3, r0
1000a83a:	1c18      	adds	r0, r3, #0
1000a83c:	f7fe f810 	bl	10008860 <__aeabi_ui2d>
1000a840:	4c9e      	ldr	r4, [pc, #632]	; (1000aabc <_dtoa_r+0x3ac>)
1000a842:	1c02      	adds	r2, r0, #0
1000a844:	190b      	adds	r3, r1, r4
1000a846:	2101      	movs	r1, #1
1000a848:	3e01      	subs	r6, #1
1000a84a:	9116      	str	r1, [sp, #88]	; 0x58
1000a84c:	1c10      	adds	r0, r2, #0
1000a84e:	1c19      	adds	r1, r3, #0
1000a850:	2200      	movs	r2, #0
1000a852:	4b9b      	ldr	r3, [pc, #620]	; (1000aac0 <_dtoa_r+0x3b0>)
1000a854:	f7fd fc4e 	bl	100080f4 <__aeabi_dsub>
1000a858:	4a9a      	ldr	r2, [pc, #616]	; (1000aac4 <_dtoa_r+0x3b4>)
1000a85a:	4b9b      	ldr	r3, [pc, #620]	; (1000aac8 <_dtoa_r+0x3b8>)
1000a85c:	f7fd f9b0 	bl	10007bc0 <__aeabi_dmul>
1000a860:	4a9a      	ldr	r2, [pc, #616]	; (1000aacc <_dtoa_r+0x3bc>)
1000a862:	4b9b      	ldr	r3, [pc, #620]	; (1000aad0 <_dtoa_r+0x3c0>)
1000a864:	f7fc fd6a 	bl	1000733c <__aeabi_dadd>
1000a868:	1c04      	adds	r4, r0, #0
1000a86a:	1c30      	adds	r0, r6, #0
1000a86c:	1c0d      	adds	r5, r1, #0
1000a86e:	f7fd ffbb 	bl	100087e8 <__aeabi_i2d>
1000a872:	4a98      	ldr	r2, [pc, #608]	; (1000aad4 <_dtoa_r+0x3c4>)
1000a874:	4b98      	ldr	r3, [pc, #608]	; (1000aad8 <_dtoa_r+0x3c8>)
1000a876:	f7fd f9a3 	bl	10007bc0 <__aeabi_dmul>
1000a87a:	1c02      	adds	r2, r0, #0
1000a87c:	1c0b      	adds	r3, r1, #0
1000a87e:	1c20      	adds	r0, r4, #0
1000a880:	1c29      	adds	r1, r5, #0
1000a882:	f7fc fd5b 	bl	1000733c <__aeabi_dadd>
1000a886:	1c04      	adds	r4, r0, #0
1000a888:	1c0d      	adds	r5, r1, #0
1000a88a:	f002 fa37 	bl	1000ccfc <__aeabi_d2iz>
1000a88e:	1c29      	adds	r1, r5, #0
1000a890:	9003      	str	r0, [sp, #12]
1000a892:	2200      	movs	r2, #0
1000a894:	1c20      	adds	r0, r4, #0
1000a896:	2300      	movs	r3, #0
1000a898:	f7fc f904 	bl	10006aa4 <__aeabi_dcmplt>
1000a89c:	2800      	cmp	r0, #0
1000a89e:	d00d      	beq.n	1000a8bc <_dtoa_r+0x1ac>
1000a8a0:	9803      	ldr	r0, [sp, #12]
1000a8a2:	f7fd ffa1 	bl	100087e8 <__aeabi_i2d>
1000a8a6:	1c02      	adds	r2, r0, #0
1000a8a8:	1c0b      	adds	r3, r1, #0
1000a8aa:	1c20      	adds	r0, r4, #0
1000a8ac:	1c29      	adds	r1, r5, #0
1000a8ae:	f7fc f8f3 	bl	10006a98 <__aeabi_dcmpeq>
1000a8b2:	4243      	negs	r3, r0
1000a8b4:	4143      	adcs	r3, r0
1000a8b6:	9a03      	ldr	r2, [sp, #12]
1000a8b8:	1ad3      	subs	r3, r2, r3
1000a8ba:	9303      	str	r3, [sp, #12]
1000a8bc:	2301      	movs	r3, #1
1000a8be:	9313      	str	r3, [sp, #76]	; 0x4c
1000a8c0:	9b03      	ldr	r3, [sp, #12]
1000a8c2:	2b16      	cmp	r3, #22
1000a8c4:	d811      	bhi.n	1000a8ea <_dtoa_r+0x1da>
1000a8c6:	4a85      	ldr	r2, [pc, #532]	; (1000aadc <_dtoa_r+0x3cc>)
1000a8c8:	00db      	lsls	r3, r3, #3
1000a8ca:	18d3      	adds	r3, r2, r3
1000a8cc:	6818      	ldr	r0, [r3, #0]
1000a8ce:	6859      	ldr	r1, [r3, #4]
1000a8d0:	9a06      	ldr	r2, [sp, #24]
1000a8d2:	9b07      	ldr	r3, [sp, #28]
1000a8d4:	f7fc f8fa 	bl	10006acc <__aeabi_dcmpgt>
1000a8d8:	2800      	cmp	r0, #0
1000a8da:	d005      	beq.n	1000a8e8 <_dtoa_r+0x1d8>
1000a8dc:	9b03      	ldr	r3, [sp, #12]
1000a8de:	3b01      	subs	r3, #1
1000a8e0:	9303      	str	r3, [sp, #12]
1000a8e2:	2300      	movs	r3, #0
1000a8e4:	9313      	str	r3, [sp, #76]	; 0x4c
1000a8e6:	e000      	b.n	1000a8ea <_dtoa_r+0x1da>
1000a8e8:	9013      	str	r0, [sp, #76]	; 0x4c
1000a8ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000a8ec:	1b9e      	subs	r6, r3, r6
1000a8ee:	2300      	movs	r3, #0
1000a8f0:	930d      	str	r3, [sp, #52]	; 0x34
1000a8f2:	3e01      	subs	r6, #1
1000a8f4:	960e      	str	r6, [sp, #56]	; 0x38
1000a8f6:	d504      	bpl.n	1000a902 <_dtoa_r+0x1f2>
1000a8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a8fa:	425b      	negs	r3, r3
1000a8fc:	930d      	str	r3, [sp, #52]	; 0x34
1000a8fe:	2300      	movs	r3, #0
1000a900:	930e      	str	r3, [sp, #56]	; 0x38
1000a902:	9b03      	ldr	r3, [sp, #12]
1000a904:	2b00      	cmp	r3, #0
1000a906:	db08      	blt.n	1000a91a <_dtoa_r+0x20a>
1000a908:	9a03      	ldr	r2, [sp, #12]
1000a90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a90c:	4694      	mov	ip, r2
1000a90e:	4463      	add	r3, ip
1000a910:	930e      	str	r3, [sp, #56]	; 0x38
1000a912:	2300      	movs	r3, #0
1000a914:	9212      	str	r2, [sp, #72]	; 0x48
1000a916:	930f      	str	r3, [sp, #60]	; 0x3c
1000a918:	e007      	b.n	1000a92a <_dtoa_r+0x21a>
1000a91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a91c:	9a03      	ldr	r2, [sp, #12]
1000a91e:	1a9b      	subs	r3, r3, r2
1000a920:	930d      	str	r3, [sp, #52]	; 0x34
1000a922:	4253      	negs	r3, r2
1000a924:	930f      	str	r3, [sp, #60]	; 0x3c
1000a926:	2300      	movs	r3, #0
1000a928:	9312      	str	r3, [sp, #72]	; 0x48
1000a92a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000a92c:	2501      	movs	r5, #1
1000a92e:	2b09      	cmp	r3, #9
1000a930:	d827      	bhi.n	1000a982 <_dtoa_r+0x272>
1000a932:	2b05      	cmp	r3, #5
1000a934:	dd02      	ble.n	1000a93c <_dtoa_r+0x22c>
1000a936:	2500      	movs	r5, #0
1000a938:	3b04      	subs	r3, #4
1000a93a:	9320      	str	r3, [sp, #128]	; 0x80
1000a93c:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000a93e:	1e98      	subs	r0, r3, #2
1000a940:	2803      	cmp	r0, #3
1000a942:	d823      	bhi.n	1000a98c <_dtoa_r+0x27c>
1000a944:	f001 fe8e 	bl	1000c664 <__gnu_thumb1_case_uqi>
1000a948:	10040e02 	.word	0x10040e02
1000a94c:	2300      	movs	r3, #0
1000a94e:	e000      	b.n	1000a952 <_dtoa_r+0x242>
1000a950:	2301      	movs	r3, #1
1000a952:	9310      	str	r3, [sp, #64]	; 0x40
1000a954:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000a956:	2b00      	cmp	r3, #0
1000a958:	dc21      	bgt.n	1000a99e <_dtoa_r+0x28e>
1000a95a:	2301      	movs	r3, #1
1000a95c:	930b      	str	r3, [sp, #44]	; 0x2c
1000a95e:	9309      	str	r3, [sp, #36]	; 0x24
1000a960:	1c1a      	adds	r2, r3, #0
1000a962:	e01a      	b.n	1000a99a <_dtoa_r+0x28a>
1000a964:	2300      	movs	r3, #0
1000a966:	e000      	b.n	1000a96a <_dtoa_r+0x25a>
1000a968:	2301      	movs	r3, #1
1000a96a:	9a03      	ldr	r2, [sp, #12]
1000a96c:	9310      	str	r3, [sp, #64]	; 0x40
1000a96e:	4694      	mov	ip, r2
1000a970:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000a972:	4463      	add	r3, ip
1000a974:	930b      	str	r3, [sp, #44]	; 0x2c
1000a976:	3301      	adds	r3, #1
1000a978:	9309      	str	r3, [sp, #36]	; 0x24
1000a97a:	2b00      	cmp	r3, #0
1000a97c:	dc12      	bgt.n	1000a9a4 <_dtoa_r+0x294>
1000a97e:	2301      	movs	r3, #1
1000a980:	e010      	b.n	1000a9a4 <_dtoa_r+0x294>
1000a982:	2300      	movs	r3, #0
1000a984:	9510      	str	r5, [sp, #64]	; 0x40
1000a986:	9320      	str	r3, [sp, #128]	; 0x80
1000a988:	3b01      	subs	r3, #1
1000a98a:	e002      	b.n	1000a992 <_dtoa_r+0x282>
1000a98c:	2301      	movs	r3, #1
1000a98e:	9310      	str	r3, [sp, #64]	; 0x40
1000a990:	3b02      	subs	r3, #2
1000a992:	2200      	movs	r2, #0
1000a994:	930b      	str	r3, [sp, #44]	; 0x2c
1000a996:	9309      	str	r3, [sp, #36]	; 0x24
1000a998:	3313      	adds	r3, #19
1000a99a:	9221      	str	r2, [sp, #132]	; 0x84
1000a99c:	e002      	b.n	1000a9a4 <_dtoa_r+0x294>
1000a99e:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000a9a0:	930b      	str	r3, [sp, #44]	; 0x2c
1000a9a2:	9309      	str	r3, [sp, #36]	; 0x24
1000a9a4:	9a08      	ldr	r2, [sp, #32]
1000a9a6:	6a54      	ldr	r4, [r2, #36]	; 0x24
1000a9a8:	2200      	movs	r2, #0
1000a9aa:	6062      	str	r2, [r4, #4]
1000a9ac:	3204      	adds	r2, #4
1000a9ae:	1c11      	adds	r1, r2, #0
1000a9b0:	3114      	adds	r1, #20
1000a9b2:	4299      	cmp	r1, r3
1000a9b4:	d804      	bhi.n	1000a9c0 <_dtoa_r+0x2b0>
1000a9b6:	6861      	ldr	r1, [r4, #4]
1000a9b8:	0052      	lsls	r2, r2, #1
1000a9ba:	3101      	adds	r1, #1
1000a9bc:	6061      	str	r1, [r4, #4]
1000a9be:	e7f6      	b.n	1000a9ae <_dtoa_r+0x29e>
1000a9c0:	9808      	ldr	r0, [sp, #32]
1000a9c2:	6861      	ldr	r1, [r4, #4]
1000a9c4:	f000 ffd5 	bl	1000b972 <_Balloc>
1000a9c8:	9b08      	ldr	r3, [sp, #32]
1000a9ca:	6020      	str	r0, [r4, #0]
1000a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000a9ce:	681b      	ldr	r3, [r3, #0]
1000a9d0:	930c      	str	r3, [sp, #48]	; 0x30
1000a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a9d4:	2b0e      	cmp	r3, #14
1000a9d6:	d900      	bls.n	1000a9da <_dtoa_r+0x2ca>
1000a9d8:	e188      	b.n	1000acec <_dtoa_r+0x5dc>
1000a9da:	2d00      	cmp	r5, #0
1000a9dc:	d100      	bne.n	1000a9e0 <_dtoa_r+0x2d0>
1000a9de:	e185      	b.n	1000acec <_dtoa_r+0x5dc>
1000a9e0:	9b06      	ldr	r3, [sp, #24]
1000a9e2:	9c07      	ldr	r4, [sp, #28]
1000a9e4:	9314      	str	r3, [sp, #80]	; 0x50
1000a9e6:	9415      	str	r4, [sp, #84]	; 0x54
1000a9e8:	9b03      	ldr	r3, [sp, #12]
1000a9ea:	2b00      	cmp	r3, #0
1000a9ec:	dd30      	ble.n	1000aa50 <_dtoa_r+0x340>
1000a9ee:	220f      	movs	r2, #15
1000a9f0:	493a      	ldr	r1, [pc, #232]	; (1000aadc <_dtoa_r+0x3cc>)
1000a9f2:	4013      	ands	r3, r2
1000a9f4:	00db      	lsls	r3, r3, #3
1000a9f6:	18cb      	adds	r3, r1, r3
1000a9f8:	685c      	ldr	r4, [r3, #4]
1000a9fa:	681b      	ldr	r3, [r3, #0]
1000a9fc:	9304      	str	r3, [sp, #16]
1000a9fe:	9405      	str	r4, [sp, #20]
1000aa00:	9b03      	ldr	r3, [sp, #12]
1000aa02:	2702      	movs	r7, #2
1000aa04:	111d      	asrs	r5, r3, #4
1000aa06:	06eb      	lsls	r3, r5, #27
1000aa08:	d50a      	bpl.n	1000aa20 <_dtoa_r+0x310>
1000aa0a:	9814      	ldr	r0, [sp, #80]	; 0x50
1000aa0c:	9915      	ldr	r1, [sp, #84]	; 0x54
1000aa0e:	4b34      	ldr	r3, [pc, #208]	; (1000aae0 <_dtoa_r+0x3d0>)
1000aa10:	4015      	ands	r5, r2
1000aa12:	6a1a      	ldr	r2, [r3, #32]
1000aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000aa16:	f001 fe4d 	bl	1000c6b4 <__aeabi_ddiv>
1000aa1a:	9006      	str	r0, [sp, #24]
1000aa1c:	9107      	str	r1, [sp, #28]
1000aa1e:	3701      	adds	r7, #1
1000aa20:	4c2f      	ldr	r4, [pc, #188]	; (1000aae0 <_dtoa_r+0x3d0>)
1000aa22:	2d00      	cmp	r5, #0
1000aa24:	d00d      	beq.n	1000aa42 <_dtoa_r+0x332>
1000aa26:	07eb      	lsls	r3, r5, #31
1000aa28:	d508      	bpl.n	1000aa3c <_dtoa_r+0x32c>
1000aa2a:	9804      	ldr	r0, [sp, #16]
1000aa2c:	9905      	ldr	r1, [sp, #20]
1000aa2e:	6822      	ldr	r2, [r4, #0]
1000aa30:	6863      	ldr	r3, [r4, #4]
1000aa32:	f7fd f8c5 	bl	10007bc0 <__aeabi_dmul>
1000aa36:	9004      	str	r0, [sp, #16]
1000aa38:	9105      	str	r1, [sp, #20]
1000aa3a:	3701      	adds	r7, #1
1000aa3c:	106d      	asrs	r5, r5, #1
1000aa3e:	3408      	adds	r4, #8
1000aa40:	e7ef      	b.n	1000aa22 <_dtoa_r+0x312>
1000aa42:	9806      	ldr	r0, [sp, #24]
1000aa44:	9907      	ldr	r1, [sp, #28]
1000aa46:	9a04      	ldr	r2, [sp, #16]
1000aa48:	9b05      	ldr	r3, [sp, #20]
1000aa4a:	f001 fe33 	bl	1000c6b4 <__aeabi_ddiv>
1000aa4e:	e049      	b.n	1000aae4 <_dtoa_r+0x3d4>
1000aa50:	9b03      	ldr	r3, [sp, #12]
1000aa52:	2702      	movs	r7, #2
1000aa54:	425d      	negs	r5, r3
1000aa56:	2d00      	cmp	r5, #0
1000aa58:	d046      	beq.n	1000aae8 <_dtoa_r+0x3d8>
1000aa5a:	9814      	ldr	r0, [sp, #80]	; 0x50
1000aa5c:	9915      	ldr	r1, [sp, #84]	; 0x54
1000aa5e:	230f      	movs	r3, #15
1000aa60:	4a1e      	ldr	r2, [pc, #120]	; (1000aadc <_dtoa_r+0x3cc>)
1000aa62:	402b      	ands	r3, r5
1000aa64:	00db      	lsls	r3, r3, #3
1000aa66:	18d3      	adds	r3, r2, r3
1000aa68:	681a      	ldr	r2, [r3, #0]
1000aa6a:	685b      	ldr	r3, [r3, #4]
1000aa6c:	f7fd f8a8 	bl	10007bc0 <__aeabi_dmul>
1000aa70:	4c1b      	ldr	r4, [pc, #108]	; (1000aae0 <_dtoa_r+0x3d0>)
1000aa72:	112d      	asrs	r5, r5, #4
1000aa74:	2d00      	cmp	r5, #0
1000aa76:	d035      	beq.n	1000aae4 <_dtoa_r+0x3d4>
1000aa78:	07eb      	lsls	r3, r5, #31
1000aa7a:	d504      	bpl.n	1000aa86 <_dtoa_r+0x376>
1000aa7c:	6822      	ldr	r2, [r4, #0]
1000aa7e:	6863      	ldr	r3, [r4, #4]
1000aa80:	3701      	adds	r7, #1
1000aa82:	f7fd f89d 	bl	10007bc0 <__aeabi_dmul>
1000aa86:	106d      	asrs	r5, r5, #1
1000aa88:	3408      	adds	r4, #8
1000aa8a:	e7f3      	b.n	1000aa74 <_dtoa_r+0x364>
1000aa8c:	7ff00000 	.word	0x7ff00000
1000aa90:	0000270f 	.word	0x0000270f
1000aa94:	1000d016 	.word	0x1000d016
1000aa98:	1000d00d 	.word	0x1000d00d
1000aa9c:	1000ce92 	.word	0x1000ce92
1000aaa0:	1000ce93 	.word	0x1000ce93
1000aaa4:	3ff00000 	.word	0x3ff00000
1000aaa8:	fffffc01 	.word	0xfffffc01
1000aaac:	fffffbef 	.word	0xfffffbef
1000aab0:	00000412 	.word	0x00000412
1000aab4:	fffffc0e 	.word	0xfffffc0e
1000aab8:	fffffbee 	.word	0xfffffbee
1000aabc:	fe100000 	.word	0xfe100000
1000aac0:	3ff80000 	.word	0x3ff80000
1000aac4:	636f4361 	.word	0x636f4361
1000aac8:	3fd287a7 	.word	0x3fd287a7
1000aacc:	8b60c8b3 	.word	0x8b60c8b3
1000aad0:	3fc68a28 	.word	0x3fc68a28
1000aad4:	509f79fb 	.word	0x509f79fb
1000aad8:	3fd34413 	.word	0x3fd34413
1000aadc:	1000d028 	.word	0x1000d028
1000aae0:	1000d0f0 	.word	0x1000d0f0
1000aae4:	9006      	str	r0, [sp, #24]
1000aae6:	9107      	str	r1, [sp, #28]
1000aae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000aaea:	2b00      	cmp	r3, #0
1000aaec:	d01e      	beq.n	1000ab2c <_dtoa_r+0x41c>
1000aaee:	9c06      	ldr	r4, [sp, #24]
1000aaf0:	9d07      	ldr	r5, [sp, #28]
1000aaf2:	2200      	movs	r2, #0
1000aaf4:	1c20      	adds	r0, r4, #0
1000aaf6:	1c29      	adds	r1, r5, #0
1000aaf8:	4bce      	ldr	r3, [pc, #824]	; (1000ae34 <_dtoa_r+0x724>)
1000aafa:	f7fb ffd3 	bl	10006aa4 <__aeabi_dcmplt>
1000aafe:	2800      	cmp	r0, #0
1000ab00:	d014      	beq.n	1000ab2c <_dtoa_r+0x41c>
1000ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ab04:	2b00      	cmp	r3, #0
1000ab06:	d011      	beq.n	1000ab2c <_dtoa_r+0x41c>
1000ab08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000ab0a:	2b00      	cmp	r3, #0
1000ab0c:	dc00      	bgt.n	1000ab10 <_dtoa_r+0x400>
1000ab0e:	e0e9      	b.n	1000ace4 <_dtoa_r+0x5d4>
1000ab10:	9b03      	ldr	r3, [sp, #12]
1000ab12:	1c29      	adds	r1, r5, #0
1000ab14:	3b01      	subs	r3, #1
1000ab16:	9311      	str	r3, [sp, #68]	; 0x44
1000ab18:	1c20      	adds	r0, r4, #0
1000ab1a:	2200      	movs	r2, #0
1000ab1c:	4bc6      	ldr	r3, [pc, #792]	; (1000ae38 <_dtoa_r+0x728>)
1000ab1e:	f7fd f84f 	bl	10007bc0 <__aeabi_dmul>
1000ab22:	3701      	adds	r7, #1
1000ab24:	9006      	str	r0, [sp, #24]
1000ab26:	9107      	str	r1, [sp, #28]
1000ab28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000ab2a:	e002      	b.n	1000ab32 <_dtoa_r+0x422>
1000ab2c:	9b03      	ldr	r3, [sp, #12]
1000ab2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1000ab30:	9311      	str	r3, [sp, #68]	; 0x44
1000ab32:	1c38      	adds	r0, r7, #0
1000ab34:	9b06      	ldr	r3, [sp, #24]
1000ab36:	9c07      	ldr	r4, [sp, #28]
1000ab38:	9304      	str	r3, [sp, #16]
1000ab3a:	9405      	str	r4, [sp, #20]
1000ab3c:	f7fd fe54 	bl	100087e8 <__aeabi_i2d>
1000ab40:	9a04      	ldr	r2, [sp, #16]
1000ab42:	9b05      	ldr	r3, [sp, #20]
1000ab44:	f7fd f83c 	bl	10007bc0 <__aeabi_dmul>
1000ab48:	2200      	movs	r2, #0
1000ab4a:	4bbc      	ldr	r3, [pc, #752]	; (1000ae3c <_dtoa_r+0x72c>)
1000ab4c:	f7fc fbf6 	bl	1000733c <__aeabi_dadd>
1000ab50:	9006      	str	r0, [sp, #24]
1000ab52:	9107      	str	r1, [sp, #28]
1000ab54:	9e06      	ldr	r6, [sp, #24]
1000ab56:	9f07      	ldr	r7, [sp, #28]
1000ab58:	9b07      	ldr	r3, [sp, #28]
1000ab5a:	4ab9      	ldr	r2, [pc, #740]	; (1000ae40 <_dtoa_r+0x730>)
1000ab5c:	189c      	adds	r4, r3, r2
1000ab5e:	2d00      	cmp	r5, #0
1000ab60:	d11c      	bne.n	1000ab9c <_dtoa_r+0x48c>
1000ab62:	9804      	ldr	r0, [sp, #16]
1000ab64:	9905      	ldr	r1, [sp, #20]
1000ab66:	2200      	movs	r2, #0
1000ab68:	4bb6      	ldr	r3, [pc, #728]	; (1000ae44 <_dtoa_r+0x734>)
1000ab6a:	f7fd fac3 	bl	100080f4 <__aeabi_dsub>
1000ab6e:	1c32      	adds	r2, r6, #0
1000ab70:	1c23      	adds	r3, r4, #0
1000ab72:	9004      	str	r0, [sp, #16]
1000ab74:	9105      	str	r1, [sp, #20]
1000ab76:	f7fb ffa9 	bl	10006acc <__aeabi_dcmpgt>
1000ab7a:	2800      	cmp	r0, #0
1000ab7c:	d000      	beq.n	1000ab80 <_dtoa_r+0x470>
1000ab7e:	e263      	b.n	1000b048 <_dtoa_r+0x938>
1000ab80:	9804      	ldr	r0, [sp, #16]
1000ab82:	9905      	ldr	r1, [sp, #20]
1000ab84:	1c32      	adds	r2, r6, #0
1000ab86:	4eb0      	ldr	r6, [pc, #704]	; (1000ae48 <_dtoa_r+0x738>)
1000ab88:	9c07      	ldr	r4, [sp, #28]
1000ab8a:	46b4      	mov	ip, r6
1000ab8c:	4464      	add	r4, ip
1000ab8e:	1c23      	adds	r3, r4, #0
1000ab90:	f7fb ff88 	bl	10006aa4 <__aeabi_dcmplt>
1000ab94:	2800      	cmp	r0, #0
1000ab96:	d000      	beq.n	1000ab9a <_dtoa_r+0x48a>
1000ab98:	e24c      	b.n	1000b034 <_dtoa_r+0x924>
1000ab9a:	e0a3      	b.n	1000ace4 <_dtoa_r+0x5d4>
1000ab9c:	4aab      	ldr	r2, [pc, #684]	; (1000ae4c <_dtoa_r+0x73c>)
1000ab9e:	1e6b      	subs	r3, r5, #1
1000aba0:	9910      	ldr	r1, [sp, #64]	; 0x40
1000aba2:	00db      	lsls	r3, r3, #3
1000aba4:	18d3      	adds	r3, r2, r3
1000aba6:	2900      	cmp	r1, #0
1000aba8:	d04e      	beq.n	1000ac48 <_dtoa_r+0x538>
1000abaa:	681a      	ldr	r2, [r3, #0]
1000abac:	685b      	ldr	r3, [r3, #4]
1000abae:	2000      	movs	r0, #0
1000abb0:	49a7      	ldr	r1, [pc, #668]	; (1000ae50 <_dtoa_r+0x740>)
1000abb2:	f001 fd7f 	bl	1000c6b4 <__aeabi_ddiv>
1000abb6:	1c32      	adds	r2, r6, #0
1000abb8:	1c23      	adds	r3, r4, #0
1000abba:	f7fd fa9b 	bl	100080f4 <__aeabi_dsub>
1000abbe:	9e04      	ldr	r6, [sp, #16]
1000abc0:	9f05      	ldr	r7, [sp, #20]
1000abc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000abc4:	9006      	str	r0, [sp, #24]
1000abc6:	9107      	str	r1, [sp, #28]
1000abc8:	9304      	str	r3, [sp, #16]
1000abca:	1c39      	adds	r1, r7, #0
1000abcc:	1c30      	adds	r0, r6, #0
1000abce:	f002 f895 	bl	1000ccfc <__aeabi_d2iz>
1000abd2:	1c04      	adds	r4, r0, #0
1000abd4:	f7fd fe08 	bl	100087e8 <__aeabi_i2d>
1000abd8:	1c02      	adds	r2, r0, #0
1000abda:	1c0b      	adds	r3, r1, #0
1000abdc:	1c30      	adds	r0, r6, #0
1000abde:	1c39      	adds	r1, r7, #0
1000abe0:	f7fd fa88 	bl	100080f4 <__aeabi_dsub>
1000abe4:	9b04      	ldr	r3, [sp, #16]
1000abe6:	3430      	adds	r4, #48	; 0x30
1000abe8:	3301      	adds	r3, #1
1000abea:	9304      	str	r3, [sp, #16]
1000abec:	3b01      	subs	r3, #1
1000abee:	701c      	strb	r4, [r3, #0]
1000abf0:	9a06      	ldr	r2, [sp, #24]
1000abf2:	9b07      	ldr	r3, [sp, #28]
1000abf4:	1c06      	adds	r6, r0, #0
1000abf6:	1c0f      	adds	r7, r1, #0
1000abf8:	f7fb ff54 	bl	10006aa4 <__aeabi_dcmplt>
1000abfc:	2800      	cmp	r0, #0
1000abfe:	d000      	beq.n	1000ac02 <_dtoa_r+0x4f2>
1000ac00:	e361      	b.n	1000b2c6 <_dtoa_r+0xbb6>
1000ac02:	1c32      	adds	r2, r6, #0
1000ac04:	1c3b      	adds	r3, r7, #0
1000ac06:	2000      	movs	r0, #0
1000ac08:	498a      	ldr	r1, [pc, #552]	; (1000ae34 <_dtoa_r+0x724>)
1000ac0a:	f7fd fa73 	bl	100080f4 <__aeabi_dsub>
1000ac0e:	9a06      	ldr	r2, [sp, #24]
1000ac10:	9b07      	ldr	r3, [sp, #28]
1000ac12:	f7fb ff47 	bl	10006aa4 <__aeabi_dcmplt>
1000ac16:	2800      	cmp	r0, #0
1000ac18:	d000      	beq.n	1000ac1c <_dtoa_r+0x50c>
1000ac1a:	e0cd      	b.n	1000adb8 <_dtoa_r+0x6a8>
1000ac1c:	9b04      	ldr	r3, [sp, #16]
1000ac1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000ac20:	1a9b      	subs	r3, r3, r2
1000ac22:	42ab      	cmp	r3, r5
1000ac24:	da5e      	bge.n	1000ace4 <_dtoa_r+0x5d4>
1000ac26:	9806      	ldr	r0, [sp, #24]
1000ac28:	9907      	ldr	r1, [sp, #28]
1000ac2a:	2200      	movs	r2, #0
1000ac2c:	4b82      	ldr	r3, [pc, #520]	; (1000ae38 <_dtoa_r+0x728>)
1000ac2e:	f7fc ffc7 	bl	10007bc0 <__aeabi_dmul>
1000ac32:	2200      	movs	r2, #0
1000ac34:	9006      	str	r0, [sp, #24]
1000ac36:	9107      	str	r1, [sp, #28]
1000ac38:	4b7f      	ldr	r3, [pc, #508]	; (1000ae38 <_dtoa_r+0x728>)
1000ac3a:	1c30      	adds	r0, r6, #0
1000ac3c:	1c39      	adds	r1, r7, #0
1000ac3e:	f7fc ffbf 	bl	10007bc0 <__aeabi_dmul>
1000ac42:	1c06      	adds	r6, r0, #0
1000ac44:	1c0f      	adds	r7, r1, #0
1000ac46:	e7c0      	b.n	1000abca <_dtoa_r+0x4ba>
1000ac48:	6818      	ldr	r0, [r3, #0]
1000ac4a:	6859      	ldr	r1, [r3, #4]
1000ac4c:	1c32      	adds	r2, r6, #0
1000ac4e:	1c23      	adds	r3, r4, #0
1000ac50:	f7fc ffb6 	bl	10007bc0 <__aeabi_dmul>
1000ac54:	9e04      	ldr	r6, [sp, #16]
1000ac56:	9f05      	ldr	r7, [sp, #20]
1000ac58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000ac5a:	9006      	str	r0, [sp, #24]
1000ac5c:	9107      	str	r1, [sp, #28]
1000ac5e:	1963      	adds	r3, r4, r5
1000ac60:	9304      	str	r3, [sp, #16]
1000ac62:	1c39      	adds	r1, r7, #0
1000ac64:	1c30      	adds	r0, r6, #0
1000ac66:	f002 f849 	bl	1000ccfc <__aeabi_d2iz>
1000ac6a:	1c05      	adds	r5, r0, #0
1000ac6c:	f7fd fdbc 	bl	100087e8 <__aeabi_i2d>
1000ac70:	1c0b      	adds	r3, r1, #0
1000ac72:	1c02      	adds	r2, r0, #0
1000ac74:	1c39      	adds	r1, r7, #0
1000ac76:	1c30      	adds	r0, r6, #0
1000ac78:	f7fd fa3c 	bl	100080f4 <__aeabi_dsub>
1000ac7c:	3530      	adds	r5, #48	; 0x30
1000ac7e:	9b04      	ldr	r3, [sp, #16]
1000ac80:	7025      	strb	r5, [r4, #0]
1000ac82:	3401      	adds	r4, #1
1000ac84:	1c06      	adds	r6, r0, #0
1000ac86:	1c0f      	adds	r7, r1, #0
1000ac88:	42a3      	cmp	r3, r4
1000ac8a:	d124      	bne.n	1000acd6 <_dtoa_r+0x5c6>
1000ac8c:	2200      	movs	r2, #0
1000ac8e:	9806      	ldr	r0, [sp, #24]
1000ac90:	9907      	ldr	r1, [sp, #28]
1000ac92:	4b6f      	ldr	r3, [pc, #444]	; (1000ae50 <_dtoa_r+0x740>)
1000ac94:	f7fc fb52 	bl	1000733c <__aeabi_dadd>
1000ac98:	1c02      	adds	r2, r0, #0
1000ac9a:	1c0b      	adds	r3, r1, #0
1000ac9c:	1c30      	adds	r0, r6, #0
1000ac9e:	1c39      	adds	r1, r7, #0
1000aca0:	f7fb ff14 	bl	10006acc <__aeabi_dcmpgt>
1000aca4:	2800      	cmp	r0, #0
1000aca6:	d000      	beq.n	1000acaa <_dtoa_r+0x59a>
1000aca8:	e086      	b.n	1000adb8 <_dtoa_r+0x6a8>
1000acaa:	9a06      	ldr	r2, [sp, #24]
1000acac:	9b07      	ldr	r3, [sp, #28]
1000acae:	2000      	movs	r0, #0
1000acb0:	4967      	ldr	r1, [pc, #412]	; (1000ae50 <_dtoa_r+0x740>)
1000acb2:	f7fd fa1f 	bl	100080f4 <__aeabi_dsub>
1000acb6:	1c02      	adds	r2, r0, #0
1000acb8:	1c0b      	adds	r3, r1, #0
1000acba:	1c30      	adds	r0, r6, #0
1000acbc:	1c39      	adds	r1, r7, #0
1000acbe:	f7fb fef1 	bl	10006aa4 <__aeabi_dcmplt>
1000acc2:	2800      	cmp	r0, #0
1000acc4:	d00e      	beq.n	1000ace4 <_dtoa_r+0x5d4>
1000acc6:	9b04      	ldr	r3, [sp, #16]
1000acc8:	3b01      	subs	r3, #1
1000acca:	781a      	ldrb	r2, [r3, #0]
1000accc:	2a30      	cmp	r2, #48	; 0x30
1000acce:	d000      	beq.n	1000acd2 <_dtoa_r+0x5c2>
1000acd0:	e2f9      	b.n	1000b2c6 <_dtoa_r+0xbb6>
1000acd2:	9304      	str	r3, [sp, #16]
1000acd4:	e7f7      	b.n	1000acc6 <_dtoa_r+0x5b6>
1000acd6:	2200      	movs	r2, #0
1000acd8:	4b57      	ldr	r3, [pc, #348]	; (1000ae38 <_dtoa_r+0x728>)
1000acda:	f7fc ff71 	bl	10007bc0 <__aeabi_dmul>
1000acde:	1c06      	adds	r6, r0, #0
1000ace0:	1c0f      	adds	r7, r1, #0
1000ace2:	e7be      	b.n	1000ac62 <_dtoa_r+0x552>
1000ace4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000ace6:	9c15      	ldr	r4, [sp, #84]	; 0x54
1000ace8:	9306      	str	r3, [sp, #24]
1000acea:	9407      	str	r4, [sp, #28]
1000acec:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000acee:	2b00      	cmp	r3, #0
1000acf0:	da00      	bge.n	1000acf4 <_dtoa_r+0x5e4>
1000acf2:	e086      	b.n	1000ae02 <_dtoa_r+0x6f2>
1000acf4:	9a03      	ldr	r2, [sp, #12]
1000acf6:	2a0e      	cmp	r2, #14
1000acf8:	dd00      	ble.n	1000acfc <_dtoa_r+0x5ec>
1000acfa:	e082      	b.n	1000ae02 <_dtoa_r+0x6f2>
1000acfc:	00d3      	lsls	r3, r2, #3
1000acfe:	4a53      	ldr	r2, [pc, #332]	; (1000ae4c <_dtoa_r+0x73c>)
1000ad00:	18d3      	adds	r3, r2, r3
1000ad02:	681e      	ldr	r6, [r3, #0]
1000ad04:	685f      	ldr	r7, [r3, #4]
1000ad06:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000ad08:	2b00      	cmp	r3, #0
1000ad0a:	da14      	bge.n	1000ad36 <_dtoa_r+0x626>
1000ad0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ad0e:	2b00      	cmp	r3, #0
1000ad10:	dc11      	bgt.n	1000ad36 <_dtoa_r+0x626>
1000ad12:	d000      	beq.n	1000ad16 <_dtoa_r+0x606>
1000ad14:	e190      	b.n	1000b038 <_dtoa_r+0x928>
1000ad16:	1c30      	adds	r0, r6, #0
1000ad18:	1c39      	adds	r1, r7, #0
1000ad1a:	2200      	movs	r2, #0
1000ad1c:	4b49      	ldr	r3, [pc, #292]	; (1000ae44 <_dtoa_r+0x734>)
1000ad1e:	f7fc ff4f 	bl	10007bc0 <__aeabi_dmul>
1000ad22:	9a06      	ldr	r2, [sp, #24]
1000ad24:	9b07      	ldr	r3, [sp, #28]
1000ad26:	f7fb fedb 	bl	10006ae0 <__aeabi_dcmpge>
1000ad2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000ad2c:	1c3e      	adds	r6, r7, #0
1000ad2e:	2800      	cmp	r0, #0
1000ad30:	d000      	beq.n	1000ad34 <_dtoa_r+0x624>
1000ad32:	e183      	b.n	1000b03c <_dtoa_r+0x92c>
1000ad34:	e18c      	b.n	1000b050 <_dtoa_r+0x940>
1000ad36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000ad38:	9c06      	ldr	r4, [sp, #24]
1000ad3a:	9d07      	ldr	r5, [sp, #28]
1000ad3c:	9304      	str	r3, [sp, #16]
1000ad3e:	1c32      	adds	r2, r6, #0
1000ad40:	1c3b      	adds	r3, r7, #0
1000ad42:	1c20      	adds	r0, r4, #0
1000ad44:	1c29      	adds	r1, r5, #0
1000ad46:	f001 fcb5 	bl	1000c6b4 <__aeabi_ddiv>
1000ad4a:	f001 ffd7 	bl	1000ccfc <__aeabi_d2iz>
1000ad4e:	9006      	str	r0, [sp, #24]
1000ad50:	f7fd fd4a 	bl	100087e8 <__aeabi_i2d>
1000ad54:	1c32      	adds	r2, r6, #0
1000ad56:	1c3b      	adds	r3, r7, #0
1000ad58:	f7fc ff32 	bl	10007bc0 <__aeabi_dmul>
1000ad5c:	1c02      	adds	r2, r0, #0
1000ad5e:	1c0b      	adds	r3, r1, #0
1000ad60:	1c20      	adds	r0, r4, #0
1000ad62:	1c29      	adds	r1, r5, #0
1000ad64:	f7fd f9c6 	bl	100080f4 <__aeabi_dsub>
1000ad68:	1c0b      	adds	r3, r1, #0
1000ad6a:	9904      	ldr	r1, [sp, #16]
1000ad6c:	1c02      	adds	r2, r0, #0
1000ad6e:	9806      	ldr	r0, [sp, #24]
1000ad70:	3101      	adds	r1, #1
1000ad72:	9104      	str	r1, [sp, #16]
1000ad74:	3030      	adds	r0, #48	; 0x30
1000ad76:	3901      	subs	r1, #1
1000ad78:	7008      	strb	r0, [r1, #0]
1000ad7a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000ad7c:	9904      	ldr	r1, [sp, #16]
1000ad7e:	1a09      	subs	r1, r1, r0
1000ad80:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ad82:	4281      	cmp	r1, r0
1000ad84:	d12e      	bne.n	1000ade4 <_dtoa_r+0x6d4>
1000ad86:	1c10      	adds	r0, r2, #0
1000ad88:	1c19      	adds	r1, r3, #0
1000ad8a:	f7fc fad7 	bl	1000733c <__aeabi_dadd>
1000ad8e:	1c32      	adds	r2, r6, #0
1000ad90:	1c3b      	adds	r3, r7, #0
1000ad92:	1c04      	adds	r4, r0, #0
1000ad94:	1c0d      	adds	r5, r1, #0
1000ad96:	f7fb fe99 	bl	10006acc <__aeabi_dcmpgt>
1000ad9a:	2800      	cmp	r0, #0
1000ad9c:	d110      	bne.n	1000adc0 <_dtoa_r+0x6b0>
1000ad9e:	1c20      	adds	r0, r4, #0
1000ada0:	1c29      	adds	r1, r5, #0
1000ada2:	1c32      	adds	r2, r6, #0
1000ada4:	1c3b      	adds	r3, r7, #0
1000ada6:	f7fb fe77 	bl	10006a98 <__aeabi_dcmpeq>
1000adaa:	2800      	cmp	r0, #0
1000adac:	d100      	bne.n	1000adb0 <_dtoa_r+0x6a0>
1000adae:	e28c      	b.n	1000b2ca <_dtoa_r+0xbba>
1000adb0:	9b06      	ldr	r3, [sp, #24]
1000adb2:	07db      	lsls	r3, r3, #31
1000adb4:	d404      	bmi.n	1000adc0 <_dtoa_r+0x6b0>
1000adb6:	e288      	b.n	1000b2ca <_dtoa_r+0xbba>
1000adb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000adba:	9303      	str	r3, [sp, #12]
1000adbc:	e000      	b.n	1000adc0 <_dtoa_r+0x6b0>
1000adbe:	9304      	str	r3, [sp, #16]
1000adc0:	9b04      	ldr	r3, [sp, #16]
1000adc2:	3b01      	subs	r3, #1
1000adc4:	781a      	ldrb	r2, [r3, #0]
1000adc6:	2a39      	cmp	r2, #57	; 0x39
1000adc8:	d108      	bne.n	1000addc <_dtoa_r+0x6cc>
1000adca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000adcc:	4293      	cmp	r3, r2
1000adce:	d1f6      	bne.n	1000adbe <_dtoa_r+0x6ae>
1000add0:	9b03      	ldr	r3, [sp, #12]
1000add2:	3301      	adds	r3, #1
1000add4:	9303      	str	r3, [sp, #12]
1000add6:	2330      	movs	r3, #48	; 0x30
1000add8:	7013      	strb	r3, [r2, #0]
1000adda:	1c13      	adds	r3, r2, #0
1000addc:	781a      	ldrb	r2, [r3, #0]
1000adde:	3201      	adds	r2, #1
1000ade0:	701a      	strb	r2, [r3, #0]
1000ade2:	e272      	b.n	1000b2ca <_dtoa_r+0xbba>
1000ade4:	1c10      	adds	r0, r2, #0
1000ade6:	1c19      	adds	r1, r3, #0
1000ade8:	2200      	movs	r2, #0
1000adea:	4b13      	ldr	r3, [pc, #76]	; (1000ae38 <_dtoa_r+0x728>)
1000adec:	f7fc fee8 	bl	10007bc0 <__aeabi_dmul>
1000adf0:	2200      	movs	r2, #0
1000adf2:	2300      	movs	r3, #0
1000adf4:	1c04      	adds	r4, r0, #0
1000adf6:	1c0d      	adds	r5, r1, #0
1000adf8:	f7fb fe4e 	bl	10006a98 <__aeabi_dcmpeq>
1000adfc:	2800      	cmp	r0, #0
1000adfe:	d09e      	beq.n	1000ad3e <_dtoa_r+0x62e>
1000ae00:	e263      	b.n	1000b2ca <_dtoa_r+0xbba>
1000ae02:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000ae04:	2a00      	cmp	r2, #0
1000ae06:	d044      	beq.n	1000ae92 <_dtoa_r+0x782>
1000ae08:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000ae0a:	2a01      	cmp	r2, #1
1000ae0c:	dc0b      	bgt.n	1000ae26 <_dtoa_r+0x716>
1000ae0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000ae10:	2a00      	cmp	r2, #0
1000ae12:	d002      	beq.n	1000ae1a <_dtoa_r+0x70a>
1000ae14:	4a0f      	ldr	r2, [pc, #60]	; (1000ae54 <_dtoa_r+0x744>)
1000ae16:	189b      	adds	r3, r3, r2
1000ae18:	e002      	b.n	1000ae20 <_dtoa_r+0x710>
1000ae1a:	2336      	movs	r3, #54	; 0x36
1000ae1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000ae1e:	1a9b      	subs	r3, r3, r2
1000ae20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1000ae22:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000ae24:	e029      	b.n	1000ae7a <_dtoa_r+0x76a>
1000ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ae28:	1e5d      	subs	r5, r3, #1
1000ae2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ae2c:	42ab      	cmp	r3, r5
1000ae2e:	db13      	blt.n	1000ae58 <_dtoa_r+0x748>
1000ae30:	1b5d      	subs	r5, r3, r5
1000ae32:	e018      	b.n	1000ae66 <_dtoa_r+0x756>
1000ae34:	3ff00000 	.word	0x3ff00000
1000ae38:	40240000 	.word	0x40240000
1000ae3c:	401c0000 	.word	0x401c0000
1000ae40:	fcc00000 	.word	0xfcc00000
1000ae44:	40140000 	.word	0x40140000
1000ae48:	7cc00000 	.word	0x7cc00000
1000ae4c:	1000d028 	.word	0x1000d028
1000ae50:	3fe00000 	.word	0x3fe00000
1000ae54:	00000433 	.word	0x00000433
1000ae58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000ae5a:	950f      	str	r5, [sp, #60]	; 0x3c
1000ae5c:	1aea      	subs	r2, r5, r3
1000ae5e:	2500      	movs	r5, #0
1000ae60:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000ae62:	189b      	adds	r3, r3, r2
1000ae64:	9312      	str	r3, [sp, #72]	; 0x48
1000ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ae68:	2b00      	cmp	r3, #0
1000ae6a:	da04      	bge.n	1000ae76 <_dtoa_r+0x766>
1000ae6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000ae6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000ae70:	1a9c      	subs	r4, r3, r2
1000ae72:	2300      	movs	r3, #0
1000ae74:	e001      	b.n	1000ae7a <_dtoa_r+0x76a>
1000ae76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ae7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000ae7c:	9808      	ldr	r0, [sp, #32]
1000ae7e:	18d2      	adds	r2, r2, r3
1000ae80:	920d      	str	r2, [sp, #52]	; 0x34
1000ae82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ae84:	2101      	movs	r1, #1
1000ae86:	18d3      	adds	r3, r2, r3
1000ae88:	930e      	str	r3, [sp, #56]	; 0x38
1000ae8a:	f000 fe89 	bl	1000bba0 <__i2b>
1000ae8e:	1c06      	adds	r6, r0, #0
1000ae90:	e002      	b.n	1000ae98 <_dtoa_r+0x788>
1000ae92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
1000ae94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000ae96:	9e10      	ldr	r6, [sp, #64]	; 0x40
1000ae98:	2c00      	cmp	r4, #0
1000ae9a:	d00c      	beq.n	1000aeb6 <_dtoa_r+0x7a6>
1000ae9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000ae9e:	2b00      	cmp	r3, #0
1000aea0:	dd09      	ble.n	1000aeb6 <_dtoa_r+0x7a6>
1000aea2:	42a3      	cmp	r3, r4
1000aea4:	dd00      	ble.n	1000aea8 <_dtoa_r+0x798>
1000aea6:	1c23      	adds	r3, r4, #0
1000aea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000aeaa:	1ae4      	subs	r4, r4, r3
1000aeac:	1ad2      	subs	r2, r2, r3
1000aeae:	920d      	str	r2, [sp, #52]	; 0x34
1000aeb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000aeb2:	1ad3      	subs	r3, r2, r3
1000aeb4:	930e      	str	r3, [sp, #56]	; 0x38
1000aeb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000aeb8:	2b00      	cmp	r3, #0
1000aeba:	dd21      	ble.n	1000af00 <_dtoa_r+0x7f0>
1000aebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000aebe:	2b00      	cmp	r3, #0
1000aec0:	d018      	beq.n	1000aef4 <_dtoa_r+0x7e4>
1000aec2:	2d00      	cmp	r5, #0
1000aec4:	dd10      	ble.n	1000aee8 <_dtoa_r+0x7d8>
1000aec6:	1c31      	adds	r1, r6, #0
1000aec8:	1c2a      	adds	r2, r5, #0
1000aeca:	9808      	ldr	r0, [sp, #32]
1000aecc:	f000 fefe 	bl	1000bccc <__pow5mult>
1000aed0:	1c06      	adds	r6, r0, #0
1000aed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000aed4:	1c31      	adds	r1, r6, #0
1000aed6:	9808      	ldr	r0, [sp, #32]
1000aed8:	f000 fe6b 	bl	1000bbb2 <__multiply>
1000aedc:	1c07      	adds	r7, r0, #0
1000aede:	990a      	ldr	r1, [sp, #40]	; 0x28
1000aee0:	9808      	ldr	r0, [sp, #32]
1000aee2:	f000 fd7e 	bl	1000b9e2 <_Bfree>
1000aee6:	970a      	str	r7, [sp, #40]	; 0x28
1000aee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000aeea:	1b5a      	subs	r2, r3, r5
1000aeec:	d008      	beq.n	1000af00 <_dtoa_r+0x7f0>
1000aeee:	9808      	ldr	r0, [sp, #32]
1000aef0:	990a      	ldr	r1, [sp, #40]	; 0x28
1000aef2:	e002      	b.n	1000aefa <_dtoa_r+0x7ea>
1000aef4:	9808      	ldr	r0, [sp, #32]
1000aef6:	990a      	ldr	r1, [sp, #40]	; 0x28
1000aef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000aefa:	f000 fee7 	bl	1000bccc <__pow5mult>
1000aefe:	900a      	str	r0, [sp, #40]	; 0x28
1000af00:	9808      	ldr	r0, [sp, #32]
1000af02:	2101      	movs	r1, #1
1000af04:	f000 fe4c 	bl	1000bba0 <__i2b>
1000af08:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000af0a:	1c07      	adds	r7, r0, #0
1000af0c:	2b00      	cmp	r3, #0
1000af0e:	dd0a      	ble.n	1000af26 <_dtoa_r+0x816>
1000af10:	1c39      	adds	r1, r7, #0
1000af12:	1c1a      	adds	r2, r3, #0
1000af14:	9808      	ldr	r0, [sp, #32]
1000af16:	f000 fed9 	bl	1000bccc <__pow5mult>
1000af1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000af1c:	1c07      	adds	r7, r0, #0
1000af1e:	2500      	movs	r5, #0
1000af20:	2b01      	cmp	r3, #1
1000af22:	dc1b      	bgt.n	1000af5c <_dtoa_r+0x84c>
1000af24:	e003      	b.n	1000af2e <_dtoa_r+0x81e>
1000af26:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000af28:	2500      	movs	r5, #0
1000af2a:	2b01      	cmp	r3, #1
1000af2c:	dc12      	bgt.n	1000af54 <_dtoa_r+0x844>
1000af2e:	2500      	movs	r5, #0
1000af30:	9b06      	ldr	r3, [sp, #24]
1000af32:	42ab      	cmp	r3, r5
1000af34:	d10e      	bne.n	1000af54 <_dtoa_r+0x844>
1000af36:	9b07      	ldr	r3, [sp, #28]
1000af38:	031b      	lsls	r3, r3, #12
1000af3a:	42ab      	cmp	r3, r5
1000af3c:	d10a      	bne.n	1000af54 <_dtoa_r+0x844>
1000af3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000af40:	9a07      	ldr	r2, [sp, #28]
1000af42:	4213      	tst	r3, r2
1000af44:	d006      	beq.n	1000af54 <_dtoa_r+0x844>
1000af46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000af48:	3501      	adds	r5, #1
1000af4a:	3301      	adds	r3, #1
1000af4c:	930d      	str	r3, [sp, #52]	; 0x34
1000af4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000af50:	3301      	adds	r3, #1
1000af52:	930e      	str	r3, [sp, #56]	; 0x38
1000af54:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000af56:	2001      	movs	r0, #1
1000af58:	2b00      	cmp	r3, #0
1000af5a:	d008      	beq.n	1000af6e <_dtoa_r+0x85e>
1000af5c:	693b      	ldr	r3, [r7, #16]
1000af5e:	3303      	adds	r3, #3
1000af60:	009b      	lsls	r3, r3, #2
1000af62:	18fb      	adds	r3, r7, r3
1000af64:	6858      	ldr	r0, [r3, #4]
1000af66:	f000 fdd1 	bl	1000bb0c <__hi0bits>
1000af6a:	2320      	movs	r3, #32
1000af6c:	1a18      	subs	r0, r3, r0
1000af6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000af70:	18c0      	adds	r0, r0, r3
1000af72:	231f      	movs	r3, #31
1000af74:	4018      	ands	r0, r3
1000af76:	d009      	beq.n	1000af8c <_dtoa_r+0x87c>
1000af78:	3301      	adds	r3, #1
1000af7a:	1a1b      	subs	r3, r3, r0
1000af7c:	2b04      	cmp	r3, #4
1000af7e:	dd02      	ble.n	1000af86 <_dtoa_r+0x876>
1000af80:	231c      	movs	r3, #28
1000af82:	1a18      	subs	r0, r3, r0
1000af84:	e003      	b.n	1000af8e <_dtoa_r+0x87e>
1000af86:	2b04      	cmp	r3, #4
1000af88:	d008      	beq.n	1000af9c <_dtoa_r+0x88c>
1000af8a:	1c18      	adds	r0, r3, #0
1000af8c:	301c      	adds	r0, #28
1000af8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000af90:	1824      	adds	r4, r4, r0
1000af92:	181b      	adds	r3, r3, r0
1000af94:	930d      	str	r3, [sp, #52]	; 0x34
1000af96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000af98:	181b      	adds	r3, r3, r0
1000af9a:	930e      	str	r3, [sp, #56]	; 0x38
1000af9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000af9e:	2b00      	cmp	r3, #0
1000afa0:	dd05      	ble.n	1000afae <_dtoa_r+0x89e>
1000afa2:	9808      	ldr	r0, [sp, #32]
1000afa4:	990a      	ldr	r1, [sp, #40]	; 0x28
1000afa6:	1c1a      	adds	r2, r3, #0
1000afa8:	f000 fee2 	bl	1000bd70 <__lshift>
1000afac:	900a      	str	r0, [sp, #40]	; 0x28
1000afae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000afb0:	2b00      	cmp	r3, #0
1000afb2:	dd05      	ble.n	1000afc0 <_dtoa_r+0x8b0>
1000afb4:	1c39      	adds	r1, r7, #0
1000afb6:	9808      	ldr	r0, [sp, #32]
1000afb8:	1c1a      	adds	r2, r3, #0
1000afba:	f000 fed9 	bl	1000bd70 <__lshift>
1000afbe:	1c07      	adds	r7, r0, #0
1000afc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000afc2:	2b00      	cmp	r3, #0
1000afc4:	d01e      	beq.n	1000b004 <_dtoa_r+0x8f4>
1000afc6:	980a      	ldr	r0, [sp, #40]	; 0x28
1000afc8:	1c39      	adds	r1, r7, #0
1000afca:	f000 ff23 	bl	1000be14 <__mcmp>
1000afce:	2800      	cmp	r0, #0
1000afd0:	da18      	bge.n	1000b004 <_dtoa_r+0x8f4>
1000afd2:	9b03      	ldr	r3, [sp, #12]
1000afd4:	9808      	ldr	r0, [sp, #32]
1000afd6:	3b01      	subs	r3, #1
1000afd8:	9303      	str	r3, [sp, #12]
1000afda:	990a      	ldr	r1, [sp, #40]	; 0x28
1000afdc:	2300      	movs	r3, #0
1000afde:	220a      	movs	r2, #10
1000afe0:	f000 fd18 	bl	1000ba14 <__multadd>
1000afe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000afe6:	900a      	str	r0, [sp, #40]	; 0x28
1000afe8:	2b00      	cmp	r3, #0
1000afea:	d100      	bne.n	1000afee <_dtoa_r+0x8de>
1000afec:	e17f      	b.n	1000b2ee <_dtoa_r+0xbde>
1000afee:	1c31      	adds	r1, r6, #0
1000aff0:	2300      	movs	r3, #0
1000aff2:	9808      	ldr	r0, [sp, #32]
1000aff4:	220a      	movs	r2, #10
1000aff6:	f000 fd0d 	bl	1000ba14 <__multadd>
1000affa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000affc:	1c06      	adds	r6, r0, #0
1000affe:	2b00      	cmp	r3, #0
1000b000:	dc3c      	bgt.n	1000b07c <_dtoa_r+0x96c>
1000b002:	e17d      	b.n	1000b300 <_dtoa_r+0xbf0>
1000b004:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b006:	2b00      	cmp	r3, #0
1000b008:	dc2e      	bgt.n	1000b068 <_dtoa_r+0x958>
1000b00a:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b00c:	2b02      	cmp	r3, #2
1000b00e:	dd2b      	ble.n	1000b068 <_dtoa_r+0x958>
1000b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b012:	930b      	str	r3, [sp, #44]	; 0x2c
1000b014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b016:	2b00      	cmp	r3, #0
1000b018:	d110      	bne.n	1000b03c <_dtoa_r+0x92c>
1000b01a:	1c39      	adds	r1, r7, #0
1000b01c:	9808      	ldr	r0, [sp, #32]
1000b01e:	2205      	movs	r2, #5
1000b020:	f000 fcf8 	bl	1000ba14 <__multadd>
1000b024:	1c07      	adds	r7, r0, #0
1000b026:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b028:	1c39      	adds	r1, r7, #0
1000b02a:	f000 fef3 	bl	1000be14 <__mcmp>
1000b02e:	2800      	cmp	r0, #0
1000b030:	dc0e      	bgt.n	1000b050 <_dtoa_r+0x940>
1000b032:	e003      	b.n	1000b03c <_dtoa_r+0x92c>
1000b034:	1c2f      	adds	r7, r5, #0
1000b036:	e000      	b.n	1000b03a <_dtoa_r+0x92a>
1000b038:	2700      	movs	r7, #0
1000b03a:	1c3e      	adds	r6, r7, #0
1000b03c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1000b03e:	43db      	mvns	r3, r3
1000b040:	9303      	str	r3, [sp, #12]
1000b042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b044:	9304      	str	r3, [sp, #16]
1000b046:	e00c      	b.n	1000b062 <_dtoa_r+0x952>
1000b048:	1c2f      	adds	r7, r5, #0
1000b04a:	1c2e      	adds	r6, r5, #0
1000b04c:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b04e:	9303      	str	r3, [sp, #12]
1000b050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b054:	3301      	adds	r3, #1
1000b056:	9304      	str	r3, [sp, #16]
1000b058:	2331      	movs	r3, #49	; 0x31
1000b05a:	7013      	strb	r3, [r2, #0]
1000b05c:	9b03      	ldr	r3, [sp, #12]
1000b05e:	3301      	adds	r3, #1
1000b060:	9303      	str	r3, [sp, #12]
1000b062:	9609      	str	r6, [sp, #36]	; 0x24
1000b064:	2600      	movs	r6, #0
1000b066:	e11a      	b.n	1000b29e <_dtoa_r+0xb8e>
1000b068:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000b06a:	2b00      	cmp	r3, #0
1000b06c:	d104      	bne.n	1000b078 <_dtoa_r+0x968>
1000b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b070:	930b      	str	r3, [sp, #44]	; 0x2c
1000b072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1000b074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000b076:	e0d0      	b.n	1000b21a <_dtoa_r+0xb0a>
1000b078:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b07a:	930b      	str	r3, [sp, #44]	; 0x2c
1000b07c:	2c00      	cmp	r4, #0
1000b07e:	dd05      	ble.n	1000b08c <_dtoa_r+0x97c>
1000b080:	1c31      	adds	r1, r6, #0
1000b082:	9808      	ldr	r0, [sp, #32]
1000b084:	1c22      	adds	r2, r4, #0
1000b086:	f000 fe73 	bl	1000bd70 <__lshift>
1000b08a:	1c06      	adds	r6, r0, #0
1000b08c:	9609      	str	r6, [sp, #36]	; 0x24
1000b08e:	2d00      	cmp	r5, #0
1000b090:	d012      	beq.n	1000b0b8 <_dtoa_r+0x9a8>
1000b092:	6871      	ldr	r1, [r6, #4]
1000b094:	9808      	ldr	r0, [sp, #32]
1000b096:	f000 fc6c 	bl	1000b972 <_Balloc>
1000b09a:	1c31      	adds	r1, r6, #0
1000b09c:	1c04      	adds	r4, r0, #0
1000b09e:	6933      	ldr	r3, [r6, #16]
1000b0a0:	310c      	adds	r1, #12
1000b0a2:	1c9a      	adds	r2, r3, #2
1000b0a4:	0092      	lsls	r2, r2, #2
1000b0a6:	300c      	adds	r0, #12
1000b0a8:	f7fd fd3a 	bl	10008b20 <memcpy>
1000b0ac:	9808      	ldr	r0, [sp, #32]
1000b0ae:	1c21      	adds	r1, r4, #0
1000b0b0:	2201      	movs	r2, #1
1000b0b2:	f000 fe5d 	bl	1000bd70 <__lshift>
1000b0b6:	9009      	str	r0, [sp, #36]	; 0x24
1000b0b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b0bc:	930e      	str	r3, [sp, #56]	; 0x38
1000b0be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b0c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000b0c2:	3b01      	subs	r3, #1
1000b0c4:	18d3      	adds	r3, r2, r3
1000b0c6:	9310      	str	r3, [sp, #64]	; 0x40
1000b0c8:	1c39      	adds	r1, r7, #0
1000b0ca:	1c20      	adds	r0, r4, #0
1000b0cc:	f7ff fa98 	bl	1000a600 <quorem>
1000b0d0:	1c03      	adds	r3, r0, #0
1000b0d2:	900f      	str	r0, [sp, #60]	; 0x3c
1000b0d4:	3330      	adds	r3, #48	; 0x30
1000b0d6:	1c31      	adds	r1, r6, #0
1000b0d8:	1c20      	adds	r0, r4, #0
1000b0da:	930d      	str	r3, [sp, #52]	; 0x34
1000b0dc:	f000 fe9a 	bl	1000be14 <__mcmp>
1000b0e0:	1c39      	adds	r1, r7, #0
1000b0e2:	900b      	str	r0, [sp, #44]	; 0x2c
1000b0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000b0e6:	9808      	ldr	r0, [sp, #32]
1000b0e8:	f000 feaf 	bl	1000be4a <__mdiff>
1000b0ec:	2301      	movs	r3, #1
1000b0ee:	9304      	str	r3, [sp, #16]
1000b0f0:	68c3      	ldr	r3, [r0, #12]
1000b0f2:	1c05      	adds	r5, r0, #0
1000b0f4:	2b00      	cmp	r3, #0
1000b0f6:	d104      	bne.n	1000b102 <_dtoa_r+0x9f2>
1000b0f8:	1c20      	adds	r0, r4, #0
1000b0fa:	1c29      	adds	r1, r5, #0
1000b0fc:	f000 fe8a 	bl	1000be14 <__mcmp>
1000b100:	9004      	str	r0, [sp, #16]
1000b102:	9808      	ldr	r0, [sp, #32]
1000b104:	1c29      	adds	r1, r5, #0
1000b106:	f000 fc6c 	bl	1000b9e2 <_Bfree>
1000b10a:	9b04      	ldr	r3, [sp, #16]
1000b10c:	9a20      	ldr	r2, [sp, #128]	; 0x80
1000b10e:	4313      	orrs	r3, r2
1000b110:	d110      	bne.n	1000b134 <_dtoa_r+0xa24>
1000b112:	9a06      	ldr	r2, [sp, #24]
1000b114:	3301      	adds	r3, #1
1000b116:	4213      	tst	r3, r2
1000b118:	d10c      	bne.n	1000b134 <_dtoa_r+0xa24>
1000b11a:	980d      	ldr	r0, [sp, #52]	; 0x34
1000b11c:	940a      	str	r4, [sp, #40]	; 0x28
1000b11e:	2839      	cmp	r0, #57	; 0x39
1000b120:	d03d      	beq.n	1000b19e <_dtoa_r+0xa8e>
1000b122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b124:	2b00      	cmp	r3, #0
1000b126:	dd01      	ble.n	1000b12c <_dtoa_r+0xa1c>
1000b128:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000b12a:	3031      	adds	r0, #49	; 0x31
1000b12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b12e:	3301      	adds	r3, #1
1000b130:	9304      	str	r3, [sp, #16]
1000b132:	e03e      	b.n	1000b1b2 <_dtoa_r+0xaa2>
1000b134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b136:	2b00      	cmp	r3, #0
1000b138:	da05      	bge.n	1000b146 <_dtoa_r+0xa36>
1000b13a:	9b04      	ldr	r3, [sp, #16]
1000b13c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000b13e:	940a      	str	r4, [sp, #40]	; 0x28
1000b140:	2b00      	cmp	r3, #0
1000b142:	dc09      	bgt.n	1000b158 <_dtoa_r+0xa48>
1000b144:	e01c      	b.n	1000b180 <_dtoa_r+0xa70>
1000b146:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000b148:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b14a:	431d      	orrs	r5, r3
1000b14c:	d11e      	bne.n	1000b18c <_dtoa_r+0xa7c>
1000b14e:	2301      	movs	r3, #1
1000b150:	9a06      	ldr	r2, [sp, #24]
1000b152:	4213      	tst	r3, r2
1000b154:	d11a      	bne.n	1000b18c <_dtoa_r+0xa7c>
1000b156:	e7f0      	b.n	1000b13a <_dtoa_r+0xa2a>
1000b158:	1c21      	adds	r1, r4, #0
1000b15a:	9808      	ldr	r0, [sp, #32]
1000b15c:	2201      	movs	r2, #1
1000b15e:	f000 fe07 	bl	1000bd70 <__lshift>
1000b162:	1c39      	adds	r1, r7, #0
1000b164:	900a      	str	r0, [sp, #40]	; 0x28
1000b166:	f000 fe55 	bl	1000be14 <__mcmp>
1000b16a:	2800      	cmp	r0, #0
1000b16c:	dc03      	bgt.n	1000b176 <_dtoa_r+0xa66>
1000b16e:	d107      	bne.n	1000b180 <_dtoa_r+0xa70>
1000b170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b172:	07db      	lsls	r3, r3, #31
1000b174:	d504      	bpl.n	1000b180 <_dtoa_r+0xa70>
1000b176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b178:	2b39      	cmp	r3, #57	; 0x39
1000b17a:	d010      	beq.n	1000b19e <_dtoa_r+0xa8e>
1000b17c:	1c1d      	adds	r5, r3, #0
1000b17e:	3501      	adds	r5, #1
1000b180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b182:	3301      	adds	r3, #1
1000b184:	9304      	str	r3, [sp, #16]
1000b186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b188:	701d      	strb	r5, [r3, #0]
1000b18a:	e088      	b.n	1000b29e <_dtoa_r+0xb8e>
1000b18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b18e:	1c5d      	adds	r5, r3, #1
1000b190:	9b04      	ldr	r3, [sp, #16]
1000b192:	2b00      	cmp	r3, #0
1000b194:	dd10      	ble.n	1000b1b8 <_dtoa_r+0xaa8>
1000b196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b198:	940a      	str	r4, [sp, #40]	; 0x28
1000b19a:	2b39      	cmp	r3, #57	; 0x39
1000b19c:	d106      	bne.n	1000b1ac <_dtoa_r+0xa9c>
1000b19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b1a2:	3301      	adds	r3, #1
1000b1a4:	9304      	str	r3, [sp, #16]
1000b1a6:	2339      	movs	r3, #57	; 0x39
1000b1a8:	7013      	strb	r3, [r2, #0]
1000b1aa:	e060      	b.n	1000b26e <_dtoa_r+0xb5e>
1000b1ac:	980d      	ldr	r0, [sp, #52]	; 0x34
1000b1ae:	9504      	str	r5, [sp, #16]
1000b1b0:	3001      	adds	r0, #1
1000b1b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1b4:	7018      	strb	r0, [r3, #0]
1000b1b6:	e072      	b.n	1000b29e <_dtoa_r+0xb8e>
1000b1b8:	466a      	mov	r2, sp
1000b1ba:	2134      	movs	r1, #52	; 0x34
1000b1bc:	1852      	adds	r2, r2, r1
1000b1be:	7812      	ldrb	r2, [r2, #0]
1000b1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b1c2:	9504      	str	r5, [sp, #16]
1000b1c4:	701a      	strb	r2, [r3, #0]
1000b1c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000b1c8:	4293      	cmp	r3, r2
1000b1ca:	d03f      	beq.n	1000b24c <_dtoa_r+0xb3c>
1000b1cc:	1c21      	adds	r1, r4, #0
1000b1ce:	220a      	movs	r2, #10
1000b1d0:	2300      	movs	r3, #0
1000b1d2:	9808      	ldr	r0, [sp, #32]
1000b1d4:	f000 fc1e 	bl	1000ba14 <__multadd>
1000b1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b1da:	1c04      	adds	r4, r0, #0
1000b1dc:	1c31      	adds	r1, r6, #0
1000b1de:	9808      	ldr	r0, [sp, #32]
1000b1e0:	220a      	movs	r2, #10
1000b1e2:	429e      	cmp	r6, r3
1000b1e4:	d105      	bne.n	1000b1f2 <_dtoa_r+0xae2>
1000b1e6:	2300      	movs	r3, #0
1000b1e8:	f000 fc14 	bl	1000ba14 <__multadd>
1000b1ec:	1c06      	adds	r6, r0, #0
1000b1ee:	9009      	str	r0, [sp, #36]	; 0x24
1000b1f0:	e00a      	b.n	1000b208 <_dtoa_r+0xaf8>
1000b1f2:	2300      	movs	r3, #0
1000b1f4:	f000 fc0e 	bl	1000ba14 <__multadd>
1000b1f8:	9909      	ldr	r1, [sp, #36]	; 0x24
1000b1fa:	1c06      	adds	r6, r0, #0
1000b1fc:	220a      	movs	r2, #10
1000b1fe:	9808      	ldr	r0, [sp, #32]
1000b200:	2300      	movs	r3, #0
1000b202:	f000 fc07 	bl	1000ba14 <__multadd>
1000b206:	9009      	str	r0, [sp, #36]	; 0x24
1000b208:	950e      	str	r5, [sp, #56]	; 0x38
1000b20a:	e75d      	b.n	1000b0c8 <_dtoa_r+0x9b8>
1000b20c:	1c21      	adds	r1, r4, #0
1000b20e:	9808      	ldr	r0, [sp, #32]
1000b210:	220a      	movs	r2, #10
1000b212:	2300      	movs	r3, #0
1000b214:	f000 fbfe 	bl	1000ba14 <__multadd>
1000b218:	1c04      	adds	r4, r0, #0
1000b21a:	1c20      	adds	r0, r4, #0
1000b21c:	1c39      	adds	r1, r7, #0
1000b21e:	f7ff f9ef 	bl	1000a600 <quorem>
1000b222:	2234      	movs	r2, #52	; 0x34
1000b224:	466b      	mov	r3, sp
1000b226:	3030      	adds	r0, #48	; 0x30
1000b228:	189b      	adds	r3, r3, r2
1000b22a:	900d      	str	r0, [sp, #52]	; 0x34
1000b22c:	781b      	ldrb	r3, [r3, #0]
1000b22e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000b230:	702b      	strb	r3, [r5, #0]
1000b232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000b234:	3501      	adds	r5, #1
1000b236:	1aeb      	subs	r3, r5, r3
1000b238:	4293      	cmp	r3, r2
1000b23a:	dbe7      	blt.n	1000b20c <_dtoa_r+0xafc>
1000b23c:	1e13      	subs	r3, r2, #0
1000b23e:	dc00      	bgt.n	1000b242 <_dtoa_r+0xb32>
1000b240:	2301      	movs	r3, #1
1000b242:	9609      	str	r6, [sp, #36]	; 0x24
1000b244:	2600      	movs	r6, #0
1000b246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b248:	18d3      	adds	r3, r2, r3
1000b24a:	9304      	str	r3, [sp, #16]
1000b24c:	1c21      	adds	r1, r4, #0
1000b24e:	9808      	ldr	r0, [sp, #32]
1000b250:	2201      	movs	r2, #1
1000b252:	f000 fd8d 	bl	1000bd70 <__lshift>
1000b256:	1c39      	adds	r1, r7, #0
1000b258:	900a      	str	r0, [sp, #40]	; 0x28
1000b25a:	f000 fddb 	bl	1000be14 <__mcmp>
1000b25e:	2800      	cmp	r0, #0
1000b260:	dc05      	bgt.n	1000b26e <_dtoa_r+0xb5e>
1000b262:	d115      	bne.n	1000b290 <_dtoa_r+0xb80>
1000b264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b266:	07db      	lsls	r3, r3, #31
1000b268:	d401      	bmi.n	1000b26e <_dtoa_r+0xb5e>
1000b26a:	e011      	b.n	1000b290 <_dtoa_r+0xb80>
1000b26c:	9304      	str	r3, [sp, #16]
1000b26e:	9b04      	ldr	r3, [sp, #16]
1000b270:	3b01      	subs	r3, #1
1000b272:	781a      	ldrb	r2, [r3, #0]
1000b274:	2a39      	cmp	r2, #57	; 0x39
1000b276:	d108      	bne.n	1000b28a <_dtoa_r+0xb7a>
1000b278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000b27a:	4293      	cmp	r3, r2
1000b27c:	d1f6      	bne.n	1000b26c <_dtoa_r+0xb5c>
1000b27e:	9b03      	ldr	r3, [sp, #12]
1000b280:	3301      	adds	r3, #1
1000b282:	9303      	str	r3, [sp, #12]
1000b284:	2331      	movs	r3, #49	; 0x31
1000b286:	7013      	strb	r3, [r2, #0]
1000b288:	e009      	b.n	1000b29e <_dtoa_r+0xb8e>
1000b28a:	3201      	adds	r2, #1
1000b28c:	701a      	strb	r2, [r3, #0]
1000b28e:	e006      	b.n	1000b29e <_dtoa_r+0xb8e>
1000b290:	9b04      	ldr	r3, [sp, #16]
1000b292:	3b01      	subs	r3, #1
1000b294:	781a      	ldrb	r2, [r3, #0]
1000b296:	2a30      	cmp	r2, #48	; 0x30
1000b298:	d101      	bne.n	1000b29e <_dtoa_r+0xb8e>
1000b29a:	9304      	str	r3, [sp, #16]
1000b29c:	e7f8      	b.n	1000b290 <_dtoa_r+0xb80>
1000b29e:	9808      	ldr	r0, [sp, #32]
1000b2a0:	1c39      	adds	r1, r7, #0
1000b2a2:	f000 fb9e 	bl	1000b9e2 <_Bfree>
1000b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b2a8:	2b00      	cmp	r3, #0
1000b2aa:	d00e      	beq.n	1000b2ca <_dtoa_r+0xbba>
1000b2ac:	2e00      	cmp	r6, #0
1000b2ae:	d005      	beq.n	1000b2bc <_dtoa_r+0xbac>
1000b2b0:	429e      	cmp	r6, r3
1000b2b2:	d003      	beq.n	1000b2bc <_dtoa_r+0xbac>
1000b2b4:	9808      	ldr	r0, [sp, #32]
1000b2b6:	1c31      	adds	r1, r6, #0
1000b2b8:	f000 fb93 	bl	1000b9e2 <_Bfree>
1000b2bc:	9808      	ldr	r0, [sp, #32]
1000b2be:	9909      	ldr	r1, [sp, #36]	; 0x24
1000b2c0:	f000 fb8f 	bl	1000b9e2 <_Bfree>
1000b2c4:	e001      	b.n	1000b2ca <_dtoa_r+0xbba>
1000b2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b2c8:	9303      	str	r3, [sp, #12]
1000b2ca:	9808      	ldr	r0, [sp, #32]
1000b2cc:	990a      	ldr	r1, [sp, #40]	; 0x28
1000b2ce:	f000 fb88 	bl	1000b9e2 <_Bfree>
1000b2d2:	2300      	movs	r3, #0
1000b2d4:	9a04      	ldr	r2, [sp, #16]
1000b2d6:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b2d8:	7013      	strb	r3, [r2, #0]
1000b2da:	9b03      	ldr	r3, [sp, #12]
1000b2dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
1000b2de:	3301      	adds	r3, #1
1000b2e0:	6013      	str	r3, [r2, #0]
1000b2e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1000b2e4:	2b00      	cmp	r3, #0
1000b2e6:	d010      	beq.n	1000b30a <_dtoa_r+0xbfa>
1000b2e8:	9a04      	ldr	r2, [sp, #16]
1000b2ea:	601a      	str	r2, [r3, #0]
1000b2ec:	e00d      	b.n	1000b30a <_dtoa_r+0xbfa>
1000b2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b2f0:	2b00      	cmp	r3, #0
1000b2f2:	dd00      	ble.n	1000b2f6 <_dtoa_r+0xbe6>
1000b2f4:	e6bd      	b.n	1000b072 <_dtoa_r+0x962>
1000b2f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b2f8:	2b02      	cmp	r3, #2
1000b2fa:	dd00      	ble.n	1000b2fe <_dtoa_r+0xbee>
1000b2fc:	e68a      	b.n	1000b014 <_dtoa_r+0x904>
1000b2fe:	e6b8      	b.n	1000b072 <_dtoa_r+0x962>
1000b300:	9b20      	ldr	r3, [sp, #128]	; 0x80
1000b302:	2b02      	cmp	r3, #2
1000b304:	dd00      	ble.n	1000b308 <_dtoa_r+0xbf8>
1000b306:	e685      	b.n	1000b014 <_dtoa_r+0x904>
1000b308:	e6b8      	b.n	1000b07c <_dtoa_r+0x96c>
1000b30a:	b01b      	add	sp, #108	; 0x6c
1000b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b30e:	46c0      	nop			; (mov r8, r8)

1000b310 <rshift>:
1000b310:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b312:	1c06      	adds	r6, r0, #0
1000b314:	6905      	ldr	r5, [r0, #16]
1000b316:	3614      	adds	r6, #20
1000b318:	114a      	asrs	r2, r1, #5
1000b31a:	1c34      	adds	r4, r6, #0
1000b31c:	42aa      	cmp	r2, r5
1000b31e:	da25      	bge.n	1000b36c <rshift+0x5c>
1000b320:	231f      	movs	r3, #31
1000b322:	00ad      	lsls	r5, r5, #2
1000b324:	0092      	lsls	r2, r2, #2
1000b326:	4019      	ands	r1, r3
1000b328:	1975      	adds	r5, r6, r5
1000b32a:	18b2      	adds	r2, r6, r2
1000b32c:	1c33      	adds	r3, r6, #0
1000b32e:	2900      	cmp	r1, #0
1000b330:	d016      	beq.n	1000b360 <rshift+0x50>
1000b332:	1c13      	adds	r3, r2, #0
1000b334:	cb04      	ldmia	r3!, {r2}
1000b336:	2720      	movs	r7, #32
1000b338:	40ca      	lsrs	r2, r1
1000b33a:	46b4      	mov	ip, r6
1000b33c:	1a7f      	subs	r7, r7, r1
1000b33e:	4664      	mov	r4, ip
1000b340:	42ab      	cmp	r3, r5
1000b342:	d208      	bcs.n	1000b356 <rshift+0x46>
1000b344:	681c      	ldr	r4, [r3, #0]
1000b346:	40bc      	lsls	r4, r7
1000b348:	4322      	orrs	r2, r4
1000b34a:	4664      	mov	r4, ip
1000b34c:	c404      	stmia	r4!, {r2}
1000b34e:	cb04      	ldmia	r3!, {r2}
1000b350:	46a4      	mov	ip, r4
1000b352:	40ca      	lsrs	r2, r1
1000b354:	e7f3      	b.n	1000b33e <rshift+0x2e>
1000b356:	6022      	str	r2, [r4, #0]
1000b358:	2a00      	cmp	r2, #0
1000b35a:	d007      	beq.n	1000b36c <rshift+0x5c>
1000b35c:	3404      	adds	r4, #4
1000b35e:	e005      	b.n	1000b36c <rshift+0x5c>
1000b360:	1c1c      	adds	r4, r3, #0
1000b362:	42aa      	cmp	r2, r5
1000b364:	d202      	bcs.n	1000b36c <rshift+0x5c>
1000b366:	ca02      	ldmia	r2!, {r1}
1000b368:	c302      	stmia	r3!, {r1}
1000b36a:	e7f9      	b.n	1000b360 <rshift+0x50>
1000b36c:	1ba3      	subs	r3, r4, r6
1000b36e:	109b      	asrs	r3, r3, #2
1000b370:	6103      	str	r3, [r0, #16]
1000b372:	d100      	bne.n	1000b376 <rshift+0x66>
1000b374:	6143      	str	r3, [r0, #20]
1000b376:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b378 <__hexdig_fun>:
1000b378:	1c03      	adds	r3, r0, #0
1000b37a:	3b30      	subs	r3, #48	; 0x30
1000b37c:	2b09      	cmp	r3, #9
1000b37e:	d801      	bhi.n	1000b384 <__hexdig_fun+0xc>
1000b380:	3820      	subs	r0, #32
1000b382:	e00b      	b.n	1000b39c <__hexdig_fun+0x24>
1000b384:	1c03      	adds	r3, r0, #0
1000b386:	3b61      	subs	r3, #97	; 0x61
1000b388:	2b05      	cmp	r3, #5
1000b38a:	d801      	bhi.n	1000b390 <__hexdig_fun+0x18>
1000b38c:	3847      	subs	r0, #71	; 0x47
1000b38e:	e005      	b.n	1000b39c <__hexdig_fun+0x24>
1000b390:	1c02      	adds	r2, r0, #0
1000b392:	3a41      	subs	r2, #65	; 0x41
1000b394:	2300      	movs	r3, #0
1000b396:	2a05      	cmp	r2, #5
1000b398:	d801      	bhi.n	1000b39e <__hexdig_fun+0x26>
1000b39a:	3827      	subs	r0, #39	; 0x27
1000b39c:	b2c3      	uxtb	r3, r0
1000b39e:	1c18      	adds	r0, r3, #0
1000b3a0:	4770      	bx	lr

1000b3a2 <__gethex>:
1000b3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3a4:	b08d      	sub	sp, #52	; 0x34
1000b3a6:	9109      	str	r1, [sp, #36]	; 0x24
1000b3a8:	9202      	str	r2, [sp, #8]
1000b3aa:	930a      	str	r3, [sp, #40]	; 0x28
1000b3ac:	9005      	str	r0, [sp, #20]
1000b3ae:	f000 fac7 	bl	1000b940 <_localeconv_r>
1000b3b2:	6803      	ldr	r3, [r0, #0]
1000b3b4:	1c18      	adds	r0, r3, #0
1000b3b6:	9307      	str	r3, [sp, #28]
1000b3b8:	f7fe fa46 	bl	10009848 <strlen>
1000b3bc:	9b07      	ldr	r3, [sp, #28]
1000b3be:	9004      	str	r0, [sp, #16]
1000b3c0:	181b      	adds	r3, r3, r0
1000b3c2:	3b01      	subs	r3, #1
1000b3c4:	781b      	ldrb	r3, [r3, #0]
1000b3c6:	930b      	str	r3, [sp, #44]	; 0x2c
1000b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b3ca:	6819      	ldr	r1, [r3, #0]
1000b3cc:	1c8a      	adds	r2, r1, #2
1000b3ce:	9201      	str	r2, [sp, #4]
1000b3d0:	9801      	ldr	r0, [sp, #4]
1000b3d2:	1a53      	subs	r3, r2, r1
1000b3d4:	7800      	ldrb	r0, [r0, #0]
1000b3d6:	3b02      	subs	r3, #2
1000b3d8:	3201      	adds	r2, #1
1000b3da:	2830      	cmp	r0, #48	; 0x30
1000b3dc:	d0f7      	beq.n	1000b3ce <__gethex+0x2c>
1000b3de:	9308      	str	r3, [sp, #32]
1000b3e0:	f7ff ffca 	bl	1000b378 <__hexdig_fun>
1000b3e4:	1e06      	subs	r6, r0, #0
1000b3e6:	d120      	bne.n	1000b42a <__gethex+0x88>
1000b3e8:	9801      	ldr	r0, [sp, #4]
1000b3ea:	9907      	ldr	r1, [sp, #28]
1000b3ec:	9a04      	ldr	r2, [sp, #16]
1000b3ee:	f001 f8d7 	bl	1000c5a0 <strncmp>
1000b3f2:	2800      	cmp	r0, #0
1000b3f4:	d13c      	bne.n	1000b470 <__gethex+0xce>
1000b3f6:	9b01      	ldr	r3, [sp, #4]
1000b3f8:	9a04      	ldr	r2, [sp, #16]
1000b3fa:	189c      	adds	r4, r3, r2
1000b3fc:	7820      	ldrb	r0, [r4, #0]
1000b3fe:	f7ff ffbb 	bl	1000b378 <__hexdig_fun>
1000b402:	2800      	cmp	r0, #0
1000b404:	d037      	beq.n	1000b476 <__gethex+0xd4>
1000b406:	9401      	str	r4, [sp, #4]
1000b408:	9b01      	ldr	r3, [sp, #4]
1000b40a:	7818      	ldrb	r0, [r3, #0]
1000b40c:	2830      	cmp	r0, #48	; 0x30
1000b40e:	d103      	bne.n	1000b418 <__gethex+0x76>
1000b410:	9b01      	ldr	r3, [sp, #4]
1000b412:	3301      	adds	r3, #1
1000b414:	9301      	str	r3, [sp, #4]
1000b416:	e7f7      	b.n	1000b408 <__gethex+0x66>
1000b418:	f7ff ffae 	bl	1000b378 <__hexdig_fun>
1000b41c:	4243      	negs	r3, r0
1000b41e:	4143      	adcs	r3, r0
1000b420:	9303      	str	r3, [sp, #12]
1000b422:	2301      	movs	r3, #1
1000b424:	1c26      	adds	r6, r4, #0
1000b426:	9308      	str	r3, [sp, #32]
1000b428:	e002      	b.n	1000b430 <__gethex+0x8e>
1000b42a:	2300      	movs	r3, #0
1000b42c:	1c1e      	adds	r6, r3, #0
1000b42e:	9303      	str	r3, [sp, #12]
1000b430:	9c01      	ldr	r4, [sp, #4]
1000b432:	7820      	ldrb	r0, [r4, #0]
1000b434:	f7ff ffa0 	bl	1000b378 <__hexdig_fun>
1000b438:	2800      	cmp	r0, #0
1000b43a:	d001      	beq.n	1000b440 <__gethex+0x9e>
1000b43c:	3401      	adds	r4, #1
1000b43e:	e7f8      	b.n	1000b432 <__gethex+0x90>
1000b440:	1c20      	adds	r0, r4, #0
1000b442:	9907      	ldr	r1, [sp, #28]
1000b444:	9a04      	ldr	r2, [sp, #16]
1000b446:	f001 f8ab 	bl	1000c5a0 <strncmp>
1000b44a:	2800      	cmp	r0, #0
1000b44c:	d10b      	bne.n	1000b466 <__gethex+0xc4>
1000b44e:	2e00      	cmp	r6, #0
1000b450:	d10b      	bne.n	1000b46a <__gethex+0xc8>
1000b452:	9b04      	ldr	r3, [sp, #16]
1000b454:	18e6      	adds	r6, r4, r3
1000b456:	1c34      	adds	r4, r6, #0
1000b458:	7820      	ldrb	r0, [r4, #0]
1000b45a:	f7ff ff8d 	bl	1000b378 <__hexdig_fun>
1000b45e:	2800      	cmp	r0, #0
1000b460:	d001      	beq.n	1000b466 <__gethex+0xc4>
1000b462:	3401      	adds	r4, #1
1000b464:	e7f8      	b.n	1000b458 <__gethex+0xb6>
1000b466:	1e37      	subs	r7, r6, #0
1000b468:	d008      	beq.n	1000b47c <__gethex+0xda>
1000b46a:	1b36      	subs	r6, r6, r4
1000b46c:	00b7      	lsls	r7, r6, #2
1000b46e:	e005      	b.n	1000b47c <__gethex+0xda>
1000b470:	9c01      	ldr	r4, [sp, #4]
1000b472:	1c37      	adds	r7, r6, #0
1000b474:	e000      	b.n	1000b478 <__gethex+0xd6>
1000b476:	1c07      	adds	r7, r0, #0
1000b478:	2301      	movs	r3, #1
1000b47a:	9303      	str	r3, [sp, #12]
1000b47c:	7823      	ldrb	r3, [r4, #0]
1000b47e:	2b50      	cmp	r3, #80	; 0x50
1000b480:	d001      	beq.n	1000b486 <__gethex+0xe4>
1000b482:	2b70      	cmp	r3, #112	; 0x70
1000b484:	d128      	bne.n	1000b4d8 <__gethex+0x136>
1000b486:	7863      	ldrb	r3, [r4, #1]
1000b488:	2b2b      	cmp	r3, #43	; 0x2b
1000b48a:	d007      	beq.n	1000b49c <__gethex+0xfa>
1000b48c:	2b2d      	cmp	r3, #45	; 0x2d
1000b48e:	d003      	beq.n	1000b498 <__gethex+0xf6>
1000b490:	2300      	movs	r3, #0
1000b492:	1c65      	adds	r5, r4, #1
1000b494:	9306      	str	r3, [sp, #24]
1000b496:	e004      	b.n	1000b4a2 <__gethex+0x100>
1000b498:	2301      	movs	r3, #1
1000b49a:	e000      	b.n	1000b49e <__gethex+0xfc>
1000b49c:	2300      	movs	r3, #0
1000b49e:	9306      	str	r3, [sp, #24]
1000b4a0:	1ca5      	adds	r5, r4, #2
1000b4a2:	7828      	ldrb	r0, [r5, #0]
1000b4a4:	f7ff ff68 	bl	1000b378 <__hexdig_fun>
1000b4a8:	1e43      	subs	r3, r0, #1
1000b4aa:	b2db      	uxtb	r3, r3
1000b4ac:	2b18      	cmp	r3, #24
1000b4ae:	d813      	bhi.n	1000b4d8 <__gethex+0x136>
1000b4b0:	3810      	subs	r0, #16
1000b4b2:	3501      	adds	r5, #1
1000b4b4:	1c06      	adds	r6, r0, #0
1000b4b6:	7828      	ldrb	r0, [r5, #0]
1000b4b8:	f7ff ff5e 	bl	1000b378 <__hexdig_fun>
1000b4bc:	1e43      	subs	r3, r0, #1
1000b4be:	b2db      	uxtb	r3, r3
1000b4c0:	2b18      	cmp	r3, #24
1000b4c2:	d803      	bhi.n	1000b4cc <__gethex+0x12a>
1000b4c4:	230a      	movs	r3, #10
1000b4c6:	435e      	muls	r6, r3
1000b4c8:	1830      	adds	r0, r6, r0
1000b4ca:	e7f1      	b.n	1000b4b0 <__gethex+0x10e>
1000b4cc:	9b06      	ldr	r3, [sp, #24]
1000b4ce:	2b00      	cmp	r3, #0
1000b4d0:	d000      	beq.n	1000b4d4 <__gethex+0x132>
1000b4d2:	4276      	negs	r6, r6
1000b4d4:	19bf      	adds	r7, r7, r6
1000b4d6:	e000      	b.n	1000b4da <__gethex+0x138>
1000b4d8:	1c25      	adds	r5, r4, #0
1000b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b4dc:	601d      	str	r5, [r3, #0]
1000b4de:	9b03      	ldr	r3, [sp, #12]
1000b4e0:	2b00      	cmp	r3, #0
1000b4e2:	d006      	beq.n	1000b4f2 <__gethex+0x150>
1000b4e4:	2000      	movs	r0, #0
1000b4e6:	9b08      	ldr	r3, [sp, #32]
1000b4e8:	4283      	cmp	r3, r0
1000b4ea:	d000      	beq.n	1000b4ee <__gethex+0x14c>
1000b4ec:	e17b      	b.n	1000b7e6 <__gethex+0x444>
1000b4ee:	3006      	adds	r0, #6
1000b4f0:	e179      	b.n	1000b7e6 <__gethex+0x444>
1000b4f2:	9b01      	ldr	r3, [sp, #4]
1000b4f4:	9903      	ldr	r1, [sp, #12]
1000b4f6:	1ae3      	subs	r3, r4, r3
1000b4f8:	3b01      	subs	r3, #1
1000b4fa:	2b07      	cmp	r3, #7
1000b4fc:	dd02      	ble.n	1000b504 <__gethex+0x162>
1000b4fe:	3101      	adds	r1, #1
1000b500:	105b      	asrs	r3, r3, #1
1000b502:	e7fa      	b.n	1000b4fa <__gethex+0x158>
1000b504:	9805      	ldr	r0, [sp, #20]
1000b506:	f000 fa34 	bl	1000b972 <_Balloc>
1000b50a:	1c03      	adds	r3, r0, #0
1000b50c:	2600      	movs	r6, #0
1000b50e:	1c05      	adds	r5, r0, #0
1000b510:	3314      	adds	r3, #20
1000b512:	9303      	str	r3, [sp, #12]
1000b514:	9308      	str	r3, [sp, #32]
1000b516:	9606      	str	r6, [sp, #24]
1000b518:	9b01      	ldr	r3, [sp, #4]
1000b51a:	429c      	cmp	r4, r3
1000b51c:	d92a      	bls.n	1000b574 <__gethex+0x1d2>
1000b51e:	1e63      	subs	r3, r4, #1
1000b520:	9309      	str	r3, [sp, #36]	; 0x24
1000b522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000b524:	781b      	ldrb	r3, [r3, #0]
1000b526:	4293      	cmp	r3, r2
1000b528:	d009      	beq.n	1000b53e <__gethex+0x19c>
1000b52a:	9b06      	ldr	r3, [sp, #24]
1000b52c:	2b20      	cmp	r3, #32
1000b52e:	d114      	bne.n	1000b55a <__gethex+0x1b8>
1000b530:	9b08      	ldr	r3, [sp, #32]
1000b532:	601e      	str	r6, [r3, #0]
1000b534:	2600      	movs	r6, #0
1000b536:	3304      	adds	r3, #4
1000b538:	9308      	str	r3, [sp, #32]
1000b53a:	9606      	str	r6, [sp, #24]
1000b53c:	e00d      	b.n	1000b55a <__gethex+0x1b8>
1000b53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b540:	9a04      	ldr	r2, [sp, #16]
1000b542:	1a9c      	subs	r4, r3, r2
1000b544:	9b01      	ldr	r3, [sp, #4]
1000b546:	3401      	adds	r4, #1
1000b548:	429c      	cmp	r4, r3
1000b54a:	d3ee      	bcc.n	1000b52a <__gethex+0x188>
1000b54c:	1c20      	adds	r0, r4, #0
1000b54e:	9907      	ldr	r1, [sp, #28]
1000b550:	f001 f826 	bl	1000c5a0 <strncmp>
1000b554:	2800      	cmp	r0, #0
1000b556:	d0df      	beq.n	1000b518 <__gethex+0x176>
1000b558:	e7e7      	b.n	1000b52a <__gethex+0x188>
1000b55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b55c:	7818      	ldrb	r0, [r3, #0]
1000b55e:	f7ff ff0b 	bl	1000b378 <__hexdig_fun>
1000b562:	230f      	movs	r3, #15
1000b564:	4018      	ands	r0, r3
1000b566:	9b06      	ldr	r3, [sp, #24]
1000b568:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000b56a:	4098      	lsls	r0, r3
1000b56c:	3304      	adds	r3, #4
1000b56e:	4306      	orrs	r6, r0
1000b570:	9306      	str	r3, [sp, #24]
1000b572:	e7d1      	b.n	1000b518 <__gethex+0x176>
1000b574:	9c08      	ldr	r4, [sp, #32]
1000b576:	9b03      	ldr	r3, [sp, #12]
1000b578:	c440      	stmia	r4!, {r6}
1000b57a:	1ae4      	subs	r4, r4, r3
1000b57c:	10a4      	asrs	r4, r4, #2
1000b57e:	612c      	str	r4, [r5, #16]
1000b580:	1c30      	adds	r0, r6, #0
1000b582:	f000 fac3 	bl	1000bb0c <__hi0bits>
1000b586:	9b02      	ldr	r3, [sp, #8]
1000b588:	0164      	lsls	r4, r4, #5
1000b58a:	681b      	ldr	r3, [r3, #0]
1000b58c:	1a26      	subs	r6, r4, r0
1000b58e:	9301      	str	r3, [sp, #4]
1000b590:	429e      	cmp	r6, r3
1000b592:	dd25      	ble.n	1000b5e0 <__gethex+0x23e>
1000b594:	1af6      	subs	r6, r6, r3
1000b596:	1c28      	adds	r0, r5, #0
1000b598:	1c31      	adds	r1, r6, #0
1000b59a:	f000 fdcb 	bl	1000c134 <__any_on>
1000b59e:	2400      	movs	r4, #0
1000b5a0:	42a0      	cmp	r0, r4
1000b5a2:	d017      	beq.n	1000b5d4 <__gethex+0x232>
1000b5a4:	231f      	movs	r3, #31
1000b5a6:	3401      	adds	r4, #1
1000b5a8:	1c20      	adds	r0, r4, #0
1000b5aa:	1e72      	subs	r2, r6, #1
1000b5ac:	4013      	ands	r3, r2
1000b5ae:	4098      	lsls	r0, r3
1000b5b0:	1c03      	adds	r3, r0, #0
1000b5b2:	1151      	asrs	r1, r2, #5
1000b5b4:	9803      	ldr	r0, [sp, #12]
1000b5b6:	0089      	lsls	r1, r1, #2
1000b5b8:	5809      	ldr	r1, [r1, r0]
1000b5ba:	4219      	tst	r1, r3
1000b5bc:	d00a      	beq.n	1000b5d4 <__gethex+0x232>
1000b5be:	42a2      	cmp	r2, r4
1000b5c0:	dc01      	bgt.n	1000b5c6 <__gethex+0x224>
1000b5c2:	2402      	movs	r4, #2
1000b5c4:	e006      	b.n	1000b5d4 <__gethex+0x232>
1000b5c6:	1eb1      	subs	r1, r6, #2
1000b5c8:	1c28      	adds	r0, r5, #0
1000b5ca:	f000 fdb3 	bl	1000c134 <__any_on>
1000b5ce:	2800      	cmp	r0, #0
1000b5d0:	d0f7      	beq.n	1000b5c2 <__gethex+0x220>
1000b5d2:	2403      	movs	r4, #3
1000b5d4:	1c28      	adds	r0, r5, #0
1000b5d6:	1c31      	adds	r1, r6, #0
1000b5d8:	f7ff fe9a 	bl	1000b310 <rshift>
1000b5dc:	19bf      	adds	r7, r7, r6
1000b5de:	e00e      	b.n	1000b5fe <__gethex+0x25c>
1000b5e0:	9b01      	ldr	r3, [sp, #4]
1000b5e2:	2400      	movs	r4, #0
1000b5e4:	429e      	cmp	r6, r3
1000b5e6:	da0a      	bge.n	1000b5fe <__gethex+0x25c>
1000b5e8:	1b9e      	subs	r6, r3, r6
1000b5ea:	1c29      	adds	r1, r5, #0
1000b5ec:	9805      	ldr	r0, [sp, #20]
1000b5ee:	1c32      	adds	r2, r6, #0
1000b5f0:	f000 fbbe 	bl	1000bd70 <__lshift>
1000b5f4:	1c03      	adds	r3, r0, #0
1000b5f6:	1c05      	adds	r5, r0, #0
1000b5f8:	3314      	adds	r3, #20
1000b5fa:	1bbf      	subs	r7, r7, r6
1000b5fc:	9303      	str	r3, [sp, #12]
1000b5fe:	9b02      	ldr	r3, [sp, #8]
1000b600:	689b      	ldr	r3, [r3, #8]
1000b602:	9304      	str	r3, [sp, #16]
1000b604:	429f      	cmp	r7, r3
1000b606:	dd08      	ble.n	1000b61a <__gethex+0x278>
1000b608:	9805      	ldr	r0, [sp, #20]
1000b60a:	1c29      	adds	r1, r5, #0
1000b60c:	f000 f9e9 	bl	1000b9e2 <_Bfree>
1000b610:	2300      	movs	r3, #0
1000b612:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000b614:	20a3      	movs	r0, #163	; 0xa3
1000b616:	6013      	str	r3, [r2, #0]
1000b618:	e0e5      	b.n	1000b7e6 <__gethex+0x444>
1000b61a:	9b02      	ldr	r3, [sp, #8]
1000b61c:	685e      	ldr	r6, [r3, #4]
1000b61e:	42b7      	cmp	r7, r6
1000b620:	da5a      	bge.n	1000b6d8 <__gethex+0x336>
1000b622:	9b01      	ldr	r3, [sp, #4]
1000b624:	1bf6      	subs	r6, r6, r7
1000b626:	429e      	cmp	r6, r3
1000b628:	db32      	blt.n	1000b690 <__gethex+0x2ee>
1000b62a:	9b02      	ldr	r3, [sp, #8]
1000b62c:	68db      	ldr	r3, [r3, #12]
1000b62e:	2b02      	cmp	r3, #2
1000b630:	d01e      	beq.n	1000b670 <__gethex+0x2ce>
1000b632:	2b03      	cmp	r3, #3
1000b634:	d020      	beq.n	1000b678 <__gethex+0x2d6>
1000b636:	2b01      	cmp	r3, #1
1000b638:	d121      	bne.n	1000b67e <__gethex+0x2dc>
1000b63a:	9b01      	ldr	r3, [sp, #4]
1000b63c:	429e      	cmp	r6, r3
1000b63e:	d11e      	bne.n	1000b67e <__gethex+0x2dc>
1000b640:	2b01      	cmp	r3, #1
1000b642:	dc0d      	bgt.n	1000b660 <__gethex+0x2be>
1000b644:	9b02      	ldr	r3, [sp, #8]
1000b646:	2062      	movs	r0, #98	; 0x62
1000b648:	685b      	ldr	r3, [r3, #4]
1000b64a:	9301      	str	r3, [sp, #4]
1000b64c:	9a01      	ldr	r2, [sp, #4]
1000b64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000b650:	601a      	str	r2, [r3, #0]
1000b652:	2301      	movs	r3, #1
1000b654:	9a03      	ldr	r2, [sp, #12]
1000b656:	612b      	str	r3, [r5, #16]
1000b658:	6013      	str	r3, [r2, #0]
1000b65a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b65c:	601d      	str	r5, [r3, #0]
1000b65e:	e0c2      	b.n	1000b7e6 <__gethex+0x444>
1000b660:	9901      	ldr	r1, [sp, #4]
1000b662:	1c28      	adds	r0, r5, #0
1000b664:	3901      	subs	r1, #1
1000b666:	f000 fd65 	bl	1000c134 <__any_on>
1000b66a:	2800      	cmp	r0, #0
1000b66c:	d1ea      	bne.n	1000b644 <__gethex+0x2a2>
1000b66e:	e006      	b.n	1000b67e <__gethex+0x2dc>
1000b670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b672:	2b00      	cmp	r3, #0
1000b674:	d0e6      	beq.n	1000b644 <__gethex+0x2a2>
1000b676:	e002      	b.n	1000b67e <__gethex+0x2dc>
1000b678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b67a:	2b00      	cmp	r3, #0
1000b67c:	d1e2      	bne.n	1000b644 <__gethex+0x2a2>
1000b67e:	9805      	ldr	r0, [sp, #20]
1000b680:	1c29      	adds	r1, r5, #0
1000b682:	f000 f9ae 	bl	1000b9e2 <_Bfree>
1000b686:	2300      	movs	r3, #0
1000b688:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000b68a:	2050      	movs	r0, #80	; 0x50
1000b68c:	6013      	str	r3, [r2, #0]
1000b68e:	e0aa      	b.n	1000b7e6 <__gethex+0x444>
1000b690:	1e77      	subs	r7, r6, #1
1000b692:	2c00      	cmp	r4, #0
1000b694:	d107      	bne.n	1000b6a6 <__gethex+0x304>
1000b696:	2f00      	cmp	r7, #0
1000b698:	dd06      	ble.n	1000b6a8 <__gethex+0x306>
1000b69a:	1c28      	adds	r0, r5, #0
1000b69c:	1c39      	adds	r1, r7, #0
1000b69e:	f000 fd49 	bl	1000c134 <__any_on>
1000b6a2:	1c04      	adds	r4, r0, #0
1000b6a4:	e000      	b.n	1000b6a8 <__gethex+0x306>
1000b6a6:	2401      	movs	r4, #1
1000b6a8:	231f      	movs	r3, #31
1000b6aa:	117a      	asrs	r2, r7, #5
1000b6ac:	401f      	ands	r7, r3
1000b6ae:	3b1e      	subs	r3, #30
1000b6b0:	40bb      	lsls	r3, r7
1000b6b2:	1c1f      	adds	r7, r3, #0
1000b6b4:	9b03      	ldr	r3, [sp, #12]
1000b6b6:	0092      	lsls	r2, r2, #2
1000b6b8:	58d3      	ldr	r3, [r2, r3]
1000b6ba:	423b      	tst	r3, r7
1000b6bc:	d001      	beq.n	1000b6c2 <__gethex+0x320>
1000b6be:	2302      	movs	r3, #2
1000b6c0:	431c      	orrs	r4, r3
1000b6c2:	9b01      	ldr	r3, [sp, #4]
1000b6c4:	1c31      	adds	r1, r6, #0
1000b6c6:	1b9b      	subs	r3, r3, r6
1000b6c8:	1c28      	adds	r0, r5, #0
1000b6ca:	9301      	str	r3, [sp, #4]
1000b6cc:	f7ff fe20 	bl	1000b310 <rshift>
1000b6d0:	9b02      	ldr	r3, [sp, #8]
1000b6d2:	2602      	movs	r6, #2
1000b6d4:	685f      	ldr	r7, [r3, #4]
1000b6d6:	e000      	b.n	1000b6da <__gethex+0x338>
1000b6d8:	2601      	movs	r6, #1
1000b6da:	2c00      	cmp	r4, #0
1000b6dc:	d07e      	beq.n	1000b7dc <__gethex+0x43a>
1000b6de:	9b02      	ldr	r3, [sp, #8]
1000b6e0:	68db      	ldr	r3, [r3, #12]
1000b6e2:	2b02      	cmp	r3, #2
1000b6e4:	d00b      	beq.n	1000b6fe <__gethex+0x35c>
1000b6e6:	2b03      	cmp	r3, #3
1000b6e8:	d00d      	beq.n	1000b706 <__gethex+0x364>
1000b6ea:	2b01      	cmp	r3, #1
1000b6ec:	d174      	bne.n	1000b7d8 <__gethex+0x436>
1000b6ee:	07a2      	lsls	r2, r4, #30
1000b6f0:	d572      	bpl.n	1000b7d8 <__gethex+0x436>
1000b6f2:	9a03      	ldr	r2, [sp, #12]
1000b6f4:	6812      	ldr	r2, [r2, #0]
1000b6f6:	4314      	orrs	r4, r2
1000b6f8:	421c      	tst	r4, r3
1000b6fa:	d107      	bne.n	1000b70c <__gethex+0x36a>
1000b6fc:	e06c      	b.n	1000b7d8 <__gethex+0x436>
1000b6fe:	2301      	movs	r3, #1
1000b700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000b702:	1a9b      	subs	r3, r3, r2
1000b704:	9313      	str	r3, [sp, #76]	; 0x4c
1000b706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b708:	2b00      	cmp	r3, #0
1000b70a:	d065      	beq.n	1000b7d8 <__gethex+0x436>
1000b70c:	692c      	ldr	r4, [r5, #16]
1000b70e:	00a3      	lsls	r3, r4, #2
1000b710:	9303      	str	r3, [sp, #12]
1000b712:	1c2b      	adds	r3, r5, #0
1000b714:	9a03      	ldr	r2, [sp, #12]
1000b716:	3314      	adds	r3, #20
1000b718:	1899      	adds	r1, r3, r2
1000b71a:	681a      	ldr	r2, [r3, #0]
1000b71c:	1c50      	adds	r0, r2, #1
1000b71e:	d002      	beq.n	1000b726 <__gethex+0x384>
1000b720:	3201      	adds	r2, #1
1000b722:	601a      	str	r2, [r3, #0]
1000b724:	e021      	b.n	1000b76a <__gethex+0x3c8>
1000b726:	2200      	movs	r2, #0
1000b728:	c304      	stmia	r3!, {r2}
1000b72a:	4299      	cmp	r1, r3
1000b72c:	d8f5      	bhi.n	1000b71a <__gethex+0x378>
1000b72e:	68ab      	ldr	r3, [r5, #8]
1000b730:	429c      	cmp	r4, r3
1000b732:	db12      	blt.n	1000b75a <__gethex+0x3b8>
1000b734:	686b      	ldr	r3, [r5, #4]
1000b736:	9805      	ldr	r0, [sp, #20]
1000b738:	1c59      	adds	r1, r3, #1
1000b73a:	f000 f91a 	bl	1000b972 <_Balloc>
1000b73e:	1c29      	adds	r1, r5, #0
1000b740:	692b      	ldr	r3, [r5, #16]
1000b742:	9004      	str	r0, [sp, #16]
1000b744:	1c9a      	adds	r2, r3, #2
1000b746:	310c      	adds	r1, #12
1000b748:	0092      	lsls	r2, r2, #2
1000b74a:	300c      	adds	r0, #12
1000b74c:	f7fd f9e8 	bl	10008b20 <memcpy>
1000b750:	1c29      	adds	r1, r5, #0
1000b752:	9805      	ldr	r0, [sp, #20]
1000b754:	f000 f945 	bl	1000b9e2 <_Bfree>
1000b758:	9d04      	ldr	r5, [sp, #16]
1000b75a:	692b      	ldr	r3, [r5, #16]
1000b75c:	1c5a      	adds	r2, r3, #1
1000b75e:	612a      	str	r2, [r5, #16]
1000b760:	2201      	movs	r2, #1
1000b762:	3304      	adds	r3, #4
1000b764:	009b      	lsls	r3, r3, #2
1000b766:	18eb      	adds	r3, r5, r3
1000b768:	605a      	str	r2, [r3, #4]
1000b76a:	1c2b      	adds	r3, r5, #0
1000b76c:	3314      	adds	r3, #20
1000b76e:	2e02      	cmp	r6, #2
1000b770:	d111      	bne.n	1000b796 <__gethex+0x3f4>
1000b772:	9a02      	ldr	r2, [sp, #8]
1000b774:	9901      	ldr	r1, [sp, #4]
1000b776:	6812      	ldr	r2, [r2, #0]
1000b778:	3a01      	subs	r2, #1
1000b77a:	4291      	cmp	r1, r2
1000b77c:	d12a      	bne.n	1000b7d4 <__gethex+0x432>
1000b77e:	114a      	asrs	r2, r1, #5
1000b780:	211f      	movs	r1, #31
1000b782:	9801      	ldr	r0, [sp, #4]
1000b784:	0092      	lsls	r2, r2, #2
1000b786:	4001      	ands	r1, r0
1000b788:	2001      	movs	r0, #1
1000b78a:	1c04      	adds	r4, r0, #0
1000b78c:	408c      	lsls	r4, r1
1000b78e:	58d3      	ldr	r3, [r2, r3]
1000b790:	4223      	tst	r3, r4
1000b792:	d01f      	beq.n	1000b7d4 <__gethex+0x432>
1000b794:	e00c      	b.n	1000b7b0 <__gethex+0x40e>
1000b796:	692a      	ldr	r2, [r5, #16]
1000b798:	42a2      	cmp	r2, r4
1000b79a:	dd0b      	ble.n	1000b7b4 <__gethex+0x412>
1000b79c:	1c28      	adds	r0, r5, #0
1000b79e:	2101      	movs	r1, #1
1000b7a0:	f7ff fdb6 	bl	1000b310 <rshift>
1000b7a4:	9b02      	ldr	r3, [sp, #8]
1000b7a6:	3701      	adds	r7, #1
1000b7a8:	689b      	ldr	r3, [r3, #8]
1000b7aa:	429f      	cmp	r7, r3
1000b7ac:	dd00      	ble.n	1000b7b0 <__gethex+0x40e>
1000b7ae:	e72b      	b.n	1000b608 <__gethex+0x266>
1000b7b0:	2601      	movs	r6, #1
1000b7b2:	e00f      	b.n	1000b7d4 <__gethex+0x432>
1000b7b4:	241f      	movs	r4, #31
1000b7b6:	9a01      	ldr	r2, [sp, #4]
1000b7b8:	2601      	movs	r6, #1
1000b7ba:	4022      	ands	r2, r4
1000b7bc:	1e14      	subs	r4, r2, #0
1000b7be:	d009      	beq.n	1000b7d4 <__gethex+0x432>
1000b7c0:	9a03      	ldr	r2, [sp, #12]
1000b7c2:	189b      	adds	r3, r3, r2
1000b7c4:	3b04      	subs	r3, #4
1000b7c6:	6818      	ldr	r0, [r3, #0]
1000b7c8:	f000 f9a0 	bl	1000bb0c <__hi0bits>
1000b7cc:	2120      	movs	r1, #32
1000b7ce:	1b0c      	subs	r4, r1, r4
1000b7d0:	42a0      	cmp	r0, r4
1000b7d2:	dbe3      	blt.n	1000b79c <__gethex+0x3fa>
1000b7d4:	2320      	movs	r3, #32
1000b7d6:	e000      	b.n	1000b7da <__gethex+0x438>
1000b7d8:	2310      	movs	r3, #16
1000b7da:	431e      	orrs	r6, r3
1000b7dc:	1c30      	adds	r0, r6, #0
1000b7de:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b7e0:	601d      	str	r5, [r3, #0]
1000b7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000b7e4:	601f      	str	r7, [r3, #0]
1000b7e6:	b00d      	add	sp, #52	; 0x34
1000b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b7ea <L_shift>:
1000b7ea:	2308      	movs	r3, #8
1000b7ec:	b570      	push	{r4, r5, r6, lr}
1000b7ee:	2520      	movs	r5, #32
1000b7f0:	1a9a      	subs	r2, r3, r2
1000b7f2:	0092      	lsls	r2, r2, #2
1000b7f4:	1aad      	subs	r5, r5, r2
1000b7f6:	6843      	ldr	r3, [r0, #4]
1000b7f8:	6806      	ldr	r6, [r0, #0]
1000b7fa:	1c1c      	adds	r4, r3, #0
1000b7fc:	40ac      	lsls	r4, r5
1000b7fe:	40d3      	lsrs	r3, r2
1000b800:	4334      	orrs	r4, r6
1000b802:	6004      	str	r4, [r0, #0]
1000b804:	6043      	str	r3, [r0, #4]
1000b806:	3004      	adds	r0, #4
1000b808:	4288      	cmp	r0, r1
1000b80a:	d3f4      	bcc.n	1000b7f6 <L_shift+0xc>
1000b80c:	bd70      	pop	{r4, r5, r6, pc}

1000b80e <__hexnan>:
1000b80e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b810:	b089      	sub	sp, #36	; 0x24
1000b812:	9200      	str	r2, [sp, #0]
1000b814:	680a      	ldr	r2, [r1, #0]
1000b816:	9900      	ldr	r1, [sp, #0]
1000b818:	1153      	asrs	r3, r2, #5
1000b81a:	009b      	lsls	r3, r3, #2
1000b81c:	18cb      	adds	r3, r1, r3
1000b81e:	9302      	str	r3, [sp, #8]
1000b820:	231f      	movs	r3, #31
1000b822:	401a      	ands	r2, r3
1000b824:	9007      	str	r0, [sp, #28]
1000b826:	9205      	str	r2, [sp, #20]
1000b828:	d002      	beq.n	1000b830 <__hexnan+0x22>
1000b82a:	9b02      	ldr	r3, [sp, #8]
1000b82c:	3304      	adds	r3, #4
1000b82e:	9302      	str	r3, [sp, #8]
1000b830:	9b02      	ldr	r3, [sp, #8]
1000b832:	2500      	movs	r5, #0
1000b834:	1f1e      	subs	r6, r3, #4
1000b836:	1c37      	adds	r7, r6, #0
1000b838:	1c34      	adds	r4, r6, #0
1000b83a:	9b07      	ldr	r3, [sp, #28]
1000b83c:	6035      	str	r5, [r6, #0]
1000b83e:	681b      	ldr	r3, [r3, #0]
1000b840:	9506      	str	r5, [sp, #24]
1000b842:	9303      	str	r3, [sp, #12]
1000b844:	9501      	str	r5, [sp, #4]
1000b846:	9b03      	ldr	r3, [sp, #12]
1000b848:	3301      	adds	r3, #1
1000b84a:	9303      	str	r3, [sp, #12]
1000b84c:	781b      	ldrb	r3, [r3, #0]
1000b84e:	9304      	str	r3, [sp, #16]
1000b850:	2b00      	cmp	r3, #0
1000b852:	d03b      	beq.n	1000b8cc <__hexnan+0xbe>
1000b854:	9804      	ldr	r0, [sp, #16]
1000b856:	f7ff fd8f 	bl	1000b378 <__hexdig_fun>
1000b85a:	2800      	cmp	r0, #0
1000b85c:	d122      	bne.n	1000b8a4 <__hexnan+0x96>
1000b85e:	9b04      	ldr	r3, [sp, #16]
1000b860:	2b20      	cmp	r3, #32
1000b862:	d817      	bhi.n	1000b894 <__hexnan+0x86>
1000b864:	9b06      	ldr	r3, [sp, #24]
1000b866:	9a01      	ldr	r2, [sp, #4]
1000b868:	4293      	cmp	r3, r2
1000b86a:	daec      	bge.n	1000b846 <__hexnan+0x38>
1000b86c:	42bc      	cmp	r4, r7
1000b86e:	d206      	bcs.n	1000b87e <__hexnan+0x70>
1000b870:	2d07      	cmp	r5, #7
1000b872:	dc04      	bgt.n	1000b87e <__hexnan+0x70>
1000b874:	1c20      	adds	r0, r4, #0
1000b876:	1c39      	adds	r1, r7, #0
1000b878:	1c2a      	adds	r2, r5, #0
1000b87a:	f7ff ffb6 	bl	1000b7ea <L_shift>
1000b87e:	9b00      	ldr	r3, [sp, #0]
1000b880:	2508      	movs	r5, #8
1000b882:	429c      	cmp	r4, r3
1000b884:	d9df      	bls.n	1000b846 <__hexnan+0x38>
1000b886:	2500      	movs	r5, #0
1000b888:	9b01      	ldr	r3, [sp, #4]
1000b88a:	1f27      	subs	r7, r4, #4
1000b88c:	603d      	str	r5, [r7, #0]
1000b88e:	9306      	str	r3, [sp, #24]
1000b890:	1c3c      	adds	r4, r7, #0
1000b892:	e7d8      	b.n	1000b846 <__hexnan+0x38>
1000b894:	9b04      	ldr	r3, [sp, #16]
1000b896:	2b29      	cmp	r3, #41	; 0x29
1000b898:	d14c      	bne.n	1000b934 <__hexnan+0x126>
1000b89a:	9b03      	ldr	r3, [sp, #12]
1000b89c:	9a07      	ldr	r2, [sp, #28]
1000b89e:	3301      	adds	r3, #1
1000b8a0:	6013      	str	r3, [r2, #0]
1000b8a2:	e013      	b.n	1000b8cc <__hexnan+0xbe>
1000b8a4:	9b01      	ldr	r3, [sp, #4]
1000b8a6:	3501      	adds	r5, #1
1000b8a8:	3301      	adds	r3, #1
1000b8aa:	9301      	str	r3, [sp, #4]
1000b8ac:	2d08      	cmp	r5, #8
1000b8ae:	dd06      	ble.n	1000b8be <__hexnan+0xb0>
1000b8b0:	9b00      	ldr	r3, [sp, #0]
1000b8b2:	429c      	cmp	r4, r3
1000b8b4:	d9c7      	bls.n	1000b846 <__hexnan+0x38>
1000b8b6:	2300      	movs	r3, #0
1000b8b8:	2501      	movs	r5, #1
1000b8ba:	3c04      	subs	r4, #4
1000b8bc:	6023      	str	r3, [r4, #0]
1000b8be:	6823      	ldr	r3, [r4, #0]
1000b8c0:	011a      	lsls	r2, r3, #4
1000b8c2:	230f      	movs	r3, #15
1000b8c4:	4018      	ands	r0, r3
1000b8c6:	4310      	orrs	r0, r2
1000b8c8:	6020      	str	r0, [r4, #0]
1000b8ca:	e7bc      	b.n	1000b846 <__hexnan+0x38>
1000b8cc:	9b01      	ldr	r3, [sp, #4]
1000b8ce:	2b00      	cmp	r3, #0
1000b8d0:	d030      	beq.n	1000b934 <__hexnan+0x126>
1000b8d2:	42bc      	cmp	r4, r7
1000b8d4:	d206      	bcs.n	1000b8e4 <__hexnan+0xd6>
1000b8d6:	2d07      	cmp	r5, #7
1000b8d8:	dc04      	bgt.n	1000b8e4 <__hexnan+0xd6>
1000b8da:	1c20      	adds	r0, r4, #0
1000b8dc:	1c39      	adds	r1, r7, #0
1000b8de:	1c2a      	adds	r2, r5, #0
1000b8e0:	f7ff ff83 	bl	1000b7ea <L_shift>
1000b8e4:	9b00      	ldr	r3, [sp, #0]
1000b8e6:	429c      	cmp	r4, r3
1000b8e8:	d90a      	bls.n	1000b900 <__hexnan+0xf2>
1000b8ea:	3304      	adds	r3, #4
1000b8ec:	cc02      	ldmia	r4!, {r1}
1000b8ee:	1f1a      	subs	r2, r3, #4
1000b8f0:	6011      	str	r1, [r2, #0]
1000b8f2:	42a6      	cmp	r6, r4
1000b8f4:	d2f9      	bcs.n	1000b8ea <__hexnan+0xdc>
1000b8f6:	2200      	movs	r2, #0
1000b8f8:	c304      	stmia	r3!, {r2}
1000b8fa:	429e      	cmp	r6, r3
1000b8fc:	d2fb      	bcs.n	1000b8f6 <__hexnan+0xe8>
1000b8fe:	e00e      	b.n	1000b91e <__hexnan+0x110>
1000b900:	9b05      	ldr	r3, [sp, #20]
1000b902:	2b00      	cmp	r3, #0
1000b904:	d00b      	beq.n	1000b91e <__hexnan+0x110>
1000b906:	2220      	movs	r2, #32
1000b908:	9905      	ldr	r1, [sp, #20]
1000b90a:	9b02      	ldr	r3, [sp, #8]
1000b90c:	1a52      	subs	r2, r2, r1
1000b90e:	2101      	movs	r1, #1
1000b910:	4249      	negs	r1, r1
1000b912:	40d1      	lsrs	r1, r2
1000b914:	1c0a      	adds	r2, r1, #0
1000b916:	3b04      	subs	r3, #4
1000b918:	6819      	ldr	r1, [r3, #0]
1000b91a:	400a      	ands	r2, r1
1000b91c:	601a      	str	r2, [r3, #0]
1000b91e:	6833      	ldr	r3, [r6, #0]
1000b920:	2b00      	cmp	r3, #0
1000b922:	d109      	bne.n	1000b938 <__hexnan+0x12a>
1000b924:	9b00      	ldr	r3, [sp, #0]
1000b926:	429e      	cmp	r6, r3
1000b928:	d102      	bne.n	1000b930 <__hexnan+0x122>
1000b92a:	2301      	movs	r3, #1
1000b92c:	6033      	str	r3, [r6, #0]
1000b92e:	e003      	b.n	1000b938 <__hexnan+0x12a>
1000b930:	3e04      	subs	r6, #4
1000b932:	e7f4      	b.n	1000b91e <__hexnan+0x110>
1000b934:	2004      	movs	r0, #4
1000b936:	e000      	b.n	1000b93a <__hexnan+0x12c>
1000b938:	2005      	movs	r0, #5
1000b93a:	b009      	add	sp, #36	; 0x24
1000b93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1000b940 <_localeconv_r>:
1000b940:	4800      	ldr	r0, [pc, #0]	; (1000b944 <_localeconv_r+0x4>)
1000b942:	4770      	bx	lr
1000b944:	20000718 	.word	0x20000718

1000b948 <malloc>:
1000b948:	b508      	push	{r3, lr}
1000b94a:	4b03      	ldr	r3, [pc, #12]	; (1000b958 <malloc+0x10>)
1000b94c:	1c01      	adds	r1, r0, #0
1000b94e:	6818      	ldr	r0, [r3, #0]
1000b950:	f000 fc66 	bl	1000c220 <_malloc_r>
1000b954:	bd08      	pop	{r3, pc}
1000b956:	46c0      	nop			; (mov r8, r8)
1000b958:	20000710 	.word	0x20000710

1000b95c <memchr>:
1000b95c:	b2c9      	uxtb	r1, r1
1000b95e:	1882      	adds	r2, r0, r2
1000b960:	4290      	cmp	r0, r2
1000b962:	d004      	beq.n	1000b96e <memchr+0x12>
1000b964:	7803      	ldrb	r3, [r0, #0]
1000b966:	428b      	cmp	r3, r1
1000b968:	d002      	beq.n	1000b970 <memchr+0x14>
1000b96a:	3001      	adds	r0, #1
1000b96c:	e7f8      	b.n	1000b960 <memchr+0x4>
1000b96e:	2000      	movs	r0, #0
1000b970:	4770      	bx	lr

1000b972 <_Balloc>:
1000b972:	b570      	push	{r4, r5, r6, lr}
1000b974:	6a46      	ldr	r6, [r0, #36]	; 0x24
1000b976:	1c04      	adds	r4, r0, #0
1000b978:	1c0d      	adds	r5, r1, #0
1000b97a:	2e00      	cmp	r6, #0
1000b97c:	d107      	bne.n	1000b98e <_Balloc+0x1c>
1000b97e:	2010      	movs	r0, #16
1000b980:	f7ff ffe2 	bl	1000b948 <malloc>
1000b984:	6260      	str	r0, [r4, #36]	; 0x24
1000b986:	6046      	str	r6, [r0, #4]
1000b988:	6086      	str	r6, [r0, #8]
1000b98a:	6006      	str	r6, [r0, #0]
1000b98c:	60c6      	str	r6, [r0, #12]
1000b98e:	6a66      	ldr	r6, [r4, #36]	; 0x24
1000b990:	68f3      	ldr	r3, [r6, #12]
1000b992:	2b00      	cmp	r3, #0
1000b994:	d009      	beq.n	1000b9aa <_Balloc+0x38>
1000b996:	6a62      	ldr	r2, [r4, #36]	; 0x24
1000b998:	00ab      	lsls	r3, r5, #2
1000b99a:	68d2      	ldr	r2, [r2, #12]
1000b99c:	18d3      	adds	r3, r2, r3
1000b99e:	6818      	ldr	r0, [r3, #0]
1000b9a0:	2800      	cmp	r0, #0
1000b9a2:	d00e      	beq.n	1000b9c2 <_Balloc+0x50>
1000b9a4:	6802      	ldr	r2, [r0, #0]
1000b9a6:	601a      	str	r2, [r3, #0]
1000b9a8:	e017      	b.n	1000b9da <_Balloc+0x68>
1000b9aa:	1c20      	adds	r0, r4, #0
1000b9ac:	2104      	movs	r1, #4
1000b9ae:	2221      	movs	r2, #33	; 0x21
1000b9b0:	f000 fbe1 	bl	1000c176 <_calloc_r>
1000b9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000b9b6:	60f0      	str	r0, [r6, #12]
1000b9b8:	68db      	ldr	r3, [r3, #12]
1000b9ba:	2b00      	cmp	r3, #0
1000b9bc:	d1eb      	bne.n	1000b996 <_Balloc+0x24>
1000b9be:	2000      	movs	r0, #0
1000b9c0:	e00e      	b.n	1000b9e0 <_Balloc+0x6e>
1000b9c2:	2101      	movs	r1, #1
1000b9c4:	1c0e      	adds	r6, r1, #0
1000b9c6:	40ae      	lsls	r6, r5
1000b9c8:	1d72      	adds	r2, r6, #5
1000b9ca:	0092      	lsls	r2, r2, #2
1000b9cc:	1c20      	adds	r0, r4, #0
1000b9ce:	f000 fbd2 	bl	1000c176 <_calloc_r>
1000b9d2:	2800      	cmp	r0, #0
1000b9d4:	d0f3      	beq.n	1000b9be <_Balloc+0x4c>
1000b9d6:	6045      	str	r5, [r0, #4]
1000b9d8:	6086      	str	r6, [r0, #8]
1000b9da:	2300      	movs	r3, #0
1000b9dc:	6103      	str	r3, [r0, #16]
1000b9de:	60c3      	str	r3, [r0, #12]
1000b9e0:	bd70      	pop	{r4, r5, r6, pc}

1000b9e2 <_Bfree>:
1000b9e2:	b570      	push	{r4, r5, r6, lr}
1000b9e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
1000b9e6:	1c06      	adds	r6, r0, #0
1000b9e8:	1c0c      	adds	r4, r1, #0
1000b9ea:	2d00      	cmp	r5, #0
1000b9ec:	d107      	bne.n	1000b9fe <_Bfree+0x1c>
1000b9ee:	2010      	movs	r0, #16
1000b9f0:	f7ff ffaa 	bl	1000b948 <malloc>
1000b9f4:	6270      	str	r0, [r6, #36]	; 0x24
1000b9f6:	6045      	str	r5, [r0, #4]
1000b9f8:	6085      	str	r5, [r0, #8]
1000b9fa:	6005      	str	r5, [r0, #0]
1000b9fc:	60c5      	str	r5, [r0, #12]
1000b9fe:	2c00      	cmp	r4, #0
1000ba00:	d007      	beq.n	1000ba12 <_Bfree+0x30>
1000ba02:	6a72      	ldr	r2, [r6, #36]	; 0x24
1000ba04:	6863      	ldr	r3, [r4, #4]
1000ba06:	68d2      	ldr	r2, [r2, #12]
1000ba08:	009b      	lsls	r3, r3, #2
1000ba0a:	18d3      	adds	r3, r2, r3
1000ba0c:	681a      	ldr	r2, [r3, #0]
1000ba0e:	6022      	str	r2, [r4, #0]
1000ba10:	601c      	str	r4, [r3, #0]
1000ba12:	bd70      	pop	{r4, r5, r6, pc}

1000ba14 <__multadd>:
1000ba14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ba16:	1c1e      	adds	r6, r3, #0
1000ba18:	2314      	movs	r3, #20
1000ba1a:	469c      	mov	ip, r3
1000ba1c:	1c07      	adds	r7, r0, #0
1000ba1e:	1c0c      	adds	r4, r1, #0
1000ba20:	2000      	movs	r0, #0
1000ba22:	690d      	ldr	r5, [r1, #16]
1000ba24:	448c      	add	ip, r1
1000ba26:	4663      	mov	r3, ip
1000ba28:	8819      	ldrh	r1, [r3, #0]
1000ba2a:	681b      	ldr	r3, [r3, #0]
1000ba2c:	4351      	muls	r1, r2
1000ba2e:	0c1b      	lsrs	r3, r3, #16
1000ba30:	4353      	muls	r3, r2
1000ba32:	1989      	adds	r1, r1, r6
1000ba34:	0c0e      	lsrs	r6, r1, #16
1000ba36:	18f3      	adds	r3, r6, r3
1000ba38:	b289      	uxth	r1, r1
1000ba3a:	0c1e      	lsrs	r6, r3, #16
1000ba3c:	041b      	lsls	r3, r3, #16
1000ba3e:	185b      	adds	r3, r3, r1
1000ba40:	4661      	mov	r1, ip
1000ba42:	3001      	adds	r0, #1
1000ba44:	c108      	stmia	r1!, {r3}
1000ba46:	468c      	mov	ip, r1
1000ba48:	42a8      	cmp	r0, r5
1000ba4a:	dbec      	blt.n	1000ba26 <__multadd+0x12>
1000ba4c:	2e00      	cmp	r6, #0
1000ba4e:	d01b      	beq.n	1000ba88 <__multadd+0x74>
1000ba50:	68a3      	ldr	r3, [r4, #8]
1000ba52:	429d      	cmp	r5, r3
1000ba54:	db12      	blt.n	1000ba7c <__multadd+0x68>
1000ba56:	6863      	ldr	r3, [r4, #4]
1000ba58:	1c38      	adds	r0, r7, #0
1000ba5a:	1c59      	adds	r1, r3, #1
1000ba5c:	f7ff ff89 	bl	1000b972 <_Balloc>
1000ba60:	1c21      	adds	r1, r4, #0
1000ba62:	6923      	ldr	r3, [r4, #16]
1000ba64:	9001      	str	r0, [sp, #4]
1000ba66:	1c9a      	adds	r2, r3, #2
1000ba68:	310c      	adds	r1, #12
1000ba6a:	0092      	lsls	r2, r2, #2
1000ba6c:	300c      	adds	r0, #12
1000ba6e:	f7fd f857 	bl	10008b20 <memcpy>
1000ba72:	1c21      	adds	r1, r4, #0
1000ba74:	1c38      	adds	r0, r7, #0
1000ba76:	f7ff ffb4 	bl	1000b9e2 <_Bfree>
1000ba7a:	9c01      	ldr	r4, [sp, #4]
1000ba7c:	1d2b      	adds	r3, r5, #4
1000ba7e:	009b      	lsls	r3, r3, #2
1000ba80:	18e3      	adds	r3, r4, r3
1000ba82:	3501      	adds	r5, #1
1000ba84:	605e      	str	r6, [r3, #4]
1000ba86:	6125      	str	r5, [r4, #16]
1000ba88:	1c20      	adds	r0, r4, #0
1000ba8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000ba8c <__s2b>:
1000ba8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ba8e:	1c06      	adds	r6, r0, #0
1000ba90:	1c18      	adds	r0, r3, #0
1000ba92:	1c0c      	adds	r4, r1, #0
1000ba94:	3008      	adds	r0, #8
1000ba96:	2109      	movs	r1, #9
1000ba98:	9301      	str	r3, [sp, #4]
1000ba9a:	1c15      	adds	r5, r2, #0
1000ba9c:	f7fa fefa 	bl	10006894 <__aeabi_idiv>
1000baa0:	2301      	movs	r3, #1
1000baa2:	2100      	movs	r1, #0
1000baa4:	4298      	cmp	r0, r3
1000baa6:	dd02      	ble.n	1000baae <__s2b+0x22>
1000baa8:	005b      	lsls	r3, r3, #1
1000baaa:	3101      	adds	r1, #1
1000baac:	e7fa      	b.n	1000baa4 <__s2b+0x18>
1000baae:	1c30      	adds	r0, r6, #0
1000bab0:	f7ff ff5f 	bl	1000b972 <_Balloc>
1000bab4:	9b08      	ldr	r3, [sp, #32]
1000bab6:	1c01      	adds	r1, r0, #0
1000bab8:	6143      	str	r3, [r0, #20]
1000baba:	2301      	movs	r3, #1
1000babc:	6103      	str	r3, [r0, #16]
1000babe:	2d09      	cmp	r5, #9
1000bac0:	dd12      	ble.n	1000bae8 <__s2b+0x5c>
1000bac2:	1c23      	adds	r3, r4, #0
1000bac4:	3309      	adds	r3, #9
1000bac6:	1c1f      	adds	r7, r3, #0
1000bac8:	9300      	str	r3, [sp, #0]
1000baca:	1964      	adds	r4, r4, r5
1000bacc:	783b      	ldrb	r3, [r7, #0]
1000bace:	1c30      	adds	r0, r6, #0
1000bad0:	3b30      	subs	r3, #48	; 0x30
1000bad2:	220a      	movs	r2, #10
1000bad4:	f7ff ff9e 	bl	1000ba14 <__multadd>
1000bad8:	3701      	adds	r7, #1
1000bada:	1c01      	adds	r1, r0, #0
1000badc:	42a7      	cmp	r7, r4
1000bade:	d1f5      	bne.n	1000bacc <__s2b+0x40>
1000bae0:	9b00      	ldr	r3, [sp, #0]
1000bae2:	195c      	adds	r4, r3, r5
1000bae4:	3c08      	subs	r4, #8
1000bae6:	e001      	b.n	1000baec <__s2b+0x60>
1000bae8:	2509      	movs	r5, #9
1000baea:	340a      	adds	r4, #10
1000baec:	1c2f      	adds	r7, r5, #0
1000baee:	9b01      	ldr	r3, [sp, #4]
1000baf0:	429f      	cmp	r7, r3
1000baf2:	da09      	bge.n	1000bb08 <__s2b+0x7c>
1000baf4:	1b63      	subs	r3, r4, r5
1000baf6:	5ddb      	ldrb	r3, [r3, r7]
1000baf8:	1c30      	adds	r0, r6, #0
1000bafa:	3b30      	subs	r3, #48	; 0x30
1000bafc:	220a      	movs	r2, #10
1000bafe:	f7ff ff89 	bl	1000ba14 <__multadd>
1000bb02:	3701      	adds	r7, #1
1000bb04:	1c01      	adds	r1, r0, #0
1000bb06:	e7f2      	b.n	1000baee <__s2b+0x62>
1000bb08:	1c08      	adds	r0, r1, #0
1000bb0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1000bb0c <__hi0bits>:
1000bb0c:	2200      	movs	r2, #0
1000bb0e:	1c03      	adds	r3, r0, #0
1000bb10:	0c01      	lsrs	r1, r0, #16
1000bb12:	4291      	cmp	r1, r2
1000bb14:	d101      	bne.n	1000bb1a <__hi0bits+0xe>
1000bb16:	0403      	lsls	r3, r0, #16
1000bb18:	3210      	adds	r2, #16
1000bb1a:	0e19      	lsrs	r1, r3, #24
1000bb1c:	d101      	bne.n	1000bb22 <__hi0bits+0x16>
1000bb1e:	3208      	adds	r2, #8
1000bb20:	021b      	lsls	r3, r3, #8
1000bb22:	0f19      	lsrs	r1, r3, #28
1000bb24:	d101      	bne.n	1000bb2a <__hi0bits+0x1e>
1000bb26:	3204      	adds	r2, #4
1000bb28:	011b      	lsls	r3, r3, #4
1000bb2a:	0f99      	lsrs	r1, r3, #30
1000bb2c:	d101      	bne.n	1000bb32 <__hi0bits+0x26>
1000bb2e:	3202      	adds	r2, #2
1000bb30:	009b      	lsls	r3, r3, #2
1000bb32:	1c10      	adds	r0, r2, #0
1000bb34:	2b00      	cmp	r3, #0
1000bb36:	db03      	blt.n	1000bb40 <__hi0bits+0x34>
1000bb38:	2020      	movs	r0, #32
1000bb3a:	005b      	lsls	r3, r3, #1
1000bb3c:	d500      	bpl.n	1000bb40 <__hi0bits+0x34>
1000bb3e:	1c50      	adds	r0, r2, #1
1000bb40:	4770      	bx	lr

1000bb42 <__lo0bits>:
1000bb42:	2207      	movs	r2, #7
1000bb44:	6803      	ldr	r3, [r0, #0]
1000bb46:	b510      	push	{r4, lr}
1000bb48:	1c01      	adds	r1, r0, #0
1000bb4a:	401a      	ands	r2, r3
1000bb4c:	d00c      	beq.n	1000bb68 <__lo0bits+0x26>
1000bb4e:	2401      	movs	r4, #1
1000bb50:	2000      	movs	r0, #0
1000bb52:	4223      	tst	r3, r4
1000bb54:	d123      	bne.n	1000bb9e <__lo0bits+0x5c>
1000bb56:	2202      	movs	r2, #2
1000bb58:	4213      	tst	r3, r2
1000bb5a:	d003      	beq.n	1000bb64 <__lo0bits+0x22>
1000bb5c:	40e3      	lsrs	r3, r4
1000bb5e:	1c20      	adds	r0, r4, #0
1000bb60:	600b      	str	r3, [r1, #0]
1000bb62:	e01c      	b.n	1000bb9e <__lo0bits+0x5c>
1000bb64:	089b      	lsrs	r3, r3, #2
1000bb66:	e018      	b.n	1000bb9a <__lo0bits+0x58>
1000bb68:	b298      	uxth	r0, r3
1000bb6a:	2800      	cmp	r0, #0
1000bb6c:	d101      	bne.n	1000bb72 <__lo0bits+0x30>
1000bb6e:	2210      	movs	r2, #16
1000bb70:	0c1b      	lsrs	r3, r3, #16
1000bb72:	b2d8      	uxtb	r0, r3
1000bb74:	2800      	cmp	r0, #0
1000bb76:	d101      	bne.n	1000bb7c <__lo0bits+0x3a>
1000bb78:	3208      	adds	r2, #8
1000bb7a:	0a1b      	lsrs	r3, r3, #8
1000bb7c:	0718      	lsls	r0, r3, #28
1000bb7e:	d101      	bne.n	1000bb84 <__lo0bits+0x42>
1000bb80:	3204      	adds	r2, #4
1000bb82:	091b      	lsrs	r3, r3, #4
1000bb84:	0798      	lsls	r0, r3, #30
1000bb86:	d101      	bne.n	1000bb8c <__lo0bits+0x4a>
1000bb88:	3202      	adds	r2, #2
1000bb8a:	089b      	lsrs	r3, r3, #2
1000bb8c:	07d8      	lsls	r0, r3, #31
1000bb8e:	d404      	bmi.n	1000bb9a <__lo0bits+0x58>
1000bb90:	085b      	lsrs	r3, r3, #1
1000bb92:	2020      	movs	r0, #32
1000bb94:	2b00      	cmp	r3, #0
1000bb96:	d002      	beq.n	1000bb9e <__lo0bits+0x5c>
1000bb98:	3201      	adds	r2, #1
1000bb9a:	1c10      	adds	r0, r2, #0
1000bb9c:	600b      	str	r3, [r1, #0]
1000bb9e:	bd10      	pop	{r4, pc}

1000bba0 <__i2b>:
1000bba0:	b510      	push	{r4, lr}
1000bba2:	1c0c      	adds	r4, r1, #0
1000bba4:	2101      	movs	r1, #1
1000bba6:	f7ff fee4 	bl	1000b972 <_Balloc>
1000bbaa:	2301      	movs	r3, #1
1000bbac:	6144      	str	r4, [r0, #20]
1000bbae:	6103      	str	r3, [r0, #16]
1000bbb0:	bd10      	pop	{r4, pc}

1000bbb2 <__multiply>:
1000bbb2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bbb4:	690b      	ldr	r3, [r1, #16]
1000bbb6:	1c14      	adds	r4, r2, #0
1000bbb8:	6912      	ldr	r2, [r2, #16]
1000bbba:	b089      	sub	sp, #36	; 0x24
1000bbbc:	1c0d      	adds	r5, r1, #0
1000bbbe:	4293      	cmp	r3, r2
1000bbc0:	da01      	bge.n	1000bbc6 <__multiply+0x14>
1000bbc2:	1c25      	adds	r5, r4, #0
1000bbc4:	1c0c      	adds	r4, r1, #0
1000bbc6:	692f      	ldr	r7, [r5, #16]
1000bbc8:	6926      	ldr	r6, [r4, #16]
1000bbca:	68aa      	ldr	r2, [r5, #8]
1000bbcc:	19bb      	adds	r3, r7, r6
1000bbce:	6869      	ldr	r1, [r5, #4]
1000bbd0:	9300      	str	r3, [sp, #0]
1000bbd2:	4293      	cmp	r3, r2
1000bbd4:	dd00      	ble.n	1000bbd8 <__multiply+0x26>
1000bbd6:	3101      	adds	r1, #1
1000bbd8:	f7ff fecb 	bl	1000b972 <_Balloc>
1000bbdc:	1c01      	adds	r1, r0, #0
1000bbde:	9b00      	ldr	r3, [sp, #0]
1000bbe0:	3114      	adds	r1, #20
1000bbe2:	4684      	mov	ip, r0
1000bbe4:	0098      	lsls	r0, r3, #2
1000bbe6:	1c0b      	adds	r3, r1, #0
1000bbe8:	1808      	adds	r0, r1, r0
1000bbea:	4283      	cmp	r3, r0
1000bbec:	d202      	bcs.n	1000bbf4 <__multiply+0x42>
1000bbee:	2200      	movs	r2, #0
1000bbf0:	c304      	stmia	r3!, {r2}
1000bbf2:	e7fa      	b.n	1000bbea <__multiply+0x38>
1000bbf4:	3514      	adds	r5, #20
1000bbf6:	00bf      	lsls	r7, r7, #2
1000bbf8:	19eb      	adds	r3, r5, r7
1000bbfa:	3414      	adds	r4, #20
1000bbfc:	00b6      	lsls	r6, r6, #2
1000bbfe:	9304      	str	r3, [sp, #16]
1000bc00:	19a3      	adds	r3, r4, r6
1000bc02:	9502      	str	r5, [sp, #8]
1000bc04:	9306      	str	r3, [sp, #24]
1000bc06:	9b06      	ldr	r3, [sp, #24]
1000bc08:	429c      	cmp	r4, r3
1000bc0a:	d256      	bcs.n	1000bcba <__multiply+0x108>
1000bc0c:	8823      	ldrh	r3, [r4, #0]
1000bc0e:	9303      	str	r3, [sp, #12]
1000bc10:	2b00      	cmp	r3, #0
1000bc12:	d022      	beq.n	1000bc5a <__multiply+0xa8>
1000bc14:	1c0e      	adds	r6, r1, #0
1000bc16:	2700      	movs	r7, #0
1000bc18:	9b02      	ldr	r3, [sp, #8]
1000bc1a:	9301      	str	r3, [sp, #4]
1000bc1c:	9b01      	ldr	r3, [sp, #4]
1000bc1e:	9d03      	ldr	r5, [sp, #12]
1000bc20:	cb04      	ldmia	r3!, {r2}
1000bc22:	9605      	str	r6, [sp, #20]
1000bc24:	9301      	str	r3, [sp, #4]
1000bc26:	8833      	ldrh	r3, [r6, #0]
1000bc28:	9307      	str	r3, [sp, #28]
1000bc2a:	b293      	uxth	r3, r2
1000bc2c:	436b      	muls	r3, r5
1000bc2e:	9d07      	ldr	r5, [sp, #28]
1000bc30:	0c12      	lsrs	r2, r2, #16
1000bc32:	18eb      	adds	r3, r5, r3
1000bc34:	6835      	ldr	r5, [r6, #0]
1000bc36:	19db      	adds	r3, r3, r7
1000bc38:	0c2f      	lsrs	r7, r5, #16
1000bc3a:	9d03      	ldr	r5, [sp, #12]
1000bc3c:	436a      	muls	r2, r5
1000bc3e:	18ba      	adds	r2, r7, r2
1000bc40:	0c1f      	lsrs	r7, r3, #16
1000bc42:	19d2      	adds	r2, r2, r7
1000bc44:	0c17      	lsrs	r7, r2, #16
1000bc46:	b29b      	uxth	r3, r3
1000bc48:	0412      	lsls	r2, r2, #16
1000bc4a:	4313      	orrs	r3, r2
1000bc4c:	c608      	stmia	r6!, {r3}
1000bc4e:	9a01      	ldr	r2, [sp, #4]
1000bc50:	9b04      	ldr	r3, [sp, #16]
1000bc52:	429a      	cmp	r2, r3
1000bc54:	d3e2      	bcc.n	1000bc1c <__multiply+0x6a>
1000bc56:	9b05      	ldr	r3, [sp, #20]
1000bc58:	605f      	str	r7, [r3, #4]
1000bc5a:	6823      	ldr	r3, [r4, #0]
1000bc5c:	0c1b      	lsrs	r3, r3, #16
1000bc5e:	9301      	str	r3, [sp, #4]
1000bc60:	d021      	beq.n	1000bca6 <__multiply+0xf4>
1000bc62:	2200      	movs	r2, #0
1000bc64:	1c0d      	adds	r5, r1, #0
1000bc66:	680b      	ldr	r3, [r1, #0]
1000bc68:	9f02      	ldr	r7, [sp, #8]
1000bc6a:	9203      	str	r2, [sp, #12]
1000bc6c:	883e      	ldrh	r6, [r7, #0]
1000bc6e:	9a01      	ldr	r2, [sp, #4]
1000bc70:	b29b      	uxth	r3, r3
1000bc72:	4356      	muls	r6, r2
1000bc74:	682a      	ldr	r2, [r5, #0]
1000bc76:	9505      	str	r5, [sp, #20]
1000bc78:	0c12      	lsrs	r2, r2, #16
1000bc7a:	18b2      	adds	r2, r6, r2
1000bc7c:	9e03      	ldr	r6, [sp, #12]
1000bc7e:	1992      	adds	r2, r2, r6
1000bc80:	0416      	lsls	r6, r2, #16
1000bc82:	4333      	orrs	r3, r6
1000bc84:	602b      	str	r3, [r5, #0]
1000bc86:	cf08      	ldmia	r7!, {r3}
1000bc88:	9e01      	ldr	r6, [sp, #4]
1000bc8a:	0c1b      	lsrs	r3, r3, #16
1000bc8c:	4373      	muls	r3, r6
1000bc8e:	88ae      	ldrh	r6, [r5, #4]
1000bc90:	0c12      	lsrs	r2, r2, #16
1000bc92:	199b      	adds	r3, r3, r6
1000bc94:	189b      	adds	r3, r3, r2
1000bc96:	0c1a      	lsrs	r2, r3, #16
1000bc98:	9203      	str	r2, [sp, #12]
1000bc9a:	9a04      	ldr	r2, [sp, #16]
1000bc9c:	3504      	adds	r5, #4
1000bc9e:	42ba      	cmp	r2, r7
1000bca0:	d8e4      	bhi.n	1000bc6c <__multiply+0xba>
1000bca2:	9a05      	ldr	r2, [sp, #20]
1000bca4:	6053      	str	r3, [r2, #4]
1000bca6:	3404      	adds	r4, #4
1000bca8:	3104      	adds	r1, #4
1000bcaa:	e7ac      	b.n	1000bc06 <__multiply+0x54>
1000bcac:	3804      	subs	r0, #4
1000bcae:	6803      	ldr	r3, [r0, #0]
1000bcb0:	2b00      	cmp	r3, #0
1000bcb2:	d105      	bne.n	1000bcc0 <__multiply+0x10e>
1000bcb4:	9b00      	ldr	r3, [sp, #0]
1000bcb6:	3b01      	subs	r3, #1
1000bcb8:	9300      	str	r3, [sp, #0]
1000bcba:	9b00      	ldr	r3, [sp, #0]
1000bcbc:	2b00      	cmp	r3, #0
1000bcbe:	dcf5      	bgt.n	1000bcac <__multiply+0xfa>
1000bcc0:	4663      	mov	r3, ip
1000bcc2:	4660      	mov	r0, ip
1000bcc4:	9a00      	ldr	r2, [sp, #0]
1000bcc6:	611a      	str	r2, [r3, #16]
1000bcc8:	b009      	add	sp, #36	; 0x24
1000bcca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bccc <__pow5mult>:
1000bccc:	2303      	movs	r3, #3
1000bcce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bcd0:	4013      	ands	r3, r2
1000bcd2:	1c05      	adds	r5, r0, #0
1000bcd4:	1c0e      	adds	r6, r1, #0
1000bcd6:	1c14      	adds	r4, r2, #0
1000bcd8:	2b00      	cmp	r3, #0
1000bcda:	d007      	beq.n	1000bcec <__pow5mult+0x20>
1000bcdc:	4a22      	ldr	r2, [pc, #136]	; (1000bd68 <__pow5mult+0x9c>)
1000bcde:	3b01      	subs	r3, #1
1000bce0:	009b      	lsls	r3, r3, #2
1000bce2:	589a      	ldr	r2, [r3, r2]
1000bce4:	2300      	movs	r3, #0
1000bce6:	f7ff fe95 	bl	1000ba14 <__multadd>
1000bcea:	1c06      	adds	r6, r0, #0
1000bcec:	10a3      	asrs	r3, r4, #2
1000bcee:	9301      	str	r3, [sp, #4]
1000bcf0:	d037      	beq.n	1000bd62 <__pow5mult+0x96>
1000bcf2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
1000bcf4:	2c00      	cmp	r4, #0
1000bcf6:	d107      	bne.n	1000bd08 <__pow5mult+0x3c>
1000bcf8:	2010      	movs	r0, #16
1000bcfa:	f7ff fe25 	bl	1000b948 <malloc>
1000bcfe:	6268      	str	r0, [r5, #36]	; 0x24
1000bd00:	6044      	str	r4, [r0, #4]
1000bd02:	6084      	str	r4, [r0, #8]
1000bd04:	6004      	str	r4, [r0, #0]
1000bd06:	60c4      	str	r4, [r0, #12]
1000bd08:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1000bd0a:	68bc      	ldr	r4, [r7, #8]
1000bd0c:	2c00      	cmp	r4, #0
1000bd0e:	d110      	bne.n	1000bd32 <__pow5mult+0x66>
1000bd10:	1c28      	adds	r0, r5, #0
1000bd12:	4916      	ldr	r1, [pc, #88]	; (1000bd6c <__pow5mult+0xa0>)
1000bd14:	f7ff ff44 	bl	1000bba0 <__i2b>
1000bd18:	2300      	movs	r3, #0
1000bd1a:	60b8      	str	r0, [r7, #8]
1000bd1c:	1c04      	adds	r4, r0, #0
1000bd1e:	6003      	str	r3, [r0, #0]
1000bd20:	e007      	b.n	1000bd32 <__pow5mult+0x66>
1000bd22:	9b01      	ldr	r3, [sp, #4]
1000bd24:	105b      	asrs	r3, r3, #1
1000bd26:	9301      	str	r3, [sp, #4]
1000bd28:	d01b      	beq.n	1000bd62 <__pow5mult+0x96>
1000bd2a:	6820      	ldr	r0, [r4, #0]
1000bd2c:	2800      	cmp	r0, #0
1000bd2e:	d00f      	beq.n	1000bd50 <__pow5mult+0x84>
1000bd30:	1c04      	adds	r4, r0, #0
1000bd32:	9b01      	ldr	r3, [sp, #4]
1000bd34:	07db      	lsls	r3, r3, #31
1000bd36:	d5f4      	bpl.n	1000bd22 <__pow5mult+0x56>
1000bd38:	1c31      	adds	r1, r6, #0
1000bd3a:	1c22      	adds	r2, r4, #0
1000bd3c:	1c28      	adds	r0, r5, #0
1000bd3e:	f7ff ff38 	bl	1000bbb2 <__multiply>
1000bd42:	1c07      	adds	r7, r0, #0
1000bd44:	1c31      	adds	r1, r6, #0
1000bd46:	1c28      	adds	r0, r5, #0
1000bd48:	f7ff fe4b 	bl	1000b9e2 <_Bfree>
1000bd4c:	1c3e      	adds	r6, r7, #0
1000bd4e:	e7e8      	b.n	1000bd22 <__pow5mult+0x56>
1000bd50:	1c28      	adds	r0, r5, #0
1000bd52:	1c21      	adds	r1, r4, #0
1000bd54:	1c22      	adds	r2, r4, #0
1000bd56:	f7ff ff2c 	bl	1000bbb2 <__multiply>
1000bd5a:	2300      	movs	r3, #0
1000bd5c:	6020      	str	r0, [r4, #0]
1000bd5e:	6003      	str	r3, [r0, #0]
1000bd60:	e7e6      	b.n	1000bd30 <__pow5mult+0x64>
1000bd62:	1c30      	adds	r0, r6, #0
1000bd64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000bd66:	46c0      	nop			; (mov r8, r8)
1000bd68:	1000d118 	.word	0x1000d118
1000bd6c:	00000271 	.word	0x00000271

1000bd70 <__lshift>:
1000bd70:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bd72:	1c0c      	adds	r4, r1, #0
1000bd74:	1c17      	adds	r7, r2, #0
1000bd76:	6923      	ldr	r3, [r4, #16]
1000bd78:	1155      	asrs	r5, r2, #5
1000bd7a:	b085      	sub	sp, #20
1000bd7c:	18eb      	adds	r3, r5, r3
1000bd7e:	9301      	str	r3, [sp, #4]
1000bd80:	3301      	adds	r3, #1
1000bd82:	9300      	str	r3, [sp, #0]
1000bd84:	6849      	ldr	r1, [r1, #4]
1000bd86:	68a3      	ldr	r3, [r4, #8]
1000bd88:	9002      	str	r0, [sp, #8]
1000bd8a:	9a00      	ldr	r2, [sp, #0]
1000bd8c:	429a      	cmp	r2, r3
1000bd8e:	dd02      	ble.n	1000bd96 <__lshift+0x26>
1000bd90:	3101      	adds	r1, #1
1000bd92:	005b      	lsls	r3, r3, #1
1000bd94:	e7f9      	b.n	1000bd8a <__lshift+0x1a>
1000bd96:	9802      	ldr	r0, [sp, #8]
1000bd98:	f7ff fdeb 	bl	1000b972 <_Balloc>
1000bd9c:	1c02      	adds	r2, r0, #0
1000bd9e:	1c06      	adds	r6, r0, #0
1000bda0:	2300      	movs	r3, #0
1000bda2:	3214      	adds	r2, #20
1000bda4:	42ab      	cmp	r3, r5
1000bda6:	da04      	bge.n	1000bdb2 <__lshift+0x42>
1000bda8:	2000      	movs	r0, #0
1000bdaa:	0099      	lsls	r1, r3, #2
1000bdac:	5050      	str	r0, [r2, r1]
1000bdae:	3301      	adds	r3, #1
1000bdb0:	e7f8      	b.n	1000bda4 <__lshift+0x34>
1000bdb2:	43eb      	mvns	r3, r5
1000bdb4:	17db      	asrs	r3, r3, #31
1000bdb6:	401d      	ands	r5, r3
1000bdb8:	1c23      	adds	r3, r4, #0
1000bdba:	00ad      	lsls	r5, r5, #2
1000bdbc:	1955      	adds	r5, r2, r5
1000bdbe:	6922      	ldr	r2, [r4, #16]
1000bdc0:	3314      	adds	r3, #20
1000bdc2:	0092      	lsls	r2, r2, #2
1000bdc4:	189a      	adds	r2, r3, r2
1000bdc6:	4694      	mov	ip, r2
1000bdc8:	221f      	movs	r2, #31
1000bdca:	4017      	ands	r7, r2
1000bdcc:	d014      	beq.n	1000bdf8 <__lshift+0x88>
1000bdce:	3201      	adds	r2, #1
1000bdd0:	1bd2      	subs	r2, r2, r7
1000bdd2:	9203      	str	r2, [sp, #12]
1000bdd4:	2200      	movs	r2, #0
1000bdd6:	6819      	ldr	r1, [r3, #0]
1000bdd8:	1c28      	adds	r0, r5, #0
1000bdda:	40b9      	lsls	r1, r7
1000bddc:	430a      	orrs	r2, r1
1000bdde:	c504      	stmia	r5!, {r2}
1000bde0:	cb04      	ldmia	r3!, {r2}
1000bde2:	9903      	ldr	r1, [sp, #12]
1000bde4:	40ca      	lsrs	r2, r1
1000bde6:	459c      	cmp	ip, r3
1000bde8:	d8f5      	bhi.n	1000bdd6 <__lshift+0x66>
1000bdea:	6042      	str	r2, [r0, #4]
1000bdec:	2a00      	cmp	r2, #0
1000bdee:	d007      	beq.n	1000be00 <__lshift+0x90>
1000bdf0:	9b01      	ldr	r3, [sp, #4]
1000bdf2:	3302      	adds	r3, #2
1000bdf4:	9300      	str	r3, [sp, #0]
1000bdf6:	e003      	b.n	1000be00 <__lshift+0x90>
1000bdf8:	cb04      	ldmia	r3!, {r2}
1000bdfa:	c504      	stmia	r5!, {r2}
1000bdfc:	459c      	cmp	ip, r3
1000bdfe:	d8fb      	bhi.n	1000bdf8 <__lshift+0x88>
1000be00:	9b00      	ldr	r3, [sp, #0]
1000be02:	9802      	ldr	r0, [sp, #8]
1000be04:	3b01      	subs	r3, #1
1000be06:	6133      	str	r3, [r6, #16]
1000be08:	1c21      	adds	r1, r4, #0
1000be0a:	f7ff fdea 	bl	1000b9e2 <_Bfree>
1000be0e:	1c30      	adds	r0, r6, #0
1000be10:	b005      	add	sp, #20
1000be12:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000be14 <__mcmp>:
1000be14:	6903      	ldr	r3, [r0, #16]
1000be16:	690a      	ldr	r2, [r1, #16]
1000be18:	b510      	push	{r4, lr}
1000be1a:	1a9b      	subs	r3, r3, r2
1000be1c:	1c04      	adds	r4, r0, #0
1000be1e:	1e18      	subs	r0, r3, #0
1000be20:	d112      	bne.n	1000be48 <__mcmp+0x34>
1000be22:	0093      	lsls	r3, r2, #2
1000be24:	3414      	adds	r4, #20
1000be26:	3114      	adds	r1, #20
1000be28:	18e2      	adds	r2, r4, r3
1000be2a:	18c9      	adds	r1, r1, r3
1000be2c:	3a04      	subs	r2, #4
1000be2e:	3904      	subs	r1, #4
1000be30:	6813      	ldr	r3, [r2, #0]
1000be32:	6808      	ldr	r0, [r1, #0]
1000be34:	4283      	cmp	r3, r0
1000be36:	d004      	beq.n	1000be42 <__mcmp+0x2e>
1000be38:	4283      	cmp	r3, r0
1000be3a:	419b      	sbcs	r3, r3
1000be3c:	2001      	movs	r0, #1
1000be3e:	4318      	orrs	r0, r3
1000be40:	e002      	b.n	1000be48 <__mcmp+0x34>
1000be42:	42a2      	cmp	r2, r4
1000be44:	d8f2      	bhi.n	1000be2c <__mcmp+0x18>
1000be46:	2000      	movs	r0, #0
1000be48:	bd10      	pop	{r4, pc}

1000be4a <__mdiff>:
1000be4a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be4c:	1c07      	adds	r7, r0, #0
1000be4e:	b085      	sub	sp, #20
1000be50:	1c08      	adds	r0, r1, #0
1000be52:	1c0c      	adds	r4, r1, #0
1000be54:	1c11      	adds	r1, r2, #0
1000be56:	1c15      	adds	r5, r2, #0
1000be58:	f7ff ffdc 	bl	1000be14 <__mcmp>
1000be5c:	1e06      	subs	r6, r0, #0
1000be5e:	d107      	bne.n	1000be70 <__mdiff+0x26>
1000be60:	1c38      	adds	r0, r7, #0
1000be62:	1c31      	adds	r1, r6, #0
1000be64:	f7ff fd85 	bl	1000b972 <_Balloc>
1000be68:	2301      	movs	r3, #1
1000be6a:	6146      	str	r6, [r0, #20]
1000be6c:	6103      	str	r3, [r0, #16]
1000be6e:	e055      	b.n	1000bf1c <__mdiff+0xd2>
1000be70:	2300      	movs	r3, #0
1000be72:	9301      	str	r3, [sp, #4]
1000be74:	4298      	cmp	r0, r3
1000be76:	da04      	bge.n	1000be82 <__mdiff+0x38>
1000be78:	1c23      	adds	r3, r4, #0
1000be7a:	1c2c      	adds	r4, r5, #0
1000be7c:	1c1d      	adds	r5, r3, #0
1000be7e:	2301      	movs	r3, #1
1000be80:	9301      	str	r3, [sp, #4]
1000be82:	1c38      	adds	r0, r7, #0
1000be84:	6861      	ldr	r1, [r4, #4]
1000be86:	f7ff fd74 	bl	1000b972 <_Balloc>
1000be8a:	9b01      	ldr	r3, [sp, #4]
1000be8c:	6926      	ldr	r6, [r4, #16]
1000be8e:	1c2f      	adds	r7, r5, #0
1000be90:	60c3      	str	r3, [r0, #12]
1000be92:	3414      	adds	r4, #20
1000be94:	00b3      	lsls	r3, r6, #2
1000be96:	18e3      	adds	r3, r4, r3
1000be98:	1c02      	adds	r2, r0, #0
1000be9a:	9302      	str	r3, [sp, #8]
1000be9c:	692b      	ldr	r3, [r5, #16]
1000be9e:	2500      	movs	r5, #0
1000bea0:	3714      	adds	r7, #20
1000bea2:	009b      	lsls	r3, r3, #2
1000bea4:	18fb      	adds	r3, r7, r3
1000bea6:	9303      	str	r3, [sp, #12]
1000bea8:	3214      	adds	r2, #20
1000beaa:	cc08      	ldmia	r4!, {r3}
1000beac:	4669      	mov	r1, sp
1000beae:	469c      	mov	ip, r3
1000beb0:	cf08      	ldmia	r7!, {r3}
1000beb2:	3204      	adds	r2, #4
1000beb4:	9300      	str	r3, [sp, #0]
1000beb6:	4663      	mov	r3, ip
1000beb8:	808b      	strh	r3, [r1, #4]
1000beba:	888b      	ldrh	r3, [r1, #4]
1000bebc:	195d      	adds	r5, r3, r5
1000bebe:	9b00      	ldr	r3, [sp, #0]
1000bec0:	b29b      	uxth	r3, r3
1000bec2:	1aeb      	subs	r3, r5, r3
1000bec4:	4665      	mov	r5, ip
1000bec6:	9301      	str	r3, [sp, #4]
1000bec8:	9b00      	ldr	r3, [sp, #0]
1000beca:	0c2d      	lsrs	r5, r5, #16
1000becc:	0c19      	lsrs	r1, r3, #16
1000bece:	9b01      	ldr	r3, [sp, #4]
1000bed0:	1a69      	subs	r1, r5, r1
1000bed2:	141d      	asrs	r5, r3, #16
1000bed4:	1f13      	subs	r3, r2, #4
1000bed6:	469c      	mov	ip, r3
1000bed8:	466b      	mov	r3, sp
1000beda:	1949      	adds	r1, r1, r5
1000bedc:	889b      	ldrh	r3, [r3, #4]
1000bede:	140d      	asrs	r5, r1, #16
1000bee0:	0409      	lsls	r1, r1, #16
1000bee2:	430b      	orrs	r3, r1
1000bee4:	4661      	mov	r1, ip
1000bee6:	600b      	str	r3, [r1, #0]
1000bee8:	9b03      	ldr	r3, [sp, #12]
1000beea:	429f      	cmp	r7, r3
1000beec:	d3dd      	bcc.n	1000beaa <__mdiff+0x60>
1000beee:	9902      	ldr	r1, [sp, #8]
1000bef0:	1c13      	adds	r3, r2, #0
1000bef2:	428c      	cmp	r4, r1
1000bef4:	d20b      	bcs.n	1000bf0e <__mdiff+0xc4>
1000bef6:	cc08      	ldmia	r4!, {r3}
1000bef8:	b299      	uxth	r1, r3
1000befa:	1949      	adds	r1, r1, r5
1000befc:	140d      	asrs	r5, r1, #16
1000befe:	0c1b      	lsrs	r3, r3, #16
1000bf00:	18eb      	adds	r3, r5, r3
1000bf02:	141d      	asrs	r5, r3, #16
1000bf04:	b289      	uxth	r1, r1
1000bf06:	041b      	lsls	r3, r3, #16
1000bf08:	430b      	orrs	r3, r1
1000bf0a:	c208      	stmia	r2!, {r3}
1000bf0c:	e7ef      	b.n	1000beee <__mdiff+0xa4>
1000bf0e:	3b04      	subs	r3, #4
1000bf10:	681a      	ldr	r2, [r3, #0]
1000bf12:	2a00      	cmp	r2, #0
1000bf14:	d101      	bne.n	1000bf1a <__mdiff+0xd0>
1000bf16:	3e01      	subs	r6, #1
1000bf18:	e7f9      	b.n	1000bf0e <__mdiff+0xc4>
1000bf1a:	6106      	str	r6, [r0, #16]
1000bf1c:	b005      	add	sp, #20
1000bf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000bf20 <__ulp>:
1000bf20:	4b0f      	ldr	r3, [pc, #60]	; (1000bf60 <__ulp+0x40>)
1000bf22:	b510      	push	{r4, lr}
1000bf24:	4019      	ands	r1, r3
1000bf26:	4b0f      	ldr	r3, [pc, #60]	; (1000bf64 <__ulp+0x44>)
1000bf28:	18c9      	adds	r1, r1, r3
1000bf2a:	2900      	cmp	r1, #0
1000bf2c:	dd02      	ble.n	1000bf34 <__ulp+0x14>
1000bf2e:	2200      	movs	r2, #0
1000bf30:	1c0b      	adds	r3, r1, #0
1000bf32:	e011      	b.n	1000bf58 <__ulp+0x38>
1000bf34:	4249      	negs	r1, r1
1000bf36:	1509      	asrs	r1, r1, #20
1000bf38:	2200      	movs	r2, #0
1000bf3a:	2300      	movs	r3, #0
1000bf3c:	2913      	cmp	r1, #19
1000bf3e:	dc04      	bgt.n	1000bf4a <__ulp+0x2a>
1000bf40:	2080      	movs	r0, #128	; 0x80
1000bf42:	0300      	lsls	r0, r0, #12
1000bf44:	4108      	asrs	r0, r1
1000bf46:	1c03      	adds	r3, r0, #0
1000bf48:	e006      	b.n	1000bf58 <__ulp+0x38>
1000bf4a:	2001      	movs	r0, #1
1000bf4c:	2932      	cmp	r1, #50	; 0x32
1000bf4e:	dc02      	bgt.n	1000bf56 <__ulp+0x36>
1000bf50:	2433      	movs	r4, #51	; 0x33
1000bf52:	1a61      	subs	r1, r4, r1
1000bf54:	4088      	lsls	r0, r1
1000bf56:	1c02      	adds	r2, r0, #0
1000bf58:	1c10      	adds	r0, r2, #0
1000bf5a:	1c19      	adds	r1, r3, #0
1000bf5c:	bd10      	pop	{r4, pc}
1000bf5e:	46c0      	nop			; (mov r8, r8)
1000bf60:	7ff00000 	.word	0x7ff00000
1000bf64:	fcc00000 	.word	0xfcc00000

1000bf68 <__b2d>:
1000bf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000bf6a:	1c06      	adds	r6, r0, #0
1000bf6c:	6903      	ldr	r3, [r0, #16]
1000bf6e:	3614      	adds	r6, #20
1000bf70:	009b      	lsls	r3, r3, #2
1000bf72:	18f3      	adds	r3, r6, r3
1000bf74:	1f1d      	subs	r5, r3, #4
1000bf76:	682c      	ldr	r4, [r5, #0]
1000bf78:	1c0f      	adds	r7, r1, #0
1000bf7a:	1c20      	adds	r0, r4, #0
1000bf7c:	9301      	str	r3, [sp, #4]
1000bf7e:	f7ff fdc5 	bl	1000bb0c <__hi0bits>
1000bf82:	2320      	movs	r3, #32
1000bf84:	1a1b      	subs	r3, r3, r0
1000bf86:	603b      	str	r3, [r7, #0]
1000bf88:	491f      	ldr	r1, [pc, #124]	; (1000c008 <__b2d+0xa0>)
1000bf8a:	280a      	cmp	r0, #10
1000bf8c:	dc13      	bgt.n	1000bfb6 <__b2d+0x4e>
1000bf8e:	230b      	movs	r3, #11
1000bf90:	1c27      	adds	r7, r4, #0
1000bf92:	1a1b      	subs	r3, r3, r0
1000bf94:	40df      	lsrs	r7, r3
1000bf96:	4339      	orrs	r1, r7
1000bf98:	469c      	mov	ip, r3
1000bf9a:	1c0b      	adds	r3, r1, #0
1000bf9c:	2100      	movs	r1, #0
1000bf9e:	42b5      	cmp	r5, r6
1000bfa0:	d902      	bls.n	1000bfa8 <__b2d+0x40>
1000bfa2:	9901      	ldr	r1, [sp, #4]
1000bfa4:	3908      	subs	r1, #8
1000bfa6:	6809      	ldr	r1, [r1, #0]
1000bfa8:	4665      	mov	r5, ip
1000bfaa:	3015      	adds	r0, #21
1000bfac:	40e9      	lsrs	r1, r5
1000bfae:	4084      	lsls	r4, r0
1000bfb0:	4321      	orrs	r1, r4
1000bfb2:	1c0a      	adds	r2, r1, #0
1000bfb4:	e024      	b.n	1000c000 <__b2d+0x98>
1000bfb6:	2700      	movs	r7, #0
1000bfb8:	42b5      	cmp	r5, r6
1000bfba:	d902      	bls.n	1000bfc2 <__b2d+0x5a>
1000bfbc:	9d01      	ldr	r5, [sp, #4]
1000bfbe:	3d08      	subs	r5, #8
1000bfc0:	682f      	ldr	r7, [r5, #0]
1000bfc2:	230b      	movs	r3, #11
1000bfc4:	425b      	negs	r3, r3
1000bfc6:	469c      	mov	ip, r3
1000bfc8:	4484      	add	ip, r0
1000bfca:	4663      	mov	r3, ip
1000bfcc:	2b00      	cmp	r3, #0
1000bfce:	d014      	beq.n	1000bffa <__b2d+0x92>
1000bfd0:	232b      	movs	r3, #43	; 0x2b
1000bfd2:	1a18      	subs	r0, r3, r0
1000bfd4:	4663      	mov	r3, ip
1000bfd6:	409c      	lsls	r4, r3
1000bfd8:	4321      	orrs	r1, r4
1000bfda:	1c3c      	adds	r4, r7, #0
1000bfdc:	40c4      	lsrs	r4, r0
1000bfde:	4321      	orrs	r1, r4
1000bfe0:	1c0b      	adds	r3, r1, #0
1000bfe2:	2400      	movs	r4, #0
1000bfe4:	42b5      	cmp	r5, r6
1000bfe6:	d901      	bls.n	1000bfec <__b2d+0x84>
1000bfe8:	3d04      	subs	r5, #4
1000bfea:	682c      	ldr	r4, [r5, #0]
1000bfec:	40c4      	lsrs	r4, r0
1000bfee:	4661      	mov	r1, ip
1000bff0:	1c20      	adds	r0, r4, #0
1000bff2:	408f      	lsls	r7, r1
1000bff4:	4338      	orrs	r0, r7
1000bff6:	1c02      	adds	r2, r0, #0
1000bff8:	e002      	b.n	1000c000 <__b2d+0x98>
1000bffa:	4321      	orrs	r1, r4
1000bffc:	1c0b      	adds	r3, r1, #0
1000bffe:	1c3a      	adds	r2, r7, #0
1000c000:	1c10      	adds	r0, r2, #0
1000c002:	1c19      	adds	r1, r3, #0
1000c004:	b003      	add	sp, #12
1000c006:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c008:	3ff00000 	.word	0x3ff00000

1000c00c <__d2b>:
1000c00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c00e:	1c1d      	adds	r5, r3, #0
1000c010:	2101      	movs	r1, #1
1000c012:	9f08      	ldr	r7, [sp, #32]
1000c014:	1c14      	adds	r4, r2, #0
1000c016:	f7ff fcac 	bl	1000b972 <_Balloc>
1000c01a:	032b      	lsls	r3, r5, #12
1000c01c:	006d      	lsls	r5, r5, #1
1000c01e:	1c06      	adds	r6, r0, #0
1000c020:	0b1b      	lsrs	r3, r3, #12
1000c022:	0d6d      	lsrs	r5, r5, #21
1000c024:	d002      	beq.n	1000c02c <__d2b+0x20>
1000c026:	2280      	movs	r2, #128	; 0x80
1000c028:	0352      	lsls	r2, r2, #13
1000c02a:	4313      	orrs	r3, r2
1000c02c:	9301      	str	r3, [sp, #4]
1000c02e:	2c00      	cmp	r4, #0
1000c030:	d018      	beq.n	1000c064 <__d2b+0x58>
1000c032:	4668      	mov	r0, sp
1000c034:	9400      	str	r4, [sp, #0]
1000c036:	f7ff fd84 	bl	1000bb42 <__lo0bits>
1000c03a:	9c00      	ldr	r4, [sp, #0]
1000c03c:	2800      	cmp	r0, #0
1000c03e:	d009      	beq.n	1000c054 <__d2b+0x48>
1000c040:	2320      	movs	r3, #32
1000c042:	9a01      	ldr	r2, [sp, #4]
1000c044:	1a19      	subs	r1, r3, r0
1000c046:	1c13      	adds	r3, r2, #0
1000c048:	408b      	lsls	r3, r1
1000c04a:	40c2      	lsrs	r2, r0
1000c04c:	4323      	orrs	r3, r4
1000c04e:	6173      	str	r3, [r6, #20]
1000c050:	9201      	str	r2, [sp, #4]
1000c052:	e000      	b.n	1000c056 <__d2b+0x4a>
1000c054:	6174      	str	r4, [r6, #20]
1000c056:	9c01      	ldr	r4, [sp, #4]
1000c058:	61b4      	str	r4, [r6, #24]
1000c05a:	1e63      	subs	r3, r4, #1
1000c05c:	419c      	sbcs	r4, r3
1000c05e:	3401      	adds	r4, #1
1000c060:	6134      	str	r4, [r6, #16]
1000c062:	e007      	b.n	1000c074 <__d2b+0x68>
1000c064:	a801      	add	r0, sp, #4
1000c066:	f7ff fd6c 	bl	1000bb42 <__lo0bits>
1000c06a:	2401      	movs	r4, #1
1000c06c:	9b01      	ldr	r3, [sp, #4]
1000c06e:	6134      	str	r4, [r6, #16]
1000c070:	6173      	str	r3, [r6, #20]
1000c072:	3020      	adds	r0, #32
1000c074:	2d00      	cmp	r5, #0
1000c076:	d006      	beq.n	1000c086 <__d2b+0x7a>
1000c078:	4b0b      	ldr	r3, [pc, #44]	; (1000c0a8 <__d2b+0x9c>)
1000c07a:	18ed      	adds	r5, r5, r3
1000c07c:	2335      	movs	r3, #53	; 0x35
1000c07e:	182d      	adds	r5, r5, r0
1000c080:	603d      	str	r5, [r7, #0]
1000c082:	1a18      	subs	r0, r3, r0
1000c084:	e00b      	b.n	1000c09e <__d2b+0x92>
1000c086:	4b09      	ldr	r3, [pc, #36]	; (1000c0ac <__d2b+0xa0>)
1000c088:	18c0      	adds	r0, r0, r3
1000c08a:	4b09      	ldr	r3, [pc, #36]	; (1000c0b0 <__d2b+0xa4>)
1000c08c:	6038      	str	r0, [r7, #0]
1000c08e:	18e3      	adds	r3, r4, r3
1000c090:	009b      	lsls	r3, r3, #2
1000c092:	18f3      	adds	r3, r6, r3
1000c094:	6958      	ldr	r0, [r3, #20]
1000c096:	f7ff fd39 	bl	1000bb0c <__hi0bits>
1000c09a:	0164      	lsls	r4, r4, #5
1000c09c:	1a20      	subs	r0, r4, r0
1000c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c0a0:	6018      	str	r0, [r3, #0]
1000c0a2:	1c30      	adds	r0, r6, #0
1000c0a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000c0a6:	46c0      	nop			; (mov r8, r8)
1000c0a8:	fffffbcd 	.word	0xfffffbcd
1000c0ac:	fffffbce 	.word	0xfffffbce
1000c0b0:	3fffffff 	.word	0x3fffffff

1000c0b4 <__ratio>:
1000c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0b6:	b087      	sub	sp, #28
1000c0b8:	1c0e      	adds	r6, r1, #0
1000c0ba:	a904      	add	r1, sp, #16
1000c0bc:	1c07      	adds	r7, r0, #0
1000c0be:	f7ff ff53 	bl	1000bf68 <__b2d>
1000c0c2:	1c04      	adds	r4, r0, #0
1000c0c4:	1c0d      	adds	r5, r1, #0
1000c0c6:	1c30      	adds	r0, r6, #0
1000c0c8:	a905      	add	r1, sp, #20
1000c0ca:	9400      	str	r4, [sp, #0]
1000c0cc:	9501      	str	r5, [sp, #4]
1000c0ce:	f7ff ff4b 	bl	1000bf68 <__b2d>
1000c0d2:	9b04      	ldr	r3, [sp, #16]
1000c0d4:	9a05      	ldr	r2, [sp, #20]
1000c0d6:	693f      	ldr	r7, [r7, #16]
1000c0d8:	1a9a      	subs	r2, r3, r2
1000c0da:	6933      	ldr	r3, [r6, #16]
1000c0dc:	9002      	str	r0, [sp, #8]
1000c0de:	9103      	str	r1, [sp, #12]
1000c0e0:	1afb      	subs	r3, r7, r3
1000c0e2:	015b      	lsls	r3, r3, #5
1000c0e4:	18d3      	adds	r3, r2, r3
1000c0e6:	2b00      	cmp	r3, #0
1000c0e8:	dd03      	ble.n	1000c0f2 <__ratio+0x3e>
1000c0ea:	051b      	lsls	r3, r3, #20
1000c0ec:	195b      	adds	r3, r3, r5
1000c0ee:	9301      	str	r3, [sp, #4]
1000c0f0:	e002      	b.n	1000c0f8 <__ratio+0x44>
1000c0f2:	051b      	lsls	r3, r3, #20
1000c0f4:	1acb      	subs	r3, r1, r3
1000c0f6:	9303      	str	r3, [sp, #12]
1000c0f8:	9800      	ldr	r0, [sp, #0]
1000c0fa:	9901      	ldr	r1, [sp, #4]
1000c0fc:	9a02      	ldr	r2, [sp, #8]
1000c0fe:	9b03      	ldr	r3, [sp, #12]
1000c100:	f000 fad8 	bl	1000c6b4 <__aeabi_ddiv>
1000c104:	b007      	add	sp, #28
1000c106:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000c108 <__copybits>:
1000c108:	1c13      	adds	r3, r2, #0
1000c10a:	3901      	subs	r1, #1
1000c10c:	b510      	push	{r4, lr}
1000c10e:	1149      	asrs	r1, r1, #5
1000c110:	6912      	ldr	r2, [r2, #16]
1000c112:	3101      	adds	r1, #1
1000c114:	0089      	lsls	r1, r1, #2
1000c116:	3314      	adds	r3, #20
1000c118:	0092      	lsls	r2, r2, #2
1000c11a:	1841      	adds	r1, r0, r1
1000c11c:	189a      	adds	r2, r3, r2
1000c11e:	4293      	cmp	r3, r2
1000c120:	d202      	bcs.n	1000c128 <__copybits+0x20>
1000c122:	cb10      	ldmia	r3!, {r4}
1000c124:	c010      	stmia	r0!, {r4}
1000c126:	e7fa      	b.n	1000c11e <__copybits+0x16>
1000c128:	4288      	cmp	r0, r1
1000c12a:	d202      	bcs.n	1000c132 <__copybits+0x2a>
1000c12c:	2300      	movs	r3, #0
1000c12e:	c008      	stmia	r0!, {r3}
1000c130:	e7fa      	b.n	1000c128 <__copybits+0x20>
1000c132:	bd10      	pop	{r4, pc}

1000c134 <__any_on>:
1000c134:	b530      	push	{r4, r5, lr}
1000c136:	1c04      	adds	r4, r0, #0
1000c138:	6902      	ldr	r2, [r0, #16]
1000c13a:	3414      	adds	r4, #20
1000c13c:	114b      	asrs	r3, r1, #5
1000c13e:	4293      	cmp	r3, r2
1000c140:	dc0c      	bgt.n	1000c15c <__any_on+0x28>
1000c142:	da0c      	bge.n	1000c15e <__any_on+0x2a>
1000c144:	221f      	movs	r2, #31
1000c146:	4011      	ands	r1, r2
1000c148:	d009      	beq.n	1000c15e <__any_on+0x2a>
1000c14a:	009a      	lsls	r2, r3, #2
1000c14c:	5915      	ldr	r5, [r2, r4]
1000c14e:	2001      	movs	r0, #1
1000c150:	1c2a      	adds	r2, r5, #0
1000c152:	40ca      	lsrs	r2, r1
1000c154:	408a      	lsls	r2, r1
1000c156:	42aa      	cmp	r2, r5
1000c158:	d10c      	bne.n	1000c174 <__any_on+0x40>
1000c15a:	e000      	b.n	1000c15e <__any_on+0x2a>
1000c15c:	1c13      	adds	r3, r2, #0
1000c15e:	009b      	lsls	r3, r3, #2
1000c160:	18e3      	adds	r3, r4, r3
1000c162:	42a3      	cmp	r3, r4
1000c164:	d905      	bls.n	1000c172 <__any_on+0x3e>
1000c166:	3b04      	subs	r3, #4
1000c168:	681a      	ldr	r2, [r3, #0]
1000c16a:	2a00      	cmp	r2, #0
1000c16c:	d0f9      	beq.n	1000c162 <__any_on+0x2e>
1000c16e:	2001      	movs	r0, #1
1000c170:	e000      	b.n	1000c174 <__any_on+0x40>
1000c172:	2000      	movs	r0, #0
1000c174:	bd30      	pop	{r4, r5, pc}

1000c176 <_calloc_r>:
1000c176:	434a      	muls	r2, r1
1000c178:	b538      	push	{r3, r4, r5, lr}
1000c17a:	1c11      	adds	r1, r2, #0
1000c17c:	1c14      	adds	r4, r2, #0
1000c17e:	f000 f84f 	bl	1000c220 <_malloc_r>
1000c182:	1e05      	subs	r5, r0, #0
1000c184:	d003      	beq.n	1000c18e <_calloc_r+0x18>
1000c186:	2100      	movs	r1, #0
1000c188:	1c22      	adds	r2, r4, #0
1000c18a:	f000 fa31 	bl	1000c5f0 <memset>
1000c18e:	1c28      	adds	r0, r5, #0
1000c190:	bd38      	pop	{r3, r4, r5, pc}
	...

1000c194 <_free_r>:
1000c194:	b530      	push	{r4, r5, lr}
1000c196:	2900      	cmp	r1, #0
1000c198:	d03e      	beq.n	1000c218 <_free_r+0x84>
1000c19a:	3904      	subs	r1, #4
1000c19c:	680b      	ldr	r3, [r1, #0]
1000c19e:	2b00      	cmp	r3, #0
1000c1a0:	da00      	bge.n	1000c1a4 <_free_r+0x10>
1000c1a2:	18c9      	adds	r1, r1, r3
1000c1a4:	4a1d      	ldr	r2, [pc, #116]	; (1000c21c <_free_r+0x88>)
1000c1a6:	6813      	ldr	r3, [r2, #0]
1000c1a8:	1c14      	adds	r4, r2, #0
1000c1aa:	2b00      	cmp	r3, #0
1000c1ac:	d102      	bne.n	1000c1b4 <_free_r+0x20>
1000c1ae:	604b      	str	r3, [r1, #4]
1000c1b0:	6011      	str	r1, [r2, #0]
1000c1b2:	e031      	b.n	1000c218 <_free_r+0x84>
1000c1b4:	4299      	cmp	r1, r3
1000c1b6:	d20d      	bcs.n	1000c1d4 <_free_r+0x40>
1000c1b8:	6808      	ldr	r0, [r1, #0]
1000c1ba:	180a      	adds	r2, r1, r0
1000c1bc:	429a      	cmp	r2, r3
1000c1be:	d103      	bne.n	1000c1c8 <_free_r+0x34>
1000c1c0:	6813      	ldr	r3, [r2, #0]
1000c1c2:	18c3      	adds	r3, r0, r3
1000c1c4:	600b      	str	r3, [r1, #0]
1000c1c6:	6853      	ldr	r3, [r2, #4]
1000c1c8:	604b      	str	r3, [r1, #4]
1000c1ca:	6021      	str	r1, [r4, #0]
1000c1cc:	e024      	b.n	1000c218 <_free_r+0x84>
1000c1ce:	428a      	cmp	r2, r1
1000c1d0:	d803      	bhi.n	1000c1da <_free_r+0x46>
1000c1d2:	1c13      	adds	r3, r2, #0
1000c1d4:	685a      	ldr	r2, [r3, #4]
1000c1d6:	2a00      	cmp	r2, #0
1000c1d8:	d1f9      	bne.n	1000c1ce <_free_r+0x3a>
1000c1da:	681d      	ldr	r5, [r3, #0]
1000c1dc:	195c      	adds	r4, r3, r5
1000c1de:	428c      	cmp	r4, r1
1000c1e0:	d10b      	bne.n	1000c1fa <_free_r+0x66>
1000c1e2:	6809      	ldr	r1, [r1, #0]
1000c1e4:	1869      	adds	r1, r5, r1
1000c1e6:	1858      	adds	r0, r3, r1
1000c1e8:	6019      	str	r1, [r3, #0]
1000c1ea:	4290      	cmp	r0, r2
1000c1ec:	d114      	bne.n	1000c218 <_free_r+0x84>
1000c1ee:	6810      	ldr	r0, [r2, #0]
1000c1f0:	6852      	ldr	r2, [r2, #4]
1000c1f2:	1809      	adds	r1, r1, r0
1000c1f4:	6019      	str	r1, [r3, #0]
1000c1f6:	605a      	str	r2, [r3, #4]
1000c1f8:	e00e      	b.n	1000c218 <_free_r+0x84>
1000c1fa:	428c      	cmp	r4, r1
1000c1fc:	d902      	bls.n	1000c204 <_free_r+0x70>
1000c1fe:	230c      	movs	r3, #12
1000c200:	6003      	str	r3, [r0, #0]
1000c202:	e009      	b.n	1000c218 <_free_r+0x84>
1000c204:	6808      	ldr	r0, [r1, #0]
1000c206:	180c      	adds	r4, r1, r0
1000c208:	4294      	cmp	r4, r2
1000c20a:	d103      	bne.n	1000c214 <_free_r+0x80>
1000c20c:	6814      	ldr	r4, [r2, #0]
1000c20e:	6852      	ldr	r2, [r2, #4]
1000c210:	1900      	adds	r0, r0, r4
1000c212:	6008      	str	r0, [r1, #0]
1000c214:	604a      	str	r2, [r1, #4]
1000c216:	6059      	str	r1, [r3, #4]
1000c218:	bd30      	pop	{r4, r5, pc}
1000c21a:	46c0      	nop			; (mov r8, r8)
1000c21c:	20000a30 	.word	0x20000a30

1000c220 <_malloc_r>:
1000c220:	2303      	movs	r3, #3
1000c222:	b570      	push	{r4, r5, r6, lr}
1000c224:	1ccc      	adds	r4, r1, #3
1000c226:	439c      	bics	r4, r3
1000c228:	3408      	adds	r4, #8
1000c22a:	1c05      	adds	r5, r0, #0
1000c22c:	2c0c      	cmp	r4, #12
1000c22e:	d201      	bcs.n	1000c234 <_malloc_r+0x14>
1000c230:	240c      	movs	r4, #12
1000c232:	e005      	b.n	1000c240 <_malloc_r+0x20>
1000c234:	2c00      	cmp	r4, #0
1000c236:	da03      	bge.n	1000c240 <_malloc_r+0x20>
1000c238:	230c      	movs	r3, #12
1000c23a:	2000      	movs	r0, #0
1000c23c:	602b      	str	r3, [r5, #0]
1000c23e:	e042      	b.n	1000c2c6 <_malloc_r+0xa6>
1000c240:	428c      	cmp	r4, r1
1000c242:	d3f9      	bcc.n	1000c238 <_malloc_r+0x18>
1000c244:	4a20      	ldr	r2, [pc, #128]	; (1000c2c8 <_malloc_r+0xa8>)
1000c246:	6813      	ldr	r3, [r2, #0]
1000c248:	1c10      	adds	r0, r2, #0
1000c24a:	1c19      	adds	r1, r3, #0
1000c24c:	2900      	cmp	r1, #0
1000c24e:	d013      	beq.n	1000c278 <_malloc_r+0x58>
1000c250:	680a      	ldr	r2, [r1, #0]
1000c252:	1b12      	subs	r2, r2, r4
1000c254:	d40d      	bmi.n	1000c272 <_malloc_r+0x52>
1000c256:	2a0b      	cmp	r2, #11
1000c258:	d902      	bls.n	1000c260 <_malloc_r+0x40>
1000c25a:	600a      	str	r2, [r1, #0]
1000c25c:	188b      	adds	r3, r1, r2
1000c25e:	e01f      	b.n	1000c2a0 <_malloc_r+0x80>
1000c260:	428b      	cmp	r3, r1
1000c262:	d102      	bne.n	1000c26a <_malloc_r+0x4a>
1000c264:	685a      	ldr	r2, [r3, #4]
1000c266:	6002      	str	r2, [r0, #0]
1000c268:	e01b      	b.n	1000c2a2 <_malloc_r+0x82>
1000c26a:	684a      	ldr	r2, [r1, #4]
1000c26c:	605a      	str	r2, [r3, #4]
1000c26e:	1c0b      	adds	r3, r1, #0
1000c270:	e017      	b.n	1000c2a2 <_malloc_r+0x82>
1000c272:	1c0b      	adds	r3, r1, #0
1000c274:	6849      	ldr	r1, [r1, #4]
1000c276:	e7e9      	b.n	1000c24c <_malloc_r+0x2c>
1000c278:	4e14      	ldr	r6, [pc, #80]	; (1000c2cc <_malloc_r+0xac>)
1000c27a:	6833      	ldr	r3, [r6, #0]
1000c27c:	2b00      	cmp	r3, #0
1000c27e:	d103      	bne.n	1000c288 <_malloc_r+0x68>
1000c280:	1c28      	adds	r0, r5, #0
1000c282:	f000 f97b 	bl	1000c57c <_sbrk_r>
1000c286:	6030      	str	r0, [r6, #0]
1000c288:	1c28      	adds	r0, r5, #0
1000c28a:	1c21      	adds	r1, r4, #0
1000c28c:	f000 f976 	bl	1000c57c <_sbrk_r>
1000c290:	1c03      	adds	r3, r0, #0
1000c292:	1c42      	adds	r2, r0, #1
1000c294:	d0d0      	beq.n	1000c238 <_malloc_r+0x18>
1000c296:	2203      	movs	r2, #3
1000c298:	1cc6      	adds	r6, r0, #3
1000c29a:	4396      	bics	r6, r2
1000c29c:	4286      	cmp	r6, r0
1000c29e:	d10a      	bne.n	1000c2b6 <_malloc_r+0x96>
1000c2a0:	601c      	str	r4, [r3, #0]
1000c2a2:	1c18      	adds	r0, r3, #0
1000c2a4:	2107      	movs	r1, #7
1000c2a6:	300b      	adds	r0, #11
1000c2a8:	1d1a      	adds	r2, r3, #4
1000c2aa:	4388      	bics	r0, r1
1000c2ac:	1a82      	subs	r2, r0, r2
1000c2ae:	d00a      	beq.n	1000c2c6 <_malloc_r+0xa6>
1000c2b0:	4251      	negs	r1, r2
1000c2b2:	5099      	str	r1, [r3, r2]
1000c2b4:	e007      	b.n	1000c2c6 <_malloc_r+0xa6>
1000c2b6:	1a31      	subs	r1, r6, r0
1000c2b8:	1c28      	adds	r0, r5, #0
1000c2ba:	f000 f95f 	bl	1000c57c <_sbrk_r>
1000c2be:	1c43      	adds	r3, r0, #1
1000c2c0:	d0ba      	beq.n	1000c238 <_malloc_r+0x18>
1000c2c2:	1c33      	adds	r3, r6, #0
1000c2c4:	e7ec      	b.n	1000c2a0 <_malloc_r+0x80>
1000c2c6:	bd70      	pop	{r4, r5, r6, pc}
1000c2c8:	20000a30 	.word	0x20000a30
1000c2cc:	20000a2c 	.word	0x20000a2c

1000c2d0 <__ssputs_r>:
1000c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c2d2:	688e      	ldr	r6, [r1, #8]
1000c2d4:	b085      	sub	sp, #20
1000c2d6:	1c07      	adds	r7, r0, #0
1000c2d8:	1c0c      	adds	r4, r1, #0
1000c2da:	9203      	str	r2, [sp, #12]
1000c2dc:	9301      	str	r3, [sp, #4]
1000c2de:	42b3      	cmp	r3, r6
1000c2e0:	d345      	bcc.n	1000c36e <__ssputs_r+0x9e>
1000c2e2:	2390      	movs	r3, #144	; 0x90
1000c2e4:	898a      	ldrh	r2, [r1, #12]
1000c2e6:	00db      	lsls	r3, r3, #3
1000c2e8:	421a      	tst	r2, r3
1000c2ea:	d03d      	beq.n	1000c368 <__ssputs_r+0x98>
1000c2ec:	2503      	movs	r5, #3
1000c2ee:	6909      	ldr	r1, [r1, #16]
1000c2f0:	6823      	ldr	r3, [r4, #0]
1000c2f2:	9801      	ldr	r0, [sp, #4]
1000c2f4:	1a5b      	subs	r3, r3, r1
1000c2f6:	9302      	str	r3, [sp, #8]
1000c2f8:	6963      	ldr	r3, [r4, #20]
1000c2fa:	435d      	muls	r5, r3
1000c2fc:	0feb      	lsrs	r3, r5, #31
1000c2fe:	195d      	adds	r5, r3, r5
1000c300:	9b02      	ldr	r3, [sp, #8]
1000c302:	106d      	asrs	r5, r5, #1
1000c304:	3301      	adds	r3, #1
1000c306:	181b      	adds	r3, r3, r0
1000c308:	429d      	cmp	r5, r3
1000c30a:	d200      	bcs.n	1000c30e <__ssputs_r+0x3e>
1000c30c:	1c1d      	adds	r5, r3, #0
1000c30e:	1c38      	adds	r0, r7, #0
1000c310:	0553      	lsls	r3, r2, #21
1000c312:	d50f      	bpl.n	1000c334 <__ssputs_r+0x64>
1000c314:	1c29      	adds	r1, r5, #0
1000c316:	f7ff ff83 	bl	1000c220 <_malloc_r>
1000c31a:	1e06      	subs	r6, r0, #0
1000c31c:	d013      	beq.n	1000c346 <__ssputs_r+0x76>
1000c31e:	9a02      	ldr	r2, [sp, #8]
1000c320:	6921      	ldr	r1, [r4, #16]
1000c322:	f7fc fbfd 	bl	10008b20 <memcpy>
1000c326:	89a2      	ldrh	r2, [r4, #12]
1000c328:	4b18      	ldr	r3, [pc, #96]	; (1000c38c <__ssputs_r+0xbc>)
1000c32a:	4013      	ands	r3, r2
1000c32c:	2280      	movs	r2, #128	; 0x80
1000c32e:	4313      	orrs	r3, r2
1000c330:	81a3      	strh	r3, [r4, #12]
1000c332:	e011      	b.n	1000c358 <__ssputs_r+0x88>
1000c334:	1c2a      	adds	r2, r5, #0
1000c336:	f000 f963 	bl	1000c600 <_realloc_r>
1000c33a:	1e06      	subs	r6, r0, #0
1000c33c:	d10c      	bne.n	1000c358 <__ssputs_r+0x88>
1000c33e:	1c38      	adds	r0, r7, #0
1000c340:	6921      	ldr	r1, [r4, #16]
1000c342:	f7ff ff27 	bl	1000c194 <_free_r>
1000c346:	230c      	movs	r3, #12
1000c348:	2240      	movs	r2, #64	; 0x40
1000c34a:	2001      	movs	r0, #1
1000c34c:	603b      	str	r3, [r7, #0]
1000c34e:	89a3      	ldrh	r3, [r4, #12]
1000c350:	4240      	negs	r0, r0
1000c352:	4313      	orrs	r3, r2
1000c354:	81a3      	strh	r3, [r4, #12]
1000c356:	e017      	b.n	1000c388 <__ssputs_r+0xb8>
1000c358:	9b02      	ldr	r3, [sp, #8]
1000c35a:	6126      	str	r6, [r4, #16]
1000c35c:	18f6      	adds	r6, r6, r3
1000c35e:	6026      	str	r6, [r4, #0]
1000c360:	6165      	str	r5, [r4, #20]
1000c362:	9e01      	ldr	r6, [sp, #4]
1000c364:	1aed      	subs	r5, r5, r3
1000c366:	60a5      	str	r5, [r4, #8]
1000c368:	9b01      	ldr	r3, [sp, #4]
1000c36a:	42b3      	cmp	r3, r6
1000c36c:	d200      	bcs.n	1000c370 <__ssputs_r+0xa0>
1000c36e:	9e01      	ldr	r6, [sp, #4]
1000c370:	1c32      	adds	r2, r6, #0
1000c372:	6820      	ldr	r0, [r4, #0]
1000c374:	9903      	ldr	r1, [sp, #12]
1000c376:	f000 f927 	bl	1000c5c8 <memmove>
1000c37a:	2000      	movs	r0, #0
1000c37c:	68a3      	ldr	r3, [r4, #8]
1000c37e:	1b9b      	subs	r3, r3, r6
1000c380:	60a3      	str	r3, [r4, #8]
1000c382:	6823      	ldr	r3, [r4, #0]
1000c384:	199e      	adds	r6, r3, r6
1000c386:	6026      	str	r6, [r4, #0]
1000c388:	b005      	add	sp, #20
1000c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c38c:	fffffb7f 	.word	0xfffffb7f

1000c390 <_svfiprintf_r>:
1000c390:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c392:	b09f      	sub	sp, #124	; 0x7c
1000c394:	9002      	str	r0, [sp, #8]
1000c396:	9305      	str	r3, [sp, #20]
1000c398:	898b      	ldrh	r3, [r1, #12]
1000c39a:	1c0e      	adds	r6, r1, #0
1000c39c:	1c17      	adds	r7, r2, #0
1000c39e:	061b      	lsls	r3, r3, #24
1000c3a0:	d510      	bpl.n	1000c3c4 <_svfiprintf_r+0x34>
1000c3a2:	690b      	ldr	r3, [r1, #16]
1000c3a4:	2b00      	cmp	r3, #0
1000c3a6:	d10d      	bne.n	1000c3c4 <_svfiprintf_r+0x34>
1000c3a8:	2140      	movs	r1, #64	; 0x40
1000c3aa:	f7ff ff39 	bl	1000c220 <_malloc_r>
1000c3ae:	6030      	str	r0, [r6, #0]
1000c3b0:	6130      	str	r0, [r6, #16]
1000c3b2:	2800      	cmp	r0, #0
1000c3b4:	d104      	bne.n	1000c3c0 <_svfiprintf_r+0x30>
1000c3b6:	230c      	movs	r3, #12
1000c3b8:	9a02      	ldr	r2, [sp, #8]
1000c3ba:	3801      	subs	r0, #1
1000c3bc:	6013      	str	r3, [r2, #0]
1000c3be:	e0d0      	b.n	1000c562 <_svfiprintf_r+0x1d2>
1000c3c0:	2340      	movs	r3, #64	; 0x40
1000c3c2:	6173      	str	r3, [r6, #20]
1000c3c4:	2300      	movs	r3, #0
1000c3c6:	ad06      	add	r5, sp, #24
1000c3c8:	616b      	str	r3, [r5, #20]
1000c3ca:	3320      	adds	r3, #32
1000c3cc:	766b      	strb	r3, [r5, #25]
1000c3ce:	3310      	adds	r3, #16
1000c3d0:	76ab      	strb	r3, [r5, #26]
1000c3d2:	1c3c      	adds	r4, r7, #0
1000c3d4:	7823      	ldrb	r3, [r4, #0]
1000c3d6:	2b00      	cmp	r3, #0
1000c3d8:	d103      	bne.n	1000c3e2 <_svfiprintf_r+0x52>
1000c3da:	1be3      	subs	r3, r4, r7
1000c3dc:	9304      	str	r3, [sp, #16]
1000c3de:	d012      	beq.n	1000c406 <_svfiprintf_r+0x76>
1000c3e0:	e003      	b.n	1000c3ea <_svfiprintf_r+0x5a>
1000c3e2:	2b25      	cmp	r3, #37	; 0x25
1000c3e4:	d0f9      	beq.n	1000c3da <_svfiprintf_r+0x4a>
1000c3e6:	3401      	adds	r4, #1
1000c3e8:	e7f4      	b.n	1000c3d4 <_svfiprintf_r+0x44>
1000c3ea:	9b04      	ldr	r3, [sp, #16]
1000c3ec:	9802      	ldr	r0, [sp, #8]
1000c3ee:	1c31      	adds	r1, r6, #0
1000c3f0:	1c3a      	adds	r2, r7, #0
1000c3f2:	f7ff ff6d 	bl	1000c2d0 <__ssputs_r>
1000c3f6:	1c43      	adds	r3, r0, #1
1000c3f8:	d100      	bne.n	1000c3fc <_svfiprintf_r+0x6c>
1000c3fa:	e0ac      	b.n	1000c556 <_svfiprintf_r+0x1c6>
1000c3fc:	696a      	ldr	r2, [r5, #20]
1000c3fe:	9b04      	ldr	r3, [sp, #16]
1000c400:	4694      	mov	ip, r2
1000c402:	4463      	add	r3, ip
1000c404:	616b      	str	r3, [r5, #20]
1000c406:	7823      	ldrb	r3, [r4, #0]
1000c408:	2b00      	cmp	r3, #0
1000c40a:	d100      	bne.n	1000c40e <_svfiprintf_r+0x7e>
1000c40c:	e0a3      	b.n	1000c556 <_svfiprintf_r+0x1c6>
1000c40e:	2201      	movs	r2, #1
1000c410:	2300      	movs	r3, #0
1000c412:	4252      	negs	r2, r2
1000c414:	606a      	str	r2, [r5, #4]
1000c416:	a902      	add	r1, sp, #8
1000c418:	3254      	adds	r2, #84	; 0x54
1000c41a:	1852      	adds	r2, r2, r1
1000c41c:	3401      	adds	r4, #1
1000c41e:	602b      	str	r3, [r5, #0]
1000c420:	60eb      	str	r3, [r5, #12]
1000c422:	60ab      	str	r3, [r5, #8]
1000c424:	7013      	strb	r3, [r2, #0]
1000c426:	65ab      	str	r3, [r5, #88]	; 0x58
1000c428:	4f4f      	ldr	r7, [pc, #316]	; (1000c568 <_svfiprintf_r+0x1d8>)
1000c42a:	7821      	ldrb	r1, [r4, #0]
1000c42c:	1c38      	adds	r0, r7, #0
1000c42e:	2205      	movs	r2, #5
1000c430:	f7ff fa94 	bl	1000b95c <memchr>
1000c434:	2800      	cmp	r0, #0
1000c436:	d008      	beq.n	1000c44a <_svfiprintf_r+0xba>
1000c438:	1bc0      	subs	r0, r0, r7
1000c43a:	2701      	movs	r7, #1
1000c43c:	4087      	lsls	r7, r0
1000c43e:	1c38      	adds	r0, r7, #0
1000c440:	682b      	ldr	r3, [r5, #0]
1000c442:	3401      	adds	r4, #1
1000c444:	4318      	orrs	r0, r3
1000c446:	6028      	str	r0, [r5, #0]
1000c448:	e7ee      	b.n	1000c428 <_svfiprintf_r+0x98>
1000c44a:	682b      	ldr	r3, [r5, #0]
1000c44c:	06da      	lsls	r2, r3, #27
1000c44e:	d504      	bpl.n	1000c45a <_svfiprintf_r+0xca>
1000c450:	2253      	movs	r2, #83	; 0x53
1000c452:	2120      	movs	r1, #32
1000c454:	a802      	add	r0, sp, #8
1000c456:	1812      	adds	r2, r2, r0
1000c458:	7011      	strb	r1, [r2, #0]
1000c45a:	071a      	lsls	r2, r3, #28
1000c45c:	d504      	bpl.n	1000c468 <_svfiprintf_r+0xd8>
1000c45e:	2253      	movs	r2, #83	; 0x53
1000c460:	212b      	movs	r1, #43	; 0x2b
1000c462:	a802      	add	r0, sp, #8
1000c464:	1812      	adds	r2, r2, r0
1000c466:	7011      	strb	r1, [r2, #0]
1000c468:	7822      	ldrb	r2, [r4, #0]
1000c46a:	2a2a      	cmp	r2, #42	; 0x2a
1000c46c:	d001      	beq.n	1000c472 <_svfiprintf_r+0xe2>
1000c46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c470:	e00e      	b.n	1000c490 <_svfiprintf_r+0x100>
1000c472:	9a05      	ldr	r2, [sp, #20]
1000c474:	1d11      	adds	r1, r2, #4
1000c476:	6812      	ldr	r2, [r2, #0]
1000c478:	9105      	str	r1, [sp, #20]
1000c47a:	2a00      	cmp	r2, #0
1000c47c:	db01      	blt.n	1000c482 <_svfiprintf_r+0xf2>
1000c47e:	9209      	str	r2, [sp, #36]	; 0x24
1000c480:	e004      	b.n	1000c48c <_svfiprintf_r+0xfc>
1000c482:	4252      	negs	r2, r2
1000c484:	60ea      	str	r2, [r5, #12]
1000c486:	2202      	movs	r2, #2
1000c488:	4313      	orrs	r3, r2
1000c48a:	602b      	str	r3, [r5, #0]
1000c48c:	3401      	adds	r4, #1
1000c48e:	e009      	b.n	1000c4a4 <_svfiprintf_r+0x114>
1000c490:	7822      	ldrb	r2, [r4, #0]
1000c492:	3a30      	subs	r2, #48	; 0x30
1000c494:	2a09      	cmp	r2, #9
1000c496:	d804      	bhi.n	1000c4a2 <_svfiprintf_r+0x112>
1000c498:	210a      	movs	r1, #10
1000c49a:	434b      	muls	r3, r1
1000c49c:	3401      	adds	r4, #1
1000c49e:	189b      	adds	r3, r3, r2
1000c4a0:	e7f6      	b.n	1000c490 <_svfiprintf_r+0x100>
1000c4a2:	9309      	str	r3, [sp, #36]	; 0x24
1000c4a4:	7823      	ldrb	r3, [r4, #0]
1000c4a6:	2b2e      	cmp	r3, #46	; 0x2e
1000c4a8:	d118      	bne.n	1000c4dc <_svfiprintf_r+0x14c>
1000c4aa:	7863      	ldrb	r3, [r4, #1]
1000c4ac:	2b2a      	cmp	r3, #42	; 0x2a
1000c4ae:	d109      	bne.n	1000c4c4 <_svfiprintf_r+0x134>
1000c4b0:	9b05      	ldr	r3, [sp, #20]
1000c4b2:	3402      	adds	r4, #2
1000c4b4:	1d1a      	adds	r2, r3, #4
1000c4b6:	681b      	ldr	r3, [r3, #0]
1000c4b8:	9205      	str	r2, [sp, #20]
1000c4ba:	2b00      	cmp	r3, #0
1000c4bc:	da0d      	bge.n	1000c4da <_svfiprintf_r+0x14a>
1000c4be:	2301      	movs	r3, #1
1000c4c0:	425b      	negs	r3, r3
1000c4c2:	e00a      	b.n	1000c4da <_svfiprintf_r+0x14a>
1000c4c4:	2300      	movs	r3, #0
1000c4c6:	3401      	adds	r4, #1
1000c4c8:	7822      	ldrb	r2, [r4, #0]
1000c4ca:	3a30      	subs	r2, #48	; 0x30
1000c4cc:	2a09      	cmp	r2, #9
1000c4ce:	d804      	bhi.n	1000c4da <_svfiprintf_r+0x14a>
1000c4d0:	210a      	movs	r1, #10
1000c4d2:	434b      	muls	r3, r1
1000c4d4:	3401      	adds	r4, #1
1000c4d6:	189b      	adds	r3, r3, r2
1000c4d8:	e7f6      	b.n	1000c4c8 <_svfiprintf_r+0x138>
1000c4da:	9307      	str	r3, [sp, #28]
1000c4dc:	4f23      	ldr	r7, [pc, #140]	; (1000c56c <_svfiprintf_r+0x1dc>)
1000c4de:	7821      	ldrb	r1, [r4, #0]
1000c4e0:	1c38      	adds	r0, r7, #0
1000c4e2:	2203      	movs	r2, #3
1000c4e4:	f7ff fa3a 	bl	1000b95c <memchr>
1000c4e8:	2800      	cmp	r0, #0
1000c4ea:	d007      	beq.n	1000c4fc <_svfiprintf_r+0x16c>
1000c4ec:	1bc0      	subs	r0, r0, r7
1000c4ee:	2740      	movs	r7, #64	; 0x40
1000c4f0:	4087      	lsls	r7, r0
1000c4f2:	1c38      	adds	r0, r7, #0
1000c4f4:	682b      	ldr	r3, [r5, #0]
1000c4f6:	3401      	adds	r4, #1
1000c4f8:	4318      	orrs	r0, r3
1000c4fa:	6028      	str	r0, [r5, #0]
1000c4fc:	7821      	ldrb	r1, [r4, #0]
1000c4fe:	481c      	ldr	r0, [pc, #112]	; (1000c570 <_svfiprintf_r+0x1e0>)
1000c500:	2206      	movs	r2, #6
1000c502:	1c67      	adds	r7, r4, #1
1000c504:	7629      	strb	r1, [r5, #24]
1000c506:	f7ff fa29 	bl	1000b95c <memchr>
1000c50a:	2800      	cmp	r0, #0
1000c50c:	d012      	beq.n	1000c534 <_svfiprintf_r+0x1a4>
1000c50e:	4b19      	ldr	r3, [pc, #100]	; (1000c574 <_svfiprintf_r+0x1e4>)
1000c510:	2b00      	cmp	r3, #0
1000c512:	d106      	bne.n	1000c522 <_svfiprintf_r+0x192>
1000c514:	2207      	movs	r2, #7
1000c516:	9b05      	ldr	r3, [sp, #20]
1000c518:	3307      	adds	r3, #7
1000c51a:	4393      	bics	r3, r2
1000c51c:	3308      	adds	r3, #8
1000c51e:	9305      	str	r3, [sp, #20]
1000c520:	e014      	b.n	1000c54c <_svfiprintf_r+0x1bc>
1000c522:	ab05      	add	r3, sp, #20
1000c524:	9300      	str	r3, [sp, #0]
1000c526:	9802      	ldr	r0, [sp, #8]
1000c528:	1c29      	adds	r1, r5, #0
1000c52a:	1c32      	adds	r2, r6, #0
1000c52c:	4b12      	ldr	r3, [pc, #72]	; (1000c578 <_svfiprintf_r+0x1e8>)
1000c52e:	f7fc fb95 	bl	10008c5c <_printf_float>
1000c532:	e007      	b.n	1000c544 <_svfiprintf_r+0x1b4>
1000c534:	ab05      	add	r3, sp, #20
1000c536:	9300      	str	r3, [sp, #0]
1000c538:	9802      	ldr	r0, [sp, #8]
1000c53a:	1c29      	adds	r1, r5, #0
1000c53c:	1c32      	adds	r2, r6, #0
1000c53e:	4b0e      	ldr	r3, [pc, #56]	; (1000c578 <_svfiprintf_r+0x1e8>)
1000c540:	f7fc fe32 	bl	100091a8 <_printf_i>
1000c544:	9003      	str	r0, [sp, #12]
1000c546:	9b03      	ldr	r3, [sp, #12]
1000c548:	3301      	adds	r3, #1
1000c54a:	d004      	beq.n	1000c556 <_svfiprintf_r+0x1c6>
1000c54c:	696b      	ldr	r3, [r5, #20]
1000c54e:	9a03      	ldr	r2, [sp, #12]
1000c550:	189b      	adds	r3, r3, r2
1000c552:	616b      	str	r3, [r5, #20]
1000c554:	e73d      	b.n	1000c3d2 <_svfiprintf_r+0x42>
1000c556:	89b3      	ldrh	r3, [r6, #12]
1000c558:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000c55a:	065b      	lsls	r3, r3, #25
1000c55c:	d501      	bpl.n	1000c562 <_svfiprintf_r+0x1d2>
1000c55e:	2001      	movs	r0, #1
1000c560:	4240      	negs	r0, r0
1000c562:	b01f      	add	sp, #124	; 0x7c
1000c564:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c566:	46c0      	nop			; (mov r8, r8)
1000c568:	1000d124 	.word	0x1000d124
1000c56c:	1000d12a 	.word	0x1000d12a
1000c570:	1000d12e 	.word	0x1000d12e
1000c574:	10008c5d 	.word	0x10008c5d
1000c578:	1000c2d1 	.word	0x1000c2d1

1000c57c <_sbrk_r>:
1000c57c:	b538      	push	{r3, r4, r5, lr}
1000c57e:	2300      	movs	r3, #0
1000c580:	4c06      	ldr	r4, [pc, #24]	; (1000c59c <_sbrk_r+0x20>)
1000c582:	1c05      	adds	r5, r0, #0
1000c584:	1c08      	adds	r0, r1, #0
1000c586:	6023      	str	r3, [r4, #0]
1000c588:	f7f9 ff60 	bl	1000644c <_sbrk>
1000c58c:	1c43      	adds	r3, r0, #1
1000c58e:	d103      	bne.n	1000c598 <_sbrk_r+0x1c>
1000c590:	6823      	ldr	r3, [r4, #0]
1000c592:	2b00      	cmp	r3, #0
1000c594:	d000      	beq.n	1000c598 <_sbrk_r+0x1c>
1000c596:	602b      	str	r3, [r5, #0]
1000c598:	bd38      	pop	{r3, r4, r5, pc}
1000c59a:	46c0      	nop			; (mov r8, r8)
1000c59c:	20000b5c 	.word	0x20000b5c

1000c5a0 <strncmp>:
1000c5a0:	2300      	movs	r3, #0
1000c5a2:	b530      	push	{r4, r5, lr}
1000c5a4:	429a      	cmp	r2, r3
1000c5a6:	d00d      	beq.n	1000c5c4 <strncmp+0x24>
1000c5a8:	3a01      	subs	r2, #1
1000c5aa:	5cc4      	ldrb	r4, [r0, r3]
1000c5ac:	5ccd      	ldrb	r5, [r1, r3]
1000c5ae:	42ac      	cmp	r4, r5
1000c5b0:	d102      	bne.n	1000c5b8 <strncmp+0x18>
1000c5b2:	4293      	cmp	r3, r2
1000c5b4:	d102      	bne.n	1000c5bc <strncmp+0x1c>
1000c5b6:	1c25      	adds	r5, r4, #0
1000c5b8:	1b63      	subs	r3, r4, r5
1000c5ba:	e003      	b.n	1000c5c4 <strncmp+0x24>
1000c5bc:	3301      	adds	r3, #1
1000c5be:	2c00      	cmp	r4, #0
1000c5c0:	d1f3      	bne.n	1000c5aa <strncmp+0xa>
1000c5c2:	e7f8      	b.n	1000c5b6 <strncmp+0x16>
1000c5c4:	1c18      	adds	r0, r3, #0
1000c5c6:	bd30      	pop	{r4, r5, pc}

1000c5c8 <memmove>:
1000c5c8:	b510      	push	{r4, lr}
1000c5ca:	4281      	cmp	r1, r0
1000c5cc:	d208      	bcs.n	1000c5e0 <memmove+0x18>
1000c5ce:	188b      	adds	r3, r1, r2
1000c5d0:	4298      	cmp	r0, r3
1000c5d2:	d205      	bcs.n	1000c5e0 <memmove+0x18>
1000c5d4:	1a9b      	subs	r3, r3, r2
1000c5d6:	3a01      	subs	r2, #1
1000c5d8:	d309      	bcc.n	1000c5ee <memmove+0x26>
1000c5da:	5c99      	ldrb	r1, [r3, r2]
1000c5dc:	5481      	strb	r1, [r0, r2]
1000c5de:	e7fa      	b.n	1000c5d6 <memmove+0xe>
1000c5e0:	2300      	movs	r3, #0
1000c5e2:	4293      	cmp	r3, r2
1000c5e4:	d003      	beq.n	1000c5ee <memmove+0x26>
1000c5e6:	5ccc      	ldrb	r4, [r1, r3]
1000c5e8:	54c4      	strb	r4, [r0, r3]
1000c5ea:	3301      	adds	r3, #1
1000c5ec:	e7f9      	b.n	1000c5e2 <memmove+0x1a>
1000c5ee:	bd10      	pop	{r4, pc}

1000c5f0 <memset>:
1000c5f0:	1c03      	adds	r3, r0, #0
1000c5f2:	1882      	adds	r2, r0, r2
1000c5f4:	4293      	cmp	r3, r2
1000c5f6:	d002      	beq.n	1000c5fe <memset+0xe>
1000c5f8:	7019      	strb	r1, [r3, #0]
1000c5fa:	3301      	adds	r3, #1
1000c5fc:	e7fa      	b.n	1000c5f4 <memset+0x4>
1000c5fe:	4770      	bx	lr

1000c600 <_realloc_r>:
1000c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c602:	1c06      	adds	r6, r0, #0
1000c604:	1c0c      	adds	r4, r1, #0
1000c606:	1c15      	adds	r5, r2, #0
1000c608:	2900      	cmp	r1, #0
1000c60a:	d104      	bne.n	1000c616 <_realloc_r+0x16>
1000c60c:	1c11      	adds	r1, r2, #0
1000c60e:	f7ff fe07 	bl	1000c220 <_malloc_r>
1000c612:	1c04      	adds	r4, r0, #0
1000c614:	e018      	b.n	1000c648 <_realloc_r+0x48>
1000c616:	2a00      	cmp	r2, #0
1000c618:	d103      	bne.n	1000c622 <_realloc_r+0x22>
1000c61a:	f7ff fdbb 	bl	1000c194 <_free_r>
1000c61e:	1c2c      	adds	r4, r5, #0
1000c620:	e012      	b.n	1000c648 <_realloc_r+0x48>
1000c622:	f000 f813 	bl	1000c64c <_malloc_usable_size_r>
1000c626:	42a8      	cmp	r0, r5
1000c628:	d20e      	bcs.n	1000c648 <_realloc_r+0x48>
1000c62a:	1c30      	adds	r0, r6, #0
1000c62c:	1c29      	adds	r1, r5, #0
1000c62e:	f7ff fdf7 	bl	1000c220 <_malloc_r>
1000c632:	1e07      	subs	r7, r0, #0
1000c634:	d007      	beq.n	1000c646 <_realloc_r+0x46>
1000c636:	1c21      	adds	r1, r4, #0
1000c638:	1c2a      	adds	r2, r5, #0
1000c63a:	f7fc fa71 	bl	10008b20 <memcpy>
1000c63e:	1c30      	adds	r0, r6, #0
1000c640:	1c21      	adds	r1, r4, #0
1000c642:	f7ff fda7 	bl	1000c194 <_free_r>
1000c646:	1c3c      	adds	r4, r7, #0
1000c648:	1c20      	adds	r0, r4, #0
1000c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000c64c <_malloc_usable_size_r>:
1000c64c:	1f0b      	subs	r3, r1, #4
1000c64e:	681a      	ldr	r2, [r3, #0]
1000c650:	1f10      	subs	r0, r2, #4
1000c652:	2a00      	cmp	r2, #0
1000c654:	da04      	bge.n	1000c660 <_malloc_usable_size_r+0x14>
1000c656:	1889      	adds	r1, r1, r2
1000c658:	3904      	subs	r1, #4
1000c65a:	680b      	ldr	r3, [r1, #0]
1000c65c:	18d0      	adds	r0, r2, r3
1000c65e:	3804      	subs	r0, #4
1000c660:	4770      	bx	lr
	...

1000c664 <__gnu_thumb1_case_uqi>:
1000c664:	b402      	push	{r1}
1000c666:	4671      	mov	r1, lr
1000c668:	0849      	lsrs	r1, r1, #1
1000c66a:	0049      	lsls	r1, r1, #1
1000c66c:	5c09      	ldrb	r1, [r1, r0]
1000c66e:	0049      	lsls	r1, r1, #1
1000c670:	448e      	add	lr, r1
1000c672:	bc02      	pop	{r1}
1000c674:	4770      	bx	lr
1000c676:	46c0      	nop			; (mov r8, r8)

1000c678 <__aeabi_d2uiz>:
1000c678:	b538      	push	{r3, r4, r5, lr}
1000c67a:	2200      	movs	r2, #0
1000c67c:	4b0c      	ldr	r3, [pc, #48]	; (1000c6b0 <__aeabi_d2uiz+0x38>)
1000c67e:	1c04      	adds	r4, r0, #0
1000c680:	1c0d      	adds	r5, r1, #0
1000c682:	f7fa fa2d 	bl	10006ae0 <__aeabi_dcmpge>
1000c686:	2800      	cmp	r0, #0
1000c688:	d104      	bne.n	1000c694 <__aeabi_d2uiz+0x1c>
1000c68a:	1c20      	adds	r0, r4, #0
1000c68c:	1c29      	adds	r1, r5, #0
1000c68e:	f000 fb35 	bl	1000ccfc <__aeabi_d2iz>
1000c692:	bd38      	pop	{r3, r4, r5, pc}
1000c694:	4b06      	ldr	r3, [pc, #24]	; (1000c6b0 <__aeabi_d2uiz+0x38>)
1000c696:	2200      	movs	r2, #0
1000c698:	1c20      	adds	r0, r4, #0
1000c69a:	1c29      	adds	r1, r5, #0
1000c69c:	f7fb fd2a 	bl	100080f4 <__aeabi_dsub>
1000c6a0:	f000 fb2c 	bl	1000ccfc <__aeabi_d2iz>
1000c6a4:	2380      	movs	r3, #128	; 0x80
1000c6a6:	061b      	lsls	r3, r3, #24
1000c6a8:	469c      	mov	ip, r3
1000c6aa:	4460      	add	r0, ip
1000c6ac:	e7f1      	b.n	1000c692 <__aeabi_d2uiz+0x1a>
1000c6ae:	46c0      	nop			; (mov r8, r8)
1000c6b0:	41e00000 	.word	0x41e00000

1000c6b4 <__aeabi_ddiv>:
1000c6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6b6:	465f      	mov	r7, fp
1000c6b8:	4656      	mov	r6, sl
1000c6ba:	464d      	mov	r5, r9
1000c6bc:	4644      	mov	r4, r8
1000c6be:	b4f0      	push	{r4, r5, r6, r7}
1000c6c0:	030f      	lsls	r7, r1, #12
1000c6c2:	b087      	sub	sp, #28
1000c6c4:	4698      	mov	r8, r3
1000c6c6:	004d      	lsls	r5, r1, #1
1000c6c8:	0b3b      	lsrs	r3, r7, #12
1000c6ca:	0fcc      	lsrs	r4, r1, #31
1000c6cc:	1c06      	adds	r6, r0, #0
1000c6ce:	4692      	mov	sl, r2
1000c6d0:	4681      	mov	r9, r0
1000c6d2:	469b      	mov	fp, r3
1000c6d4:	0d6d      	lsrs	r5, r5, #21
1000c6d6:	9401      	str	r4, [sp, #4]
1000c6d8:	d06b      	beq.n	1000c7b2 <__aeabi_ddiv+0xfe>
1000c6da:	4b66      	ldr	r3, [pc, #408]	; (1000c874 <__aeabi_ddiv+0x1c0>)
1000c6dc:	429d      	cmp	r5, r3
1000c6de:	d035      	beq.n	1000c74c <__aeabi_ddiv+0x98>
1000c6e0:	2780      	movs	r7, #128	; 0x80
1000c6e2:	465b      	mov	r3, fp
1000c6e4:	037f      	lsls	r7, r7, #13
1000c6e6:	431f      	orrs	r7, r3
1000c6e8:	00f3      	lsls	r3, r6, #3
1000c6ea:	4699      	mov	r9, r3
1000c6ec:	4b62      	ldr	r3, [pc, #392]	; (1000c878 <__aeabi_ddiv+0x1c4>)
1000c6ee:	00ff      	lsls	r7, r7, #3
1000c6f0:	0f40      	lsrs	r0, r0, #29
1000c6f2:	469c      	mov	ip, r3
1000c6f4:	4307      	orrs	r7, r0
1000c6f6:	2300      	movs	r3, #0
1000c6f8:	46bb      	mov	fp, r7
1000c6fa:	2600      	movs	r6, #0
1000c6fc:	4465      	add	r5, ip
1000c6fe:	9300      	str	r3, [sp, #0]
1000c700:	4642      	mov	r2, r8
1000c702:	0317      	lsls	r7, r2, #12
1000c704:	0050      	lsls	r0, r2, #1
1000c706:	0fd2      	lsrs	r2, r2, #31
1000c708:	4653      	mov	r3, sl
1000c70a:	0b3f      	lsrs	r7, r7, #12
1000c70c:	0d40      	lsrs	r0, r0, #21
1000c70e:	4690      	mov	r8, r2
1000c710:	d100      	bne.n	1000c714 <__aeabi_ddiv+0x60>
1000c712:	e072      	b.n	1000c7fa <__aeabi_ddiv+0x146>
1000c714:	4a57      	ldr	r2, [pc, #348]	; (1000c874 <__aeabi_ddiv+0x1c0>)
1000c716:	4290      	cmp	r0, r2
1000c718:	d067      	beq.n	1000c7ea <__aeabi_ddiv+0x136>
1000c71a:	2380      	movs	r3, #128	; 0x80
1000c71c:	035b      	lsls	r3, r3, #13
1000c71e:	431f      	orrs	r7, r3
1000c720:	4653      	mov	r3, sl
1000c722:	4a55      	ldr	r2, [pc, #340]	; (1000c878 <__aeabi_ddiv+0x1c4>)
1000c724:	0f5b      	lsrs	r3, r3, #29
1000c726:	00ff      	lsls	r7, r7, #3
1000c728:	431f      	orrs	r7, r3
1000c72a:	4694      	mov	ip, r2
1000c72c:	4653      	mov	r3, sl
1000c72e:	2100      	movs	r1, #0
1000c730:	00db      	lsls	r3, r3, #3
1000c732:	4460      	add	r0, ip
1000c734:	4642      	mov	r2, r8
1000c736:	4062      	eors	r2, r4
1000c738:	4692      	mov	sl, r2
1000c73a:	1a2d      	subs	r5, r5, r0
1000c73c:	430e      	orrs	r6, r1
1000c73e:	2e0f      	cmp	r6, #15
1000c740:	d900      	bls.n	1000c744 <__aeabi_ddiv+0x90>
1000c742:	e0a1      	b.n	1000c888 <__aeabi_ddiv+0x1d4>
1000c744:	484d      	ldr	r0, [pc, #308]	; (1000c87c <__aeabi_ddiv+0x1c8>)
1000c746:	00b6      	lsls	r6, r6, #2
1000c748:	5980      	ldr	r0, [r0, r6]
1000c74a:	4687      	mov	pc, r0
1000c74c:	465b      	mov	r3, fp
1000c74e:	431e      	orrs	r6, r3
1000c750:	d000      	beq.n	1000c754 <__aeabi_ddiv+0xa0>
1000c752:	e076      	b.n	1000c842 <__aeabi_ddiv+0x18e>
1000c754:	2300      	movs	r3, #0
1000c756:	469b      	mov	fp, r3
1000c758:	4699      	mov	r9, r3
1000c75a:	3302      	adds	r3, #2
1000c75c:	2608      	movs	r6, #8
1000c75e:	9300      	str	r3, [sp, #0]
1000c760:	e7ce      	b.n	1000c700 <__aeabi_ddiv+0x4c>
1000c762:	4699      	mov	r9, r3
1000c764:	4643      	mov	r3, r8
1000c766:	46bb      	mov	fp, r7
1000c768:	9301      	str	r3, [sp, #4]
1000c76a:	9100      	str	r1, [sp, #0]
1000c76c:	9b00      	ldr	r3, [sp, #0]
1000c76e:	2b02      	cmp	r3, #2
1000c770:	d16b      	bne.n	1000c84a <__aeabi_ddiv+0x196>
1000c772:	9b01      	ldr	r3, [sp, #4]
1000c774:	469a      	mov	sl, r3
1000c776:	2100      	movs	r1, #0
1000c778:	4653      	mov	r3, sl
1000c77a:	2201      	movs	r2, #1
1000c77c:	2700      	movs	r7, #0
1000c77e:	4689      	mov	r9, r1
1000c780:	401a      	ands	r2, r3
1000c782:	4b3c      	ldr	r3, [pc, #240]	; (1000c874 <__aeabi_ddiv+0x1c0>)
1000c784:	2100      	movs	r1, #0
1000c786:	033f      	lsls	r7, r7, #12
1000c788:	0d0c      	lsrs	r4, r1, #20
1000c78a:	0524      	lsls	r4, r4, #20
1000c78c:	0b3f      	lsrs	r7, r7, #12
1000c78e:	4327      	orrs	r7, r4
1000c790:	4c3b      	ldr	r4, [pc, #236]	; (1000c880 <__aeabi_ddiv+0x1cc>)
1000c792:	051b      	lsls	r3, r3, #20
1000c794:	4027      	ands	r7, r4
1000c796:	431f      	orrs	r7, r3
1000c798:	007f      	lsls	r7, r7, #1
1000c79a:	07d2      	lsls	r2, r2, #31
1000c79c:	087f      	lsrs	r7, r7, #1
1000c79e:	4317      	orrs	r7, r2
1000c7a0:	4648      	mov	r0, r9
1000c7a2:	1c39      	adds	r1, r7, #0
1000c7a4:	b007      	add	sp, #28
1000c7a6:	bc3c      	pop	{r2, r3, r4, r5}
1000c7a8:	4690      	mov	r8, r2
1000c7aa:	4699      	mov	r9, r3
1000c7ac:	46a2      	mov	sl, r4
1000c7ae:	46ab      	mov	fp, r5
1000c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7b2:	4303      	orrs	r3, r0
1000c7b4:	d03e      	beq.n	1000c834 <__aeabi_ddiv+0x180>
1000c7b6:	465b      	mov	r3, fp
1000c7b8:	2b00      	cmp	r3, #0
1000c7ba:	d100      	bne.n	1000c7be <__aeabi_ddiv+0x10a>
1000c7bc:	e19c      	b.n	1000caf8 <__aeabi_ddiv+0x444>
1000c7be:	4658      	mov	r0, fp
1000c7c0:	f7fc f964 	bl	10008a8c <__clzsi2>
1000c7c4:	2328      	movs	r3, #40	; 0x28
1000c7c6:	1c31      	adds	r1, r6, #0
1000c7c8:	1a1b      	subs	r3, r3, r0
1000c7ca:	1c02      	adds	r2, r0, #0
1000c7cc:	465f      	mov	r7, fp
1000c7ce:	40d9      	lsrs	r1, r3
1000c7d0:	3a08      	subs	r2, #8
1000c7d2:	4097      	lsls	r7, r2
1000c7d4:	1c0b      	adds	r3, r1, #0
1000c7d6:	4096      	lsls	r6, r2
1000c7d8:	433b      	orrs	r3, r7
1000c7da:	469b      	mov	fp, r3
1000c7dc:	46b1      	mov	r9, r6
1000c7de:	2300      	movs	r3, #0
1000c7e0:	4d28      	ldr	r5, [pc, #160]	; (1000c884 <__aeabi_ddiv+0x1d0>)
1000c7e2:	2600      	movs	r6, #0
1000c7e4:	1a2d      	subs	r5, r5, r0
1000c7e6:	9300      	str	r3, [sp, #0]
1000c7e8:	e78a      	b.n	1000c700 <__aeabi_ddiv+0x4c>
1000c7ea:	4652      	mov	r2, sl
1000c7ec:	2103      	movs	r1, #3
1000c7ee:	433a      	orrs	r2, r7
1000c7f0:	d1a0      	bne.n	1000c734 <__aeabi_ddiv+0x80>
1000c7f2:	2700      	movs	r7, #0
1000c7f4:	2300      	movs	r3, #0
1000c7f6:	2102      	movs	r1, #2
1000c7f8:	e79c      	b.n	1000c734 <__aeabi_ddiv+0x80>
1000c7fa:	4652      	mov	r2, sl
1000c7fc:	433a      	orrs	r2, r7
1000c7fe:	d015      	beq.n	1000c82c <__aeabi_ddiv+0x178>
1000c800:	2f00      	cmp	r7, #0
1000c802:	d100      	bne.n	1000c806 <__aeabi_ddiv+0x152>
1000c804:	e185      	b.n	1000cb12 <__aeabi_ddiv+0x45e>
1000c806:	1c38      	adds	r0, r7, #0
1000c808:	f7fc f940 	bl	10008a8c <__clzsi2>
1000c80c:	1c02      	adds	r2, r0, #0
1000c80e:	2128      	movs	r1, #40	; 0x28
1000c810:	4650      	mov	r0, sl
1000c812:	1a89      	subs	r1, r1, r2
1000c814:	1c13      	adds	r3, r2, #0
1000c816:	40c8      	lsrs	r0, r1
1000c818:	4651      	mov	r1, sl
1000c81a:	3b08      	subs	r3, #8
1000c81c:	4099      	lsls	r1, r3
1000c81e:	409f      	lsls	r7, r3
1000c820:	1c0b      	adds	r3, r1, #0
1000c822:	4307      	orrs	r7, r0
1000c824:	4817      	ldr	r0, [pc, #92]	; (1000c884 <__aeabi_ddiv+0x1d0>)
1000c826:	2100      	movs	r1, #0
1000c828:	1a80      	subs	r0, r0, r2
1000c82a:	e783      	b.n	1000c734 <__aeabi_ddiv+0x80>
1000c82c:	2700      	movs	r7, #0
1000c82e:	2300      	movs	r3, #0
1000c830:	2101      	movs	r1, #1
1000c832:	e77f      	b.n	1000c734 <__aeabi_ddiv+0x80>
1000c834:	2300      	movs	r3, #0
1000c836:	469b      	mov	fp, r3
1000c838:	4699      	mov	r9, r3
1000c83a:	3301      	adds	r3, #1
1000c83c:	2604      	movs	r6, #4
1000c83e:	9300      	str	r3, [sp, #0]
1000c840:	e75e      	b.n	1000c700 <__aeabi_ddiv+0x4c>
1000c842:	2303      	movs	r3, #3
1000c844:	260c      	movs	r6, #12
1000c846:	9300      	str	r3, [sp, #0]
1000c848:	e75a      	b.n	1000c700 <__aeabi_ddiv+0x4c>
1000c84a:	2b03      	cmp	r3, #3
1000c84c:	d100      	bne.n	1000c850 <__aeabi_ddiv+0x19c>
1000c84e:	e23c      	b.n	1000ccca <__aeabi_ddiv+0x616>
1000c850:	2b01      	cmp	r3, #1
1000c852:	d000      	beq.n	1000c856 <__aeabi_ddiv+0x1a2>
1000c854:	e1bf      	b.n	1000cbd6 <__aeabi_ddiv+0x522>
1000c856:	1c1a      	adds	r2, r3, #0
1000c858:	9b01      	ldr	r3, [sp, #4]
1000c85a:	401a      	ands	r2, r3
1000c85c:	2100      	movs	r1, #0
1000c85e:	2300      	movs	r3, #0
1000c860:	2700      	movs	r7, #0
1000c862:	4689      	mov	r9, r1
1000c864:	e78e      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000c866:	2300      	movs	r3, #0
1000c868:	2780      	movs	r7, #128	; 0x80
1000c86a:	4699      	mov	r9, r3
1000c86c:	2200      	movs	r2, #0
1000c86e:	033f      	lsls	r7, r7, #12
1000c870:	4b00      	ldr	r3, [pc, #0]	; (1000c874 <__aeabi_ddiv+0x1c0>)
1000c872:	e787      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000c874:	000007ff 	.word	0x000007ff
1000c878:	fffffc01 	.word	0xfffffc01
1000c87c:	1000d138 	.word	0x1000d138
1000c880:	800fffff 	.word	0x800fffff
1000c884:	fffffc0d 	.word	0xfffffc0d
1000c888:	45bb      	cmp	fp, r7
1000c88a:	d900      	bls.n	1000c88e <__aeabi_ddiv+0x1da>
1000c88c:	e151      	b.n	1000cb32 <__aeabi_ddiv+0x47e>
1000c88e:	d100      	bne.n	1000c892 <__aeabi_ddiv+0x1de>
1000c890:	e14c      	b.n	1000cb2c <__aeabi_ddiv+0x478>
1000c892:	464a      	mov	r2, r9
1000c894:	9203      	str	r2, [sp, #12]
1000c896:	2200      	movs	r2, #0
1000c898:	465c      	mov	r4, fp
1000c89a:	4690      	mov	r8, r2
1000c89c:	3d01      	subs	r5, #1
1000c89e:	0e18      	lsrs	r0, r3, #24
1000c8a0:	023f      	lsls	r7, r7, #8
1000c8a2:	4338      	orrs	r0, r7
1000c8a4:	021b      	lsls	r3, r3, #8
1000c8a6:	9301      	str	r3, [sp, #4]
1000c8a8:	0c03      	lsrs	r3, r0, #16
1000c8aa:	4699      	mov	r9, r3
1000c8ac:	0403      	lsls	r3, r0, #16
1000c8ae:	0c1b      	lsrs	r3, r3, #16
1000c8b0:	4649      	mov	r1, r9
1000c8b2:	1c06      	adds	r6, r0, #0
1000c8b4:	1c20      	adds	r0, r4, #0
1000c8b6:	1c1f      	adds	r7, r3, #0
1000c8b8:	9300      	str	r3, [sp, #0]
1000c8ba:	f7f9 ff5b 	bl	10006774 <__aeabi_uidiv>
1000c8be:	1c02      	adds	r2, r0, #0
1000c8c0:	437a      	muls	r2, r7
1000c8c2:	9002      	str	r0, [sp, #8]
1000c8c4:	4649      	mov	r1, r9
1000c8c6:	1c20      	adds	r0, r4, #0
1000c8c8:	1c17      	adds	r7, r2, #0
1000c8ca:	f7f9 ffd9 	bl	10006880 <__aeabi_uidivmod>
1000c8ce:	9b03      	ldr	r3, [sp, #12]
1000c8d0:	0409      	lsls	r1, r1, #16
1000c8d2:	0c1b      	lsrs	r3, r3, #16
1000c8d4:	4319      	orrs	r1, r3
1000c8d6:	428f      	cmp	r7, r1
1000c8d8:	d90c      	bls.n	1000c8f4 <__aeabi_ddiv+0x240>
1000c8da:	9b02      	ldr	r3, [sp, #8]
1000c8dc:	1989      	adds	r1, r1, r6
1000c8de:	3b01      	subs	r3, #1
1000c8e0:	428e      	cmp	r6, r1
1000c8e2:	d900      	bls.n	1000c8e6 <__aeabi_ddiv+0x232>
1000c8e4:	e152      	b.n	1000cb8c <__aeabi_ddiv+0x4d8>
1000c8e6:	428f      	cmp	r7, r1
1000c8e8:	d800      	bhi.n	1000c8ec <__aeabi_ddiv+0x238>
1000c8ea:	e14f      	b.n	1000cb8c <__aeabi_ddiv+0x4d8>
1000c8ec:	9b02      	ldr	r3, [sp, #8]
1000c8ee:	1989      	adds	r1, r1, r6
1000c8f0:	3b02      	subs	r3, #2
1000c8f2:	9302      	str	r3, [sp, #8]
1000c8f4:	1bcc      	subs	r4, r1, r7
1000c8f6:	1c20      	adds	r0, r4, #0
1000c8f8:	4649      	mov	r1, r9
1000c8fa:	f7f9 ff3b 	bl	10006774 <__aeabi_uidiv>
1000c8fe:	9f00      	ldr	r7, [sp, #0]
1000c900:	4683      	mov	fp, r0
1000c902:	4347      	muls	r7, r0
1000c904:	4649      	mov	r1, r9
1000c906:	1c20      	adds	r0, r4, #0
1000c908:	f7f9 ffba 	bl	10006880 <__aeabi_uidivmod>
1000c90c:	9a03      	ldr	r2, [sp, #12]
1000c90e:	040b      	lsls	r3, r1, #16
1000c910:	0414      	lsls	r4, r2, #16
1000c912:	0c24      	lsrs	r4, r4, #16
1000c914:	4323      	orrs	r3, r4
1000c916:	429f      	cmp	r7, r3
1000c918:	d90d      	bls.n	1000c936 <__aeabi_ddiv+0x282>
1000c91a:	465a      	mov	r2, fp
1000c91c:	199b      	adds	r3, r3, r6
1000c91e:	3a01      	subs	r2, #1
1000c920:	429e      	cmp	r6, r3
1000c922:	d900      	bls.n	1000c926 <__aeabi_ddiv+0x272>
1000c924:	e130      	b.n	1000cb88 <__aeabi_ddiv+0x4d4>
1000c926:	429f      	cmp	r7, r3
1000c928:	d800      	bhi.n	1000c92c <__aeabi_ddiv+0x278>
1000c92a:	e12d      	b.n	1000cb88 <__aeabi_ddiv+0x4d4>
1000c92c:	2202      	movs	r2, #2
1000c92e:	4252      	negs	r2, r2
1000c930:	4694      	mov	ip, r2
1000c932:	199b      	adds	r3, r3, r6
1000c934:	44e3      	add	fp, ip
1000c936:	9a02      	ldr	r2, [sp, #8]
1000c938:	1bdb      	subs	r3, r3, r7
1000c93a:	0417      	lsls	r7, r2, #16
1000c93c:	465a      	mov	r2, fp
1000c93e:	433a      	orrs	r2, r7
1000c940:	4693      	mov	fp, r2
1000c942:	9c01      	ldr	r4, [sp, #4]
1000c944:	0c17      	lsrs	r7, r2, #16
1000c946:	0c22      	lsrs	r2, r4, #16
1000c948:	1c10      	adds	r0, r2, #0
1000c94a:	9204      	str	r2, [sp, #16]
1000c94c:	465a      	mov	r2, fp
1000c94e:	0411      	lsls	r1, r2, #16
1000c950:	0422      	lsls	r2, r4, #16
1000c952:	0c12      	lsrs	r2, r2, #16
1000c954:	1c14      	adds	r4, r2, #0
1000c956:	0c09      	lsrs	r1, r1, #16
1000c958:	437c      	muls	r4, r7
1000c95a:	9205      	str	r2, [sp, #20]
1000c95c:	434a      	muls	r2, r1
1000c95e:	4341      	muls	r1, r0
1000c960:	4347      	muls	r7, r0
1000c962:	1861      	adds	r1, r4, r1
1000c964:	0c10      	lsrs	r0, r2, #16
1000c966:	1809      	adds	r1, r1, r0
1000c968:	428c      	cmp	r4, r1
1000c96a:	d903      	bls.n	1000c974 <__aeabi_ddiv+0x2c0>
1000c96c:	2080      	movs	r0, #128	; 0x80
1000c96e:	0240      	lsls	r0, r0, #9
1000c970:	4684      	mov	ip, r0
1000c972:	4467      	add	r7, ip
1000c974:	0c0c      	lsrs	r4, r1, #16
1000c976:	0412      	lsls	r2, r2, #16
1000c978:	0408      	lsls	r0, r1, #16
1000c97a:	0c12      	lsrs	r2, r2, #16
1000c97c:	193c      	adds	r4, r7, r4
1000c97e:	1881      	adds	r1, r0, r2
1000c980:	42a3      	cmp	r3, r4
1000c982:	d200      	bcs.n	1000c986 <__aeabi_ddiv+0x2d2>
1000c984:	e0e5      	b.n	1000cb52 <__aeabi_ddiv+0x49e>
1000c986:	d100      	bne.n	1000c98a <__aeabi_ddiv+0x2d6>
1000c988:	e0df      	b.n	1000cb4a <__aeabi_ddiv+0x496>
1000c98a:	1b1f      	subs	r7, r3, r4
1000c98c:	4643      	mov	r3, r8
1000c98e:	1a5c      	subs	r4, r3, r1
1000c990:	45a0      	cmp	r8, r4
1000c992:	4192      	sbcs	r2, r2
1000c994:	4252      	negs	r2, r2
1000c996:	1abf      	subs	r7, r7, r2
1000c998:	42b7      	cmp	r7, r6
1000c99a:	d100      	bne.n	1000c99e <__aeabi_ddiv+0x2ea>
1000c99c:	e10e      	b.n	1000cbbc <__aeabi_ddiv+0x508>
1000c99e:	1c38      	adds	r0, r7, #0
1000c9a0:	4649      	mov	r1, r9
1000c9a2:	f7f9 fee7 	bl	10006774 <__aeabi_uidiv>
1000c9a6:	9b00      	ldr	r3, [sp, #0]
1000c9a8:	9002      	str	r0, [sp, #8]
1000c9aa:	4343      	muls	r3, r0
1000c9ac:	4649      	mov	r1, r9
1000c9ae:	1c38      	adds	r0, r7, #0
1000c9b0:	4698      	mov	r8, r3
1000c9b2:	f7f9 ff65 	bl	10006880 <__aeabi_uidivmod>
1000c9b6:	0c23      	lsrs	r3, r4, #16
1000c9b8:	040f      	lsls	r7, r1, #16
1000c9ba:	431f      	orrs	r7, r3
1000c9bc:	45b8      	cmp	r8, r7
1000c9be:	d90c      	bls.n	1000c9da <__aeabi_ddiv+0x326>
1000c9c0:	9b02      	ldr	r3, [sp, #8]
1000c9c2:	19bf      	adds	r7, r7, r6
1000c9c4:	3b01      	subs	r3, #1
1000c9c6:	42be      	cmp	r6, r7
1000c9c8:	d900      	bls.n	1000c9cc <__aeabi_ddiv+0x318>
1000c9ca:	e0fb      	b.n	1000cbc4 <__aeabi_ddiv+0x510>
1000c9cc:	45b8      	cmp	r8, r7
1000c9ce:	d800      	bhi.n	1000c9d2 <__aeabi_ddiv+0x31e>
1000c9d0:	e0f8      	b.n	1000cbc4 <__aeabi_ddiv+0x510>
1000c9d2:	9b02      	ldr	r3, [sp, #8]
1000c9d4:	19bf      	adds	r7, r7, r6
1000c9d6:	3b02      	subs	r3, #2
1000c9d8:	9302      	str	r3, [sp, #8]
1000c9da:	4643      	mov	r3, r8
1000c9dc:	1aff      	subs	r7, r7, r3
1000c9de:	4649      	mov	r1, r9
1000c9e0:	1c38      	adds	r0, r7, #0
1000c9e2:	f7f9 fec7 	bl	10006774 <__aeabi_uidiv>
1000c9e6:	9b00      	ldr	r3, [sp, #0]
1000c9e8:	9003      	str	r0, [sp, #12]
1000c9ea:	4343      	muls	r3, r0
1000c9ec:	4649      	mov	r1, r9
1000c9ee:	1c38      	adds	r0, r7, #0
1000c9f0:	4698      	mov	r8, r3
1000c9f2:	f7f9 ff45 	bl	10006880 <__aeabi_uidivmod>
1000c9f6:	0424      	lsls	r4, r4, #16
1000c9f8:	0409      	lsls	r1, r1, #16
1000c9fa:	0c24      	lsrs	r4, r4, #16
1000c9fc:	4321      	orrs	r1, r4
1000c9fe:	4588      	cmp	r8, r1
1000ca00:	d90c      	bls.n	1000ca1c <__aeabi_ddiv+0x368>
1000ca02:	9b03      	ldr	r3, [sp, #12]
1000ca04:	1989      	adds	r1, r1, r6
1000ca06:	3b01      	subs	r3, #1
1000ca08:	428e      	cmp	r6, r1
1000ca0a:	d900      	bls.n	1000ca0e <__aeabi_ddiv+0x35a>
1000ca0c:	e0dc      	b.n	1000cbc8 <__aeabi_ddiv+0x514>
1000ca0e:	4588      	cmp	r8, r1
1000ca10:	d800      	bhi.n	1000ca14 <__aeabi_ddiv+0x360>
1000ca12:	e0d9      	b.n	1000cbc8 <__aeabi_ddiv+0x514>
1000ca14:	9b03      	ldr	r3, [sp, #12]
1000ca16:	1989      	adds	r1, r1, r6
1000ca18:	3b02      	subs	r3, #2
1000ca1a:	9303      	str	r3, [sp, #12]
1000ca1c:	4643      	mov	r3, r8
1000ca1e:	1ac9      	subs	r1, r1, r3
1000ca20:	9b02      	ldr	r3, [sp, #8]
1000ca22:	9a03      	ldr	r2, [sp, #12]
1000ca24:	041b      	lsls	r3, r3, #16
1000ca26:	9c05      	ldr	r4, [sp, #20]
1000ca28:	431a      	orrs	r2, r3
1000ca2a:	0c10      	lsrs	r0, r2, #16
1000ca2c:	0413      	lsls	r3, r2, #16
1000ca2e:	4691      	mov	r9, r2
1000ca30:	1c22      	adds	r2, r4, #0
1000ca32:	9f04      	ldr	r7, [sp, #16]
1000ca34:	0c1b      	lsrs	r3, r3, #16
1000ca36:	435a      	muls	r2, r3
1000ca38:	4344      	muls	r4, r0
1000ca3a:	437b      	muls	r3, r7
1000ca3c:	4378      	muls	r0, r7
1000ca3e:	18e3      	adds	r3, r4, r3
1000ca40:	0c17      	lsrs	r7, r2, #16
1000ca42:	19db      	adds	r3, r3, r7
1000ca44:	429c      	cmp	r4, r3
1000ca46:	d903      	bls.n	1000ca50 <__aeabi_ddiv+0x39c>
1000ca48:	2480      	movs	r4, #128	; 0x80
1000ca4a:	0264      	lsls	r4, r4, #9
1000ca4c:	46a4      	mov	ip, r4
1000ca4e:	4460      	add	r0, ip
1000ca50:	0c1c      	lsrs	r4, r3, #16
1000ca52:	0412      	lsls	r2, r2, #16
1000ca54:	041b      	lsls	r3, r3, #16
1000ca56:	0c12      	lsrs	r2, r2, #16
1000ca58:	1900      	adds	r0, r0, r4
1000ca5a:	189b      	adds	r3, r3, r2
1000ca5c:	4281      	cmp	r1, r0
1000ca5e:	d200      	bcs.n	1000ca62 <__aeabi_ddiv+0x3ae>
1000ca60:	e096      	b.n	1000cb90 <__aeabi_ddiv+0x4dc>
1000ca62:	d100      	bne.n	1000ca66 <__aeabi_ddiv+0x3b2>
1000ca64:	e0fc      	b.n	1000cc60 <__aeabi_ddiv+0x5ac>
1000ca66:	464a      	mov	r2, r9
1000ca68:	2301      	movs	r3, #1
1000ca6a:	431a      	orrs	r2, r3
1000ca6c:	4691      	mov	r9, r2
1000ca6e:	4b9b      	ldr	r3, [pc, #620]	; (1000ccdc <__aeabi_ddiv+0x628>)
1000ca70:	18eb      	adds	r3, r5, r3
1000ca72:	2b00      	cmp	r3, #0
1000ca74:	dc00      	bgt.n	1000ca78 <__aeabi_ddiv+0x3c4>
1000ca76:	e099      	b.n	1000cbac <__aeabi_ddiv+0x4f8>
1000ca78:	464a      	mov	r2, r9
1000ca7a:	0752      	lsls	r2, r2, #29
1000ca7c:	d00a      	beq.n	1000ca94 <__aeabi_ddiv+0x3e0>
1000ca7e:	220f      	movs	r2, #15
1000ca80:	4649      	mov	r1, r9
1000ca82:	400a      	ands	r2, r1
1000ca84:	2a04      	cmp	r2, #4
1000ca86:	d005      	beq.n	1000ca94 <__aeabi_ddiv+0x3e0>
1000ca88:	3104      	adds	r1, #4
1000ca8a:	4549      	cmp	r1, r9
1000ca8c:	4192      	sbcs	r2, r2
1000ca8e:	4689      	mov	r9, r1
1000ca90:	4252      	negs	r2, r2
1000ca92:	4493      	add	fp, r2
1000ca94:	465a      	mov	r2, fp
1000ca96:	01d2      	lsls	r2, r2, #7
1000ca98:	d506      	bpl.n	1000caa8 <__aeabi_ddiv+0x3f4>
1000ca9a:	465a      	mov	r2, fp
1000ca9c:	4b90      	ldr	r3, [pc, #576]	; (1000cce0 <__aeabi_ddiv+0x62c>)
1000ca9e:	401a      	ands	r2, r3
1000caa0:	2380      	movs	r3, #128	; 0x80
1000caa2:	4693      	mov	fp, r2
1000caa4:	00db      	lsls	r3, r3, #3
1000caa6:	18eb      	adds	r3, r5, r3
1000caa8:	4a8e      	ldr	r2, [pc, #568]	; (1000cce4 <__aeabi_ddiv+0x630>)
1000caaa:	4293      	cmp	r3, r2
1000caac:	dd00      	ble.n	1000cab0 <__aeabi_ddiv+0x3fc>
1000caae:	e662      	b.n	1000c776 <__aeabi_ddiv+0xc2>
1000cab0:	464a      	mov	r2, r9
1000cab2:	4659      	mov	r1, fp
1000cab4:	08d2      	lsrs	r2, r2, #3
1000cab6:	0749      	lsls	r1, r1, #29
1000cab8:	4311      	orrs	r1, r2
1000caba:	465a      	mov	r2, fp
1000cabc:	4689      	mov	r9, r1
1000cabe:	0257      	lsls	r7, r2, #9
1000cac0:	4651      	mov	r1, sl
1000cac2:	2201      	movs	r2, #1
1000cac4:	055b      	lsls	r3, r3, #21
1000cac6:	0b3f      	lsrs	r7, r7, #12
1000cac8:	0d5b      	lsrs	r3, r3, #21
1000caca:	400a      	ands	r2, r1
1000cacc:	e65a      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000cace:	2080      	movs	r0, #128	; 0x80
1000cad0:	465a      	mov	r2, fp
1000cad2:	0300      	lsls	r0, r0, #12
1000cad4:	4202      	tst	r2, r0
1000cad6:	d008      	beq.n	1000caea <__aeabi_ddiv+0x436>
1000cad8:	4207      	tst	r7, r0
1000cada:	d106      	bne.n	1000caea <__aeabi_ddiv+0x436>
1000cadc:	4307      	orrs	r7, r0
1000cade:	033f      	lsls	r7, r7, #12
1000cae0:	4699      	mov	r9, r3
1000cae2:	0b3f      	lsrs	r7, r7, #12
1000cae4:	4642      	mov	r2, r8
1000cae6:	4b80      	ldr	r3, [pc, #512]	; (1000cce8 <__aeabi_ddiv+0x634>)
1000cae8:	e64c      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000caea:	465f      	mov	r7, fp
1000caec:	4307      	orrs	r7, r0
1000caee:	033f      	lsls	r7, r7, #12
1000caf0:	0b3f      	lsrs	r7, r7, #12
1000caf2:	1c22      	adds	r2, r4, #0
1000caf4:	4b7c      	ldr	r3, [pc, #496]	; (1000cce8 <__aeabi_ddiv+0x634>)
1000caf6:	e645      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000caf8:	f7fb ffc8 	bl	10008a8c <__clzsi2>
1000cafc:	1c03      	adds	r3, r0, #0
1000cafe:	3020      	adds	r0, #32
1000cb00:	2827      	cmp	r0, #39	; 0x27
1000cb02:	dc00      	bgt.n	1000cb06 <__aeabi_ddiv+0x452>
1000cb04:	e65e      	b.n	1000c7c4 <__aeabi_ddiv+0x110>
1000cb06:	3b08      	subs	r3, #8
1000cb08:	409e      	lsls	r6, r3
1000cb0a:	2300      	movs	r3, #0
1000cb0c:	46b3      	mov	fp, r6
1000cb0e:	4699      	mov	r9, r3
1000cb10:	e665      	b.n	1000c7de <__aeabi_ddiv+0x12a>
1000cb12:	4650      	mov	r0, sl
1000cb14:	f7fb ffba 	bl	10008a8c <__clzsi2>
1000cb18:	1c02      	adds	r2, r0, #0
1000cb1a:	3220      	adds	r2, #32
1000cb1c:	2a27      	cmp	r2, #39	; 0x27
1000cb1e:	dc00      	bgt.n	1000cb22 <__aeabi_ddiv+0x46e>
1000cb20:	e675      	b.n	1000c80e <__aeabi_ddiv+0x15a>
1000cb22:	4657      	mov	r7, sl
1000cb24:	3808      	subs	r0, #8
1000cb26:	4087      	lsls	r7, r0
1000cb28:	2300      	movs	r3, #0
1000cb2a:	e67b      	b.n	1000c824 <__aeabi_ddiv+0x170>
1000cb2c:	4599      	cmp	r9, r3
1000cb2e:	d200      	bcs.n	1000cb32 <__aeabi_ddiv+0x47e>
1000cb30:	e6af      	b.n	1000c892 <__aeabi_ddiv+0x1de>
1000cb32:	465a      	mov	r2, fp
1000cb34:	4659      	mov	r1, fp
1000cb36:	0854      	lsrs	r4, r2, #1
1000cb38:	464a      	mov	r2, r9
1000cb3a:	07c8      	lsls	r0, r1, #31
1000cb3c:	0852      	lsrs	r2, r2, #1
1000cb3e:	4302      	orrs	r2, r0
1000cb40:	9203      	str	r2, [sp, #12]
1000cb42:	464a      	mov	r2, r9
1000cb44:	07d2      	lsls	r2, r2, #31
1000cb46:	4690      	mov	r8, r2
1000cb48:	e6a9      	b.n	1000c89e <__aeabi_ddiv+0x1ea>
1000cb4a:	2700      	movs	r7, #0
1000cb4c:	4588      	cmp	r8, r1
1000cb4e:	d300      	bcc.n	1000cb52 <__aeabi_ddiv+0x49e>
1000cb50:	e71c      	b.n	1000c98c <__aeabi_ddiv+0x2d8>
1000cb52:	9f01      	ldr	r7, [sp, #4]
1000cb54:	465a      	mov	r2, fp
1000cb56:	46bc      	mov	ip, r7
1000cb58:	44e0      	add	r8, ip
1000cb5a:	45b8      	cmp	r8, r7
1000cb5c:	41bf      	sbcs	r7, r7
1000cb5e:	427f      	negs	r7, r7
1000cb60:	19bf      	adds	r7, r7, r6
1000cb62:	18ff      	adds	r7, r7, r3
1000cb64:	3a01      	subs	r2, #1
1000cb66:	42be      	cmp	r6, r7
1000cb68:	d206      	bcs.n	1000cb78 <__aeabi_ddiv+0x4c4>
1000cb6a:	42bc      	cmp	r4, r7
1000cb6c:	d85f      	bhi.n	1000cc2e <__aeabi_ddiv+0x57a>
1000cb6e:	d100      	bne.n	1000cb72 <__aeabi_ddiv+0x4be>
1000cb70:	e09f      	b.n	1000ccb2 <__aeabi_ddiv+0x5fe>
1000cb72:	1b3f      	subs	r7, r7, r4
1000cb74:	4693      	mov	fp, r2
1000cb76:	e709      	b.n	1000c98c <__aeabi_ddiv+0x2d8>
1000cb78:	42b7      	cmp	r7, r6
1000cb7a:	d1fa      	bne.n	1000cb72 <__aeabi_ddiv+0x4be>
1000cb7c:	9b01      	ldr	r3, [sp, #4]
1000cb7e:	4543      	cmp	r3, r8
1000cb80:	d9f3      	bls.n	1000cb6a <__aeabi_ddiv+0x4b6>
1000cb82:	1b37      	subs	r7, r6, r4
1000cb84:	4693      	mov	fp, r2
1000cb86:	e701      	b.n	1000c98c <__aeabi_ddiv+0x2d8>
1000cb88:	4693      	mov	fp, r2
1000cb8a:	e6d4      	b.n	1000c936 <__aeabi_ddiv+0x282>
1000cb8c:	9302      	str	r3, [sp, #8]
1000cb8e:	e6b1      	b.n	1000c8f4 <__aeabi_ddiv+0x240>
1000cb90:	464a      	mov	r2, r9
1000cb92:	1989      	adds	r1, r1, r6
1000cb94:	3a01      	subs	r2, #1
1000cb96:	428e      	cmp	r6, r1
1000cb98:	d918      	bls.n	1000cbcc <__aeabi_ddiv+0x518>
1000cb9a:	4691      	mov	r9, r2
1000cb9c:	4281      	cmp	r1, r0
1000cb9e:	d000      	beq.n	1000cba2 <__aeabi_ddiv+0x4ee>
1000cba0:	e761      	b.n	1000ca66 <__aeabi_ddiv+0x3b2>
1000cba2:	9a01      	ldr	r2, [sp, #4]
1000cba4:	429a      	cmp	r2, r3
1000cba6:	d000      	beq.n	1000cbaa <__aeabi_ddiv+0x4f6>
1000cba8:	e75d      	b.n	1000ca66 <__aeabi_ddiv+0x3b2>
1000cbaa:	e760      	b.n	1000ca6e <__aeabi_ddiv+0x3ba>
1000cbac:	4f4f      	ldr	r7, [pc, #316]	; (1000ccec <__aeabi_ddiv+0x638>)
1000cbae:	1b7f      	subs	r7, r7, r5
1000cbb0:	2f38      	cmp	r7, #56	; 0x38
1000cbb2:	dd13      	ble.n	1000cbdc <__aeabi_ddiv+0x528>
1000cbb4:	2201      	movs	r2, #1
1000cbb6:	4653      	mov	r3, sl
1000cbb8:	401a      	ands	r2, r3
1000cbba:	e64f      	b.n	1000c85c <__aeabi_ddiv+0x1a8>
1000cbbc:	2301      	movs	r3, #1
1000cbbe:	425b      	negs	r3, r3
1000cbc0:	4699      	mov	r9, r3
1000cbc2:	e754      	b.n	1000ca6e <__aeabi_ddiv+0x3ba>
1000cbc4:	9302      	str	r3, [sp, #8]
1000cbc6:	e708      	b.n	1000c9da <__aeabi_ddiv+0x326>
1000cbc8:	9303      	str	r3, [sp, #12]
1000cbca:	e727      	b.n	1000ca1c <__aeabi_ddiv+0x368>
1000cbcc:	4288      	cmp	r0, r1
1000cbce:	d83c      	bhi.n	1000cc4a <__aeabi_ddiv+0x596>
1000cbd0:	d074      	beq.n	1000ccbc <__aeabi_ddiv+0x608>
1000cbd2:	4691      	mov	r9, r2
1000cbd4:	e747      	b.n	1000ca66 <__aeabi_ddiv+0x3b2>
1000cbd6:	9b01      	ldr	r3, [sp, #4]
1000cbd8:	469a      	mov	sl, r3
1000cbda:	e748      	b.n	1000ca6e <__aeabi_ddiv+0x3ba>
1000cbdc:	2f1f      	cmp	r7, #31
1000cbde:	dc44      	bgt.n	1000cc6a <__aeabi_ddiv+0x5b6>
1000cbe0:	4b43      	ldr	r3, [pc, #268]	; (1000ccf0 <__aeabi_ddiv+0x63c>)
1000cbe2:	464a      	mov	r2, r9
1000cbe4:	469c      	mov	ip, r3
1000cbe6:	465b      	mov	r3, fp
1000cbe8:	4465      	add	r5, ip
1000cbea:	40fa      	lsrs	r2, r7
1000cbec:	40ab      	lsls	r3, r5
1000cbee:	4313      	orrs	r3, r2
1000cbf0:	464a      	mov	r2, r9
1000cbf2:	40aa      	lsls	r2, r5
1000cbf4:	1c15      	adds	r5, r2, #0
1000cbf6:	1e6a      	subs	r2, r5, #1
1000cbf8:	4195      	sbcs	r5, r2
1000cbfa:	465a      	mov	r2, fp
1000cbfc:	40fa      	lsrs	r2, r7
1000cbfe:	432b      	orrs	r3, r5
1000cc00:	1c17      	adds	r7, r2, #0
1000cc02:	075a      	lsls	r2, r3, #29
1000cc04:	d009      	beq.n	1000cc1a <__aeabi_ddiv+0x566>
1000cc06:	220f      	movs	r2, #15
1000cc08:	401a      	ands	r2, r3
1000cc0a:	2a04      	cmp	r2, #4
1000cc0c:	d005      	beq.n	1000cc1a <__aeabi_ddiv+0x566>
1000cc0e:	1d1a      	adds	r2, r3, #4
1000cc10:	429a      	cmp	r2, r3
1000cc12:	419b      	sbcs	r3, r3
1000cc14:	425b      	negs	r3, r3
1000cc16:	18ff      	adds	r7, r7, r3
1000cc18:	1c13      	adds	r3, r2, #0
1000cc1a:	023a      	lsls	r2, r7, #8
1000cc1c:	d53e      	bpl.n	1000cc9c <__aeabi_ddiv+0x5e8>
1000cc1e:	4653      	mov	r3, sl
1000cc20:	2201      	movs	r2, #1
1000cc22:	2100      	movs	r1, #0
1000cc24:	401a      	ands	r2, r3
1000cc26:	2700      	movs	r7, #0
1000cc28:	2301      	movs	r3, #1
1000cc2a:	4689      	mov	r9, r1
1000cc2c:	e5aa      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000cc2e:	2302      	movs	r3, #2
1000cc30:	425b      	negs	r3, r3
1000cc32:	469c      	mov	ip, r3
1000cc34:	9a01      	ldr	r2, [sp, #4]
1000cc36:	44e3      	add	fp, ip
1000cc38:	4694      	mov	ip, r2
1000cc3a:	44e0      	add	r8, ip
1000cc3c:	4590      	cmp	r8, r2
1000cc3e:	419b      	sbcs	r3, r3
1000cc40:	425b      	negs	r3, r3
1000cc42:	199b      	adds	r3, r3, r6
1000cc44:	19df      	adds	r7, r3, r7
1000cc46:	1b3f      	subs	r7, r7, r4
1000cc48:	e6a0      	b.n	1000c98c <__aeabi_ddiv+0x2d8>
1000cc4a:	9f01      	ldr	r7, [sp, #4]
1000cc4c:	464a      	mov	r2, r9
1000cc4e:	007c      	lsls	r4, r7, #1
1000cc50:	42bc      	cmp	r4, r7
1000cc52:	41bf      	sbcs	r7, r7
1000cc54:	427f      	negs	r7, r7
1000cc56:	19bf      	adds	r7, r7, r6
1000cc58:	3a02      	subs	r2, #2
1000cc5a:	19c9      	adds	r1, r1, r7
1000cc5c:	9401      	str	r4, [sp, #4]
1000cc5e:	e79c      	b.n	1000cb9a <__aeabi_ddiv+0x4e6>
1000cc60:	2b00      	cmp	r3, #0
1000cc62:	d195      	bne.n	1000cb90 <__aeabi_ddiv+0x4dc>
1000cc64:	2200      	movs	r2, #0
1000cc66:	9201      	str	r2, [sp, #4]
1000cc68:	e79b      	b.n	1000cba2 <__aeabi_ddiv+0x4ee>
1000cc6a:	465a      	mov	r2, fp
1000cc6c:	4b21      	ldr	r3, [pc, #132]	; (1000ccf4 <__aeabi_ddiv+0x640>)
1000cc6e:	1b5b      	subs	r3, r3, r5
1000cc70:	40da      	lsrs	r2, r3
1000cc72:	2f20      	cmp	r7, #32
1000cc74:	d027      	beq.n	1000ccc6 <__aeabi_ddiv+0x612>
1000cc76:	4b20      	ldr	r3, [pc, #128]	; (1000ccf8 <__aeabi_ddiv+0x644>)
1000cc78:	469c      	mov	ip, r3
1000cc7a:	465b      	mov	r3, fp
1000cc7c:	4465      	add	r5, ip
1000cc7e:	40ab      	lsls	r3, r5
1000cc80:	4649      	mov	r1, r9
1000cc82:	430b      	orrs	r3, r1
1000cc84:	1e59      	subs	r1, r3, #1
1000cc86:	418b      	sbcs	r3, r1
1000cc88:	4313      	orrs	r3, r2
1000cc8a:	2207      	movs	r2, #7
1000cc8c:	2700      	movs	r7, #0
1000cc8e:	401a      	ands	r2, r3
1000cc90:	d007      	beq.n	1000cca2 <__aeabi_ddiv+0x5ee>
1000cc92:	220f      	movs	r2, #15
1000cc94:	2700      	movs	r7, #0
1000cc96:	401a      	ands	r2, r3
1000cc98:	2a04      	cmp	r2, #4
1000cc9a:	d1b8      	bne.n	1000cc0e <__aeabi_ddiv+0x55a>
1000cc9c:	077a      	lsls	r2, r7, #29
1000cc9e:	027f      	lsls	r7, r7, #9
1000cca0:	0b3f      	lsrs	r7, r7, #12
1000cca2:	08db      	lsrs	r3, r3, #3
1000cca4:	4313      	orrs	r3, r2
1000cca6:	4699      	mov	r9, r3
1000cca8:	2201      	movs	r2, #1
1000ccaa:	4653      	mov	r3, sl
1000ccac:	401a      	ands	r2, r3
1000ccae:	2300      	movs	r3, #0
1000ccb0:	e568      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000ccb2:	4541      	cmp	r1, r8
1000ccb4:	d8bb      	bhi.n	1000cc2e <__aeabi_ddiv+0x57a>
1000ccb6:	4693      	mov	fp, r2
1000ccb8:	2700      	movs	r7, #0
1000ccba:	e667      	b.n	1000c98c <__aeabi_ddiv+0x2d8>
1000ccbc:	9c01      	ldr	r4, [sp, #4]
1000ccbe:	429c      	cmp	r4, r3
1000ccc0:	d3c3      	bcc.n	1000cc4a <__aeabi_ddiv+0x596>
1000ccc2:	4691      	mov	r9, r2
1000ccc4:	e76d      	b.n	1000cba2 <__aeabi_ddiv+0x4ee>
1000ccc6:	2300      	movs	r3, #0
1000ccc8:	e7da      	b.n	1000cc80 <__aeabi_ddiv+0x5cc>
1000ccca:	2780      	movs	r7, #128	; 0x80
1000cccc:	465b      	mov	r3, fp
1000ccce:	033f      	lsls	r7, r7, #12
1000ccd0:	431f      	orrs	r7, r3
1000ccd2:	033f      	lsls	r7, r7, #12
1000ccd4:	0b3f      	lsrs	r7, r7, #12
1000ccd6:	9a01      	ldr	r2, [sp, #4]
1000ccd8:	4b03      	ldr	r3, [pc, #12]	; (1000cce8 <__aeabi_ddiv+0x634>)
1000ccda:	e553      	b.n	1000c784 <__aeabi_ddiv+0xd0>
1000ccdc:	000003ff 	.word	0x000003ff
1000cce0:	feffffff 	.word	0xfeffffff
1000cce4:	000007fe 	.word	0x000007fe
1000cce8:	000007ff 	.word	0x000007ff
1000ccec:	fffffc02 	.word	0xfffffc02
1000ccf0:	0000041e 	.word	0x0000041e
1000ccf4:	fffffbe2 	.word	0xfffffbe2
1000ccf8:	0000043e 	.word	0x0000043e

1000ccfc <__aeabi_d2iz>:
1000ccfc:	030b      	lsls	r3, r1, #12
1000ccfe:	b530      	push	{r4, r5, lr}
1000cd00:	4c13      	ldr	r4, [pc, #76]	; (1000cd50 <__aeabi_d2iz+0x54>)
1000cd02:	0b1a      	lsrs	r2, r3, #12
1000cd04:	004b      	lsls	r3, r1, #1
1000cd06:	1c05      	adds	r5, r0, #0
1000cd08:	0d5b      	lsrs	r3, r3, #21
1000cd0a:	0fc9      	lsrs	r1, r1, #31
1000cd0c:	2000      	movs	r0, #0
1000cd0e:	42a3      	cmp	r3, r4
1000cd10:	dd10      	ble.n	1000cd34 <__aeabi_d2iz+0x38>
1000cd12:	4810      	ldr	r0, [pc, #64]	; (1000cd54 <__aeabi_d2iz+0x58>)
1000cd14:	4283      	cmp	r3, r0
1000cd16:	dc0e      	bgt.n	1000cd36 <__aeabi_d2iz+0x3a>
1000cd18:	2080      	movs	r0, #128	; 0x80
1000cd1a:	4c0f      	ldr	r4, [pc, #60]	; (1000cd58 <__aeabi_d2iz+0x5c>)
1000cd1c:	0340      	lsls	r0, r0, #13
1000cd1e:	4302      	orrs	r2, r0
1000cd20:	1ae4      	subs	r4, r4, r3
1000cd22:	2c1f      	cmp	r4, #31
1000cd24:	dd0a      	ble.n	1000cd3c <__aeabi_d2iz+0x40>
1000cd26:	480d      	ldr	r0, [pc, #52]	; (1000cd5c <__aeabi_d2iz+0x60>)
1000cd28:	1ac3      	subs	r3, r0, r3
1000cd2a:	40da      	lsrs	r2, r3
1000cd2c:	1c13      	adds	r3, r2, #0
1000cd2e:	4248      	negs	r0, r1
1000cd30:	4043      	eors	r3, r0
1000cd32:	1858      	adds	r0, r3, r1
1000cd34:	bd30      	pop	{r4, r5, pc}
1000cd36:	4b0a      	ldr	r3, [pc, #40]	; (1000cd60 <__aeabi_d2iz+0x64>)
1000cd38:	18c8      	adds	r0, r1, r3
1000cd3a:	e7fb      	b.n	1000cd34 <__aeabi_d2iz+0x38>
1000cd3c:	1c28      	adds	r0, r5, #0
1000cd3e:	40e0      	lsrs	r0, r4
1000cd40:	4c08      	ldr	r4, [pc, #32]	; (1000cd64 <__aeabi_d2iz+0x68>)
1000cd42:	46a4      	mov	ip, r4
1000cd44:	4463      	add	r3, ip
1000cd46:	409a      	lsls	r2, r3
1000cd48:	1c13      	adds	r3, r2, #0
1000cd4a:	4303      	orrs	r3, r0
1000cd4c:	e7ef      	b.n	1000cd2e <__aeabi_d2iz+0x32>
1000cd4e:	46c0      	nop			; (mov r8, r8)
1000cd50:	000003fe 	.word	0x000003fe
1000cd54:	0000041d 	.word	0x0000041d
1000cd58:	00000433 	.word	0x00000433
1000cd5c:	00000413 	.word	0x00000413
1000cd60:	7fffffff 	.word	0x7fffffff
1000cd64:	fffffbed 	.word	0xfffffbed
1000cd68:	100017a4 	.word	0x100017a4
1000cd6c:	100017e6 	.word	0x100017e6
1000cd70:	1000180a 	.word	0x1000180a
1000cd74:	10001828 	.word	0x10001828
1000cd78:	10001870 	.word	0x10001870
1000cd7c:	1000187e 	.word	0x1000187e
1000cd80:	100019f0 	.word	0x100019f0
1000cd84:	10001a08 	.word	0x10001a08
1000cd88:	10001a24 	.word	0x10001a24
1000cd8c:	10001a88 	.word	0x10001a88
1000cd90:	10001aa2 	.word	0x10001aa2
1000cd94:	10001b22 	.word	0x10001b22
1000cd98:	10001c52 	.word	0x10001c52
1000cd9c:	10001d04 	.word	0x10001d04
1000cda0:	10001dfe 	.word	0x10001dfe
1000cda4:	10001eba 	.word	0x10001eba
1000cda8:	10001f84 	.word	0x10001f84
1000cdac:	10002056 	.word	0x10002056
1000cdb0:	10002130 	.word	0x10002130
1000cdb4:	10002176 	.word	0x10002176
1000cdb8:	10005a42 	.word	0x10005a42
1000cdbc:	10005a42 	.word	0x10005a42
1000cdc0:	10005a4c 	.word	0x10005a4c
1000cdc4:	10005a4c 	.word	0x10005a4c
1000cdc8:	10005a6e 	.word	0x10005a6e
1000cdcc:	10005a6e 	.word	0x10005a6e
1000cdd0:	10005a6e 	.word	0x10005a6e
1000cdd4:	10005a6e 	.word	0x10005a6e
1000cdd8:	10005a56 	.word	0x10005a56
1000cddc:	10005a62 	.word	0x10005a62

1000cde0 <g_xmc_vadc_group_array>:
1000cde0:	48030400 48030800 10006574 100065c4     ...H...Hte...e..
1000cdf0:	1000660e 10006656 1000669a 100066ec     .f..Vf...f...f..
1000ce00:	10006e46 10006e3e 10006e3e 10006e36     Fn..>n..>n..6n..
1000ce10:	10006d88 10006d88 10006e2c 10006e36     .m...m..,n..6n..
1000ce20:	10006d88 10006e2c 10006d88 10006e36     .m..,n...m..6n..
1000ce30:	10006d8a 10006d8a 10006d8a 10006ed0     .m...m...m...n..
1000ce40:	10007dac 10007d8a 10007d8a 10007d7e     .}...}...}..~}..
1000ce50:	10007c72 10007c72 10007d72 10007d7e     r|..r|..r}..~}..
1000ce60:	10007c72 10007d72 10007c72 10007d7e     r|..r}..r|..~}..
1000ce70:	10007c76 10007c76 10007c76 10007f8c     v|..v|..v|......
1000ce80:	4e490043 6e690046 414e0066 616e004e     C.INF.inf.NAN.na
1000ce90:	0030006e 33323130 37363534 42413938     n.0.0123456789AB
1000cea0:	46454443 32313000 36353433 61393837     CDEF.0123456789a
1000ceb0:	65646362 25650066 0000646c              bcdef.e%ld..

1000cebc <fpi.5242>:
1000cebc:	00000035 fffffbce 000003cb 00000001     5...............
1000cecc:	00000000                                ....

1000ced0 <tinytens>:
1000ced0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
1000cee0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
1000cef0:	64ac6f43 11680628                       Co.d(.h.

1000cef8 <fpinan.5278>:
1000cef8:	00000034 fffffbce 000003cb 00000001     4...............
1000cf08:	00000000                                ....

1000cf0c <_ctype_>:
1000cf0c:	20202000 20202020 28282020 20282828     .         ((((( 
1000cf1c:	20202020 20202020 20202020 20202020                     
1000cf2c:	10108820 10101010 10101010 10101010      ...............
1000cf3c:	04040410 04040404 10040404 10101010     ................
1000cf4c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1000cf5c:	01010101 01010101 01010101 10101010     ................
1000cf6c:	42421010 42424242 02020202 02020202     ..BBBBBB........
1000cf7c:	02020202 02020202 02020202 10101010     ................
1000cf8c:	00000020 00000000 00000000 00000000      ...............
	...
1000d00c:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
1000d01c:	00584953 0000002e 00000000              SIX.........

1000d028 <__mprec_tens>:
1000d028:	00000000 3ff00000 00000000 40240000     .......?......$@
1000d038:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1000d048:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1000d058:	00000000 412e8480 00000000 416312d0     .......A......cA
1000d068:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1000d078:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1000d088:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1000d098:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1000d0a8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1000d0b8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1000d0c8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1000d0d8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1000d0e8:	79d99db4 44ea7843                       ...yCx.D

1000d0f0 <__mprec_bigtens>:
1000d0f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1000d100:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1000d110:	7f73bf3c 75154fdd                       <.s..O.u

1000d118 <p05.5277>:
1000d118:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
1000d128:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
1000d138:	1000c888 1000c776 1000c85c 1000c762     ....v...\...b...
1000d148:	1000c85c 1000c866 1000c85c 1000c762     \...f...\...b...
1000d158:	1000c776 1000c776 1000c866 1000c762     v...v...f...b...
1000d168:	1000c76c 1000c76c 1000c76c 1000cace     l...l...l.......

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	10001af5 	.word	0x10001af5
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000176d 	.word	0x1000176d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	100019b5 	.word	0x100019b5
	Insert_InterruptVeener IRQ19	
2000011c:	10002231 	.word	0x10002231
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000276d 	.word	0x1000276d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000245d 	.word	0x1000245d
	Insert_InterruptVeener IRQ24	
20000130:	10002479 	.word	0x10002479
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
