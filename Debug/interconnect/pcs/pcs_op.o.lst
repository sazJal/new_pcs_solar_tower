   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "pcs_op.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_EnableIRQ,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_EnableIRQ:
  23              	.LFB27:
  24              	 .file 1 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include/core_cm0.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.6
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * @date     13. March 2019
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_FP
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1[31U];
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** */
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 624 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 021C     	 mov r2,r0
  39 0008 FB1D     	 add r3,r7,#7
  40 000a 1A70     	 strb r2,[r3]
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  41              	 .loc 1 625 0
  42 000c FB1D     	 add r3,r7,#7
  43 000e 1B78     	 ldrb r3,[r3]
  44 0010 7F2B     	 cmp r3,#127
  45 0012 09D8     	 bhi .L1
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     __COMPILER_BARRIER();
  46              	 .loc 1 627 0
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  47              	 .loc 1 628 0
  48 0014 064B     	 ldr r3,.L3
  49 0016 FA1D     	 add r2,r7,#7
  50 0018 1278     	 ldrb r2,[r2]
  51 001a 111C     	 mov r1,r2
  52 001c 1F22     	 mov r2,#31
  53 001e 0A40     	 and r2,r1
  54 0020 0121     	 mov r1,#1
  55 0022 9140     	 lsl r1,r1,r2
  56 0024 0A1C     	 mov r2,r1
  57 0026 1A60     	 str r2,[r3]
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     __COMPILER_BARRIER();
  58              	 .loc 1 629 0
  59              	.L1:
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
  60              	 .loc 1 631 0
  61 0028 BD46     	 mov sp,r7
  62 002a 02B0     	 add sp,sp,#8
  63              	 
  64 002c 80BD     	 pop {r7,pc}
  65              	.L4:
  66 002e C046     	 .align 2
  67              	.L3:
  68 0030 00E100E0 	 .word -536813312
  69              	 .cfi_endproc
  70              	.LFE27:
  72              	 .section .text.__NVIC_SetPriority,"ax",%progbits
  73              	 .align 2
  74              	 .code 16
  75              	 .thumb_func
  77              	__NVIC_SetPriority:
  78              	.LFB33:
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   else
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   else
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** 
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** /**
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****  */
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** {
  79              	 .loc 1 733 0
  80              	 .cfi_startproc
  81 0000 B0B5     	 push {r4,r5,r7,lr}
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 16
  84              	 .cfi_offset 4,-16
  85              	 .cfi_offset 5,-12
  86              	 .cfi_offset 7,-8
  87              	 .cfi_offset 14,-4
  88 0002 82B0     	 sub sp,sp,#8
  89              	.LCFI4:
  90              	 .cfi_def_cfa_offset 24
  91 0004 00AF     	 add r7,sp,#0
  92              	.LCFI5:
  93              	 .cfi_def_cfa_register 7
  94 0006 021C     	 mov r2,r0
  95 0008 3960     	 str r1,[r7]
  96 000a FB1D     	 add r3,r7,#7
  97 000c 1A70     	 strb r2,[r3]
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  98              	 .loc 1 734 0
  99 000e FB1D     	 add r3,r7,#7
 100 0010 1B78     	 ldrb r3,[r3]
 101 0012 7F2B     	 cmp r3,#127
 102 0014 27D8     	 bhi .L6
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 103              	 .loc 1 736 0
 104 0016 2D4C     	 ldr r4,.L8
 105 0018 FB1D     	 add r3,r7,#7
 106 001a 1B78     	 ldrb r3,[r3]
 107 001c 5BB2     	 sxtb r3,r3
 108 001e 9B08     	 lsr r3,r3,#2
 109 0020 2A49     	 ldr r1,.L8
 110 0022 FA1D     	 add r2,r7,#7
 111 0024 1278     	 ldrb r2,[r2]
 112 0026 52B2     	 sxtb r2,r2
 113 0028 9208     	 lsr r2,r2,#2
 114 002a C032     	 add r2,r2,#192
 115 002c 9200     	 lsl r2,r2,#2
 116 002e 5258     	 ldr r2,[r2,r1]
 117 0030 F91D     	 add r1,r7,#7
 118 0032 0978     	 ldrb r1,[r1]
 119 0034 081C     	 mov r0,r1
 120 0036 0321     	 mov r1,#3
 121 0038 0140     	 and r1,r0
 122 003a C900     	 lsl r1,r1,#3
 123 003c 081C     	 mov r0,r1
 124 003e FF21     	 mov r1,#255
 125 0040 8140     	 lsl r1,r1,r0
 126 0042 C943     	 mvn r1,r1
 127 0044 1140     	 and r1,r2
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 128              	 .loc 1 737 0
 129 0046 3A68     	 ldr r2,[r7]
 130 0048 9201     	 lsl r2,r2,#6
 131 004a FF20     	 mov r0,#255
 132 004c 0240     	 and r2,r0
 133 004e F81D     	 add r0,r7,#7
 134 0050 0078     	 ldrb r0,[r0]
 135 0052 051C     	 mov r5,r0
 136 0054 0320     	 mov r0,#3
 137 0056 2840     	 and r0,r5
 138 0058 C000     	 lsl r0,r0,#3
 139 005a 8240     	 lsl r2,r2,r0
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 140              	 .loc 1 736 0
 141 005c 0A43     	 orr r2,r1
 142 005e C033     	 add r3,r3,#192
 143 0060 9B00     	 lsl r3,r3,#2
 144 0062 1A51     	 str r2,[r3,r4]
 145 0064 2EE0     	 b .L5
 146              	.L6:
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   else
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   {
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 147              	 .loc 1 741 0
 148 0066 1A4C     	 ldr r4,.L8+4
 149 0068 FB1D     	 add r3,r7,#7
 150 006a 1B78     	 ldrb r3,[r3]
 151 006c 1A1C     	 mov r2,r3
 152 006e 0F23     	 mov r3,#15
 153 0070 1340     	 and r3,r2
 154 0072 083B     	 sub r3,r3,#8
 155 0074 9908     	 lsr r1,r3,#2
 156 0076 164A     	 ldr r2,.L8+4
 157 0078 FB1D     	 add r3,r7,#7
 158 007a 1B78     	 ldrb r3,[r3]
 159 007c 181C     	 mov r0,r3
 160 007e 0F23     	 mov r3,#15
 161 0080 0340     	 and r3,r0
 162 0082 083B     	 sub r3,r3,#8
 163 0084 9B08     	 lsr r3,r3,#2
 164 0086 0633     	 add r3,r3,#6
 165 0088 9B00     	 lsl r3,r3,#2
 166 008a D318     	 add r3,r2,r3
 167 008c 5B68     	 ldr r3,[r3,#4]
 168 008e FA1D     	 add r2,r7,#7
 169 0090 1278     	 ldrb r2,[r2]
 170 0092 101C     	 mov r0,r2
 171 0094 0322     	 mov r2,#3
 172 0096 0240     	 and r2,r0
 173 0098 D200     	 lsl r2,r2,#3
 174 009a 101C     	 mov r0,r2
 175 009c FF22     	 mov r2,#255
 176 009e 8240     	 lsl r2,r2,r0
 177 00a0 D243     	 mvn r2,r2
 178 00a2 1A40     	 and r2,r3
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 179              	 .loc 1 742 0
 180 00a4 3B68     	 ldr r3,[r7]
 181 00a6 9B01     	 lsl r3,r3,#6
 182 00a8 FF20     	 mov r0,#255
 183 00aa 0340     	 and r3,r0
 184 00ac F81D     	 add r0,r7,#7
 185 00ae 0078     	 ldrb r0,[r0]
 186 00b0 051C     	 mov r5,r0
 187 00b2 0320     	 mov r0,#3
 188 00b4 2840     	 and r0,r5
 189 00b6 C000     	 lsl r0,r0,#3
 190 00b8 8340     	 lsl r3,r3,r0
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 191              	 .loc 1 741 0
 192 00ba 1A43     	 orr r2,r3
 193 00bc 8B1D     	 add r3,r1,#6
 194 00be 9B00     	 lsl r3,r3,#2
 195 00c0 E318     	 add r3,r4,r3
 196 00c2 5A60     	 str r2,[r3,#4]
 197              	.L5:
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h ****   }
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include\core_cm0.h **** }
 198              	 .loc 1 744 0
 199 00c4 BD46     	 mov sp,r7
 200 00c6 02B0     	 add sp,sp,#8
 201              	 
 202 00c8 B0BD     	 pop {r4,r5,r7,pc}
 203              	.L9:
 204 00ca C046     	 .align 2
 205              	.L8:
 206 00cc 00E100E0 	 .word -536813312
 207 00d0 00ED00E0 	 .word -536810240
 208              	 .cfi_endproc
 209              	.LFE33:
 211              	 .section .text.XMC_CAN_NODE_SetReceiveInput,"ax",%progbits
 212              	 .align 2
 213              	 .code 16
 214              	 .thumb_func
 216              	XMC_CAN_NODE_SetReceiveInput:
 217              	.LFB234:
 218              	 .file 2 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  69:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  70:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  71:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
  72:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  73:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  74:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  75:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  76:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  77:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  78:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  79:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  80:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  81:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  82:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  83:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  84:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  85:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  86:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  87:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  88:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  89:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  90:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  91:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  92:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  93:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  94:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  96:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  97:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  98:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
  99:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {  
 457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** */
 552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     };
 573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   };
 575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   union{
 578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****       };
 585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 692:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 693:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 694:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 695:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 696:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 697:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 698:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 700:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 701:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 702:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 703:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 704:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 705:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 706:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 707:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 708:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 709:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 710:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 711:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 712:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 713:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 714:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 715:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 716:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 717:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 718:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 719:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 720:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 721:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 723:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 724:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 725:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 727:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 728:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 730:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 731:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 732:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 733:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 734:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 735:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 736:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 737:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 738:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 739:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 740:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 741:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 742:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 743:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 744:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 745:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 746:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 747:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 748:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 749:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 750:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 752:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 753:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 754:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 755:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 756:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 757:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 758:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 759:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 760:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 761:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 762:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 764:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 765:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 766:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 767:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 768:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 769:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 770:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 771:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 773:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 774:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 775:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 776:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 777:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 778:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 779:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 780:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 781:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 782:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * 
 783:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 784:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 785:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 786:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 787:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 788:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 789:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 790:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 791:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 792:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 793:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 795:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 796:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 797:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 798:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 799:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 800:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 801:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 802:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 803:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency 
 804:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 805:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 806:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 807:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 808:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 810:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 812:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 813:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 815:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 816:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 818:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 819:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 820:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 822:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 824:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 825:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 826:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 827:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 828:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 829:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 830:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 831:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 832:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 834:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 835:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
 836:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 837:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
 838:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 839:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 840:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 841:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 842:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 843:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 844:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 846:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 847:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 848:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 849:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 850:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 851:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 853:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 854:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 855:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 856:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 857:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 858:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 859:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 860:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 861:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 862:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 863:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 864:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 865:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 866:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 867:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 868:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 869:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 870:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 872:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 873:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 874:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 875:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 876:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 877:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 878:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 879:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 880:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 881:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 882:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 884:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 885:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 886:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 887:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 889:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 890:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 891:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 892:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 893:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 894:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 896:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 897:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 898:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 899:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 900:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 901:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 902:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 903:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 905:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 906:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 907:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 908:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 909:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 910:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 911:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 912:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 913:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 914:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 915:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 916:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 917:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 918:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 919:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 920:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 921:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 922:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 923:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 924:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 925:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 926:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 927:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 928:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 929:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 930:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 931:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 932:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 933:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 934:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
 935:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 936:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 937:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 938:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 940:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 941:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 942:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 943:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 219              	 .loc 2 943 0
 220              	 .cfi_startproc
 221 0000 80B5     	 push {r7,lr}
 222              	.LCFI6:
 223              	 .cfi_def_cfa_offset 8
 224              	 .cfi_offset 7,-8
 225              	 .cfi_offset 14,-4
 226 0002 82B0     	 sub sp,sp,#8
 227              	.LCFI7:
 228              	 .cfi_def_cfa_offset 16
 229 0004 00AF     	 add r7,sp,#0
 230              	.LCFI8:
 231              	 .cfi_def_cfa_register 7
 232 0006 7860     	 str r0,[r7,#4]
 233 0008 0A1C     	 mov r2,r1
 234 000a FB1C     	 add r3,r7,#3
 235 000c 1A70     	 strb r2,[r3]
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 236              	 .loc 2 944 0
 237 000e 7B68     	 ldr r3,[r7,#4]
 238 0010 DB68     	 ldr r3,[r3,#12]
 239 0012 0722     	 mov r2,#7
 240 0014 9343     	 bic r3,r2
 241 0016 1A1C     	 mov r2,r3
 945:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 242              	 .loc 2 945 0
 243 0018 FB1C     	 add r3,r7,#3
 244 001a 1B78     	 ldrb r3,[r3]
 245 001c 0721     	 mov r1,#7
 246 001e 0B40     	 and r3,r1
 944:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 247              	 .loc 2 944 0
 248 0020 1A43     	 orr r2,r3
 249 0022 7B68     	 ldr r3,[r7,#4]
 250 0024 DA60     	 str r2,[r3,#12]
 946:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 251              	 .loc 2 946 0
 252 0026 BD46     	 mov sp,r7
 253 0028 02B0     	 add sp,sp,#8
 254              	 
 255 002a 80BD     	 pop {r7,pc}
 256              	 .cfi_endproc
 257              	.LFE234:
 259              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 260              	 .align 2
 261              	 .code 16
 262              	 .thumb_func
 264              	XMC_CAN_NODE_EnableConfigurationChange:
 265              	.LFB247:
 947:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 948:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 949:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 950:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 951:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 952:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 953:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 955:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 956:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 957:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 958:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 959:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 960:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 961:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 962:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 963:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 965:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 966:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 967:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 968:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 969:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 970:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 971:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 972:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 973:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 974:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 975:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
 976:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 977:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 979:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 980:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 981:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 982:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 983:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 984:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 986:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 987:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 988:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 989:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 990:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 991:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
 993:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 994:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 995:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 996:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 997:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 998:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
 999:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1000:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1001:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1002:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1003:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1004:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1005:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1006:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1007:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1008:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1009:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1010:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1011:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1012:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1013:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1015:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1016:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1017:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1018:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1019:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1020:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1021:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1022:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1023:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1024:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1025:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1026:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1027:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1028:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1029:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1030:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1031:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1032:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1034:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1035:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1036:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1037:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1038:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1039:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1041:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1043:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1044:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1045:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1046:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1047:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1048:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1049:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1050:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1051:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1052:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1053:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1054:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1055:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1056:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1057:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1058:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1059:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1061:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1063:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1064:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1065:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1066:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1067:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1068:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1069:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1070:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1071:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1072:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1073:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1074:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1075:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1076:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1077:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1078:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1079:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1080:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1081:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1082:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1083:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1084:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1086:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1087:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1088:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1089:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1090:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1091:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1093:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1094:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1096:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1097:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1098:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1099:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1100:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1101:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1102:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1103:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1104:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1105:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1106:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1107:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1108:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1109:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1110:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1112:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1113:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1114:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1115:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1116:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1117:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1119:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1120:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1122:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1123:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1124:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1125:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1126:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1127:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1128:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1129:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1130:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1131:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1132:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1134:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1135:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1136:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1137:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1139:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1140:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1141:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1142:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1143:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1144:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1146:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1147:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1149:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1150:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1151:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1152:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1153:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1154:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1155:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1156:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1157:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1158:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1159:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1160:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1161:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1162:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1164:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1165:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1166:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1167:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1168:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1169:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1170:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1171:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1172:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1173:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1174:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1175:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1176:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1177:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1178:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1179:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1180:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1181:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1182:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1184:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1185:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1186:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1187:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1188:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1189:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1190:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1191:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1192:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1194:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1195:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1196:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1197:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1198:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1199:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1200:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1201:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1202:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1203:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1204:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1205:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1207:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1209:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1210:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1211:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1212:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1213:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1214:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1215:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1216:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1217:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1218:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1219:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1220:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1221:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1222:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1223:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1224:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1225:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1227:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1229:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1230:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1231:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1232:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1233:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1235:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1236:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1237:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1238:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1239:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1240:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1241:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1242:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1243:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1244:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1246:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1247:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1249:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1250:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1251:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1252:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1253:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1255:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1256:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1257:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1258:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1259:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1260:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1261:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1262:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1263:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1264:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1265:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1266:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1267:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1269:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1271:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1272:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1273:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1274:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1275:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1276:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1277:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1278:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1279:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1280:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 266              	 .loc 2 1280 0
 267              	 .cfi_startproc
 268 0000 80B5     	 push {r7,lr}
 269              	.LCFI9:
 270              	 .cfi_def_cfa_offset 8
 271              	 .cfi_offset 7,-8
 272              	 .cfi_offset 14,-4
 273 0002 82B0     	 sub sp,sp,#8
 274              	.LCFI10:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI11:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
1281:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 280              	 .loc 2 1281 0
 281 0008 7B68     	 ldr r3,[r7,#4]
 282 000a 1B68     	 ldr r3,[r3]
 283 000c 4022     	 mov r2,#64
 284 000e 1A43     	 orr r2,r3
 285 0010 7B68     	 ldr r3,[r7,#4]
 286 0012 1A60     	 str r2,[r3]
1282:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 287              	 .loc 2 1282 0
 288 0014 BD46     	 mov sp,r7
 289 0016 02B0     	 add sp,sp,#8
 290              	 
 291 0018 80BD     	 pop {r7,pc}
 292              	 .cfi_endproc
 293              	.LFE247:
 295 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 296              	 .align 2
 297              	 .code 16
 298              	 .thumb_func
 300              	XMC_CAN_NODE_DisableConfigurationChange:
 301              	.LFB248:
1283:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1284:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1285:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1286:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1288:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1290:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1291:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1292:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1293:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1294:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1295:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1296:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1297:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1298:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1299:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1300:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 302              	 .loc 2 1300 0
 303              	 .cfi_startproc
 304 0000 80B5     	 push {r7,lr}
 305              	.LCFI12:
 306              	 .cfi_def_cfa_offset 8
 307              	 .cfi_offset 7,-8
 308              	 .cfi_offset 14,-4
 309 0002 82B0     	 sub sp,sp,#8
 310              	.LCFI13:
 311              	 .cfi_def_cfa_offset 16
 312 0004 00AF     	 add r7,sp,#0
 313              	.LCFI14:
 314              	 .cfi_def_cfa_register 7
 315 0006 7860     	 str r0,[r7,#4]
1301:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 316              	 .loc 2 1301 0
 317 0008 7B68     	 ldr r3,[r7,#4]
 318 000a 1B68     	 ldr r3,[r3]
 319 000c 4022     	 mov r2,#64
 320 000e 9343     	 bic r3,r2
 321 0010 1A1C     	 mov r2,r3
 322 0012 7B68     	 ldr r3,[r7,#4]
 323 0014 1A60     	 str r2,[r3]
1302:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 324              	 .loc 2 1302 0
 325 0016 BD46     	 mov sp,r7
 326 0018 02B0     	 add sp,sp,#8
 327              	 
 328 001a 80BD     	 pop {r7,pc}
 329              	 .cfi_endproc
 330              	.LFE248:
 332              	 .section .text.XMC_CAN_NODE_ResetInitBit,"ax",%progbits
 333              	 .align 2
 334              	 .code 16
 335              	 .thumb_func
 337              	XMC_CAN_NODE_ResetInitBit:
 338              	.LFB250:
1303:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1304:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1305:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1306:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1307:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1308:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1309:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1310:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1311:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1312:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1313:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1314:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1315:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1316:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1317:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1318:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1319:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1320:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1321:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1322:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1323:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
1324:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1325:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1326:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1327:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1328:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1329:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1330:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1331:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1332:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1333:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1334:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1335:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1336:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1337:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1338:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1339:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1340:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1341:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 339              	 .loc 2 1341 0
 340              	 .cfi_startproc
 341 0000 80B5     	 push {r7,lr}
 342              	.LCFI15:
 343              	 .cfi_def_cfa_offset 8
 344              	 .cfi_offset 7,-8
 345              	 .cfi_offset 14,-4
 346 0002 82B0     	 sub sp,sp,#8
 347              	.LCFI16:
 348              	 .cfi_def_cfa_offset 16
 349 0004 00AF     	 add r7,sp,#0
 350              	.LCFI17:
 351              	 .cfi_def_cfa_register 7
 352 0006 7860     	 str r0,[r7,#4]
1342:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 353              	 .loc 2 1342 0
 354 0008 7B68     	 ldr r3,[r7,#4]
 355 000a 1B68     	 ldr r3,[r3]
 356 000c 0122     	 mov r2,#1
 357 000e 9343     	 bic r3,r2
 358 0010 1A1C     	 mov r2,r3
 359 0012 7B68     	 ldr r3,[r7,#4]
 360 0014 1A60     	 str r2,[r3]
1343:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 361              	 .loc 2 1343 0
 362 0016 BD46     	 mov sp,r7
 363 0018 02B0     	 add sp,sp,#8
 364              	 
 365 001a 80BD     	 pop {r7,pc}
 366              	 .cfi_endproc
 367              	.LFE250:
 369              	 .section .text.XMC_CAN_MO_SetEventNodePointer,"ax",%progbits
 370              	 .align 2
 371              	 .code 16
 372              	 .thumb_func
 374              	XMC_CAN_MO_SetEventNodePointer:
 375              	.LFB258:
1344:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1345:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1346:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1347:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1348:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1349:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1350:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1351:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1352:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1353:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1354:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1355:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1356:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1357:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1358:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1359:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1360:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1361:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
1362:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1363:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1364:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1365:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1366:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1367:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1368:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1369:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1370:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1371:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disable the CAN node, terminates participation in CAN traffic. It configures NCR.CANDIS bit.
1372:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1373:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1374:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1375:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1376:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1377:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Disable(XMC_CAN_NODE_t *const can_node)
1378:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1379:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1380:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1381:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1382:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1383:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1384:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1385:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1386:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1387:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1388:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configure CAN node in Analyzer Mode. This means that messages may be received, but not transmitt
1389:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * is sent on the CAN bus upon frame reception. Active-error flags are sent recessive instead of do
1390:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The transmit line is continuously held at recessive (1) level. XMC_CAN_NODE_SetInitBit() should 
1391:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * set / reset AnalyzerMode. It configures NCR.CALM bit.
1392:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1393:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1394:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ReSetAnalyzerMode()
1395:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1396:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1397:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1398:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1399:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1400:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1401:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
1402:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1403:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1404:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1405:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1406:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1407:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1408:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1409:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1410:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1411:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Reset the Analyzer mode. CAN node is no more in Analyzer Mode. Please refer XMC_CAN_NODE_SetAnal
1412:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NCR.CALM bit. XMC_CAN_NODE_SetInitBit() should be called before set / reset Analyz
1413:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1414:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1415:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetAnalyzerMode()
1416:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1417:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1418:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1419:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1420:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1421:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
1422:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1423:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1424:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
1425:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1426:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1427:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1428:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1429:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1430:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1431:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Trigger the suspension of the CAN node. An OCDS(on chip debug support) suspend trigger disables 
1432:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * soon as the CAN node becomes bus-idle or bus-off, bit INIT is internally forced to 1 to disable 
1433:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * The actual value of bit INIT remains unchanged. It configures NCR.SUSEN bit
1434:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1435:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1436:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1437:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1438:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Note:</b><br>
1439:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Bit SUSEN is reset via OCDS(on chip debug support) Reset.
1440:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1441:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1442:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1443:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableSuspend(XMC_CAN_NODE_t *const can_node)
1444:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1445:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_SUSEN_Msk;
1446:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1447:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #else
1448:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1449:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1450:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1451:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1452:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1453:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1454:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Disables the transmission on CAN node x as soon as bus-idle is reached.
1455:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1456:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1457:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1458:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1459:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @note Only available for XMC1400,XMC4800 and XMC4700 series
1460:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1461:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1462:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableTransmit(XMC_CAN_NODE_t *const can_node)
1463:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1464:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_TXDIS_Msk;
1465:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1466:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** #endif
1467:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1468:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1469:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1470:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1471:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1472:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_init frame counter mode selection. Refer @ref XMC_CAN_NODE_FRAME_COUNTER_t for v
1473:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1474:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1475:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1476:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1477:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures frame counter functions. Each CAN \a can_node is equipped with a frame counter that c
1478:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * CAN frames or obtains information about the time when a frame has been started to transmit or be
1479:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * node. It configures NFCR register.
1480:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1481:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1482:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1483:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1484:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1485:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1486:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_FrameCounterConfigure(XMC_CAN_NODE_t *const can_node,
1487:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                         const XMC_CAN_NODE_FRAME_COUNTER_t *const can_node_init)
1488:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1489:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NFCR = (can_node->NFCR & ~(uint32_t)(CAN_NODE_NFCR_CFMOD_Msk |
1490:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                        CAN_NODE_NFCR_CFSEL_Msk)) |
1491:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                     can_node_init->nfcr;
1492:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1493:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1494:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1495:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1496:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1497:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1498:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1499:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint16_t current value of the CAN frame counter. Range :0-65535
1500:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1501:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1502:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns the frame counter value \a can_node of the CAN node. In Frame Count Mode (CFMOD = 00B),
1503:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  count value. In Time Stamp Mode (CFMOD = 01B), this API returns the captured bit time count val
1504:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  the start of a new frame. In all Bit Timing Analysis Modes (CFMOD = 10B), this API always retur
1505:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  fCLC clock cycles (measurement result) minus 1.
1506:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1507:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1508:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1509:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1510:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1511:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1512:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint16_t XMC_CAN_NODE_GetCANFrameCounter(XMC_CAN_NODE_t *const can_node)
1513:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1514:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return (uint16_t)(((uint32_t)(can_node->NFCR & CAN_NODE_NFCR_CFC_Msk) >> CAN_NODE_NFCR_CFC_Pos));
1515:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1516:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1517:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                      /*MO APIs*/
1518:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1519:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1520:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1521:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1522:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1523:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1524:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1525:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1526:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1527:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1528:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Data to be transmitted and data length code.
1529:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1530:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1531:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_Config()\n\n\n
1532:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1533:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1534:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1535:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1536:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo);
1537:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1538:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1539:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1540:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1541:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1542:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1543:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1544:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1545:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures transmit request for sending data frame. It configures MOCTR register. Data shall be
1546:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  using XMC_CAN_MO_UpdateData() before calling this API.
1547:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1548:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1549:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_UpdateData()\n\n\n
1550:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1551:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1552:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1553:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo);
1554:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1555:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1556:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1557:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1558:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1559:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1560:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1561:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1562:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1563:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1564:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1565:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1566:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1567:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1568:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1569:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1570:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive(XMC_CAN_MO_t *can_mo);
1571:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1572:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1573:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1574:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1575:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1576:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1577:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1578:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1579:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1580:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1581:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1582:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1583:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1584:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1585:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1586:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo);
1587:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1588:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo       Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure 
1589:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo_ptr_int   Message Object event node pointer selection. Refer @ref XMC_CAN_MO_POINT
1590:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *                for valid values.
1591:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request interrupt output line of multiCAN module.
1592:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1593:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1594:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1595:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1596:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Message Object event node pointer with \a service_request number. It configures MOIPR
1597:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1598:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1599:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1600:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1601:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1602:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1603:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
1604:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                                 const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
1605:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                                 const uint32_t service_request)
1606:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 376              	 .loc 2 1606 0
 377              	 .cfi_startproc
 378 0000 80B5     	 push {r7,lr}
 379              	.LCFI18:
 380              	 .cfi_def_cfa_offset 8
 381              	 .cfi_offset 7,-8
 382              	 .cfi_offset 14,-4
 383 0002 84B0     	 sub sp,sp,#16
 384              	.LCFI19:
 385              	 .cfi_def_cfa_offset 24
 386 0004 00AF     	 add r7,sp,#0
 387              	.LCFI20:
 388              	 .cfi_def_cfa_register 7
 389 0006 F860     	 str r0,[r7,#12]
 390 0008 7A60     	 str r2,[r7,#4]
 391 000a 0B23     	 mov r3,#11
 392 000c FB18     	 add r3,r7,r3
 393 000e 0A1C     	 add r2,r1,#0
 394 0010 1A70     	 strb r2,[r3]
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 395              	 .loc 2 1607 0
 396 0012 FB68     	 ldr r3,[r7,#12]
 397 0014 1B68     	 ldr r3,[r3]
 398 0016 FA68     	 ldr r2,[r7,#12]
 399 0018 1268     	 ldr r2,[r2]
 400 001a 9268     	 ldr r2,[r2,#8]
 401 001c 0B21     	 mov r1,#11
 402 001e 7918     	 add r1,r7,r1
 403 0020 0978     	 ldrb r1,[r1]
 404 0022 0720     	 mov r0,#7
 405 0024 8840     	 lsl r0,r0,r1
 406 0026 011C     	 mov r1,r0
 407 0028 C943     	 mvn r1,r1
 408 002a 1140     	 and r1,r2
1608:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                           (service_request << (uint32_t)can_mo_ptr_int);
 409              	 .loc 2 1608 0
 410 002c 0B22     	 mov r2,#11
 411 002e BA18     	 add r2,r7,r2
 412 0030 1278     	 ldrb r2,[r2]
 413 0032 7868     	 ldr r0,[r7,#4]
 414 0034 9040     	 lsl r0,r0,r2
 415 0036 021C     	 mov r2,r0
1607:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
 416              	 .loc 2 1607 0
 417 0038 0A43     	 orr r2,r1
 418 003a 9A60     	 str r2,[r3,#8]
1609:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 419              	 .loc 2 1609 0
 420 003c BD46     	 mov sp,r7
 421 003e 04B0     	 add sp,sp,#16
 422              	 
 423 0040 80BD     	 pop {r7,pc}
 424              	 .cfi_endproc
 425              	.LFE258:
 427 0042 C046     	 .section .text.XMC_CAN_MO_EnableEvent,"ax",%progbits
 428              	 .align 2
 429              	 .code 16
 430              	 .thumb_func
 432              	XMC_CAN_MO_EnableEvent:
 433              	.LFB262:
1610:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1611:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1612:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1613:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1614:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current Message Object status.
1615:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1616:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1617:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Message Object status, that indicates message object transfer status and message object
1618:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  information such as the number of the current message object predecessor and successor message 
1619:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  the list number to which the message object is assigned.
1620:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1621:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1622:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1623:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1624:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1625:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1626:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
1627:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1628:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_mo->can_mo_ptr->MOSTAT));
1629:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1630:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1631:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1632:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1633:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1634:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_SET_STATUS_t for detail
1635:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *         Multiple enums can be ORed.
1636:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1637:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1638:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1639:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Message Object set Status. It configures MOCTR register.
1640:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1641:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1642:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_ResetStatus()\n\n\n
1643:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1644:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1645:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1646:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
1647:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1648:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1649:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1650:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1651:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1652:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1653:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1654:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_RESET_STATUS_t for deta
1655:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *             Multiple enums can be ORed.
1656:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1657:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1658:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1659:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  Clears Message Object interrupt events. It configures MOCTR register.
1660:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1661:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1662:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * None
1663:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1664:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1665:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1666:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo,const uint32_t mask)
1667:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
1668:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1669:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
1670:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1671:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1672:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1673:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** /**
1674:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1675:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @param event  CAN node Message Object event selection. Refer @ref XMC_CAN_MO_EVENT_t for details
1676:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1677:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1678:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1679:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1680:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN Message Object events. \a event can be ORed multiple Message Object events. It config
1681:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1682:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1683:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_MO_DisableEvent()
1684:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  *
1685:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****  */
1686:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** 
1687:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
1688:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****                                         const uint32_t event)
1689:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** {
 434              	 .loc 2 1689 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI21:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 82B0     	 sub sp,sp,#8
 442              	.LCFI22:
 443              	 .cfi_def_cfa_offset 16
 444 0004 00AF     	 add r7,sp,#0
 445              	.LCFI23:
 446              	 .cfi_def_cfa_register 7
 447 0006 7860     	 str r0,[r7,#4]
 448 0008 3960     	 str r1,[r7]
1690:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOFCR |= event;
 449              	 .loc 2 1690 0
 450 000a 7B68     	 ldr r3,[r7,#4]
 451 000c 1B68     	 ldr r3,[r3]
 452 000e 7A68     	 ldr r2,[r7,#4]
 453 0010 1268     	 ldr r2,[r2]
 454 0012 1168     	 ldr r1,[r2]
 455 0014 3A68     	 ldr r2,[r7]
 456 0016 0A43     	 orr r2,r1
 457 0018 1A60     	 str r2,[r3]
1691:C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc\xmc_can.h **** }
 458              	 .loc 2 1691 0
 459 001a BD46     	 mov sp,r7
 460 001c 02B0     	 add sp,sp,#8
 461              	 
 462 001e 80BD     	 pop {r7,pc}
 463              	 .cfi_endproc
 464              	.LFE262:
 466              	 .comm pcs_button_config,8,4
 467              	 .comm CAN0_txd_config,8,4
 468              	 .comm CAN0_rxd_config,8,4
 469              	 .comm can_baud,12,4
 470              	 .comm msgObjToPCS,32,8
 471              	 .comm msgObjFromPCS,32,8
 472              	 .section .text.PCS_ConnectionInit,"ax",%progbits
 473              	 .align 2
 474              	 .global PCS_ConnectionInit
 475              	 .code 16
 476              	 .thumb_func
 478              	PCS_ConnectionInit:
 479              	.LFB288:
 480              	 .file 3 "../interconnect/pcs/pcs_op.c"
   1:../interconnect/pcs/pcs_op.c **** /*
   2:../interconnect/pcs/pcs_op.c ****  * pcs_op.c
   3:../interconnect/pcs/pcs_op.c ****  *
   4:../interconnect/pcs/pcs_op.c ****  *  Created on: Nov 23, 2021
   5:../interconnect/pcs/pcs_op.c ****  *      Author: Lenovo
   6:../interconnect/pcs/pcs_op.c ****  */
   7:../interconnect/pcs/pcs_op.c **** 
   8:../interconnect/pcs/pcs_op.c **** #include "pcs_op.h"
   9:../interconnect/pcs/pcs_op.c **** 
  10:../interconnect/pcs/pcs_op.c **** void PCS_ConnectionInit(void)
  11:../interconnect/pcs/pcs_op.c **** {
 481              	 .loc 3 11 0
 482              	 .cfi_startproc
 483 0000 80B5     	 push {r7,lr}
 484              	.LCFI24:
 485              	 .cfi_def_cfa_offset 8
 486              	 .cfi_offset 7,-8
 487              	 .cfi_offset 14,-4
 488 0002 00AF     	 add r7,sp,#0
 489              	.LCFI25:
 490              	 .cfi_def_cfa_register 7
  12:../interconnect/pcs/pcs_op.c **** 	/* Configure CAN Module */
  13:../interconnect/pcs/pcs_op.c **** 	XMC_GPIO_Init(CAN0_TXD, &CAN0_txd_config);
 491              	 .loc 3 13 0
 492 0004 314A     	 ldr r2,.L17
 493 0006 324B     	 ldr r3,.L17+4
 494 0008 101C     	 mov r0,r2
 495 000a 0521     	 mov r1,#5
 496 000c 1A1C     	 mov r2,r3
 497 000e FFF7FEFF 	 bl XMC_GPIO_Init
  14:../interconnect/pcs/pcs_op.c **** 	XMC_GPIO_Init(CAN0_RXD, &CAN0_rxd_config);
 498              	 .loc 3 14 0
 499 0012 2E4A     	 ldr r2,.L17
 500 0014 2F4B     	 ldr r3,.L17+8
 501 0016 101C     	 mov r0,r2
 502 0018 0421     	 mov r1,#4
 503 001a 1A1C     	 mov r2,r3
 504 001c FFF7FEFF 	 bl XMC_GPIO_Init
  15:../interconnect/pcs/pcs_op.c **** 
  16:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_Init(CAN, XMC_CAN_CANCLKSRC_MCLK, 11000000);
 505              	 .loc 3 16 0
 506 0020 2D4A     	 ldr r2,.L17+12
 507 0022 2E4B     	 ldr r3,.L17+16
 508 0024 101C     	 mov r0,r2
 509 0026 0121     	 mov r1,#1
 510 0028 1A1C     	 mov r2,r3
 511 002a FFF7FEFF 	 bl XMC_CAN_Init
  17:../interconnect/pcs/pcs_op.c **** 
  18:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
 512              	 .loc 3 18 0
 513 002e 2C4B     	 ldr r3,.L17+20
 514 0030 181C     	 mov r0,r3
 515 0032 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
  19:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_SetReceiveInput(CAN_NODE0, XMC_CAN_NODE_RECEIVE_INPUT_RXDCA);
 516              	 .loc 3 19 0
 517 0036 2A4B     	 ldr r3,.L17+20
 518 0038 181C     	 mov r0,r3
 519 003a 0021     	 mov r1,#0
 520 003c FFF7FEFF 	 bl XMC_CAN_NODE_SetReceiveInput
  20:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
 521              	 .loc 3 20 0
 522 0040 274B     	 ldr r3,.L17+20
 523 0042 181C     	 mov r0,r3
 524 0044 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
  21:../interconnect/pcs/pcs_op.c **** 
  22:../interconnect/pcs/pcs_op.c **** 	/* NODE 1 Initialization */
  23:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0);
 525              	 .loc 3 23 0
 526 0048 254B     	 ldr r3,.L17+20
 527 004a 181C     	 mov r0,r3
 528 004c FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
  24:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_NominalBitTimeConfigure(CAN_NODE0,&can_baud);
 529              	 .loc 3 24 0
 530 0050 234A     	 ldr r2,.L17+20
 531 0052 244B     	 ldr r3,.L17+24
 532 0054 101C     	 mov r0,r2
 533 0056 191C     	 mov r1,r3
 534 0058 FFF7FEFF 	 bl XMC_CAN_NODE_NominalBitTimeConfigure
  25:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0);
 535              	 .loc 3 25 0
 536 005c 204B     	 ldr r3,.L17+20
 537 005e 181C     	 mov r0,r3
 538 0060 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
  26:../interconnect/pcs/pcs_op.c **** 
  27:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_Config(&msgObjToPCS);
 539              	 .loc 3 27 0
 540 0064 204B     	 ldr r3,.L17+28
 541 0066 181C     	 mov r0,r3
 542 0068 FFF7FEFF 	 bl XMC_CAN_MO_Config
  28:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_Config(&msgObjFromPCS);
 543              	 .loc 3 28 0
 544 006c 1F4B     	 ldr r3,.L17+32
 545 006e 181C     	 mov r0,r3
 546 0070 FFF7FEFF 	 bl XMC_CAN_MO_Config
  29:../interconnect/pcs/pcs_op.c **** 
  30:../interconnect/pcs/pcs_op.c **** 	/* Enable receive event */
  31:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_EnableEvent(&msgObjFromPCS, XMC_CAN_MO_EVENT_RECEIVE);
 547              	 .loc 3 31 0
 548 0074 1D4A     	 ldr r2,.L17+32
 549 0076 8023     	 mov r3,#128
 550 0078 5B02     	 lsl r3,r3,#9
 551 007a 101C     	 mov r0,r2
 552 007c 191C     	 mov r1,r3
 553 007e FFF7FEFF 	 bl XMC_CAN_MO_EnableEvent
  32:../interconnect/pcs/pcs_op.c **** 
  33:../interconnect/pcs/pcs_op.c **** 	/* Set receive interrupt Service request number */
  34:../interconnect/pcs/pcs_op.c **** 	XMC_SCU_SetInterruptControl(7, XMC_SCU_IRQCTRL_CAN0_SR3_IRQ7);
 554              	 .loc 3 34 0
 555 0082 1B4B     	 ldr r3,.L17+36
 556 0084 0720     	 mov r0,#7
 557 0086 191C     	 mov r1,r3
 558 0088 FFF7FEFF 	 bl XMC_SCU_SetInterruptControl
  35:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_SetEventNodePointer(&msgObjFromPCS, XMC_CAN_MO_POINTER_EVENT_RECEIVE, 3);
 559              	 .loc 3 35 0
 560 008c 174B     	 ldr r3,.L17+32
 561 008e 181C     	 mov r0,r3
 562 0090 0021     	 mov r1,#0
 563 0092 0322     	 mov r2,#3
 564 0094 FFF7FEFF 	 bl XMC_CAN_MO_SetEventNodePointer
  36:../interconnect/pcs/pcs_op.c **** 	NVIC_SetPriority(IRQ7_IRQn, 1);
 565              	 .loc 3 36 0
 566 0098 0720     	 mov r0,#7
 567 009a 0121     	 mov r1,#1
 568 009c FFF7FEFF 	 bl __NVIC_SetPriority
  37:../interconnect/pcs/pcs_op.c **** 	NVIC_EnableIRQ(IRQ7_IRQn);
 569              	 .loc 3 37 0
 570 00a0 0720     	 mov r0,#7
 571 00a2 FFF7FEFF 	 bl __NVIC_EnableIRQ
  38:../interconnect/pcs/pcs_op.c **** 
  39:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_AllocateMOtoNodeList(CAN,0,4);
 572              	 .loc 3 39 0
 573 00a6 0C4B     	 ldr r3,.L17+12
 574 00a8 181C     	 mov r0,r3
 575 00aa 0021     	 mov r1,#0
 576 00ac 0422     	 mov r2,#4
 577 00ae FFF7FEFF 	 bl XMC_CAN_AllocateMOtoNodeList
  40:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_AllocateMOtoNodeList(CAN,0,2);
 578              	 .loc 3 40 0
 579 00b2 094B     	 ldr r3,.L17+12
 580 00b4 181C     	 mov r0,r3
 581 00b6 0021     	 mov r1,#0
 582 00b8 0222     	 mov r2,#2
 583 00ba FFF7FEFF 	 bl XMC_CAN_AllocateMOtoNodeList
  41:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_NODE_ResetInitBit(CAN_NODE0);
 584              	 .loc 3 41 0
 585 00be 084B     	 ldr r3,.L17+20
 586 00c0 181C     	 mov r0,r3
 587 00c2 FFF7FEFF 	 bl XMC_CAN_NODE_ResetInitBit
  42:../interconnect/pcs/pcs_op.c **** }
 588              	 .loc 3 42 0
 589 00c6 BD46     	 mov sp,r7
 590              	 
 591 00c8 80BD     	 pop {r7,pc}
 592              	.L18:
 593 00ca C046     	 .align 2
 594              	.L17:
 595 00cc 00000440 	 .word 1074003968
 596 00d0 00000000 	 .word CAN0_txd_config
 597 00d4 00000000 	 .word CAN0_rxd_config
 598 00d8 00000450 	 .word 1342439424
 599 00dc C0D8A700 	 .word 11000000
 600 00e0 00020450 	 .word 1342439936
 601 00e4 00000000 	 .word can_baud
 602 00e8 00000000 	 .word msgObjToPCS
 603 00ec 00000000 	 .word msgObjFromPCS
 604 00f0 01070000 	 .word 1793
 605              	 .cfi_endproc
 606              	.LFE288:
 608              	 .section .text.PCS_BMUTransmitToPCS,"ax",%progbits
 609              	 .align 2
 610              	 .global PCS_BMUTransmitToPCS
 611              	 .code 16
 612              	 .thumb_func
 614              	PCS_BMUTransmitToPCS:
 615              	.LFB289:
  43:../interconnect/pcs/pcs_op.c **** 
  44:../interconnect/pcs/pcs_op.c **** void PCS_BMUTransmitToPCS(uint32_t id, PCS_BMC_STATUS_t *bmuStatus, BMC_PARAMETER_t *bmuParam)
  45:../interconnect/pcs/pcs_op.c **** {
 616              	 .loc 3 45 0
 617              	 .cfi_startproc
 618 0000 80B5     	 push {r7,lr}
 619              	.LCFI26:
 620              	 .cfi_def_cfa_offset 8
 621              	 .cfi_offset 7,-8
 622              	 .cfi_offset 14,-4
 623 0002 84B0     	 sub sp,sp,#16
 624              	.LCFI27:
 625              	 .cfi_def_cfa_offset 24
 626 0004 00AF     	 add r7,sp,#0
 627              	.LCFI28:
 628              	 .cfi_def_cfa_register 7
 629 0006 F860     	 str r0,[r7,#12]
 630 0008 B960     	 str r1,[r7,#8]
 631 000a 7A60     	 str r2,[r7,#4]
  46:../interconnect/pcs/pcs_op.c **** 	switch(id)
 632              	 .loc 3 46 0
 633 000c FB68     	 ldr r3,[r7,#12]
 634 000e 8022     	 mov r2,#128
 635 0010 5200     	 lsl r2,r2,#1
 636 0012 9342     	 cmp r3,r2
 637 0014 04D0     	 beq .L21
 638 0016 0222     	 mov r2,#2
 639 0018 FF32     	 add r2,r2,#255
 640 001a 9342     	 cmp r3,r2
 641 001c 37D0     	 beq .L22
  47:../interconnect/pcs/pcs_op.c **** 	{
  48:../interconnect/pcs/pcs_op.c **** 		case (0x100)	:
  49:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_identifier 	 = id;
  50:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[0] = 0x00;
  51:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[1] = bmuStatus->bmc_status;
  52:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[2] = 0x00;
  53:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[3] = bmuStatus->bmc_pcs_command;
  54:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[4] = 0x00;
  55:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5] = 0x00;
  56:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5]|= (bmuStatus->bmc_precharge_relay<<1) | bmuStatus->bmc_main_relay;
  57:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[6] = 0x00;
  58:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[7] = 0x00;
  59:../interconnect/pcs/pcs_op.c **** 			break;
  60:../interconnect/pcs/pcs_op.c **** 		case (0x101)	:
  61:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_identifier 	 = id;
  62:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmuParam->soc>>8);
  63:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmuParam->soc);
  64:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmuParam->vbat>>8);
  65:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmuParam->vbat);
  66:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmuParam->ibat>>8);
  67:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
  68:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
  69:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
  70:../interconnect/pcs/pcs_op.c **** 			break;
  71:../interconnect/pcs/pcs_op.c **** 		default		:
  72:../interconnect/pcs/pcs_op.c **** 			break;
 642              	 .loc 3 72 0
 643 001e 72E0     	 b .L23
 644              	.L21:
  49:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[0] = 0x00;
 645              	 .loc 3 49 0
 646 0020 FB68     	 ldr r3,[r7,#12]
 647 0022 DB00     	 lsl r3,r3,#3
 648 0024 DA08     	 lsr r2,r3,#3
 649 0026 3D4B     	 ldr r3,.L24
 650 0028 D200     	 lsl r2,r2,#3
 651 002a D208     	 lsr r2,r2,#3
 652 002c 5968     	 ldr r1,[r3,#4]
 653 002e 490F     	 lsr r1,r1,#29
 654 0030 4907     	 lsl r1,r1,#29
 655 0032 0A43     	 orr r2,r1
 656 0034 5A60     	 str r2,[r3,#4]
  50:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[1] = bmuStatus->bmc_status;
 657              	 .loc 3 50 0
 658 0036 394B     	 ldr r3,.L24
 659 0038 0022     	 mov r2,#0
 660 003a 1A74     	 strb r2,[r3,#16]
  51:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[2] = 0x00;
 661              	 .loc 3 51 0
 662 003c BB68     	 ldr r3,[r7,#8]
 663 003e 1A78     	 ldrb r2,[r3]
 664 0040 364B     	 ldr r3,.L24
 665 0042 5A74     	 strb r2,[r3,#17]
  52:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[3] = bmuStatus->bmc_pcs_command;
 666              	 .loc 3 52 0
 667 0044 354B     	 ldr r3,.L24
 668 0046 0022     	 mov r2,#0
 669 0048 9A74     	 strb r2,[r3,#18]
  53:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[4] = 0x00;
 670              	 .loc 3 53 0
 671 004a BB68     	 ldr r3,[r7,#8]
 672 004c 5A78     	 ldrb r2,[r3,#1]
 673 004e 334B     	 ldr r3,.L24
 674 0050 DA74     	 strb r2,[r3,#19]
  54:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5] = 0x00;
 675              	 .loc 3 54 0
 676 0052 324B     	 ldr r3,.L24
 677 0054 0022     	 mov r2,#0
 678 0056 1A75     	 strb r2,[r3,#20]
  55:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5]|= (bmuStatus->bmc_precharge_relay<<1) | bmuStatus->bmc_main_relay;
 679              	 .loc 3 55 0
 680 0058 304B     	 ldr r3,.L24
 681 005a 0022     	 mov r2,#0
 682 005c 5A75     	 strb r2,[r3,#21]
  56:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[6] = 0x00;
 683              	 .loc 3 56 0
 684 005e 2F4B     	 ldr r3,.L24
 685 0060 5B7D     	 ldrb r3,[r3,#21]
 686 0062 DAB2     	 uxtb r2,r3
 687 0064 BB68     	 ldr r3,[r7,#8]
 688 0066 DB78     	 ldrb r3,[r3,#3]
 689 0068 5B00     	 lsl r3,r3,#1
 690 006a D9B2     	 uxtb r1,r3
 691 006c BB68     	 ldr r3,[r7,#8]
 692 006e 9B78     	 ldrb r3,[r3,#2]
 693 0070 DBB2     	 uxtb r3,r3
 694 0072 0B43     	 orr r3,r1
 695 0074 DBB2     	 uxtb r3,r3
 696 0076 1343     	 orr r3,r2
 697 0078 DBB2     	 uxtb r3,r3
 698 007a DAB2     	 uxtb r2,r3
 699 007c 274B     	 ldr r3,.L24
 700 007e 5A75     	 strb r2,[r3,#21]
  57:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[7] = 0x00;
 701              	 .loc 3 57 0
 702 0080 264B     	 ldr r3,.L24
 703 0082 0022     	 mov r2,#0
 704 0084 9A75     	 strb r2,[r3,#22]
  58:../interconnect/pcs/pcs_op.c **** 			break;
 705              	 .loc 3 58 0
 706 0086 254B     	 ldr r3,.L24
 707 0088 0022     	 mov r2,#0
 708 008a DA75     	 strb r2,[r3,#23]
  59:../interconnect/pcs/pcs_op.c **** 		case (0x101)	:
 709              	 .loc 3 59 0
 710 008c 3BE0     	 b .L23
 711              	.L22:
  61:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[0] = (uint8_t)(bmuParam->soc>>8);
 712              	 .loc 3 61 0
 713 008e FB68     	 ldr r3,[r7,#12]
 714 0090 DB00     	 lsl r3,r3,#3
 715 0092 DA08     	 lsr r2,r3,#3
 716 0094 214B     	 ldr r3,.L24
 717 0096 D200     	 lsl r2,r2,#3
 718 0098 D208     	 lsr r2,r2,#3
 719 009a 5968     	 ldr r1,[r3,#4]
 720 009c 490F     	 lsr r1,r1,#29
 721 009e 4907     	 lsl r1,r1,#29
 722 00a0 0A43     	 orr r2,r1
 723 00a2 5A60     	 str r2,[r3,#4]
  62:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[1] = (uint8_t)(bmuParam->soc);
 724              	 .loc 3 62 0
 725 00a4 7B68     	 ldr r3,[r7,#4]
 726 00a6 1B88     	 ldrh r3,[r3]
 727 00a8 1B0A     	 lsr r3,r3,#8
 728 00aa 9BB2     	 uxth r3,r3
 729 00ac DAB2     	 uxtb r2,r3
 730 00ae 1B4B     	 ldr r3,.L24
 731 00b0 1A74     	 strb r2,[r3,#16]
  63:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[2] = (uint8_t)(bmuParam->vbat>>8);
 732              	 .loc 3 63 0
 733 00b2 7B68     	 ldr r3,[r7,#4]
 734 00b4 1B88     	 ldrh r3,[r3]
 735 00b6 DAB2     	 uxtb r2,r3
 736 00b8 184B     	 ldr r3,.L24
 737 00ba 5A74     	 strb r2,[r3,#17]
  64:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[3] = (uint8_t)(bmuParam->vbat);
 738              	 .loc 3 64 0
 739 00bc 7B68     	 ldr r3,[r7,#4]
 740 00be 5B88     	 ldrh r3,[r3,#2]
 741 00c0 1B0A     	 lsr r3,r3,#8
 742 00c2 9BB2     	 uxth r3,r3
 743 00c4 DAB2     	 uxtb r2,r3
 744 00c6 154B     	 ldr r3,.L24
 745 00c8 9A74     	 strb r2,[r3,#18]
  65:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[4] = (uint8_t)(bmuParam->ibat>>8);
 746              	 .loc 3 65 0
 747 00ca 7B68     	 ldr r3,[r7,#4]
 748 00cc 5B88     	 ldrh r3,[r3,#2]
 749 00ce DAB2     	 uxtb r2,r3
 750 00d0 124B     	 ldr r3,.L24
 751 00d2 DA74     	 strb r2,[r3,#19]
  66:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[5] = (uint8_t)(bmuParam->ibat);
 752              	 .loc 3 66 0
 753 00d4 7B68     	 ldr r3,[r7,#4]
 754 00d6 9B88     	 ldrh r3,[r3,#4]
 755 00d8 1B0A     	 lsr r3,r3,#8
 756 00da 9BB2     	 uxth r3,r3
 757 00dc DAB2     	 uxtb r2,r3
 758 00de 0F4B     	 ldr r3,.L24
 759 00e0 1A75     	 strb r2,[r3,#20]
  67:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[6] = (uint8_t)(bmuParam->tempbat>>8);
 760              	 .loc 3 67 0
 761 00e2 7B68     	 ldr r3,[r7,#4]
 762 00e4 9B88     	 ldrh r3,[r3,#4]
 763 00e6 DAB2     	 uxtb r2,r3
 764 00e8 0C4B     	 ldr r3,.L24
 765 00ea 5A75     	 strb r2,[r3,#21]
  68:../interconnect/pcs/pcs_op.c **** 			msgObjToPCS.can_data_byte[7] = (uint8_t)(bmuParam->tempbat);
 766              	 .loc 3 68 0
 767 00ec 7B68     	 ldr r3,[r7,#4]
 768 00ee DB88     	 ldrh r3,[r3,#6]
 769 00f0 1B0A     	 lsr r3,r3,#8
 770 00f2 9BB2     	 uxth r3,r3
 771 00f4 DAB2     	 uxtb r2,r3
 772 00f6 094B     	 ldr r3,.L24
 773 00f8 9A75     	 strb r2,[r3,#22]
  69:../interconnect/pcs/pcs_op.c **** 			break;
 774              	 .loc 3 69 0
 775 00fa 7B68     	 ldr r3,[r7,#4]
 776 00fc DB88     	 ldrh r3,[r3,#6]
 777 00fe DAB2     	 uxtb r2,r3
 778 0100 064B     	 ldr r3,.L24
 779 0102 DA75     	 strb r2,[r3,#23]
  70:../interconnect/pcs/pcs_op.c **** 		default		:
 780              	 .loc 3 70 0
 781 0104 C046     	 mov r8,r8
 782              	.L23:
  73:../interconnect/pcs/pcs_op.c **** 	}
  74:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_Config(&msgObjToPCS);
 783              	 .loc 3 74 0
 784 0106 054B     	 ldr r3,.L24
 785 0108 181C     	 mov r0,r3
 786 010a FFF7FEFF 	 bl XMC_CAN_MO_Config
  75:../interconnect/pcs/pcs_op.c **** 	XMC_CAN_MO_Transmit(&msgObjToPCS);
 787              	 .loc 3 75 0
 788 010e 034B     	 ldr r3,.L24
 789 0110 181C     	 mov r0,r3
 790 0112 FFF7FEFF 	 bl XMC_CAN_MO_Transmit
  76:../interconnect/pcs/pcs_op.c **** }
 791              	 .loc 3 76 0
 792 0116 BD46     	 mov sp,r7
 793 0118 04B0     	 add sp,sp,#16
 794              	 
 795 011a 80BD     	 pop {r7,pc}
 796              	.L25:
 797              	 .align 2
 798              	.L24:
 799 011c 00000000 	 .word msgObjToPCS
 800              	 .cfi_endproc
 801              	.LFE289:
 803              	 .section .text.PCS_GetPCSStatus,"ax",%progbits
 804              	 .align 2
 805              	 .global PCS_GetPCSStatus
 806              	 .code 16
 807              	 .thumb_func
 809              	PCS_GetPCSStatus:
 810              	.LFB290:
  77:../interconnect/pcs/pcs_op.c **** 
  78:../interconnect/pcs/pcs_op.c **** PCS_STATUS_t PCS_GetPCSStatus(XMC_CAN_MO_t *can_m0_obj)
  79:../interconnect/pcs/pcs_op.c **** {
 811              	 .loc 3 79 0
 812              	 .cfi_startproc
 813 0000 80B5     	 push {r7,lr}
 814              	.LCFI29:
 815              	 .cfi_def_cfa_offset 8
 816              	 .cfi_offset 7,-8
 817              	 .cfi_offset 14,-4
 818 0002 84B0     	 sub sp,sp,#16
 819              	.LCFI30:
 820              	 .cfi_def_cfa_offset 24
 821 0004 00AF     	 add r7,sp,#0
 822              	.LCFI31:
 823              	 .cfi_def_cfa_register 7
 824 0006 7860     	 str r0,[r7,#4]
 825 0008 3960     	 str r1,[r7]
  80:../interconnect/pcs/pcs_op.c **** 	PCS_STATUS_t param;
  81:../interconnect/pcs/pcs_op.c **** 	uint8_t 	 status;
  82:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[0];
 826              	 .loc 3 82 0
 827 000a 0F23     	 mov r3,#15
 828 000c FB18     	 add r3,r7,r3
 829 000e 3A68     	 ldr r2,[r7]
 830 0010 127C     	 ldrb r2,[r2,#16]
 831 0012 1A70     	 strb r2,[r3]
  83:../interconnect/pcs/pcs_op.c **** 	if(status<=3) 						{param.pcs_system_status = PCS_STAT_INITIAL;}
 832              	 .loc 3 83 0
 833 0014 0F23     	 mov r3,#15
 834 0016 FB18     	 add r3,r7,r3
 835 0018 1B78     	 ldrb r3,[r3]
 836 001a 032B     	 cmp r3,#3
 837 001c 04D8     	 bhi .L27
 838              	 .loc 3 83 0 is_stmt 0 discriminator 1
 839 001e 0823     	 mov r3,#8
 840 0020 FB18     	 add r3,r7,r3
 841 0022 0022     	 mov r2,#0
 842 0024 1A70     	 strb r2,[r3]
 843 0026 17E0     	 b .L28
 844              	.L27:
  84:../interconnect/pcs/pcs_op.c **** 	else if((status==4) ) 				{param.pcs_system_status = PCS_STAT_STANDBY;}
 845              	 .loc 3 84 0 is_stmt 1
 846 0028 0F23     	 mov r3,#15
 847 002a FB18     	 add r3,r7,r3
 848 002c 1B78     	 ldrb r3,[r3]
 849 002e 042B     	 cmp r3,#4
 850 0030 04D1     	 bne .L29
 851              	 .loc 3 84 0 is_stmt 0 discriminator 1
 852 0032 0823     	 mov r3,#8
 853 0034 FB18     	 add r3,r7,r3
 854 0036 0422     	 mov r2,#4
 855 0038 1A70     	 strb r2,[r3]
 856 003a 0DE0     	 b .L28
 857              	.L29:
  85:../interconnect/pcs/pcs_op.c **** 	else if((status==6) || (status==5)) {param.pcs_system_status = PCS_STAT_RUNNING;}
 858              	 .loc 3 85 0 is_stmt 1
 859 003c 0F23     	 mov r3,#15
 860 003e FB18     	 add r3,r7,r3
 861 0040 1B78     	 ldrb r3,[r3]
 862 0042 062B     	 cmp r3,#6
 863 0044 04D0     	 beq .L30
 864              	 .loc 3 85 0 is_stmt 0 discriminator 2
 865 0046 0F23     	 mov r3,#15
 866 0048 FB18     	 add r3,r7,r3
 867 004a 1B78     	 ldrb r3,[r3]
 868 004c 052B     	 cmp r3,#5
 869 004e 03D1     	 bne .L28
 870              	.L30:
 871              	 .loc 3 85 0 discriminator 3
 872 0050 0823     	 mov r3,#8
 873 0052 FB18     	 add r3,r7,r3
 874 0054 0622     	 mov r2,#6
 875 0056 1A70     	 strb r2,[r3]
 876              	.L28:
  86:../interconnect/pcs/pcs_op.c **** 
  87:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[1];
 877              	 .loc 3 87 0 is_stmt 1
 878 0058 0F23     	 mov r3,#15
 879 005a FB18     	 add r3,r7,r3
 880 005c 3A68     	 ldr r2,[r7]
 881 005e 527C     	 ldrb r2,[r2,#17]
 882 0060 1A70     	 strb r2,[r3]
  88:../interconnect/pcs/pcs_op.c **** 	if(status)	{param.pcs_precharge_IsComplete = true;}
 883              	 .loc 3 88 0
 884 0062 0F23     	 mov r3,#15
 885 0064 FB18     	 add r3,r7,r3
 886 0066 1B78     	 ldrb r3,[r3]
 887 0068 002B     	 cmp r3,#0
 888 006a 04D0     	 beq .L31
 889              	 .loc 3 88 0 is_stmt 0 discriminator 1
 890 006c 0823     	 mov r3,#8
 891 006e FB18     	 add r3,r7,r3
 892 0070 0122     	 mov r2,#1
 893 0072 5A70     	 strb r2,[r3,#1]
 894 0074 03E0     	 b .L32
 895              	.L31:
  89:../interconnect/pcs/pcs_op.c **** 	else 		{param.pcs_precharge_IsComplete = false;}
 896              	 .loc 3 89 0 is_stmt 1
 897 0076 0823     	 mov r3,#8
 898 0078 FB18     	 add r3,r7,r3
 899 007a 0022     	 mov r2,#0
 900 007c 5A70     	 strb r2,[r3,#1]
 901              	.L32:
  90:../interconnect/pcs/pcs_op.c **** 
  91:../interconnect/pcs/pcs_op.c **** 	param.pcs_system_warning = PCS_WARN_NORMAL;
 902              	 .loc 3 91 0
 903 007e 0823     	 mov r3,#8
 904 0080 FB18     	 add r3,r7,r3
 905 0082 0022     	 mov r2,#0
 906 0084 9A70     	 strb r2,[r3,#2]
  92:../interconnect/pcs/pcs_op.c **** 	param.pcs_system_pcsIsStandBy = false;
 907              	 .loc 3 92 0
 908 0086 0823     	 mov r3,#8
 909 0088 FB18     	 add r3,r7,r3
 910 008a 0022     	 mov r2,#0
 911 008c 1A71     	 strb r2,[r3,#4]
  93:../interconnect/pcs/pcs_op.c **** 
  94:../interconnect/pcs/pcs_op.c **** 	/* check the warning status */
  95:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[2];
 912              	 .loc 3 95 0
 913 008e 0F23     	 mov r3,#15
 914 0090 FB18     	 add r3,r7,r3
 915 0092 3A68     	 ldr r2,[r7]
 916 0094 927C     	 ldrb r2,[r2,#18]
 917 0096 1A70     	 strb r2,[r3]
  96:../interconnect/pcs/pcs_op.c **** 	if((status>>6)&0x01)
 918              	 .loc 3 96 0
 919 0098 0F23     	 mov r3,#15
 920 009a FB18     	 add r3,r7,r3
 921 009c 1B78     	 ldrb r3,[r3]
 922 009e 9B09     	 lsr r3,r3,#6
 923 00a0 DBB2     	 uxtb r3,r3
 924 00a2 1A1C     	 mov r2,r3
 925 00a4 0123     	 mov r3,#1
 926 00a6 1340     	 and r3,r2
 927 00a8 07D0     	 beq .L33
  97:../interconnect/pcs/pcs_op.c **** 	{
  98:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_warning = PCS_WARN_PCS_OT;
 928              	 .loc 3 98 0
 929 00aa 0823     	 mov r3,#8
 930 00ac FB18     	 add r3,r7,r3
 931 00ae 0622     	 mov r2,#6
 932 00b0 9A70     	 strb r2,[r3,#2]
  99:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_pcsIsStandBy = true;
 933              	 .loc 3 99 0
 934 00b2 0823     	 mov r3,#8
 935 00b4 FB18     	 add r3,r7,r3
 936 00b6 0122     	 mov r2,#1
 937 00b8 1A71     	 strb r2,[r3,#4]
 938              	.L33:
 100:../interconnect/pcs/pcs_op.c **** 	}
 101:../interconnect/pcs/pcs_op.c **** 
 102:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[3];
 939              	 .loc 3 102 0
 940 00ba 0F23     	 mov r3,#15
 941 00bc FB18     	 add r3,r7,r3
 942 00be 3A68     	 ldr r2,[r7]
 943 00c0 D27C     	 ldrb r2,[r2,#19]
 944 00c2 1A70     	 strb r2,[r3]
 103:../interconnect/pcs/pcs_op.c **** 	if((status>>7)&0x01)
 945              	 .loc 3 103 0
 946 00c4 0F23     	 mov r3,#15
 947 00c6 FB18     	 add r3,r7,r3
 948 00c8 1B78     	 ldrb r3,[r3]
 949 00ca DB09     	 lsr r3,r3,#7
 950 00cc DBB2     	 uxtb r3,r3
 951 00ce 1A1C     	 mov r2,r3
 952 00d0 0123     	 mov r3,#1
 953 00d2 1340     	 and r3,r2
 954 00d4 07D0     	 beq .L34
 104:../interconnect/pcs/pcs_op.c **** 	{
 105:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_warning = PCS_WARN_BAT_OVCHG;
 955              	 .loc 3 105 0
 956 00d6 0823     	 mov r3,#8
 957 00d8 FB18     	 add r3,r7,r3
 958 00da 0122     	 mov r2,#1
 959 00dc 9A70     	 strb r2,[r3,#2]
 106:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_pcsIsStandBy = true;
 960              	 .loc 3 106 0
 961 00de 0823     	 mov r3,#8
 962 00e0 FB18     	 add r3,r7,r3
 963 00e2 0122     	 mov r2,#1
 964 00e4 1A71     	 strb r2,[r3,#4]
 965              	.L34:
 107:../interconnect/pcs/pcs_op.c **** 	}
 108:../interconnect/pcs/pcs_op.c **** 	if((status>>6)&0x01){param.pcs_system_warning = PCS_WARN_BAT_CHGSUP;}
 966              	 .loc 3 108 0
 967 00e6 0F23     	 mov r3,#15
 968 00e8 FB18     	 add r3,r7,r3
 969 00ea 1B78     	 ldrb r3,[r3]
 970 00ec 9B09     	 lsr r3,r3,#6
 971 00ee DBB2     	 uxtb r3,r3
 972 00f0 1A1C     	 mov r2,r3
 973 00f2 0123     	 mov r3,#1
 974 00f4 1340     	 and r3,r2
 975 00f6 03D0     	 beq .L35
 976              	 .loc 3 108 0 is_stmt 0 discriminator 1
 977 00f8 0823     	 mov r3,#8
 978 00fa FB18     	 add r3,r7,r3
 979 00fc 0222     	 mov r2,#2
 980 00fe 9A70     	 strb r2,[r3,#2]
 981              	.L35:
 109:../interconnect/pcs/pcs_op.c **** 	if((status>>5)&0x01){param.pcs_system_warning = PCS_WARN_BAT_DSGSUP;}
 982              	 .loc 3 109 0 is_stmt 1
 983 0100 0F23     	 mov r3,#15
 984 0102 FB18     	 add r3,r7,r3
 985 0104 1B78     	 ldrb r3,[r3]
 986 0106 5B09     	 lsr r3,r3,#5
 987 0108 DBB2     	 uxtb r3,r3
 988 010a 1A1C     	 mov r2,r3
 989 010c 0123     	 mov r3,#1
 990 010e 1340     	 and r3,r2
 991 0110 03D0     	 beq .L36
 992              	 .loc 3 109 0 is_stmt 0 discriminator 1
 993 0112 0823     	 mov r3,#8
 994 0114 FB18     	 add r3,r7,r3
 995 0116 0322     	 mov r2,#3
 996 0118 9A70     	 strb r2,[r3,#2]
 997              	.L36:
 110:../interconnect/pcs/pcs_op.c **** 	if((status>>4)&0x01){param.pcs_system_warning = PCS_WARN_BAT_OVDSG;}
 998              	 .loc 3 110 0 is_stmt 1
 999 011a 0F23     	 mov r3,#15
 1000 011c FB18     	 add r3,r7,r3
 1001 011e 1B78     	 ldrb r3,[r3]
 1002 0120 1B09     	 lsr r3,r3,#4
 1003 0122 DBB2     	 uxtb r3,r3
 1004 0124 1A1C     	 mov r2,r3
 1005 0126 0123     	 mov r3,#1
 1006 0128 1340     	 and r3,r2
 1007 012a 03D0     	 beq .L37
 1008              	 .loc 3 110 0 is_stmt 0 discriminator 1
 1009 012c 0823     	 mov r3,#8
 1010 012e FB18     	 add r3,r7,r3
 1011 0130 0422     	 mov r2,#4
 1012 0132 9A70     	 strb r2,[r3,#2]
 1013              	.L37:
 111:../interconnect/pcs/pcs_op.c **** 	if((status>>3)&0x01)
 1014              	 .loc 3 111 0 is_stmt 1
 1015 0134 0F23     	 mov r3,#15
 1016 0136 FB18     	 add r3,r7,r3
 1017 0138 1B78     	 ldrb r3,[r3]
 1018 013a DB08     	 lsr r3,r3,#3
 1019 013c DBB2     	 uxtb r3,r3
 1020 013e 1A1C     	 mov r2,r3
 1021 0140 0123     	 mov r3,#1
 1022 0142 1340     	 and r3,r2
 1023 0144 07D0     	 beq .L38
 112:../interconnect/pcs/pcs_op.c **** 	{
 113:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_warning = PCS_WARN_BAT_OVDSG2;
 1024              	 .loc 3 113 0
 1025 0146 0823     	 mov r3,#8
 1026 0148 FB18     	 add r3,r7,r3
 1027 014a 0522     	 mov r2,#5
 1028 014c 9A70     	 strb r2,[r3,#2]
 114:../interconnect/pcs/pcs_op.c **** 		param.pcs_system_pcsIsStandBy = true;
 1029              	 .loc 3 114 0
 1030 014e 0823     	 mov r3,#8
 1031 0150 FB18     	 add r3,r7,r3
 1032 0152 0122     	 mov r2,#1
 1033 0154 1A71     	 strb r2,[r3,#4]
 1034              	.L38:
 115:../interconnect/pcs/pcs_op.c **** 	}
 116:../interconnect/pcs/pcs_op.c **** 
 117:../interconnect/pcs/pcs_op.c **** 	return param;
 1035              	 .loc 3 117 0
 1036 0156 7A68     	 ldr r2,[r7,#4]
 1037 0158 0823     	 mov r3,#8
 1038 015a FB18     	 add r3,r7,r3
 1039 015c 111C     	 mov r1,r2
 1040 015e 1A1C     	 mov r2,r3
 1041 0160 0523     	 mov r3,#5
 1042 0162 081C     	 mov r0,r1
 1043 0164 111C     	 mov r1,r2
 1044 0166 1A1C     	 mov r2,r3
 1045 0168 FFF7FEFF 	 bl memcpy
 118:../interconnect/pcs/pcs_op.c **** }
 1046              	 .loc 3 118 0
 1047 016c 7868     	 ldr r0,[r7,#4]
 1048 016e BD46     	 mov sp,r7
 1049 0170 04B0     	 add sp,sp,#16
 1050              	 
 1051 0172 80BD     	 pop {r7,pc}
 1052              	 .cfi_endproc
 1053              	.LFE290:
 1055              	 .section .text.PCS_GetDCGridStatus,"ax",%progbits
 1056              	 .align 2
 1057              	 .global PCS_GetDCGridStatus
 1058              	 .code 16
 1059              	 .thumb_func
 1061              	PCS_GetDCGridStatus:
 1062              	.LFB291:
 119:../interconnect/pcs/pcs_op.c **** 
 120:../interconnect/pcs/pcs_op.c **** DCGRID_STATUS_t 	PCS_GetDCGridStatus(XMC_CAN_MO_t *can_m0_obj)
 121:../interconnect/pcs/pcs_op.c **** {
 1063              	 .loc 3 121 0
 1064              	 .cfi_startproc
 1065 0000 80B5     	 push {r7,lr}
 1066              	.LCFI32:
 1067              	 .cfi_def_cfa_offset 8
 1068              	 .cfi_offset 7,-8
 1069              	 .cfi_offset 14,-4
 1070 0002 86B0     	 sub sp,sp,#24
 1071              	.LCFI33:
 1072              	 .cfi_def_cfa_offset 32
 1073 0004 00AF     	 add r7,sp,#0
 1074              	.LCFI34:
 1075              	 .cfi_def_cfa_register 7
 1076 0006 7860     	 str r0,[r7,#4]
 122:../interconnect/pcs/pcs_op.c **** 	DCGRID_STATUS_t param;
 123:../interconnect/pcs/pcs_op.c **** 	uint8_t			status;
 124:../interconnect/pcs/pcs_op.c **** 
 125:../interconnect/pcs/pcs_op.c **** 	param.dcgrid_system_pcsIsStandBy = false;
 1077              	 .loc 3 125 0
 1078 0008 0C23     	 mov r3,#12
 1079 000a FB18     	 add r3,r7,r3
 1080 000c 0022     	 mov r2,#0
 1081 000e DA70     	 strb r2,[r3,#3]
 126:../interconnect/pcs/pcs_op.c **** 
 127:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[0];
 1082              	 .loc 3 127 0
 1083 0010 1723     	 mov r3,#23
 1084 0012 FB18     	 add r3,r7,r3
 1085 0014 7A68     	 ldr r2,[r7,#4]
 1086 0016 127C     	 ldrb r2,[r2,#16]
 1087 0018 1A70     	 strb r2,[r3]
 128:../interconnect/pcs/pcs_op.c **** 	if		((status<=3)||(status==6)||(status==7)) {param.dcgrid_system_status = GRID_STAT_NOT_RUNNING;}
 1088              	 .loc 3 128 0
 1089 001a 1723     	 mov r3,#23
 1090 001c FB18     	 add r3,r7,r3
 1091 001e 1B78     	 ldrb r3,[r3]
 1092 0020 032B     	 cmp r3,#3
 1093 0022 09D9     	 bls .L41
 1094              	 .loc 3 128 0 is_stmt 0 discriminator 2
 1095 0024 1723     	 mov r3,#23
 1096 0026 FB18     	 add r3,r7,r3
 1097 0028 1B78     	 ldrb r3,[r3]
 1098 002a 062B     	 cmp r3,#6
 1099 002c 04D0     	 beq .L41
 1100              	 .loc 3 128 0 discriminator 4
 1101 002e 1723     	 mov r3,#23
 1102 0030 FB18     	 add r3,r7,r3
 1103 0032 1B78     	 ldrb r3,[r3]
 1104 0034 072B     	 cmp r3,#7
 1105 0036 04D1     	 bne .L42
 1106              	.L41:
 1107              	 .loc 3 128 0 discriminator 5
 1108 0038 0C23     	 mov r3,#12
 1109 003a FB18     	 add r3,r7,r3
 1110 003c 0022     	 mov r2,#0
 1111 003e 1A70     	 strb r2,[r3]
 1112 0040 1CE0     	 b .L43
 1113              	.L42:
 129:../interconnect/pcs/pcs_op.c **** 	else if ((status==4)||(status ==5)) 			{param.dcgrid_system_status = GRID_STAT_CHG;}
 1114              	 .loc 3 129 0 is_stmt 1
 1115 0042 1723     	 mov r3,#23
 1116 0044 FB18     	 add r3,r7,r3
 1117 0046 1B78     	 ldrb r3,[r3]
 1118 0048 042B     	 cmp r3,#4
 1119 004a 04D0     	 beq .L44
 1120              	 .loc 3 129 0 is_stmt 0 discriminator 2
 1121 004c 1723     	 mov r3,#23
 1122 004e FB18     	 add r3,r7,r3
 1123 0050 1B78     	 ldrb r3,[r3]
 1124 0052 052B     	 cmp r3,#5
 1125 0054 04D1     	 bne .L45
 1126              	.L44:
 1127              	 .loc 3 129 0 discriminator 3
 1128 0056 0C23     	 mov r3,#12
 1129 0058 FB18     	 add r3,r7,r3
 1130 005a 0422     	 mov r2,#4
 1131 005c 1A70     	 strb r2,[r3]
 1132 005e 0DE0     	 b .L43
 1133              	.L45:
 130:../interconnect/pcs/pcs_op.c **** 	else if ((status==8)||(status ==9)) 			{param.dcgrid_system_status = GRID_STAT_DSG;}
 1134              	 .loc 3 130 0 is_stmt 1
 1135 0060 1723     	 mov r3,#23
 1136 0062 FB18     	 add r3,r7,r3
 1137 0064 1B78     	 ldrb r3,[r3]
 1138 0066 082B     	 cmp r3,#8
 1139 0068 04D0     	 beq .L46
 1140              	 .loc 3 130 0 is_stmt 0 discriminator 2
 1141 006a 1723     	 mov r3,#23
 1142 006c FB18     	 add r3,r7,r3
 1143 006e 1B78     	 ldrb r3,[r3]
 1144 0070 092B     	 cmp r3,#9
 1145 0072 03D1     	 bne .L43
 1146              	.L46:
 1147              	 .loc 3 130 0 discriminator 3
 1148 0074 0C23     	 mov r3,#12
 1149 0076 FB18     	 add r3,r7,r3
 1150 0078 0822     	 mov r2,#8
 1151 007a 1A70     	 strb r2,[r3]
 1152              	.L43:
 131:../interconnect/pcs/pcs_op.c **** 
 132:../interconnect/pcs/pcs_op.c **** 	param.dcgrid_system_warning=GRID_WARN_NORMAL;
 1153              	 .loc 3 132 0 is_stmt 1
 1154 007c 0C23     	 mov r3,#12
 1155 007e FB18     	 add r3,r7,r3
 1156 0080 0022     	 mov r2,#0
 1157 0082 5A70     	 strb r2,[r3,#1]
 133:../interconnect/pcs/pcs_op.c **** 
 134:../interconnect/pcs/pcs_op.c **** 	/* check the warning status */
 135:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[2];
 1158              	 .loc 3 135 0
 1159 0084 1723     	 mov r3,#23
 1160 0086 FB18     	 add r3,r7,r3
 1161 0088 7A68     	 ldr r2,[r7,#4]
 1162 008a 927C     	 ldrb r2,[r2,#18]
 1163 008c 1A70     	 strb r2,[r3]
 136:../interconnect/pcs/pcs_op.c **** 	if((status>>7)&0x01){param.dcgrid_system_warning=GRID_WARN_OV;}
 1164              	 .loc 3 136 0
 1165 008e 1723     	 mov r3,#23
 1166 0090 FB18     	 add r3,r7,r3
 1167 0092 1B78     	 ldrb r3,[r3]
 1168 0094 DB09     	 lsr r3,r3,#7
 1169 0096 DBB2     	 uxtb r3,r3
 1170 0098 1A1C     	 mov r2,r3
 1171 009a 0123     	 mov r3,#1
 1172 009c 1340     	 and r3,r2
 1173 009e 03D0     	 beq .L47
 1174              	 .loc 3 136 0 is_stmt 0 discriminator 1
 1175 00a0 0C23     	 mov r3,#12
 1176 00a2 FB18     	 add r3,r7,r3
 1177 00a4 0122     	 mov r2,#1
 1178 00a6 5A70     	 strb r2,[r3,#1]
 1179              	.L47:
 137:../interconnect/pcs/pcs_op.c **** 	if((status>>6)&0x01){param.dcgrid_system_warning=GRID_WARN_OC;}
 1180              	 .loc 3 137 0 is_stmt 1
 1181 00a8 1723     	 mov r3,#23
 1182 00aa FB18     	 add r3,r7,r3
 1183 00ac 1B78     	 ldrb r3,[r3]
 1184 00ae 9B09     	 lsr r3,r3,#6
 1185 00b0 DBB2     	 uxtb r3,r3
 1186 00b2 1A1C     	 mov r2,r3
 1187 00b4 0123     	 mov r3,#1
 1188 00b6 1340     	 and r3,r2
 1189 00b8 03D0     	 beq .L48
 1190              	 .loc 3 137 0 is_stmt 0 discriminator 1
 1191 00ba 0C23     	 mov r3,#12
 1192 00bc FB18     	 add r3,r7,r3
 1193 00be 0222     	 mov r2,#2
 1194 00c0 5A70     	 strb r2,[r3,#1]
 1195              	.L48:
 138:../interconnect/pcs/pcs_op.c **** 
 139:../interconnect/pcs/pcs_op.c **** 	return param;
 1196              	 .loc 3 139 0 is_stmt 1
 1197 00c2 1023     	 mov r3,#16
 1198 00c4 FB18     	 add r3,r7,r3
 1199 00c6 0C22     	 mov r2,#12
 1200 00c8 BA18     	 add r2,r7,r2
 1201 00ca 1268     	 ldr r2,[r2]
 1202 00cc 1A60     	 str r2,[r3]
 1203 00ce 1023     	 mov r3,#16
 1204 00d0 FA18     	 add r2,r7,r3
 1205 00d2 0023     	 mov r3,#0
 1206 00d4 1178     	 ldrb r1,[r2]
 1207 00d6 FF20     	 mov r0,#255
 1208 00d8 0140     	 and r1,r0
 1209 00da FF20     	 mov r0,#255
 1210 00dc 8343     	 bic r3,r0
 1211 00de 0B43     	 orr r3,r1
 1212 00e0 5178     	 ldrb r1,[r2,#1]
 1213 00e2 FF20     	 mov r0,#255
 1214 00e4 0140     	 and r1,r0
 1215 00e6 0902     	 lsl r1,r1,#8
 1216 00e8 0948     	 ldr r0,.L50
 1217 00ea 0340     	 and r3,r0
 1218 00ec 0B43     	 orr r3,r1
 1219 00ee 9178     	 ldrb r1,[r2,#2]
 1220 00f0 FF20     	 mov r0,#255
 1221 00f2 0140     	 and r1,r0
 1222 00f4 0904     	 lsl r1,r1,#16
 1223 00f6 0748     	 ldr r0,.L50+4
 1224 00f8 0340     	 and r3,r0
 1225 00fa 0B43     	 orr r3,r1
 1226 00fc D278     	 ldrb r2,[r2,#3]
 1227 00fe 1206     	 lsl r2,r2,#24
 1228 0100 1B02     	 lsl r3,r3,#8
 1229 0102 1B0A     	 lsr r3,r3,#8
 1230 0104 1343     	 orr r3,r2
 140:../interconnect/pcs/pcs_op.c **** }
 1231              	 .loc 3 140 0
 1232 0106 181C     	 mov r0,r3
 1233 0108 BD46     	 mov sp,r7
 1234 010a 06B0     	 add sp,sp,#24
 1235              	 
 1236 010c 80BD     	 pop {r7,pc}
 1237              	.L51:
 1238 010e C046     	 .align 2
 1239              	.L50:
 1240 0110 FF00FFFF 	 .word -65281
 1241 0114 FFFF00FF 	 .word -16711681
 1242              	 .cfi_endproc
 1243              	.LFE291:
 1245              	 .section .text.PCS_GetACInvStatus,"ax",%progbits
 1246              	 .align 2
 1247              	 .global PCS_GetACInvStatus
 1248              	 .code 16
 1249              	 .thumb_func
 1251              	PCS_GetACInvStatus:
 1252              	.LFB292:
 141:../interconnect/pcs/pcs_op.c **** 
 142:../interconnect/pcs/pcs_op.c **** ACINV_STATUS_t 		PCS_GetACInvStatus(XMC_CAN_MO_t *can_m0_obj)
 143:../interconnect/pcs/pcs_op.c **** {
 1253              	 .loc 3 143 0
 1254              	 .cfi_startproc
 1255 0000 80B5     	 push {r7,lr}
 1256              	.LCFI35:
 1257              	 .cfi_def_cfa_offset 8
 1258              	 .cfi_offset 7,-8
 1259              	 .cfi_offset 14,-4
 1260 0002 86B0     	 sub sp,sp,#24
 1261              	.LCFI36:
 1262              	 .cfi_def_cfa_offset 32
 1263 0004 00AF     	 add r7,sp,#0
 1264              	.LCFI37:
 1265              	 .cfi_def_cfa_register 7
 1266 0006 7860     	 str r0,[r7,#4]
 144:../interconnect/pcs/pcs_op.c **** 	ACINV_STATUS_t param;
 145:../interconnect/pcs/pcs_op.c **** 	uint8_t		   status;
 146:../interconnect/pcs/pcs_op.c **** 
 147:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[0];
 1267              	 .loc 3 147 0
 1268 0008 1723     	 mov r3,#23
 1269 000a FB18     	 add r3,r7,r3
 1270 000c 7A68     	 ldr r2,[r7,#4]
 1271 000e 127C     	 ldrb r2,[r2,#16]
 1272 0010 1A70     	 strb r2,[r3]
 148:../interconnect/pcs/pcs_op.c **** 	if((status<=3)||(status==11)||(status==13))	{param.acinv_system_status = INV_STAT_NOT_RUNNING;}
 1273              	 .loc 3 148 0
 1274 0012 1723     	 mov r3,#23
 1275 0014 FB18     	 add r3,r7,r3
 1276 0016 1B78     	 ldrb r3,[r3]
 1277 0018 032B     	 cmp r3,#3
 1278 001a 09D9     	 bls .L53
 1279              	 .loc 3 148 0 is_stmt 0 discriminator 2
 1280 001c 1723     	 mov r3,#23
 1281 001e FB18     	 add r3,r7,r3
 1282 0020 1B78     	 ldrb r3,[r3]
 1283 0022 0B2B     	 cmp r3,#11
 1284 0024 04D0     	 beq .L53
 1285              	 .loc 3 148 0 discriminator 4
 1286 0026 1723     	 mov r3,#23
 1287 0028 FB18     	 add r3,r7,r3
 1288 002a 1B78     	 ldrb r3,[r3]
 1289 002c 0D2B     	 cmp r3,#13
 1290 002e 04D1     	 bne .L54
 1291              	.L53:
 1292              	 .loc 3 148 0 discriminator 5
 1293 0030 0C23     	 mov r3,#12
 1294 0032 FB18     	 add r3,r7,r3
 1295 0034 0022     	 mov r2,#0
 1296 0036 1A70     	 strb r2,[r3]
 1297 0038 12E0     	 b .L55
 1298              	.L54:
 149:../interconnect/pcs/pcs_op.c **** 	else if((status==14)||(status ==15))  		{param.acinv_system_status = INV_STAT_RUNNING;}
 1299              	 .loc 3 149 0 is_stmt 1
 1300 003a 1723     	 mov r3,#23
 1301 003c FB18     	 add r3,r7,r3
 1302 003e 1B78     	 ldrb r3,[r3]
 1303 0040 0E2B     	 cmp r3,#14
 1304 0042 04D0     	 beq .L56
 1305              	 .loc 3 149 0 is_stmt 0 discriminator 2
 1306 0044 1723     	 mov r3,#23
 1307 0046 FB18     	 add r3,r7,r3
 1308 0048 1B78     	 ldrb r3,[r3]
 1309 004a 0F2B     	 cmp r3,#15
 1310 004c 04D1     	 bne .L57
 1311              	.L56:
 1312              	 .loc 3 149 0 discriminator 3
 1313 004e 0C23     	 mov r3,#12
 1314 0050 FB18     	 add r3,r7,r3
 1315 0052 0E22     	 mov r2,#14
 1316 0054 1A70     	 strb r2,[r3]
 1317 0056 03E0     	 b .L55
 1318              	.L57:
 150:../interconnect/pcs/pcs_op.c **** 	else							 			{param.acinv_system_status = INV_STAT_NONE;}
 1319              	 .loc 3 150 0 is_stmt 1
 1320 0058 0C23     	 mov r3,#12
 1321 005a FB18     	 add r3,r7,r3
 1322 005c 0422     	 mov r2,#4
 1323 005e 1A70     	 strb r2,[r3]
 1324              	.L55:
 151:../interconnect/pcs/pcs_op.c **** 
 152:../interconnect/pcs/pcs_op.c **** 	param.acinv_system_warning = INV_WARN_NORMAL;
 1325              	 .loc 3 152 0
 1326 0060 0C23     	 mov r3,#12
 1327 0062 FB18     	 add r3,r7,r3
 1328 0064 0022     	 mov r2,#0
 1329 0066 5A70     	 strb r2,[r3,#1]
 153:../interconnect/pcs/pcs_op.c **** 	param.acinv_system_pcsIsStandBy = false;
 1330              	 .loc 3 153 0
 1331 0068 0C23     	 mov r3,#12
 1332 006a FB18     	 add r3,r7,r3
 1333 006c 0022     	 mov r2,#0
 1334 006e DA70     	 strb r2,[r3,#3]
 154:../interconnect/pcs/pcs_op.c **** 
 155:../interconnect/pcs/pcs_op.c **** 	/* check the warning status */
 156:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[2];
 1335              	 .loc 3 156 0
 1336 0070 1723     	 mov r3,#23
 1337 0072 FB18     	 add r3,r7,r3
 1338 0074 7A68     	 ldr r2,[r7,#4]
 1339 0076 927C     	 ldrb r2,[r2,#18]
 1340 0078 1A70     	 strb r2,[r3]
 157:../interconnect/pcs/pcs_op.c **** 	if((status>>7)&0x01)
 1341              	 .loc 3 157 0
 1342 007a 1723     	 mov r3,#23
 1343 007c FB18     	 add r3,r7,r3
 1344 007e 1B78     	 ldrb r3,[r3]
 1345 0080 DB09     	 lsr r3,r3,#7
 1346 0082 DBB2     	 uxtb r3,r3
 1347 0084 1A1C     	 mov r2,r3
 1348 0086 0123     	 mov r3,#1
 1349 0088 1340     	 and r3,r2
 1350 008a 07D0     	 beq .L58
 158:../interconnect/pcs/pcs_op.c **** 		{
 159:../interconnect/pcs/pcs_op.c **** 			param.acinv_system_warning = INV_WARN_MCU_OV;
 1351              	 .loc 3 159 0
 1352 008c 0C23     	 mov r3,#12
 1353 008e FB18     	 add r3,r7,r3
 1354 0090 0122     	 mov r2,#1
 1355 0092 5A70     	 strb r2,[r3,#1]
 160:../interconnect/pcs/pcs_op.c **** 			param.acinv_system_pcsIsStandBy = true;
 1356              	 .loc 3 160 0
 1357 0094 0C23     	 mov r3,#12
 1358 0096 FB18     	 add r3,r7,r3
 1359 0098 0122     	 mov r2,#1
 1360 009a DA70     	 strb r2,[r3,#3]
 1361              	.L58:
 161:../interconnect/pcs/pcs_op.c **** 		}
 162:../interconnect/pcs/pcs_op.c **** 	if((status>>3)&0x01){param.acinv_system_warning = INV_WARN_OT;}
 1362              	 .loc 3 162 0
 1363 009c 1723     	 mov r3,#23
 1364 009e FB18     	 add r3,r7,r3
 1365 00a0 1B78     	 ldrb r3,[r3]
 1366 00a2 DB08     	 lsr r3,r3,#3
 1367 00a4 DBB2     	 uxtb r3,r3
 1368 00a6 1A1C     	 mov r2,r3
 1369 00a8 0123     	 mov r3,#1
 1370 00aa 1340     	 and r3,r2
 1371 00ac 03D0     	 beq .L59
 1372              	 .loc 3 162 0 is_stmt 0 discriminator 1
 1373 00ae 0C23     	 mov r3,#12
 1374 00b0 FB18     	 add r3,r7,r3
 1375 00b2 0222     	 mov r2,#2
 1376 00b4 5A70     	 strb r2,[r3,#1]
 1377              	.L59:
 163:../interconnect/pcs/pcs_op.c **** 	if((status>>2)&0x01){param.acinv_system_warning = INV_WARN_OV;}
 1378              	 .loc 3 163 0 is_stmt 1
 1379 00b6 1723     	 mov r3,#23
 1380 00b8 FB18     	 add r3,r7,r3
 1381 00ba 1B78     	 ldrb r3,[r3]
 1382 00bc 9B08     	 lsr r3,r3,#2
 1383 00be DBB2     	 uxtb r3,r3
 1384 00c0 1A1C     	 mov r2,r3
 1385 00c2 0123     	 mov r3,#1
 1386 00c4 1340     	 and r3,r2
 1387 00c6 03D0     	 beq .L60
 1388              	 .loc 3 163 0 is_stmt 0 discriminator 1
 1389 00c8 0C23     	 mov r3,#12
 1390 00ca FB18     	 add r3,r7,r3
 1391 00cc 0322     	 mov r2,#3
 1392 00ce 5A70     	 strb r2,[r3,#1]
 1393              	.L60:
 164:../interconnect/pcs/pcs_op.c **** 	if((status>>1)&0x01){param.acinv_system_warning = INV_WARN_UV;}
 1394              	 .loc 3 164 0 is_stmt 1
 1395 00d0 1723     	 mov r3,#23
 1396 00d2 FB18     	 add r3,r7,r3
 1397 00d4 1B78     	 ldrb r3,[r3]
 1398 00d6 5B08     	 lsr r3,r3,#1
 1399 00d8 DBB2     	 uxtb r3,r3
 1400 00da 1A1C     	 mov r2,r3
 1401 00dc 0123     	 mov r3,#1
 1402 00de 1340     	 and r3,r2
 1403 00e0 03D0     	 beq .L61
 1404              	 .loc 3 164 0 is_stmt 0 discriminator 1
 1405 00e2 0C23     	 mov r3,#12
 1406 00e4 FB18     	 add r3,r7,r3
 1407 00e6 0422     	 mov r2,#4
 1408 00e8 5A70     	 strb r2,[r3,#1]
 1409              	.L61:
 165:../interconnect/pcs/pcs_op.c **** 	if((status)&0x01){param.acinv_system_warning = INV_WARN_OL;}
 1410              	 .loc 3 165 0 is_stmt 1
 1411 00ea 1723     	 mov r3,#23
 1412 00ec FB18     	 add r3,r7,r3
 1413 00ee 1B78     	 ldrb r3,[r3]
 1414 00f0 0122     	 mov r2,#1
 1415 00f2 1340     	 and r3,r2
 1416 00f4 03D0     	 beq .L62
 1417              	 .loc 3 165 0 is_stmt 0 discriminator 1
 1418 00f6 0C23     	 mov r3,#12
 1419 00f8 FB18     	 add r3,r7,r3
 1420 00fa 0522     	 mov r2,#5
 1421 00fc 5A70     	 strb r2,[r3,#1]
 1422              	.L62:
 166:../interconnect/pcs/pcs_op.c **** 
 167:../interconnect/pcs/pcs_op.c **** 	return param;
 1423              	 .loc 3 167 0 is_stmt 1
 1424 00fe 1023     	 mov r3,#16
 1425 0100 FB18     	 add r3,r7,r3
 1426 0102 0C22     	 mov r2,#12
 1427 0104 BA18     	 add r2,r7,r2
 1428 0106 1268     	 ldr r2,[r2]
 1429 0108 1A60     	 str r2,[r3]
 1430 010a 1023     	 mov r3,#16
 1431 010c FA18     	 add r2,r7,r3
 1432 010e 0023     	 mov r3,#0
 1433 0110 1178     	 ldrb r1,[r2]
 1434 0112 FF20     	 mov r0,#255
 1435 0114 0140     	 and r1,r0
 1436 0116 FF20     	 mov r0,#255
 1437 0118 8343     	 bic r3,r0
 1438 011a 0B43     	 orr r3,r1
 1439 011c 5178     	 ldrb r1,[r2,#1]
 1440 011e FF20     	 mov r0,#255
 1441 0120 0140     	 and r1,r0
 1442 0122 0902     	 lsl r1,r1,#8
 1443 0124 0948     	 ldr r0,.L64
 1444 0126 0340     	 and r3,r0
 1445 0128 0B43     	 orr r3,r1
 1446 012a 9178     	 ldrb r1,[r2,#2]
 1447 012c FF20     	 mov r0,#255
 1448 012e 0140     	 and r1,r0
 1449 0130 0904     	 lsl r1,r1,#16
 1450 0132 0748     	 ldr r0,.L64+4
 1451 0134 0340     	 and r3,r0
 1452 0136 0B43     	 orr r3,r1
 1453 0138 D278     	 ldrb r2,[r2,#3]
 1454 013a 1206     	 lsl r2,r2,#24
 1455 013c 1B02     	 lsl r3,r3,#8
 1456 013e 1B0A     	 lsr r3,r3,#8
 1457 0140 1343     	 orr r3,r2
 168:../interconnect/pcs/pcs_op.c **** }
 1458              	 .loc 3 168 0
 1459 0142 181C     	 mov r0,r3
 1460 0144 BD46     	 mov sp,r7
 1461 0146 06B0     	 add sp,sp,#24
 1462              	 
 1463 0148 80BD     	 pop {r7,pc}
 1464              	.L65:
 1465 014a C046     	 .align 2
 1466              	.L64:
 1467 014c FF00FFFF 	 .word -65281
 1468 0150 FFFF00FF 	 .word -16711681
 1469              	 .cfi_endproc
 1470              	.LFE292:
 1472              	 .section .text.PCS_GetPVConvStatus,"ax",%progbits
 1473              	 .align 2
 1474              	 .global PCS_GetPVConvStatus
 1475              	 .code 16
 1476              	 .thumb_func
 1478              	PCS_GetPVConvStatus:
 1479              	.LFB293:
 169:../interconnect/pcs/pcs_op.c **** 
 170:../interconnect/pcs/pcs_op.c **** PVCONV_STATUS_t 	PCS_GetPVConvStatus(XMC_CAN_MO_t *can_m0_obj)
 171:../interconnect/pcs/pcs_op.c **** {
 1480              	 .loc 3 171 0
 1481              	 .cfi_startproc
 1482 0000 80B5     	 push {r7,lr}
 1483              	.LCFI38:
 1484              	 .cfi_def_cfa_offset 8
 1485              	 .cfi_offset 7,-8
 1486              	 .cfi_offset 14,-4
 1487 0002 86B0     	 sub sp,sp,#24
 1488              	.LCFI39:
 1489              	 .cfi_def_cfa_offset 32
 1490 0004 00AF     	 add r7,sp,#0
 1491              	.LCFI40:
 1492              	 .cfi_def_cfa_register 7
 1493 0006 7860     	 str r0,[r7,#4]
 172:../interconnect/pcs/pcs_op.c **** 	PVCONV_STATUS_t param;
 173:../interconnect/pcs/pcs_op.c **** 	uint8_t		   status;
 174:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[0];
 1494              	 .loc 3 174 0
 1495 0008 1723     	 mov r3,#23
 1496 000a FB18     	 add r3,r7,r3
 1497 000c 7A68     	 ldr r2,[r7,#4]
 1498 000e 127C     	 ldrb r2,[r2,#16]
 1499 0010 1A70     	 strb r2,[r3]
 175:../interconnect/pcs/pcs_op.c **** 	if 		(status<=3) 				{param.pvconv_system_status = PV_STAT_NOT_RUNNING;}
 1500              	 .loc 3 175 0
 1501 0012 1723     	 mov r3,#23
 1502 0014 FB18     	 add r3,r7,r3
 1503 0016 1B78     	 ldrb r3,[r3]
 1504 0018 032B     	 cmp r3,#3
 1505 001a 04D8     	 bhi .L67
 1506              	 .loc 3 175 0 is_stmt 0 discriminator 1
 1507 001c 0C23     	 mov r3,#12
 1508 001e FB18     	 add r3,r7,r3
 1509 0020 0022     	 mov r2,#0
 1510 0022 1A70     	 strb r2,[r3]
 1511 0024 0DE0     	 b .L68
 1512              	.L67:
 176:../interconnect/pcs/pcs_op.c **** 	else if ((status==4)||(status ==5))	{param.pvconv_system_status = PV_STAT_RUNNING;}
 1513              	 .loc 3 176 0 is_stmt 1
 1514 0026 1723     	 mov r3,#23
 1515 0028 FB18     	 add r3,r7,r3
 1516 002a 1B78     	 ldrb r3,[r3]
 1517 002c 042B     	 cmp r3,#4
 1518 002e 04D0     	 beq .L69
 1519              	 .loc 3 176 0 is_stmt 0 discriminator 2
 1520 0030 1723     	 mov r3,#23
 1521 0032 FB18     	 add r3,r7,r3
 1522 0034 1B78     	 ldrb r3,[r3]
 1523 0036 052B     	 cmp r3,#5
 1524 0038 03D1     	 bne .L68
 1525              	.L69:
 1526              	 .loc 3 176 0 discriminator 3
 1527 003a 0C23     	 mov r3,#12
 1528 003c FB18     	 add r3,r7,r3
 1529 003e 0422     	 mov r2,#4
 1530 0040 1A70     	 strb r2,[r3]
 1531              	.L68:
 177:../interconnect/pcs/pcs_op.c **** 
 178:../interconnect/pcs/pcs_op.c **** 	param.pvconv_system_warning = PV_WARN_NORMAL;
 1532              	 .loc 3 178 0 is_stmt 1
 1533 0042 0C23     	 mov r3,#12
 1534 0044 FB18     	 add r3,r7,r3
 1535 0046 0022     	 mov r2,#0
 1536 0048 5A70     	 strb r2,[r3,#1]
 179:../interconnect/pcs/pcs_op.c **** 	param.pvconv_system_pcsIsStandBy = false;
 1537              	 .loc 3 179 0
 1538 004a 0C23     	 mov r3,#12
 1539 004c FB18     	 add r3,r7,r3
 1540 004e 0022     	 mov r2,#0
 1541 0050 DA70     	 strb r2,[r3,#3]
 180:../interconnect/pcs/pcs_op.c **** 
 181:../interconnect/pcs/pcs_op.c **** 	/* check the warning status */
 182:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[2];
 1542              	 .loc 3 182 0
 1543 0052 1723     	 mov r3,#23
 1544 0054 FB18     	 add r3,r7,r3
 1545 0056 7A68     	 ldr r2,[r7,#4]
 1546 0058 927C     	 ldrb r2,[r2,#18]
 1547 005a 1A70     	 strb r2,[r3]
 183:../interconnect/pcs/pcs_op.c **** 	if((status>>7)&0x01){param.pvconv_system_warning = PV_WARN_OV;}
 1548              	 .loc 3 183 0
 1549 005c 1723     	 mov r3,#23
 1550 005e FB18     	 add r3,r7,r3
 1551 0060 1B78     	 ldrb r3,[r3]
 1552 0062 DB09     	 lsr r3,r3,#7
 1553 0064 DBB2     	 uxtb r3,r3
 1554 0066 1A1C     	 mov r2,r3
 1555 0068 0123     	 mov r3,#1
 1556 006a 1340     	 and r3,r2
 1557 006c 03D0     	 beq .L70
 1558              	 .loc 3 183 0 is_stmt 0 discriminator 1
 1559 006e 0C23     	 mov r3,#12
 1560 0070 FB18     	 add r3,r7,r3
 1561 0072 0122     	 mov r2,#1
 1562 0074 5A70     	 strb r2,[r3,#1]
 1563              	.L70:
 184:../interconnect/pcs/pcs_op.c **** 	if((status>>6)&0x01){param.pvconv_system_warning = PV_WARN_OC;}
 1564              	 .loc 3 184 0 is_stmt 1
 1565 0076 1723     	 mov r3,#23
 1566 0078 FB18     	 add r3,r7,r3
 1567 007a 1B78     	 ldrb r3,[r3]
 1568 007c 9B09     	 lsr r3,r3,#6
 1569 007e DBB2     	 uxtb r3,r3
 1570 0080 1A1C     	 mov r2,r3
 1571 0082 0123     	 mov r3,#1
 1572 0084 1340     	 and r3,r2
 1573 0086 03D0     	 beq .L71
 1574              	 .loc 3 184 0 is_stmt 0 discriminator 1
 1575 0088 0C23     	 mov r3,#12
 1576 008a FB18     	 add r3,r7,r3
 1577 008c 0222     	 mov r2,#2
 1578 008e 5A70     	 strb r2,[r3,#1]
 1579              	.L71:
 185:../interconnect/pcs/pcs_op.c **** 
 186:../interconnect/pcs/pcs_op.c **** 	return param;
 1580              	 .loc 3 186 0 is_stmt 1
 1581 0090 1023     	 mov r3,#16
 1582 0092 FB18     	 add r3,r7,r3
 1583 0094 0C22     	 mov r2,#12
 1584 0096 BA18     	 add r2,r7,r2
 1585 0098 1268     	 ldr r2,[r2]
 1586 009a 1A60     	 str r2,[r3]
 1587 009c 1023     	 mov r3,#16
 1588 009e FA18     	 add r2,r7,r3
 1589 00a0 0023     	 mov r3,#0
 1590 00a2 1178     	 ldrb r1,[r2]
 1591 00a4 FF20     	 mov r0,#255
 1592 00a6 0140     	 and r1,r0
 1593 00a8 FF20     	 mov r0,#255
 1594 00aa 8343     	 bic r3,r0
 1595 00ac 0B43     	 orr r3,r1
 1596 00ae 5178     	 ldrb r1,[r2,#1]
 1597 00b0 FF20     	 mov r0,#255
 1598 00b2 0140     	 and r1,r0
 1599 00b4 0902     	 lsl r1,r1,#8
 1600 00b6 0948     	 ldr r0,.L73
 1601 00b8 0340     	 and r3,r0
 1602 00ba 0B43     	 orr r3,r1
 1603 00bc 9178     	 ldrb r1,[r2,#2]
 1604 00be FF20     	 mov r0,#255
 1605 00c0 0140     	 and r1,r0
 1606 00c2 0904     	 lsl r1,r1,#16
 1607 00c4 0648     	 ldr r0,.L73+4
 1608 00c6 0340     	 and r3,r0
 1609 00c8 0B43     	 orr r3,r1
 1610 00ca D278     	 ldrb r2,[r2,#3]
 1611 00cc 1206     	 lsl r2,r2,#24
 1612 00ce 1B02     	 lsl r3,r3,#8
 1613 00d0 1B0A     	 lsr r3,r3,#8
 1614 00d2 1343     	 orr r3,r2
 187:../interconnect/pcs/pcs_op.c **** }
 1615              	 .loc 3 187 0
 1616 00d4 181C     	 mov r0,r3
 1617 00d6 BD46     	 mov sp,r7
 1618 00d8 06B0     	 add sp,sp,#24
 1619              	 
 1620 00da 80BD     	 pop {r7,pc}
 1621              	.L74:
 1622              	 .align 2
 1623              	.L73:
 1624 00dc FF00FFFF 	 .word -65281
 1625 00e0 FFFF00FF 	 .word -16711681
 1626              	 .cfi_endproc
 1627              	.LFE293:
 1629              	 .section .text.PCS_GetBatConvStatus,"ax",%progbits
 1630              	 .align 2
 1631              	 .global PCS_GetBatConvStatus
 1632              	 .code 16
 1633              	 .thumb_func
 1635              	PCS_GetBatConvStatus:
 1636              	.LFB294:
 188:../interconnect/pcs/pcs_op.c **** 
 189:../interconnect/pcs/pcs_op.c **** BATCONV_STATUS_t 	PCS_GetBatConvStatus(XMC_CAN_MO_t *can_m0_obj)
 190:../interconnect/pcs/pcs_op.c **** {
 1637              	 .loc 3 190 0
 1638              	 .cfi_startproc
 1639 0000 80B5     	 push {r7,lr}
 1640              	.LCFI41:
 1641              	 .cfi_def_cfa_offset 8
 1642              	 .cfi_offset 7,-8
 1643              	 .cfi_offset 14,-4
 1644 0002 86B0     	 sub sp,sp,#24
 1645              	.LCFI42:
 1646              	 .cfi_def_cfa_offset 32
 1647 0004 00AF     	 add r7,sp,#0
 1648              	.LCFI43:
 1649              	 .cfi_def_cfa_register 7
 1650 0006 7860     	 str r0,[r7,#4]
 191:../interconnect/pcs/pcs_op.c **** 	BATCONV_STATUS_t param;
 192:../interconnect/pcs/pcs_op.c **** 	uint8_t		   status;
 193:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[0];
 1651              	 .loc 3 193 0
 1652 0008 1723     	 mov r3,#23
 1653 000a FB18     	 add r3,r7,r3
 1654 000c 7A68     	 ldr r2,[r7,#4]
 1655 000e 127C     	 ldrb r2,[r2,#16]
 1656 0010 1A70     	 strb r2,[r3]
 194:../interconnect/pcs/pcs_op.c **** 	if (status<=3) 						{param.batconv_system_status = BATCONV_STAT_NOT_RUNNING;}
 1657              	 .loc 3 194 0
 1658 0012 1723     	 mov r3,#23
 1659 0014 FB18     	 add r3,r7,r3
 1660 0016 1B78     	 ldrb r3,[r3]
 1661 0018 032B     	 cmp r3,#3
 1662 001a 04D8     	 bhi .L76
 1663              	 .loc 3 194 0 is_stmt 0 discriminator 1
 1664 001c 0C23     	 mov r3,#12
 1665 001e FB18     	 add r3,r7,r3
 1666 0020 0022     	 mov r2,#0
 1667 0022 1A70     	 strb r2,[r3]
 1668 0024 0DE0     	 b .L77
 1669              	.L76:
 195:../interconnect/pcs/pcs_op.c **** 	else if((status==4)||(status ==5))	{param.batconv_system_status = BATCONV_STAT_RUNNING;}
 1670              	 .loc 3 195 0 is_stmt 1
 1671 0026 1723     	 mov r3,#23
 1672 0028 FB18     	 add r3,r7,r3
 1673 002a 1B78     	 ldrb r3,[r3]
 1674 002c 042B     	 cmp r3,#4
 1675 002e 04D0     	 beq .L78
 1676              	 .loc 3 195 0 is_stmt 0 discriminator 2
 1677 0030 1723     	 mov r3,#23
 1678 0032 FB18     	 add r3,r7,r3
 1679 0034 1B78     	 ldrb r3,[r3]
 1680 0036 052B     	 cmp r3,#5
 1681 0038 03D1     	 bne .L77
 1682              	.L78:
 1683              	 .loc 3 195 0 discriminator 3
 1684 003a 0C23     	 mov r3,#12
 1685 003c FB18     	 add r3,r7,r3
 1686 003e 0422     	 mov r2,#4
 1687 0040 1A70     	 strb r2,[r3]
 1688              	.L77:
 196:../interconnect/pcs/pcs_op.c **** 
 197:../interconnect/pcs/pcs_op.c **** 	param.batconv_system_warning = BATCONV_WARN_NORMAL;
 1689              	 .loc 3 197 0 is_stmt 1
 1690 0042 0C23     	 mov r3,#12
 1691 0044 FB18     	 add r3,r7,r3
 1692 0046 0022     	 mov r2,#0
 1693 0048 5A70     	 strb r2,[r3,#1]
 198:../interconnect/pcs/pcs_op.c **** 	param.batconv_system_pcsIsStandBy = false;
 1694              	 .loc 3 198 0
 1695 004a 0C23     	 mov r3,#12
 1696 004c FB18     	 add r3,r7,r3
 1697 004e 0022     	 mov r2,#0
 1698 0050 DA70     	 strb r2,[r3,#3]
 199:../interconnect/pcs/pcs_op.c **** 
 200:../interconnect/pcs/pcs_op.c **** 	/* check the warning status */
 201:../interconnect/pcs/pcs_op.c **** 	status = can_m0_obj->can_data_byte[2];
 1699              	 .loc 3 201 0
 1700 0052 1723     	 mov r3,#23
 1701 0054 FB18     	 add r3,r7,r3
 1702 0056 7A68     	 ldr r2,[r7,#4]
 1703 0058 927C     	 ldrb r2,[r2,#18]
 1704 005a 1A70     	 strb r2,[r3]
 202:../interconnect/pcs/pcs_op.c **** 	if((status>>7)&0x01)
 1705              	 .loc 3 202 0
 1706 005c 1723     	 mov r3,#23
 1707 005e FB18     	 add r3,r7,r3
 1708 0060 1B78     	 ldrb r3,[r3]
 1709 0062 DB09     	 lsr r3,r3,#7
 1710 0064 DBB2     	 uxtb r3,r3
 1711 0066 1A1C     	 mov r2,r3
 1712 0068 0123     	 mov r3,#1
 1713 006a 1340     	 and r3,r2
 1714 006c 07D0     	 beq .L79
 203:../interconnect/pcs/pcs_op.c **** 		{
 204:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_warning = BATCONV_WARN_OV;
 1715              	 .loc 3 204 0
 1716 006e 0C23     	 mov r3,#12
 1717 0070 FB18     	 add r3,r7,r3
 1718 0072 0122     	 mov r2,#1
 1719 0074 5A70     	 strb r2,[r3,#1]
 205:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_pcsIsStandBy = true;
 1720              	 .loc 3 205 0
 1721 0076 0C23     	 mov r3,#12
 1722 0078 FB18     	 add r3,r7,r3
 1723 007a 0122     	 mov r2,#1
 1724 007c DA70     	 strb r2,[r3,#3]
 1725              	.L79:
 206:../interconnect/pcs/pcs_op.c **** 		}
 207:../interconnect/pcs/pcs_op.c **** 	if((status>>6)&0x01)
 1726              	 .loc 3 207 0
 1727 007e 1723     	 mov r3,#23
 1728 0080 FB18     	 add r3,r7,r3
 1729 0082 1B78     	 ldrb r3,[r3]
 1730 0084 9B09     	 lsr r3,r3,#6
 1731 0086 DBB2     	 uxtb r3,r3
 1732 0088 1A1C     	 mov r2,r3
 1733 008a 0123     	 mov r3,#1
 1734 008c 1340     	 and r3,r2
 1735 008e 07D0     	 beq .L80
 208:../interconnect/pcs/pcs_op.c **** 		{
 209:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_warning = BATCONV_WARN_OC;
 1736              	 .loc 3 209 0
 1737 0090 0C23     	 mov r3,#12
 1738 0092 FB18     	 add r3,r7,r3
 1739 0094 0222     	 mov r2,#2
 1740 0096 5A70     	 strb r2,[r3,#1]
 210:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_pcsIsStandBy = true;
 1741              	 .loc 3 210 0
 1742 0098 0C23     	 mov r3,#12
 1743 009a FB18     	 add r3,r7,r3
 1744 009c 0122     	 mov r2,#1
 1745 009e DA70     	 strb r2,[r3,#3]
 1746              	.L80:
 211:../interconnect/pcs/pcs_op.c **** 		}
 212:../interconnect/pcs/pcs_op.c **** 	if((status>>5)&0x01)
 1747              	 .loc 3 212 0
 1748 00a0 1723     	 mov r3,#23
 1749 00a2 FB18     	 add r3,r7,r3
 1750 00a4 1B78     	 ldrb r3,[r3]
 1751 00a6 5B09     	 lsr r3,r3,#5
 1752 00a8 DBB2     	 uxtb r3,r3
 1753 00aa 1A1C     	 mov r2,r3
 1754 00ac 0123     	 mov r3,#1
 1755 00ae 1340     	 and r3,r2
 1756 00b0 07D0     	 beq .L81
 213:../interconnect/pcs/pcs_op.c **** 		{
 214:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_warning = BATCONV_WARN_DCDC_OV;
 1757              	 .loc 3 214 0
 1758 00b2 0C23     	 mov r3,#12
 1759 00b4 FB18     	 add r3,r7,r3
 1760 00b6 0322     	 mov r2,#3
 1761 00b8 5A70     	 strb r2,[r3,#1]
 215:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_pcsIsStandBy = true;
 1762              	 .loc 3 215 0
 1763 00ba 0C23     	 mov r3,#12
 1764 00bc FB18     	 add r3,r7,r3
 1765 00be 0122     	 mov r2,#1
 1766 00c0 DA70     	 strb r2,[r3,#3]
 1767              	.L81:
 216:../interconnect/pcs/pcs_op.c **** 		}
 217:../interconnect/pcs/pcs_op.c **** 	if((status>>2)&0x01)
 1768              	 .loc 3 217 0
 1769 00c2 1723     	 mov r3,#23
 1770 00c4 FB18     	 add r3,r7,r3
 1771 00c6 1B78     	 ldrb r3,[r3]
 1772 00c8 9B08     	 lsr r3,r3,#2
 1773 00ca DBB2     	 uxtb r3,r3
 1774 00cc 1A1C     	 mov r2,r3
 1775 00ce 0123     	 mov r3,#1
 1776 00d0 1340     	 and r3,r2
 1777 00d2 07D0     	 beq .L82
 218:../interconnect/pcs/pcs_op.c **** 		{
 219:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_warning = BATCONV_WARN_DCDC_OT;
 1778              	 .loc 3 219 0
 1779 00d4 0C23     	 mov r3,#12
 1780 00d6 FB18     	 add r3,r7,r3
 1781 00d8 0422     	 mov r2,#4
 1782 00da 5A70     	 strb r2,[r3,#1]
 220:../interconnect/pcs/pcs_op.c **** 			param.batconv_system_pcsIsStandBy = true;
 1783              	 .loc 3 220 0
 1784 00dc 0C23     	 mov r3,#12
 1785 00de FB18     	 add r3,r7,r3
 1786 00e0 0122     	 mov r2,#1
 1787 00e2 DA70     	 strb r2,[r3,#3]
 1788              	.L82:
 221:../interconnect/pcs/pcs_op.c **** 		}
 222:../interconnect/pcs/pcs_op.c **** 
 223:../interconnect/pcs/pcs_op.c **** 	return param;
 1789              	 .loc 3 223 0
 1790 00e4 1023     	 mov r3,#16
 1791 00e6 FB18     	 add r3,r7,r3
 1792 00e8 0C22     	 mov r2,#12
 1793 00ea BA18     	 add r2,r7,r2
 1794 00ec 1268     	 ldr r2,[r2]
 1795 00ee 1A60     	 str r2,[r3]
 1796 00f0 1023     	 mov r3,#16
 1797 00f2 FA18     	 add r2,r7,r3
 1798 00f4 0023     	 mov r3,#0
 1799 00f6 1178     	 ldrb r1,[r2]
 1800 00f8 FF20     	 mov r0,#255
 1801 00fa 0140     	 and r1,r0
 1802 00fc FF20     	 mov r0,#255
 1803 00fe 8343     	 bic r3,r0
 1804 0100 0B43     	 orr r3,r1
 1805 0102 5178     	 ldrb r1,[r2,#1]
 1806 0104 FF20     	 mov r0,#255
 1807 0106 0140     	 and r1,r0
 1808 0108 0902     	 lsl r1,r1,#8
 1809 010a 0948     	 ldr r0,.L84
 1810 010c 0340     	 and r3,r0
 1811 010e 0B43     	 orr r3,r1
 1812 0110 9178     	 ldrb r1,[r2,#2]
 1813 0112 FF20     	 mov r0,#255
 1814 0114 0140     	 and r1,r0
 1815 0116 0904     	 lsl r1,r1,#16
 1816 0118 0648     	 ldr r0,.L84+4
 1817 011a 0340     	 and r3,r0
 1818 011c 0B43     	 orr r3,r1
 1819 011e D278     	 ldrb r2,[r2,#3]
 1820 0120 1206     	 lsl r2,r2,#24
 1821 0122 1B02     	 lsl r3,r3,#8
 1822 0124 1B0A     	 lsr r3,r3,#8
 1823 0126 1343     	 orr r3,r2
 224:../interconnect/pcs/pcs_op.c **** }
 1824              	 .loc 3 224 0
 1825 0128 181C     	 mov r0,r3
 1826 012a BD46     	 mov sp,r7
 1827 012c 06B0     	 add sp,sp,#24
 1828              	 
 1829 012e 80BD     	 pop {r7,pc}
 1830              	.L85:
 1831              	 .align 2
 1832              	.L84:
 1833 0130 FF00FFFF 	 .word -65281
 1834 0134 FFFF00FF 	 .word -16711681
 1835              	 .cfi_endproc
 1836              	.LFE294:
 1838              	 .section .text.PCS_GetVoltParam,"ax",%progbits
 1839              	 .align 2
 1840              	 .global PCS_GetVoltParam
 1841              	 .code 16
 1842              	 .thumb_func
 1844              	PCS_GetVoltParam:
 1845              	.LFB295:
 225:../interconnect/pcs/pcs_op.c **** 
 226:../interconnect/pcs/pcs_op.c **** PCS_VOLTAGE_PARAM_t	PCS_GetVoltParam(XMC_CAN_MO_t *can_m0_obj)
 227:../interconnect/pcs/pcs_op.c **** {
 1846              	 .loc 3 227 0
 1847              	 .cfi_startproc
 1848 0000 80B5     	 push {r7,lr}
 1849              	.LCFI44:
 1850              	 .cfi_def_cfa_offset 8
 1851              	 .cfi_offset 7,-8
 1852              	 .cfi_offset 14,-4
 1853 0002 84B0     	 sub sp,sp,#16
 1854              	.LCFI45:
 1855              	 .cfi_def_cfa_offset 24
 1856 0004 00AF     	 add r7,sp,#0
 1857              	.LCFI46:
 1858              	 .cfi_def_cfa_register 7
 1859 0006 7860     	 str r0,[r7,#4]
 1860 0008 3960     	 str r1,[r7]
 228:../interconnect/pcs/pcs_op.c **** 	PCS_VOLTAGE_PARAM_t param;
 229:../interconnect/pcs/pcs_op.c **** 
 230:../interconnect/pcs/pcs_op.c **** 	param.vdcGrid 	= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 1861              	 .loc 3 230 0
 1862 000a 3B68     	 ldr r3,[r7]
 1863 000c 1B7C     	 ldrb r3,[r3,#16]
 1864 000e 1B02     	 lsl r3,r3,#8
 1865 0010 9AB2     	 uxth r2,r3
 1866 0012 3B68     	 ldr r3,[r7]
 1867 0014 5B7C     	 ldrb r3,[r3,#17]
 1868 0016 9BB2     	 uxth r3,r3
 1869 0018 1343     	 orr r3,r2
 1870 001a 9BB2     	 uxth r3,r3
 1871 001c 9AB2     	 uxth r2,r3
 1872 001e 0823     	 mov r3,#8
 1873 0020 FB18     	 add r3,r7,r3
 1874 0022 1A80     	 strh r2,[r3]
 231:../interconnect/pcs/pcs_op.c **** 	param.vacOut  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 1875              	 .loc 3 231 0
 1876 0024 3B68     	 ldr r3,[r7]
 1877 0026 9B7C     	 ldrb r3,[r3,#18]
 1878 0028 1B02     	 lsl r3,r3,#8
 1879 002a 9AB2     	 uxth r2,r3
 1880 002c 3B68     	 ldr r3,[r7]
 1881 002e DB7C     	 ldrb r3,[r3,#19]
 1882 0030 9BB2     	 uxth r3,r3
 1883 0032 1343     	 orr r3,r2
 1884 0034 9BB2     	 uxth r3,r3
 1885 0036 9AB2     	 uxth r2,r3
 1886 0038 0823     	 mov r3,#8
 1887 003a FB18     	 add r3,r7,r3
 1888 003c 5A80     	 strh r2,[r3,#2]
 232:../interconnect/pcs/pcs_op.c **** 	param.vPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 1889              	 .loc 3 232 0
 1890 003e 3B68     	 ldr r3,[r7]
 1891 0040 1B7D     	 ldrb r3,[r3,#20]
 1892 0042 1B02     	 lsl r3,r3,#8
 1893 0044 9AB2     	 uxth r2,r3
 1894 0046 3B68     	 ldr r3,[r7]
 1895 0048 5B7D     	 ldrb r3,[r3,#21]
 1896 004a 9BB2     	 uxth r3,r3
 1897 004c 1343     	 orr r3,r2
 1898 004e 9BB2     	 uxth r3,r3
 1899 0050 9AB2     	 uxth r2,r3
 1900 0052 0823     	 mov r3,#8
 1901 0054 FB18     	 add r3,r7,r3
 1902 0056 9A80     	 strh r2,[r3,#4]
 233:../interconnect/pcs/pcs_op.c **** 	param.vbat  	= ((uint16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 1903              	 .loc 3 233 0
 1904 0058 3B68     	 ldr r3,[r7]
 1905 005a 9B7D     	 ldrb r3,[r3,#22]
 1906 005c 1B02     	 lsl r3,r3,#8
 1907 005e 9AB2     	 uxth r2,r3
 1908 0060 3B68     	 ldr r3,[r7]
 1909 0062 DB7D     	 ldrb r3,[r3,#23]
 1910 0064 9BB2     	 uxth r3,r3
 1911 0066 1343     	 orr r3,r2
 1912 0068 9BB2     	 uxth r3,r3
 1913 006a 9AB2     	 uxth r2,r3
 1914 006c 0823     	 mov r3,#8
 1915 006e FB18     	 add r3,r7,r3
 1916 0070 DA80     	 strh r2,[r3,#6]
 234:../interconnect/pcs/pcs_op.c **** 
 235:../interconnect/pcs/pcs_op.c **** 	return param;
 1917              	 .loc 3 235 0
 1918 0072 7A68     	 ldr r2,[r7,#4]
 1919 0074 0823     	 mov r3,#8
 1920 0076 FB18     	 add r3,r7,r3
 1921 0078 111C     	 mov r1,r2
 1922 007a 1A1C     	 mov r2,r3
 1923 007c 0823     	 mov r3,#8
 1924 007e 081C     	 mov r0,r1
 1925 0080 111C     	 mov r1,r2
 1926 0082 1A1C     	 mov r2,r3
 1927 0084 FFF7FEFF 	 bl memcpy
 236:../interconnect/pcs/pcs_op.c **** }
 1928              	 .loc 3 236 0
 1929 0088 7868     	 ldr r0,[r7,#4]
 1930 008a BD46     	 mov sp,r7
 1931 008c 04B0     	 add sp,sp,#16
 1932              	 
 1933 008e 80BD     	 pop {r7,pc}
 1934              	 .cfi_endproc
 1935              	.LFE295:
 1937              	 .section .text.PCS_GetAmpParam,"ax",%progbits
 1938              	 .align 2
 1939              	 .global PCS_GetAmpParam
 1940              	 .code 16
 1941              	 .thumb_func
 1943              	PCS_GetAmpParam:
 1944              	.LFB296:
 237:../interconnect/pcs/pcs_op.c **** 
 238:../interconnect/pcs/pcs_op.c **** PCS_CURRENT_PARAM_t	PCS_GetAmpParam(XMC_CAN_MO_t *can_m0_obj)
 239:../interconnect/pcs/pcs_op.c **** {
 1945              	 .loc 3 239 0
 1946              	 .cfi_startproc
 1947 0000 80B5     	 push {r7,lr}
 1948              	.LCFI47:
 1949              	 .cfi_def_cfa_offset 8
 1950              	 .cfi_offset 7,-8
 1951              	 .cfi_offset 14,-4
 1952 0002 84B0     	 sub sp,sp,#16
 1953              	.LCFI48:
 1954              	 .cfi_def_cfa_offset 24
 1955 0004 00AF     	 add r7,sp,#0
 1956              	.LCFI49:
 1957              	 .cfi_def_cfa_register 7
 1958 0006 7860     	 str r0,[r7,#4]
 1959 0008 3960     	 str r1,[r7]
 240:../interconnect/pcs/pcs_op.c **** 	PCS_CURRENT_PARAM_t param;
 241:../interconnect/pcs/pcs_op.c **** 
 242:../interconnect/pcs/pcs_op.c **** 	param.idcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 1960              	 .loc 3 242 0
 1961 000a 3B68     	 ldr r3,[r7]
 1962 000c 1B7C     	 ldrb r3,[r3,#16]
 1963 000e 1B02     	 lsl r3,r3,#8
 1964 0010 9AB2     	 uxth r2,r3
 1965 0012 3B68     	 ldr r3,[r7]
 1966 0014 5B7C     	 ldrb r3,[r3,#17]
 1967 0016 9BB2     	 uxth r3,r3
 1968 0018 1343     	 orr r3,r2
 1969 001a 9AB2     	 uxth r2,r3
 1970 001c 0823     	 mov r3,#8
 1971 001e FB18     	 add r3,r7,r3
 1972 0020 1A80     	 strh r2,[r3]
 243:../interconnect/pcs/pcs_op.c **** 	param.iacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 1973              	 .loc 3 243 0
 1974 0022 3B68     	 ldr r3,[r7]
 1975 0024 9B7C     	 ldrb r3,[r3,#18]
 1976 0026 1B02     	 lsl r3,r3,#8
 1977 0028 9AB2     	 uxth r2,r3
 1978 002a 3B68     	 ldr r3,[r7]
 1979 002c DB7C     	 ldrb r3,[r3,#19]
 1980 002e 9BB2     	 uxth r3,r3
 1981 0030 1343     	 orr r3,r2
 1982 0032 9AB2     	 uxth r2,r3
 1983 0034 0823     	 mov r3,#8
 1984 0036 FB18     	 add r3,r7,r3
 1985 0038 5A80     	 strh r2,[r3,#2]
 244:../interconnect/pcs/pcs_op.c **** 	param.iPV 		= ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 1986              	 .loc 3 244 0
 1987 003a 3B68     	 ldr r3,[r7]
 1988 003c 1B7D     	 ldrb r3,[r3,#20]
 1989 003e 1B02     	 lsl r3,r3,#8
 1990 0040 9AB2     	 uxth r2,r3
 1991 0042 3B68     	 ldr r3,[r7]
 1992 0044 5B7D     	 ldrb r3,[r3,#21]
 1993 0046 9BB2     	 uxth r3,r3
 1994 0048 1343     	 orr r3,r2
 1995 004a 9AB2     	 uxth r2,r3
 1996 004c 0823     	 mov r3,#8
 1997 004e FB18     	 add r3,r7,r3
 1998 0050 9A80     	 strh r2,[r3,#4]
 245:../interconnect/pcs/pcs_op.c **** 	param.ibat  	= ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 1999              	 .loc 3 245 0
 2000 0052 3B68     	 ldr r3,[r7]
 2001 0054 9B7D     	 ldrb r3,[r3,#22]
 2002 0056 1B02     	 lsl r3,r3,#8
 2003 0058 9AB2     	 uxth r2,r3
 2004 005a 3B68     	 ldr r3,[r7]
 2005 005c DB7D     	 ldrb r3,[r3,#23]
 2006 005e 9BB2     	 uxth r3,r3
 2007 0060 1343     	 orr r3,r2
 2008 0062 9AB2     	 uxth r2,r3
 2009 0064 0823     	 mov r3,#8
 2010 0066 FB18     	 add r3,r7,r3
 2011 0068 DA80     	 strh r2,[r3,#6]
 246:../interconnect/pcs/pcs_op.c **** 
 247:../interconnect/pcs/pcs_op.c **** 	return param;
 2012              	 .loc 3 247 0
 2013 006a 7A68     	 ldr r2,[r7,#4]
 2014 006c 0823     	 mov r3,#8
 2015 006e FB18     	 add r3,r7,r3
 2016 0070 111C     	 mov r1,r2
 2017 0072 1A1C     	 mov r2,r3
 2018 0074 0823     	 mov r3,#8
 2019 0076 081C     	 mov r0,r1
 2020 0078 111C     	 mov r1,r2
 2021 007a 1A1C     	 mov r2,r3
 2022 007c FFF7FEFF 	 bl memcpy
 248:../interconnect/pcs/pcs_op.c **** }
 2023              	 .loc 3 248 0
 2024 0080 7868     	 ldr r0,[r7,#4]
 2025 0082 BD46     	 mov sp,r7
 2026 0084 04B0     	 add sp,sp,#16
 2027              	 
 2028 0086 80BD     	 pop {r7,pc}
 2029              	 .cfi_endproc
 2030              	.LFE296:
 2032              	 .section .text.PCS_GetPowerParam,"ax",%progbits
 2033              	 .align 2
 2034              	 .global PCS_GetPowerParam
 2035              	 .code 16
 2036              	 .thumb_func
 2038              	PCS_GetPowerParam:
 2039              	.LFB297:
 249:../interconnect/pcs/pcs_op.c **** 
 250:../interconnect/pcs/pcs_op.c **** PCS_POWER_PARAM_t 	PCS_GetPowerParam(XMC_CAN_MO_t *can_m0_obj)
 251:../interconnect/pcs/pcs_op.c **** {
 2040              	 .loc 3 251 0
 2041              	 .cfi_startproc
 2042 0000 80B5     	 push {r7,lr}
 2043              	.LCFI50:
 2044              	 .cfi_def_cfa_offset 8
 2045              	 .cfi_offset 7,-8
 2046              	 .cfi_offset 14,-4
 2047 0002 84B0     	 sub sp,sp,#16
 2048              	.LCFI51:
 2049              	 .cfi_def_cfa_offset 24
 2050 0004 00AF     	 add r7,sp,#0
 2051              	.LCFI52:
 2052              	 .cfi_def_cfa_register 7
 2053 0006 7860     	 str r0,[r7,#4]
 2054 0008 3960     	 str r1,[r7]
 252:../interconnect/pcs/pcs_op.c **** 	PCS_POWER_PARAM_t param;
 253:../interconnect/pcs/pcs_op.c **** 
 254:../interconnect/pcs/pcs_op.c **** 	param.pdcGrid  = ((int16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 2055              	 .loc 3 254 0
 2056 000a 3B68     	 ldr r3,[r7]
 2057 000c 1B7C     	 ldrb r3,[r3,#16]
 2058 000e 1B02     	 lsl r3,r3,#8
 2059 0010 9AB2     	 uxth r2,r3
 2060 0012 3B68     	 ldr r3,[r7]
 2061 0014 5B7C     	 ldrb r3,[r3,#17]
 2062 0016 9BB2     	 uxth r3,r3
 2063 0018 1343     	 orr r3,r2
 2064 001a 9BB2     	 uxth r3,r3
 2065 001c 9AB2     	 uxth r2,r3
 2066 001e 0823     	 mov r3,#8
 2067 0020 FB18     	 add r3,r7,r3
 2068 0022 1A80     	 strh r2,[r3]
 255:../interconnect/pcs/pcs_op.c **** 	param.pacOut   = ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 2069              	 .loc 3 255 0
 2070 0024 3B68     	 ldr r3,[r7]
 2071 0026 9B7C     	 ldrb r3,[r3,#18]
 2072 0028 1B02     	 lsl r3,r3,#8
 2073 002a 9AB2     	 uxth r2,r3
 2074 002c 3B68     	 ldr r3,[r7]
 2075 002e DB7C     	 ldrb r3,[r3,#19]
 2076 0030 9BB2     	 uxth r3,r3
 2077 0032 1343     	 orr r3,r2
 2078 0034 9BB2     	 uxth r3,r3
 2079 0036 9AB2     	 uxth r2,r3
 2080 0038 0823     	 mov r3,#8
 2081 003a FB18     	 add r3,r7,r3
 2082 003c 5A80     	 strh r2,[r3,#2]
 256:../interconnect/pcs/pcs_op.c **** 	param.pPV 	   = ((uint16_t)(can_m0_obj->can_data_byte[4])<<8) | can_m0_obj->can_data_byte[5];
 2083              	 .loc 3 256 0
 2084 003e 3B68     	 ldr r3,[r7]
 2085 0040 1B7D     	 ldrb r3,[r3,#20]
 2086 0042 1B02     	 lsl r3,r3,#8
 2087 0044 9AB2     	 uxth r2,r3
 2088 0046 3B68     	 ldr r3,[r7]
 2089 0048 5B7D     	 ldrb r3,[r3,#21]
 2090 004a 9BB2     	 uxth r3,r3
 2091 004c 1343     	 orr r3,r2
 2092 004e 9BB2     	 uxth r3,r3
 2093 0050 9AB2     	 uxth r2,r3
 2094 0052 0823     	 mov r3,#8
 2095 0054 FB18     	 add r3,r7,r3
 2096 0056 9A80     	 strh r2,[r3,#4]
 257:../interconnect/pcs/pcs_op.c **** 	param.pbat     = ((int16_t)(can_m0_obj->can_data_byte[6])<<8) | can_m0_obj->can_data_byte[7];
 2097              	 .loc 3 257 0
 2098 0058 3B68     	 ldr r3,[r7]
 2099 005a 9B7D     	 ldrb r3,[r3,#22]
 2100 005c 1B02     	 lsl r3,r3,#8
 2101 005e 9AB2     	 uxth r2,r3
 2102 0060 3B68     	 ldr r3,[r7]
 2103 0062 DB7D     	 ldrb r3,[r3,#23]
 2104 0064 9BB2     	 uxth r3,r3
 2105 0066 1343     	 orr r3,r2
 2106 0068 9BB2     	 uxth r3,r3
 2107 006a 9AB2     	 uxth r2,r3
 2108 006c 0823     	 mov r3,#8
 2109 006e FB18     	 add r3,r7,r3
 2110 0070 DA80     	 strh r2,[r3,#6]
 258:../interconnect/pcs/pcs_op.c **** 
 259:../interconnect/pcs/pcs_op.c **** 	return param;
 2111              	 .loc 3 259 0
 2112 0072 7A68     	 ldr r2,[r7,#4]
 2113 0074 0823     	 mov r3,#8
 2114 0076 FB18     	 add r3,r7,r3
 2115 0078 111C     	 mov r1,r2
 2116 007a 1A1C     	 mov r2,r3
 2117 007c 0823     	 mov r3,#8
 2118 007e 081C     	 mov r0,r1
 2119 0080 111C     	 mov r1,r2
 2120 0082 1A1C     	 mov r2,r3
 2121 0084 FFF7FEFF 	 bl memcpy
 260:../interconnect/pcs/pcs_op.c **** }
 2122              	 .loc 3 260 0
 2123 0088 7868     	 ldr r0,[r7,#4]
 2124 008a BD46     	 mov sp,r7
 2125 008c 04B0     	 add sp,sp,#16
 2126              	 
 2127 008e 80BD     	 pop {r7,pc}
 2128              	 .cfi_endproc
 2129              	.LFE297:
 2131              	 .section .text.PCS_GetMiscParam,"ax",%progbits
 2132              	 .align 2
 2133              	 .global PCS_GetMiscParam
 2134              	 .code 16
 2135              	 .thumb_func
 2137              	PCS_GetMiscParam:
 2138              	.LFB298:
 261:../interconnect/pcs/pcs_op.c **** 
 262:../interconnect/pcs/pcs_op.c **** PCS_MISC_PARAM_t 	PCS_GetMiscParam(XMC_CAN_MO_t *can_m0_obj)
 263:../interconnect/pcs/pcs_op.c **** {
 2139              	 .loc 3 263 0
 2140              	 .cfi_startproc
 2141 0000 80B5     	 push {r7,lr}
 2142              	.LCFI53:
 2143              	 .cfi_def_cfa_offset 8
 2144              	 .cfi_offset 7,-8
 2145              	 .cfi_offset 14,-4
 2146 0002 84B0     	 sub sp,sp,#16
 2147              	.LCFI54:
 2148              	 .cfi_def_cfa_offset 24
 2149 0004 00AF     	 add r7,sp,#0
 2150              	.LCFI55:
 2151              	 .cfi_def_cfa_register 7
 2152 0006 7860     	 str r0,[r7,#4]
 264:../interconnect/pcs/pcs_op.c **** 	PCS_MISC_PARAM_t param;
 265:../interconnect/pcs/pcs_op.c **** 
 266:../interconnect/pcs/pcs_op.c **** 	param.tempPCS 		= ((uint16_t)(can_m0_obj->can_data_byte[0])<<8) | can_m0_obj->can_data_byte[1];
 2153              	 .loc 3 266 0
 2154 0008 7B68     	 ldr r3,[r7,#4]
 2155 000a 1B7C     	 ldrb r3,[r3,#16]
 2156 000c 1B02     	 lsl r3,r3,#8
 2157 000e 9AB2     	 uxth r2,r3
 2158 0010 7B68     	 ldr r3,[r7,#4]
 2159 0012 5B7C     	 ldrb r3,[r3,#17]
 2160 0014 9BB2     	 uxth r3,r3
 2161 0016 1343     	 orr r3,r2
 2162 0018 9BB2     	 uxth r3,r3
 2163 001a 9AB2     	 uxth r2,r3
 2164 001c 0823     	 mov r3,#8
 2165 001e FB18     	 add r3,r7,r3
 2166 0020 1A80     	 strh r2,[r3]
 267:../interconnect/pcs/pcs_op.c **** 	param.frequency  	= ((uint16_t)(can_m0_obj->can_data_byte[2])<<8) | can_m0_obj->can_data_byte[3];
 2167              	 .loc 3 267 0
 2168 0022 7B68     	 ldr r3,[r7,#4]
 2169 0024 9B7C     	 ldrb r3,[r3,#18]
 2170 0026 1B02     	 lsl r3,r3,#8
 2171 0028 9AB2     	 uxth r2,r3
 2172 002a 7B68     	 ldr r3,[r7,#4]
 2173 002c DB7C     	 ldrb r3,[r3,#19]
 2174 002e 9BB2     	 uxth r3,r3
 2175 0030 1343     	 orr r3,r2
 2176 0032 9BB2     	 uxth r3,r3
 2177 0034 9AB2     	 uxth r2,r3
 2178 0036 0823     	 mov r3,#8
 2179 0038 FB18     	 add r3,r7,r3
 2180 003a 5A80     	 strh r2,[r3,#2]
 268:../interconnect/pcs/pcs_op.c **** 
 269:../interconnect/pcs/pcs_op.c **** 	return param;
 2181              	 .loc 3 269 0
 2182 003c 0C23     	 mov r3,#12
 2183 003e FB18     	 add r3,r7,r3
 2184 0040 0822     	 mov r2,#8
 2185 0042 BA18     	 add r2,r7,r2
 2186 0044 1268     	 ldr r2,[r2]
 2187 0046 1A60     	 str r2,[r3]
 2188 0048 0C23     	 mov r3,#12
 2189 004a FA18     	 add r2,r7,r3
 2190 004c 0023     	 mov r3,#0
 2191 004e 1188     	 ldrh r1,[r2]
 2192 0050 0904     	 lsl r1,r1,#16
 2193 0052 090C     	 lsr r1,r1,#16
 2194 0054 1B0C     	 lsr r3,r3,#16
 2195 0056 1B04     	 lsl r3,r3,#16
 2196 0058 0B43     	 orr r3,r1
 2197 005a 5288     	 ldrh r2,[r2,#2]
 2198 005c 1204     	 lsl r2,r2,#16
 2199 005e 1B04     	 lsl r3,r3,#16
 2200 0060 1B0C     	 lsr r3,r3,#16
 2201 0062 1343     	 orr r3,r2
 270:../interconnect/pcs/pcs_op.c **** }
 2202              	 .loc 3 270 0
 2203 0064 181C     	 mov r0,r3
 2204 0066 BD46     	 mov sp,r7
 2205 0068 04B0     	 add sp,sp,#16
 2206              	 
 2207 006a 80BD     	 pop {r7,pc}
 2208              	 .cfi_endproc
 2209              	.LFE298:
 2211              	 .text
 2212              	.Letext0:
 2213              	 .file 4 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2214              	 .file 5 "d:\\software\\dave_4-4-2_64bit_2018-02-23\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2215              	 .file 6 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2216              	 .file 7 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc_usic.h"
 2217              	 .file 8 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc_gpio.h"
 2218              	 .file 9 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc1_gpio.h"
 2219              	 .file 10 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/XMCLib/inc/xmc1_scu.h"
 2220              	 .file 11 "../interconnect/pcs/pcs_op.h"
 2221              	 .file 12 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Include/cmsis_gcc.h"
 2222              	 .file 13 "C:/Users/Lenovo/workspace/dave_workspace/SOLAR_TOWER_XMC/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
 2223              	 .file 14 "../interconnect/pcs/pcs_op_conf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pcs_op.c
    {standard input}:18     .text.__NVIC_EnableIRQ:00000000 $t
    {standard input}:22     .text.__NVIC_EnableIRQ:00000000 __NVIC_EnableIRQ
    {standard input}:68     .text.__NVIC_EnableIRQ:00000030 $d
    {standard input}:73     .text.__NVIC_SetPriority:00000000 $t
    {standard input}:77     .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
    {standard input}:206    .text.__NVIC_SetPriority:000000cc $d
    {standard input}:212    .text.XMC_CAN_NODE_SetReceiveInput:00000000 $t
    {standard input}:216    .text.XMC_CAN_NODE_SetReceiveInput:00000000 XMC_CAN_NODE_SetReceiveInput
    {standard input}:260    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:264    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:296    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:300    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:333    .text.XMC_CAN_NODE_ResetInitBit:00000000 $t
    {standard input}:337    .text.XMC_CAN_NODE_ResetInitBit:00000000 XMC_CAN_NODE_ResetInitBit
    {standard input}:370    .text.XMC_CAN_MO_SetEventNodePointer:00000000 $t
    {standard input}:374    .text.XMC_CAN_MO_SetEventNodePointer:00000000 XMC_CAN_MO_SetEventNodePointer
    {standard input}:428    .text.XMC_CAN_MO_EnableEvent:00000000 $t
    {standard input}:432    .text.XMC_CAN_MO_EnableEvent:00000000 XMC_CAN_MO_EnableEvent
                            *COM*:00000008 pcs_button_config
                            *COM*:00000008 CAN0_txd_config
                            *COM*:00000008 CAN0_rxd_config
                            *COM*:0000000c can_baud
                            *COM*:00000020 msgObjToPCS
                            *COM*:00000020 msgObjFromPCS
    {standard input}:473    .text.PCS_ConnectionInit:00000000 $t
    {standard input}:478    .text.PCS_ConnectionInit:00000000 PCS_ConnectionInit
    {standard input}:595    .text.PCS_ConnectionInit:000000cc $d
    {standard input}:609    .text.PCS_BMUTransmitToPCS:00000000 $t
    {standard input}:614    .text.PCS_BMUTransmitToPCS:00000000 PCS_BMUTransmitToPCS
    {standard input}:799    .text.PCS_BMUTransmitToPCS:0000011c $d
    {standard input}:804    .text.PCS_GetPCSStatus:00000000 $t
    {standard input}:809    .text.PCS_GetPCSStatus:00000000 PCS_GetPCSStatus
    {standard input}:1056   .text.PCS_GetDCGridStatus:00000000 $t
    {standard input}:1061   .text.PCS_GetDCGridStatus:00000000 PCS_GetDCGridStatus
    {standard input}:1240   .text.PCS_GetDCGridStatus:00000110 $d
    {standard input}:1246   .text.PCS_GetACInvStatus:00000000 $t
    {standard input}:1251   .text.PCS_GetACInvStatus:00000000 PCS_GetACInvStatus
    {standard input}:1467   .text.PCS_GetACInvStatus:0000014c $d
    {standard input}:1473   .text.PCS_GetPVConvStatus:00000000 $t
    {standard input}:1478   .text.PCS_GetPVConvStatus:00000000 PCS_GetPVConvStatus
    {standard input}:1624   .text.PCS_GetPVConvStatus:000000dc $d
    {standard input}:1630   .text.PCS_GetBatConvStatus:00000000 $t
    {standard input}:1635   .text.PCS_GetBatConvStatus:00000000 PCS_GetBatConvStatus
    {standard input}:1833   .text.PCS_GetBatConvStatus:00000130 $d
    {standard input}:1839   .text.PCS_GetVoltParam:00000000 $t
    {standard input}:1844   .text.PCS_GetVoltParam:00000000 PCS_GetVoltParam
    {standard input}:1938   .text.PCS_GetAmpParam:00000000 $t
    {standard input}:1943   .text.PCS_GetAmpParam:00000000 PCS_GetAmpParam
    {standard input}:2033   .text.PCS_GetPowerParam:00000000 $t
    {standard input}:2038   .text.PCS_GetPowerParam:00000000 PCS_GetPowerParam
    {standard input}:2132   .text.PCS_GetMiscParam:00000000 $t
    {standard input}:2137   .text.PCS_GetMiscParam:00000000 PCS_GetMiscParam
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_GPIO_Init
XMC_CAN_Init
XMC_CAN_NODE_NominalBitTimeConfigure
XMC_CAN_MO_Config
XMC_SCU_SetInterruptControl
XMC_CAN_AllocateMOtoNodeList
XMC_CAN_MO_Transmit
memcpy
